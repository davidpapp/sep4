
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00003916  000039aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003916  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  0080014c  0080014c  000039f6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039f6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a28  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000377c  00000000  00000000  00003f40  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b38  00000000  00000000  000076bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000348b  00000000  00000000  000081f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0000b680  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018dc  00000000  00000000  0000c98c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b6  00000000  00000000  0000e268  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00010b1e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 de 0a 	jmp	0x15bc	; 0x15bc <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 1c 05 	jmp	0xa38	; 0xa38 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_20>
      54:	0c 94 5b 0c 	jmp	0x18b6	; 0x18b6 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__vector_28>
      74:	0c 94 0d 0d 	jmp	0x1a1a	; 0x1a1a <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	ee 02       	muls	r30, r30
      7e:	f7 02       	muls	r31, r23
      80:	0a 03       	fmul	r16, r18
      82:	15 03       	mulsu	r17, r21
      84:	28 03       	fmul	r18, r16
      86:	31 03       	mulsu	r19, r17
      88:	44 03       	mulsu	r20, r20
      8a:	4f 03       	fmul	r20, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e6 e1       	ldi	r30, 0x16	; 22
      a0:	f9 e3       	ldi	r31, 0x39	; 57
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ac e4       	ldi	r26, 0x4C	; 76
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 3d       	cpi	r26, 0xD1	; 209
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 5f 04 	call	0x8be	; 0x8be <main>
      c2:	0c 94 89 1c 	jmp	0x3912	; 0x3912 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <move_player>:
		}	
	}
	
}

void move_player(uint8_t *position, uint8_t direction){
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <move_player+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <move_player+0x8>
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9c 83       	std	Y+4, r25	; 0x04
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	81 f4       	brne	.+32     	; 0x10c <move_player+0x42>
		mask <<= *position;
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	02 c0       	rjmp	.+4      	; 0x102 <move_player+0x38>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	2a 95       	dec	r18
     104:	e2 f7       	brpl	.-8      	; 0xfe <move_player+0x34>
     106:	9a 83       	std	Y+2, r25	; 0x02
     108:	89 83       	std	Y+1, r24	; 0x01
     10a:	12 c0       	rjmp	.+36     	; 0x130 <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	31 09       	sbc	r19, r1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	02 c0       	rjmp	.+4      	; 0x128 <move_player+0x5e>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	2a 95       	dec	r18
     12a:	e2 f7       	brpl	.-8      	; 0x124 <move_player+0x5a>
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	4a e0       	ldi	r20, 0x0A	; 10
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xQueueGenericReceive>
	col_value[0] ^= mask;
     146:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     14a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	82 27       	eor	r24, r18
     154:	93 27       	eor	r25, r19
     156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     15e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     162:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
}
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <game_task>:

void game_task(void *pvParameters)
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	00 d0       	rcall	.+0      	; 0x18a <game_task+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;

	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     192:	86 e2       	ldi	r24, 0x26	; 38
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	80 74       	andi	r24, 0x40	; 64
     1a0:	99 27       	eor	r25, r25
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f5       	brne	.+88     	; 0x1fe <game_task+0x7a>
     1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1ae:	18 16       	cp	r1, r24
     1b0:	19 06       	cpc	r1, r25
     1b2:	2c f5       	brge	.+74     	; 0x1fe <game_task+0x7a>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     1b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	4a e0       	ldi	r20, 0x0A	; 10
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xQueueGenericReceive>
			--player_position;
     1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     1dc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1e0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
			move_player(&player_position, 0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8a e0       	ldi	r24, 0x0A	; 10
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     1fc:	34 c0       	rjmp	.+104    	; 0x266 <game_task+0xe2>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     1fe:	86 e2       	ldi	r24, 0x26	; 38
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	51 f5       	brne	.+84     	; 0x266 <game_task+0xe2>
     212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     21a:	08 97       	sbiw	r24, 0x08	; 8
     21c:	24 f5       	brge	.+72     	; 0x266 <game_task+0xe2>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     21e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     222:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xQueueGenericReceive>
			++player_position;
     234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
			move_player(&player_position, 1);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 65 00 	call	0xca	; 0xca <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelay(50);
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
	}	
     26e:	91 cf       	rjmp	.-222    	; 0x192 <game_task+0xe>

00000270 <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <bounce+0x6>
     276:	00 d0       	rcall	.+0      	; 0x278 <bounce+0x8>
     278:	00 d0       	rcall	.+0      	; 0x27a <bounce+0xa>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	81 70       	andi	r24, 0x01	; 1
     28e:	88 23       	and	r24, r24
     290:	d9 f4       	brne	.+54     	; 0x2c8 <bounce+0x58>
		uint8_t r = rand()%3;
     292:	0e 94 28 1c 	call	0x3850	; 0x3850 <rand>
     296:	23 e0       	ldi	r18, 0x03	; 3
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	b9 01       	movw	r22, r18
     29c:	0e 94 5f 1a 	call	0x34be	; 0x34be <__divmodhi4>
     2a0:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	8d 5f       	subi	r24, 0xFD	; 253
     2a6:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	99 81       	ldd	r25, Y+1	; 0x01
     2b2:	89 0f       	add	r24, r25
     2b4:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	87 70       	andi	r24, 0x07	; 7
     2ba:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	5e c0       	rjmp	.+188    	; 0x384 <bounce+0x114>
	}
	else{
		if (side == 0){
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	88 23       	and	r24, r24
     2cc:	71 f5       	brne	.+92     	; 0x32a <bounce+0xba>
			switch (*direction){
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	91 f0       	breq	.+36     	; 0x304 <bounce+0x94>
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	91 05       	cpc	r25, r1
     2e4:	1c f4       	brge	.+6      	; 0x2ec <bounce+0x7c>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <bounce+0x88>
     2ea:	4c c0       	rjmp	.+152    	; 0x384 <bounce+0x114>
     2ec:	85 30       	cpi	r24, 0x05	; 5
     2ee:	91 05       	cpc	r25, r1
     2f0:	79 f0       	breq	.+30     	; 0x310 <bounce+0xa0>
     2f2:	07 97       	sbiw	r24, 0x07	; 7
     2f4:	99 f0       	breq	.+38     	; 0x31c <bounce+0xac>
     2f6:	46 c0       	rjmp	.+140    	; 0x384 <bounce+0x114>
				case 1:
				*direction = 3;
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	9b 81       	ldd	r25, Y+3	; 0x03
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
				break;
     302:	12 c0       	rjmp	.+36     	; 0x328 <bounce+0xb8>
				case 3:
				*direction = 1;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	9b 81       	ldd	r25, Y+3	; 0x03
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
				break;
     30e:	0c c0       	rjmp	.+24     	; 0x328 <bounce+0xb8>
				case 5:
				*direction = 7;
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	27 e0       	ldi	r18, 0x07	; 7
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
				break;
     31a:	06 c0       	rjmp	.+12     	; 0x328 <bounce+0xb8>
				case 7:
				*direction = 5;
     31c:	8a 81       	ldd	r24, Y+2	; 0x02
     31e:	9b 81       	ldd	r25, Y+3	; 0x03
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
				break;
     326:	00 00       	nop
     328:	2d c0       	rjmp	.+90     	; 0x384 <bounce+0x114>
			}
		}
		else{
			switch (*direction){
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	91 05       	cpc	r25, r1
     33a:	91 f0       	breq	.+36     	; 0x360 <bounce+0xf0>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	91 05       	cpc	r25, r1
     340:	1c f4       	brge	.+6      	; 0x348 <bounce+0xd8>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	39 f0       	breq	.+14     	; 0x354 <bounce+0xe4>
     346:	1e c0       	rjmp	.+60     	; 0x384 <bounce+0x114>
     348:	85 30       	cpi	r24, 0x05	; 5
     34a:	91 05       	cpc	r25, r1
     34c:	79 f0       	breq	.+30     	; 0x36c <bounce+0xfc>
     34e:	07 97       	sbiw	r24, 0x07	; 7
     350:	99 f0       	breq	.+38     	; 0x378 <bounce+0x108>
     352:	18 c0       	rjmp	.+48     	; 0x384 <bounce+0x114>
				case 1:
				*direction = 7;
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	27 e0       	ldi	r18, 0x07	; 7
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
				break;
     35e:	12 c0       	rjmp	.+36     	; 0x384 <bounce+0x114>
				case 3:
				*direction = 5;
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	25 e0       	ldi	r18, 0x05	; 5
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
				break;
     36a:	0c c0       	rjmp	.+24     	; 0x384 <bounce+0x114>
				case 5:
				*direction = 3;
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	23 e0       	ldi	r18, 0x03	; 3
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
				break;
     376:	06 c0       	rjmp	.+12     	; 0x384 <bounce+0x114>
				case 7:
				*direction = 1;
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
				break;
     382:	00 00       	nop
			}
		}
	}
	
	
}
     384:	26 96       	adiw	r28, 0x06	; 6
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 d0       	rcall	.+0      	; 0x39c <move_ball+0x6>
     39c:	00 d0       	rcall	.+0      	; 0x39e <move_ball+0x8>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <move_ball+0xa>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	7e 83       	std	Y+6, r23	; 0x06
     3aa:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <move_ball+0x2e>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	2a 95       	dec	r18
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <move_ball+0x2a>
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	80 95       	com	r24
     3d2:	90 95       	com	r25
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 23       	and	r24, r24
     3e2:	a9 f5       	brne	.+106    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     3e4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     3e8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	2b 81       	ldd	r18, Y+3	; 0x03
     408:	3c 81       	ldd	r19, Y+4	; 0x04
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	22 2f       	mov	r18, r18
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	24 5f       	subi	r18, 0xF4	; 244
     418:	3e 4f       	sbci	r19, 0xFE	; 254
     41a:	f9 01       	movw	r30, r18
     41c:	40 81       	ld	r20, Z
     41e:	51 81       	ldd	r21, Z+1	; 0x01
     420:	29 81       	ldd	r18, Y+1	; 0x01
     422:	3a 81       	ldd	r19, Y+2	; 0x02
     424:	24 23       	and	r18, r20
     426:	35 23       	and	r19, r21
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	84 5f       	subi	r24, 0xF4	; 244
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	31 83       	std	Z+1, r19	; 0x01
     434:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     436:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     43a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
     44c:	1e c0       	rjmp	.+60     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	}
	else{
		col_value[current[0]] &= mask;
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	9c 81       	ldd	r25, Y+4	; 0x04
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	22 2f       	mov	r18, r18
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	24 5f       	subi	r18, 0xF4	; 244
     46c:	3e 4f       	sbci	r19, 0xFE	; 254
     46e:	f9 01       	movw	r30, r18
     470:	40 81       	ld	r20, Z
     472:	51 81       	ldd	r21, Z+1	; 0x01
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	3a 81       	ldd	r19, Y+2	; 0x02
     478:	24 23       	and	r18, r20
     47a:	35 23       	and	r19, r21
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	84 5f       	subi	r24, 0xF4	; 244
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	fc 01       	movw	r30, r24
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	fc 01       	movw	r30, r24
     490:	20 81       	ld	r18, Z
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	current[1] = next[1];
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	9c 81       	ldd	r25, Y+4	; 0x04
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	2d 81       	ldd	r18, Y+5	; 0x05
     4a2:	3e 81       	ldd	r19, Y+6	; 0x06
     4a4:	f9 01       	movw	r30, r18
     4a6:	21 81       	ldd	r18, Z+1	; 0x01
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	2a 95       	dec	r18
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	a9 f5       	brne	.+106    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     4d8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     4dc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 e3 0f 	call	0x1fc6	; 0x1fc6 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	9c 81       	ldd	r25, Y+4	; 0x04
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2b 81       	ldd	r18, Y+3	; 0x03
     4fc:	3c 81       	ldd	r19, Y+4	; 0x04
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	22 2f       	mov	r18, r18
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	24 5f       	subi	r18, 0xF4	; 244
     50c:	3e 4f       	sbci	r19, 0xFE	; 254
     50e:	f9 01       	movw	r30, r18
     510:	40 81       	ld	r20, Z
     512:	51 81       	ldd	r21, Z+1	; 0x01
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	3a 81       	ldd	r19, Y+2	; 0x02
     518:	24 2b       	or	r18, r20
     51a:	35 2b       	or	r19, r21
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	84 5f       	subi	r24, 0xF4	; 244
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	31 83       	std	Z+1, r19	; 0x01
     528:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     52a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     52e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
     540:	1e c0       	rjmp	.+60     	; 0x57e <__FUSE_REGION_LENGTH__+0x17e>
	}
	else{
		col_value[current[0]] |= mask;
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	3c 81       	ldd	r19, Y+4	; 0x04
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	22 2f       	mov	r18, r18
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	24 5f       	subi	r18, 0xF4	; 244
     560:	3e 4f       	sbci	r19, 0xFE	; 254
     562:	f9 01       	movw	r30, r18
     564:	40 81       	ld	r20, Z
     566:	51 81       	ldd	r21, Z+1	; 0x01
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	24 2b       	or	r18, r20
     56e:	35 2b       	or	r19, r21
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	84 5f       	subi	r24, 0xF4	; 244
     576:	9e 4f       	sbci	r25, 0xFE	; 254
     578:	fc 01       	movw	r30, r24
     57a:	31 83       	std	Z+1, r19	; 0x01
     57c:	20 83       	st	Z, r18
	}

	
}
     57e:	26 96       	adiw	r28, 0x06	; 6
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	00 d0       	rcall	.+0      	; 0x596 <calc_next+0x6>
     596:	00 d0       	rcall	.+0      	; 0x598 <calc_next+0x8>
     598:	00 d0       	rcall	.+0      	; 0x59a <calc_next+0xa>
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	7c 83       	std	Y+4, r23	; 0x04
     5a4:	6b 83       	std	Y+3, r22	; 0x03
     5a6:	5e 83       	std	Y+6, r21	; 0x06
     5a8:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	9e 81       	ldd	r25, Y+6	; 0x06
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	09 2e       	mov	r0, r25
     5b8:	00 0c       	add	r0, r0
     5ba:	aa 0b       	sbc	r26, r26
     5bc:	bb 0b       	sbc	r27, r27
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	27 e0       	ldi	r18, 0x07	; 7
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	84 1b       	sub	r24, r20
     5c8:	95 0b       	sbc	r25, r21
     5ca:	28 17       	cp	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <calc_next+0x42>
     5d0:	79 c0       	rjmp	.+242    	; 0x6c4 <calc_next+0x134>
     5d2:	82 5c       	subi	r24, 0xC2	; 194
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	fc 01       	movw	r30, r24
     5d8:	0c 94 95 1a 	jmp	0x352a	; 0x352a <__tablejump2__>
	{
		case 0:
			--next[1];
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 81       	ld	r18, Z
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			break;
     5ec:	6b c0       	rjmp	.+214    	; 0x6c4 <calc_next+0x134>
		case 1:
		++next[0];
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	28 0f       	add	r18, r24
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
		--next[1];
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 81       	ld	r18, Z
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
		break;
     612:	58 c0       	rjmp	.+176    	; 0x6c4 <calc_next+0x134>
		case 2:
		++next[0];
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	28 0f       	add	r18, r24
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
		break;
     628:	4d c0       	rjmp	.+154    	; 0x6c4 <calc_next+0x134>
		case 3:
		++next[0];
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	28 0f       	add	r18, r24
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
		++next[1];
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	fc 01       	movw	r30, r24
     646:	20 81       	ld	r18, Z
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
		break;
     64e:	3a c0       	rjmp	.+116    	; 0x6c4 <calc_next+0x134>
		case 4:
		++next[1];
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
		break;
     660:	31 c0       	rjmp	.+98     	; 0x6c4 <calc_next+0x134>
		case 5:
		--next[0];
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	28 0f       	add	r18, r24
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
		++next[1];
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	20 81       	ld	r18, Z
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
		break;
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <calc_next+0x134>
		case 6:
		--next[0];
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	28 0f       	add	r18, r24
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
		break;
     69c:	13 c0       	rjmp	.+38     	; 0x6c4 <calc_next+0x134>
		case 7:
		--next[0];
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	28 0f       	add	r18, r24
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
		--next[1];
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 81       	ld	r18, Z
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
		break;
     6c2:	00 00       	nop
	}
	
}
     6c4:	26 96       	adiw	r28, 0x06	; 6
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <ball_task>:

void ball_task(void *pvParameters)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	28 97       	sbiw	r28, 0x08	; 8
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	98 87       	std	Y+8, r25	; 0x08
     6ec:	8f 83       	std	Y+7, r24	; 0x07
	(void) pvParameters;

	uint8_t pos[2] = {7, 5};
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	8a 83       	std	Y+2, r24	; 0x02
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t direction = 0;
     6f6:	1c 82       	std	Y+4, r1	; 0x04
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	8e 83       	std	Y+6, r24	; 0x06
		uint8_t is_bounced = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     704:	45 c0       	rjmp	.+138    	; 0x790 <ball_task+0xba>
		{	
			is_bounced = 0;
     706:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     708:	ae 01       	movw	r20, r28
     70a:	4c 5f       	subi	r20, 0xFC	; 252
     70c:	5f 4f       	sbci	r21, 0xFF	; 255
     70e:	9e 01       	movw	r18, r28
     710:	2b 5f       	subi	r18, 0xFB	; 251
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	02 96       	adiw	r24, 0x02	; 2
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 c8 02 	call	0x590	; 0x590 <calc_next>
			
			if (next[0] > 12){
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	8d 30       	cpi	r24, 0x0D	; 13
     722:	30 f0       	brcs	.+12     	; 0x730 <ball_task+0x5a>
				bounce(&direction, 1);
     724:	ce 01       	movw	r24, r28
     726:	04 96       	adiw	r24, 0x04	; 4
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     72e:	30 c0       	rjmp	.+96     	; 0x790 <ball_task+0xba>
			}
			else if ( next[1] > 9){
     730:	8e 81       	ldd	r24, Y+6	; 0x06
     732:	8a 30       	cpi	r24, 0x0A	; 10
     734:	30 f0       	brcs	.+12     	; 0x742 <ball_task+0x6c>
				bounce(&direction, 0);
     736:	ce 01       	movw	r24, r28
     738:	04 96       	adiw	r24, 0x04	; 4
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     740:	27 c0       	rjmp	.+78     	; 0x790 <ball_task+0xba>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	88 23       	and	r24, r24
     746:	d9 f4       	brne	.+54     	; 0x77e <ball_task+0xa8>
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     752:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	59 f0       	breq	.+22     	; 0x772 <ball_task+0x9c>
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	28 2f       	mov	r18, r24
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     766:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	31 f4       	brne	.+12     	; 0x77e <ball_task+0xa8>
				bounce(&direction, 1);
     772:	ce 01       	movw	r24, r28
     774:	04 96       	adiw	r24, 0x04	; 4
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     77c:	09 c0       	rjmp	.+18     	; 0x790 <ball_task+0xba>
			}
			else{
				move_ball(pos, next);
     77e:	9e 01       	movw	r18, r28
     780:	2b 5f       	subi	r18, 0xFB	; 251
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	ce 01       	movw	r24, r28
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	b9 01       	movw	r22, r18
     78a:	0e 94 cb 01 	call	0x396	; 0x396 <move_ball>
				is_bounced = 0;
     78e:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	88 23       	and	r24, r24
     794:	09 f0       	breq	.+2      	; 0x798 <ball_task+0xc2>
     796:	b7 cf       	rjmp	.-146    	; 0x706 <ball_task+0x30>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelay(100);
     798:	84 e6       	ldi	r24, 0x64	; 100
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 70 14 	call	0x28e0	; 0x28e0 <vTaskDelay>
	}
     7a0:	ab cf       	rjmp	.-170    	; 0x6f8 <ball_task+0x22>

000007a2 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     7aa:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     7ae:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     7b2:	89 2b       	or	r24, r25
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     7b6:	8b e2       	ldi	r24, 0x2B	; 43
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e2       	ldi	r18, 0x2B	; 43
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	f9 01       	movw	r30, r18
     7c0:	20 81       	ld	r18, Z
     7c2:	24 60       	ori	r18, 0x04	; 4
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     7c8:	8b e2       	ldi	r24, 0x2B	; 43
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	2b e2       	ldi	r18, 0x2B	; 43
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	20 62       	ori	r18, 0x20	; 32
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     7da:	8b e2       	ldi	r24, 0x2B	; 43
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2b e2       	ldi	r18, 0x2B	; 43
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	2f 7d       	andi	r18, 0xDF	; 223
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     7ec:	8b e2       	ldi	r24, 0x2B	; 43
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2b e2       	ldi	r18, 0x2B	; 43
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	20 61       	ori	r18, 0x10	; 16
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2b e2       	ldi	r18, 0x2B	; 43
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	2f 7e       	andi	r18, 0xEF	; 239
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     810:	82 e2       	ldi	r24, 0x22	; 34
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     818:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	24 5f       	subi	r18, 0xF4	; 244
     822:	3e 4f       	sbci	r19, 0xFE	; 254
     824:	f9 01       	movw	r30, r18
     826:	20 81       	ld	r18, Z
     828:	31 81       	ldd	r19, Z+1	; 0x01
     82a:	20 95       	com	r18
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     830:	85 e2       	ldi	r24, 0x25	; 37
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	25 e2       	ldi	r18, 0x25	; 37
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	23 60       	ori	r18, 0x03	; 3
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     842:	85 e2       	ldi	r24, 0x25	; 37
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	25 e2       	ldi	r18, 0x25	; 37
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	40 81       	ld	r20, Z
     84e:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     852:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	24 5f       	subi	r18, 0xF4	; 244
     85c:	3e 4f       	sbci	r19, 0xFE	; 254
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	31 81       	ldd	r19, Z+1	; 0x01
     864:	23 2f       	mov	r18, r19
     866:	33 27       	eor	r19, r19
     868:	23 70       	andi	r18, 0x03	; 3
     86a:	20 95       	com	r18
     86c:	24 23       	and	r18, r20
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     872:	8b e2       	ldi	r24, 0x2B	; 43
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2b e2       	ldi	r18, 0x2B	; 43
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	2b 7f       	andi	r18, 0xFB	; 251
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18

	++col_index;
     884:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     888:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <col_index+0x1>
     892:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <col_index>
	if (col_index > 13){
     896:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     89a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     89e:	0e 97       	sbiw	r24, 0x0e	; 14
     8a0:	24 f0       	brlt	.+8      	; 0x8aa <handle_display+0x108>
		col_index = 0;
     8a2:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <col_index+0x1>
     8a6:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <col_index>
	}

}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
	//
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <main>:

//-----------------------------------------
int main(void)
{
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     8cc:	0e 94 52 05 	call	0xaa4	; 0xaa4 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     8d0:	8b e2       	ldi	r24, 0x2B	; 43
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2b e2       	ldi	r18, 0x2B	; 43
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	2f 7b       	andi	r18, 0xBF	; 191
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     8e2:	8e e1       	ldi	r24, 0x1E	; 30
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericCreate>
     8ec:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     8f0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <xQueueCreateMutex>
     8fa:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_col_0_mutex+0x1>
     8fe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 b2 0e 	call	0x1d64	; 0x1d64 <xQueueCreateMutex>
     908:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_player_position_mutex+0x1>
     90c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     910:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     914:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     918:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <init_com>
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     91c:	e1 2c       	mov	r14, r1
     91e:	f1 2c       	mov	r15, r1
     920:	03 e0       	ldi	r16, 0x03	; 3
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	45 e5       	ldi	r20, 0x55	; 85
     928:	50 e0       	ldi	r21, 0x00	; 0
     92a:	6c e3       	ldi	r22, 0x3C	; 60
     92c:	71 e0       	ldi	r23, 0x01	; 1
     92e:	82 ec       	ldi	r24, 0xC2	; 194
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 96 12 	call	0x252c	; 0x252c <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     936:	e1 2c       	mov	r14, r1
     938:	f1 2c       	mov	r15, r1
     93a:	04 e0       	ldi	r16, 0x04	; 4
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	45 e5       	ldi	r20, 0x55	; 85
     942:	50 e0       	ldi	r21, 0x00	; 0
     944:	61 e4       	ldi	r22, 0x41	; 65
     946:	71 e0       	ldi	r23, 0x01	; 1
     948:	8b e6       	ldi	r24, 0x6B	; 107
     94a:	93 e0       	ldi	r25, 0x03	; 3
     94c:	0e 94 96 12 	call	0x252c	; 0x252c <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     950:	81 ed       	ldi	r24, 0xD1	; 209
     952:	93 e0       	ldi	r25, 0x03	; 3
     954:	0e 94 ea 04 	call	0x9d4	; 0x9d4 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     958:	0e 94 92 14 	call	0x2924	; 0x2924 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     95c:	ff cf       	rjmp	.-2      	; 0x95c <__stack+0x5d>

0000095e <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     95e:	cf 93       	push	r28
     960:	df 93       	push	r29
     962:	00 d0       	rcall	.+0      	; 0x964 <_com_call_back+0x6>
     964:	00 d0       	rcall	.+0      	; 0x966 <_com_call_back+0x8>
     966:	cd b7       	in	r28, 0x3d	; 61
     968:	de b7       	in	r29, 0x3e	; 62
     96a:	9b 83       	std	Y+3, r25	; 0x03
     96c:	8a 83       	std	Y+2, r24	; 0x02
     96e:	6c 83       	std	Y+4, r22	; 0x04
     970:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     974:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     978:	89 2b       	or	r24, r25
     97a:	99 f0       	breq	.+38     	; 0x9a2 <_com_call_back+0x44>
     97c:	19 82       	std	Y+1, r1	; 0x01
     97e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     982:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     986:	be 01       	movw	r22, r28
     988:	6c 5f       	subi	r22, 0xFC	; 252
     98a:	7f 4f       	sbci	r23, 0xFF	; 255
     98c:	20 e0       	ldi	r18, 0x00	; 0
     98e:	ae 01       	movw	r20, r28
     990:	4f 5f       	subi	r20, 0xFF	; 255
     992:	5f 4f       	sbci	r21, 0xFF	; 255
     994:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <xQueueGenericSendFromISR>
     998:	89 81       	ldd	r24, Y+1	; 0x01
     99a:	88 23       	and	r24, r24
     99c:	11 f0       	breq	.+4      	; 0x9a2 <_com_call_back+0x44>
     99e:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
     9a2:	0f 90       	pop	r0
     9a4:	0f 90       	pop	r0
     9a6:	0f 90       	pop	r0
     9a8:	0f 90       	pop	r0
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	08 95       	ret

000009b0 <init_com>:
     9b0:	cf 93       	push	r28
     9b2:	df 93       	push	r29
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <init_com+0x6>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	9a 83       	std	Y+2, r25	; 0x02
     9bc:	89 83       	std	Y+1, r24	; 0x01
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	9a 81       	ldd	r25, Y+2	; 0x02
     9c2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_x_rx_com_queue+0x1>
     9c6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_x_rx_com_queue>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	df 91       	pop	r29
     9d0:	cf 91       	pop	r28
     9d2:	08 95       	ret

000009d4 <init_display_timer>:
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	00 d0       	rcall	.+0      	; 0x9da <init_display_timer+0x6>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	9a 83       	std	Y+2, r25	; 0x02
     9e0:	89 83       	std	Y+1, r24	; 0x01
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	9a 81       	ldd	r25, Y+2	; 0x02
     9e6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <cb_ptr+0x1>
     9ea:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cb_ptr>
     9ee:	87 e4       	ldi	r24, 0x47	; 71
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	2a e0       	ldi	r18, 0x0A	; 10
     9f4:	fc 01       	movw	r30, r24
     9f6:	20 83       	st	Z, r18
     9f8:	84 e4       	ldi	r24, 0x44	; 68
     9fa:	90 e0       	ldi	r25, 0x00	; 0
     9fc:	24 e4       	ldi	r18, 0x44	; 68
     9fe:	30 e0       	ldi	r19, 0x00	; 0
     a00:	f9 01       	movw	r30, r18
     a02:	20 81       	ld	r18, Z
     a04:	22 60       	ori	r18, 0x02	; 2
     a06:	fc 01       	movw	r30, r24
     a08:	20 83       	st	Z, r18
     a0a:	8e e6       	ldi	r24, 0x6E	; 110
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	2e e6       	ldi	r18, 0x6E	; 110
     a10:	30 e0       	ldi	r19, 0x00	; 0
     a12:	f9 01       	movw	r30, r18
     a14:	20 81       	ld	r18, Z
     a16:	22 60       	ori	r18, 0x02	; 2
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
     a1c:	85 e4       	ldi	r24, 0x45	; 69
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	25 e4       	ldi	r18, 0x45	; 69
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	25 60       	ori	r18, 0x05	; 5
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <__vector_16>:
     a38:	1f 92       	push	r1
     a3a:	0f 92       	push	r0
     a3c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a40:	0f 92       	push	r0
     a42:	11 24       	eor	r1, r1
     a44:	2f 93       	push	r18
     a46:	3f 93       	push	r19
     a48:	4f 93       	push	r20
     a4a:	5f 93       	push	r21
     a4c:	6f 93       	push	r22
     a4e:	7f 93       	push	r23
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	af 93       	push	r26
     a56:	bf 93       	push	r27
     a58:	ef 93       	push	r30
     a5a:	ff 93       	push	r31
     a5c:	cf 93       	push	r28
     a5e:	df 93       	push	r29
     a60:	cd b7       	in	r28, 0x3d	; 61
     a62:	de b7       	in	r29, 0x3e	; 62
     a64:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     a68:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     a6c:	89 2b       	or	r24, r25
     a6e:	31 f0       	breq	.+12     	; 0xa7c <__vector_16+0x44>
     a70:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     a74:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     a78:	fc 01       	movw	r30, r24
     a7a:	09 95       	icall
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	ff 91       	pop	r31
     a82:	ef 91       	pop	r30
     a84:	bf 91       	pop	r27
     a86:	af 91       	pop	r26
     a88:	9f 91       	pop	r25
     a8a:	8f 91       	pop	r24
     a8c:	7f 91       	pop	r23
     a8e:	6f 91       	pop	r22
     a90:	5f 91       	pop	r21
     a92:	4f 91       	pop	r20
     a94:	3f 91       	pop	r19
     a96:	2f 91       	pop	r18
     a98:	0f 90       	pop	r0
     a9a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a9e:	0f 90       	pop	r0
     aa0:	1f 90       	pop	r1
     aa2:	18 95       	reti

00000aa4 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     aa4:	8f 92       	push	r8
     aa6:	9f 92       	push	r9
     aa8:	af 92       	push	r10
     aaa:	bf 92       	push	r11
     aac:	cf 92       	push	r12
     aae:	df 92       	push	r13
     ab0:	ef 92       	push	r14
     ab2:	0f 93       	push	r16
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	cd b7       	in	r28, 0x3d	; 61
     aba:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     abc:	8a e5       	ldi	r24, 0x5A	; 90
     abe:	91 e0       	ldi	r25, 0x01	; 1
     ac0:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <buffer_init>
	buffer_init(&_com_tx_buffer);
     ac4:	8d e6       	ldi	r24, 0x6D	; 109
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 e4 05 	call	0xbc8	; 0xbc8 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     acc:	0f 2e       	mov	r0, r31
     ace:	ff ea       	ldi	r31, 0xAF	; 175
     ad0:	8f 2e       	mov	r8, r31
     ad2:	f4 e0       	ldi	r31, 0x04	; 4
     ad4:	9f 2e       	mov	r9, r31
     ad6:	f0 2d       	mov	r31, r0
     ad8:	0f 2e       	mov	r0, r31
     ada:	fd e6       	ldi	r31, 0x6D	; 109
     adc:	af 2e       	mov	r10, r31
     ade:	f1 e0       	ldi	r31, 0x01	; 1
     ae0:	bf 2e       	mov	r11, r31
     ae2:	f0 2d       	mov	r31, r0
     ae4:	0f 2e       	mov	r0, r31
     ae6:	fa e5       	ldi	r31, 0x5A	; 90
     ae8:	cf 2e       	mov	r12, r31
     aea:	f1 e0       	ldi	r31, 0x01	; 1
     aec:	df 2e       	mov	r13, r31
     aee:	f0 2d       	mov	r31, r0
     af0:	e1 2c       	mov	r14, r1
     af2:	00 e0       	ldi	r16, 0x00	; 0
     af4:	23 e0       	ldi	r18, 0x03	; 3
     af6:	40 e0       	ldi	r20, 0x00	; 0
     af8:	52 ec       	ldi	r21, 0xC2	; 194
     afa:	61 e0       	ldi	r22, 0x01	; 1
     afc:	70 e0       	ldi	r23, 0x00	; 0
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	0e 94 42 0b 	call	0x1684	; 0x1684 <serial_new_instance>
     b04:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_com_serial_instance+0x1>
     b08:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     b0c:	88 e2       	ldi	r24, 0x28	; 40
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	28 e2       	ldi	r18, 0x28	; 40
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	23 6c       	ori	r18, 0xC3	; 195
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     b1e:	8b e2       	ldi	r24, 0x2B	; 43
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	2b e2       	ldi	r18, 0x2B	; 43
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	f9 01       	movw	r30, r18
     b28:	20 81       	ld	r18, Z
     b2a:	28 60       	ori	r18, 0x08	; 8
     b2c:	fc 01       	movw	r30, r24
     b2e:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b30:	8a e2       	ldi	r24, 0x2A	; 42
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	2a e2       	ldi	r18, 0x2A	; 42
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	f9 01       	movw	r30, r18
     b3a:	20 81       	ld	r18, Z
     b3c:	24 67       	ori	r18, 0x74	; 116
     b3e:	fc 01       	movw	r30, r24
     b40:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b42:	8b e2       	ldi	r24, 0x2B	; 43
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	2b e2       	ldi	r18, 0x2B	; 43
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	f9 01       	movw	r30, r18
     b4c:	20 81       	ld	r18, Z
     b4e:	20 64       	ori	r18, 0x40	; 64
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     b54:	81 e2       	ldi	r24, 0x21	; 33
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	81 e2       	ldi	r24, 0x21	; 33
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	2f ef       	ldi	r18, 0xFF	; 255
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b66:	84 e2       	ldi	r24, 0x24	; 36
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	24 e2       	ldi	r18, 0x24	; 36
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	23 60       	ori	r18, 0x03	; 3
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b78:	84 e2       	ldi	r24, 0x24	; 36
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	24 e2       	ldi	r18, 0x24	; 36
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	f9 01       	movw	r30, r18
     b82:	20 81       	ld	r18, Z
     b84:	2c 63       	ori	r18, 0x3C	; 60
     b86:	fc 01       	movw	r30, r24
     b88:	20 83       	st	Z, r18
}
     b8a:	df 91       	pop	r29
     b8c:	cf 91       	pop	r28
     b8e:	0f 91       	pop	r16
     b90:	ef 90       	pop	r14
     b92:	df 90       	pop	r13
     b94:	cf 90       	pop	r12
     b96:	bf 90       	pop	r11
     b98:	af 90       	pop	r10
     b9a:	9f 90       	pop	r9
     b9c:	8f 90       	pop	r8
     b9e:	08 95       	ret

00000ba0 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	1f 92       	push	r1
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	1f 92       	push	r1
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     bc0:	0f 90       	pop	r0
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     bc8:	cf 93       	push	r28
     bca:	df 93       	push	r29
     bcc:	00 d0       	rcall	.+0      	; 0xbce <buffer_init+0x6>
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	9a 83       	std	Y+2, r25	; 0x02
     bd4:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     bd6:	89 81       	ldd	r24, Y+1	; 0x01
     bd8:	9a 81       	ldd	r25, Y+2	; 0x02
     bda:	fc 01       	movw	r30, r24
     bdc:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	fc 01       	movw	r30, r24
     be4:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     be6:	89 81       	ldd	r24, Y+1	; 0x01
     be8:	9a 81       	ldd	r25, Y+2	; 0x02
     bea:	fc 01       	movw	r30, r24
     bec:	12 8a       	std	Z+18, r1	; 0x12
}
     bee:	0f 90       	pop	r0
     bf0:	0f 90       	pop	r0
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     bf8:	cf 93       	push	r28
     bfa:	df 93       	push	r29
     bfc:	00 d0       	rcall	.+0      	; 0xbfe <buffer_get_item+0x6>
     bfe:	00 d0       	rcall	.+0      	; 0xc00 <buffer_get_item+0x8>
     c00:	cd b7       	in	r28, 0x3d	; 61
     c02:	de b7       	in	r29, 0x3e	; 62
     c04:	9a 83       	std	Y+2, r25	; 0x02
     c06:	89 83       	std	Y+1, r24	; 0x01
     c08:	7c 83       	std	Y+4, r23	; 0x04
     c0a:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     c0c:	89 81       	ldd	r24, Y+1	; 0x01
     c0e:	9a 81       	ldd	r25, Y+2	; 0x02
     c10:	fc 01       	movw	r30, r24
     c12:	82 89       	ldd	r24, Z+18	; 0x12
     c14:	88 23       	and	r24, r24
     c16:	81 f1       	breq	.+96     	; 0xc78 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	fc 01       	movw	r30, r24
     c1e:	81 89       	ldd	r24, Z+17	; 0x11
     c20:	88 2f       	mov	r24, r24
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	29 81       	ldd	r18, Y+1	; 0x01
     c26:	3a 81       	ldd	r19, Y+2	; 0x02
     c28:	82 0f       	add	r24, r18
     c2a:	93 1f       	adc	r25, r19
     c2c:	fc 01       	movw	r30, r24
     c2e:	20 81       	ld	r18, Z
     c30:	8b 81       	ldd	r24, Y+3	; 0x03
     c32:	9c 81       	ldd	r25, Y+4	; 0x04
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     c38:	89 81       	ldd	r24, Y+1	; 0x01
     c3a:	9a 81       	ldd	r25, Y+2	; 0x02
     c3c:	fc 01       	movw	r30, r24
     c3e:	81 89       	ldd	r24, Z+17	; 0x11
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	8f 70       	andi	r24, 0x0F	; 15
     c48:	90 78       	andi	r25, 0x80	; 128
     c4a:	99 23       	and	r25, r25
     c4c:	24 f4       	brge	.+8      	; 0xc56 <buffer_get_item+0x5e>
     c4e:	01 97       	sbiw	r24, 0x01	; 1
     c50:	80 6f       	ori	r24, 0xF0	; 240
     c52:	9f 6f       	ori	r25, 0xFF	; 255
     c54:	01 96       	adiw	r24, 0x01	; 1
     c56:	28 2f       	mov	r18, r24
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     c60:	89 81       	ldd	r24, Y+1	; 0x01
     c62:	9a 81       	ldd	r25, Y+2	; 0x02
     c64:	fc 01       	movw	r30, r24
     c66:	82 89       	ldd	r24, Z+18	; 0x12
     c68:	2f ef       	ldi	r18, 0xFF	; 255
     c6a:	28 0f       	add	r18, r24
     c6c:	89 81       	ldd	r24, Y+1	; 0x01
     c6e:	9a 81       	ldd	r25, Y+2	; 0x02
     c70:	fc 01       	movw	r30, r24
     c72:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	01 c0       	rjmp	.+2      	; 0xc7a <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     c78:	81 e0       	ldi	r24, 0x01	; 1
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	0f 90       	pop	r0
     c80:	0f 90       	pop	r0
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	08 95       	ret

00000c88 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	00 d0       	rcall	.+0      	; 0xc8e <buffer_put_item+0x6>
     c8e:	1f 92       	push	r1
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	9a 83       	std	Y+2, r25	; 0x02
     c96:	89 83       	std	Y+1, r24	; 0x01
     c98:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	9a 81       	ldd	r25, Y+2	; 0x02
     c9e:	fc 01       	movw	r30, r24
     ca0:	82 89       	ldd	r24, Z+18	; 0x12
     ca2:	80 31       	cpi	r24, 0x10	; 16
     ca4:	68 f5       	brcc	.+90     	; 0xd00 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	9a 81       	ldd	r25, Y+2	; 0x02
     caa:	fc 01       	movw	r30, r24
     cac:	80 89       	ldd	r24, Z+16	; 0x10
     cae:	88 2f       	mov	r24, r24
     cb0:	90 e0       	ldi	r25, 0x00	; 0
     cb2:	29 81       	ldd	r18, Y+1	; 0x01
     cb4:	3a 81       	ldd	r19, Y+2	; 0x02
     cb6:	82 0f       	add	r24, r18
     cb8:	93 1f       	adc	r25, r19
     cba:	2b 81       	ldd	r18, Y+3	; 0x03
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	9a 81       	ldd	r25, Y+2	; 0x02
     cc4:	fc 01       	movw	r30, r24
     cc6:	80 89       	ldd	r24, Z+16	; 0x10
     cc8:	88 2f       	mov	r24, r24
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	01 96       	adiw	r24, 0x01	; 1
     cce:	8f 70       	andi	r24, 0x0F	; 15
     cd0:	90 78       	andi	r25, 0x80	; 128
     cd2:	99 23       	and	r25, r25
     cd4:	24 f4       	brge	.+8      	; 0xcde <buffer_put_item+0x56>
     cd6:	01 97       	sbiw	r24, 0x01	; 1
     cd8:	80 6f       	ori	r24, 0xF0	; 240
     cda:	9f 6f       	ori	r25, 0xFF	; 255
     cdc:	01 96       	adiw	r24, 0x01	; 1
     cde:	28 2f       	mov	r18, r24
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	fc 01       	movw	r30, r24
     ce6:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	fc 01       	movw	r30, r24
     cee:	82 89       	ldd	r24, Z+18	; 0x12
     cf0:	21 e0       	ldi	r18, 0x01	; 1
     cf2:	28 0f       	add	r18, r24
     cf4:	89 81       	ldd	r24, Y+1	; 0x01
     cf6:	9a 81       	ldd	r25, Y+2	; 0x02
     cf8:	fc 01       	movw	r30, r24
     cfa:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     d00:	82 e0       	ldi	r24, 0x02	; 2
}
     d02:	0f 90       	pop	r0
     d04:	0f 90       	pop	r0
     d06:	0f 90       	pop	r0
     d08:	df 91       	pop	r29
     d0a:	cf 91       	pop	r28
     d0c:	08 95       	ret

00000d0e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d0e:	cf 93       	push	r28
     d10:	df 93       	push	r29
     d12:	00 d0       	rcall	.+0      	; 0xd14 <vListInitialise+0x6>
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
     d18:	9a 83       	std	Y+2, r25	; 0x02
     d1a:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	9c 01       	movw	r18, r24
     d22:	2d 5f       	subi	r18, 0xFD	; 253
     d24:	3f 4f       	sbci	r19, 0xFF	; 255
     d26:	89 81       	ldd	r24, Y+1	; 0x01
     d28:	9a 81       	ldd	r25, Y+2	; 0x02
     d2a:	fc 01       	movw	r30, r24
     d2c:	32 83       	std	Z+2, r19	; 0x02
     d2e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d30:	89 81       	ldd	r24, Y+1	; 0x01
     d32:	9a 81       	ldd	r25, Y+2	; 0x02
     d34:	2f ef       	ldi	r18, 0xFF	; 255
     d36:	3f ef       	ldi	r19, 0xFF	; 255
     d38:	fc 01       	movw	r30, r24
     d3a:	34 83       	std	Z+4, r19	; 0x04
     d3c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	9c 01       	movw	r18, r24
     d44:	2d 5f       	subi	r18, 0xFD	; 253
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	36 83       	std	Z+6, r19	; 0x06
     d50:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	9c 01       	movw	r18, r24
     d58:	2d 5f       	subi	r18, 0xFD	; 253
     d5a:	3f 4f       	sbci	r19, 0xFF	; 255
     d5c:	89 81       	ldd	r24, Y+1	; 0x01
     d5e:	9a 81       	ldd	r25, Y+2	; 0x02
     d60:	fc 01       	movw	r30, r24
     d62:	30 87       	std	Z+8, r19	; 0x08
     d64:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d66:	89 81       	ldd	r24, Y+1	; 0x01
     d68:	9a 81       	ldd	r25, Y+2	; 0x02
     d6a:	fc 01       	movw	r30, r24
     d6c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	00 d0       	rcall	.+0      	; 0xd7e <vListInitialiseItem+0x6>
     d7e:	cd b7       	in	r28, 0x3d	; 61
     d80:	de b7       	in	r29, 0x3e	; 62
     d82:	9a 83       	std	Y+2, r25	; 0x02
     d84:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	fc 01       	movw	r30, r24
     d8c:	11 86       	std	Z+9, r1	; 0x09
     d8e:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d90:	0f 90       	pop	r0
     d92:	0f 90       	pop	r0
     d94:	df 91       	pop	r29
     d96:	cf 91       	pop	r28
     d98:	08 95       	ret

00000d9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d9a:	cf 93       	push	r28
     d9c:	df 93       	push	r29
     d9e:	00 d0       	rcall	.+0      	; 0xda0 <vListInsertEnd+0x6>
     da0:	00 d0       	rcall	.+0      	; 0xda2 <vListInsertEnd+0x8>
     da2:	00 d0       	rcall	.+0      	; 0xda4 <vListInsertEnd+0xa>
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	9c 83       	std	Y+4, r25	; 0x04
     daa:	8b 83       	std	Y+3, r24	; 0x03
     dac:	7e 83       	std	Y+6, r23	; 0x06
     dae:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     db0:	8b 81       	ldd	r24, Y+3	; 0x03
     db2:	9c 81       	ldd	r25, Y+4	; 0x04
     db4:	fc 01       	movw	r30, r24
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	92 81       	ldd	r25, Z+2	; 0x02
     dba:	9a 83       	std	Y+2, r25	; 0x02
     dbc:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     dbe:	8d 81       	ldd	r24, Y+5	; 0x05
     dc0:	9e 81       	ldd	r25, Y+6	; 0x06
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
     dc4:	3a 81       	ldd	r19, Y+2	; 0x02
     dc6:	fc 01       	movw	r30, r24
     dc8:	33 83       	std	Z+3, r19	; 0x03
     dca:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	fc 01       	movw	r30, r24
     dd2:	24 81       	ldd	r18, Z+4	; 0x04
     dd4:	35 81       	ldd	r19, Z+5	; 0x05
     dd6:	8d 81       	ldd	r24, Y+5	; 0x05
     dd8:	9e 81       	ldd	r25, Y+6	; 0x06
     dda:	fc 01       	movw	r30, r24
     ddc:	35 83       	std	Z+5, r19	; 0x05
     dde:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	fc 01       	movw	r30, r24
     de6:	84 81       	ldd	r24, Z+4	; 0x04
     de8:	95 81       	ldd	r25, Z+5	; 0x05
     dea:	2d 81       	ldd	r18, Y+5	; 0x05
     dec:	3e 81       	ldd	r19, Y+6	; 0x06
     dee:	fc 01       	movw	r30, r24
     df0:	33 83       	std	Z+3, r19	; 0x03
     df2:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     df4:	89 81       	ldd	r24, Y+1	; 0x01
     df6:	9a 81       	ldd	r25, Y+2	; 0x02
     df8:	2d 81       	ldd	r18, Y+5	; 0x05
     dfa:	3e 81       	ldd	r19, Y+6	; 0x06
     dfc:	fc 01       	movw	r30, r24
     dfe:	35 83       	std	Z+5, r19	; 0x05
     e00:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e02:	8d 81       	ldd	r24, Y+5	; 0x05
     e04:	9e 81       	ldd	r25, Y+6	; 0x06
     e06:	2b 81       	ldd	r18, Y+3	; 0x03
     e08:	3c 81       	ldd	r19, Y+4	; 0x04
     e0a:	fc 01       	movw	r30, r24
     e0c:	31 87       	std	Z+9, r19	; 0x09
     e0e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     e10:	8b 81       	ldd	r24, Y+3	; 0x03
     e12:	9c 81       	ldd	r25, Y+4	; 0x04
     e14:	fc 01       	movw	r30, r24
     e16:	80 81       	ld	r24, Z
     e18:	21 e0       	ldi	r18, 0x01	; 1
     e1a:	28 0f       	add	r18, r24
     e1c:	8b 81       	ldd	r24, Y+3	; 0x03
     e1e:	9c 81       	ldd	r25, Y+4	; 0x04
     e20:	fc 01       	movw	r30, r24
     e22:	20 83       	st	Z, r18
}
     e24:	26 96       	adiw	r28, 0x06	; 6
     e26:	0f b6       	in	r0, 0x3f	; 63
     e28:	f8 94       	cli
     e2a:	de bf       	out	0x3e, r29	; 62
     e2c:	0f be       	out	0x3f, r0	; 63
     e2e:	cd bf       	out	0x3d, r28	; 61
     e30:	df 91       	pop	r29
     e32:	cf 91       	pop	r28
     e34:	08 95       	ret

00000e36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e36:	cf 93       	push	r28
     e38:	df 93       	push	r29
     e3a:	cd b7       	in	r28, 0x3d	; 61
     e3c:	de b7       	in	r29, 0x3e	; 62
     e3e:	28 97       	sbiw	r28, 0x08	; 8
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	de bf       	out	0x3e, r29	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	9e 83       	std	Y+6, r25	; 0x06
     e4c:	8d 83       	std	Y+5, r24	; 0x05
     e4e:	78 87       	std	Y+8, r23	; 0x08
     e50:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e52:	8f 81       	ldd	r24, Y+7	; 0x07
     e54:	98 85       	ldd	r25, Y+8	; 0x08
     e56:	fc 01       	movw	r30, r24
     e58:	80 81       	ld	r24, Z
     e5a:	91 81       	ldd	r25, Z+1	; 0x01
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	9c 81       	ldd	r25, Y+4	; 0x04
     e64:	01 96       	adiw	r24, 0x01	; 1
     e66:	41 f4       	brne	.+16     	; 0xe78 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     e68:	8d 81       	ldd	r24, Y+5	; 0x05
     e6a:	9e 81       	ldd	r25, Y+6	; 0x06
     e6c:	fc 01       	movw	r30, r24
     e6e:	87 81       	ldd	r24, Z+7	; 0x07
     e70:	90 85       	ldd	r25, Z+8	; 0x08
     e72:	9a 83       	std	Y+2, r25	; 0x02
     e74:	89 83       	std	Y+1, r24	; 0x01
     e76:	1a c0       	rjmp	.+52     	; 0xeac <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e78:	8d 81       	ldd	r24, Y+5	; 0x05
     e7a:	9e 81       	ldd	r25, Y+6	; 0x06
     e7c:	03 96       	adiw	r24, 0x03	; 3
     e7e:	9a 83       	std	Y+2, r25	; 0x02
     e80:	89 83       	std	Y+1, r24	; 0x01
     e82:	07 c0       	rjmp	.+14     	; 0xe92 <vListInsert+0x5c>
     e84:	89 81       	ldd	r24, Y+1	; 0x01
     e86:	9a 81       	ldd	r25, Y+2	; 0x02
     e88:	fc 01       	movw	r30, r24
     e8a:	82 81       	ldd	r24, Z+2	; 0x02
     e8c:	93 81       	ldd	r25, Z+3	; 0x03
     e8e:	9a 83       	std	Y+2, r25	; 0x02
     e90:	89 83       	std	Y+1, r24	; 0x01
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 81       	ld	r18, Z
     ea0:	31 81       	ldd	r19, Z+1	; 0x01
     ea2:	8b 81       	ldd	r24, Y+3	; 0x03
     ea4:	9c 81       	ldd	r25, Y+4	; 0x04
     ea6:	82 17       	cp	r24, r18
     ea8:	93 07       	cpc	r25, r19
     eaa:	60 f7       	brcc	.-40     	; 0xe84 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	22 81       	ldd	r18, Z+2	; 0x02
     eb4:	33 81       	ldd	r19, Z+3	; 0x03
     eb6:	8f 81       	ldd	r24, Y+7	; 0x07
     eb8:	98 85       	ldd	r25, Y+8	; 0x08
     eba:	fc 01       	movw	r30, r24
     ebc:	33 83       	std	Z+3, r19	; 0x03
     ebe:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	fc 01       	movw	r30, r24
     ec6:	82 81       	ldd	r24, Z+2	; 0x02
     ec8:	93 81       	ldd	r25, Z+3	; 0x03
     eca:	2f 81       	ldd	r18, Y+7	; 0x07
     ecc:	38 85       	ldd	r19, Y+8	; 0x08
     ece:	fc 01       	movw	r30, r24
     ed0:	35 83       	std	Z+5, r19	; 0x05
     ed2:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     ed4:	8f 81       	ldd	r24, Y+7	; 0x07
     ed6:	98 85       	ldd	r25, Y+8	; 0x08
     ed8:	29 81       	ldd	r18, Y+1	; 0x01
     eda:	3a 81       	ldd	r19, Y+2	; 0x02
     edc:	fc 01       	movw	r30, r24
     ede:	35 83       	std	Z+5, r19	; 0x05
     ee0:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     ee2:	89 81       	ldd	r24, Y+1	; 0x01
     ee4:	9a 81       	ldd	r25, Y+2	; 0x02
     ee6:	2f 81       	ldd	r18, Y+7	; 0x07
     ee8:	38 85       	ldd	r19, Y+8	; 0x08
     eea:	fc 01       	movw	r30, r24
     eec:	33 83       	std	Z+3, r19	; 0x03
     eee:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ef0:	8f 81       	ldd	r24, Y+7	; 0x07
     ef2:	98 85       	ldd	r25, Y+8	; 0x08
     ef4:	2d 81       	ldd	r18, Y+5	; 0x05
     ef6:	3e 81       	ldd	r19, Y+6	; 0x06
     ef8:	fc 01       	movw	r30, r24
     efa:	31 87       	std	Z+9, r19	; 0x09
     efc:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     efe:	8d 81       	ldd	r24, Y+5	; 0x05
     f00:	9e 81       	ldd	r25, Y+6	; 0x06
     f02:	fc 01       	movw	r30, r24
     f04:	80 81       	ld	r24, Z
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	28 0f       	add	r18, r24
     f0a:	8d 81       	ldd	r24, Y+5	; 0x05
     f0c:	9e 81       	ldd	r25, Y+6	; 0x06
     f0e:	fc 01       	movw	r30, r24
     f10:	20 83       	st	Z, r18
}
     f12:	28 96       	adiw	r28, 0x08	; 8
     f14:	0f b6       	in	r0, 0x3f	; 63
     f16:	f8 94       	cli
     f18:	de bf       	out	0x3e, r29	; 62
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	cd bf       	out	0x3d, r28	; 61
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	08 95       	ret

00000f24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	00 d0       	rcall	.+0      	; 0xf2a <uxListRemove+0x6>
     f2a:	00 d0       	rcall	.+0      	; 0xf2c <uxListRemove+0x8>
     f2c:	cd b7       	in	r28, 0x3d	; 61
     f2e:	de b7       	in	r29, 0x3e	; 62
     f30:	9c 83       	std	Y+4, r25	; 0x04
     f32:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     f34:	8b 81       	ldd	r24, Y+3	; 0x03
     f36:	9c 81       	ldd	r25, Y+4	; 0x04
     f38:	fc 01       	movw	r30, r24
     f3a:	80 85       	ldd	r24, Z+8	; 0x08
     f3c:	91 85       	ldd	r25, Z+9	; 0x09
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	fc 01       	movw	r30, r24
     f48:	82 81       	ldd	r24, Z+2	; 0x02
     f4a:	93 81       	ldd	r25, Z+3	; 0x03
     f4c:	2b 81       	ldd	r18, Y+3	; 0x03
     f4e:	3c 81       	ldd	r19, Y+4	; 0x04
     f50:	f9 01       	movw	r30, r18
     f52:	24 81       	ldd	r18, Z+4	; 0x04
     f54:	35 81       	ldd	r19, Z+5	; 0x05
     f56:	fc 01       	movw	r30, r24
     f58:	35 83       	std	Z+5, r19	; 0x05
     f5a:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	fc 01       	movw	r30, r24
     f62:	84 81       	ldd	r24, Z+4	; 0x04
     f64:	95 81       	ldd	r25, Z+5	; 0x05
     f66:	2b 81       	ldd	r18, Y+3	; 0x03
     f68:	3c 81       	ldd	r19, Y+4	; 0x04
     f6a:	f9 01       	movw	r30, r18
     f6c:	22 81       	ldd	r18, Z+2	; 0x02
     f6e:	33 81       	ldd	r19, Z+3	; 0x03
     f70:	fc 01       	movw	r30, r24
     f72:	33 83       	std	Z+3, r19	; 0x03
     f74:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     f76:	89 81       	ldd	r24, Y+1	; 0x01
     f78:	9a 81       	ldd	r25, Y+2	; 0x02
     f7a:	fc 01       	movw	r30, r24
     f7c:	21 81       	ldd	r18, Z+1	; 0x01
     f7e:	32 81       	ldd	r19, Z+2	; 0x02
     f80:	8b 81       	ldd	r24, Y+3	; 0x03
     f82:	9c 81       	ldd	r25, Y+4	; 0x04
     f84:	28 17       	cp	r18, r24
     f86:	39 07       	cpc	r19, r25
     f88:	51 f4       	brne	.+20     	; 0xf9e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	fc 01       	movw	r30, r24
     f90:	24 81       	ldd	r18, Z+4	; 0x04
     f92:	35 81       	ldd	r19, Z+5	; 0x05
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	32 83       	std	Z+2, r19	; 0x02
     f9c:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     f9e:	8b 81       	ldd	r24, Y+3	; 0x03
     fa0:	9c 81       	ldd	r25, Y+4	; 0x04
     fa2:	fc 01       	movw	r30, r24
     fa4:	11 86       	std	Z+9, r1	; 0x09
     fa6:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
     fb0:	2f ef       	ldi	r18, 0xFF	; 255
     fb2:	28 0f       	add	r18, r24
     fb4:	89 81       	ldd	r24, Y+1	; 0x01
     fb6:	9a 81       	ldd	r25, Y+2	; 0x02
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	df 91       	pop	r29
     fce:	cf 91       	pop	r28
     fd0:	08 95       	ret

00000fd2 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     fd2:	cf 93       	push	r28
     fd4:	df 93       	push	r29
     fd6:	cd b7       	in	r28, 0x3d	; 61
     fd8:	de b7       	in	r29, 0x3e	; 62
     fda:	28 97       	sbiw	r28, 0x08	; 8
     fdc:	0f b6       	in	r0, 0x3f	; 63
     fde:	f8 94       	cli
     fe0:	de bf       	out	0x3e, r29	; 62
     fe2:	0f be       	out	0x3f, r0	; 63
     fe4:	cd bf       	out	0x3d, r28	; 61
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	7e 83       	std	Y+6, r23	; 0x06
     fec:	6d 83       	std	Y+5, r22	; 0x05
     fee:	58 87       	std	Y+8, r21	; 0x08
     ff0:	4f 83       	std	Y+7, r20	; 0x07
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	21 e1       	ldi	r18, 0x11	; 17
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	22 e2       	ldi	r18, 0x22	; 34
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	23 e3       	ldi	r18, 0x33	; 51
    1020:	fc 01       	movw	r30, r24
    1022:	20 83       	st	Z, r18
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
    102e:	8d 81       	ldd	r24, Y+5	; 0x05
    1030:	9e 81       	ldd	r25, Y+6	; 0x06
    1032:	9a 83       	std	Y+2, r25	; 0x02
    1034:	89 83       	std	Y+1, r24	; 0x01
    1036:	29 81       	ldd	r18, Y+1	; 0x01
    1038:	8b 81       	ldd	r24, Y+3	; 0x03
    103a:	9c 81       	ldd	r25, Y+4	; 0x04
    103c:	fc 01       	movw	r30, r24
    103e:	20 83       	st	Z, r18
    1040:	8b 81       	ldd	r24, Y+3	; 0x03
    1042:	9c 81       	ldd	r25, Y+4	; 0x04
    1044:	01 97       	sbiw	r24, 0x01	; 1
    1046:	9c 83       	std	Y+4, r25	; 0x04
    1048:	8b 83       	std	Y+3, r24	; 0x03
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	9a 81       	ldd	r25, Y+2	; 0x02
    104e:	89 2f       	mov	r24, r25
    1050:	99 27       	eor	r25, r25
    1052:	9a 83       	std	Y+2, r25	; 0x02
    1054:	89 83       	std	Y+1, r24	; 0x01
    1056:	29 81       	ldd	r18, Y+1	; 0x01
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	fc 01       	movw	r30, r24
    105e:	20 83       	st	Z, r18
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	01 97       	sbiw	r24, 0x01	; 1
    1066:	9c 83       	std	Y+4, r25	; 0x04
    1068:	8b 83       	std	Y+3, r24	; 0x03
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	fc 01       	movw	r30, r24
    1070:	10 82       	st	Z, r1
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	20 e8       	ldi	r18, 0x80	; 128
    1082:	fc 01       	movw	r30, r24
    1084:	20 83       	st	Z, r18
    1086:	8b 81       	ldd	r24, Y+3	; 0x03
    1088:	9c 81       	ldd	r25, Y+4	; 0x04
    108a:	01 97       	sbiw	r24, 0x01	; 1
    108c:	9c 83       	std	Y+4, r25	; 0x04
    108e:	8b 83       	std	Y+3, r24	; 0x03
    1090:	8b 81       	ldd	r24, Y+3	; 0x03
    1092:	9c 81       	ldd	r25, Y+4	; 0x04
    1094:	fc 01       	movw	r30, r24
    1096:	10 82       	st	Z, r1
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	22 e0       	ldi	r18, 0x02	; 2
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	23 e0       	ldi	r18, 0x03	; 3
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	24 e0       	ldi	r18, 0x04	; 4
    10d0:	fc 01       	movw	r30, r24
    10d2:	20 83       	st	Z, r18
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	25 e0       	ldi	r18, 0x05	; 5
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	26 e0       	ldi	r18, 0x06	; 6
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	27 e0       	ldi	r18, 0x07	; 7
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9c 83       	std	Y+4, r25	; 0x04
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	28 e0       	ldi	r18, 0x08	; 8
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	29 e0       	ldi	r18, 0x09	; 9
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	20 e1       	ldi	r18, 0x10	; 16
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	21 e1       	ldi	r18, 0x11	; 17
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	22 e1       	ldi	r18, 0x12	; 18
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	23 e1       	ldi	r18, 0x13	; 19
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	24 e1       	ldi	r18, 0x14	; 20
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9c 83       	std	Y+4, r25	; 0x04
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	25 e1       	ldi	r18, 0x15	; 21
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 83       	st	Z, r18
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	26 e1       	ldi	r18, 0x16	; 22
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	27 e1       	ldi	r18, 0x17	; 23
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	28 e1       	ldi	r18, 0x18	; 24
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 83       	st	Z, r18
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	29 e1       	ldi	r18, 0x19	; 25
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9c 83       	std	Y+4, r25	; 0x04
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	20 e2       	ldi	r18, 0x20	; 32
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	21 e2       	ldi	r18, 0x21	; 33
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	22 e2       	ldi	r18, 0x22	; 34
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	23 e2       	ldi	r18, 0x23	; 35
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	9c 83       	std	Y+4, r25	; 0x04
    1258:	8b 83       	std	Y+3, r24	; 0x03
    125a:	8f 81       	ldd	r24, Y+7	; 0x07
    125c:	98 85       	ldd	r25, Y+8	; 0x08
    125e:	9a 83       	std	Y+2, r25	; 0x02
    1260:	89 83       	std	Y+1, r24	; 0x01
    1262:	29 81       	ldd	r18, Y+1	; 0x01
    1264:	8b 81       	ldd	r24, Y+3	; 0x03
    1266:	9c 81       	ldd	r25, Y+4	; 0x04
    1268:	fc 01       	movw	r30, r24
    126a:	20 83       	st	Z, r18
    126c:	8b 81       	ldd	r24, Y+3	; 0x03
    126e:	9c 81       	ldd	r25, Y+4	; 0x04
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	9a 81       	ldd	r25, Y+2	; 0x02
    127a:	89 2f       	mov	r24, r25
    127c:	99 27       	eor	r25, r25
    127e:	9a 83       	std	Y+2, r25	; 0x02
    1280:	89 83       	std	Y+1, r24	; 0x01
    1282:	29 81       	ldd	r18, Y+1	; 0x01
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	26 e2       	ldi	r18, 0x26	; 38
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	27 e2       	ldi	r18, 0x27	; 39
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	28 e2       	ldi	r18, 0x28	; 40
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	29 e2       	ldi	r18, 0x29	; 41
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	20 e3       	ldi	r18, 0x30	; 48
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	21 e3       	ldi	r18, 0x31	; 49
    1300:	fc 01       	movw	r30, r24
    1302:	20 83       	st	Z, r18
    1304:	8b 81       	ldd	r24, Y+3	; 0x03
    1306:	9c 81       	ldd	r25, Y+4	; 0x04
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03
    130e:	8b 81       	ldd	r24, Y+3	; 0x03
    1310:	9c 81       	ldd	r25, Y+4	; 0x04
    1312:	28 96       	adiw	r28, 0x08	; 8
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	de bf       	out	0x3e, r29	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	cd bf       	out	0x3d, r28	; 61
    131e:	df 91       	pop	r29
    1320:	cf 91       	pop	r28
    1322:	08 95       	ret

00001324 <xPortStartScheduler>:
    1324:	cf 93       	push	r28
    1326:	df 93       	push	r29
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <prvSetupTimerInterrupt>
    1330:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1334:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1338:	cd 91       	ld	r28, X+
    133a:	cd bf       	out	0x3d, r28	; 61
    133c:	dd 91       	ld	r29, X+
    133e:	de bf       	out	0x3e, r29	; 62
    1340:	ff 91       	pop	r31
    1342:	ef 91       	pop	r30
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	bf 91       	pop	r27
    134a:	af 91       	pop	r26
    134c:	9f 91       	pop	r25
    134e:	8f 91       	pop	r24
    1350:	7f 91       	pop	r23
    1352:	6f 91       	pop	r22
    1354:	5f 91       	pop	r21
    1356:	4f 91       	pop	r20
    1358:	3f 91       	pop	r19
    135a:	2f 91       	pop	r18
    135c:	1f 91       	pop	r17
    135e:	0f 91       	pop	r16
    1360:	ff 90       	pop	r15
    1362:	ef 90       	pop	r14
    1364:	df 90       	pop	r13
    1366:	cf 90       	pop	r12
    1368:	bf 90       	pop	r11
    136a:	af 90       	pop	r10
    136c:	9f 90       	pop	r9
    136e:	8f 90       	pop	r8
    1370:	7f 90       	pop	r7
    1372:	6f 90       	pop	r6
    1374:	5f 90       	pop	r5
    1376:	4f 90       	pop	r4
    1378:	3f 90       	pop	r3
    137a:	2f 90       	pop	r2
    137c:	1f 90       	pop	r1
    137e:	0f 90       	pop	r0
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	0f 90       	pop	r0
    1384:	08 95       	ret
    1386:	81 e0       	ldi	r24, 0x01	; 1
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	08 95       	ret

0000138e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    138e:	0f 92       	push	r0
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	0f 92       	push	r0
    1396:	1f 92       	push	r1
    1398:	11 24       	eor	r1, r1
    139a:	2f 92       	push	r2
    139c:	3f 92       	push	r3
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	2f 93       	push	r18
    13bc:	3f 93       	push	r19
    13be:	4f 93       	push	r20
    13c0:	5f 93       	push	r21
    13c2:	6f 93       	push	r22
    13c4:	7f 93       	push	r23
    13c6:	8f 93       	push	r24
    13c8:	9f 93       	push	r25
    13ca:	af 93       	push	r26
    13cc:	bf 93       	push	r27
    13ce:	cf 93       	push	r28
    13d0:	df 93       	push	r29
    13d2:	ef 93       	push	r30
    13d4:	ff 93       	push	r31
    13d6:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    13da:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    13de:	0d b6       	in	r0, 0x3d	; 61
    13e0:	0d 92       	st	X+, r0
    13e2:	0e b6       	in	r0, 0x3e	; 62
    13e4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    13e6:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13ea:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    13ee:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    13f2:	cd 91       	ld	r28, X+
    13f4:	cd bf       	out	0x3d, r28	; 61
    13f6:	dd 91       	ld	r29, X+
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	ff 91       	pop	r31
    13fc:	ef 91       	pop	r30
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	bf 91       	pop	r27
    1404:	af 91       	pop	r26
    1406:	9f 91       	pop	r25
    1408:	8f 91       	pop	r24
    140a:	7f 91       	pop	r23
    140c:	6f 91       	pop	r22
    140e:	5f 91       	pop	r21
    1410:	4f 91       	pop	r20
    1412:	3f 91       	pop	r19
    1414:	2f 91       	pop	r18
    1416:	1f 91       	pop	r17
    1418:	0f 91       	pop	r16
    141a:	ff 90       	pop	r15
    141c:	ef 90       	pop	r14
    141e:	df 90       	pop	r13
    1420:	cf 90       	pop	r12
    1422:	bf 90       	pop	r11
    1424:	af 90       	pop	r10
    1426:	9f 90       	pop	r9
    1428:	8f 90       	pop	r8
    142a:	7f 90       	pop	r7
    142c:	6f 90       	pop	r6
    142e:	5f 90       	pop	r5
    1430:	4f 90       	pop	r4
    1432:	3f 90       	pop	r3
    1434:	2f 90       	pop	r2
    1436:	1f 90       	pop	r1
    1438:	0f 90       	pop	r0
    143a:	0f be       	out	0x3f, r0	; 63
    143c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    143e:	08 95       	ret

00001440 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1440:	0f 92       	push	r0
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	0f 92       	push	r0
    1448:	1f 92       	push	r1
    144a:	11 24       	eor	r1, r1
    144c:	2f 92       	push	r2
    144e:	3f 92       	push	r3
    1450:	4f 92       	push	r4
    1452:	5f 92       	push	r5
    1454:	6f 92       	push	r6
    1456:	7f 92       	push	r7
    1458:	8f 92       	push	r8
    145a:	9f 92       	push	r9
    145c:	af 92       	push	r10
    145e:	bf 92       	push	r11
    1460:	cf 92       	push	r12
    1462:	df 92       	push	r13
    1464:	ef 92       	push	r14
    1466:	ff 92       	push	r15
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	2f 93       	push	r18
    146e:	3f 93       	push	r19
    1470:	4f 93       	push	r20
    1472:	5f 93       	push	r21
    1474:	6f 93       	push	r22
    1476:	7f 93       	push	r23
    1478:	8f 93       	push	r24
    147a:	9f 93       	push	r25
    147c:	af 93       	push	r26
    147e:	bf 93       	push	r27
    1480:	cf 93       	push	r28
    1482:	df 93       	push	r29
    1484:	ef 93       	push	r30
    1486:	ff 93       	push	r31
    1488:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    148c:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1490:	0d b6       	in	r0, 0x3d	; 61
    1492:	0d 92       	st	X+, r0
    1494:	0e b6       	in	r0, 0x3e	; 62
    1496:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1498:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xTaskIncrementTick>
    149c:	88 23       	and	r24, r24
    149e:	11 f0       	breq	.+4      	; 0x14a4 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    14a0:	0e 94 55 16 	call	0x2caa	; 0x2caa <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    14a4:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    14a8:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    14ac:	cd 91       	ld	r28, X+
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	dd 91       	ld	r29, X+
    14b2:	de bf       	out	0x3e, r29	; 62
    14b4:	ff 91       	pop	r31
    14b6:	ef 91       	pop	r30
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	bf 91       	pop	r27
    14be:	af 91       	pop	r26
    14c0:	9f 91       	pop	r25
    14c2:	8f 91       	pop	r24
    14c4:	7f 91       	pop	r23
    14c6:	6f 91       	pop	r22
    14c8:	5f 91       	pop	r21
    14ca:	4f 91       	pop	r20
    14cc:	3f 91       	pop	r19
    14ce:	2f 91       	pop	r18
    14d0:	1f 91       	pop	r17
    14d2:	0f 91       	pop	r16
    14d4:	ff 90       	pop	r15
    14d6:	ef 90       	pop	r14
    14d8:	df 90       	pop	r13
    14da:	cf 90       	pop	r12
    14dc:	bf 90       	pop	r11
    14de:	af 90       	pop	r10
    14e0:	9f 90       	pop	r9
    14e2:	8f 90       	pop	r8
    14e4:	7f 90       	pop	r7
    14e6:	6f 90       	pop	r6
    14e8:	5f 90       	pop	r5
    14ea:	4f 90       	pop	r4
    14ec:	3f 90       	pop	r3
    14ee:	2f 90       	pop	r2
    14f0:	1f 90       	pop	r1
    14f2:	0f 90       	pop	r0
    14f4:	0f be       	out	0x3f, r0	; 63
    14f6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14f8:	08 95       	ret

000014fa <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    14fa:	cf 93       	push	r28
    14fc:	df 93       	push	r29
    14fe:	00 d0       	rcall	.+0      	; 0x1500 <prvSetupTimerInterrupt+0x6>
    1500:	00 d0       	rcall	.+0      	; 0x1502 <prvSetupTimerInterrupt+0x8>
    1502:	00 d0       	rcall	.+0      	; 0x1504 <prvSetupTimerInterrupt+0xa>
    1504:	cd b7       	in	r28, 0x3d	; 61
    1506:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1508:	89 e9       	ldi	r24, 0x99	; 153
    150a:	99 e3       	ldi	r25, 0x39	; 57
    150c:	a0 e0       	ldi	r26, 0x00	; 0
    150e:	b0 e0       	ldi	r27, 0x00	; 0
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	9a 83       	std	Y+2, r25	; 0x02
    1514:	ab 83       	std	Y+3, r26	; 0x03
    1516:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1518:	89 81       	ldd	r24, Y+1	; 0x01
    151a:	9a 81       	ldd	r25, Y+2	; 0x02
    151c:	ab 81       	ldd	r26, Y+3	; 0x03
    151e:	bc 81       	ldd	r27, Y+4	; 0x04
    1520:	68 94       	set
    1522:	15 f8       	bld	r1, 5
    1524:	b6 95       	lsr	r27
    1526:	a7 95       	ror	r26
    1528:	97 95       	ror	r25
    152a:	87 95       	ror	r24
    152c:	16 94       	lsr	r1
    152e:	d1 f7       	brne	.-12     	; 0x1524 <prvSetupTimerInterrupt+0x2a>
    1530:	89 83       	std	Y+1, r24	; 0x01
    1532:	9a 83       	std	Y+2, r25	; 0x02
    1534:	ab 83       	std	Y+3, r26	; 0x03
    1536:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	ab 81       	ldd	r26, Y+3	; 0x03
    153e:	bc 81       	ldd	r27, Y+4	; 0x04
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	a1 09       	sbc	r26, r1
    1544:	b1 09       	sbc	r27, r1
    1546:	89 83       	std	Y+1, r24	; 0x01
    1548:	9a 83       	std	Y+2, r25	; 0x02
    154a:	ab 83       	std	Y+3, r26	; 0x03
    154c:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    154e:	89 81       	ldd	r24, Y+1	; 0x01
    1550:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	9a 81       	ldd	r25, Y+2	; 0x02
    1556:	ab 81       	ldd	r26, Y+3	; 0x03
    1558:	bc 81       	ldd	r27, Y+4	; 0x04
    155a:	89 2f       	mov	r24, r25
    155c:	9a 2f       	mov	r25, r26
    155e:	ab 2f       	mov	r26, r27
    1560:	bb 27       	eor	r27, r27
    1562:	89 83       	std	Y+1, r24	; 0x01
    1564:	9a 83       	std	Y+2, r25	; 0x02
    1566:	ab 83       	std	Y+3, r26	; 0x03
    1568:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    156a:	89 81       	ldd	r24, Y+1	; 0x01
    156c:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    156e:	89 e8       	ldi	r24, 0x89	; 137
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	2e 81       	ldd	r18, Y+6	; 0x06
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1578:	88 e8       	ldi	r24, 0x88	; 136
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	2d 81       	ldd	r18, Y+5	; 0x05
    157e:	fc 01       	movw	r30, r24
    1580:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1582:	8b e0       	ldi	r24, 0x0B	; 11
    1584:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1586:	81 e8       	ldi	r24, 0x81	; 129
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1590:	8f e6       	ldi	r24, 0x6F	; 111
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	fc 01       	movw	r30, r24
    1596:	80 81       	ld	r24, Z
    1598:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    159a:	8d 81       	ldd	r24, Y+5	; 0x05
    159c:	82 60       	ori	r24, 0x02	; 2
    159e:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    15a0:	8f e6       	ldi	r24, 0x6F	; 111
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	2d 81       	ldd	r18, Y+5	; 0x05
    15a6:	fc 01       	movw	r30, r24
    15a8:	20 83       	st	Z, r18
}
    15aa:	26 96       	adiw	r28, 0x06	; 6
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	08 95       	ret

000015bc <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    15bc:	0e 94 20 0a 	call	0x1440	; 0x1440 <vPortYieldFromTick>
		asm volatile ( "reti" );
    15c0:	18 95       	reti

000015c2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15c2:	cf 93       	push	r28
    15c4:	df 93       	push	r29
    15c6:	00 d0       	rcall	.+0      	; 0x15c8 <pvPortMalloc+0x6>
    15c8:	00 d0       	rcall	.+0      	; 0x15ca <pvPortMalloc+0x8>
    15ca:	cd b7       	in	r28, 0x3d	; 61
    15cc:	de b7       	in	r29, 0x3e	; 62
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    15d2:	1a 82       	std	Y+2, r1	; 0x02
    15d4:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    15d6:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    15da:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    15de:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    15e2:	89 2b       	or	r24, r25
    15e4:	31 f4       	brne	.+12     	; 0x15f2 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    15e6:	81 e8       	ldi	r24, 0x81	; 129
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <pucAlignedHeap.1965+0x1>
    15ee:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    15f2:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    15f6:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	82 0f       	add	r24, r18
    1600:	93 1f       	adc	r25, r19
    1602:	87 3e       	cpi	r24, 0xE7	; 231
    1604:	93 40       	sbci	r25, 0x03	; 3
    1606:	38 f5       	brcc	.+78     	; 0x1656 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1608:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    160c:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1610:	8b 81       	ldd	r24, Y+3	; 0x03
    1612:	9c 81       	ldd	r25, Y+4	; 0x04
    1614:	28 0f       	add	r18, r24
    1616:	39 1f       	adc	r19, r25
    1618:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    161c:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1620:	82 17       	cp	r24, r18
    1622:	93 07       	cpc	r25, r19
    1624:	c0 f4       	brcc	.+48     	; 0x1656 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1626:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    162a:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    162e:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    1632:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	9a 83       	std	Y+2, r25	; 0x02
    163c:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    163e:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    1642:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1646:	8b 81       	ldd	r24, Y+3	; 0x03
    1648:	9c 81       	ldd	r25, Y+4	; 0x04
    164a:	82 0f       	add	r24, r18
    164c:	93 1f       	adc	r25, r19
    164e:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <xNextFreeByte+0x1>
    1652:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1656:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	df 91       	pop	r29
    1668:	cf 91       	pop	r28
    166a:	08 95       	ret

0000166c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    166c:	cf 93       	push	r28
    166e:	df 93       	push	r29
    1670:	00 d0       	rcall	.+0      	; 0x1672 <vPortFree+0x6>
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	9a 83       	std	Y+2, r25	; 0x02
    1678:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1684:	8f 92       	push	r8
    1686:	9f 92       	push	r9
    1688:	af 92       	push	r10
    168a:	bf 92       	push	r11
    168c:	cf 92       	push	r12
    168e:	df 92       	push	r13
    1690:	ef 92       	push	r14
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	cd b7       	in	r28, 0x3d	; 61
    169c:	de b7       	in	r29, 0x3e	; 62
    169e:	65 97       	sbiw	r28, 0x15	; 21
    16a0:	0f b6       	in	r0, 0x3f	; 63
    16a2:	f8 94       	cli
    16a4:	de bf       	out	0x3e, r29	; 62
    16a6:	0f be       	out	0x3f, r0	; 63
    16a8:	cd bf       	out	0x3d, r28	; 61
    16aa:	8c 83       	std	Y+4, r24	; 0x04
    16ac:	4d 83       	std	Y+5, r20	; 0x05
    16ae:	5e 83       	std	Y+6, r21	; 0x06
    16b0:	6f 83       	std	Y+7, r22	; 0x07
    16b2:	78 87       	std	Y+8, r23	; 0x08
    16b4:	29 87       	std	Y+9, r18	; 0x09
    16b6:	0a 87       	std	Y+10, r16	; 0x0a
    16b8:	eb 86       	std	Y+11, r14	; 0x0b
    16ba:	dd 86       	std	Y+13, r13	; 0x0d
    16bc:	cc 86       	std	Y+12, r12	; 0x0c
    16be:	bf 86       	std	Y+15, r11	; 0x0f
    16c0:	ae 86       	std	Y+14, r10	; 0x0e
    16c2:	99 8a       	std	Y+17, r9	; 0x11
    16c4:	88 8a       	std	Y+16, r8	; 0x10
    16c6:	88 e0       	ldi	r24, 0x08	; 8
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 af 1a 	call	0x355e	; 0x355e <malloc>
    16ce:	9a 83       	std	Y+2, r25	; 0x02
    16d0:	89 83       	std	Y+1, r24	; 0x01
    16d2:	8c 81       	ldd	r24, Y+4	; 0x04
    16d4:	88 2f       	mov	r24, r24
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	88 0f       	add	r24, r24
    16da:	99 1f       	adc	r25, r25
    16dc:	84 59       	subi	r24, 0x94	; 148
    16de:	9a 4f       	sbci	r25, 0xFA	; 250
    16e0:	29 81       	ldd	r18, Y+1	; 0x01
    16e2:	3a 81       	ldd	r19, Y+2	; 0x02
    16e4:	fc 01       	movw	r30, r24
    16e6:	31 83       	std	Z+1, r19	; 0x01
    16e8:	20 83       	st	Z, r18
    16ea:	8c 81       	ldd	r24, Y+4	; 0x04
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	88 5d       	subi	r24, 0xD8	; 216
    16f6:	9e 4f       	sbci	r25, 0xFE	; 254
    16f8:	fc 01       	movw	r30, r24
    16fa:	20 81       	ld	r18, Z
    16fc:	31 81       	ldd	r19, Z+1	; 0x01
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	fc 01       	movw	r30, r24
    1704:	31 83       	std	Z+1, r19	; 0x01
    1706:	20 83       	st	Z, r18
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	9a 81       	ldd	r25, Y+2	; 0x02
    170c:	2e 85       	ldd	r18, Y+14	; 0x0e
    170e:	3f 85       	ldd	r19, Y+15	; 0x0f
    1710:	fc 01       	movw	r30, r24
    1712:	33 83       	std	Z+3, r19	; 0x03
    1714:	22 83       	std	Z+2, r18	; 0x02
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	2c 85       	ldd	r18, Y+12	; 0x0c
    171c:	3d 85       	ldd	r19, Y+13	; 0x0d
    171e:	fc 01       	movw	r30, r24
    1720:	35 83       	std	Z+5, r19	; 0x05
    1722:	24 83       	std	Z+4, r18	; 0x04
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	28 89       	ldd	r18, Y+16	; 0x10
    172a:	39 89       	ldd	r19, Y+17	; 0x11
    172c:	fc 01       	movw	r30, r24
    172e:	37 83       	std	Z+7, r19	; 0x07
    1730:	26 83       	std	Z+6, r18	; 0x06
    1732:	8f e5       	ldi	r24, 0x5F	; 95
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	fc 01       	movw	r30, r24
    1738:	80 81       	ld	r24, Z
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	f8 94       	cli
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	fc 01       	movw	r30, r24
    1744:	80 81       	ld	r24, Z
    1746:	91 81       	ldd	r25, Z+1	; 0x01
    1748:	06 97       	sbiw	r24, 0x06	; 6
    174a:	29 81       	ldd	r18, Y+1	; 0x01
    174c:	3a 81       	ldd	r19, Y+2	; 0x02
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	31 81       	ldd	r19, Z+1	; 0x01
    1754:	26 50       	subi	r18, 0x06	; 6
    1756:	31 09       	sbc	r19, r1
    1758:	f9 01       	movw	r30, r18
    175a:	20 81       	ld	r18, Z
    175c:	22 60       	ori	r18, 0x02	; 2
    175e:	fc 01       	movw	r30, r24
    1760:	20 83       	st	Z, r18
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	fc 01       	movw	r30, r24
    1768:	80 81       	ld	r24, Z
    176a:	91 81       	ldd	r25, Z+1	; 0x01
    176c:	8c 01       	movw	r16, r24
    176e:	02 50       	subi	r16, 0x02	; 2
    1770:	11 09       	sbc	r17, r1
    1772:	8d 81       	ldd	r24, Y+5	; 0x05
    1774:	9e 81       	ldd	r25, Y+6	; 0x06
    1776:	af 81       	ldd	r26, Y+7	; 0x07
    1778:	b8 85       	ldd	r27, Y+8	; 0x08
    177a:	88 0f       	add	r24, r24
    177c:	99 1f       	adc	r25, r25
    177e:	aa 1f       	adc	r26, r26
    1780:	bb 1f       	adc	r27, r27
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	aa 1f       	adc	r26, r26
    1788:	bb 1f       	adc	r27, r27
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	aa 1f       	adc	r26, r26
    1790:	bb 1f       	adc	r27, r27
    1792:	9c 01       	movw	r18, r24
    1794:	ad 01       	movw	r20, r26
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a1 ee       	ldi	r26, 0xE1	; 225
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	bc 01       	movw	r22, r24
    17a0:	cd 01       	movw	r24, r26
    17a2:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    17a6:	da 01       	movw	r26, r20
    17a8:	c9 01       	movw	r24, r18
    17aa:	81 50       	subi	r24, 0x01	; 1
    17ac:	f8 01       	movw	r30, r16
    17ae:	80 83       	st	Z, r24
    17b0:	89 81       	ldd	r24, Y+1	; 0x01
    17b2:	9a 81       	ldd	r25, Y+2	; 0x02
    17b4:	fc 01       	movw	r30, r24
    17b6:	80 81       	ld	r24, Z
    17b8:	91 81       	ldd	r25, Z+1	; 0x01
    17ba:	05 97       	sbiw	r24, 0x05	; 5
    17bc:	28 e9       	ldi	r18, 0x98	; 152
    17be:	fc 01       	movw	r30, r24
    17c0:	20 83       	st	Z, r18
    17c2:	89 81       	ldd	r24, Y+1	; 0x01
    17c4:	9a 81       	ldd	r25, Y+2	; 0x02
    17c6:	fc 01       	movw	r30, r24
    17c8:	80 81       	ld	r24, Z
    17ca:	91 81       	ldd	r25, Z+1	; 0x01
    17cc:	04 97       	sbiw	r24, 0x04	; 4
    17ce:	26 e0       	ldi	r18, 0x06	; 6
    17d0:	fc 01       	movw	r30, r24
    17d2:	20 83       	st	Z, r18
    17d4:	8f e5       	ldi	r24, 0x5F	; 95
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	2b 81       	ldd	r18, Y+3	; 0x03
    17da:	fc 01       	movw	r30, r24
    17dc:	20 83       	st	Z, r18
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	65 96       	adiw	r28, 0x15	; 21
    17e4:	0f b6       	in	r0, 0x3f	; 63
    17e6:	f8 94       	cli
    17e8:	de bf       	out	0x3e, r29	; 62
    17ea:	0f be       	out	0x3f, r0	; 63
    17ec:	cd bf       	out	0x3d, r28	; 61
    17ee:	df 91       	pop	r29
    17f0:	cf 91       	pop	r28
    17f2:	1f 91       	pop	r17
    17f4:	0f 91       	pop	r16
    17f6:	ef 90       	pop	r14
    17f8:	df 90       	pop	r13
    17fa:	cf 90       	pop	r12
    17fc:	bf 90       	pop	r11
    17fe:	af 90       	pop	r10
    1800:	9f 90       	pop	r9
    1802:	8f 90       	pop	r8
    1804:	08 95       	ret

00001806 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    180e:	0f 92       	push	r0
    1810:	11 24       	eor	r1, r1
    1812:	2f 93       	push	r18
    1814:	3f 93       	push	r19
    1816:	4f 93       	push	r20
    1818:	5f 93       	push	r21
    181a:	6f 93       	push	r22
    181c:	7f 93       	push	r23
    181e:	8f 93       	push	r24
    1820:	9f 93       	push	r25
    1822:	af 93       	push	r26
    1824:	bf 93       	push	r27
    1826:	ef 93       	push	r30
    1828:	ff 93       	push	r31
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	1f 92       	push	r1
    1830:	cd b7       	in	r28, 0x3d	; 61
    1832:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1834:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1838:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    183c:	89 2b       	or	r24, r25
    183e:	31 f1       	breq	.+76     	; 0x188c <__vector_20+0x86>
		item = UDR0;
    1840:	86 ec       	ldi	r24, 0xC6	; 198
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	fc 01       	movw	r30, r24
    1846:	80 81       	ld	r24, Z
    1848:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    184a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    184e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1852:	fc 01       	movw	r30, r24
    1854:	84 81       	ldd	r24, Z+4	; 0x04
    1856:	95 81       	ldd	r25, Z+5	; 0x05
    1858:	69 81       	ldd	r22, Y+1	; 0x01
    185a:	0e 94 44 06 	call	0xc88	; 0xc88 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    185e:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1862:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1866:	fc 01       	movw	r30, r24
    1868:	86 81       	ldd	r24, Z+6	; 0x06
    186a:	97 81       	ldd	r25, Z+7	; 0x07
    186c:	89 2b       	or	r24, r25
    186e:	71 f0       	breq	.+28     	; 0x188c <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1870:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1874:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1878:	fc 01       	movw	r30, r24
    187a:	26 81       	ldd	r18, Z+6	; 0x06
    187c:	37 81       	ldd	r19, Z+7	; 0x07
    187e:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1882:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1886:	69 81       	ldd	r22, Y+1	; 0x01
    1888:	f9 01       	movw	r30, r18
    188a:	09 95       	icall
		}
	}
}
    188c:	0f 90       	pop	r0
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	ff 91       	pop	r31
    1894:	ef 91       	pop	r30
    1896:	bf 91       	pop	r27
    1898:	af 91       	pop	r26
    189a:	9f 91       	pop	r25
    189c:	8f 91       	pop	r24
    189e:	7f 91       	pop	r23
    18a0:	6f 91       	pop	r22
    18a2:	5f 91       	pop	r21
    18a4:	4f 91       	pop	r20
    18a6:	3f 91       	pop	r19
    18a8:	2f 91       	pop	r18
    18aa:	0f 90       	pop	r0
    18ac:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18b0:	0f 90       	pop	r0
    18b2:	1f 90       	pop	r1
    18b4:	18 95       	reti

000018b6 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    18b6:	1f 92       	push	r1
    18b8:	0f 92       	push	r0
    18ba:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18be:	0f 92       	push	r0
    18c0:	11 24       	eor	r1, r1
    18c2:	2f 93       	push	r18
    18c4:	3f 93       	push	r19
    18c6:	4f 93       	push	r20
    18c8:	5f 93       	push	r21
    18ca:	6f 93       	push	r22
    18cc:	7f 93       	push	r23
    18ce:	8f 93       	push	r24
    18d0:	9f 93       	push	r25
    18d2:	af 93       	push	r26
    18d4:	bf 93       	push	r27
    18d6:	ef 93       	push	r30
    18d8:	ff 93       	push	r31
    18da:	cf 93       	push	r28
    18dc:	df 93       	push	r29
    18de:	1f 92       	push	r1
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    18e4:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    18e8:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    18ec:	89 2b       	or	r24, r25
    18ee:	f9 f0       	breq	.+62     	; 0x192e <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    18f0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    18f4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    18f8:	fc 01       	movw	r30, r24
    18fa:	82 81       	ldd	r24, Z+2	; 0x02
    18fc:	93 81       	ldd	r25, Z+3	; 0x03
    18fe:	9e 01       	movw	r18, r28
    1900:	2f 5f       	subi	r18, 0xFF	; 255
    1902:	3f 4f       	sbci	r19, 0xFF	; 255
    1904:	b9 01       	movw	r22, r18
    1906:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <buffer_get_item>
    190a:	88 23       	and	r24, r24
    190c:	31 f4       	brne	.+12     	; 0x191a <__vector_21+0x64>
			UDR0 = item;
    190e:	86 ec       	ldi	r24, 0xC6	; 198
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	29 81       	ldd	r18, Y+1	; 0x01
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18
    1918:	13 c0       	rjmp	.+38     	; 0x1940 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    191a:	81 ec       	ldi	r24, 0xC1	; 193
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	21 ec       	ldi	r18, 0xC1	; 193
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	f9 01       	movw	r30, r18
    1924:	20 81       	ld	r18, Z
    1926:	2f 7d       	andi	r18, 0xDF	; 223
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
    192c:	09 c0       	rjmp	.+18     	; 0x1940 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    192e:	81 ec       	ldi	r24, 0xC1	; 193
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	21 ec       	ldi	r18, 0xC1	; 193
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	f9 01       	movw	r30, r18
    1938:	20 81       	ld	r18, Z
    193a:	2f 7d       	andi	r18, 0xDF	; 223
    193c:	fc 01       	movw	r30, r24
    193e:	20 83       	st	Z, r18
	}
}
    1940:	0f 90       	pop	r0
    1942:	df 91       	pop	r29
    1944:	cf 91       	pop	r28
    1946:	ff 91       	pop	r31
    1948:	ef 91       	pop	r30
    194a:	bf 91       	pop	r27
    194c:	af 91       	pop	r26
    194e:	9f 91       	pop	r25
    1950:	8f 91       	pop	r24
    1952:	7f 91       	pop	r23
    1954:	6f 91       	pop	r22
    1956:	5f 91       	pop	r21
    1958:	4f 91       	pop	r20
    195a:	3f 91       	pop	r19
    195c:	2f 91       	pop	r18
    195e:	0f 90       	pop	r0
    1960:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1964:	0f 90       	pop	r0
    1966:	1f 90       	pop	r1
    1968:	18 95       	reti

0000196a <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    196a:	1f 92       	push	r1
    196c:	0f 92       	push	r0
    196e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1972:	0f 92       	push	r0
    1974:	11 24       	eor	r1, r1
    1976:	2f 93       	push	r18
    1978:	3f 93       	push	r19
    197a:	4f 93       	push	r20
    197c:	5f 93       	push	r21
    197e:	6f 93       	push	r22
    1980:	7f 93       	push	r23
    1982:	8f 93       	push	r24
    1984:	9f 93       	push	r25
    1986:	af 93       	push	r26
    1988:	bf 93       	push	r27
    198a:	ef 93       	push	r30
    198c:	ff 93       	push	r31
    198e:	cf 93       	push	r28
    1990:	df 93       	push	r29
    1992:	1f 92       	push	r1
    1994:	cd b7       	in	r28, 0x3d	; 61
    1996:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1998:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    199c:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19a0:	89 2b       	or	r24, r25
    19a2:	31 f1       	breq	.+76     	; 0x19f0 <__vector_28+0x86>
		item = UDR1;
    19a4:	8e ec       	ldi	r24, 0xCE	; 206
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	fc 01       	movw	r30, r24
    19aa:	80 81       	ld	r24, Z
    19ac:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    19ae:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19b2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19b6:	fc 01       	movw	r30, r24
    19b8:	84 81       	ldd	r24, Z+4	; 0x04
    19ba:	95 81       	ldd	r25, Z+5	; 0x05
    19bc:	69 81       	ldd	r22, Y+1	; 0x01
    19be:	0e 94 44 06 	call	0xc88	; 0xc88 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    19c2:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19c6:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19ca:	fc 01       	movw	r30, r24
    19cc:	86 81       	ldd	r24, Z+6	; 0x06
    19ce:	97 81       	ldd	r25, Z+7	; 0x07
    19d0:	89 2b       	or	r24, r25
    19d2:	71 f0       	breq	.+28     	; 0x19f0 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    19d4:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19d8:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19dc:	fc 01       	movw	r30, r24
    19de:	26 81       	ldd	r18, Z+6	; 0x06
    19e0:	37 81       	ldd	r19, Z+7	; 0x07
    19e2:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19e6:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19ea:	69 81       	ldd	r22, Y+1	; 0x01
    19ec:	f9 01       	movw	r30, r18
    19ee:	09 95       	icall
		}
	}
}
    19f0:	0f 90       	pop	r0
    19f2:	df 91       	pop	r29
    19f4:	cf 91       	pop	r28
    19f6:	ff 91       	pop	r31
    19f8:	ef 91       	pop	r30
    19fa:	bf 91       	pop	r27
    19fc:	af 91       	pop	r26
    19fe:	9f 91       	pop	r25
    1a00:	8f 91       	pop	r24
    1a02:	7f 91       	pop	r23
    1a04:	6f 91       	pop	r22
    1a06:	5f 91       	pop	r21
    1a08:	4f 91       	pop	r20
    1a0a:	3f 91       	pop	r19
    1a0c:	2f 91       	pop	r18
    1a0e:	0f 90       	pop	r0
    1a10:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a14:	0f 90       	pop	r0
    1a16:	1f 90       	pop	r1
    1a18:	18 95       	reti

00001a1a <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1a1a:	1f 92       	push	r1
    1a1c:	0f 92       	push	r0
    1a1e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a22:	0f 92       	push	r0
    1a24:	11 24       	eor	r1, r1
    1a26:	2f 93       	push	r18
    1a28:	3f 93       	push	r19
    1a2a:	4f 93       	push	r20
    1a2c:	5f 93       	push	r21
    1a2e:	6f 93       	push	r22
    1a30:	7f 93       	push	r23
    1a32:	8f 93       	push	r24
    1a34:	9f 93       	push	r25
    1a36:	af 93       	push	r26
    1a38:	bf 93       	push	r27
    1a3a:	ef 93       	push	r30
    1a3c:	ff 93       	push	r31
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	1f 92       	push	r1
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1a48:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1a4c:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1a50:	89 2b       	or	r24, r25
    1a52:	f9 f0       	breq	.+62     	; 0x1a92 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1a54:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1a58:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	82 81       	ldd	r24, Z+2	; 0x02
    1a60:	93 81       	ldd	r25, Z+3	; 0x03
    1a62:	9e 01       	movw	r18, r28
    1a64:	2f 5f       	subi	r18, 0xFF	; 255
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	b9 01       	movw	r22, r18
    1a6a:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <buffer_get_item>
    1a6e:	88 23       	and	r24, r24
    1a70:	31 f4       	brne	.+12     	; 0x1a7e <__vector_29+0x64>
			UDR1 = item;
    1a72:	8e ec       	ldi	r24, 0xCE	; 206
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	29 81       	ldd	r18, Y+1	; 0x01
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
    1a7c:	13 c0       	rjmp	.+38     	; 0x1aa4 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1a7e:	89 ec       	ldi	r24, 0xC9	; 201
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	29 ec       	ldi	r18, 0xC9	; 201
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	2f 7d       	andi	r18, 0xDF	; 223
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    1a90:	09 c0       	rjmp	.+18     	; 0x1aa4 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1a92:	89 ec       	ldi	r24, 0xC9	; 201
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	29 ec       	ldi	r18, 0xC9	; 201
    1a98:	30 e0       	ldi	r19, 0x00	; 0
    1a9a:	f9 01       	movw	r30, r18
    1a9c:	20 81       	ld	r18, Z
    1a9e:	2f 7d       	andi	r18, 0xDF	; 223
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	20 83       	st	Z, r18
	}
}
    1aa4:	0f 90       	pop	r0
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	ff 91       	pop	r31
    1aac:	ef 91       	pop	r30
    1aae:	bf 91       	pop	r27
    1ab0:	af 91       	pop	r26
    1ab2:	9f 91       	pop	r25
    1ab4:	8f 91       	pop	r24
    1ab6:	7f 91       	pop	r23
    1ab8:	6f 91       	pop	r22
    1aba:	5f 91       	pop	r21
    1abc:	4f 91       	pop	r20
    1abe:	3f 91       	pop	r19
    1ac0:	2f 91       	pop	r18
    1ac2:	0f 90       	pop	r0
    1ac4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ac8:	0f 90       	pop	r0
    1aca:	1f 90       	pop	r1
    1acc:	18 95       	reti

00001ace <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	00 d0       	rcall	.+0      	; 0x1ad4 <xQueueGenericReset+0x6>
    1ad4:	00 d0       	rcall	.+0      	; 0x1ad6 <xQueueGenericReset+0x8>
    1ad6:	1f 92       	push	r1
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	9c 83       	std	Y+4, r25	; 0x04
    1ade:	8b 83       	std	Y+3, r24	; 0x03
    1ae0:	6d 83       	std	Y+5, r22	; 0x05
    1ae2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
    1aea:	0f b6       	in	r0, 0x3f	; 63
    1aec:	f8 94       	cli
    1aee:	0f 92       	push	r0
    1af0:	89 81       	ldd	r24, Y+1	; 0x01
    1af2:	9a 81       	ldd	r25, Y+2	; 0x02
    1af4:	fc 01       	movw	r30, r24
    1af6:	80 81       	ld	r24, Z
    1af8:	91 81       	ldd	r25, Z+1	; 0x01
    1afa:	29 81       	ldd	r18, Y+1	; 0x01
    1afc:	3a 81       	ldd	r19, Y+2	; 0x02
    1afe:	f9 01       	movw	r30, r18
    1b00:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b02:	42 2f       	mov	r20, r18
    1b04:	50 e0       	ldi	r21, 0x00	; 0
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0a:	f9 01       	movw	r30, r18
    1b0c:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b0e:	22 2f       	mov	r18, r18
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	42 9f       	mul	r20, r18
    1b14:	b0 01       	movw	r22, r0
    1b16:	43 9f       	mul	r20, r19
    1b18:	70 0d       	add	r23, r0
    1b1a:	52 9f       	mul	r21, r18
    1b1c:	70 0d       	add	r23, r0
    1b1e:	11 24       	eor	r1, r1
    1b20:	9b 01       	movw	r18, r22
    1b22:	28 0f       	add	r18, r24
    1b24:	39 1f       	adc	r19, r25
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	33 83       	std	Z+3, r19	; 0x03
    1b2e:	22 83       	std	Z+2, r18	; 0x02
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	9a 81       	ldd	r25, Y+2	; 0x02
    1b34:	fc 01       	movw	r30, r24
    1b36:	12 8e       	std	Z+26, r1	; 0x1a
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 81       	ld	r18, Z
    1b40:	31 81       	ldd	r19, Z+1	; 0x01
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	fc 01       	movw	r30, r24
    1b48:	35 83       	std	Z+5, r19	; 0x05
    1b4a:	24 83       	std	Z+4, r18	; 0x04
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	fc 01       	movw	r30, r24
    1b52:	80 81       	ld	r24, Z
    1b54:	91 81       	ldd	r25, Z+1	; 0x01
    1b56:	29 81       	ldd	r18, Y+1	; 0x01
    1b58:	3a 81       	ldd	r19, Y+2	; 0x02
    1b5a:	f9 01       	movw	r30, r18
    1b5c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b5e:	22 2f       	mov	r18, r18
    1b60:	30 e0       	ldi	r19, 0x00	; 0
    1b62:	a9 01       	movw	r20, r18
    1b64:	41 50       	subi	r20, 0x01	; 1
    1b66:	51 09       	sbc	r21, r1
    1b68:	29 81       	ldd	r18, Y+1	; 0x01
    1b6a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b70:	22 2f       	mov	r18, r18
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	42 9f       	mul	r20, r18
    1b76:	b0 01       	movw	r22, r0
    1b78:	43 9f       	mul	r20, r19
    1b7a:	70 0d       	add	r23, r0
    1b7c:	52 9f       	mul	r21, r18
    1b7e:	70 0d       	add	r23, r0
    1b80:	11 24       	eor	r1, r1
    1b82:	9b 01       	movw	r18, r22
    1b84:	28 0f       	add	r18, r24
    1b86:	39 1f       	adc	r19, r25
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	fc 01       	movw	r30, r24
    1b8e:	37 83       	std	Z+7, r19	; 0x07
    1b90:	26 83       	std	Z+6, r18	; 0x06
    1b92:	89 81       	ldd	r24, Y+1	; 0x01
    1b94:	9a 81       	ldd	r25, Y+2	; 0x02
    1b96:	2f ef       	ldi	r18, 0xFF	; 255
    1b98:	fc 01       	movw	r30, r24
    1b9a:	25 8f       	std	Z+29, r18	; 0x1d
    1b9c:	89 81       	ldd	r24, Y+1	; 0x01
    1b9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba0:	2f ef       	ldi	r18, 0xFF	; 255
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	26 8f       	std	Z+30, r18	; 0x1e
    1ba6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ba8:	88 23       	and	r24, r24
    1baa:	81 f4       	brne	.+32     	; 0x1bcc <xQueueGenericReset+0xfe>
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	9a 81       	ldd	r25, Y+2	; 0x02
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	80 85       	ldd	r24, Z+8	; 0x08
    1bb4:	88 23       	and	r24, r24
    1bb6:	a1 f0       	breq	.+40     	; 0x1be0 <xQueueGenericReset+0x112>
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	08 96       	adiw	r24, 0x08	; 8
    1bbe:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    1bc2:	88 23       	and	r24, r24
    1bc4:	69 f0       	breq	.+26     	; 0x1be0 <xQueueGenericReset+0x112>
    1bc6:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    1bca:	0a c0       	rjmp	.+20     	; 0x1be0 <xQueueGenericReset+0x112>
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	08 96       	adiw	r24, 0x08	; 8
    1bd2:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	41 96       	adiw	r24, 0x11	; 17
    1bdc:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    1be0:	0f 90       	pop	r0
    1be2:	0f be       	out	0x3f, r0	; 63
    1be4:	81 e0       	ldi	r24, 0x01	; 1
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	df 91       	pop	r29
    1bf2:	cf 91       	pop	r28
    1bf4:	08 95       	ret

00001bf6 <xQueueGenericCreate>:
    1bf6:	0f 93       	push	r16
    1bf8:	1f 93       	push	r17
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	cd b7       	in	r28, 0x3d	; 61
    1c00:	de b7       	in	r29, 0x3e	; 62
    1c02:	29 97       	sbiw	r28, 0x09	; 9
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	de bf       	out	0x3e, r29	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	cd bf       	out	0x3d, r28	; 61
    1c0e:	8f 83       	std	Y+7, r24	; 0x07
    1c10:	68 87       	std	Y+8, r22	; 0x08
    1c12:	49 87       	std	Y+9, r20	; 0x09
    1c14:	88 85       	ldd	r24, Y+8	; 0x08
    1c16:	88 23       	and	r24, r24
    1c18:	19 f4       	brne	.+6      	; 0x1c20 <xQueueGenericCreate+0x2a>
    1c1a:	1a 82       	std	Y+2, r1	; 0x02
    1c1c:	19 82       	std	Y+1, r1	; 0x01
    1c1e:	0f c0       	rjmp	.+30     	; 0x1c3e <xQueueGenericCreate+0x48>
    1c20:	8f 81       	ldd	r24, Y+7	; 0x07
    1c22:	48 2f       	mov	r20, r24
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	88 85       	ldd	r24, Y+8	; 0x08
    1c28:	28 2f       	mov	r18, r24
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	42 9f       	mul	r20, r18
    1c2e:	c0 01       	movw	r24, r0
    1c30:	43 9f       	mul	r20, r19
    1c32:	90 0d       	add	r25, r0
    1c34:	52 9f       	mul	r21, r18
    1c36:	90 0d       	add	r25, r0
    1c38:	11 24       	eor	r1, r1
    1c3a:	9a 83       	std	Y+2, r25	; 0x02
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	89 81       	ldd	r24, Y+1	; 0x01
    1c40:	9a 81       	ldd	r25, Y+2	; 0x02
    1c42:	81 96       	adiw	r24, 0x21	; 33
    1c44:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pvPortMalloc>
    1c48:	9c 83       	std	Y+4, r25	; 0x04
    1c4a:	8b 83       	std	Y+3, r24	; 0x03
    1c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c50:	89 2b       	or	r24, r25
    1c52:	81 f0       	breq	.+32     	; 0x1c74 <xQueueGenericCreate+0x7e>
    1c54:	8b 81       	ldd	r24, Y+3	; 0x03
    1c56:	9c 81       	ldd	r25, Y+4	; 0x04
    1c58:	81 96       	adiw	r24, 0x21	; 33
    1c5a:	9e 83       	std	Y+6, r25	; 0x06
    1c5c:	8d 83       	std	Y+5, r24	; 0x05
    1c5e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c60:	3c 81       	ldd	r19, Y+4	; 0x04
    1c62:	8d 81       	ldd	r24, Y+5	; 0x05
    1c64:	9e 81       	ldd	r25, Y+6	; 0x06
    1c66:	89 01       	movw	r16, r18
    1c68:	29 85       	ldd	r18, Y+9	; 0x09
    1c6a:	ac 01       	movw	r20, r24
    1c6c:	68 85       	ldd	r22, Y+8	; 0x08
    1c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c70:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <prvInitialiseNewQueue>
    1c74:	8b 81       	ldd	r24, Y+3	; 0x03
    1c76:	9c 81       	ldd	r25, Y+4	; 0x04
    1c78:	29 96       	adiw	r28, 0x09	; 9
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	de bf       	out	0x3e, r29	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	cd bf       	out	0x3d, r28	; 61
    1c84:	df 91       	pop	r29
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	08 95       	ret

00001c8e <prvInitialiseNewQueue>:
    1c8e:	0f 93       	push	r16
    1c90:	1f 93       	push	r17
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	cd b7       	in	r28, 0x3d	; 61
    1c98:	de b7       	in	r29, 0x3e	; 62
    1c9a:	27 97       	sbiw	r28, 0x07	; 7
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	de bf       	out	0x3e, r29	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	cd bf       	out	0x3d, r28	; 61
    1ca6:	89 83       	std	Y+1, r24	; 0x01
    1ca8:	6a 83       	std	Y+2, r22	; 0x02
    1caa:	5c 83       	std	Y+4, r21	; 0x04
    1cac:	4b 83       	std	Y+3, r20	; 0x03
    1cae:	2d 83       	std	Y+5, r18	; 0x05
    1cb0:	1f 83       	std	Y+7, r17	; 0x07
    1cb2:	0e 83       	std	Y+6, r16	; 0x06
    1cb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb6:	88 23       	and	r24, r24
    1cb8:	41 f4       	brne	.+16     	; 0x1cca <prvInitialiseNewQueue+0x3c>
    1cba:	8e 81       	ldd	r24, Y+6	; 0x06
    1cbc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cbe:	2e 81       	ldd	r18, Y+6	; 0x06
    1cc0:	3f 81       	ldd	r19, Y+7	; 0x07
    1cc2:	fc 01       	movw	r30, r24
    1cc4:	31 83       	std	Z+1, r19	; 0x01
    1cc6:	20 83       	st	Z, r18
    1cc8:	07 c0       	rjmp	.+14     	; 0x1cd8 <prvInitialiseNewQueue+0x4a>
    1cca:	8e 81       	ldd	r24, Y+6	; 0x06
    1ccc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cce:	2b 81       	ldd	r18, Y+3	; 0x03
    1cd0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd2:	fc 01       	movw	r30, r24
    1cd4:	31 83       	std	Z+1, r19	; 0x01
    1cd6:	20 83       	st	Z, r18
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	29 81       	ldd	r18, Y+1	; 0x01
    1cde:	fc 01       	movw	r30, r24
    1ce0:	23 8f       	std	Z+27, r18	; 0x1b
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce6:	2a 81       	ldd	r18, Y+2	; 0x02
    1ce8:	fc 01       	movw	r30, r24
    1cea:	24 8f       	std	Z+28, r18	; 0x1c
    1cec:	8e 81       	ldd	r24, Y+6	; 0x06
    1cee:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf0:	61 e0       	ldi	r22, 0x01	; 1
    1cf2:	0e 94 67 0d 	call	0x1ace	; 0x1ace <xQueueGenericReset>
    1cf6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfa:	2d 81       	ldd	r18, Y+5	; 0x05
    1cfc:	fc 01       	movw	r30, r24
    1cfe:	20 a3       	std	Z+32, r18	; 0x20
    1d00:	27 96       	adiw	r28, 0x07	; 7
    1d02:	0f b6       	in	r0, 0x3f	; 63
    1d04:	f8 94       	cli
    1d06:	de bf       	out	0x3e, r29	; 62
    1d08:	0f be       	out	0x3f, r0	; 63
    1d0a:	cd bf       	out	0x3d, r28	; 61
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	1f 91       	pop	r17
    1d12:	0f 91       	pop	r16
    1d14:	08 95       	ret

00001d16 <prvInitialiseMutex>:
    1d16:	cf 93       	push	r28
    1d18:	df 93       	push	r29
    1d1a:	00 d0       	rcall	.+0      	; 0x1d1c <prvInitialiseMutex+0x6>
    1d1c:	cd b7       	in	r28, 0x3d	; 61
    1d1e:	de b7       	in	r29, 0x3e	; 62
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	89 81       	ldd	r24, Y+1	; 0x01
    1d26:	9a 81       	ldd	r25, Y+2	; 0x02
    1d28:	89 2b       	or	r24, r25
    1d2a:	b9 f0       	breq	.+46     	; 0x1d5a <prvInitialiseMutex+0x44>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	fc 01       	movw	r30, r24
    1d32:	13 82       	std	Z+3, r1	; 0x03
    1d34:	12 82       	std	Z+2, r1	; 0x02
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	11 82       	std	Z+1, r1	; 0x01
    1d3e:	10 82       	st	Z, r1
    1d40:	89 81       	ldd	r24, Y+1	; 0x01
    1d42:	9a 81       	ldd	r25, Y+2	; 0x02
    1d44:	fc 01       	movw	r30, r24
    1d46:	16 82       	std	Z+6, r1	; 0x06
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	40 e0       	ldi	r20, 0x00	; 0
    1d50:	50 e0       	ldi	r21, 0x00	; 0
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	70 e0       	ldi	r23, 0x00	; 0
    1d56:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <xQueueGenericSend>
    1d5a:	0f 90       	pop	r0
    1d5c:	0f 90       	pop	r0
    1d5e:	df 91       	pop	r29
    1d60:	cf 91       	pop	r28
    1d62:	08 95       	ret

00001d64 <xQueueCreateMutex>:
    1d64:	cf 93       	push	r28
    1d66:	df 93       	push	r29
    1d68:	00 d0       	rcall	.+0      	; 0x1d6a <xQueueCreateMutex+0x6>
    1d6a:	00 d0       	rcall	.+0      	; 0x1d6c <xQueueCreateMutex+0x8>
    1d6c:	1f 92       	push	r1
    1d6e:	cd b7       	in	r28, 0x3d	; 61
    1d70:	de b7       	in	r29, 0x3e	; 62
    1d72:	8d 83       	std	Y+5, r24	; 0x05
    1d74:	81 e0       	ldi	r24, 0x01	; 1
    1d76:	89 83       	std	Y+1, r24	; 0x01
    1d78:	1a 82       	std	Y+2, r1	; 0x02
    1d7a:	4d 81       	ldd	r20, Y+5	; 0x05
    1d7c:	6a 81       	ldd	r22, Y+2	; 0x02
    1d7e:	89 81       	ldd	r24, Y+1	; 0x01
    1d80:	0e 94 fb 0d 	call	0x1bf6	; 0x1bf6 <xQueueGenericCreate>
    1d84:	9c 83       	std	Y+4, r25	; 0x04
    1d86:	8b 83       	std	Y+3, r24	; 0x03
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <prvInitialiseMutex>
    1d90:	8b 81       	ldd	r24, Y+3	; 0x03
    1d92:	9c 81       	ldd	r25, Y+4	; 0x04
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <xQueueGenericSend>:
    1da4:	cf 93       	push	r28
    1da6:	df 93       	push	r29
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
    1dac:	2e 97       	sbiw	r28, 0x0e	; 14
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	de bf       	out	0x3e, r29	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	cd bf       	out	0x3d, r28	; 61
    1db8:	99 87       	std	Y+9, r25	; 0x09
    1dba:	88 87       	std	Y+8, r24	; 0x08
    1dbc:	7b 87       	std	Y+11, r23	; 0x0b
    1dbe:	6a 87       	std	Y+10, r22	; 0x0a
    1dc0:	5d 87       	std	Y+13, r21	; 0x0d
    1dc2:	4c 87       	std	Y+12, r20	; 0x0c
    1dc4:	2e 87       	std	Y+14, r18	; 0x0e
    1dc6:	19 82       	std	Y+1, r1	; 0x01
    1dc8:	88 85       	ldd	r24, Y+8	; 0x08
    1dca:	99 85       	ldd	r25, Y+9	; 0x09
    1dcc:	9b 83       	std	Y+3, r25	; 0x03
    1dce:	8a 83       	std	Y+2, r24	; 0x02
    1dd0:	0f b6       	in	r0, 0x3f	; 63
    1dd2:	f8 94       	cli
    1dd4:	0f 92       	push	r0
    1dd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dda:	fc 01       	movw	r30, r24
    1ddc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dde:	8a 81       	ldd	r24, Y+2	; 0x02
    1de0:	9b 81       	ldd	r25, Y+3	; 0x03
    1de2:	fc 01       	movw	r30, r24
    1de4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1de6:	28 17       	cp	r18, r24
    1de8:	18 f0       	brcs	.+6      	; 0x1df0 <xQueueGenericSend+0x4c>
    1dea:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dec:	82 30       	cpi	r24, 0x02	; 2
    1dee:	11 f5       	brne	.+68     	; 0x1e34 <xQueueGenericSend+0x90>
    1df0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1df2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1df4:	8a 81       	ldd	r24, Y+2	; 0x02
    1df6:	9b 81       	ldd	r25, Y+3	; 0x03
    1df8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1dfa:	b9 01       	movw	r22, r18
    1dfc:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <prvCopyDataToQueue>
    1e00:	8c 83       	std	Y+4, r24	; 0x04
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	fc 01       	movw	r30, r24
    1e08:	81 89       	ldd	r24, Z+17	; 0x11
    1e0a:	88 23       	and	r24, r24
    1e0c:	51 f0       	breq	.+20     	; 0x1e22 <xQueueGenericSend+0x7e>
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	9b 81       	ldd	r25, Y+3	; 0x03
    1e12:	41 96       	adiw	r24, 0x11	; 17
    1e14:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    1e18:	88 23       	and	r24, r24
    1e1a:	41 f0       	breq	.+16     	; 0x1e2c <xQueueGenericSend+0x88>
    1e1c:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    1e20:	05 c0       	rjmp	.+10     	; 0x1e2c <xQueueGenericSend+0x88>
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	88 23       	and	r24, r24
    1e26:	11 f0       	breq	.+4      	; 0x1e2c <xQueueGenericSend+0x88>
    1e28:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    1e2c:	0f 90       	pop	r0
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	81 e0       	ldi	r24, 0x01	; 1
    1e32:	61 c0       	rjmp	.+194    	; 0x1ef6 <xQueueGenericSend+0x152>
    1e34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e36:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e38:	89 2b       	or	r24, r25
    1e3a:	21 f4       	brne	.+8      	; 0x1e44 <xQueueGenericSend+0xa0>
    1e3c:	0f 90       	pop	r0
    1e3e:	0f be       	out	0x3f, r0	; 63
    1e40:	80 e0       	ldi	r24, 0x00	; 0
    1e42:	59 c0       	rjmp	.+178    	; 0x1ef6 <xQueueGenericSend+0x152>
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	88 23       	and	r24, r24
    1e48:	31 f4       	brne	.+12     	; 0x1e56 <xQueueGenericSend+0xb2>
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	05 96       	adiw	r24, 0x05	; 5
    1e4e:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <vTaskSetTimeOutState>
    1e52:	81 e0       	ldi	r24, 0x01	; 1
    1e54:	89 83       	std	Y+1, r24	; 0x01
    1e56:	0f 90       	pop	r0
    1e58:	0f be       	out	0x3f, r0	; 63
    1e5a:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSuspendAll>
    1e5e:	0f b6       	in	r0, 0x3f	; 63
    1e60:	f8 94       	cli
    1e62:	0f 92       	push	r0
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	fc 01       	movw	r30, r24
    1e6a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6e:	21 f4       	brne	.+8      	; 0x1e78 <xQueueGenericSend+0xd4>
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	fc 01       	movw	r30, r24
    1e76:	15 8e       	std	Z+29, r1	; 0x1d
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e80:	8f 3f       	cpi	r24, 0xFF	; 255
    1e82:	21 f4       	brne	.+8      	; 0x1e8c <xQueueGenericSend+0xe8>
    1e84:	8a 81       	ldd	r24, Y+2	; 0x02
    1e86:	9b 81       	ldd	r25, Y+3	; 0x03
    1e88:	fc 01       	movw	r30, r24
    1e8a:	16 8e       	std	Z+30, r1	; 0x1e
    1e8c:	0f 90       	pop	r0
    1e8e:	0f be       	out	0x3f, r0	; 63
    1e90:	9e 01       	movw	r18, r28
    1e92:	24 5f       	subi	r18, 0xF4	; 244
    1e94:	3f 4f       	sbci	r19, 0xFF	; 255
    1e96:	ce 01       	movw	r24, r28
    1e98:	05 96       	adiw	r24, 0x05	; 5
    1e9a:	b9 01       	movw	r22, r18
    1e9c:	0e 94 84 17 	call	0x2f08	; 0x2f08 <xTaskCheckForTimeOut>
    1ea0:	88 23       	and	r24, r24
    1ea2:	01 f5       	brne	.+64     	; 0x1ee4 <xQueueGenericSend+0x140>
    1ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea8:	0e 94 74 12 	call	0x24e8	; 0x24e8 <prvIsQueueFull>
    1eac:	88 23       	and	r24, r24
    1eae:	99 f0       	breq	.+38     	; 0x1ed6 <xQueueGenericSend+0x132>
    1eb0:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eb2:	3d 85       	ldd	r19, Y+13	; 0x0d
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb8:	08 96       	adiw	r24, 0x08	; 8
    1eba:	b9 01       	movw	r22, r18
    1ebc:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskPlaceOnEventList>
    1ec0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec4:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    1ec8:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    1ecc:	88 23       	and	r24, r24
    1ece:	91 f4       	brne	.+36     	; 0x1ef4 <xQueueGenericSend+0x150>
    1ed0:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    1ed4:	0f c0       	rjmp	.+30     	; 0x1ef4 <xQueueGenericSend+0x150>
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eda:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    1ede:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    1ee2:	76 cf       	rjmp	.-276    	; 0x1dd0 <xQueueGenericSend+0x2c>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    1eec:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    1ef0:	80 e0       	ldi	r24, 0x00	; 0
    1ef2:	01 c0       	rjmp	.+2      	; 0x1ef6 <xQueueGenericSend+0x152>
    1ef4:	6d cf       	rjmp	.-294    	; 0x1dd0 <xQueueGenericSend+0x2c>
    1ef6:	2e 96       	adiw	r28, 0x0e	; 14
    1ef8:	0f b6       	in	r0, 0x3f	; 63
    1efa:	f8 94       	cli
    1efc:	de bf       	out	0x3e, r29	; 62
    1efe:	0f be       	out	0x3f, r0	; 63
    1f00:	cd bf       	out	0x3d, r28	; 61
    1f02:	df 91       	pop	r29
    1f04:	cf 91       	pop	r28
    1f06:	08 95       	ret

00001f08 <xQueueGenericSendFromISR>:
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	2c 97       	sbiw	r28, 0x0c	; 12
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	9f 83       	std	Y+7, r25	; 0x07
    1f1e:	8e 83       	std	Y+6, r24	; 0x06
    1f20:	79 87       	std	Y+9, r23	; 0x09
    1f22:	68 87       	std	Y+8, r22	; 0x08
    1f24:	5b 87       	std	Y+11, r21	; 0x0b
    1f26:	4a 87       	std	Y+10, r20	; 0x0a
    1f28:	2c 87       	std	Y+12, r18	; 0x0c
    1f2a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f2c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2e:	9b 83       	std	Y+3, r25	; 0x03
    1f30:	8a 83       	std	Y+2, r24	; 0x02
    1f32:	1c 82       	std	Y+4, r1	; 0x04
    1f34:	8a 81       	ldd	r24, Y+2	; 0x02
    1f36:	9b 81       	ldd	r25, Y+3	; 0x03
    1f38:	fc 01       	movw	r30, r24
    1f3a:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f40:	fc 01       	movw	r30, r24
    1f42:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f44:	28 17       	cp	r18, r24
    1f46:	18 f0       	brcs	.+6      	; 0x1f4e <xQueueGenericSendFromISR+0x46>
    1f48:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f4a:	82 30       	cpi	r24, 0x02	; 2
    1f4c:	89 f5       	brne	.+98     	; 0x1fb0 <xQueueGenericSendFromISR+0xa8>
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	fc 01       	movw	r30, r24
    1f54:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f56:	8d 83       	std	Y+5, r24	; 0x05
    1f58:	28 85       	ldd	r18, Y+8	; 0x08
    1f5a:	39 85       	ldd	r19, Y+9	; 0x09
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f62:	b9 01       	movw	r22, r18
    1f64:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <prvCopyDataToQueue>
    1f68:	8d 81       	ldd	r24, Y+5	; 0x05
    1f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6c:	b9 f4       	brne	.+46     	; 0x1f9c <xQueueGenericSendFromISR+0x94>
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	fc 01       	movw	r30, r24
    1f74:	81 89       	ldd	r24, Z+17	; 0x11
    1f76:	88 23       	and	r24, r24
    1f78:	c1 f0       	breq	.+48     	; 0x1faa <xQueueGenericSendFromISR+0xa2>
    1f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f7e:	41 96       	adiw	r24, 0x11	; 17
    1f80:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    1f84:	88 23       	and	r24, r24
    1f86:	89 f0       	breq	.+34     	; 0x1faa <xQueueGenericSendFromISR+0xa2>
    1f88:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f8a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f8c:	89 2b       	or	r24, r25
    1f8e:	69 f0       	breq	.+26     	; 0x1faa <xQueueGenericSendFromISR+0xa2>
    1f90:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f92:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f94:	21 e0       	ldi	r18, 0x01	; 1
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
    1f9a:	07 c0       	rjmp	.+14     	; 0x1faa <xQueueGenericSendFromISR+0xa2>
    1f9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9e:	8f 5f       	subi	r24, 0xFF	; 255
    1fa0:	28 2f       	mov	r18, r24
    1fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa4:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa6:	fc 01       	movw	r30, r24
    1fa8:	26 8f       	std	Z+30, r18	; 0x1e
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	89 83       	std	Y+1, r24	; 0x01
    1fae:	01 c0       	rjmp	.+2      	; 0x1fb2 <xQueueGenericSendFromISR+0xaa>
    1fb0:	19 82       	std	Y+1, r1	; 0x01
    1fb2:	89 81       	ldd	r24, Y+1	; 0x01
    1fb4:	2c 96       	adiw	r28, 0x0c	; 12
    1fb6:	0f b6       	in	r0, 0x3f	; 63
    1fb8:	f8 94       	cli
    1fba:	de bf       	out	0x3e, r29	; 62
    1fbc:	0f be       	out	0x3f, r0	; 63
    1fbe:	cd bf       	out	0x3d, r28	; 61
    1fc0:	df 91       	pop	r29
    1fc2:	cf 91       	pop	r28
    1fc4:	08 95       	ret

00001fc6 <xQueueGenericReceive>:
    1fc6:	cf 93       	push	r28
    1fc8:	df 93       	push	r29
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	60 97       	sbiw	r28, 0x10	; 16
    1fd0:	0f b6       	in	r0, 0x3f	; 63
    1fd2:	f8 94       	cli
    1fd4:	de bf       	out	0x3e, r29	; 62
    1fd6:	0f be       	out	0x3f, r0	; 63
    1fd8:	cd bf       	out	0x3d, r28	; 61
    1fda:	9b 87       	std	Y+11, r25	; 0x0b
    1fdc:	8a 87       	std	Y+10, r24	; 0x0a
    1fde:	7d 87       	std	Y+13, r23	; 0x0d
    1fe0:	6c 87       	std	Y+12, r22	; 0x0c
    1fe2:	5f 87       	std	Y+15, r21	; 0x0f
    1fe4:	4e 87       	std	Y+14, r20	; 0x0e
    1fe6:	28 8b       	std	Y+16, r18	; 0x10
    1fe8:	19 82       	std	Y+1, r1	; 0x01
    1fea:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fec:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fee:	9b 83       	std	Y+3, r25	; 0x03
    1ff0:	8a 83       	std	Y+2, r24	; 0x02
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	0f 92       	push	r0
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2000:	8c 83       	std	Y+4, r24	; 0x04
    2002:	8c 81       	ldd	r24, Y+4	; 0x04
    2004:	88 23       	and	r24, r24
    2006:	09 f4       	brne	.+2      	; 0x200a <xQueueGenericReceive+0x44>
    2008:	51 c0       	rjmp	.+162    	; 0x20ac <xQueueGenericReceive+0xe6>
    200a:	8a 81       	ldd	r24, Y+2	; 0x02
    200c:	9b 81       	ldd	r25, Y+3	; 0x03
    200e:	fc 01       	movw	r30, r24
    2010:	86 81       	ldd	r24, Z+6	; 0x06
    2012:	97 81       	ldd	r25, Z+7	; 0x07
    2014:	9e 83       	std	Y+6, r25	; 0x06
    2016:	8d 83       	std	Y+5, r24	; 0x05
    2018:	2c 85       	ldd	r18, Y+12	; 0x0c
    201a:	3d 85       	ldd	r19, Y+13	; 0x0d
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	9b 81       	ldd	r25, Y+3	; 0x03
    2020:	b9 01       	movw	r22, r18
    2022:	0e 94 a9 11 	call	0x2352	; 0x2352 <prvCopyDataFromQueue>
    2026:	88 89       	ldd	r24, Y+16	; 0x10
    2028:	88 23       	and	r24, r24
    202a:	31 f5       	brne	.+76     	; 0x2078 <xQueueGenericReceive+0xb2>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	2f ef       	ldi	r18, 0xFF	; 255
    2030:	28 0f       	add	r18, r24
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	9b 81       	ldd	r25, Y+3	; 0x03
    2036:	fc 01       	movw	r30, r24
    2038:	22 8f       	std	Z+26, r18	; 0x1a
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	fc 01       	movw	r30, r24
    2040:	80 81       	ld	r24, Z
    2042:	91 81       	ldd	r25, Z+1	; 0x01
    2044:	89 2b       	or	r24, r25
    2046:	41 f4       	brne	.+16     	; 0x2058 <xQueueGenericReceive+0x92>
    2048:	0e 94 de 19 	call	0x33bc	; 0x33bc <pvTaskIncrementMutexHeldCount>
    204c:	9c 01       	movw	r18, r24
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	9b 81       	ldd	r25, Y+3	; 0x03
    2052:	fc 01       	movw	r30, r24
    2054:	33 83       	std	Z+3, r19	; 0x03
    2056:	22 83       	std	Z+2, r18	; 0x02
    2058:	8a 81       	ldd	r24, Y+2	; 0x02
    205a:	9b 81       	ldd	r25, Y+3	; 0x03
    205c:	fc 01       	movw	r30, r24
    205e:	80 85       	ldd	r24, Z+8	; 0x08
    2060:	88 23       	and	r24, r24
    2062:	01 f1       	breq	.+64     	; 0x20a4 <xQueueGenericReceive+0xde>
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	08 96       	adiw	r24, 0x08	; 8
    206a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    206e:	88 23       	and	r24, r24
    2070:	c9 f0       	breq	.+50     	; 0x20a4 <xQueueGenericReceive+0xde>
    2072:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    2076:	16 c0       	rjmp	.+44     	; 0x20a4 <xQueueGenericReceive+0xde>
    2078:	8a 81       	ldd	r24, Y+2	; 0x02
    207a:	9b 81       	ldd	r25, Y+3	; 0x03
    207c:	2d 81       	ldd	r18, Y+5	; 0x05
    207e:	3e 81       	ldd	r19, Y+6	; 0x06
    2080:	fc 01       	movw	r30, r24
    2082:	37 83       	std	Z+7, r19	; 0x07
    2084:	26 83       	std	Z+6, r18	; 0x06
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	fc 01       	movw	r30, r24
    208c:	81 89       	ldd	r24, Z+17	; 0x11
    208e:	88 23       	and	r24, r24
    2090:	49 f0       	breq	.+18     	; 0x20a4 <xQueueGenericReceive+0xde>
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	41 96       	adiw	r24, 0x11	; 17
    2098:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    209c:	88 23       	and	r24, r24
    209e:	11 f0       	breq	.+4      	; 0x20a4 <xQueueGenericReceive+0xde>
    20a0:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    20a4:	0f 90       	pop	r0
    20a6:	0f be       	out	0x3f, r0	; 63
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	7a c0       	rjmp	.+244    	; 0x21a0 <xQueueGenericReceive+0x1da>
    20ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    20ae:	9f 85       	ldd	r25, Y+15	; 0x0f
    20b0:	89 2b       	or	r24, r25
    20b2:	21 f4       	brne	.+8      	; 0x20bc <xQueueGenericReceive+0xf6>
    20b4:	0f 90       	pop	r0
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	80 e0       	ldi	r24, 0x00	; 0
    20ba:	72 c0       	rjmp	.+228    	; 0x21a0 <xQueueGenericReceive+0x1da>
    20bc:	89 81       	ldd	r24, Y+1	; 0x01
    20be:	88 23       	and	r24, r24
    20c0:	31 f4       	brne	.+12     	; 0x20ce <xQueueGenericReceive+0x108>
    20c2:	ce 01       	movw	r24, r28
    20c4:	07 96       	adiw	r24, 0x07	; 7
    20c6:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <vTaskSetTimeOutState>
    20ca:	81 e0       	ldi	r24, 0x01	; 1
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	0f 90       	pop	r0
    20d0:	0f be       	out	0x3f, r0	; 63
    20d2:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSuspendAll>
    20d6:	0f b6       	in	r0, 0x3f	; 63
    20d8:	f8 94       	cli
    20da:	0f 92       	push	r0
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	fc 01       	movw	r30, r24
    20e2:	85 8d       	ldd	r24, Z+29	; 0x1d
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <xQueueGenericReceive+0x12a>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	fc 01       	movw	r30, r24
    20ee:	15 8e       	std	Z+29, r1	; 0x1d
    20f0:	8a 81       	ldd	r24, Y+2	; 0x02
    20f2:	9b 81       	ldd	r25, Y+3	; 0x03
    20f4:	fc 01       	movw	r30, r24
    20f6:	86 8d       	ldd	r24, Z+30	; 0x1e
    20f8:	8f 3f       	cpi	r24, 0xFF	; 255
    20fa:	21 f4       	brne	.+8      	; 0x2104 <xQueueGenericReceive+0x13e>
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	fc 01       	movw	r30, r24
    2102:	16 8e       	std	Z+30, r1	; 0x1e
    2104:	0f 90       	pop	r0
    2106:	0f be       	out	0x3f, r0	; 63
    2108:	9e 01       	movw	r18, r28
    210a:	22 5f       	subi	r18, 0xF2	; 242
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	ce 01       	movw	r24, r28
    2110:	07 96       	adiw	r24, 0x07	; 7
    2112:	b9 01       	movw	r22, r18
    2114:	0e 94 84 17 	call	0x2f08	; 0x2f08 <xTaskCheckForTimeOut>
    2118:	88 23       	and	r24, r24
    211a:	99 f5       	brne	.+102    	; 0x2182 <xQueueGenericReceive+0x1bc>
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	9b 81       	ldd	r25, Y+3	; 0x03
    2120:	0e 94 56 12 	call	0x24ac	; 0x24ac <prvIsQueueEmpty>
    2124:	88 23       	and	r24, r24
    2126:	31 f1       	breq	.+76     	; 0x2174 <xQueueGenericReceive+0x1ae>
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	9b 81       	ldd	r25, Y+3	; 0x03
    212c:	fc 01       	movw	r30, r24
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	89 2b       	or	r24, r25
    2134:	61 f4       	brne	.+24     	; 0x214e <xQueueGenericReceive+0x188>
    2136:	0f b6       	in	r0, 0x3f	; 63
    2138:	f8 94       	cli
    213a:	0f 92       	push	r0
    213c:	8a 81       	ldd	r24, Y+2	; 0x02
    213e:	9b 81       	ldd	r25, Y+3	; 0x03
    2140:	fc 01       	movw	r30, r24
    2142:	82 81       	ldd	r24, Z+2	; 0x02
    2144:	93 81       	ldd	r25, Z+3	; 0x03
    2146:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskPriorityInherit>
    214a:	0f 90       	pop	r0
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2150:	3f 85       	ldd	r19, Y+15	; 0x0f
    2152:	8a 81       	ldd	r24, Y+2	; 0x02
    2154:	9b 81       	ldd	r25, Y+3	; 0x03
    2156:	41 96       	adiw	r24, 0x11	; 17
    2158:	b9 01       	movw	r22, r18
    215a:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskPlaceOnEventList>
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    2166:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    216a:	88 23       	and	r24, r24
    216c:	c1 f4       	brne	.+48     	; 0x219e <xQueueGenericReceive+0x1d8>
    216e:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    2172:	15 c0       	rjmp	.+42     	; 0x219e <xQueueGenericReceive+0x1d8>
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    217c:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    2180:	38 cf       	rjmp	.-400    	; 0x1ff2 <xQueueGenericReceive+0x2c>
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <prvUnlockQueue>
    218a:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    218e:	8a 81       	ldd	r24, Y+2	; 0x02
    2190:	9b 81       	ldd	r25, Y+3	; 0x03
    2192:	0e 94 56 12 	call	0x24ac	; 0x24ac <prvIsQueueEmpty>
    2196:	88 23       	and	r24, r24
    2198:	11 f0       	breq	.+4      	; 0x219e <xQueueGenericReceive+0x1d8>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	01 c0       	rjmp	.+2      	; 0x21a0 <xQueueGenericReceive+0x1da>
    219e:	29 cf       	rjmp	.-430    	; 0x1ff2 <xQueueGenericReceive+0x2c>
    21a0:	60 96       	adiw	r28, 0x10	; 16
    21a2:	0f b6       	in	r0, 0x3f	; 63
    21a4:	f8 94       	cli
    21a6:	de bf       	out	0x3e, r29	; 62
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	cd bf       	out	0x3d, r28	; 61
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	08 95       	ret

000021b2 <prvCopyDataToQueue>:
    21b2:	cf 93       	push	r28
    21b4:	df 93       	push	r29
    21b6:	cd b7       	in	r28, 0x3d	; 61
    21b8:	de b7       	in	r29, 0x3e	; 62
    21ba:	27 97       	sbiw	r28, 0x07	; 7
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
    21ca:	7e 83       	std	Y+6, r23	; 0x06
    21cc:	6d 83       	std	Y+5, r22	; 0x05
    21ce:	4f 83       	std	Y+7, r20	; 0x07
    21d0:	19 82       	std	Y+1, r1	; 0x01
    21d2:	8b 81       	ldd	r24, Y+3	; 0x03
    21d4:	9c 81       	ldd	r25, Y+4	; 0x04
    21d6:	fc 01       	movw	r30, r24
    21d8:	82 8d       	ldd	r24, Z+26	; 0x1a
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	fc 01       	movw	r30, r24
    21e2:	84 8d       	ldd	r24, Z+28	; 0x1c
    21e4:	88 23       	and	r24, r24
    21e6:	b1 f4       	brne	.+44     	; 0x2214 <prvCopyDataToQueue+0x62>
    21e8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ea:	9c 81       	ldd	r25, Y+4	; 0x04
    21ec:	fc 01       	movw	r30, r24
    21ee:	80 81       	ld	r24, Z
    21f0:	91 81       	ldd	r25, Z+1	; 0x01
    21f2:	89 2b       	or	r24, r25
    21f4:	09 f0       	breq	.+2      	; 0x21f8 <prvCopyDataToQueue+0x46>
    21f6:	9c c0       	rjmp	.+312    	; 0x2330 <prvCopyDataToQueue+0x17e>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	fc 01       	movw	r30, r24
    21fe:	82 81       	ldd	r24, Z+2	; 0x02
    2200:	93 81       	ldd	r25, Z+3	; 0x03
    2202:	0e 94 61 19 	call	0x32c2	; 0x32c2 <xTaskPriorityDisinherit>
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	8b 81       	ldd	r24, Y+3	; 0x03
    220a:	9c 81       	ldd	r25, Y+4	; 0x04
    220c:	fc 01       	movw	r30, r24
    220e:	13 82       	std	Z+3, r1	; 0x03
    2210:	12 82       	std	Z+2, r1	; 0x02
    2212:	8e c0       	rjmp	.+284    	; 0x2330 <prvCopyDataToQueue+0x17e>
    2214:	8f 81       	ldd	r24, Y+7	; 0x07
    2216:	88 23       	and	r24, r24
    2218:	d9 f5       	brne	.+118    	; 0x2290 <prvCopyDataToQueue+0xde>
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	fc 01       	movw	r30, r24
    2220:	84 8d       	ldd	r24, Z+28	; 0x1c
    2222:	48 2f       	mov	r20, r24
    2224:	50 e0       	ldi	r21, 0x00	; 0
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	fc 01       	movw	r30, r24
    222c:	84 81       	ldd	r24, Z+4	; 0x04
    222e:	95 81       	ldd	r25, Z+5	; 0x05
    2230:	2d 81       	ldd	r18, Y+5	; 0x05
    2232:	3e 81       	ldd	r19, Y+6	; 0x06
    2234:	b9 01       	movw	r22, r18
    2236:	0e 94 38 1c 	call	0x3870	; 0x3870 <memcpy>
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	fc 01       	movw	r30, r24
    2240:	24 81       	ldd	r18, Z+4	; 0x04
    2242:	35 81       	ldd	r19, Z+5	; 0x05
    2244:	8b 81       	ldd	r24, Y+3	; 0x03
    2246:	9c 81       	ldd	r25, Y+4	; 0x04
    2248:	fc 01       	movw	r30, r24
    224a:	84 8d       	ldd	r24, Z+28	; 0x1c
    224c:	88 2f       	mov	r24, r24
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	28 0f       	add	r18, r24
    2252:	39 1f       	adc	r19, r25
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	fc 01       	movw	r30, r24
    225a:	35 83       	std	Z+5, r19	; 0x05
    225c:	24 83       	std	Z+4, r18	; 0x04
    225e:	8b 81       	ldd	r24, Y+3	; 0x03
    2260:	9c 81       	ldd	r25, Y+4	; 0x04
    2262:	fc 01       	movw	r30, r24
    2264:	24 81       	ldd	r18, Z+4	; 0x04
    2266:	35 81       	ldd	r19, Z+5	; 0x05
    2268:	8b 81       	ldd	r24, Y+3	; 0x03
    226a:	9c 81       	ldd	r25, Y+4	; 0x04
    226c:	fc 01       	movw	r30, r24
    226e:	82 81       	ldd	r24, Z+2	; 0x02
    2270:	93 81       	ldd	r25, Z+3	; 0x03
    2272:	28 17       	cp	r18, r24
    2274:	39 07       	cpc	r19, r25
    2276:	08 f4       	brcc	.+2      	; 0x227a <prvCopyDataToQueue+0xc8>
    2278:	5b c0       	rjmp	.+182    	; 0x2330 <prvCopyDataToQueue+0x17e>
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	fc 01       	movw	r30, r24
    2280:	20 81       	ld	r18, Z
    2282:	31 81       	ldd	r19, Z+1	; 0x01
    2284:	8b 81       	ldd	r24, Y+3	; 0x03
    2286:	9c 81       	ldd	r25, Y+4	; 0x04
    2288:	fc 01       	movw	r30, r24
    228a:	35 83       	std	Z+5, r19	; 0x05
    228c:	24 83       	std	Z+4, r18	; 0x04
    228e:	50 c0       	rjmp	.+160    	; 0x2330 <prvCopyDataToQueue+0x17e>
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	fc 01       	movw	r30, r24
    2296:	84 8d       	ldd	r24, Z+28	; 0x1c
    2298:	48 2f       	mov	r20, r24
    229a:	50 e0       	ldi	r21, 0x00	; 0
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	fc 01       	movw	r30, r24
    22a2:	86 81       	ldd	r24, Z+6	; 0x06
    22a4:	97 81       	ldd	r25, Z+7	; 0x07
    22a6:	2d 81       	ldd	r18, Y+5	; 0x05
    22a8:	3e 81       	ldd	r19, Y+6	; 0x06
    22aa:	b9 01       	movw	r22, r18
    22ac:	0e 94 38 1c 	call	0x3870	; 0x3870 <memcpy>
    22b0:	8b 81       	ldd	r24, Y+3	; 0x03
    22b2:	9c 81       	ldd	r25, Y+4	; 0x04
    22b4:	fc 01       	movw	r30, r24
    22b6:	26 81       	ldd	r18, Z+6	; 0x06
    22b8:	37 81       	ldd	r19, Z+7	; 0x07
    22ba:	8b 81       	ldd	r24, Y+3	; 0x03
    22bc:	9c 81       	ldd	r25, Y+4	; 0x04
    22be:	fc 01       	movw	r30, r24
    22c0:	84 8d       	ldd	r24, Z+28	; 0x1c
    22c2:	88 2f       	mov	r24, r24
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	91 95       	neg	r25
    22c8:	81 95       	neg	r24
    22ca:	91 09       	sbc	r25, r1
    22cc:	28 0f       	add	r18, r24
    22ce:	39 1f       	adc	r19, r25
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	fc 01       	movw	r30, r24
    22d6:	37 83       	std	Z+7, r19	; 0x07
    22d8:	26 83       	std	Z+6, r18	; 0x06
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	9c 81       	ldd	r25, Y+4	; 0x04
    22de:	fc 01       	movw	r30, r24
    22e0:	26 81       	ldd	r18, Z+6	; 0x06
    22e2:	37 81       	ldd	r19, Z+7	; 0x07
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	fc 01       	movw	r30, r24
    22ea:	80 81       	ld	r24, Z
    22ec:	91 81       	ldd	r25, Z+1	; 0x01
    22ee:	28 17       	cp	r18, r24
    22f0:	39 07       	cpc	r19, r25
    22f2:	a8 f4       	brcc	.+42     	; 0x231e <prvCopyDataToQueue+0x16c>
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	fc 01       	movw	r30, r24
    22fa:	22 81       	ldd	r18, Z+2	; 0x02
    22fc:	33 81       	ldd	r19, Z+3	; 0x03
    22fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2300:	9c 81       	ldd	r25, Y+4	; 0x04
    2302:	fc 01       	movw	r30, r24
    2304:	84 8d       	ldd	r24, Z+28	; 0x1c
    2306:	88 2f       	mov	r24, r24
    2308:	90 e0       	ldi	r25, 0x00	; 0
    230a:	91 95       	neg	r25
    230c:	81 95       	neg	r24
    230e:	91 09       	sbc	r25, r1
    2310:	28 0f       	add	r18, r24
    2312:	39 1f       	adc	r19, r25
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	fc 01       	movw	r30, r24
    231a:	37 83       	std	Z+7, r19	; 0x07
    231c:	26 83       	std	Z+6, r18	; 0x06
    231e:	8f 81       	ldd	r24, Y+7	; 0x07
    2320:	82 30       	cpi	r24, 0x02	; 2
    2322:	31 f4       	brne	.+12     	; 0x2330 <prvCopyDataToQueue+0x17e>
    2324:	8a 81       	ldd	r24, Y+2	; 0x02
    2326:	88 23       	and	r24, r24
    2328:	19 f0       	breq	.+6      	; 0x2330 <prvCopyDataToQueue+0x17e>
    232a:	8a 81       	ldd	r24, Y+2	; 0x02
    232c:	81 50       	subi	r24, 0x01	; 1
    232e:	8a 83       	std	Y+2, r24	; 0x02
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	21 e0       	ldi	r18, 0x01	; 1
    2334:	28 0f       	add	r18, r24
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	fc 01       	movw	r30, r24
    233c:	22 8f       	std	Z+26, r18	; 0x1a
    233e:	89 81       	ldd	r24, Y+1	; 0x01
    2340:	27 96       	adiw	r28, 0x07	; 7
    2342:	0f b6       	in	r0, 0x3f	; 63
    2344:	f8 94       	cli
    2346:	de bf       	out	0x3e, r29	; 62
    2348:	0f be       	out	0x3f, r0	; 63
    234a:	cd bf       	out	0x3d, r28	; 61
    234c:	df 91       	pop	r29
    234e:	cf 91       	pop	r28
    2350:	08 95       	ret

00002352 <prvCopyDataFromQueue>:
    2352:	cf 93       	push	r28
    2354:	df 93       	push	r29
    2356:	00 d0       	rcall	.+0      	; 0x2358 <prvCopyDataFromQueue+0x6>
    2358:	00 d0       	rcall	.+0      	; 0x235a <prvCopyDataFromQueue+0x8>
    235a:	cd b7       	in	r28, 0x3d	; 61
    235c:	de b7       	in	r29, 0x3e	; 62
    235e:	9a 83       	std	Y+2, r25	; 0x02
    2360:	89 83       	std	Y+1, r24	; 0x01
    2362:	7c 83       	std	Y+4, r23	; 0x04
    2364:	6b 83       	std	Y+3, r22	; 0x03
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	fc 01       	movw	r30, r24
    236c:	84 8d       	ldd	r24, Z+28	; 0x1c
    236e:	88 23       	and	r24, r24
    2370:	c9 f1       	breq	.+114    	; 0x23e4 <prvCopyDataFromQueue+0x92>
    2372:	89 81       	ldd	r24, Y+1	; 0x01
    2374:	9a 81       	ldd	r25, Y+2	; 0x02
    2376:	fc 01       	movw	r30, r24
    2378:	26 81       	ldd	r18, Z+6	; 0x06
    237a:	37 81       	ldd	r19, Z+7	; 0x07
    237c:	89 81       	ldd	r24, Y+1	; 0x01
    237e:	9a 81       	ldd	r25, Y+2	; 0x02
    2380:	fc 01       	movw	r30, r24
    2382:	84 8d       	ldd	r24, Z+28	; 0x1c
    2384:	88 2f       	mov	r24, r24
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	28 0f       	add	r18, r24
    238a:	39 1f       	adc	r19, r25
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	37 83       	std	Z+7, r19	; 0x07
    2394:	26 83       	std	Z+6, r18	; 0x06
    2396:	89 81       	ldd	r24, Y+1	; 0x01
    2398:	9a 81       	ldd	r25, Y+2	; 0x02
    239a:	fc 01       	movw	r30, r24
    239c:	26 81       	ldd	r18, Z+6	; 0x06
    239e:	37 81       	ldd	r19, Z+7	; 0x07
    23a0:	89 81       	ldd	r24, Y+1	; 0x01
    23a2:	9a 81       	ldd	r25, Y+2	; 0x02
    23a4:	fc 01       	movw	r30, r24
    23a6:	82 81       	ldd	r24, Z+2	; 0x02
    23a8:	93 81       	ldd	r25, Z+3	; 0x03
    23aa:	28 17       	cp	r18, r24
    23ac:	39 07       	cpc	r19, r25
    23ae:	50 f0       	brcs	.+20     	; 0x23c4 <prvCopyDataFromQueue+0x72>
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	fc 01       	movw	r30, r24
    23b6:	20 81       	ld	r18, Z
    23b8:	31 81       	ldd	r19, Z+1	; 0x01
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	9a 81       	ldd	r25, Y+2	; 0x02
    23be:	fc 01       	movw	r30, r24
    23c0:	37 83       	std	Z+7, r19	; 0x07
    23c2:	26 83       	std	Z+6, r18	; 0x06
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	fc 01       	movw	r30, r24
    23ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    23cc:	48 2f       	mov	r20, r24
    23ce:	50 e0       	ldi	r21, 0x00	; 0
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	9a 81       	ldd	r25, Y+2	; 0x02
    23d4:	fc 01       	movw	r30, r24
    23d6:	26 81       	ldd	r18, Z+6	; 0x06
    23d8:	37 81       	ldd	r19, Z+7	; 0x07
    23da:	8b 81       	ldd	r24, Y+3	; 0x03
    23dc:	9c 81       	ldd	r25, Y+4	; 0x04
    23de:	b9 01       	movw	r22, r18
    23e0:	0e 94 38 1c 	call	0x3870	; 0x3870 <memcpy>
    23e4:	0f 90       	pop	r0
    23e6:	0f 90       	pop	r0
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	df 91       	pop	r29
    23ee:	cf 91       	pop	r28
    23f0:	08 95       	ret

000023f2 <prvUnlockQueue>:
    23f2:	cf 93       	push	r28
    23f4:	df 93       	push	r29
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <prvUnlockQueue+0x6>
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <prvUnlockQueue+0x8>
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	9c 83       	std	Y+4, r25	; 0x04
    2400:	8b 83       	std	Y+3, r24	; 0x03
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	0f 92       	push	r0
    2408:	8b 81       	ldd	r24, Y+3	; 0x03
    240a:	9c 81       	ldd	r25, Y+4	; 0x04
    240c:	fc 01       	movw	r30, r24
    240e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	14 c0       	rjmp	.+40     	; 0x243c <prvUnlockQueue+0x4a>
    2414:	8b 81       	ldd	r24, Y+3	; 0x03
    2416:	9c 81       	ldd	r25, Y+4	; 0x04
    2418:	fc 01       	movw	r30, r24
    241a:	81 89       	ldd	r24, Z+17	; 0x11
    241c:	88 23       	and	r24, r24
    241e:	51 f0       	breq	.+20     	; 0x2434 <prvUnlockQueue+0x42>
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	41 96       	adiw	r24, 0x11	; 17
    2426:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    242a:	88 23       	and	r24, r24
    242c:	21 f0       	breq	.+8      	; 0x2436 <prvUnlockQueue+0x44>
    242e:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <vTaskMissedYield>
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <prvUnlockQueue+0x44>
    2434:	06 c0       	rjmp	.+12     	; 0x2442 <prvUnlockQueue+0x50>
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	81 50       	subi	r24, 0x01	; 1
    243a:	89 83       	std	Y+1, r24	; 0x01
    243c:	89 81       	ldd	r24, Y+1	; 0x01
    243e:	18 16       	cp	r1, r24
    2440:	4c f3       	brlt	.-46     	; 0x2414 <prvUnlockQueue+0x22>
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	2f ef       	ldi	r18, 0xFF	; 255
    2448:	fc 01       	movw	r30, r24
    244a:	26 8f       	std	Z+30, r18	; 0x1e
    244c:	0f 90       	pop	r0
    244e:	0f be       	out	0x3f, r0	; 63
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	0f 92       	push	r0
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	fc 01       	movw	r30, r24
    245c:	85 8d       	ldd	r24, Z+29	; 0x1d
    245e:	8a 83       	std	Y+2, r24	; 0x02
    2460:	14 c0       	rjmp	.+40     	; 0x248a <prvUnlockQueue+0x98>
    2462:	8b 81       	ldd	r24, Y+3	; 0x03
    2464:	9c 81       	ldd	r25, Y+4	; 0x04
    2466:	fc 01       	movw	r30, r24
    2468:	80 85       	ldd	r24, Z+8	; 0x08
    246a:	88 23       	and	r24, r24
    246c:	69 f0       	breq	.+26     	; 0x2488 <prvUnlockQueue+0x96>
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	08 96       	adiw	r24, 0x08	; 8
    2474:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskRemoveFromEventList>
    2478:	88 23       	and	r24, r24
    247a:	11 f0       	breq	.+4      	; 0x2480 <prvUnlockQueue+0x8e>
    247c:	0e 94 ec 17 	call	0x2fd8	; 0x2fd8 <vTaskMissedYield>
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	81 50       	subi	r24, 0x01	; 1
    2484:	8a 83       	std	Y+2, r24	; 0x02
    2486:	01 c0       	rjmp	.+2      	; 0x248a <prvUnlockQueue+0x98>
    2488:	03 c0       	rjmp	.+6      	; 0x2490 <prvUnlockQueue+0x9e>
    248a:	8a 81       	ldd	r24, Y+2	; 0x02
    248c:	18 16       	cp	r1, r24
    248e:	4c f3       	brlt	.-46     	; 0x2462 <prvUnlockQueue+0x70>
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	9c 81       	ldd	r25, Y+4	; 0x04
    2494:	2f ef       	ldi	r18, 0xFF	; 255
    2496:	fc 01       	movw	r30, r24
    2498:	25 8f       	std	Z+29, r18	; 0x1d
    249a:	0f 90       	pop	r0
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	0f 90       	pop	r0
    24a0:	0f 90       	pop	r0
    24a2:	0f 90       	pop	r0
    24a4:	0f 90       	pop	r0
    24a6:	df 91       	pop	r29
    24a8:	cf 91       	pop	r28
    24aa:	08 95       	ret

000024ac <prvIsQueueEmpty>:
    24ac:	cf 93       	push	r28
    24ae:	df 93       	push	r29
    24b0:	00 d0       	rcall	.+0      	; 0x24b2 <prvIsQueueEmpty+0x6>
    24b2:	1f 92       	push	r1
    24b4:	cd b7       	in	r28, 0x3d	; 61
    24b6:	de b7       	in	r29, 0x3e	; 62
    24b8:	9b 83       	std	Y+3, r25	; 0x03
    24ba:	8a 83       	std	Y+2, r24	; 0x02
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	0f 92       	push	r0
    24c2:	8a 81       	ldd	r24, Y+2	; 0x02
    24c4:	9b 81       	ldd	r25, Y+3	; 0x03
    24c6:	fc 01       	movw	r30, r24
    24c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    24ca:	88 23       	and	r24, r24
    24cc:	19 f4       	brne	.+6      	; 0x24d4 <prvIsQueueEmpty+0x28>
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	89 83       	std	Y+1, r24	; 0x01
    24d2:	01 c0       	rjmp	.+2      	; 0x24d6 <prvIsQueueEmpty+0x2a>
    24d4:	19 82       	std	Y+1, r1	; 0x01
    24d6:	0f 90       	pop	r0
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	89 81       	ldd	r24, Y+1	; 0x01
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	df 91       	pop	r29
    24e4:	cf 91       	pop	r28
    24e6:	08 95       	ret

000024e8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    24e8:	cf 93       	push	r28
    24ea:	df 93       	push	r29
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <prvIsQueueFull+0x6>
    24ee:	1f 92       	push	r1
    24f0:	cd b7       	in	r28, 0x3d	; 61
    24f2:	de b7       	in	r29, 0x3e	; 62
    24f4:	9b 83       	std	Y+3, r25	; 0x03
    24f6:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    24f8:	0f b6       	in	r0, 0x3f	; 63
    24fa:	f8 94       	cli
    24fc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    24fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2500:	9b 81       	ldd	r25, Y+3	; 0x03
    2502:	fc 01       	movw	r30, r24
    2504:	22 8d       	ldd	r18, Z+26	; 0x1a
    2506:	8a 81       	ldd	r24, Y+2	; 0x02
    2508:	9b 81       	ldd	r25, Y+3	; 0x03
    250a:	fc 01       	movw	r30, r24
    250c:	83 8d       	ldd	r24, Z+27	; 0x1b
    250e:	28 17       	cp	r18, r24
    2510:	19 f4       	brne	.+6      	; 0x2518 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	89 83       	std	Y+1, r24	; 0x01
    2516:	01 c0       	rjmp	.+2      	; 0x251a <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2518:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    251a:	0f 90       	pop	r0
    251c:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    251e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    252c:	8f 92       	push	r8
    252e:	9f 92       	push	r9
    2530:	af 92       	push	r10
    2532:	bf 92       	push	r11
    2534:	cf 92       	push	r12
    2536:	df 92       	push	r13
    2538:	ef 92       	push	r14
    253a:	ff 92       	push	r15
    253c:	0f 93       	push	r16
    253e:	1f 93       	push	r17
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
    2548:	60 97       	sbiw	r28, 0x10	; 16
    254a:	0f b6       	in	r0, 0x3f	; 63
    254c:	f8 94       	cli
    254e:	de bf       	out	0x3e, r29	; 62
    2550:	0f be       	out	0x3f, r0	; 63
    2552:	cd bf       	out	0x3d, r28	; 61
    2554:	9f 83       	std	Y+7, r25	; 0x07
    2556:	8e 83       	std	Y+6, r24	; 0x06
    2558:	79 87       	std	Y+9, r23	; 0x09
    255a:	68 87       	std	Y+8, r22	; 0x08
    255c:	5b 87       	std	Y+11, r21	; 0x0b
    255e:	4a 87       	std	Y+10, r20	; 0x0a
    2560:	3d 87       	std	Y+13, r19	; 0x0d
    2562:	2c 87       	std	Y+12, r18	; 0x0c
    2564:	0e 87       	std	Y+14, r16	; 0x0e
    2566:	f8 8a       	std	Y+16, r15	; 0x10
    2568:	ef 86       	std	Y+15, r14	; 0x0f
    256a:	8a 85       	ldd	r24, Y+10	; 0x0a
    256c:	9b 85       	ldd	r25, Y+11	; 0x0b
    256e:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pvPortMalloc>
    2572:	9d 83       	std	Y+5, r25	; 0x05
    2574:	8c 83       	std	Y+4, r24	; 0x04
    2576:	8c 81       	ldd	r24, Y+4	; 0x04
    2578:	9d 81       	ldd	r25, Y+5	; 0x05
    257a:	89 2b       	or	r24, r25
    257c:	b9 f0       	breq	.+46     	; 0x25ac <xTaskCreate+0x80>
    257e:	8c e2       	ldi	r24, 0x2C	; 44
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	0e 94 e1 0a 	call	0x15c2	; 0x15c2 <pvPortMalloc>
    2586:	9a 83       	std	Y+2, r25	; 0x02
    2588:	89 83       	std	Y+1, r24	; 0x01
    258a:	89 81       	ldd	r24, Y+1	; 0x01
    258c:	9a 81       	ldd	r25, Y+2	; 0x02
    258e:	89 2b       	or	r24, r25
    2590:	41 f0       	breq	.+16     	; 0x25a2 <xTaskCreate+0x76>
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	2c 81       	ldd	r18, Y+4	; 0x04
    2598:	3d 81       	ldd	r19, Y+5	; 0x05
    259a:	fc 01       	movw	r30, r24
    259c:	30 8f       	std	Z+24, r19	; 0x18
    259e:	27 8b       	std	Z+23, r18	; 0x17
    25a0:	07 c0       	rjmp	.+14     	; 0x25b0 <xTaskCreate+0x84>
    25a2:	8c 81       	ldd	r24, Y+4	; 0x04
    25a4:	9d 81       	ldd	r25, Y+5	; 0x05
    25a6:	0e 94 36 0b 	call	0x166c	; 0x166c <vPortFree>
    25aa:	02 c0       	rjmp	.+4      	; 0x25b0 <xTaskCreate+0x84>
    25ac:	1a 82       	std	Y+2, r1	; 0x02
    25ae:	19 82       	std	Y+1, r1	; 0x01
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	9a 81       	ldd	r25, Y+2	; 0x02
    25b4:	89 2b       	or	r24, r25
    25b6:	09 f1       	breq	.+66     	; 0x25fa <xTaskCreate+0xce>
    25b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    25ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    25bc:	cc 01       	movw	r24, r24
    25be:	a0 e0       	ldi	r26, 0x00	; 0
    25c0:	b0 e0       	ldi	r27, 0x00	; 0
    25c2:	09 81       	ldd	r16, Y+1	; 0x01
    25c4:	1a 81       	ldd	r17, Y+2	; 0x02
    25c6:	4f 85       	ldd	r20, Y+15	; 0x0f
    25c8:	58 89       	ldd	r21, Y+16	; 0x10
    25ca:	2c 85       	ldd	r18, Y+12	; 0x0c
    25cc:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ce:	68 85       	ldd	r22, Y+8	; 0x08
    25d0:	79 85       	ldd	r23, Y+9	; 0x09
    25d2:	ee 81       	ldd	r30, Y+6	; 0x06
    25d4:	ff 81       	ldd	r31, Y+7	; 0x07
    25d6:	81 2c       	mov	r8, r1
    25d8:	91 2c       	mov	r9, r1
    25da:	58 01       	movw	r10, r16
    25dc:	6a 01       	movw	r12, r20
    25de:	ee 84       	ldd	r14, Y+14	; 0x0e
    25e0:	89 01       	movw	r16, r18
    25e2:	9c 01       	movw	r18, r24
    25e4:	ad 01       	movw	r20, r26
    25e6:	cf 01       	movw	r24, r30
    25e8:	0e 94 13 13 	call	0x2626	; 0x2626 <prvInitialiseNewTask>
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	9a 81       	ldd	r25, Y+2	; 0x02
    25f0:	0e 94 ed 13 	call	0x27da	; 0x27da <prvAddNewTaskToReadyList>
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	8b 83       	std	Y+3, r24	; 0x03
    25f8:	02 c0       	rjmp	.+4      	; 0x25fe <xTaskCreate+0xd2>
    25fa:	8f ef       	ldi	r24, 0xFF	; 255
    25fc:	8b 83       	std	Y+3, r24	; 0x03
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	60 96       	adiw	r28, 0x10	; 16
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	1f 91       	pop	r17
    2612:	0f 91       	pop	r16
    2614:	ff 90       	pop	r15
    2616:	ef 90       	pop	r14
    2618:	df 90       	pop	r13
    261a:	cf 90       	pop	r12
    261c:	bf 90       	pop	r11
    261e:	af 90       	pop	r10
    2620:	9f 90       	pop	r9
    2622:	8f 90       	pop	r8
    2624:	08 95       	ret

00002626 <prvInitialiseNewTask>:
    2626:	8f 92       	push	r8
    2628:	9f 92       	push	r9
    262a:	af 92       	push	r10
    262c:	bf 92       	push	r11
    262e:	cf 92       	push	r12
    2630:	df 92       	push	r13
    2632:	ef 92       	push	r14
    2634:	0f 93       	push	r16
    2636:	1f 93       	push	r17
    2638:	cf 93       	push	r28
    263a:	df 93       	push	r29
    263c:	cd b7       	in	r28, 0x3d	; 61
    263e:	de b7       	in	r29, 0x3e	; 62
    2640:	64 97       	sbiw	r28, 0x14	; 20
    2642:	0f b6       	in	r0, 0x3f	; 63
    2644:	f8 94       	cli
    2646:	de bf       	out	0x3e, r29	; 62
    2648:	0f be       	out	0x3f, r0	; 63
    264a:	cd bf       	out	0x3d, r28	; 61
    264c:	9d 83       	std	Y+5, r25	; 0x05
    264e:	8c 83       	std	Y+4, r24	; 0x04
    2650:	7f 83       	std	Y+7, r23	; 0x07
    2652:	6e 83       	std	Y+6, r22	; 0x06
    2654:	28 87       	std	Y+8, r18	; 0x08
    2656:	39 87       	std	Y+9, r19	; 0x09
    2658:	4a 87       	std	Y+10, r20	; 0x0a
    265a:	5b 87       	std	Y+11, r21	; 0x0b
    265c:	1d 87       	std	Y+13, r17	; 0x0d
    265e:	0c 87       	std	Y+12, r16	; 0x0c
    2660:	ee 86       	std	Y+14, r14	; 0x0e
    2662:	d8 8a       	std	Y+16, r13	; 0x10
    2664:	cf 86       	std	Y+15, r12	; 0x0f
    2666:	ba 8a       	std	Y+18, r11	; 0x12
    2668:	a9 8a       	std	Y+17, r10	; 0x11
    266a:	9c 8a       	std	Y+20, r9	; 0x14
    266c:	8b 8a       	std	Y+19, r8	; 0x13
    266e:	28 85       	ldd	r18, Y+8	; 0x08
    2670:	39 85       	ldd	r19, Y+9	; 0x09
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	fc 01       	movw	r30, r24
    2678:	87 89       	ldd	r24, Z+23	; 0x17
    267a:	90 8d       	ldd	r25, Z+24	; 0x18
    267c:	a9 01       	movw	r20, r18
    267e:	65 ea       	ldi	r22, 0xA5	; 165
    2680:	70 e0       	ldi	r23, 0x00	; 0
    2682:	0e 94 41 1c 	call	0x3882	; 0x3882 <memset>
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	fc 01       	movw	r30, r24
    268c:	27 89       	ldd	r18, Z+23	; 0x17
    268e:	30 8d       	ldd	r19, Z+24	; 0x18
    2690:	88 85       	ldd	r24, Y+8	; 0x08
    2692:	99 85       	ldd	r25, Y+9	; 0x09
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	82 0f       	add	r24, r18
    2698:	93 1f       	adc	r25, r19
    269a:	9b 83       	std	Y+3, r25	; 0x03
    269c:	8a 83       	std	Y+2, r24	; 0x02
    269e:	19 82       	std	Y+1, r1	; 0x01
    26a0:	22 c0       	rjmp	.+68     	; 0x26e6 <prvInitialiseNewTask+0xc0>
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	88 2f       	mov	r24, r24
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	29 81       	ldd	r18, Y+1	; 0x01
    26aa:	22 2f       	mov	r18, r18
    26ac:	30 e0       	ldi	r19, 0x00	; 0
    26ae:	4e 81       	ldd	r20, Y+6	; 0x06
    26b0:	5f 81       	ldd	r21, Y+7	; 0x07
    26b2:	24 0f       	add	r18, r20
    26b4:	35 1f       	adc	r19, r21
    26b6:	f9 01       	movw	r30, r18
    26b8:	40 81       	ld	r20, Z
    26ba:	29 89       	ldd	r18, Y+17	; 0x11
    26bc:	3a 89       	ldd	r19, Y+18	; 0x12
    26be:	82 0f       	add	r24, r18
    26c0:	93 1f       	adc	r25, r19
    26c2:	49 96       	adiw	r24, 0x19	; 25
    26c4:	fc 01       	movw	r30, r24
    26c6:	40 83       	st	Z, r20
    26c8:	89 81       	ldd	r24, Y+1	; 0x01
    26ca:	88 2f       	mov	r24, r24
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	2e 81       	ldd	r18, Y+6	; 0x06
    26d0:	3f 81       	ldd	r19, Y+7	; 0x07
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	fc 01       	movw	r30, r24
    26d8:	80 81       	ld	r24, Z
    26da:	88 23       	and	r24, r24
    26dc:	09 f4       	brne	.+2      	; 0x26e0 <prvInitialiseNewTask+0xba>
    26de:	06 c0       	rjmp	.+12     	; 0x26ec <prvInitialiseNewTask+0xc6>
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	89 83       	std	Y+1, r24	; 0x01
    26e6:	89 81       	ldd	r24, Y+1	; 0x01
    26e8:	88 30       	cpi	r24, 0x08	; 8
    26ea:	d8 f2       	brcs	.-74     	; 0x26a2 <prvInitialiseNewTask+0x7c>
    26ec:	89 89       	ldd	r24, Y+17	; 0x11
    26ee:	9a 89       	ldd	r25, Y+18	; 0x12
    26f0:	fc 01       	movw	r30, r24
    26f2:	10 a2       	std	Z+32, r1	; 0x20
    26f4:	8e 85       	ldd	r24, Y+14	; 0x0e
    26f6:	84 30       	cpi	r24, 0x04	; 4
    26f8:	10 f0       	brcs	.+4      	; 0x26fe <prvInitialiseNewTask+0xd8>
    26fa:	83 e0       	ldi	r24, 0x03	; 3
    26fc:	8e 87       	std	Y+14, r24	; 0x0e
    26fe:	89 89       	ldd	r24, Y+17	; 0x11
    2700:	9a 89       	ldd	r25, Y+18	; 0x12
    2702:	2e 85       	ldd	r18, Y+14	; 0x0e
    2704:	fc 01       	movw	r30, r24
    2706:	26 8b       	std	Z+22, r18	; 0x16
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	9a 89       	ldd	r25, Y+18	; 0x12
    270c:	2e 85       	ldd	r18, Y+14	; 0x0e
    270e:	fc 01       	movw	r30, r24
    2710:	23 a3       	std	Z+35, r18	; 0x23
    2712:	89 89       	ldd	r24, Y+17	; 0x11
    2714:	9a 89       	ldd	r25, Y+18	; 0x12
    2716:	fc 01       	movw	r30, r24
    2718:	14 a2       	std	Z+36, r1	; 0x24
    271a:	89 89       	ldd	r24, Y+17	; 0x11
    271c:	9a 89       	ldd	r25, Y+18	; 0x12
    271e:	02 96       	adiw	r24, 0x02	; 2
    2720:	0e 94 bc 06 	call	0xd78	; 0xd78 <vListInitialiseItem>
    2724:	89 89       	ldd	r24, Y+17	; 0x11
    2726:	9a 89       	ldd	r25, Y+18	; 0x12
    2728:	0c 96       	adiw	r24, 0x0c	; 12
    272a:	0e 94 bc 06 	call	0xd78	; 0xd78 <vListInitialiseItem>
    272e:	89 89       	ldd	r24, Y+17	; 0x11
    2730:	9a 89       	ldd	r25, Y+18	; 0x12
    2732:	29 89       	ldd	r18, Y+17	; 0x11
    2734:	3a 89       	ldd	r19, Y+18	; 0x12
    2736:	fc 01       	movw	r30, r24
    2738:	31 87       	std	Z+9, r19	; 0x09
    273a:	20 87       	std	Z+8, r18	; 0x08
    273c:	8e 85       	ldd	r24, Y+14	; 0x0e
    273e:	88 2f       	mov	r24, r24
    2740:	90 e0       	ldi	r25, 0x00	; 0
    2742:	24 e0       	ldi	r18, 0x04	; 4
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	28 1b       	sub	r18, r24
    2748:	39 0b       	sbc	r19, r25
    274a:	89 89       	ldd	r24, Y+17	; 0x11
    274c:	9a 89       	ldd	r25, Y+18	; 0x12
    274e:	fc 01       	movw	r30, r24
    2750:	35 87       	std	Z+13, r19	; 0x0d
    2752:	24 87       	std	Z+12, r18	; 0x0c
    2754:	89 89       	ldd	r24, Y+17	; 0x11
    2756:	9a 89       	ldd	r25, Y+18	; 0x12
    2758:	29 89       	ldd	r18, Y+17	; 0x11
    275a:	3a 89       	ldd	r19, Y+18	; 0x12
    275c:	fc 01       	movw	r30, r24
    275e:	33 8b       	std	Z+19, r19	; 0x13
    2760:	22 8b       	std	Z+18, r18	; 0x12
    2762:	89 89       	ldd	r24, Y+17	; 0x11
    2764:	9a 89       	ldd	r25, Y+18	; 0x12
    2766:	fc 01       	movw	r30, r24
    2768:	16 a2       	std	Z+38, r1	; 0x26
    276a:	15 a2       	std	Z+37, r1	; 0x25
    276c:	89 89       	ldd	r24, Y+17	; 0x11
    276e:	9a 89       	ldd	r25, Y+18	; 0x12
    2770:	fc 01       	movw	r30, r24
    2772:	17 a2       	std	Z+39, r1	; 0x27
    2774:	10 a6       	std	Z+40, r1	; 0x28
    2776:	11 a6       	std	Z+41, r1	; 0x29
    2778:	12 a6       	std	Z+42, r1	; 0x2a
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	fc 01       	movw	r30, r24
    2780:	13 a6       	std	Z+43, r1	; 0x2b
    2782:	4c 85       	ldd	r20, Y+12	; 0x0c
    2784:	5d 85       	ldd	r21, Y+13	; 0x0d
    2786:	2c 81       	ldd	r18, Y+4	; 0x04
    2788:	3d 81       	ldd	r19, Y+5	; 0x05
    278a:	8a 81       	ldd	r24, Y+2	; 0x02
    278c:	9b 81       	ldd	r25, Y+3	; 0x03
    278e:	b9 01       	movw	r22, r18
    2790:	0e 94 e9 07 	call	0xfd2	; 0xfd2 <pxPortInitialiseStack>
    2794:	9c 01       	movw	r18, r24
    2796:	89 89       	ldd	r24, Y+17	; 0x11
    2798:	9a 89       	ldd	r25, Y+18	; 0x12
    279a:	fc 01       	movw	r30, r24
    279c:	31 83       	std	Z+1, r19	; 0x01
    279e:	20 83       	st	Z, r18
    27a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    27a2:	98 89       	ldd	r25, Y+16	; 0x10
    27a4:	89 2b       	or	r24, r25
    27a6:	39 f0       	breq	.+14     	; 0x27b6 <prvInitialiseNewTask+0x190>
    27a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    27aa:	98 89       	ldd	r25, Y+16	; 0x10
    27ac:	29 89       	ldd	r18, Y+17	; 0x11
    27ae:	3a 89       	ldd	r19, Y+18	; 0x12
    27b0:	fc 01       	movw	r30, r24
    27b2:	31 83       	std	Z+1, r19	; 0x01
    27b4:	20 83       	st	Z, r18
    27b6:	64 96       	adiw	r28, 0x14	; 20
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	de bf       	out	0x3e, r29	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	cd bf       	out	0x3d, r28	; 61
    27c2:	df 91       	pop	r29
    27c4:	cf 91       	pop	r28
    27c6:	1f 91       	pop	r17
    27c8:	0f 91       	pop	r16
    27ca:	ef 90       	pop	r14
    27cc:	df 90       	pop	r13
    27ce:	cf 90       	pop	r12
    27d0:	bf 90       	pop	r11
    27d2:	af 90       	pop	r10
    27d4:	9f 90       	pop	r9
    27d6:	8f 90       	pop	r8
    27d8:	08 95       	ret

000027da <prvAddNewTaskToReadyList>:
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <prvAddNewTaskToReadyList+0x6>
    27e0:	cd b7       	in	r28, 0x3d	; 61
    27e2:	de b7       	in	r29, 0x3e	; 62
    27e4:	9a 83       	std	Y+2, r25	; 0x02
    27e6:	89 83       	std	Y+1, r24	; 0x01
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	0f 92       	push	r0
    27ee:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    27f2:	8f 5f       	subi	r24, 0xFF	; 255
    27f4:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    27f8:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    27fc:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2800:	89 2b       	or	r24, r25
    2802:	69 f4       	brne	.+26     	; 0x281e <prvAddNewTaskToReadyList+0x44>
    2804:	89 81       	ldd	r24, Y+1	; 0x01
    2806:	9a 81       	ldd	r25, Y+2	; 0x02
    2808:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    280c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2810:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	c9 f4       	brne	.+50     	; 0x284a <prvAddNewTaskToReadyList+0x70>
    2818:	0e 94 08 18 	call	0x3010	; 0x3010 <prvInitialiseTaskLists>
    281c:	16 c0       	rjmp	.+44     	; 0x284a <prvAddNewTaskToReadyList+0x70>
    281e:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    2822:	88 23       	and	r24, r24
    2824:	91 f4       	brne	.+36     	; 0x284a <prvAddNewTaskToReadyList+0x70>
    2826:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    282a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    282e:	fc 01       	movw	r30, r24
    2830:	26 89       	ldd	r18, Z+22	; 0x16
    2832:	89 81       	ldd	r24, Y+1	; 0x01
    2834:	9a 81       	ldd	r25, Y+2	; 0x02
    2836:	fc 01       	movw	r30, r24
    2838:	86 89       	ldd	r24, Z+22	; 0x16
    283a:	82 17       	cp	r24, r18
    283c:	30 f0       	brcs	.+12     	; 0x284a <prvAddNewTaskToReadyList+0x70>
    283e:	89 81       	ldd	r24, Y+1	; 0x01
    2840:	9a 81       	ldd	r25, Y+2	; 0x02
    2842:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2846:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    284a:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxTaskNumber>
    284e:	8f 5f       	subi	r24, 0xFF	; 255
    2850:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxTaskNumber>
    2854:	20 91 c7 05 	lds	r18, 0x05C7	; 0x8005c7 <uxTaskNumber>
    2858:	89 81       	ldd	r24, Y+1	; 0x01
    285a:	9a 81       	ldd	r25, Y+2	; 0x02
    285c:	fc 01       	movw	r30, r24
    285e:	21 a3       	std	Z+33, r18	; 0x21
    2860:	89 81       	ldd	r24, Y+1	; 0x01
    2862:	9a 81       	ldd	r25, Y+2	; 0x02
    2864:	fc 01       	movw	r30, r24
    2866:	96 89       	ldd	r25, Z+22	; 0x16
    2868:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    286c:	89 17       	cp	r24, r25
    286e:	30 f4       	brcc	.+12     	; 0x287c <prvAddNewTaskToReadyList+0xa2>
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	9a 81       	ldd	r25, Y+2	; 0x02
    2874:	fc 01       	movw	r30, r24
    2876:	86 89       	ldd	r24, Z+22	; 0x16
    2878:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	9a 81       	ldd	r25, Y+2	; 0x02
    2880:	ac 01       	movw	r20, r24
    2882:	4e 5f       	subi	r20, 0xFE	; 254
    2884:	5f 4f       	sbci	r21, 0xFF	; 255
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	9a 81       	ldd	r25, Y+2	; 0x02
    288a:	fc 01       	movw	r30, r24
    288c:	86 89       	ldd	r24, Z+22	; 0x16
    288e:	28 2f       	mov	r18, r24
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	c9 01       	movw	r24, r18
    2894:	88 0f       	add	r24, r24
    2896:	99 1f       	adc	r25, r25
    2898:	88 0f       	add	r24, r24
    289a:	99 1f       	adc	r25, r25
    289c:	88 0f       	add	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	82 0f       	add	r24, r18
    28a2:	93 1f       	adc	r25, r19
    28a4:	8e 58       	subi	r24, 0x8E	; 142
    28a6:	9a 4f       	sbci	r25, 0xFA	; 250
    28a8:	ba 01       	movw	r22, r20
    28aa:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    28ae:	0f 90       	pop	r0
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    28b6:	88 23       	and	r24, r24
    28b8:	71 f0       	breq	.+28     	; 0x28d6 <prvAddNewTaskToReadyList+0xfc>
    28ba:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    28be:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    28c2:	fc 01       	movw	r30, r24
    28c4:	26 89       	ldd	r18, Z+22	; 0x16
    28c6:	89 81       	ldd	r24, Y+1	; 0x01
    28c8:	9a 81       	ldd	r25, Y+2	; 0x02
    28ca:	fc 01       	movw	r30, r24
    28cc:	86 89       	ldd	r24, Z+22	; 0x16
    28ce:	28 17       	cp	r18, r24
    28d0:	10 f4       	brcc	.+4      	; 0x28d6 <prvAddNewTaskToReadyList+0xfc>
    28d2:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	df 91       	pop	r29
    28dc:	cf 91       	pop	r28
    28de:	08 95       	ret

000028e0 <vTaskDelay>:
    28e0:	cf 93       	push	r28
    28e2:	df 93       	push	r29
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <vTaskDelay+0x6>
    28e6:	1f 92       	push	r1
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    28f0:	19 82       	std	Y+1, r1	; 0x01
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	9b 81       	ldd	r25, Y+3	; 0x03
    28f6:	89 2b       	or	r24, r25
    28f8:	51 f0       	breq	.+20     	; 0x290e <vTaskDelay+0x2e>
    28fa:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSuspendAll>
    28fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2900:	9b 81       	ldd	r25, Y+3	; 0x03
    2902:	60 e0       	ldi	r22, 0x00	; 0
    2904:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <prvAddCurrentTaskToDelayedList>
    2908:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    290c:	89 83       	std	Y+1, r24	; 0x01
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	88 23       	and	r24, r24
    2912:	11 f4       	brne	.+4      	; 0x2918 <vTaskDelay+0x38>
    2914:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    2918:	0f 90       	pop	r0
    291a:	0f 90       	pop	r0
    291c:	0f 90       	pop	r0
    291e:	df 91       	pop	r29
    2920:	cf 91       	pop	r28
    2922:	08 95       	ret

00002924 <vTaskStartScheduler>:
    2924:	ef 92       	push	r14
    2926:	ff 92       	push	r15
    2928:	0f 93       	push	r16
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	1f 92       	push	r1
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
    2934:	0f 2e       	mov	r0, r31
    2936:	fa ec       	ldi	r31, 0xCA	; 202
    2938:	ef 2e       	mov	r14, r31
    293a:	f5 e0       	ldi	r31, 0x05	; 5
    293c:	ff 2e       	mov	r15, r31
    293e:	f0 2d       	mov	r31, r0
    2940:	00 e0       	ldi	r16, 0x00	; 0
    2942:	20 e0       	ldi	r18, 0x00	; 0
    2944:	30 e0       	ldi	r19, 0x00	; 0
    2946:	45 e5       	ldi	r20, 0x55	; 85
    2948:	50 e0       	ldi	r21, 0x00	; 0
    294a:	66 e4       	ldi	r22, 0x46	; 70
    294c:	71 e0       	ldi	r23, 0x01	; 1
    294e:	86 ef       	ldi	r24, 0xF6	; 246
    2950:	97 e1       	ldi	r25, 0x17	; 23
    2952:	0e 94 96 12 	call	0x252c	; 0x252c <xTaskCreate>
    2956:	89 83       	std	Y+1, r24	; 0x01
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	81 30       	cpi	r24, 0x01	; 1
    295c:	81 f4       	brne	.+32     	; 0x297e <vTaskStartScheduler+0x5a>
    295e:	f8 94       	cli
    2960:	8f ef       	ldi	r24, 0xFF	; 255
    2962:	9f ef       	ldi	r25, 0xFF	; 255
    2964:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2968:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <xSchedulerRunning>
    2972:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <xTickCount+0x1>
    2976:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <xTickCount>
    297a:	0e 94 92 09 	call	0x1324	; 0x1324 <xPortStartScheduler>
    297e:	0f 90       	pop	r0
    2980:	df 91       	pop	r29
    2982:	cf 91       	pop	r28
    2984:	0f 91       	pop	r16
    2986:	ff 90       	pop	r15
    2988:	ef 90       	pop	r14
    298a:	08 95       	ret

0000298c <vTaskSuspendAll>:
    298c:	cf 93       	push	r28
    298e:	df 93       	push	r29
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
    2994:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	08 95       	ret

000029a4 <xTaskResumeAll>:
    29a4:	cf 93       	push	r28
    29a6:	df 93       	push	r29
    29a8:	00 d0       	rcall	.+0      	; 0x29aa <xTaskResumeAll+0x6>
    29aa:	00 d0       	rcall	.+0      	; 0x29ac <xTaskResumeAll+0x8>
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	1a 82       	std	Y+2, r1	; 0x02
    29b2:	19 82       	std	Y+1, r1	; 0x01
    29b4:	1b 82       	std	Y+3, r1	; 0x03
    29b6:	0f b6       	in	r0, 0x3f	; 63
    29b8:	f8 94       	cli
    29ba:	0f 92       	push	r0
    29bc:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    29c0:	81 50       	subi	r24, 0x01	; 1
    29c2:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    29c6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    29ca:	88 23       	and	r24, r24
    29cc:	09 f0       	breq	.+2      	; 0x29d0 <xTaskResumeAll+0x2c>
    29ce:	77 c0       	rjmp	.+238    	; 0x2abe <xTaskResumeAll+0x11a>
    29d0:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    29d4:	88 23       	and	r24, r24
    29d6:	09 f4       	brne	.+2      	; 0x29da <xTaskResumeAll+0x36>
    29d8:	72 c0       	rjmp	.+228    	; 0x2abe <xTaskResumeAll+0x11a>
    29da:	49 c0       	rjmp	.+146    	; 0x2a6e <xTaskResumeAll+0xca>
    29dc:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <xPendingReadyList+0x5>
    29e0:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <xPendingReadyList+0x6>
    29e4:	fc 01       	movw	r30, r24
    29e6:	86 81       	ldd	r24, Z+6	; 0x06
    29e8:	97 81       	ldd	r25, Z+7	; 0x07
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	0c 96       	adiw	r24, 0x0c	; 12
    29f4:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	9a 81       	ldd	r25, Y+2	; 0x02
    29fc:	02 96       	adiw	r24, 0x02	; 2
    29fe:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	fc 01       	movw	r30, r24
    2a08:	96 89       	ldd	r25, Z+22	; 0x16
    2a0a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2a0e:	89 17       	cp	r24, r25
    2a10:	30 f4       	brcc	.+12     	; 0x2a1e <xTaskResumeAll+0x7a>
    2a12:	89 81       	ldd	r24, Y+1	; 0x01
    2a14:	9a 81       	ldd	r25, Y+2	; 0x02
    2a16:	fc 01       	movw	r30, r24
    2a18:	86 89       	ldd	r24, Z+22	; 0x16
    2a1a:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2a1e:	89 81       	ldd	r24, Y+1	; 0x01
    2a20:	9a 81       	ldd	r25, Y+2	; 0x02
    2a22:	ac 01       	movw	r20, r24
    2a24:	4e 5f       	subi	r20, 0xFE	; 254
    2a26:	5f 4f       	sbci	r21, 0xFF	; 255
    2a28:	89 81       	ldd	r24, Y+1	; 0x01
    2a2a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2c:	fc 01       	movw	r30, r24
    2a2e:	86 89       	ldd	r24, Z+22	; 0x16
    2a30:	28 2f       	mov	r18, r24
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	c9 01       	movw	r24, r18
    2a36:	88 0f       	add	r24, r24
    2a38:	99 1f       	adc	r25, r25
    2a3a:	88 0f       	add	r24, r24
    2a3c:	99 1f       	adc	r25, r25
    2a3e:	88 0f       	add	r24, r24
    2a40:	99 1f       	adc	r25, r25
    2a42:	82 0f       	add	r24, r18
    2a44:	93 1f       	adc	r25, r19
    2a46:	8e 58       	subi	r24, 0x8E	; 142
    2a48:	9a 4f       	sbci	r25, 0xFA	; 250
    2a4a:	ba 01       	movw	r22, r20
    2a4c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	fc 01       	movw	r30, r24
    2a56:	26 89       	ldd	r18, Z+22	; 0x16
    2a58:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2a5c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2a60:	fc 01       	movw	r30, r24
    2a62:	86 89       	ldd	r24, Z+22	; 0x16
    2a64:	28 17       	cp	r18, r24
    2a66:	18 f0       	brcs	.+6      	; 0x2a6e <xTaskResumeAll+0xca>
    2a68:	81 e0       	ldi	r24, 0x01	; 1
    2a6a:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2a6e:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <xPendingReadyList>
    2a72:	88 23       	and	r24, r24
    2a74:	09 f0       	breq	.+2      	; 0x2a78 <xTaskResumeAll+0xd4>
    2a76:	b2 cf       	rjmp	.-156    	; 0x29dc <xTaskResumeAll+0x38>
    2a78:	89 81       	ldd	r24, Y+1	; 0x01
    2a7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7c:	89 2b       	or	r24, r25
    2a7e:	11 f0       	breq	.+4      	; 0x2a84 <xTaskResumeAll+0xe0>
    2a80:	0e 94 9c 18 	call	0x3138	; 0x3138 <prvResetNextTaskUnblockTime>
    2a84:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2a88:	8c 83       	std	Y+4, r24	; 0x04
    2a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8c:	88 23       	and	r24, r24
    2a8e:	79 f0       	breq	.+30     	; 0x2aae <xTaskResumeAll+0x10a>
    2a90:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <xTaskIncrementTick>
    2a94:	88 23       	and	r24, r24
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <xTaskResumeAll+0xfa>
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2a9e:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa0:	81 50       	subi	r24, 0x01	; 1
    2aa2:	8c 83       	std	Y+4, r24	; 0x04
    2aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    2aa6:	88 23       	and	r24, r24
    2aa8:	99 f7       	brne	.-26     	; 0x2a90 <xTaskResumeAll+0xec>
    2aaa:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <uxPendedTicks>
    2aae:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2ab2:	88 23       	and	r24, r24
    2ab4:	21 f0       	breq	.+8      	; 0x2abe <xTaskResumeAll+0x11a>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	8b 83       	std	Y+3, r24	; 0x03
    2aba:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    2abe:	0f 90       	pop	r0
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac4:	0f 90       	pop	r0
    2ac6:	0f 90       	pop	r0
    2ac8:	0f 90       	pop	r0
    2aca:	0f 90       	pop	r0
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	08 95       	ret

00002ad2 <xTaskIncrementTick>:
    2ad2:	cf 93       	push	r28
    2ad4:	df 93       	push	r29
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
    2ada:	29 97       	sbiw	r28, 0x09	; 9
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	19 82       	std	Y+1, r1	; 0x01
    2ae8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2aec:	88 23       	and	r24, r24
    2aee:	09 f0       	breq	.+2      	; 0x2af2 <xTaskIncrementTick+0x20>
    2af0:	c7 c0       	rjmp	.+398    	; 0x2c80 <xTaskIncrementTick+0x1ae>
    2af2:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2af6:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2afa:	01 96       	adiw	r24, 0x01	; 1
    2afc:	9b 83       	std	Y+3, r25	; 0x03
    2afe:	8a 83       	std	Y+2, r24	; 0x02
    2b00:	8a 81       	ldd	r24, Y+2	; 0x02
    2b02:	9b 81       	ldd	r25, Y+3	; 0x03
    2b04:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <xTickCount+0x1>
    2b08:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <xTickCount>
    2b0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b10:	89 2b       	or	r24, r25
    2b12:	d9 f4       	brne	.+54     	; 0x2b4a <xTaskIncrementTick+0x78>
    2b14:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b18:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b1c:	9d 83       	std	Y+5, r25	; 0x05
    2b1e:	8c 83       	std	Y+4, r24	; 0x04
    2b20:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    2b24:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2b28:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b2c:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2b30:	8c 81       	ldd	r24, Y+4	; 0x04
    2b32:	9d 81       	ldd	r25, Y+5	; 0x05
    2b34:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2b38:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    2b3c:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2b40:	8f 5f       	subi	r24, 0xFF	; 255
    2b42:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <xNumOfOverflows>
    2b46:	0e 94 9c 18 	call	0x3138	; 0x3138 <prvResetNextTaskUnblockTime>
    2b4a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    2b4e:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2b52:	2a 81       	ldd	r18, Y+2	; 0x02
    2b54:	3b 81       	ldd	r19, Y+3	; 0x03
    2b56:	28 17       	cp	r18, r24
    2b58:	39 07       	cpc	r19, r25
    2b5a:	08 f4       	brcc	.+2      	; 0x2b5e <xTaskIncrementTick+0x8c>
    2b5c:	77 c0       	rjmp	.+238    	; 0x2c4c <xTaskIncrementTick+0x17a>
    2b5e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b62:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b66:	fc 01       	movw	r30, r24
    2b68:	80 81       	ld	r24, Z
    2b6a:	88 23       	and	r24, r24
    2b6c:	39 f4       	brne	.+14     	; 0x2b7c <xTaskIncrementTick+0xaa>
    2b6e:	8f ef       	ldi	r24, 0xFF	; 255
    2b70:	9f ef       	ldi	r25, 0xFF	; 255
    2b72:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2b76:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2b7a:	68 c0       	rjmp	.+208    	; 0x2c4c <xTaskIncrementTick+0x17a>
    2b7c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b80:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b84:	fc 01       	movw	r30, r24
    2b86:	85 81       	ldd	r24, Z+5	; 0x05
    2b88:	96 81       	ldd	r25, Z+6	; 0x06
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	86 81       	ldd	r24, Z+6	; 0x06
    2b8e:	97 81       	ldd	r25, Z+7	; 0x07
    2b90:	9f 83       	std	Y+7, r25	; 0x07
    2b92:	8e 83       	std	Y+6, r24	; 0x06
    2b94:	8e 81       	ldd	r24, Y+6	; 0x06
    2b96:	9f 81       	ldd	r25, Y+7	; 0x07
    2b98:	fc 01       	movw	r30, r24
    2b9a:	82 81       	ldd	r24, Z+2	; 0x02
    2b9c:	93 81       	ldd	r25, Z+3	; 0x03
    2b9e:	99 87       	std	Y+9, r25	; 0x09
    2ba0:	88 87       	std	Y+8, r24	; 0x08
    2ba2:	2a 81       	ldd	r18, Y+2	; 0x02
    2ba4:	3b 81       	ldd	r19, Y+3	; 0x03
    2ba6:	88 85       	ldd	r24, Y+8	; 0x08
    2ba8:	99 85       	ldd	r25, Y+9	; 0x09
    2baa:	28 17       	cp	r18, r24
    2bac:	39 07       	cpc	r19, r25
    2bae:	38 f4       	brcc	.+14     	; 0x2bbe <xTaskIncrementTick+0xec>
    2bb0:	88 85       	ldd	r24, Y+8	; 0x08
    2bb2:	99 85       	ldd	r25, Y+9	; 0x09
    2bb4:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2bb8:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2bbc:	47 c0       	rjmp	.+142    	; 0x2c4c <xTaskIncrementTick+0x17a>
    2bbe:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc0:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc2:	02 96       	adiw	r24, 0x02	; 2
    2bc4:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    2bc8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bca:	9f 81       	ldd	r25, Y+7	; 0x07
    2bcc:	fc 01       	movw	r30, r24
    2bce:	84 89       	ldd	r24, Z+20	; 0x14
    2bd0:	95 89       	ldd	r25, Z+21	; 0x15
    2bd2:	89 2b       	or	r24, r25
    2bd4:	29 f0       	breq	.+10     	; 0x2be0 <xTaskIncrementTick+0x10e>
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bda:	0c 96       	adiw	r24, 0x0c	; 12
    2bdc:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    2be0:	8e 81       	ldd	r24, Y+6	; 0x06
    2be2:	9f 81       	ldd	r25, Y+7	; 0x07
    2be4:	fc 01       	movw	r30, r24
    2be6:	96 89       	ldd	r25, Z+22	; 0x16
    2be8:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2bec:	89 17       	cp	r24, r25
    2bee:	30 f4       	brcc	.+12     	; 0x2bfc <xTaskIncrementTick+0x12a>
    2bf0:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf2:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	86 89       	ldd	r24, Z+22	; 0x16
    2bf8:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2bfc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bfe:	9f 81       	ldd	r25, Y+7	; 0x07
    2c00:	ac 01       	movw	r20, r24
    2c02:	4e 5f       	subi	r20, 0xFE	; 254
    2c04:	5f 4f       	sbci	r21, 0xFF	; 255
    2c06:	8e 81       	ldd	r24, Y+6	; 0x06
    2c08:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	86 89       	ldd	r24, Z+22	; 0x16
    2c0e:	28 2f       	mov	r18, r24
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	c9 01       	movw	r24, r18
    2c14:	88 0f       	add	r24, r24
    2c16:	99 1f       	adc	r25, r25
    2c18:	88 0f       	add	r24, r24
    2c1a:	99 1f       	adc	r25, r25
    2c1c:	88 0f       	add	r24, r24
    2c1e:	99 1f       	adc	r25, r25
    2c20:	82 0f       	add	r24, r18
    2c22:	93 1f       	adc	r25, r19
    2c24:	8e 58       	subi	r24, 0x8E	; 142
    2c26:	9a 4f       	sbci	r25, 0xFA	; 250
    2c28:	ba 01       	movw	r22, r20
    2c2a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    2c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2c30:	9f 81       	ldd	r25, Y+7	; 0x07
    2c32:	fc 01       	movw	r30, r24
    2c34:	26 89       	ldd	r18, Z+22	; 0x16
    2c36:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2c3a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2c3e:	fc 01       	movw	r30, r24
    2c40:	86 89       	ldd	r24, Z+22	; 0x16
    2c42:	28 17       	cp	r18, r24
    2c44:	10 f0       	brcs	.+4      	; 0x2c4a <xTaskIncrementTick+0x178>
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	89 83       	std	Y+1, r24	; 0x01
    2c4a:	89 cf       	rjmp	.-238    	; 0x2b5e <xTaskIncrementTick+0x8c>
    2c4c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2c50:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2c54:	fc 01       	movw	r30, r24
    2c56:	86 89       	ldd	r24, Z+22	; 0x16
    2c58:	28 2f       	mov	r18, r24
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	c9 01       	movw	r24, r18
    2c5e:	88 0f       	add	r24, r24
    2c60:	99 1f       	adc	r25, r25
    2c62:	88 0f       	add	r24, r24
    2c64:	99 1f       	adc	r25, r25
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	82 0f       	add	r24, r18
    2c6c:	93 1f       	adc	r25, r19
    2c6e:	8e 58       	subi	r24, 0x8E	; 142
    2c70:	9a 4f       	sbci	r25, 0xFA	; 250
    2c72:	fc 01       	movw	r30, r24
    2c74:	80 81       	ld	r24, Z
    2c76:	82 30       	cpi	r24, 0x02	; 2
    2c78:	10 f0       	brcs	.+4      	; 0x2c7e <xTaskIncrementTick+0x1ac>
    2c7a:	81 e0       	ldi	r24, 0x01	; 1
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	05 c0       	rjmp	.+10     	; 0x2c8a <xTaskIncrementTick+0x1b8>
    2c80:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2c84:	8f 5f       	subi	r24, 0xFF	; 255
    2c86:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxPendedTicks>
    2c8a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2c8e:	88 23       	and	r24, r24
    2c90:	11 f0       	breq	.+4      	; 0x2c96 <xTaskIncrementTick+0x1c4>
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	89 83       	std	Y+1, r24	; 0x01
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	29 96       	adiw	r28, 0x09	; 9
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	de bf       	out	0x3e, r29	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	cd bf       	out	0x3d, r28	; 61
    2ca4:	df 91       	pop	r29
    2ca6:	cf 91       	pop	r28
    2ca8:	08 95       	ret

00002caa <vTaskSwitchContext>:
    2caa:	cf 93       	push	r28
    2cac:	df 93       	push	r29
    2cae:	00 d0       	rcall	.+0      	; 0x2cb0 <vTaskSwitchContext+0x6>
    2cb0:	1f 92       	push	r1
    2cb2:	cd b7       	in	r28, 0x3d	; 61
    2cb4:	de b7       	in	r29, 0x3e	; 62
    2cb6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2cba:	88 23       	and	r24, r24
    2cbc:	21 f0       	breq	.+8      	; 0x2cc6 <vTaskSwitchContext+0x1c>
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2cc4:	71 c0       	rjmp	.+226    	; 0x2da8 <vTaskSwitchContext+0xfe>
    2cc6:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <xYieldPending>
    2cca:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2cce:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	85 a1       	ldd	r24, Z+37	; 0x25
    2cd6:	96 a1       	ldd	r25, Z+38	; 0x26
    2cd8:	0e 94 da 05 	call	0xbb4	; 0xbb4 <switch_out>
    2cdc:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2ce0:	89 83       	std	Y+1, r24	; 0x01
    2ce2:	03 c0       	rjmp	.+6      	; 0x2cea <vTaskSwitchContext+0x40>
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	81 50       	subi	r24, 0x01	; 1
    2ce8:	89 83       	std	Y+1, r24	; 0x01
    2cea:	89 81       	ldd	r24, Y+1	; 0x01
    2cec:	28 2f       	mov	r18, r24
    2cee:	30 e0       	ldi	r19, 0x00	; 0
    2cf0:	c9 01       	movw	r24, r18
    2cf2:	88 0f       	add	r24, r24
    2cf4:	99 1f       	adc	r25, r25
    2cf6:	88 0f       	add	r24, r24
    2cf8:	99 1f       	adc	r25, r25
    2cfa:	88 0f       	add	r24, r24
    2cfc:	99 1f       	adc	r25, r25
    2cfe:	82 0f       	add	r24, r18
    2d00:	93 1f       	adc	r25, r19
    2d02:	8e 58       	subi	r24, 0x8E	; 142
    2d04:	9a 4f       	sbci	r25, 0xFA	; 250
    2d06:	fc 01       	movw	r30, r24
    2d08:	80 81       	ld	r24, Z
    2d0a:	88 23       	and	r24, r24
    2d0c:	59 f3       	breq	.-42     	; 0x2ce4 <vTaskSwitchContext+0x3a>
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	28 2f       	mov	r18, r24
    2d12:	30 e0       	ldi	r19, 0x00	; 0
    2d14:	c9 01       	movw	r24, r18
    2d16:	88 0f       	add	r24, r24
    2d18:	99 1f       	adc	r25, r25
    2d1a:	88 0f       	add	r24, r24
    2d1c:	99 1f       	adc	r25, r25
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	82 0f       	add	r24, r18
    2d24:	93 1f       	adc	r25, r19
    2d26:	8e 58       	subi	r24, 0x8E	; 142
    2d28:	9a 4f       	sbci	r25, 0xFA	; 250
    2d2a:	9b 83       	std	Y+3, r25	; 0x03
    2d2c:	8a 83       	std	Y+2, r24	; 0x02
    2d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d30:	9b 81       	ldd	r25, Y+3	; 0x03
    2d32:	fc 01       	movw	r30, r24
    2d34:	81 81       	ldd	r24, Z+1	; 0x01
    2d36:	92 81       	ldd	r25, Z+2	; 0x02
    2d38:	fc 01       	movw	r30, r24
    2d3a:	22 81       	ldd	r18, Z+2	; 0x02
    2d3c:	33 81       	ldd	r19, Z+3	; 0x03
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	fc 01       	movw	r30, r24
    2d44:	32 83       	std	Z+2, r19	; 0x02
    2d46:	21 83       	std	Z+1, r18	; 0x01
    2d48:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	21 81       	ldd	r18, Z+1	; 0x01
    2d50:	32 81       	ldd	r19, Z+2	; 0x02
    2d52:	8a 81       	ldd	r24, Y+2	; 0x02
    2d54:	9b 81       	ldd	r25, Y+3	; 0x03
    2d56:	03 96       	adiw	r24, 0x03	; 3
    2d58:	28 17       	cp	r18, r24
    2d5a:	39 07       	cpc	r19, r25
    2d5c:	69 f4       	brne	.+26     	; 0x2d78 <vTaskSwitchContext+0xce>
    2d5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d60:	9b 81       	ldd	r25, Y+3	; 0x03
    2d62:	fc 01       	movw	r30, r24
    2d64:	81 81       	ldd	r24, Z+1	; 0x01
    2d66:	92 81       	ldd	r25, Z+2	; 0x02
    2d68:	fc 01       	movw	r30, r24
    2d6a:	22 81       	ldd	r18, Z+2	; 0x02
    2d6c:	33 81       	ldd	r19, Z+3	; 0x03
    2d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d70:	9b 81       	ldd	r25, Y+3	; 0x03
    2d72:	fc 01       	movw	r30, r24
    2d74:	32 83       	std	Z+2, r19	; 0x02
    2d76:	21 83       	std	Z+1, r18	; 0x01
    2d78:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	81 81       	ldd	r24, Z+1	; 0x01
    2d80:	92 81       	ldd	r25, Z+2	; 0x02
    2d82:	fc 01       	movw	r30, r24
    2d84:	86 81       	ldd	r24, Z+6	; 0x06
    2d86:	97 81       	ldd	r25, Z+7	; 0x07
    2d88:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2d8c:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2d90:	89 81       	ldd	r24, Y+1	; 0x01
    2d92:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2d96:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2d9a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2d9e:	fc 01       	movw	r30, r24
    2da0:	85 a1       	ldd	r24, Z+37	; 0x25
    2da2:	96 a1       	ldd	r25, Z+38	; 0x26
    2da4:	0e 94 d0 05 	call	0xba0	; 0xba0 <switch_in>
    2da8:	0f 90       	pop	r0
    2daa:	0f 90       	pop	r0
    2dac:	0f 90       	pop	r0
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	08 95       	ret

00002db4 <vTaskPlaceOnEventList>:
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	00 d0       	rcall	.+0      	; 0x2dba <vTaskPlaceOnEventList+0x6>
    2dba:	00 d0       	rcall	.+0      	; 0x2dbc <vTaskPlaceOnEventList+0x8>
    2dbc:	cd b7       	in	r28, 0x3d	; 61
    2dbe:	de b7       	in	r29, 0x3e	; 62
    2dc0:	9a 83       	std	Y+2, r25	; 0x02
    2dc2:	89 83       	std	Y+1, r24	; 0x01
    2dc4:	7c 83       	std	Y+4, r23	; 0x04
    2dc6:	6b 83       	std	Y+3, r22	; 0x03
    2dc8:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2dcc:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2dd0:	9c 01       	movw	r18, r24
    2dd2:	24 5f       	subi	r18, 0xF4	; 244
    2dd4:	3f 4f       	sbci	r19, 0xFF	; 255
    2dd6:	89 81       	ldd	r24, Y+1	; 0x01
    2dd8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dda:	b9 01       	movw	r22, r18
    2ddc:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInsert>
    2de0:	8b 81       	ldd	r24, Y+3	; 0x03
    2de2:	9c 81       	ldd	r25, Y+4	; 0x04
    2de4:	61 e0       	ldi	r22, 0x01	; 1
    2de6:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <prvAddCurrentTaskToDelayedList>
    2dea:	0f 90       	pop	r0
    2dec:	0f 90       	pop	r0
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	08 95       	ret

00002df8 <xTaskRemoveFromEventList>:
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	00 d0       	rcall	.+0      	; 0x2dfe <xTaskRemoveFromEventList+0x6>
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <xTaskRemoveFromEventList+0x8>
    2e00:	1f 92       	push	r1
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	9d 83       	std	Y+5, r25	; 0x05
    2e08:	8c 83       	std	Y+4, r24	; 0x04
    2e0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2e0e:	fc 01       	movw	r30, r24
    2e10:	85 81       	ldd	r24, Z+5	; 0x05
    2e12:	96 81       	ldd	r25, Z+6	; 0x06
    2e14:	fc 01       	movw	r30, r24
    2e16:	86 81       	ldd	r24, Z+6	; 0x06
    2e18:	97 81       	ldd	r25, Z+7	; 0x07
    2e1a:	9b 83       	std	Y+3, r25	; 0x03
    2e1c:	8a 83       	std	Y+2, r24	; 0x02
    2e1e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e20:	9b 81       	ldd	r25, Y+3	; 0x03
    2e22:	0c 96       	adiw	r24, 0x0c	; 12
    2e24:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    2e28:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2e2c:	88 23       	and	r24, r24
    2e2e:	69 f5       	brne	.+90     	; 0x2e8a <xTaskRemoveFromEventList+0x92>
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	02 96       	adiw	r24, 0x02	; 2
    2e36:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    2e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3e:	fc 01       	movw	r30, r24
    2e40:	96 89       	ldd	r25, Z+22	; 0x16
    2e42:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2e46:	89 17       	cp	r24, r25
    2e48:	30 f4       	brcc	.+12     	; 0x2e56 <xTaskRemoveFromEventList+0x5e>
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	fc 01       	movw	r30, r24
    2e50:	86 89       	ldd	r24, Z+22	; 0x16
    2e52:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2e56:	8a 81       	ldd	r24, Y+2	; 0x02
    2e58:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5a:	ac 01       	movw	r20, r24
    2e5c:	4e 5f       	subi	r20, 0xFE	; 254
    2e5e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	9b 81       	ldd	r25, Y+3	; 0x03
    2e64:	fc 01       	movw	r30, r24
    2e66:	86 89       	ldd	r24, Z+22	; 0x16
    2e68:	28 2f       	mov	r18, r24
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	c9 01       	movw	r24, r18
    2e6e:	88 0f       	add	r24, r24
    2e70:	99 1f       	adc	r25, r25
    2e72:	88 0f       	add	r24, r24
    2e74:	99 1f       	adc	r25, r25
    2e76:	88 0f       	add	r24, r24
    2e78:	99 1f       	adc	r25, r25
    2e7a:	82 0f       	add	r24, r18
    2e7c:	93 1f       	adc	r25, r19
    2e7e:	8e 58       	subi	r24, 0x8E	; 142
    2e80:	9a 4f       	sbci	r25, 0xFA	; 250
    2e82:	ba 01       	movw	r22, r20
    2e84:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    2e88:	08 c0       	rjmp	.+16     	; 0x2e9a <xTaskRemoveFromEventList+0xa2>
    2e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8e:	0c 96       	adiw	r24, 0x0c	; 12
    2e90:	bc 01       	movw	r22, r24
    2e92:	8c ea       	ldi	r24, 0xAC	; 172
    2e94:	95 e0       	ldi	r25, 0x05	; 5
    2e96:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9e:	fc 01       	movw	r30, r24
    2ea0:	26 89       	ldd	r18, Z+22	; 0x16
    2ea2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2ea6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2eaa:	fc 01       	movw	r30, r24
    2eac:	86 89       	ldd	r24, Z+22	; 0x16
    2eae:	82 17       	cp	r24, r18
    2eb0:	30 f4       	brcc	.+12     	; 0x2ebe <xTaskRemoveFromEventList+0xc6>
    2eb2:	81 e0       	ldi	r24, 0x01	; 1
    2eb4:	89 83       	std	Y+1, r24	; 0x01
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <xTaskRemoveFromEventList+0xc8>
    2ebe:	19 82       	std	Y+1, r1	; 0x01
    2ec0:	89 81       	ldd	r24, Y+1	; 0x01
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	08 95       	ret

00002ed2 <vTaskSetTimeOutState>:
    2ed2:	cf 93       	push	r28
    2ed4:	df 93       	push	r29
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <vTaskSetTimeOutState+0x6>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	9a 83       	std	Y+2, r25	; 0x02
    2ede:	89 83       	std	Y+1, r24	; 0x01
    2ee0:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2ee4:	89 81       	ldd	r24, Y+1	; 0x01
    2ee6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee8:	fc 01       	movw	r30, r24
    2eea:	20 83       	st	Z, r18
    2eec:	20 91 c0 05 	lds	r18, 0x05C0	; 0x8005c0 <xTickCount>
    2ef0:	30 91 c1 05 	lds	r19, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2ef4:	89 81       	ldd	r24, Y+1	; 0x01
    2ef6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef8:	fc 01       	movw	r30, r24
    2efa:	32 83       	std	Z+2, r19	; 0x02
    2efc:	21 83       	std	Z+1, r18	; 0x01
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	08 95       	ret

00002f08 <xTaskCheckForTimeOut>:
    2f08:	cf 93       	push	r28
    2f0a:	df 93       	push	r29
    2f0c:	cd b7       	in	r28, 0x3d	; 61
    2f0e:	de b7       	in	r29, 0x3e	; 62
    2f10:	27 97       	sbiw	r28, 0x07	; 7
    2f12:	0f b6       	in	r0, 0x3f	; 63
    2f14:	f8 94       	cli
    2f16:	de bf       	out	0x3e, r29	; 62
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	cd bf       	out	0x3d, r28	; 61
    2f1c:	9d 83       	std	Y+5, r25	; 0x05
    2f1e:	8c 83       	std	Y+4, r24	; 0x04
    2f20:	7f 83       	std	Y+7, r23	; 0x07
    2f22:	6e 83       	std	Y+6, r22	; 0x06
    2f24:	0f b6       	in	r0, 0x3f	; 63
    2f26:	f8 94       	cli
    2f28:	0f 92       	push	r0
    2f2a:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2f2e:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2f32:	9b 83       	std	Y+3, r25	; 0x03
    2f34:	8a 83       	std	Y+2, r24	; 0x02
    2f36:	8c 81       	ldd	r24, Y+4	; 0x04
    2f38:	9d 81       	ldd	r25, Y+5	; 0x05
    2f3a:	fc 01       	movw	r30, r24
    2f3c:	90 81       	ld	r25, Z
    2f3e:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2f42:	98 17       	cp	r25, r24
    2f44:	69 f0       	breq	.+26     	; 0x2f60 <xTaskCheckForTimeOut+0x58>
    2f46:	8c 81       	ldd	r24, Y+4	; 0x04
    2f48:	9d 81       	ldd	r25, Y+5	; 0x05
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	21 81       	ldd	r18, Z+1	; 0x01
    2f4e:	32 81       	ldd	r19, Z+2	; 0x02
    2f50:	8a 81       	ldd	r24, Y+2	; 0x02
    2f52:	9b 81       	ldd	r25, Y+3	; 0x03
    2f54:	82 17       	cp	r24, r18
    2f56:	93 07       	cpc	r25, r19
    2f58:	18 f0       	brcs	.+6      	; 0x2f60 <xTaskCheckForTimeOut+0x58>
    2f5a:	81 e0       	ldi	r24, 0x01	; 1
    2f5c:	89 83       	std	Y+1, r24	; 0x01
    2f5e:	30 c0       	rjmp	.+96     	; 0x2fc0 <xTaskCheckForTimeOut+0xb8>
    2f60:	8c 81       	ldd	r24, Y+4	; 0x04
    2f62:	9d 81       	ldd	r25, Y+5	; 0x05
    2f64:	fc 01       	movw	r30, r24
    2f66:	81 81       	ldd	r24, Z+1	; 0x01
    2f68:	92 81       	ldd	r25, Z+2	; 0x02
    2f6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2f6c:	3b 81       	ldd	r19, Y+3	; 0x03
    2f6e:	28 1b       	sub	r18, r24
    2f70:	39 0b       	sbc	r19, r25
    2f72:	8e 81       	ldd	r24, Y+6	; 0x06
    2f74:	9f 81       	ldd	r25, Y+7	; 0x07
    2f76:	fc 01       	movw	r30, r24
    2f78:	80 81       	ld	r24, Z
    2f7a:	91 81       	ldd	r25, Z+1	; 0x01
    2f7c:	28 17       	cp	r18, r24
    2f7e:	39 07       	cpc	r19, r25
    2f80:	e8 f4       	brcc	.+58     	; 0x2fbc <xTaskCheckForTimeOut+0xb4>
    2f82:	8e 81       	ldd	r24, Y+6	; 0x06
    2f84:	9f 81       	ldd	r25, Y+7	; 0x07
    2f86:	fc 01       	movw	r30, r24
    2f88:	20 81       	ld	r18, Z
    2f8a:	31 81       	ldd	r19, Z+1	; 0x01
    2f8c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f8e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f90:	fc 01       	movw	r30, r24
    2f92:	41 81       	ldd	r20, Z+1	; 0x01
    2f94:	52 81       	ldd	r21, Z+2	; 0x02
    2f96:	8a 81       	ldd	r24, Y+2	; 0x02
    2f98:	9b 81       	ldd	r25, Y+3	; 0x03
    2f9a:	ba 01       	movw	r22, r20
    2f9c:	68 1b       	sub	r22, r24
    2f9e:	79 0b       	sbc	r23, r25
    2fa0:	cb 01       	movw	r24, r22
    2fa2:	28 0f       	add	r18, r24
    2fa4:	39 1f       	adc	r19, r25
    2fa6:	8e 81       	ldd	r24, Y+6	; 0x06
    2fa8:	9f 81       	ldd	r25, Y+7	; 0x07
    2faa:	fc 01       	movw	r30, r24
    2fac:	31 83       	std	Z+1, r19	; 0x01
    2fae:	20 83       	st	Z, r18
    2fb0:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb2:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb4:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <vTaskSetTimeOutState>
    2fb8:	19 82       	std	Y+1, r1	; 0x01
    2fba:	02 c0       	rjmp	.+4      	; 0x2fc0 <xTaskCheckForTimeOut+0xb8>
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	89 83       	std	Y+1, r24	; 0x01
    2fc0:	0f 90       	pop	r0
    2fc2:	0f be       	out	0x3f, r0	; 63
    2fc4:	89 81       	ldd	r24, Y+1	; 0x01
    2fc6:	27 96       	adiw	r28, 0x07	; 7
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	f8 94       	cli
    2fcc:	de bf       	out	0x3e, r29	; 62
    2fce:	0f be       	out	0x3f, r0	; 63
    2fd0:	cd bf       	out	0x3d, r28	; 61
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	08 95       	ret

00002fd8 <vTaskMissedYield>:
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	cd b7       	in	r28, 0x3d	; 61
    2fde:	de b7       	in	r29, 0x3e	; 62
    2fe0:	81 e0       	ldi	r24, 0x01	; 1
    2fe2:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2fe6:	df 91       	pop	r29
    2fe8:	cf 91       	pop	r28
    2fea:	08 95       	ret

00002fec <prvIdleTask>:
    2fec:	cf 93       	push	r28
    2fee:	df 93       	push	r29
    2ff0:	00 d0       	rcall	.+0      	; 0x2ff2 <prvIdleTask+0x6>
    2ff2:	cd b7       	in	r28, 0x3d	; 61
    2ff4:	de b7       	in	r29, 0x3e	; 62
    2ff6:	9a 83       	std	Y+2, r25	; 0x02
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	0e 94 45 18 	call	0x308a	; 0x308a <prvCheckTasksWaitingTermination>
    2ffe:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxReadyTasksLists>
    3002:	82 30       	cpi	r24, 0x02	; 2
    3004:	10 f0       	brcs	.+4      	; 0x300a <prvIdleTask+0x1e>
    3006:	0e 94 c7 09 	call	0x138e	; 0x138e <vPortYield>
    300a:	0e 94 58 04 	call	0x8b0	; 0x8b0 <vApplicationIdleHook>
    300e:	f5 cf       	rjmp	.-22     	; 0x2ffa <prvIdleTask+0xe>

00003010 <prvInitialiseTaskLists>:
    3010:	cf 93       	push	r28
    3012:	df 93       	push	r29
    3014:	1f 92       	push	r1
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	19 82       	std	Y+1, r1	; 0x01
    301c:	13 c0       	rjmp	.+38     	; 0x3044 <prvInitialiseTaskLists+0x34>
    301e:	89 81       	ldd	r24, Y+1	; 0x01
    3020:	28 2f       	mov	r18, r24
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	c9 01       	movw	r24, r18
    3026:	88 0f       	add	r24, r24
    3028:	99 1f       	adc	r25, r25
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	82 0f       	add	r24, r18
    3034:	93 1f       	adc	r25, r19
    3036:	8e 58       	subi	r24, 0x8E	; 142
    3038:	9a 4f       	sbci	r25, 0xFA	; 250
    303a:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    303e:	89 81       	ldd	r24, Y+1	; 0x01
    3040:	8f 5f       	subi	r24, 0xFF	; 255
    3042:	89 83       	std	Y+1, r24	; 0x01
    3044:	89 81       	ldd	r24, Y+1	; 0x01
    3046:	84 30       	cpi	r24, 0x04	; 4
    3048:	50 f3       	brcs	.-44     	; 0x301e <prvInitialiseTaskLists+0xe>
    304a:	86 e9       	ldi	r24, 0x96	; 150
    304c:	95 e0       	ldi	r25, 0x05	; 5
    304e:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    3052:	8f e9       	ldi	r24, 0x9F	; 159
    3054:	95 e0       	ldi	r25, 0x05	; 5
    3056:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    305a:	8c ea       	ldi	r24, 0xAC	; 172
    305c:	95 e0       	ldi	r25, 0x05	; 5
    305e:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    3062:	85 eb       	ldi	r24, 0xB5	; 181
    3064:	95 e0       	ldi	r25, 0x05	; 5
    3066:	0e 94 87 06 	call	0xd0e	; 0xd0e <vListInitialise>
    306a:	86 e9       	ldi	r24, 0x96	; 150
    306c:	95 e0       	ldi	r25, 0x05	; 5
    306e:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    3072:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    3076:	8f e9       	ldi	r24, 0x9F	; 159
    3078:	95 e0       	ldi	r25, 0x05	; 5
    307a:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    307e:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    3082:	0f 90       	pop	r0
    3084:	df 91       	pop	r29
    3086:	cf 91       	pop	r28
    3088:	08 95       	ret

0000308a <prvCheckTasksWaitingTermination>:
    308a:	cf 93       	push	r28
    308c:	df 93       	push	r29
    308e:	00 d0       	rcall	.+0      	; 0x3090 <prvCheckTasksWaitingTermination+0x6>
    3090:	1f 92       	push	r1
    3092:	cd b7       	in	r28, 0x3d	; 61
    3094:	de b7       	in	r29, 0x3e	; 62
    3096:	2f c0       	rjmp	.+94     	; 0x30f6 <prvCheckTasksWaitingTermination+0x6c>
    3098:	0e 94 c6 14 	call	0x298c	; 0x298c <vTaskSuspendAll>
    309c:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <xTasksWaitingTermination>
    30a0:	81 e0       	ldi	r24, 0x01	; 1
    30a2:	99 23       	and	r25, r25
    30a4:	09 f0       	breq	.+2      	; 0x30a8 <prvCheckTasksWaitingTermination+0x1e>
    30a6:	80 e0       	ldi	r24, 0x00	; 0
    30a8:	89 83       	std	Y+1, r24	; 0x01
    30aa:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <xTaskResumeAll>
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
    30b0:	88 23       	and	r24, r24
    30b2:	09 f5       	brne	.+66     	; 0x30f6 <prvCheckTasksWaitingTermination+0x6c>
    30b4:	0f b6       	in	r0, 0x3f	; 63
    30b6:	f8 94       	cli
    30b8:	0f 92       	push	r0
    30ba:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <xTasksWaitingTermination+0x5>
    30be:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <xTasksWaitingTermination+0x6>
    30c2:	fc 01       	movw	r30, r24
    30c4:	86 81       	ldd	r24, Z+6	; 0x06
    30c6:	97 81       	ldd	r25, Z+7	; 0x07
    30c8:	9b 83       	std	Y+3, r25	; 0x03
    30ca:	8a 83       	std	Y+2, r24	; 0x02
    30cc:	8a 81       	ldd	r24, Y+2	; 0x02
    30ce:	9b 81       	ldd	r25, Y+3	; 0x03
    30d0:	02 96       	adiw	r24, 0x02	; 2
    30d2:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    30d6:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    30da:	81 50       	subi	r24, 0x01	; 1
    30dc:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    30e0:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30e4:	81 50       	subi	r24, 0x01	; 1
    30e6:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30ea:	0f 90       	pop	r0
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	8a 81       	ldd	r24, Y+2	; 0x02
    30f0:	9b 81       	ldd	r25, Y+3	; 0x03
    30f2:	0e 94 85 18 	call	0x310a	; 0x310a <prvDeleteTCB>
    30f6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30fa:	88 23       	and	r24, r24
    30fc:	69 f6       	brne	.-102    	; 0x3098 <prvCheckTasksWaitingTermination+0xe>
    30fe:	0f 90       	pop	r0
    3100:	0f 90       	pop	r0
    3102:	0f 90       	pop	r0
    3104:	df 91       	pop	r29
    3106:	cf 91       	pop	r28
    3108:	08 95       	ret

0000310a <prvDeleteTCB>:
    310a:	cf 93       	push	r28
    310c:	df 93       	push	r29
    310e:	00 d0       	rcall	.+0      	; 0x3110 <prvDeleteTCB+0x6>
    3110:	cd b7       	in	r28, 0x3d	; 61
    3112:	de b7       	in	r29, 0x3e	; 62
    3114:	9a 83       	std	Y+2, r25	; 0x02
    3116:	89 83       	std	Y+1, r24	; 0x01
    3118:	89 81       	ldd	r24, Y+1	; 0x01
    311a:	9a 81       	ldd	r25, Y+2	; 0x02
    311c:	fc 01       	movw	r30, r24
    311e:	87 89       	ldd	r24, Z+23	; 0x17
    3120:	90 8d       	ldd	r25, Z+24	; 0x18
    3122:	0e 94 36 0b 	call	0x166c	; 0x166c <vPortFree>
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	0e 94 36 0b 	call	0x166c	; 0x166c <vPortFree>
    312e:	0f 90       	pop	r0
    3130:	0f 90       	pop	r0
    3132:	df 91       	pop	r29
    3134:	cf 91       	pop	r28
    3136:	08 95       	ret

00003138 <prvResetNextTaskUnblockTime>:
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	00 d0       	rcall	.+0      	; 0x313e <prvResetNextTaskUnblockTime+0x6>
    313e:	cd b7       	in	r28, 0x3d	; 61
    3140:	de b7       	in	r29, 0x3e	; 62
    3142:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3146:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    314a:	fc 01       	movw	r30, r24
    314c:	80 81       	ld	r24, Z
    314e:	88 23       	and	r24, r24
    3150:	39 f4       	brne	.+14     	; 0x3160 <prvResetNextTaskUnblockTime+0x28>
    3152:	8f ef       	ldi	r24, 0xFF	; 255
    3154:	9f ef       	ldi	r25, 0xFF	; 255
    3156:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    315a:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    315e:	15 c0       	rjmp	.+42     	; 0x318a <prvResetNextTaskUnblockTime+0x52>
    3160:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3164:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3168:	fc 01       	movw	r30, r24
    316a:	85 81       	ldd	r24, Z+5	; 0x05
    316c:	96 81       	ldd	r25, Z+6	; 0x06
    316e:	fc 01       	movw	r30, r24
    3170:	86 81       	ldd	r24, Z+6	; 0x06
    3172:	97 81       	ldd	r25, Z+7	; 0x07
    3174:	9a 83       	std	Y+2, r25	; 0x02
    3176:	89 83       	std	Y+1, r24	; 0x01
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	fc 01       	movw	r30, r24
    317e:	82 81       	ldd	r24, Z+2	; 0x02
    3180:	93 81       	ldd	r25, Z+3	; 0x03
    3182:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3186:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	08 95       	ret

00003194 <vTaskPriorityInherit>:
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	00 d0       	rcall	.+0      	; 0x319a <vTaskPriorityInherit+0x6>
    319a:	00 d0       	rcall	.+0      	; 0x319c <vTaskPriorityInherit+0x8>
    319c:	cd b7       	in	r28, 0x3d	; 61
    319e:	de b7       	in	r29, 0x3e	; 62
    31a0:	9c 83       	std	Y+4, r25	; 0x04
    31a2:	8b 83       	std	Y+3, r24	; 0x03
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	9c 81       	ldd	r25, Y+4	; 0x04
    31a8:	9a 83       	std	Y+2, r25	; 0x02
    31aa:	89 83       	std	Y+1, r24	; 0x01
    31ac:	8b 81       	ldd	r24, Y+3	; 0x03
    31ae:	9c 81       	ldd	r25, Y+4	; 0x04
    31b0:	89 2b       	or	r24, r25
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <vTaskPriorityInherit+0x22>
    31b4:	7f c0       	rjmp	.+254    	; 0x32b4 <vTaskPriorityInherit+0x120>
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	fc 01       	movw	r30, r24
    31bc:	26 89       	ldd	r18, Z+22	; 0x16
    31be:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31c2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31c6:	fc 01       	movw	r30, r24
    31c8:	86 89       	ldd	r24, Z+22	; 0x16
    31ca:	28 17       	cp	r18, r24
    31cc:	08 f0       	brcs	.+2      	; 0x31d0 <vTaskPriorityInherit+0x3c>
    31ce:	72 c0       	rjmp	.+228    	; 0x32b4 <vTaskPriorityInherit+0x120>
    31d0:	89 81       	ldd	r24, Y+1	; 0x01
    31d2:	9a 81       	ldd	r25, Y+2	; 0x02
    31d4:	fc 01       	movw	r30, r24
    31d6:	84 85       	ldd	r24, Z+12	; 0x0c
    31d8:	95 85       	ldd	r25, Z+13	; 0x0d
    31da:	99 23       	and	r25, r25
    31dc:	8c f0       	brlt	.+34     	; 0x3200 <vTaskPriorityInherit+0x6c>
    31de:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31e2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31e6:	fc 01       	movw	r30, r24
    31e8:	86 89       	ldd	r24, Z+22	; 0x16
    31ea:	88 2f       	mov	r24, r24
    31ec:	90 e0       	ldi	r25, 0x00	; 0
    31ee:	24 e0       	ldi	r18, 0x04	; 4
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	28 1b       	sub	r18, r24
    31f4:	39 0b       	sbc	r19, r25
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	fc 01       	movw	r30, r24
    31fc:	35 87       	std	Z+13, r19	; 0x0d
    31fe:	24 87       	std	Z+12, r18	; 0x0c
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	9a 81       	ldd	r25, Y+2	; 0x02
    3204:	fc 01       	movw	r30, r24
    3206:	42 85       	ldd	r20, Z+10	; 0x0a
    3208:	53 85       	ldd	r21, Z+11	; 0x0b
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	fc 01       	movw	r30, r24
    3210:	86 89       	ldd	r24, Z+22	; 0x16
    3212:	28 2f       	mov	r18, r24
    3214:	30 e0       	ldi	r19, 0x00	; 0
    3216:	c9 01       	movw	r24, r18
    3218:	88 0f       	add	r24, r24
    321a:	99 1f       	adc	r25, r25
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	88 0f       	add	r24, r24
    3222:	99 1f       	adc	r25, r25
    3224:	82 0f       	add	r24, r18
    3226:	93 1f       	adc	r25, r19
    3228:	8e 58       	subi	r24, 0x8E	; 142
    322a:	9a 4f       	sbci	r25, 0xFA	; 250
    322c:	48 17       	cp	r20, r24
    322e:	59 07       	cpc	r21, r25
    3230:	b9 f5       	brne	.+110    	; 0x32a0 <vTaskPriorityInherit+0x10c>
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	9a 81       	ldd	r25, Y+2	; 0x02
    3236:	02 96       	adiw	r24, 0x02	; 2
    3238:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    323c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3240:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3244:	fc 01       	movw	r30, r24
    3246:	26 89       	ldd	r18, Z+22	; 0x16
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	fc 01       	movw	r30, r24
    324e:	26 8b       	std	Z+22, r18	; 0x16
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	fc 01       	movw	r30, r24
    3256:	96 89       	ldd	r25, Z+22	; 0x16
    3258:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    325c:	89 17       	cp	r24, r25
    325e:	30 f4       	brcc	.+12     	; 0x326c <vTaskPriorityInherit+0xd8>
    3260:	89 81       	ldd	r24, Y+1	; 0x01
    3262:	9a 81       	ldd	r25, Y+2	; 0x02
    3264:	fc 01       	movw	r30, r24
    3266:	86 89       	ldd	r24, Z+22	; 0x16
    3268:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	ac 01       	movw	r20, r24
    3272:	4e 5f       	subi	r20, 0xFE	; 254
    3274:	5f 4f       	sbci	r21, 0xFF	; 255
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	fc 01       	movw	r30, r24
    327c:	86 89       	ldd	r24, Z+22	; 0x16
    327e:	28 2f       	mov	r18, r24
    3280:	30 e0       	ldi	r19, 0x00	; 0
    3282:	c9 01       	movw	r24, r18
    3284:	88 0f       	add	r24, r24
    3286:	99 1f       	adc	r25, r25
    3288:	88 0f       	add	r24, r24
    328a:	99 1f       	adc	r25, r25
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	82 0f       	add	r24, r18
    3292:	93 1f       	adc	r25, r19
    3294:	8e 58       	subi	r24, 0x8E	; 142
    3296:	9a 4f       	sbci	r25, 0xFA	; 250
    3298:	ba 01       	movw	r22, r20
    329a:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    329e:	0a c0       	rjmp	.+20     	; 0x32b4 <vTaskPriorityInherit+0x120>
    32a0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    32a4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    32a8:	fc 01       	movw	r30, r24
    32aa:	26 89       	ldd	r18, Z+22	; 0x16
    32ac:	89 81       	ldd	r24, Y+1	; 0x01
    32ae:	9a 81       	ldd	r25, Y+2	; 0x02
    32b0:	fc 01       	movw	r30, r24
    32b2:	26 8b       	std	Z+22, r18	; 0x16
    32b4:	0f 90       	pop	r0
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	df 91       	pop	r29
    32be:	cf 91       	pop	r28
    32c0:	08 95       	ret

000032c2 <xTaskPriorityDisinherit>:
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	00 d0       	rcall	.+0      	; 0x32c8 <xTaskPriorityDisinherit+0x6>
    32c8:	00 d0       	rcall	.+0      	; 0x32ca <xTaskPriorityDisinherit+0x8>
    32ca:	1f 92       	push	r1
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	9d 83       	std	Y+5, r25	; 0x05
    32d2:	8c 83       	std	Y+4, r24	; 0x04
    32d4:	8c 81       	ldd	r24, Y+4	; 0x04
    32d6:	9d 81       	ldd	r25, Y+5	; 0x05
    32d8:	9b 83       	std	Y+3, r25	; 0x03
    32da:	8a 83       	std	Y+2, r24	; 0x02
    32dc:	19 82       	std	Y+1, r1	; 0x01
    32de:	8c 81       	ldd	r24, Y+4	; 0x04
    32e0:	9d 81       	ldd	r25, Y+5	; 0x05
    32e2:	89 2b       	or	r24, r25
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <xTaskPriorityDisinherit+0x26>
    32e6:	61 c0       	rjmp	.+194    	; 0x33aa <xTaskPriorityDisinherit+0xe8>
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	84 a1       	ldd	r24, Z+36	; 0x24
    32f0:	2f ef       	ldi	r18, 0xFF	; 255
    32f2:	28 0f       	add	r18, r24
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
    32f6:	9b 81       	ldd	r25, Y+3	; 0x03
    32f8:	fc 01       	movw	r30, r24
    32fa:	24 a3       	std	Z+36, r18	; 0x24
    32fc:	8a 81       	ldd	r24, Y+2	; 0x02
    32fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3300:	fc 01       	movw	r30, r24
    3302:	26 89       	ldd	r18, Z+22	; 0x16
    3304:	8a 81       	ldd	r24, Y+2	; 0x02
    3306:	9b 81       	ldd	r25, Y+3	; 0x03
    3308:	fc 01       	movw	r30, r24
    330a:	83 a1       	ldd	r24, Z+35	; 0x23
    330c:	28 17       	cp	r18, r24
    330e:	09 f4       	brne	.+2      	; 0x3312 <xTaskPriorityDisinherit+0x50>
    3310:	4c c0       	rjmp	.+152    	; 0x33aa <xTaskPriorityDisinherit+0xe8>
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	9b 81       	ldd	r25, Y+3	; 0x03
    3316:	fc 01       	movw	r30, r24
    3318:	84 a1       	ldd	r24, Z+36	; 0x24
    331a:	88 23       	and	r24, r24
    331c:	09 f0       	breq	.+2      	; 0x3320 <xTaskPriorityDisinherit+0x5e>
    331e:	45 c0       	rjmp	.+138    	; 0x33aa <xTaskPriorityDisinherit+0xe8>
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	02 96       	adiw	r24, 0x02	; 2
    3326:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
    332a:	8a 81       	ldd	r24, Y+2	; 0x02
    332c:	9b 81       	ldd	r25, Y+3	; 0x03
    332e:	fc 01       	movw	r30, r24
    3330:	23 a1       	ldd	r18, Z+35	; 0x23
    3332:	8a 81       	ldd	r24, Y+2	; 0x02
    3334:	9b 81       	ldd	r25, Y+3	; 0x03
    3336:	fc 01       	movw	r30, r24
    3338:	26 8b       	std	Z+22, r18	; 0x16
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	fc 01       	movw	r30, r24
    3340:	86 89       	ldd	r24, Z+22	; 0x16
    3342:	88 2f       	mov	r24, r24
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	24 e0       	ldi	r18, 0x04	; 4
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	28 1b       	sub	r18, r24
    334c:	39 0b       	sbc	r19, r25
    334e:	8a 81       	ldd	r24, Y+2	; 0x02
    3350:	9b 81       	ldd	r25, Y+3	; 0x03
    3352:	fc 01       	movw	r30, r24
    3354:	35 87       	std	Z+13, r19	; 0x0d
    3356:	24 87       	std	Z+12, r18	; 0x0c
    3358:	8a 81       	ldd	r24, Y+2	; 0x02
    335a:	9b 81       	ldd	r25, Y+3	; 0x03
    335c:	fc 01       	movw	r30, r24
    335e:	96 89       	ldd	r25, Z+22	; 0x16
    3360:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3364:	89 17       	cp	r24, r25
    3366:	30 f4       	brcc	.+12     	; 0x3374 <xTaskPriorityDisinherit+0xb2>
    3368:	8a 81       	ldd	r24, Y+2	; 0x02
    336a:	9b 81       	ldd	r25, Y+3	; 0x03
    336c:	fc 01       	movw	r30, r24
    336e:	86 89       	ldd	r24, Z+22	; 0x16
    3370:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    3374:	8a 81       	ldd	r24, Y+2	; 0x02
    3376:	9b 81       	ldd	r25, Y+3	; 0x03
    3378:	ac 01       	movw	r20, r24
    337a:	4e 5f       	subi	r20, 0xFE	; 254
    337c:	5f 4f       	sbci	r21, 0xFF	; 255
    337e:	8a 81       	ldd	r24, Y+2	; 0x02
    3380:	9b 81       	ldd	r25, Y+3	; 0x03
    3382:	fc 01       	movw	r30, r24
    3384:	86 89       	ldd	r24, Z+22	; 0x16
    3386:	28 2f       	mov	r18, r24
    3388:	30 e0       	ldi	r19, 0x00	; 0
    338a:	c9 01       	movw	r24, r18
    338c:	88 0f       	add	r24, r24
    338e:	99 1f       	adc	r25, r25
    3390:	88 0f       	add	r24, r24
    3392:	99 1f       	adc	r25, r25
    3394:	88 0f       	add	r24, r24
    3396:	99 1f       	adc	r25, r25
    3398:	82 0f       	add	r24, r18
    339a:	93 1f       	adc	r25, r19
    339c:	8e 58       	subi	r24, 0x8E	; 142
    339e:	9a 4f       	sbci	r25, 0xFA	; 250
    33a0:	ba 01       	movw	r22, r20
    33a2:	0e 94 cd 06 	call	0xd9a	; 0xd9a <vListInsertEnd>
    33a6:	81 e0       	ldi	r24, 0x01	; 1
    33a8:	89 83       	std	Y+1, r24	; 0x01
    33aa:	89 81       	ldd	r24, Y+1	; 0x01
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	df 91       	pop	r29
    33b8:	cf 91       	pop	r28
    33ba:	08 95       	ret

000033bc <pvTaskIncrementMutexHeldCount>:
    33bc:	cf 93       	push	r28
    33be:	df 93       	push	r29
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33c8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33cc:	89 2b       	or	r24, r25
    33ce:	49 f0       	breq	.+18     	; 0x33e2 <pvTaskIncrementMutexHeldCount+0x26>
    33d0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33d4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33d8:	fc 01       	movw	r30, r24
    33da:	24 a1       	ldd	r18, Z+36	; 0x24
    33dc:	2f 5f       	subi	r18, 0xFF	; 255
    33de:	fc 01       	movw	r30, r24
    33e0:	24 a3       	std	Z+36, r18	; 0x24
    33e2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33e6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	08 95       	ret

000033f0 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    33f0:	cf 93       	push	r28
    33f2:	df 93       	push	r29
    33f4:	cd b7       	in	r28, 0x3d	; 61
    33f6:	de b7       	in	r29, 0x3e	; 62
    33f8:	27 97       	sbiw	r28, 0x07	; 7
    33fa:	0f b6       	in	r0, 0x3f	; 63
    33fc:	f8 94       	cli
    33fe:	de bf       	out	0x3e, r29	; 62
    3400:	0f be       	out	0x3f, r0	; 63
    3402:	cd bf       	out	0x3d, r28	; 61
    3404:	9e 83       	std	Y+6, r25	; 0x06
    3406:	8d 83       	std	Y+5, r24	; 0x05
    3408:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    340a:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    340e:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    3412:	9a 83       	std	Y+2, r25	; 0x02
    3414:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3416:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    341a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    341e:	02 96       	adiw	r24, 0x02	; 2
    3420:	0e 94 92 07 	call	0xf24	; 0xf24 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3424:	29 81       	ldd	r18, Y+1	; 0x01
    3426:	3a 81       	ldd	r19, Y+2	; 0x02
    3428:	8d 81       	ldd	r24, Y+5	; 0x05
    342a:	9e 81       	ldd	r25, Y+6	; 0x06
    342c:	82 0f       	add	r24, r18
    342e:	93 1f       	adc	r25, r19
    3430:	9c 83       	std	Y+4, r25	; 0x04
    3432:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3434:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3438:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    343c:	2b 81       	ldd	r18, Y+3	; 0x03
    343e:	3c 81       	ldd	r19, Y+4	; 0x04
    3440:	fc 01       	movw	r30, r24
    3442:	33 83       	std	Z+3, r19	; 0x03
    3444:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3446:	2b 81       	ldd	r18, Y+3	; 0x03
    3448:	3c 81       	ldd	r19, Y+4	; 0x04
    344a:	89 81       	ldd	r24, Y+1	; 0x01
    344c:	9a 81       	ldd	r25, Y+2	; 0x02
    344e:	28 17       	cp	r18, r24
    3450:	39 07       	cpc	r19, r25
    3452:	78 f4       	brcc	.+30     	; 0x3472 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3454:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3458:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    345c:	9c 01       	movw	r18, r24
    345e:	2e 5f       	subi	r18, 0xFE	; 254
    3460:	3f 4f       	sbci	r19, 0xFF	; 255
    3462:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    3466:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    346a:	b9 01       	movw	r22, r18
    346c:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInsert>
    3470:	1d c0       	rjmp	.+58     	; 0x34ac <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3472:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3476:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    347a:	9c 01       	movw	r18, r24
    347c:	2e 5f       	subi	r18, 0xFE	; 254
    347e:	3f 4f       	sbci	r19, 0xFF	; 255
    3480:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3484:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3488:	b9 01       	movw	r22, r18
    348a:	0e 94 1b 07 	call	0xe36	; 0xe36 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    348e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    3492:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3496:	2b 81       	ldd	r18, Y+3	; 0x03
    3498:	3c 81       	ldd	r19, Y+4	; 0x04
    349a:	28 17       	cp	r18, r24
    349c:	39 07       	cpc	r19, r25
    349e:	30 f4       	brcc	.+12     	; 0x34ac <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    34a0:	8b 81       	ldd	r24, Y+3	; 0x03
    34a2:	9c 81       	ldd	r25, Y+4	; 0x04
    34a4:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    34a8:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    34ac:	27 96       	adiw	r28, 0x07	; 7
    34ae:	0f b6       	in	r0, 0x3f	; 63
    34b0:	f8 94       	cli
    34b2:	de bf       	out	0x3e, r29	; 62
    34b4:	0f be       	out	0x3f, r0	; 63
    34b6:	cd bf       	out	0x3d, r28	; 61
    34b8:	df 91       	pop	r29
    34ba:	cf 91       	pop	r28
    34bc:	08 95       	ret

000034be <__divmodhi4>:
    34be:	97 fb       	bst	r25, 7
    34c0:	07 2e       	mov	r0, r23
    34c2:	16 f4       	brtc	.+4      	; 0x34c8 <__divmodhi4+0xa>
    34c4:	00 94       	com	r0
    34c6:	07 d0       	rcall	.+14     	; 0x34d6 <__divmodhi4_neg1>
    34c8:	77 fd       	sbrc	r23, 7
    34ca:	09 d0       	rcall	.+18     	; 0x34de <__divmodhi4_neg2>
    34cc:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__udivmodhi4>
    34d0:	07 fc       	sbrc	r0, 7
    34d2:	05 d0       	rcall	.+10     	; 0x34de <__divmodhi4_neg2>
    34d4:	3e f4       	brtc	.+14     	; 0x34e4 <__divmodhi4_exit>

000034d6 <__divmodhi4_neg1>:
    34d6:	90 95       	com	r25
    34d8:	81 95       	neg	r24
    34da:	9f 4f       	sbci	r25, 0xFF	; 255
    34dc:	08 95       	ret

000034de <__divmodhi4_neg2>:
    34de:	70 95       	com	r23
    34e0:	61 95       	neg	r22
    34e2:	7f 4f       	sbci	r23, 0xFF	; 255

000034e4 <__divmodhi4_exit>:
    34e4:	08 95       	ret

000034e6 <__udivmodsi4>:
    34e6:	a1 e2       	ldi	r26, 0x21	; 33
    34e8:	1a 2e       	mov	r1, r26
    34ea:	aa 1b       	sub	r26, r26
    34ec:	bb 1b       	sub	r27, r27
    34ee:	fd 01       	movw	r30, r26
    34f0:	0d c0       	rjmp	.+26     	; 0x350c <__udivmodsi4_ep>

000034f2 <__udivmodsi4_loop>:
    34f2:	aa 1f       	adc	r26, r26
    34f4:	bb 1f       	adc	r27, r27
    34f6:	ee 1f       	adc	r30, r30
    34f8:	ff 1f       	adc	r31, r31
    34fa:	a2 17       	cp	r26, r18
    34fc:	b3 07       	cpc	r27, r19
    34fe:	e4 07       	cpc	r30, r20
    3500:	f5 07       	cpc	r31, r21
    3502:	20 f0       	brcs	.+8      	; 0x350c <__udivmodsi4_ep>
    3504:	a2 1b       	sub	r26, r18
    3506:	b3 0b       	sbc	r27, r19
    3508:	e4 0b       	sbc	r30, r20
    350a:	f5 0b       	sbc	r31, r21

0000350c <__udivmodsi4_ep>:
    350c:	66 1f       	adc	r22, r22
    350e:	77 1f       	adc	r23, r23
    3510:	88 1f       	adc	r24, r24
    3512:	99 1f       	adc	r25, r25
    3514:	1a 94       	dec	r1
    3516:	69 f7       	brne	.-38     	; 0x34f2 <__udivmodsi4_loop>
    3518:	60 95       	com	r22
    351a:	70 95       	com	r23
    351c:	80 95       	com	r24
    351e:	90 95       	com	r25
    3520:	9b 01       	movw	r18, r22
    3522:	ac 01       	movw	r20, r24
    3524:	bd 01       	movw	r22, r26
    3526:	cf 01       	movw	r24, r30
    3528:	08 95       	ret

0000352a <__tablejump2__>:
    352a:	ee 0f       	add	r30, r30
    352c:	ff 1f       	adc	r31, r31
    352e:	05 90       	lpm	r0, Z+
    3530:	f4 91       	lpm	r31, Z
    3532:	e0 2d       	mov	r30, r0
    3534:	09 94       	ijmp

00003536 <__udivmodhi4>:
    3536:	aa 1b       	sub	r26, r26
    3538:	bb 1b       	sub	r27, r27
    353a:	51 e1       	ldi	r21, 0x11	; 17
    353c:	07 c0       	rjmp	.+14     	; 0x354c <__udivmodhi4_ep>

0000353e <__udivmodhi4_loop>:
    353e:	aa 1f       	adc	r26, r26
    3540:	bb 1f       	adc	r27, r27
    3542:	a6 17       	cp	r26, r22
    3544:	b7 07       	cpc	r27, r23
    3546:	10 f0       	brcs	.+4      	; 0x354c <__udivmodhi4_ep>
    3548:	a6 1b       	sub	r26, r22
    354a:	b7 0b       	sbc	r27, r23

0000354c <__udivmodhi4_ep>:
    354c:	88 1f       	adc	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	5a 95       	dec	r21
    3552:	a9 f7       	brne	.-22     	; 0x353e <__udivmodhi4_loop>
    3554:	80 95       	com	r24
    3556:	90 95       	com	r25
    3558:	bc 01       	movw	r22, r24
    355a:	cd 01       	movw	r24, r26
    355c:	08 95       	ret

0000355e <malloc>:
    355e:	cf 93       	push	r28
    3560:	df 93       	push	r29
    3562:	82 30       	cpi	r24, 0x02	; 2
    3564:	91 05       	cpc	r25, r1
    3566:	10 f4       	brcc	.+4      	; 0x356c <malloc+0xe>
    3568:	82 e0       	ldi	r24, 0x02	; 2
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <__flp>
    3570:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <__flp+0x1>
    3574:	20 e0       	ldi	r18, 0x00	; 0
    3576:	30 e0       	ldi	r19, 0x00	; 0
    3578:	c0 e0       	ldi	r28, 0x00	; 0
    357a:	d0 e0       	ldi	r29, 0x00	; 0
    357c:	30 97       	sbiw	r30, 0x00	; 0
    357e:	11 f1       	breq	.+68     	; 0x35c4 <malloc+0x66>
    3580:	40 81       	ld	r20, Z
    3582:	51 81       	ldd	r21, Z+1	; 0x01
    3584:	48 17       	cp	r20, r24
    3586:	59 07       	cpc	r21, r25
    3588:	c0 f0       	brcs	.+48     	; 0x35ba <malloc+0x5c>
    358a:	48 17       	cp	r20, r24
    358c:	59 07       	cpc	r21, r25
    358e:	61 f4       	brne	.+24     	; 0x35a8 <malloc+0x4a>
    3590:	82 81       	ldd	r24, Z+2	; 0x02
    3592:	93 81       	ldd	r25, Z+3	; 0x03
    3594:	20 97       	sbiw	r28, 0x00	; 0
    3596:	19 f0       	breq	.+6      	; 0x359e <malloc+0x40>
    3598:	9b 83       	std	Y+3, r25	; 0x03
    359a:	8a 83       	std	Y+2, r24	; 0x02
    359c:	2b c0       	rjmp	.+86     	; 0x35f4 <malloc+0x96>
    359e:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    35a2:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    35a6:	26 c0       	rjmp	.+76     	; 0x35f4 <malloc+0x96>
    35a8:	21 15       	cp	r18, r1
    35aa:	31 05       	cpc	r19, r1
    35ac:	19 f0       	breq	.+6      	; 0x35b4 <malloc+0x56>
    35ae:	42 17       	cp	r20, r18
    35b0:	53 07       	cpc	r21, r19
    35b2:	18 f4       	brcc	.+6      	; 0x35ba <malloc+0x5c>
    35b4:	9a 01       	movw	r18, r20
    35b6:	be 01       	movw	r22, r28
    35b8:	df 01       	movw	r26, r30
    35ba:	ef 01       	movw	r28, r30
    35bc:	02 80       	ldd	r0, Z+2	; 0x02
    35be:	f3 81       	ldd	r31, Z+3	; 0x03
    35c0:	e0 2d       	mov	r30, r0
    35c2:	dc cf       	rjmp	.-72     	; 0x357c <malloc+0x1e>
    35c4:	21 15       	cp	r18, r1
    35c6:	31 05       	cpc	r19, r1
    35c8:	09 f1       	breq	.+66     	; 0x360c <malloc+0xae>
    35ca:	28 1b       	sub	r18, r24
    35cc:	39 0b       	sbc	r19, r25
    35ce:	24 30       	cpi	r18, 0x04	; 4
    35d0:	31 05       	cpc	r19, r1
    35d2:	90 f4       	brcc	.+36     	; 0x35f8 <malloc+0x9a>
    35d4:	12 96       	adiw	r26, 0x02	; 2
    35d6:	8d 91       	ld	r24, X+
    35d8:	9c 91       	ld	r25, X
    35da:	13 97       	sbiw	r26, 0x03	; 3
    35dc:	61 15       	cp	r22, r1
    35de:	71 05       	cpc	r23, r1
    35e0:	21 f0       	breq	.+8      	; 0x35ea <malloc+0x8c>
    35e2:	fb 01       	movw	r30, r22
    35e4:	93 83       	std	Z+3, r25	; 0x03
    35e6:	82 83       	std	Z+2, r24	; 0x02
    35e8:	04 c0       	rjmp	.+8      	; 0x35f2 <malloc+0x94>
    35ea:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    35ee:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    35f2:	fd 01       	movw	r30, r26
    35f4:	32 96       	adiw	r30, 0x02	; 2
    35f6:	44 c0       	rjmp	.+136    	; 0x3680 <malloc+0x122>
    35f8:	fd 01       	movw	r30, r26
    35fa:	e2 0f       	add	r30, r18
    35fc:	f3 1f       	adc	r31, r19
    35fe:	81 93       	st	Z+, r24
    3600:	91 93       	st	Z+, r25
    3602:	22 50       	subi	r18, 0x02	; 2
    3604:	31 09       	sbc	r19, r1
    3606:	2d 93       	st	X+, r18
    3608:	3c 93       	st	X, r19
    360a:	3a c0       	rjmp	.+116    	; 0x3680 <malloc+0x122>
    360c:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    3610:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    3614:	23 2b       	or	r18, r19
    3616:	41 f4       	brne	.+16     	; 0x3628 <malloc+0xca>
    3618:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    361c:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3620:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <__brkval+0x1>
    3624:	20 93 cd 05 	sts	0x05CD, r18	; 0x8005cd <__brkval>
    3628:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    362c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3630:	21 15       	cp	r18, r1
    3632:	31 05       	cpc	r19, r1
    3634:	41 f4       	brne	.+16     	; 0x3646 <malloc+0xe8>
    3636:	2d b7       	in	r18, 0x3d	; 61
    3638:	3e b7       	in	r19, 0x3e	; 62
    363a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    363e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3642:	24 1b       	sub	r18, r20
    3644:	35 0b       	sbc	r19, r21
    3646:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <__brkval>
    364a:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <__brkval+0x1>
    364e:	e2 17       	cp	r30, r18
    3650:	f3 07       	cpc	r31, r19
    3652:	a0 f4       	brcc	.+40     	; 0x367c <malloc+0x11e>
    3654:	2e 1b       	sub	r18, r30
    3656:	3f 0b       	sbc	r19, r31
    3658:	28 17       	cp	r18, r24
    365a:	39 07       	cpc	r19, r25
    365c:	78 f0       	brcs	.+30     	; 0x367c <malloc+0x11e>
    365e:	ac 01       	movw	r20, r24
    3660:	4e 5f       	subi	r20, 0xFE	; 254
    3662:	5f 4f       	sbci	r21, 0xFF	; 255
    3664:	24 17       	cp	r18, r20
    3666:	35 07       	cpc	r19, r21
    3668:	48 f0       	brcs	.+18     	; 0x367c <malloc+0x11e>
    366a:	4e 0f       	add	r20, r30
    366c:	5f 1f       	adc	r21, r31
    366e:	50 93 ce 05 	sts	0x05CE, r21	; 0x8005ce <__brkval+0x1>
    3672:	40 93 cd 05 	sts	0x05CD, r20	; 0x8005cd <__brkval>
    3676:	81 93       	st	Z+, r24
    3678:	91 93       	st	Z+, r25
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <malloc+0x122>
    367c:	e0 e0       	ldi	r30, 0x00	; 0
    367e:	f0 e0       	ldi	r31, 0x00	; 0
    3680:	cf 01       	movw	r24, r30
    3682:	df 91       	pop	r29
    3684:	cf 91       	pop	r28
    3686:	08 95       	ret

00003688 <free>:
    3688:	0f 93       	push	r16
    368a:	1f 93       	push	r17
    368c:	cf 93       	push	r28
    368e:	df 93       	push	r29
    3690:	00 97       	sbiw	r24, 0x00	; 0
    3692:	09 f4       	brne	.+2      	; 0x3696 <free+0xe>
    3694:	8c c0       	rjmp	.+280    	; 0x37ae <free+0x126>
    3696:	fc 01       	movw	r30, r24
    3698:	32 97       	sbiw	r30, 0x02	; 2
    369a:	13 82       	std	Z+3, r1	; 0x03
    369c:	12 82       	std	Z+2, r1	; 0x02
    369e:	00 91 cf 05 	lds	r16, 0x05CF	; 0x8005cf <__flp>
    36a2:	10 91 d0 05 	lds	r17, 0x05D0	; 0x8005d0 <__flp+0x1>
    36a6:	01 15       	cp	r16, r1
    36a8:	11 05       	cpc	r17, r1
    36aa:	81 f4       	brne	.+32     	; 0x36cc <free+0x44>
    36ac:	20 81       	ld	r18, Z
    36ae:	31 81       	ldd	r19, Z+1	; 0x01
    36b0:	82 0f       	add	r24, r18
    36b2:	93 1f       	adc	r25, r19
    36b4:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    36b8:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    36bc:	28 17       	cp	r18, r24
    36be:	39 07       	cpc	r19, r25
    36c0:	79 f5       	brne	.+94     	; 0x3720 <free+0x98>
    36c2:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <__brkval+0x1>
    36c6:	e0 93 cd 05 	sts	0x05CD, r30	; 0x8005cd <__brkval>
    36ca:	71 c0       	rjmp	.+226    	; 0x37ae <free+0x126>
    36cc:	d8 01       	movw	r26, r16
    36ce:	40 e0       	ldi	r20, 0x00	; 0
    36d0:	50 e0       	ldi	r21, 0x00	; 0
    36d2:	ae 17       	cp	r26, r30
    36d4:	bf 07       	cpc	r27, r31
    36d6:	50 f4       	brcc	.+20     	; 0x36ec <free+0x64>
    36d8:	12 96       	adiw	r26, 0x02	; 2
    36da:	2d 91       	ld	r18, X+
    36dc:	3c 91       	ld	r19, X
    36de:	13 97       	sbiw	r26, 0x03	; 3
    36e0:	ad 01       	movw	r20, r26
    36e2:	21 15       	cp	r18, r1
    36e4:	31 05       	cpc	r19, r1
    36e6:	09 f1       	breq	.+66     	; 0x372a <free+0xa2>
    36e8:	d9 01       	movw	r26, r18
    36ea:	f3 cf       	rjmp	.-26     	; 0x36d2 <free+0x4a>
    36ec:	9d 01       	movw	r18, r26
    36ee:	da 01       	movw	r26, r20
    36f0:	33 83       	std	Z+3, r19	; 0x03
    36f2:	22 83       	std	Z+2, r18	; 0x02
    36f4:	60 81       	ld	r22, Z
    36f6:	71 81       	ldd	r23, Z+1	; 0x01
    36f8:	86 0f       	add	r24, r22
    36fa:	97 1f       	adc	r25, r23
    36fc:	82 17       	cp	r24, r18
    36fe:	93 07       	cpc	r25, r19
    3700:	69 f4       	brne	.+26     	; 0x371c <free+0x94>
    3702:	ec 01       	movw	r28, r24
    3704:	28 81       	ld	r18, Y
    3706:	39 81       	ldd	r19, Y+1	; 0x01
    3708:	26 0f       	add	r18, r22
    370a:	37 1f       	adc	r19, r23
    370c:	2e 5f       	subi	r18, 0xFE	; 254
    370e:	3f 4f       	sbci	r19, 0xFF	; 255
    3710:	31 83       	std	Z+1, r19	; 0x01
    3712:	20 83       	st	Z, r18
    3714:	8a 81       	ldd	r24, Y+2	; 0x02
    3716:	9b 81       	ldd	r25, Y+3	; 0x03
    3718:	93 83       	std	Z+3, r25	; 0x03
    371a:	82 83       	std	Z+2, r24	; 0x02
    371c:	45 2b       	or	r20, r21
    371e:	29 f4       	brne	.+10     	; 0x372a <free+0xa2>
    3720:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <__flp+0x1>
    3724:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <__flp>
    3728:	42 c0       	rjmp	.+132    	; 0x37ae <free+0x126>
    372a:	13 96       	adiw	r26, 0x03	; 3
    372c:	fc 93       	st	X, r31
    372e:	ee 93       	st	-X, r30
    3730:	12 97       	sbiw	r26, 0x02	; 2
    3732:	ed 01       	movw	r28, r26
    3734:	49 91       	ld	r20, Y+
    3736:	59 91       	ld	r21, Y+
    3738:	9e 01       	movw	r18, r28
    373a:	24 0f       	add	r18, r20
    373c:	35 1f       	adc	r19, r21
    373e:	e2 17       	cp	r30, r18
    3740:	f3 07       	cpc	r31, r19
    3742:	71 f4       	brne	.+28     	; 0x3760 <free+0xd8>
    3744:	80 81       	ld	r24, Z
    3746:	91 81       	ldd	r25, Z+1	; 0x01
    3748:	84 0f       	add	r24, r20
    374a:	95 1f       	adc	r25, r21
    374c:	02 96       	adiw	r24, 0x02	; 2
    374e:	11 96       	adiw	r26, 0x01	; 1
    3750:	9c 93       	st	X, r25
    3752:	8e 93       	st	-X, r24
    3754:	82 81       	ldd	r24, Z+2	; 0x02
    3756:	93 81       	ldd	r25, Z+3	; 0x03
    3758:	13 96       	adiw	r26, 0x03	; 3
    375a:	9c 93       	st	X, r25
    375c:	8e 93       	st	-X, r24
    375e:	12 97       	sbiw	r26, 0x02	; 2
    3760:	e0 e0       	ldi	r30, 0x00	; 0
    3762:	f0 e0       	ldi	r31, 0x00	; 0
    3764:	d8 01       	movw	r26, r16
    3766:	12 96       	adiw	r26, 0x02	; 2
    3768:	8d 91       	ld	r24, X+
    376a:	9c 91       	ld	r25, X
    376c:	13 97       	sbiw	r26, 0x03	; 3
    376e:	00 97       	sbiw	r24, 0x00	; 0
    3770:	19 f0       	breq	.+6      	; 0x3778 <free+0xf0>
    3772:	f8 01       	movw	r30, r16
    3774:	8c 01       	movw	r16, r24
    3776:	f6 cf       	rjmp	.-20     	; 0x3764 <free+0xdc>
    3778:	8d 91       	ld	r24, X+
    377a:	9c 91       	ld	r25, X
    377c:	98 01       	movw	r18, r16
    377e:	2e 5f       	subi	r18, 0xFE	; 254
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	82 0f       	add	r24, r18
    3784:	93 1f       	adc	r25, r19
    3786:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    378a:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    378e:	28 17       	cp	r18, r24
    3790:	39 07       	cpc	r19, r25
    3792:	69 f4       	brne	.+26     	; 0x37ae <free+0x126>
    3794:	30 97       	sbiw	r30, 0x00	; 0
    3796:	29 f4       	brne	.+10     	; 0x37a2 <free+0x11a>
    3798:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp+0x1>
    379c:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <__flp>
    37a0:	02 c0       	rjmp	.+4      	; 0x37a6 <free+0x11e>
    37a2:	13 82       	std	Z+3, r1	; 0x03
    37a4:	12 82       	std	Z+2, r1	; 0x02
    37a6:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <__brkval+0x1>
    37aa:	00 93 cd 05 	sts	0x05CD, r16	; 0x8005cd <__brkval>
    37ae:	df 91       	pop	r29
    37b0:	cf 91       	pop	r28
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <do_rand>:
    37b8:	8f 92       	push	r8
    37ba:	9f 92       	push	r9
    37bc:	af 92       	push	r10
    37be:	bf 92       	push	r11
    37c0:	cf 92       	push	r12
    37c2:	df 92       	push	r13
    37c4:	ef 92       	push	r14
    37c6:	ff 92       	push	r15
    37c8:	cf 93       	push	r28
    37ca:	df 93       	push	r29
    37cc:	ec 01       	movw	r28, r24
    37ce:	68 81       	ld	r22, Y
    37d0:	79 81       	ldd	r23, Y+1	; 0x01
    37d2:	8a 81       	ldd	r24, Y+2	; 0x02
    37d4:	9b 81       	ldd	r25, Y+3	; 0x03
    37d6:	61 15       	cp	r22, r1
    37d8:	71 05       	cpc	r23, r1
    37da:	81 05       	cpc	r24, r1
    37dc:	91 05       	cpc	r25, r1
    37de:	21 f4       	brne	.+8      	; 0x37e8 <do_rand+0x30>
    37e0:	64 e2       	ldi	r22, 0x24	; 36
    37e2:	79 ed       	ldi	r23, 0xD9	; 217
    37e4:	8b e5       	ldi	r24, 0x5B	; 91
    37e6:	97 e0       	ldi	r25, 0x07	; 7
    37e8:	2d e1       	ldi	r18, 0x1D	; 29
    37ea:	33 ef       	ldi	r19, 0xF3	; 243
    37ec:	41 e0       	ldi	r20, 0x01	; 1
    37ee:	50 e0       	ldi	r21, 0x00	; 0
    37f0:	0e 94 48 1c 	call	0x3890	; 0x3890 <__divmodsi4>
    37f4:	49 01       	movw	r8, r18
    37f6:	5a 01       	movw	r10, r20
    37f8:	9b 01       	movw	r18, r22
    37fa:	ac 01       	movw	r20, r24
    37fc:	a7 ea       	ldi	r26, 0xA7	; 167
    37fe:	b1 e4       	ldi	r27, 0x41	; 65
    3800:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__muluhisi3>
    3804:	6b 01       	movw	r12, r22
    3806:	7c 01       	movw	r14, r24
    3808:	ac ee       	ldi	r26, 0xEC	; 236
    380a:	b4 ef       	ldi	r27, 0xF4	; 244
    380c:	a5 01       	movw	r20, r10
    380e:	94 01       	movw	r18, r8
    3810:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__mulohisi3>
    3814:	dc 01       	movw	r26, r24
    3816:	cb 01       	movw	r24, r22
    3818:	8c 0d       	add	r24, r12
    381a:	9d 1d       	adc	r25, r13
    381c:	ae 1d       	adc	r26, r14
    381e:	bf 1d       	adc	r27, r15
    3820:	b7 ff       	sbrs	r27, 7
    3822:	03 c0       	rjmp	.+6      	; 0x382a <do_rand+0x72>
    3824:	01 97       	sbiw	r24, 0x01	; 1
    3826:	a1 09       	sbc	r26, r1
    3828:	b0 48       	sbci	r27, 0x80	; 128
    382a:	88 83       	st	Y, r24
    382c:	99 83       	std	Y+1, r25	; 0x01
    382e:	aa 83       	std	Y+2, r26	; 0x02
    3830:	bb 83       	std	Y+3, r27	; 0x03
    3832:	9f 77       	andi	r25, 0x7F	; 127
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	bf 90       	pop	r11
    3842:	af 90       	pop	r10
    3844:	9f 90       	pop	r9
    3846:	8f 90       	pop	r8
    3848:	08 95       	ret

0000384a <rand_r>:
    384a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <do_rand>
    384e:	08 95       	ret

00003850 <rand>:
    3850:	86 e0       	ldi	r24, 0x06	; 6
    3852:	91 e0       	ldi	r25, 0x01	; 1
    3854:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <do_rand>
    3858:	08 95       	ret

0000385a <srand>:
    385a:	a0 e0       	ldi	r26, 0x00	; 0
    385c:	b0 e0       	ldi	r27, 0x00	; 0
    385e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3862:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3866:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    386a:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    386e:	08 95       	ret

00003870 <memcpy>:
    3870:	fb 01       	movw	r30, r22
    3872:	dc 01       	movw	r26, r24
    3874:	02 c0       	rjmp	.+4      	; 0x387a <memcpy+0xa>
    3876:	01 90       	ld	r0, Z+
    3878:	0d 92       	st	X+, r0
    387a:	41 50       	subi	r20, 0x01	; 1
    387c:	50 40       	sbci	r21, 0x00	; 0
    387e:	d8 f7       	brcc	.-10     	; 0x3876 <memcpy+0x6>
    3880:	08 95       	ret

00003882 <memset>:
    3882:	dc 01       	movw	r26, r24
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <memset+0x6>
    3886:	6d 93       	st	X+, r22
    3888:	41 50       	subi	r20, 0x01	; 1
    388a:	50 40       	sbci	r21, 0x00	; 0
    388c:	e0 f7       	brcc	.-8      	; 0x3886 <memset+0x4>
    388e:	08 95       	ret

00003890 <__divmodsi4>:
    3890:	05 2e       	mov	r0, r21
    3892:	97 fb       	bst	r25, 7
    3894:	1e f4       	brtc	.+6      	; 0x389c <__divmodsi4+0xc>
    3896:	00 94       	com	r0
    3898:	0e 94 5f 1c 	call	0x38be	; 0x38be <__negsi2>
    389c:	57 fd       	sbrc	r21, 7
    389e:	07 d0       	rcall	.+14     	; 0x38ae <__divmodsi4_neg2>
    38a0:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <__udivmodsi4>
    38a4:	07 fc       	sbrc	r0, 7
    38a6:	03 d0       	rcall	.+6      	; 0x38ae <__divmodsi4_neg2>
    38a8:	4e f4       	brtc	.+18     	; 0x38bc <__divmodsi4_exit>
    38aa:	0c 94 5f 1c 	jmp	0x38be	; 0x38be <__negsi2>

000038ae <__divmodsi4_neg2>:
    38ae:	50 95       	com	r21
    38b0:	40 95       	com	r20
    38b2:	30 95       	com	r19
    38b4:	21 95       	neg	r18
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	4f 4f       	sbci	r20, 0xFF	; 255
    38ba:	5f 4f       	sbci	r21, 0xFF	; 255

000038bc <__divmodsi4_exit>:
    38bc:	08 95       	ret

000038be <__negsi2>:
    38be:	90 95       	com	r25
    38c0:	80 95       	com	r24
    38c2:	70 95       	com	r23
    38c4:	61 95       	neg	r22
    38c6:	7f 4f       	sbci	r23, 0xFF	; 255
    38c8:	8f 4f       	sbci	r24, 0xFF	; 255
    38ca:	9f 4f       	sbci	r25, 0xFF	; 255
    38cc:	08 95       	ret

000038ce <__muluhisi3>:
    38ce:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <__umulhisi3>
    38d2:	a5 9f       	mul	r26, r21
    38d4:	90 0d       	add	r25, r0
    38d6:	b4 9f       	mul	r27, r20
    38d8:	90 0d       	add	r25, r0
    38da:	a4 9f       	mul	r26, r20
    38dc:	80 0d       	add	r24, r0
    38de:	91 1d       	adc	r25, r1
    38e0:	11 24       	eor	r1, r1
    38e2:	08 95       	ret

000038e4 <__mulshisi3>:
    38e4:	b7 ff       	sbrs	r27, 7
    38e6:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <__muluhisi3>

000038ea <__mulohisi3>:
    38ea:	0e 94 67 1c 	call	0x38ce	; 0x38ce <__muluhisi3>
    38ee:	82 1b       	sub	r24, r18
    38f0:	93 0b       	sbc	r25, r19
    38f2:	08 95       	ret

000038f4 <__umulhisi3>:
    38f4:	a2 9f       	mul	r26, r18
    38f6:	b0 01       	movw	r22, r0
    38f8:	b3 9f       	mul	r27, r19
    38fa:	c0 01       	movw	r24, r0
    38fc:	a3 9f       	mul	r26, r19
    38fe:	70 0d       	add	r23, r0
    3900:	81 1d       	adc	r24, r1
    3902:	11 24       	eor	r1, r1
    3904:	91 1d       	adc	r25, r1
    3906:	b2 9f       	mul	r27, r18
    3908:	70 0d       	add	r23, r0
    390a:	81 1d       	adc	r24, r1
    390c:	11 24       	eor	r1, r1
    390e:	91 1d       	adc	r25, r1
    3910:	08 95       	ret

00003912 <_exit>:
    3912:	f8 94       	cli

00003914 <__stop_program>:
    3914:	ff cf       	rjmp	.-2      	; 0x3914 <__stop_program>
