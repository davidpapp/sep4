
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00003748  000037dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003748  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  0080014c  0080014c  00003828  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003828  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003858  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003898  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003756  00000000  00000000  00003d70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1c  00000000  00000000  000074c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003389  00000000  00000000  00007fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0000b36c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018cc  00000000  00000000  0000c678  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b6  00000000  00000000  0000df44  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  000107fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 f7 09 	jmp	0x13ee	; 0x13ee <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 35 04 	jmp	0x86a	; 0x86a <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 1c 0b 	jmp	0x1638	; 0x1638 <__vector_20>
      54:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <__vector_28>
      74:	0c 94 26 0c 	jmp	0x184c	; 0x184c <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	8a 02       	muls	r24, r26
      7e:	8e 02       	muls	r24, r30
      80:	95 02       	muls	r25, r21
      82:	99 02       	muls	r25, r25
      84:	a0 02       	muls	r26, r16
      86:	a4 02       	muls	r26, r20
      88:	ab 02       	muls	r26, r27
      8a:	af 02       	muls	r26, r31

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e4       	ldi	r30, 0x48	; 72
      a0:	f7 e3       	ldi	r31, 0x37	; 55
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ac e4       	ldi	r26, 0x4C	; 76
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 3d       	cpi	r26, 0xD1	; 209
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 78 03 	call	0x6f0	; 0x6f0 <main>
      c2:	0c 94 a2 1b 	jmp	0x3744	; 0x3744 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <move_player>:
		--next[1];
		break;
	}
	
	return next;
}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <move_player+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <move_player+0x8>
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9c 83       	std	Y+4, r25	; 0x04
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	6d 83       	std	Y+5, r22	; 0x05
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	81 f4       	brne	.+32     	; 0x10c <move_player+0x42>
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	02 c0       	rjmp	.+4      	; 0x102 <move_player+0x38>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	2a 95       	dec	r18
     104:	e2 f7       	brpl	.-8      	; 0xfe <move_player+0x34>
     106:	9a 83       	std	Y+2, r25	; 0x02
     108:	89 83       	std	Y+1, r24	; 0x01
     10a:	12 c0       	rjmp	.+36     	; 0x130 <move_player+0x66>
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	31 09       	sbc	r19, r1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	02 c0       	rjmp	.+4      	; 0x128 <move_player+0x5e>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	2a 95       	dec	r18
     12a:	e2 f7       	brpl	.-8      	; 0x124 <move_player+0x5a>
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	4a e0       	ldi	r20, 0x0A	; 10
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <xQueueGenericReceive>
     146:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     14a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	82 27       	eor	r24, r18
     154:	93 27       	eor	r25, r19
     156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
     15e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     162:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <game_task>:
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	00 d0       	rcall	.+0      	; 0x18a <game_task+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
     192:	86 e2       	ldi	r24, 0x26	; 38
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	80 74       	andi	r24, 0x40	; 64
     1a0:	99 27       	eor	r25, r25
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f5       	brne	.+88     	; 0x1fe <game_task+0x7a>
     1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1ae:	18 16       	cp	r1, r24
     1b0:	19 06       	cpc	r1, r25
     1b2:	2c f5       	brge	.+74     	; 0x1fe <game_task+0x7a>
     1b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	4a e0       	ldi	r20, 0x0A	; 10
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <xQueueGenericReceive>
     1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
     1dc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1e0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8a e0       	ldi	r24, 0x0A	; 10
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     1fc:	34 c0       	rjmp	.+104    	; 0x266 <game_task+0xe2>
     1fe:	86 e2       	ldi	r24, 0x26	; 38
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	51 f5       	brne	.+84     	; 0x266 <game_task+0xe2>
     212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     21a:	08 97       	sbiw	r24, 0x08	; 8
     21c:	24 f5       	brge	.+72     	; 0x266 <game_task+0xe2>
     21e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     222:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <xQueueGenericReceive>
     234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
     246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 89 13 	call	0x2712	; 0x2712 <vTaskDelay>
     26e:	91 cf       	rjmp	.-222    	; 0x192 <game_task+0xe>

00000270 <bounce>:
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <bounce+0x6>
     276:	00 d0       	rcall	.+0      	; 0x278 <bounce+0x8>
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	0e 94 41 1b 	call	0x3682	; 0x3682 <rand>
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	b9 01       	movw	r22, r18
     28c:	0e 94 78 19 	call	0x32f0	; 0x32f0 <__divmodhi4>
     290:	89 83       	std	Y+1, r24	; 0x01
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	8d 5f       	subi	r24, 0xFD	; 253
     296:	89 83       	std	Y+1, r24	; 0x01
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	9b 81       	ldd	r25, Y+3	; 0x03
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	99 81       	ldd	r25, Y+1	; 0x01
     2a2:	89 0f       	add	r24, r25
     2a4:	89 83       	std	Y+1, r24	; 0x01
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	87 70       	andi	r24, 0x07	; 7
     2aa:	89 83       	std	Y+1, r24	; 0x01
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	9b 81       	ldd	r25, Y+3	; 0x03
     2b0:	29 81       	ldd	r18, Y+1	; 0x01
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <move_ball>:
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <move_ball+0x6>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <move_ball+0x8>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <move_ball+0xa>
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	9c 83       	std	Y+4, r25	; 0x04
     2d6:	8b 83       	std	Y+3, r24	; 0x03
     2d8:	7e 83       	std	Y+6, r23	; 0x06
     2da:	6d 83       	std	Y+5, r22	; 0x05
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <move_ball+0x2e>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <move_ball+0x2a>
     2f8:	9a 83       	std	Y+2, r25	; 0x02
     2fa:	89 83       	std	Y+1, r24	; 0x01
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	80 95       	com	r24
     302:	90 95       	com	r25
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	a9 f5       	brne	.+106    	; 0x37e <move_ball+0xb8>
     314:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     318:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	4a e0       	ldi	r20, 0x0A	; 10
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <xQueueGenericReceive>
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	9c 81       	ldd	r25, Y+4	; 0x04
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2b 81       	ldd	r18, Y+3	; 0x03
     338:	3c 81       	ldd	r19, Y+4	; 0x04
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	24 5f       	subi	r18, 0xF4	; 244
     348:	3e 4f       	sbci	r19, 0xFE	; 254
     34a:	f9 01       	movw	r30, r18
     34c:	40 81       	ld	r20, Z
     34e:	51 81       	ldd	r21, Z+1	; 0x01
     350:	29 81       	ldd	r18, Y+1	; 0x01
     352:	3a 81       	ldd	r19, Y+2	; 0x02
     354:	24 23       	and	r18, r20
     356:	35 23       	and	r19, r21
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	84 5f       	subi	r24, 0xF4	; 244
     35e:	9e 4f       	sbci	r25, 0xFE	; 254
     360:	fc 01       	movw	r30, r24
     362:	31 83       	std	Z+1, r19	; 0x01
     364:	20 83       	st	Z, r18
     366:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     36a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
     37c:	1e c0       	rjmp	.+60     	; 0x3ba <move_ball+0xf4>
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2b 81       	ldd	r18, Y+3	; 0x03
     38c:	3c 81       	ldd	r19, Y+4	; 0x04
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	22 2f       	mov	r18, r18
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	24 5f       	subi	r18, 0xF4	; 244
     39c:	3e 4f       	sbci	r19, 0xFE	; 254
     39e:	f9 01       	movw	r30, r18
     3a0:	40 81       	ld	r20, Z
     3a2:	51 81       	ldd	r21, Z+1	; 0x01
     3a4:	29 81       	ldd	r18, Y+1	; 0x01
     3a6:	3a 81       	ldd	r19, Y+2	; 0x02
     3a8:	24 23       	and	r18, r20
     3aa:	35 23       	and	r19, r21
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	84 5f       	subi	r24, 0xF4	; 244
     3b2:	9e 4f       	sbci	r25, 0xFE	; 254
     3b4:	fc 01       	movw	r30, r24
     3b6:	31 83       	std	Z+1, r19	; 0x01
     3b8:	20 83       	st	Z, r18
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	9e 81       	ldd	r25, Y+6	; 0x06
     3be:	fc 01       	movw	r30, r24
     3c0:	20 81       	ld	r18, Z
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	9c 81       	ldd	r25, Y+4	; 0x04
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	2d 81       	ldd	r18, Y+5	; 0x05
     3d2:	3e 81       	ldd	r19, Y+6	; 0x06
     3d4:	f9 01       	movw	r30, r18
     3d6:	21 81       	ldd	r18, Z+1	; 0x01
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	9c 81       	ldd	r25, Y+4	; 0x04
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	28 2f       	mov	r18, r24
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <move_ball+0x12e>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	2a 95       	dec	r18
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <move_ball+0x12a>
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	9c 81       	ldd	r25, Y+4	; 0x04
     400:	fc 01       	movw	r30, r24
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	a9 f5       	brne	.+106    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
     408:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     40c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	4a e0       	ldi	r20, 0x0A	; 10
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <xQueueGenericReceive>
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	9c 81       	ldd	r25, Y+4	; 0x04
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2b 81       	ldd	r18, Y+3	; 0x03
     42c:	3c 81       	ldd	r19, Y+4	; 0x04
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	22 2f       	mov	r18, r18
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	24 5f       	subi	r18, 0xF4	; 244
     43c:	3e 4f       	sbci	r19, 0xFE	; 254
     43e:	f9 01       	movw	r30, r18
     440:	40 81       	ld	r20, Z
     442:	51 81       	ldd	r21, Z+1	; 0x01
     444:	29 81       	ldd	r18, Y+1	; 0x01
     446:	3a 81       	ldd	r19, Y+2	; 0x02
     448:	24 2b       	or	r18, r20
     44a:	35 2b       	or	r19, r21
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	84 5f       	subi	r24, 0xF4	; 244
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	fc 01       	movw	r30, r24
     456:	31 83       	std	Z+1, r19	; 0x01
     458:	20 83       	st	Z, r18
     45a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     45e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
     470:	1e c0       	rjmp	.+60     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	fc 01       	movw	r30, r24
     478:	80 81       	ld	r24, Z
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	2b 81       	ldd	r18, Y+3	; 0x03
     480:	3c 81       	ldd	r19, Y+4	; 0x04
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	22 2f       	mov	r18, r18
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	22 0f       	add	r18, r18
     48c:	33 1f       	adc	r19, r19
     48e:	24 5f       	subi	r18, 0xF4	; 244
     490:	3e 4f       	sbci	r19, 0xFE	; 254
     492:	f9 01       	movw	r30, r18
     494:	40 81       	ld	r20, Z
     496:	51 81       	ldd	r21, Z+1	; 0x01
     498:	29 81       	ldd	r18, Y+1	; 0x01
     49a:	3a 81       	ldd	r19, Y+2	; 0x02
     49c:	24 2b       	or	r18, r20
     49e:	35 2b       	or	r19, r21
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	84 5f       	subi	r24, 0xF4	; 244
     4a6:	9e 4f       	sbci	r25, 0xFE	; 254
     4a8:	fc 01       	movw	r30, r24
     4aa:	31 83       	std	Z+1, r19	; 0x01
     4ac:	20 83       	st	Z, r18
     4ae:	26 96       	adiw	r28, 0x06	; 6
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <ball_task>:

void ball_task(void *pvParameters)
{
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	cd b7       	in	r28, 0x3d	; 61
     4c6:	de b7       	in	r29, 0x3e	; 62
     4c8:	27 97       	sbiw	r28, 0x07	; 7
     4ca:	0f b6       	in	r0, 0x3f	; 63
     4cc:	f8 94       	cli
     4ce:	de bf       	out	0x3e, r29	; 62
     4d0:	0f be       	out	0x3f, r0	; 63
     4d2:	cd bf       	out	0x3d, r28	; 61
     4d4:	9f 83       	std	Y+7, r25	; 0x07
     4d6:	8e 83       	std	Y+6, r24	; 0x06
	(void) pvParameters;

	uint8_t pos[2] = {7, 5};
     4d8:	87 e0       	ldi	r24, 0x07	; 7
     4da:	89 83       	std	Y+1, r24	; 0x01
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t direction = 0;
     4e0:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t *next;
		next = (uint8_t *)malloc(sizeof(uint8_t)*2);
		next =  calc_next(pos, &direction);
		*/

		uint8_t next[2] = {pos[0],pos[1]};
     4e2:	89 81       	ldd	r24, Y+1	; 0x01
     4e4:	8c 83       	std	Y+4, r24	; 0x04
     4e6:	8a 81       	ldd	r24, Y+2	; 0x02
     4e8:	8d 83       	std	Y+5, r24	; 0x05
		switch (direction)
     4ea:	8b 81       	ldd	r24, Y+3	; 0x03
     4ec:	88 2f       	mov	r24, r24
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	09 2e       	mov	r0, r25
     4f2:	00 0c       	add	r0, r0
     4f4:	aa 0b       	sbc	r26, r26
     4f6:	bb 0b       	sbc	r27, r27
     4f8:	40 e0       	ldi	r20, 0x00	; 0
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	27 e0       	ldi	r18, 0x07	; 7
     4fe:	30 e0       	ldi	r19, 0x00	; 0
     500:	84 1b       	sub	r24, r20
     502:	95 0b       	sbc	r25, r21
     504:	28 17       	cp	r18, r24
     506:	39 07       	cpc	r19, r25
     508:	88 f1       	brcs	.+98     	; 0x56c <ball_task+0xac>
     50a:	82 5c       	subi	r24, 0xC2	; 194
     50c:	9f 4f       	sbci	r25, 0xFF	; 255
     50e:	fc 01       	movw	r30, r24
     510:	0c 94 ae 19 	jmp	0x335c	; 0x335c <__tablejump2__>
		{
			case 0:
			--next[1];
     514:	8d 81       	ldd	r24, Y+5	; 0x05
     516:	81 50       	subi	r24, 0x01	; 1
     518:	8d 83       	std	Y+5, r24	; 0x05
			break;
     51a:	28 c0       	rjmp	.+80     	; 0x56c <ball_task+0xac>
			case 1:
			++next[0];
     51c:	8c 81       	ldd	r24, Y+4	; 0x04
     51e:	8f 5f       	subi	r24, 0xFF	; 255
     520:	8c 83       	std	Y+4, r24	; 0x04
			--next[1];
     522:	8d 81       	ldd	r24, Y+5	; 0x05
     524:	81 50       	subi	r24, 0x01	; 1
     526:	8d 83       	std	Y+5, r24	; 0x05
			break;
     528:	21 c0       	rjmp	.+66     	; 0x56c <ball_task+0xac>
			case 2:
			++next[0];
     52a:	8c 81       	ldd	r24, Y+4	; 0x04
     52c:	8f 5f       	subi	r24, 0xFF	; 255
     52e:	8c 83       	std	Y+4, r24	; 0x04
			break;
     530:	1d c0       	rjmp	.+58     	; 0x56c <ball_task+0xac>
			case 3:
			++next[0];
     532:	8c 81       	ldd	r24, Y+4	; 0x04
     534:	8f 5f       	subi	r24, 0xFF	; 255
     536:	8c 83       	std	Y+4, r24	; 0x04
			++next[1];
     538:	8d 81       	ldd	r24, Y+5	; 0x05
     53a:	8f 5f       	subi	r24, 0xFF	; 255
     53c:	8d 83       	std	Y+5, r24	; 0x05
			break;
     53e:	16 c0       	rjmp	.+44     	; 0x56c <ball_task+0xac>
			case 4:
			++next[1];
     540:	8d 81       	ldd	r24, Y+5	; 0x05
     542:	8f 5f       	subi	r24, 0xFF	; 255
     544:	8d 83       	std	Y+5, r24	; 0x05
			break;
     546:	12 c0       	rjmp	.+36     	; 0x56c <ball_task+0xac>
			case 5:
			--next[0];
     548:	8c 81       	ldd	r24, Y+4	; 0x04
     54a:	81 50       	subi	r24, 0x01	; 1
     54c:	8c 83       	std	Y+4, r24	; 0x04
			++next[1];
     54e:	8d 81       	ldd	r24, Y+5	; 0x05
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	8d 83       	std	Y+5, r24	; 0x05
			break;
     554:	0b c0       	rjmp	.+22     	; 0x56c <ball_task+0xac>
			case 6:
			--next[0];
     556:	8c 81       	ldd	r24, Y+4	; 0x04
     558:	81 50       	subi	r24, 0x01	; 1
     55a:	8c 83       	std	Y+4, r24	; 0x04
			break;
     55c:	07 c0       	rjmp	.+14     	; 0x56c <ball_task+0xac>
			case 7:
			--next[0];
     55e:	8c 81       	ldd	r24, Y+4	; 0x04
     560:	81 50       	subi	r24, 0x01	; 1
     562:	8c 83       	std	Y+4, r24	; 0x04
			--next[1];
     564:	8d 81       	ldd	r24, Y+5	; 0x05
     566:	81 50       	subi	r24, 0x01	; 1
     568:	8d 83       	std	Y+5, r24	; 0x05
			break;
     56a:	00 00       	nop
		}
		
		if (next[0] > 12 || next[1] > 9){
     56c:	8c 81       	ldd	r24, Y+4	; 0x04
     56e:	8d 30       	cpi	r24, 0x0D	; 13
     570:	18 f4       	brcc	.+6      	; 0x578 <ball_task+0xb8>
     572:	8d 81       	ldd	r24, Y+5	; 0x05
     574:	8a 30       	cpi	r24, 0x0A	; 10
     576:	28 f0       	brcs	.+10     	; 0x582 <ball_task+0xc2>
			bounce(&direction);
     578:	ce 01       	movw	r24, r28
     57a:	03 96       	adiw	r24, 0x03	; 3
     57c:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     580:	24 c0       	rjmp	.+72     	; 0x5ca <ball_task+0x10a>
		}
		else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     582:	8c 81       	ldd	r24, Y+4	; 0x04
     584:	88 23       	and	r24, r24
     586:	d1 f4       	brne	.+52     	; 0x5bc <ball_task+0xfc>
     588:	8d 81       	ldd	r24, Y+5	; 0x05
     58a:	28 2f       	mov	r18, r24
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     592:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     596:	28 17       	cp	r18, r24
     598:	39 07       	cpc	r19, r25
     59a:	59 f0       	breq	.+22     	; 0x5b2 <ball_task+0xf2>
     59c:	8d 81       	ldd	r24, Y+5	; 0x05
     59e:	28 2f       	mov	r18, r24
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     5a6:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	28 17       	cp	r18, r24
     5ae:	39 07       	cpc	r19, r25
     5b0:	29 f4       	brne	.+10     	; 0x5bc <ball_task+0xfc>
			bounce(&direction);
     5b2:	ce 01       	movw	r24, r28
     5b4:	03 96       	adiw	r24, 0x03	; 3
     5b6:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     5ba:	07 c0       	rjmp	.+14     	; 0x5ca <ball_task+0x10a>
		}
		else{
			move_ball(pos, next);
     5bc:	ce 01       	movw	r24, r28
     5be:	04 96       	adiw	r24, 0x04	; 4
     5c0:	bc 01       	movw	r22, r24
     5c2:	ce 01       	movw	r24, r28
     5c4:	01 96       	adiw	r24, 0x01	; 1
     5c6:	0e 94 63 01 	call	0x2c6	; 0x2c6 <move_ball>
		}
		vTaskDelay(60);
     5ca:	8c e3       	ldi	r24, 0x3C	; 60
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 89 13 	call	0x2712	; 0x2712 <vTaskDelay>
	}
     5d2:	87 cf       	rjmp	.-242    	; 0x4e2 <ball_task+0x22>

000005d4 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	cd b7       	in	r28, 0x3d	; 61
     5da:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     5dc:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     5e0:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     5e4:	89 2b       	or	r24, r25
     5e6:	49 f4       	brne	.+18     	; 0x5fa <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     5e8:	8b e2       	ldi	r24, 0x2B	; 43
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	2b e2       	ldi	r18, 0x2B	; 43
     5ee:	30 e0       	ldi	r19, 0x00	; 0
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	24 60       	ori	r18, 0x04	; 4
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     5fa:	8b e2       	ldi	r24, 0x2B	; 43
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	2b e2       	ldi	r18, 0x2B	; 43
     600:	30 e0       	ldi	r19, 0x00	; 0
     602:	f9 01       	movw	r30, r18
     604:	20 81       	ld	r18, Z
     606:	20 62       	ori	r18, 0x20	; 32
     608:	fc 01       	movw	r30, r24
     60a:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     60c:	8b e2       	ldi	r24, 0x2B	; 43
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	2b e2       	ldi	r18, 0x2B	; 43
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	f9 01       	movw	r30, r18
     616:	20 81       	ld	r18, Z
     618:	2f 7d       	andi	r18, 0xDF	; 223
     61a:	fc 01       	movw	r30, r24
     61c:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     61e:	8b e2       	ldi	r24, 0x2B	; 43
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	2b e2       	ldi	r18, 0x2B	; 43
     624:	30 e0       	ldi	r19, 0x00	; 0
     626:	f9 01       	movw	r30, r18
     628:	20 81       	ld	r18, Z
     62a:	20 61       	ori	r18, 0x10	; 16
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     630:	8b e2       	ldi	r24, 0x2B	; 43
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	2b e2       	ldi	r18, 0x2B	; 43
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	f9 01       	movw	r30, r18
     63a:	20 81       	ld	r18, Z
     63c:	2f 7e       	andi	r18, 0xEF	; 239
     63e:	fc 01       	movw	r30, r24
     640:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     642:	82 e2       	ldi	r24, 0x22	; 34
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     64a:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     64e:	22 0f       	add	r18, r18
     650:	33 1f       	adc	r19, r19
     652:	24 5f       	subi	r18, 0xF4	; 244
     654:	3e 4f       	sbci	r19, 0xFE	; 254
     656:	f9 01       	movw	r30, r18
     658:	20 81       	ld	r18, Z
     65a:	31 81       	ldd	r19, Z+1	; 0x01
     65c:	20 95       	com	r18
     65e:	fc 01       	movw	r30, r24
     660:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     662:	85 e2       	ldi	r24, 0x25	; 37
     664:	90 e0       	ldi	r25, 0x00	; 0
     666:	25 e2       	ldi	r18, 0x25	; 37
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	f9 01       	movw	r30, r18
     66c:	20 81       	ld	r18, Z
     66e:	23 60       	ori	r18, 0x03	; 3
     670:	fc 01       	movw	r30, r24
     672:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     674:	85 e2       	ldi	r24, 0x25	; 37
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	25 e2       	ldi	r18, 0x25	; 37
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	f9 01       	movw	r30, r18
     67e:	40 81       	ld	r20, Z
     680:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     684:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	24 5f       	subi	r18, 0xF4	; 244
     68e:	3e 4f       	sbci	r19, 0xFE	; 254
     690:	f9 01       	movw	r30, r18
     692:	20 81       	ld	r18, Z
     694:	31 81       	ldd	r19, Z+1	; 0x01
     696:	23 2f       	mov	r18, r19
     698:	33 27       	eor	r19, r19
     69a:	23 70       	andi	r18, 0x03	; 3
     69c:	20 95       	com	r18
     69e:	24 23       	and	r18, r20
     6a0:	fc 01       	movw	r30, r24
     6a2:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     6a4:	8b e2       	ldi	r24, 0x2B	; 43
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	2b e2       	ldi	r18, 0x2B	; 43
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	2b 7f       	andi	r18, 0xFB	; 251
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18

	++col_index;
     6b6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     6ba:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <col_index+0x1>
     6c4:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <col_index>
	if (col_index > 13){
     6c8:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     6cc:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     6d0:	0e 97       	sbiw	r24, 0x0e	; 14
     6d2:	24 f0       	brlt	.+8      	; 0x6dc <handle_display+0x108>
		col_index = 0;
     6d4:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <col_index+0x1>
     6d8:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <col_index>
	}

}
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	08 95       	ret

000006e2 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     6e2:	cf 93       	push	r28
     6e4:	df 93       	push	r29
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
	//
}
     6ea:	df 91       	pop	r29
     6ec:	cf 91       	pop	r28
     6ee:	08 95       	ret

000006f0 <main>:

//-----------------------------------------
int main(void)
{
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	cf 93       	push	r28
     6f8:	df 93       	push	r29
     6fa:	cd b7       	in	r28, 0x3d	; 61
     6fc:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     6fe:	0e 94 6b 04 	call	0x8d6	; 0x8d6 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     702:	8b e2       	ldi	r24, 0x2B	; 43
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	2b e2       	ldi	r18, 0x2B	; 43
     708:	30 e0       	ldi	r19, 0x00	; 0
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	2f 7b       	andi	r18, 0xBF	; 191
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     714:	8e e1       	ldi	r24, 0x1E	; 30
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	61 e0       	ldi	r22, 0x01	; 1
     71a:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <xQueueGenericCreate>
     71e:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     722:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     726:	81 e0       	ldi	r24, 0x01	; 1
     728:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <xQueueCreateMutex>
     72c:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_col_0_mutex+0x1>
     730:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	0e 94 cb 0d 	call	0x1b96	; 0x1b96 <xQueueCreateMutex>
     73a:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_player_position_mutex+0x1>
     73e:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     742:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     746:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     74a:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <init_com>
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     74e:	e1 2c       	mov	r14, r1
     750:	f1 2c       	mov	r15, r1
     752:	03 e0       	ldi	r16, 0x03	; 3
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	45 e5       	ldi	r20, 0x55	; 85
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	6c e3       	ldi	r22, 0x3C	; 60
     75e:	71 e0       	ldi	r23, 0x01	; 1
     760:	82 ec       	ldi	r24, 0xC2	; 194
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     768:	e1 2c       	mov	r14, r1
     76a:	f1 2c       	mov	r15, r1
     76c:	04 e0       	ldi	r16, 0x04	; 4
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	30 e0       	ldi	r19, 0x00	; 0
     772:	45 e5       	ldi	r20, 0x55	; 85
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	61 e4       	ldi	r22, 0x41	; 65
     778:	71 e0       	ldi	r23, 0x01	; 1
     77a:	80 e6       	ldi	r24, 0x60	; 96
     77c:	92 e0       	ldi	r25, 0x02	; 2
     77e:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     782:	8a ee       	ldi	r24, 0xEA	; 234
     784:	92 e0       	ldi	r25, 0x02	; 2
     786:	0e 94 03 04 	call	0x806	; 0x806 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     78a:	0e 94 ab 13 	call	0x2756	; 0x2756 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     78e:	ff cf       	rjmp	.-2      	; 0x78e <main+0x9e>

00000790 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	00 d0       	rcall	.+0      	; 0x796 <_com_call_back+0x6>
     796:	00 d0       	rcall	.+0      	; 0x798 <_com_call_back+0x8>
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	9b 83       	std	Y+3, r25	; 0x03
     79e:	8a 83       	std	Y+2, r24	; 0x02
     7a0:	6c 83       	std	Y+4, r22	; 0x04
     7a2:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     7a6:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     7aa:	89 2b       	or	r24, r25
     7ac:	99 f0       	breq	.+38     	; 0x7d4 <_com_call_back+0x44>
     7ae:	19 82       	std	Y+1, r1	; 0x01
     7b0:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     7b4:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     7b8:	be 01       	movw	r22, r28
     7ba:	6c 5f       	subi	r22, 0xFC	; 252
     7bc:	7f 4f       	sbci	r23, 0xFF	; 255
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	ae 01       	movw	r20, r28
     7c2:	4f 5f       	subi	r20, 0xFF	; 255
     7c4:	5f 4f       	sbci	r21, 0xFF	; 255
     7c6:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <xQueueGenericSendFromISR>
     7ca:	89 81       	ldd	r24, Y+1	; 0x01
     7cc:	88 23       	and	r24, r24
     7ce:	11 f0       	breq	.+4      	; 0x7d4 <_com_call_back+0x44>
     7d0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
     7d4:	0f 90       	pop	r0
     7d6:	0f 90       	pop	r0
     7d8:	0f 90       	pop	r0
     7da:	0f 90       	pop	r0
     7dc:	df 91       	pop	r29
     7de:	cf 91       	pop	r28
     7e0:	08 95       	ret

000007e2 <init_com>:
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	00 d0       	rcall	.+0      	; 0x7e8 <init_com+0x6>
     7e8:	cd b7       	in	r28, 0x3d	; 61
     7ea:	de b7       	in	r29, 0x3e	; 62
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	89 81       	ldd	r24, Y+1	; 0x01
     7f2:	9a 81       	ldd	r25, Y+2	; 0x02
     7f4:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_x_rx_com_queue+0x1>
     7f8:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_x_rx_com_queue>
     7fc:	0f 90       	pop	r0
     7fe:	0f 90       	pop	r0
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	08 95       	ret

00000806 <init_display_timer>:
     806:	cf 93       	push	r28
     808:	df 93       	push	r29
     80a:	00 d0       	rcall	.+0      	; 0x80c <init_display_timer+0x6>
     80c:	cd b7       	in	r28, 0x3d	; 61
     80e:	de b7       	in	r29, 0x3e	; 62
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01
     814:	89 81       	ldd	r24, Y+1	; 0x01
     816:	9a 81       	ldd	r25, Y+2	; 0x02
     818:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <cb_ptr+0x1>
     81c:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cb_ptr>
     820:	87 e4       	ldi	r24, 0x47	; 71
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	2a e0       	ldi	r18, 0x0A	; 10
     826:	fc 01       	movw	r30, r24
     828:	20 83       	st	Z, r18
     82a:	84 e4       	ldi	r24, 0x44	; 68
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	24 e4       	ldi	r18, 0x44	; 68
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	f9 01       	movw	r30, r18
     834:	20 81       	ld	r18, Z
     836:	22 60       	ori	r18, 0x02	; 2
     838:	fc 01       	movw	r30, r24
     83a:	20 83       	st	Z, r18
     83c:	8e e6       	ldi	r24, 0x6E	; 110
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	2e e6       	ldi	r18, 0x6E	; 110
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	22 60       	ori	r18, 0x02	; 2
     84a:	fc 01       	movw	r30, r24
     84c:	20 83       	st	Z, r18
     84e:	85 e4       	ldi	r24, 0x45	; 69
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	25 e4       	ldi	r18, 0x45	; 69
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	f9 01       	movw	r30, r18
     858:	20 81       	ld	r18, Z
     85a:	25 60       	ori	r18, 0x05	; 5
     85c:	fc 01       	movw	r30, r24
     85e:	20 83       	st	Z, r18
     860:	0f 90       	pop	r0
     862:	0f 90       	pop	r0
     864:	df 91       	pop	r29
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <__vector_16>:
     86a:	1f 92       	push	r1
     86c:	0f 92       	push	r0
     86e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     872:	0f 92       	push	r0
     874:	11 24       	eor	r1, r1
     876:	2f 93       	push	r18
     878:	3f 93       	push	r19
     87a:	4f 93       	push	r20
     87c:	5f 93       	push	r21
     87e:	6f 93       	push	r22
     880:	7f 93       	push	r23
     882:	8f 93       	push	r24
     884:	9f 93       	push	r25
     886:	af 93       	push	r26
     888:	bf 93       	push	r27
     88a:	ef 93       	push	r30
     88c:	ff 93       	push	r31
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	cd b7       	in	r28, 0x3d	; 61
     894:	de b7       	in	r29, 0x3e	; 62
     896:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     89a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     89e:	89 2b       	or	r24, r25
     8a0:	31 f0       	breq	.+12     	; 0x8ae <__vector_16+0x44>
     8a2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     8a6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     8aa:	fc 01       	movw	r30, r24
     8ac:	09 95       	icall
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	ff 91       	pop	r31
     8b4:	ef 91       	pop	r30
     8b6:	bf 91       	pop	r27
     8b8:	af 91       	pop	r26
     8ba:	9f 91       	pop	r25
     8bc:	8f 91       	pop	r24
     8be:	7f 91       	pop	r23
     8c0:	6f 91       	pop	r22
     8c2:	5f 91       	pop	r21
     8c4:	4f 91       	pop	r20
     8c6:	3f 91       	pop	r19
     8c8:	2f 91       	pop	r18
     8ca:	0f 90       	pop	r0
     8cc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     8d0:	0f 90       	pop	r0
     8d2:	1f 90       	pop	r1
     8d4:	18 95       	reti

000008d6 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     8d6:	8f 92       	push	r8
     8d8:	9f 92       	push	r9
     8da:	af 92       	push	r10
     8dc:	bf 92       	push	r11
     8de:	cf 92       	push	r12
     8e0:	df 92       	push	r13
     8e2:	ef 92       	push	r14
     8e4:	0f 93       	push	r16
     8e6:	cf 93       	push	r28
     8e8:	df 93       	push	r29
     8ea:	cd b7       	in	r28, 0x3d	; 61
     8ec:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     8ee:	8a e5       	ldi	r24, 0x5A	; 90
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	0e 94 fd 04 	call	0x9fa	; 0x9fa <buffer_init>
	buffer_init(&_com_tx_buffer);
     8f6:	8d e6       	ldi	r24, 0x6D	; 109
     8f8:	91 e0       	ldi	r25, 0x01	; 1
     8fa:	0e 94 fd 04 	call	0x9fa	; 0x9fa <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     8fe:	0f 2e       	mov	r0, r31
     900:	f8 ec       	ldi	r31, 0xC8	; 200
     902:	8f 2e       	mov	r8, r31
     904:	f3 e0       	ldi	r31, 0x03	; 3
     906:	9f 2e       	mov	r9, r31
     908:	f0 2d       	mov	r31, r0
     90a:	0f 2e       	mov	r0, r31
     90c:	fd e6       	ldi	r31, 0x6D	; 109
     90e:	af 2e       	mov	r10, r31
     910:	f1 e0       	ldi	r31, 0x01	; 1
     912:	bf 2e       	mov	r11, r31
     914:	f0 2d       	mov	r31, r0
     916:	0f 2e       	mov	r0, r31
     918:	fa e5       	ldi	r31, 0x5A	; 90
     91a:	cf 2e       	mov	r12, r31
     91c:	f1 e0       	ldi	r31, 0x01	; 1
     91e:	df 2e       	mov	r13, r31
     920:	f0 2d       	mov	r31, r0
     922:	e1 2c       	mov	r14, r1
     924:	00 e0       	ldi	r16, 0x00	; 0
     926:	23 e0       	ldi	r18, 0x03	; 3
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	52 ec       	ldi	r21, 0xC2	; 194
     92c:	61 e0       	ldi	r22, 0x01	; 1
     92e:	70 e0       	ldi	r23, 0x00	; 0
     930:	80 e0       	ldi	r24, 0x00	; 0
     932:	0e 94 5b 0a 	call	0x14b6	; 0x14b6 <serial_new_instance>
     936:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_com_serial_instance+0x1>
     93a:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     93e:	88 e2       	ldi	r24, 0x28	; 40
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	28 e2       	ldi	r18, 0x28	; 40
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	f9 01       	movw	r30, r18
     948:	20 81       	ld	r18, Z
     94a:	23 6c       	ori	r18, 0xC3	; 195
     94c:	fc 01       	movw	r30, r24
     94e:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     950:	8b e2       	ldi	r24, 0x2B	; 43
     952:	90 e0       	ldi	r25, 0x00	; 0
     954:	2b e2       	ldi	r18, 0x2B	; 43
     956:	30 e0       	ldi	r19, 0x00	; 0
     958:	f9 01       	movw	r30, r18
     95a:	20 81       	ld	r18, Z
     95c:	28 60       	ori	r18, 0x08	; 8
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     962:	8a e2       	ldi	r24, 0x2A	; 42
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	2a e2       	ldi	r18, 0x2A	; 42
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	f9 01       	movw	r30, r18
     96c:	20 81       	ld	r18, Z
     96e:	24 67       	ori	r18, 0x74	; 116
     970:	fc 01       	movw	r30, r24
     972:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     974:	8b e2       	ldi	r24, 0x2B	; 43
     976:	90 e0       	ldi	r25, 0x00	; 0
     978:	2b e2       	ldi	r18, 0x2B	; 43
     97a:	30 e0       	ldi	r19, 0x00	; 0
     97c:	f9 01       	movw	r30, r18
     97e:	20 81       	ld	r18, Z
     980:	20 64       	ori	r18, 0x40	; 64
     982:	fc 01       	movw	r30, r24
     984:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     986:	81 e2       	ldi	r24, 0x21	; 33
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	fc 01       	movw	r30, r24
     98c:	80 81       	ld	r24, Z
     98e:	81 e2       	ldi	r24, 0x21	; 33
     990:	90 e0       	ldi	r25, 0x00	; 0
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	fc 01       	movw	r30, r24
     996:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     998:	84 e2       	ldi	r24, 0x24	; 36
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	24 e2       	ldi	r18, 0x24	; 36
     99e:	30 e0       	ldi	r19, 0x00	; 0
     9a0:	f9 01       	movw	r30, r18
     9a2:	20 81       	ld	r18, Z
     9a4:	23 60       	ori	r18, 0x03	; 3
     9a6:	fc 01       	movw	r30, r24
     9a8:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     9aa:	84 e2       	ldi	r24, 0x24	; 36
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	24 e2       	ldi	r18, 0x24	; 36
     9b0:	30 e0       	ldi	r19, 0x00	; 0
     9b2:	f9 01       	movw	r30, r18
     9b4:	20 81       	ld	r18, Z
     9b6:	2c 63       	ori	r18, 0x3C	; 60
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
}
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	0f 91       	pop	r16
     9c2:	ef 90       	pop	r14
     9c4:	df 90       	pop	r13
     9c6:	cf 90       	pop	r12
     9c8:	bf 90       	pop	r11
     9ca:	af 90       	pop	r10
     9cc:	9f 90       	pop	r9
     9ce:	8f 90       	pop	r8
     9d0:	08 95       	ret

000009d2 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     9d2:	cf 93       	push	r28
     9d4:	df 93       	push	r29
     9d6:	1f 92       	push	r1
     9d8:	cd b7       	in	r28, 0x3d	; 61
     9da:	de b7       	in	r29, 0x3e	; 62
     9dc:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     9de:	0f 90       	pop	r0
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	1f 92       	push	r1
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     9f2:	0f 90       	pop	r0
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <buffer_init+0x6>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	fc 01       	movw	r30, r24
     a16:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     a18:	89 81       	ldd	r24, Y+1	; 0x01
     a1a:	9a 81       	ldd	r25, Y+2	; 0x02
     a1c:	fc 01       	movw	r30, r24
     a1e:	12 8a       	std	Z+18, r1	; 0x12
}
     a20:	0f 90       	pop	r0
     a22:	0f 90       	pop	r0
     a24:	df 91       	pop	r29
     a26:	cf 91       	pop	r28
     a28:	08 95       	ret

00000a2a <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     a2a:	cf 93       	push	r28
     a2c:	df 93       	push	r29
     a2e:	00 d0       	rcall	.+0      	; 0xa30 <buffer_get_item+0x6>
     a30:	00 d0       	rcall	.+0      	; 0xa32 <buffer_get_item+0x8>
     a32:	cd b7       	in	r28, 0x3d	; 61
     a34:	de b7       	in	r29, 0x3e	; 62
     a36:	9a 83       	std	Y+2, r25	; 0x02
     a38:	89 83       	std	Y+1, r24	; 0x01
     a3a:	7c 83       	std	Y+4, r23	; 0x04
     a3c:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     a3e:	89 81       	ldd	r24, Y+1	; 0x01
     a40:	9a 81       	ldd	r25, Y+2	; 0x02
     a42:	fc 01       	movw	r30, r24
     a44:	82 89       	ldd	r24, Z+18	; 0x12
     a46:	88 23       	and	r24, r24
     a48:	81 f1       	breq	.+96     	; 0xaaa <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     a4a:	89 81       	ldd	r24, Y+1	; 0x01
     a4c:	9a 81       	ldd	r25, Y+2	; 0x02
     a4e:	fc 01       	movw	r30, r24
     a50:	81 89       	ldd	r24, Z+17	; 0x11
     a52:	88 2f       	mov	r24, r24
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	29 81       	ldd	r18, Y+1	; 0x01
     a58:	3a 81       	ldd	r19, Y+2	; 0x02
     a5a:	82 0f       	add	r24, r18
     a5c:	93 1f       	adc	r25, r19
     a5e:	fc 01       	movw	r30, r24
     a60:	20 81       	ld	r18, Z
     a62:	8b 81       	ldd	r24, Y+3	; 0x03
     a64:	9c 81       	ldd	r25, Y+4	; 0x04
     a66:	fc 01       	movw	r30, r24
     a68:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     a6a:	89 81       	ldd	r24, Y+1	; 0x01
     a6c:	9a 81       	ldd	r25, Y+2	; 0x02
     a6e:	fc 01       	movw	r30, r24
     a70:	81 89       	ldd	r24, Z+17	; 0x11
     a72:	88 2f       	mov	r24, r24
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	8f 70       	andi	r24, 0x0F	; 15
     a7a:	90 78       	andi	r25, 0x80	; 128
     a7c:	99 23       	and	r25, r25
     a7e:	24 f4       	brge	.+8      	; 0xa88 <buffer_get_item+0x5e>
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	80 6f       	ori	r24, 0xF0	; 240
     a84:	9f 6f       	ori	r25, 0xFF	; 255
     a86:	01 96       	adiw	r24, 0x01	; 1
     a88:	28 2f       	mov	r18, r24
     a8a:	89 81       	ldd	r24, Y+1	; 0x01
     a8c:	9a 81       	ldd	r25, Y+2	; 0x02
     a8e:	fc 01       	movw	r30, r24
     a90:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     a92:	89 81       	ldd	r24, Y+1	; 0x01
     a94:	9a 81       	ldd	r25, Y+2	; 0x02
     a96:	fc 01       	movw	r30, r24
     a98:	82 89       	ldd	r24, Z+18	; 0x12
     a9a:	2f ef       	ldi	r18, 0xFF	; 255
     a9c:	28 0f       	add	r18, r24
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	fc 01       	movw	r30, r24
     aa4:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	01 c0       	rjmp	.+2      	; 0xaac <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     aaa:	81 e0       	ldi	r24, 0x01	; 1
}
     aac:	0f 90       	pop	r0
     aae:	0f 90       	pop	r0
     ab0:	0f 90       	pop	r0
     ab2:	0f 90       	pop	r0
     ab4:	df 91       	pop	r29
     ab6:	cf 91       	pop	r28
     ab8:	08 95       	ret

00000aba <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	00 d0       	rcall	.+0      	; 0xac0 <buffer_put_item+0x6>
     ac0:	1f 92       	push	r1
     ac2:	cd b7       	in	r28, 0x3d	; 61
     ac4:	de b7       	in	r29, 0x3e	; 62
     ac6:	9a 83       	std	Y+2, r25	; 0x02
     ac8:	89 83       	std	Y+1, r24	; 0x01
     aca:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     acc:	89 81       	ldd	r24, Y+1	; 0x01
     ace:	9a 81       	ldd	r25, Y+2	; 0x02
     ad0:	fc 01       	movw	r30, r24
     ad2:	82 89       	ldd	r24, Z+18	; 0x12
     ad4:	80 31       	cpi	r24, 0x10	; 16
     ad6:	68 f5       	brcc	.+90     	; 0xb32 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     ad8:	89 81       	ldd	r24, Y+1	; 0x01
     ada:	9a 81       	ldd	r25, Y+2	; 0x02
     adc:	fc 01       	movw	r30, r24
     ade:	80 89       	ldd	r24, Z+16	; 0x10
     ae0:	88 2f       	mov	r24, r24
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	29 81       	ldd	r18, Y+1	; 0x01
     ae6:	3a 81       	ldd	r19, Y+2	; 0x02
     ae8:	82 0f       	add	r24, r18
     aea:	93 1f       	adc	r25, r19
     aec:	2b 81       	ldd	r18, Y+3	; 0x03
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	fc 01       	movw	r30, r24
     af8:	80 89       	ldd	r24, Z+16	; 0x10
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	01 96       	adiw	r24, 0x01	; 1
     b00:	8f 70       	andi	r24, 0x0F	; 15
     b02:	90 78       	andi	r25, 0x80	; 128
     b04:	99 23       	and	r25, r25
     b06:	24 f4       	brge	.+8      	; 0xb10 <buffer_put_item+0x56>
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	80 6f       	ori	r24, 0xF0	; 240
     b0c:	9f 6f       	ori	r25, 0xFF	; 255
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	28 2f       	mov	r18, r24
     b12:	89 81       	ldd	r24, Y+1	; 0x01
     b14:	9a 81       	ldd	r25, Y+2	; 0x02
     b16:	fc 01       	movw	r30, r24
     b18:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     b1a:	89 81       	ldd	r24, Y+1	; 0x01
     b1c:	9a 81       	ldd	r25, Y+2	; 0x02
     b1e:	fc 01       	movw	r30, r24
     b20:	82 89       	ldd	r24, Z+18	; 0x12
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	28 0f       	add	r18, r24
     b26:	89 81       	ldd	r24, Y+1	; 0x01
     b28:	9a 81       	ldd	r25, Y+2	; 0x02
     b2a:	fc 01       	movw	r30, r24
     b2c:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     b2e:	80 e0       	ldi	r24, 0x00	; 0
     b30:	01 c0       	rjmp	.+2      	; 0xb34 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     b32:	82 e0       	ldi	r24, 0x02	; 2
}
     b34:	0f 90       	pop	r0
     b36:	0f 90       	pop	r0
     b38:	0f 90       	pop	r0
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	08 95       	ret

00000b40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     b40:	cf 93       	push	r28
     b42:	df 93       	push	r29
     b44:	00 d0       	rcall	.+0      	; 0xb46 <vListInitialise+0x6>
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	9a 83       	std	Y+2, r25	; 0x02
     b4c:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b4e:	89 81       	ldd	r24, Y+1	; 0x01
     b50:	9a 81       	ldd	r25, Y+2	; 0x02
     b52:	9c 01       	movw	r18, r24
     b54:	2d 5f       	subi	r18, 0xFD	; 253
     b56:	3f 4f       	sbci	r19, 0xFF	; 255
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	fc 01       	movw	r30, r24
     b5e:	32 83       	std	Z+2, r19	; 0x02
     b60:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     b62:	89 81       	ldd	r24, Y+1	; 0x01
     b64:	9a 81       	ldd	r25, Y+2	; 0x02
     b66:	2f ef       	ldi	r18, 0xFF	; 255
     b68:	3f ef       	ldi	r19, 0xFF	; 255
     b6a:	fc 01       	movw	r30, r24
     b6c:	34 83       	std	Z+4, r19	; 0x04
     b6e:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b70:	89 81       	ldd	r24, Y+1	; 0x01
     b72:	9a 81       	ldd	r25, Y+2	; 0x02
     b74:	9c 01       	movw	r18, r24
     b76:	2d 5f       	subi	r18, 0xFD	; 253
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
     b7c:	9a 81       	ldd	r25, Y+2	; 0x02
     b7e:	fc 01       	movw	r30, r24
     b80:	36 83       	std	Z+6, r19	; 0x06
     b82:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     b84:	89 81       	ldd	r24, Y+1	; 0x01
     b86:	9a 81       	ldd	r25, Y+2	; 0x02
     b88:	9c 01       	movw	r18, r24
     b8a:	2d 5f       	subi	r18, 0xFD	; 253
     b8c:	3f 4f       	sbci	r19, 0xFF	; 255
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	9a 81       	ldd	r25, Y+2	; 0x02
     b92:	fc 01       	movw	r30, r24
     b94:	30 87       	std	Z+8, r19	; 0x08
     b96:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     b98:	89 81       	ldd	r24, Y+1	; 0x01
     b9a:	9a 81       	ldd	r25, Y+2	; 0x02
     b9c:	fc 01       	movw	r30, r24
     b9e:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ba0:	0f 90       	pop	r0
     ba2:	0f 90       	pop	r0
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	08 95       	ret

00000baa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     baa:	cf 93       	push	r28
     bac:	df 93       	push	r29
     bae:	00 d0       	rcall	.+0      	; 0xbb0 <vListInitialiseItem+0x6>
     bb0:	cd b7       	in	r28, 0x3d	; 61
     bb2:	de b7       	in	r29, 0x3e	; 62
     bb4:	9a 83       	std	Y+2, r25	; 0x02
     bb6:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	9a 81       	ldd	r25, Y+2	; 0x02
     bbc:	fc 01       	movw	r30, r24
     bbe:	11 86       	std	Z+9, r1	; 0x09
     bc0:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     bc2:	0f 90       	pop	r0
     bc4:	0f 90       	pop	r0
     bc6:	df 91       	pop	r29
     bc8:	cf 91       	pop	r28
     bca:	08 95       	ret

00000bcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     bcc:	cf 93       	push	r28
     bce:	df 93       	push	r29
     bd0:	00 d0       	rcall	.+0      	; 0xbd2 <vListInsertEnd+0x6>
     bd2:	00 d0       	rcall	.+0      	; 0xbd4 <vListInsertEnd+0x8>
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <vListInsertEnd+0xa>
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
     bda:	9c 83       	std	Y+4, r25	; 0x04
     bdc:	8b 83       	std	Y+3, r24	; 0x03
     bde:	7e 83       	std	Y+6, r23	; 0x06
     be0:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     be2:	8b 81       	ldd	r24, Y+3	; 0x03
     be4:	9c 81       	ldd	r25, Y+4	; 0x04
     be6:	fc 01       	movw	r30, r24
     be8:	81 81       	ldd	r24, Z+1	; 0x01
     bea:	92 81       	ldd	r25, Z+2	; 0x02
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     bf0:	8d 81       	ldd	r24, Y+5	; 0x05
     bf2:	9e 81       	ldd	r25, Y+6	; 0x06
     bf4:	29 81       	ldd	r18, Y+1	; 0x01
     bf6:	3a 81       	ldd	r19, Y+2	; 0x02
     bf8:	fc 01       	movw	r30, r24
     bfa:	33 83       	std	Z+3, r19	; 0x03
     bfc:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     bfe:	89 81       	ldd	r24, Y+1	; 0x01
     c00:	9a 81       	ldd	r25, Y+2	; 0x02
     c02:	fc 01       	movw	r30, r24
     c04:	24 81       	ldd	r18, Z+4	; 0x04
     c06:	35 81       	ldd	r19, Z+5	; 0x05
     c08:	8d 81       	ldd	r24, Y+5	; 0x05
     c0a:	9e 81       	ldd	r25, Y+6	; 0x06
     c0c:	fc 01       	movw	r30, r24
     c0e:	35 83       	std	Z+5, r19	; 0x05
     c10:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     c12:	89 81       	ldd	r24, Y+1	; 0x01
     c14:	9a 81       	ldd	r25, Y+2	; 0x02
     c16:	fc 01       	movw	r30, r24
     c18:	84 81       	ldd	r24, Z+4	; 0x04
     c1a:	95 81       	ldd	r25, Z+5	; 0x05
     c1c:	2d 81       	ldd	r18, Y+5	; 0x05
     c1e:	3e 81       	ldd	r19, Y+6	; 0x06
     c20:	fc 01       	movw	r30, r24
     c22:	33 83       	std	Z+3, r19	; 0x03
     c24:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	2d 81       	ldd	r18, Y+5	; 0x05
     c2c:	3e 81       	ldd	r19, Y+6	; 0x06
     c2e:	fc 01       	movw	r30, r24
     c30:	35 83       	std	Z+5, r19	; 0x05
     c32:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     c34:	8d 81       	ldd	r24, Y+5	; 0x05
     c36:	9e 81       	ldd	r25, Y+6	; 0x06
     c38:	2b 81       	ldd	r18, Y+3	; 0x03
     c3a:	3c 81       	ldd	r19, Y+4	; 0x04
     c3c:	fc 01       	movw	r30, r24
     c3e:	31 87       	std	Z+9, r19	; 0x09
     c40:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     c42:	8b 81       	ldd	r24, Y+3	; 0x03
     c44:	9c 81       	ldd	r25, Y+4	; 0x04
     c46:	fc 01       	movw	r30, r24
     c48:	80 81       	ld	r24, Z
     c4a:	21 e0       	ldi	r18, 0x01	; 1
     c4c:	28 0f       	add	r18, r24
     c4e:	8b 81       	ldd	r24, Y+3	; 0x03
     c50:	9c 81       	ldd	r25, Y+4	; 0x04
     c52:	fc 01       	movw	r30, r24
     c54:	20 83       	st	Z, r18
}
     c56:	26 96       	adiw	r28, 0x06	; 6
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61
     c62:	df 91       	pop	r29
     c64:	cf 91       	pop	r28
     c66:	08 95       	ret

00000c68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     c68:	cf 93       	push	r28
     c6a:	df 93       	push	r29
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
     c70:	28 97       	sbiw	r28, 0x08	; 8
     c72:	0f b6       	in	r0, 0x3f	; 63
     c74:	f8 94       	cli
     c76:	de bf       	out	0x3e, r29	; 62
     c78:	0f be       	out	0x3f, r0	; 63
     c7a:	cd bf       	out	0x3d, r28	; 61
     c7c:	9e 83       	std	Y+6, r25	; 0x06
     c7e:	8d 83       	std	Y+5, r24	; 0x05
     c80:	78 87       	std	Y+8, r23	; 0x08
     c82:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     c84:	8f 81       	ldd	r24, Y+7	; 0x07
     c86:	98 85       	ldd	r25, Y+8	; 0x08
     c88:	fc 01       	movw	r30, r24
     c8a:	80 81       	ld	r24, Z
     c8c:	91 81       	ldd	r25, Z+1	; 0x01
     c8e:	9c 83       	std	Y+4, r25	; 0x04
     c90:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     c92:	8b 81       	ldd	r24, Y+3	; 0x03
     c94:	9c 81       	ldd	r25, Y+4	; 0x04
     c96:	01 96       	adiw	r24, 0x01	; 1
     c98:	41 f4       	brne	.+16     	; 0xcaa <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	fc 01       	movw	r30, r24
     ca0:	87 81       	ldd	r24, Z+7	; 0x07
     ca2:	90 85       	ldd	r25, Z+8	; 0x08
     ca4:	9a 83       	std	Y+2, r25	; 0x02
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	1a c0       	rjmp	.+52     	; 0xcde <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     caa:	8d 81       	ldd	r24, Y+5	; 0x05
     cac:	9e 81       	ldd	r25, Y+6	; 0x06
     cae:	03 96       	adiw	r24, 0x03	; 3
     cb0:	9a 83       	std	Y+2, r25	; 0x02
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	07 c0       	rjmp	.+14     	; 0xcc4 <vListInsert+0x5c>
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	9a 83       	std	Y+2, r25	; 0x02
     cc2:	89 83       	std	Y+1, r24	; 0x01
     cc4:	89 81       	ldd	r24, Y+1	; 0x01
     cc6:	9a 81       	ldd	r25, Y+2	; 0x02
     cc8:	fc 01       	movw	r30, r24
     cca:	82 81       	ldd	r24, Z+2	; 0x02
     ccc:	93 81       	ldd	r25, Z+3	; 0x03
     cce:	fc 01       	movw	r30, r24
     cd0:	20 81       	ld	r18, Z
     cd2:	31 81       	ldd	r19, Z+1	; 0x01
     cd4:	8b 81       	ldd	r24, Y+3	; 0x03
     cd6:	9c 81       	ldd	r25, Y+4	; 0x04
     cd8:	82 17       	cp	r24, r18
     cda:	93 07       	cpc	r25, r19
     cdc:	60 f7       	brcc	.-40     	; 0xcb6 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     cde:	89 81       	ldd	r24, Y+1	; 0x01
     ce0:	9a 81       	ldd	r25, Y+2	; 0x02
     ce2:	fc 01       	movw	r30, r24
     ce4:	22 81       	ldd	r18, Z+2	; 0x02
     ce6:	33 81       	ldd	r19, Z+3	; 0x03
     ce8:	8f 81       	ldd	r24, Y+7	; 0x07
     cea:	98 85       	ldd	r25, Y+8	; 0x08
     cec:	fc 01       	movw	r30, r24
     cee:	33 83       	std	Z+3, r19	; 0x03
     cf0:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     cf2:	8f 81       	ldd	r24, Y+7	; 0x07
     cf4:	98 85       	ldd	r25, Y+8	; 0x08
     cf6:	fc 01       	movw	r30, r24
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	93 81       	ldd	r25, Z+3	; 0x03
     cfc:	2f 81       	ldd	r18, Y+7	; 0x07
     cfe:	38 85       	ldd	r19, Y+8	; 0x08
     d00:	fc 01       	movw	r30, r24
     d02:	35 83       	std	Z+5, r19	; 0x05
     d04:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     d06:	8f 81       	ldd	r24, Y+7	; 0x07
     d08:	98 85       	ldd	r25, Y+8	; 0x08
     d0a:	29 81       	ldd	r18, Y+1	; 0x01
     d0c:	3a 81       	ldd	r19, Y+2	; 0x02
     d0e:	fc 01       	movw	r30, r24
     d10:	35 83       	std	Z+5, r19	; 0x05
     d12:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	2f 81       	ldd	r18, Y+7	; 0x07
     d1a:	38 85       	ldd	r19, Y+8	; 0x08
     d1c:	fc 01       	movw	r30, r24
     d1e:	33 83       	std	Z+3, r19	; 0x03
     d20:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d22:	8f 81       	ldd	r24, Y+7	; 0x07
     d24:	98 85       	ldd	r25, Y+8	; 0x08
     d26:	2d 81       	ldd	r18, Y+5	; 0x05
     d28:	3e 81       	ldd	r19, Y+6	; 0x06
     d2a:	fc 01       	movw	r30, r24
     d2c:	31 87       	std	Z+9, r19	; 0x09
     d2e:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d30:	8d 81       	ldd	r24, Y+5	; 0x05
     d32:	9e 81       	ldd	r25, Y+6	; 0x06
     d34:	fc 01       	movw	r30, r24
     d36:	80 81       	ld	r24, Z
     d38:	21 e0       	ldi	r18, 0x01	; 1
     d3a:	28 0f       	add	r18, r24
     d3c:	8d 81       	ldd	r24, Y+5	; 0x05
     d3e:	9e 81       	ldd	r25, Y+6	; 0x06
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
}
     d44:	28 96       	adiw	r28, 0x08	; 8
     d46:	0f b6       	in	r0, 0x3f	; 63
     d48:	f8 94       	cli
     d4a:	de bf       	out	0x3e, r29	; 62
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	cd bf       	out	0x3d, r28	; 61
     d50:	df 91       	pop	r29
     d52:	cf 91       	pop	r28
     d54:	08 95       	ret

00000d56 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     d56:	cf 93       	push	r28
     d58:	df 93       	push	r29
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <uxListRemove+0x6>
     d5c:	00 d0       	rcall	.+0      	; 0xd5e <uxListRemove+0x8>
     d5e:	cd b7       	in	r28, 0x3d	; 61
     d60:	de b7       	in	r29, 0x3e	; 62
     d62:	9c 83       	std	Y+4, r25	; 0x04
     d64:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     d66:	8b 81       	ldd	r24, Y+3	; 0x03
     d68:	9c 81       	ldd	r25, Y+4	; 0x04
     d6a:	fc 01       	movw	r30, r24
     d6c:	80 85       	ldd	r24, Z+8	; 0x08
     d6e:	91 85       	ldd	r25, Z+9	; 0x09
     d70:	9a 83       	std	Y+2, r25	; 0x02
     d72:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     d74:	8b 81       	ldd	r24, Y+3	; 0x03
     d76:	9c 81       	ldd	r25, Y+4	; 0x04
     d78:	fc 01       	movw	r30, r24
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	2b 81       	ldd	r18, Y+3	; 0x03
     d80:	3c 81       	ldd	r19, Y+4	; 0x04
     d82:	f9 01       	movw	r30, r18
     d84:	24 81       	ldd	r18, Z+4	; 0x04
     d86:	35 81       	ldd	r19, Z+5	; 0x05
     d88:	fc 01       	movw	r30, r24
     d8a:	35 83       	std	Z+5, r19	; 0x05
     d8c:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     d8e:	8b 81       	ldd	r24, Y+3	; 0x03
     d90:	9c 81       	ldd	r25, Y+4	; 0x04
     d92:	fc 01       	movw	r30, r24
     d94:	84 81       	ldd	r24, Z+4	; 0x04
     d96:	95 81       	ldd	r25, Z+5	; 0x05
     d98:	2b 81       	ldd	r18, Y+3	; 0x03
     d9a:	3c 81       	ldd	r19, Y+4	; 0x04
     d9c:	f9 01       	movw	r30, r18
     d9e:	22 81       	ldd	r18, Z+2	; 0x02
     da0:	33 81       	ldd	r19, Z+3	; 0x03
     da2:	fc 01       	movw	r30, r24
     da4:	33 83       	std	Z+3, r19	; 0x03
     da6:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	9a 81       	ldd	r25, Y+2	; 0x02
     dac:	fc 01       	movw	r30, r24
     dae:	21 81       	ldd	r18, Z+1	; 0x01
     db0:	32 81       	ldd	r19, Z+2	; 0x02
     db2:	8b 81       	ldd	r24, Y+3	; 0x03
     db4:	9c 81       	ldd	r25, Y+4	; 0x04
     db6:	28 17       	cp	r18, r24
     db8:	39 07       	cpc	r19, r25
     dba:	51 f4       	brne	.+20     	; 0xdd0 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     dbc:	8b 81       	ldd	r24, Y+3	; 0x03
     dbe:	9c 81       	ldd	r25, Y+4	; 0x04
     dc0:	fc 01       	movw	r30, r24
     dc2:	24 81       	ldd	r18, Z+4	; 0x04
     dc4:	35 81       	ldd	r19, Z+5	; 0x05
     dc6:	89 81       	ldd	r24, Y+1	; 0x01
     dc8:	9a 81       	ldd	r25, Y+2	; 0x02
     dca:	fc 01       	movw	r30, r24
     dcc:	32 83       	std	Z+2, r19	; 0x02
     dce:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     dd0:	8b 81       	ldd	r24, Y+3	; 0x03
     dd2:	9c 81       	ldd	r25, Y+4	; 0x04
     dd4:	fc 01       	movw	r30, r24
     dd6:	11 86       	std	Z+9, r1	; 0x09
     dd8:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	2f ef       	ldi	r18, 0xFF	; 255
     de4:	28 0f       	add	r18, r24
     de6:	89 81       	ldd	r24, Y+1	; 0x01
     de8:	9a 81       	ldd	r25, Y+2	; 0x02
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	fc 01       	movw	r30, r24
     df4:	80 81       	ld	r24, Z
}
     df6:	0f 90       	pop	r0
     df8:	0f 90       	pop	r0
     dfa:	0f 90       	pop	r0
     dfc:	0f 90       	pop	r0
     dfe:	df 91       	pop	r29
     e00:	cf 91       	pop	r28
     e02:	08 95       	ret

00000e04 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     e04:	cf 93       	push	r28
     e06:	df 93       	push	r29
     e08:	cd b7       	in	r28, 0x3d	; 61
     e0a:	de b7       	in	r29, 0x3e	; 62
     e0c:	28 97       	sbiw	r28, 0x08	; 8
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	f8 94       	cli
     e12:	de bf       	out	0x3e, r29	; 62
     e14:	0f be       	out	0x3f, r0	; 63
     e16:	cd bf       	out	0x3d, r28	; 61
     e18:	9c 83       	std	Y+4, r25	; 0x04
     e1a:	8b 83       	std	Y+3, r24	; 0x03
     e1c:	7e 83       	std	Y+6, r23	; 0x06
     e1e:	6d 83       	std	Y+5, r22	; 0x05
     e20:	58 87       	std	Y+8, r21	; 0x08
     e22:	4f 83       	std	Y+7, r20	; 0x07
     e24:	8b 81       	ldd	r24, Y+3	; 0x03
     e26:	9c 81       	ldd	r25, Y+4	; 0x04
     e28:	21 e1       	ldi	r18, 0x11	; 17
     e2a:	fc 01       	movw	r30, r24
     e2c:	20 83       	st	Z, r18
     e2e:	8b 81       	ldd	r24, Y+3	; 0x03
     e30:	9c 81       	ldd	r25, Y+4	; 0x04
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	9c 83       	std	Y+4, r25	; 0x04
     e36:	8b 83       	std	Y+3, r24	; 0x03
     e38:	8b 81       	ldd	r24, Y+3	; 0x03
     e3a:	9c 81       	ldd	r25, Y+4	; 0x04
     e3c:	22 e2       	ldi	r18, 0x22	; 34
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
     e42:	8b 81       	ldd	r24, Y+3	; 0x03
     e44:	9c 81       	ldd	r25, Y+4	; 0x04
     e46:	01 97       	sbiw	r24, 0x01	; 1
     e48:	9c 83       	std	Y+4, r25	; 0x04
     e4a:	8b 83       	std	Y+3, r24	; 0x03
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	23 e3       	ldi	r18, 0x33	; 51
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
     e56:	8b 81       	ldd	r24, Y+3	; 0x03
     e58:	9c 81       	ldd	r25, Y+4	; 0x04
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	9c 83       	std	Y+4, r25	; 0x04
     e5e:	8b 83       	std	Y+3, r24	; 0x03
     e60:	8d 81       	ldd	r24, Y+5	; 0x05
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	9a 83       	std	Y+2, r25	; 0x02
     e66:	89 83       	std	Y+1, r24	; 0x01
     e68:	29 81       	ldd	r18, Y+1	; 0x01
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	9c 81       	ldd	r25, Y+4	; 0x04
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
     e72:	8b 81       	ldd	r24, Y+3	; 0x03
     e74:	9c 81       	ldd	r25, Y+4	; 0x04
     e76:	01 97       	sbiw	r24, 0x01	; 1
     e78:	9c 83       	std	Y+4, r25	; 0x04
     e7a:	8b 83       	std	Y+3, r24	; 0x03
     e7c:	89 81       	ldd	r24, Y+1	; 0x01
     e7e:	9a 81       	ldd	r25, Y+2	; 0x02
     e80:	89 2f       	mov	r24, r25
     e82:	99 27       	eor	r25, r25
     e84:	9a 83       	std	Y+2, r25	; 0x02
     e86:	89 83       	std	Y+1, r24	; 0x01
     e88:	29 81       	ldd	r18, Y+1	; 0x01
     e8a:	8b 81       	ldd	r24, Y+3	; 0x03
     e8c:	9c 81       	ldd	r25, Y+4	; 0x04
     e8e:	fc 01       	movw	r30, r24
     e90:	20 83       	st	Z, r18
     e92:	8b 81       	ldd	r24, Y+3	; 0x03
     e94:	9c 81       	ldd	r25, Y+4	; 0x04
     e96:	01 97       	sbiw	r24, 0x01	; 1
     e98:	9c 83       	std	Y+4, r25	; 0x04
     e9a:	8b 83       	std	Y+3, r24	; 0x03
     e9c:	8b 81       	ldd	r24, Y+3	; 0x03
     e9e:	9c 81       	ldd	r25, Y+4	; 0x04
     ea0:	fc 01       	movw	r30, r24
     ea2:	10 82       	st	Z, r1
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	01 97       	sbiw	r24, 0x01	; 1
     eaa:	9c 83       	std	Y+4, r25	; 0x04
     eac:	8b 83       	std	Y+3, r24	; 0x03
     eae:	8b 81       	ldd	r24, Y+3	; 0x03
     eb0:	9c 81       	ldd	r25, Y+4	; 0x04
     eb2:	20 e8       	ldi	r18, 0x80	; 128
     eb4:	fc 01       	movw	r30, r24
     eb6:	20 83       	st	Z, r18
     eb8:	8b 81       	ldd	r24, Y+3	; 0x03
     eba:	9c 81       	ldd	r25, Y+4	; 0x04
     ebc:	01 97       	sbiw	r24, 0x01	; 1
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
     ec2:	8b 81       	ldd	r24, Y+3	; 0x03
     ec4:	9c 81       	ldd	r25, Y+4	; 0x04
     ec6:	fc 01       	movw	r30, r24
     ec8:	10 82       	st	Z, r1
     eca:	8b 81       	ldd	r24, Y+3	; 0x03
     ecc:	9c 81       	ldd	r25, Y+4	; 0x04
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	9c 83       	std	Y+4, r25	; 0x04
     ed2:	8b 83       	std	Y+3, r24	; 0x03
     ed4:	8b 81       	ldd	r24, Y+3	; 0x03
     ed6:	9c 81       	ldd	r25, Y+4	; 0x04
     ed8:	22 e0       	ldi	r18, 0x02	; 2
     eda:	fc 01       	movw	r30, r24
     edc:	20 83       	st	Z, r18
     ede:	8b 81       	ldd	r24, Y+3	; 0x03
     ee0:	9c 81       	ldd	r25, Y+4	; 0x04
     ee2:	01 97       	sbiw	r24, 0x01	; 1
     ee4:	9c 83       	std	Y+4, r25	; 0x04
     ee6:	8b 83       	std	Y+3, r24	; 0x03
     ee8:	8b 81       	ldd	r24, Y+3	; 0x03
     eea:	9c 81       	ldd	r25, Y+4	; 0x04
     eec:	23 e0       	ldi	r18, 0x03	; 3
     eee:	fc 01       	movw	r30, r24
     ef0:	20 83       	st	Z, r18
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	9c 83       	std	Y+4, r25	; 0x04
     efa:	8b 83       	std	Y+3, r24	; 0x03
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	24 e0       	ldi	r18, 0x04	; 4
     f02:	fc 01       	movw	r30, r24
     f04:	20 83       	st	Z, r18
     f06:	8b 81       	ldd	r24, Y+3	; 0x03
     f08:	9c 81       	ldd	r25, Y+4	; 0x04
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	8b 81       	ldd	r24, Y+3	; 0x03
     f12:	9c 81       	ldd	r25, Y+4	; 0x04
     f14:	25 e0       	ldi	r18, 0x05	; 5
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	9c 83       	std	Y+4, r25	; 0x04
     f22:	8b 83       	std	Y+3, r24	; 0x03
     f24:	8b 81       	ldd	r24, Y+3	; 0x03
     f26:	9c 81       	ldd	r25, Y+4	; 0x04
     f28:	26 e0       	ldi	r18, 0x06	; 6
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	01 97       	sbiw	r24, 0x01	; 1
     f34:	9c 83       	std	Y+4, r25	; 0x04
     f36:	8b 83       	std	Y+3, r24	; 0x03
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	27 e0       	ldi	r18, 0x07	; 7
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	01 97       	sbiw	r24, 0x01	; 1
     f48:	9c 83       	std	Y+4, r25	; 0x04
     f4a:	8b 83       	std	Y+3, r24	; 0x03
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	28 e0       	ldi	r18, 0x08	; 8
     f52:	fc 01       	movw	r30, r24
     f54:	20 83       	st	Z, r18
     f56:	8b 81       	ldd	r24, Y+3	; 0x03
     f58:	9c 81       	ldd	r25, Y+4	; 0x04
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	9c 83       	std	Y+4, r25	; 0x04
     f5e:	8b 83       	std	Y+3, r24	; 0x03
     f60:	8b 81       	ldd	r24, Y+3	; 0x03
     f62:	9c 81       	ldd	r25, Y+4	; 0x04
     f64:	29 e0       	ldi	r18, 0x09	; 9
     f66:	fc 01       	movw	r30, r24
     f68:	20 83       	st	Z, r18
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	9c 83       	std	Y+4, r25	; 0x04
     f72:	8b 83       	std	Y+3, r24	; 0x03
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	20 e1       	ldi	r18, 0x10	; 16
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	21 e1       	ldi	r18, 0x11	; 17
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	22 e1       	ldi	r18, 0x12	; 18
     fa2:	fc 01       	movw	r30, r24
     fa4:	20 83       	st	Z, r18
     fa6:	8b 81       	ldd	r24, Y+3	; 0x03
     fa8:	9c 81       	ldd	r25, Y+4	; 0x04
     faa:	01 97       	sbiw	r24, 0x01	; 1
     fac:	9c 83       	std	Y+4, r25	; 0x04
     fae:	8b 83       	std	Y+3, r24	; 0x03
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	9c 81       	ldd	r25, Y+4	; 0x04
     fb4:	23 e1       	ldi	r18, 0x13	; 19
     fb6:	fc 01       	movw	r30, r24
     fb8:	20 83       	st	Z, r18
     fba:	8b 81       	ldd	r24, Y+3	; 0x03
     fbc:	9c 81       	ldd	r25, Y+4	; 0x04
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	24 e1       	ldi	r18, 0x14	; 20
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
     fce:	8b 81       	ldd	r24, Y+3	; 0x03
     fd0:	9c 81       	ldd	r25, Y+4	; 0x04
     fd2:	01 97       	sbiw	r24, 0x01	; 1
     fd4:	9c 83       	std	Y+4, r25	; 0x04
     fd6:	8b 83       	std	Y+3, r24	; 0x03
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	25 e1       	ldi	r18, 0x15	; 21
     fde:	fc 01       	movw	r30, r24
     fe0:	20 83       	st	Z, r18
     fe2:	8b 81       	ldd	r24, Y+3	; 0x03
     fe4:	9c 81       	ldd	r25, Y+4	; 0x04
     fe6:	01 97       	sbiw	r24, 0x01	; 1
     fe8:	9c 83       	std	Y+4, r25	; 0x04
     fea:	8b 83       	std	Y+3, r24	; 0x03
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	9c 81       	ldd	r25, Y+4	; 0x04
     ff0:	26 e1       	ldi	r18, 0x16	; 22
     ff2:	fc 01       	movw	r30, r24
     ff4:	20 83       	st	Z, r18
     ff6:	8b 81       	ldd	r24, Y+3	; 0x03
     ff8:	9c 81       	ldd	r25, Y+4	; 0x04
     ffa:	01 97       	sbiw	r24, 0x01	; 1
     ffc:	9c 83       	std	Y+4, r25	; 0x04
     ffe:	8b 83       	std	Y+3, r24	; 0x03
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	27 e1       	ldi	r18, 0x17	; 23
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	28 e1       	ldi	r18, 0x18	; 24
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	29 e1       	ldi	r18, 0x19	; 25
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	20 e2       	ldi	r18, 0x20	; 32
    1042:	fc 01       	movw	r30, r24
    1044:	20 83       	st	Z, r18
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	9c 83       	std	Y+4, r25	; 0x04
    104e:	8b 83       	std	Y+3, r24	; 0x03
    1050:	8b 81       	ldd	r24, Y+3	; 0x03
    1052:	9c 81       	ldd	r25, Y+4	; 0x04
    1054:	21 e2       	ldi	r18, 0x21	; 33
    1056:	fc 01       	movw	r30, r24
    1058:	20 83       	st	Z, r18
    105a:	8b 81       	ldd	r24, Y+3	; 0x03
    105c:	9c 81       	ldd	r25, Y+4	; 0x04
    105e:	01 97       	sbiw	r24, 0x01	; 1
    1060:	9c 83       	std	Y+4, r25	; 0x04
    1062:	8b 83       	std	Y+3, r24	; 0x03
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	22 e2       	ldi	r18, 0x22	; 34
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	23 e2       	ldi	r18, 0x23	; 35
    107e:	fc 01       	movw	r30, r24
    1080:	20 83       	st	Z, r18
    1082:	8b 81       	ldd	r24, Y+3	; 0x03
    1084:	9c 81       	ldd	r25, Y+4	; 0x04
    1086:	01 97       	sbiw	r24, 0x01	; 1
    1088:	9c 83       	std	Y+4, r25	; 0x04
    108a:	8b 83       	std	Y+3, r24	; 0x03
    108c:	8f 81       	ldd	r24, Y+7	; 0x07
    108e:	98 85       	ldd	r25, Y+8	; 0x08
    1090:	9a 83       	std	Y+2, r25	; 0x02
    1092:	89 83       	std	Y+1, r24	; 0x01
    1094:	29 81       	ldd	r18, Y+1	; 0x01
    1096:	8b 81       	ldd	r24, Y+3	; 0x03
    1098:	9c 81       	ldd	r25, Y+4	; 0x04
    109a:	fc 01       	movw	r30, r24
    109c:	20 83       	st	Z, r18
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	01 97       	sbiw	r24, 0x01	; 1
    10a4:	9c 83       	std	Y+4, r25	; 0x04
    10a6:	8b 83       	std	Y+3, r24	; 0x03
    10a8:	89 81       	ldd	r24, Y+1	; 0x01
    10aa:	9a 81       	ldd	r25, Y+2	; 0x02
    10ac:	89 2f       	mov	r24, r25
    10ae:	99 27       	eor	r25, r25
    10b0:	9a 83       	std	Y+2, r25	; 0x02
    10b2:	89 83       	std	Y+1, r24	; 0x01
    10b4:	29 81       	ldd	r18, Y+1	; 0x01
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	fc 01       	movw	r30, r24
    10bc:	20 83       	st	Z, r18
    10be:	8b 81       	ldd	r24, Y+3	; 0x03
    10c0:	9c 81       	ldd	r25, Y+4	; 0x04
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9c 83       	std	Y+4, r25	; 0x04
    10c6:	8b 83       	std	Y+3, r24	; 0x03
    10c8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ca:	9c 81       	ldd	r25, Y+4	; 0x04
    10cc:	26 e2       	ldi	r18, 0x26	; 38
    10ce:	fc 01       	movw	r30, r24
    10d0:	20 83       	st	Z, r18
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9c 83       	std	Y+4, r25	; 0x04
    10da:	8b 83       	std	Y+3, r24	; 0x03
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	27 e2       	ldi	r18, 0x27	; 39
    10e2:	fc 01       	movw	r30, r24
    10e4:	20 83       	st	Z, r18
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	9c 83       	std	Y+4, r25	; 0x04
    10ee:	8b 83       	std	Y+3, r24	; 0x03
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	28 e2       	ldi	r18, 0x28	; 40
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9c 83       	std	Y+4, r25	; 0x04
    1102:	8b 83       	std	Y+3, r24	; 0x03
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	29 e2       	ldi	r18, 0x29	; 41
    110a:	fc 01       	movw	r30, r24
    110c:	20 83       	st	Z, r18
    110e:	8b 81       	ldd	r24, Y+3	; 0x03
    1110:	9c 81       	ldd	r25, Y+4	; 0x04
    1112:	01 97       	sbiw	r24, 0x01	; 1
    1114:	9c 83       	std	Y+4, r25	; 0x04
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	20 e3       	ldi	r18, 0x30	; 48
    111e:	fc 01       	movw	r30, r24
    1120:	20 83       	st	Z, r18
    1122:	8b 81       	ldd	r24, Y+3	; 0x03
    1124:	9c 81       	ldd	r25, Y+4	; 0x04
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9c 83       	std	Y+4, r25	; 0x04
    112a:	8b 83       	std	Y+3, r24	; 0x03
    112c:	8b 81       	ldd	r24, Y+3	; 0x03
    112e:	9c 81       	ldd	r25, Y+4	; 0x04
    1130:	21 e3       	ldi	r18, 0x31	; 49
    1132:	fc 01       	movw	r30, r24
    1134:	20 83       	st	Z, r18
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	9c 81       	ldd	r25, Y+4	; 0x04
    113a:	01 97       	sbiw	r24, 0x01	; 1
    113c:	9c 83       	std	Y+4, r25	; 0x04
    113e:	8b 83       	std	Y+3, r24	; 0x03
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	28 96       	adiw	r28, 0x08	; 8
    1146:	0f b6       	in	r0, 0x3f	; 63
    1148:	f8 94       	cli
    114a:	de bf       	out	0x3e, r29	; 62
    114c:	0f be       	out	0x3f, r0	; 63
    114e:	cd bf       	out	0x3d, r28	; 61
    1150:	df 91       	pop	r29
    1152:	cf 91       	pop	r28
    1154:	08 95       	ret

00001156 <xPortStartScheduler>:
    1156:	cf 93       	push	r28
    1158:	df 93       	push	r29
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
    115e:	0e 94 96 09 	call	0x132c	; 0x132c <prvSetupTimerInterrupt>
    1162:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1166:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    116a:	cd 91       	ld	r28, X+
    116c:	cd bf       	out	0x3d, r28	; 61
    116e:	dd 91       	ld	r29, X+
    1170:	de bf       	out	0x3e, r29	; 62
    1172:	ff 91       	pop	r31
    1174:	ef 91       	pop	r30
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	bf 91       	pop	r27
    117c:	af 91       	pop	r26
    117e:	9f 91       	pop	r25
    1180:	8f 91       	pop	r24
    1182:	7f 91       	pop	r23
    1184:	6f 91       	pop	r22
    1186:	5f 91       	pop	r21
    1188:	4f 91       	pop	r20
    118a:	3f 91       	pop	r19
    118c:	2f 91       	pop	r18
    118e:	1f 91       	pop	r17
    1190:	0f 91       	pop	r16
    1192:	ff 90       	pop	r15
    1194:	ef 90       	pop	r14
    1196:	df 90       	pop	r13
    1198:	cf 90       	pop	r12
    119a:	bf 90       	pop	r11
    119c:	af 90       	pop	r10
    119e:	9f 90       	pop	r9
    11a0:	8f 90       	pop	r8
    11a2:	7f 90       	pop	r7
    11a4:	6f 90       	pop	r6
    11a6:	5f 90       	pop	r5
    11a8:	4f 90       	pop	r4
    11aa:	3f 90       	pop	r3
    11ac:	2f 90       	pop	r2
    11ae:	1f 90       	pop	r1
    11b0:	0f 90       	pop	r0
    11b2:	0f be       	out	0x3f, r0	; 63
    11b4:	0f 90       	pop	r0
    11b6:	08 95       	ret
    11b8:	81 e0       	ldi	r24, 0x01	; 1
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	08 95       	ret

000011c0 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    11c0:	0f 92       	push	r0
    11c2:	0f b6       	in	r0, 0x3f	; 63
    11c4:	f8 94       	cli
    11c6:	0f 92       	push	r0
    11c8:	1f 92       	push	r1
    11ca:	11 24       	eor	r1, r1
    11cc:	2f 92       	push	r2
    11ce:	3f 92       	push	r3
    11d0:	4f 92       	push	r4
    11d2:	5f 92       	push	r5
    11d4:	6f 92       	push	r6
    11d6:	7f 92       	push	r7
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	2f 93       	push	r18
    11ee:	3f 93       	push	r19
    11f0:	4f 93       	push	r20
    11f2:	5f 93       	push	r21
    11f4:	6f 93       	push	r22
    11f6:	7f 93       	push	r23
    11f8:	8f 93       	push	r24
    11fa:	9f 93       	push	r25
    11fc:	af 93       	push	r26
    11fe:	bf 93       	push	r27
    1200:	cf 93       	push	r28
    1202:	df 93       	push	r29
    1204:	ef 93       	push	r30
    1206:	ff 93       	push	r31
    1208:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    120c:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1210:	0d b6       	in	r0, 0x3d	; 61
    1212:	0d 92       	st	X+, r0
    1214:	0e b6       	in	r0, 0x3e	; 62
    1216:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1218:	0e 94 6e 15 	call	0x2adc	; 0x2adc <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    121c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1220:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1224:	cd 91       	ld	r28, X+
    1226:	cd bf       	out	0x3d, r28	; 61
    1228:	dd 91       	ld	r29, X+
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	ff 91       	pop	r31
    122e:	ef 91       	pop	r30
    1230:	df 91       	pop	r29
    1232:	cf 91       	pop	r28
    1234:	bf 91       	pop	r27
    1236:	af 91       	pop	r26
    1238:	9f 91       	pop	r25
    123a:	8f 91       	pop	r24
    123c:	7f 91       	pop	r23
    123e:	6f 91       	pop	r22
    1240:	5f 91       	pop	r21
    1242:	4f 91       	pop	r20
    1244:	3f 91       	pop	r19
    1246:	2f 91       	pop	r18
    1248:	1f 91       	pop	r17
    124a:	0f 91       	pop	r16
    124c:	ff 90       	pop	r15
    124e:	ef 90       	pop	r14
    1250:	df 90       	pop	r13
    1252:	cf 90       	pop	r12
    1254:	bf 90       	pop	r11
    1256:	af 90       	pop	r10
    1258:	9f 90       	pop	r9
    125a:	8f 90       	pop	r8
    125c:	7f 90       	pop	r7
    125e:	6f 90       	pop	r6
    1260:	5f 90       	pop	r5
    1262:	4f 90       	pop	r4
    1264:	3f 90       	pop	r3
    1266:	2f 90       	pop	r2
    1268:	1f 90       	pop	r1
    126a:	0f 90       	pop	r0
    126c:	0f be       	out	0x3f, r0	; 63
    126e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1270:	08 95       	ret

00001272 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1272:	0f 92       	push	r0
    1274:	0f b6       	in	r0, 0x3f	; 63
    1276:	f8 94       	cli
    1278:	0f 92       	push	r0
    127a:	1f 92       	push	r1
    127c:	11 24       	eor	r1, r1
    127e:	2f 92       	push	r2
    1280:	3f 92       	push	r3
    1282:	4f 92       	push	r4
    1284:	5f 92       	push	r5
    1286:	6f 92       	push	r6
    1288:	7f 92       	push	r7
    128a:	8f 92       	push	r8
    128c:	9f 92       	push	r9
    128e:	af 92       	push	r10
    1290:	bf 92       	push	r11
    1292:	cf 92       	push	r12
    1294:	df 92       	push	r13
    1296:	ef 92       	push	r14
    1298:	ff 92       	push	r15
    129a:	0f 93       	push	r16
    129c:	1f 93       	push	r17
    129e:	2f 93       	push	r18
    12a0:	3f 93       	push	r19
    12a2:	4f 93       	push	r20
    12a4:	5f 93       	push	r21
    12a6:	6f 93       	push	r22
    12a8:	7f 93       	push	r23
    12aa:	8f 93       	push	r24
    12ac:	9f 93       	push	r25
    12ae:	af 93       	push	r26
    12b0:	bf 93       	push	r27
    12b2:	cf 93       	push	r28
    12b4:	df 93       	push	r29
    12b6:	ef 93       	push	r30
    12b8:	ff 93       	push	r31
    12ba:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    12be:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    12c2:	0d b6       	in	r0, 0x3d	; 61
    12c4:	0d 92       	st	X+, r0
    12c6:	0e b6       	in	r0, 0x3e	; 62
    12c8:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    12ca:	0e 94 82 14 	call	0x2904	; 0x2904 <xTaskIncrementTick>
    12ce:	88 23       	and	r24, r24
    12d0:	11 f0       	breq	.+4      	; 0x12d6 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    12d2:	0e 94 6e 15 	call	0x2adc	; 0x2adc <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    12d6:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    12da:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    12de:	cd 91       	ld	r28, X+
    12e0:	cd bf       	out	0x3d, r28	; 61
    12e2:	dd 91       	ld	r29, X+
    12e4:	de bf       	out	0x3e, r29	; 62
    12e6:	ff 91       	pop	r31
    12e8:	ef 91       	pop	r30
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	bf 91       	pop	r27
    12f0:	af 91       	pop	r26
    12f2:	9f 91       	pop	r25
    12f4:	8f 91       	pop	r24
    12f6:	7f 91       	pop	r23
    12f8:	6f 91       	pop	r22
    12fa:	5f 91       	pop	r21
    12fc:	4f 91       	pop	r20
    12fe:	3f 91       	pop	r19
    1300:	2f 91       	pop	r18
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	ff 90       	pop	r15
    1308:	ef 90       	pop	r14
    130a:	df 90       	pop	r13
    130c:	cf 90       	pop	r12
    130e:	bf 90       	pop	r11
    1310:	af 90       	pop	r10
    1312:	9f 90       	pop	r9
    1314:	8f 90       	pop	r8
    1316:	7f 90       	pop	r7
    1318:	6f 90       	pop	r6
    131a:	5f 90       	pop	r5
    131c:	4f 90       	pop	r4
    131e:	3f 90       	pop	r3
    1320:	2f 90       	pop	r2
    1322:	1f 90       	pop	r1
    1324:	0f 90       	pop	r0
    1326:	0f be       	out	0x3f, r0	; 63
    1328:	0f 90       	pop	r0

	asm volatile ( "ret" );
    132a:	08 95       	ret

0000132c <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 d0       	rcall	.+0      	; 0x1332 <prvSetupTimerInterrupt+0x6>
    1332:	00 d0       	rcall	.+0      	; 0x1334 <prvSetupTimerInterrupt+0x8>
    1334:	00 d0       	rcall	.+0      	; 0x1336 <prvSetupTimerInterrupt+0xa>
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    133a:	89 e9       	ldi	r24, 0x99	; 153
    133c:	99 e3       	ldi	r25, 0x39	; 57
    133e:	a0 e0       	ldi	r26, 0x00	; 0
    1340:	b0 e0       	ldi	r27, 0x00	; 0
    1342:	89 83       	std	Y+1, r24	; 0x01
    1344:	9a 83       	std	Y+2, r25	; 0x02
    1346:	ab 83       	std	Y+3, r26	; 0x03
    1348:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	ab 81       	ldd	r26, Y+3	; 0x03
    1350:	bc 81       	ldd	r27, Y+4	; 0x04
    1352:	68 94       	set
    1354:	15 f8       	bld	r1, 5
    1356:	b6 95       	lsr	r27
    1358:	a7 95       	ror	r26
    135a:	97 95       	ror	r25
    135c:	87 95       	ror	r24
    135e:	16 94       	lsr	r1
    1360:	d1 f7       	brne	.-12     	; 0x1356 <prvSetupTimerInterrupt+0x2a>
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	9a 83       	std	Y+2, r25	; 0x02
    1366:	ab 83       	std	Y+3, r26	; 0x03
    1368:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    136a:	89 81       	ldd	r24, Y+1	; 0x01
    136c:	9a 81       	ldd	r25, Y+2	; 0x02
    136e:	ab 81       	ldd	r26, Y+3	; 0x03
    1370:	bc 81       	ldd	r27, Y+4	; 0x04
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	a1 09       	sbc	r26, r1
    1376:	b1 09       	sbc	r27, r1
    1378:	89 83       	std	Y+1, r24	; 0x01
    137a:	9a 83       	std	Y+2, r25	; 0x02
    137c:	ab 83       	std	Y+3, r26	; 0x03
    137e:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1384:	89 81       	ldd	r24, Y+1	; 0x01
    1386:	9a 81       	ldd	r25, Y+2	; 0x02
    1388:	ab 81       	ldd	r26, Y+3	; 0x03
    138a:	bc 81       	ldd	r27, Y+4	; 0x04
    138c:	89 2f       	mov	r24, r25
    138e:	9a 2f       	mov	r25, r26
    1390:	ab 2f       	mov	r26, r27
    1392:	bb 27       	eor	r27, r27
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	9a 83       	std	Y+2, r25	; 0x02
    1398:	ab 83       	std	Y+3, r26	; 0x03
    139a:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    139c:	89 81       	ldd	r24, Y+1	; 0x01
    139e:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    13a0:	89 e8       	ldi	r24, 0x89	; 137
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	2e 81       	ldd	r18, Y+6	; 0x06
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    13aa:	88 e8       	ldi	r24, 0x88	; 136
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	2d 81       	ldd	r18, Y+5	; 0x05
    13b0:	fc 01       	movw	r30, r24
    13b2:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    13b4:	8b e0       	ldi	r24, 0x0B	; 11
    13b6:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    13b8:	81 e8       	ldi	r24, 0x81	; 129
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	2d 81       	ldd	r18, Y+5	; 0x05
    13be:	fc 01       	movw	r30, r24
    13c0:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    13c2:	8f e6       	ldi	r24, 0x6F	; 111
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	fc 01       	movw	r30, r24
    13c8:	80 81       	ld	r24, Z
    13ca:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    13cc:	8d 81       	ldd	r24, Y+5	; 0x05
    13ce:	82 60       	ori	r24, 0x02	; 2
    13d0:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    13d2:	8f e6       	ldi	r24, 0x6F	; 111
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	fc 01       	movw	r30, r24
    13da:	20 83       	st	Z, r18
}
    13dc:	26 96       	adiw	r28, 0x06	; 6
    13de:	0f b6       	in	r0, 0x3f	; 63
    13e0:	f8 94       	cli
    13e2:	de bf       	out	0x3e, r29	; 62
    13e4:	0f be       	out	0x3f, r0	; 63
    13e6:	cd bf       	out	0x3d, r28	; 61
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	08 95       	ret

000013ee <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    13ee:	0e 94 39 09 	call	0x1272	; 0x1272 <vPortYieldFromTick>
		asm volatile ( "reti" );
    13f2:	18 95       	reti

000013f4 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    13f4:	cf 93       	push	r28
    13f6:	df 93       	push	r29
    13f8:	00 d0       	rcall	.+0      	; 0x13fa <pvPortMalloc+0x6>
    13fa:	00 d0       	rcall	.+0      	; 0x13fc <pvPortMalloc+0x8>
    13fc:	cd b7       	in	r28, 0x3d	; 61
    13fe:	de b7       	in	r29, 0x3e	; 62
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1404:	1a 82       	std	Y+2, r1	; 0x02
    1406:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1408:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    140c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    1410:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    1414:	89 2b       	or	r24, r25
    1416:	31 f4       	brne	.+12     	; 0x1424 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1418:	81 e8       	ldi	r24, 0x81	; 129
    141a:	91 e0       	ldi	r25, 0x01	; 1
    141c:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <pucAlignedHeap.1965+0x1>
    1420:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1424:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    1428:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    142c:	8b 81       	ldd	r24, Y+3	; 0x03
    142e:	9c 81       	ldd	r25, Y+4	; 0x04
    1430:	82 0f       	add	r24, r18
    1432:	93 1f       	adc	r25, r19
    1434:	87 3e       	cpi	r24, 0xE7	; 231
    1436:	93 40       	sbci	r25, 0x03	; 3
    1438:	38 f5       	brcc	.+78     	; 0x1488 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    143a:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    143e:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	28 0f       	add	r18, r24
    1448:	39 1f       	adc	r19, r25
    144a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    144e:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1452:	82 17       	cp	r24, r18
    1454:	93 07       	cpc	r25, r19
    1456:	c0 f4       	brcc	.+48     	; 0x1488 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1458:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    145c:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    1460:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    1464:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1468:	82 0f       	add	r24, r18
    146a:	93 1f       	adc	r25, r19
    146c:	9a 83       	std	Y+2, r25	; 0x02
    146e:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1470:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    1474:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	82 0f       	add	r24, r18
    147e:	93 1f       	adc	r25, r19
    1480:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <xNextFreeByte+0x1>
    1484:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1488:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1490:	0f 90       	pop	r0
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    149e:	cf 93       	push	r28
    14a0:	df 93       	push	r29
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <vPortFree+0x6>
    14a4:	cd b7       	in	r28, 0x3d	; 61
    14a6:	de b7       	in	r29, 0x3e	; 62
    14a8:	9a 83       	std	Y+2, r25	; 0x02
    14aa:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	df 91       	pop	r29
    14b2:	cf 91       	pop	r28
    14b4:	08 95       	ret

000014b6 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    14b6:	8f 92       	push	r8
    14b8:	9f 92       	push	r9
    14ba:	af 92       	push	r10
    14bc:	bf 92       	push	r11
    14be:	cf 92       	push	r12
    14c0:	df 92       	push	r13
    14c2:	ef 92       	push	r14
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	cf 93       	push	r28
    14ca:	df 93       	push	r29
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	65 97       	sbiw	r28, 0x15	; 21
    14d2:	0f b6       	in	r0, 0x3f	; 63
    14d4:	f8 94       	cli
    14d6:	de bf       	out	0x3e, r29	; 62
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	cd bf       	out	0x3d, r28	; 61
    14dc:	8c 83       	std	Y+4, r24	; 0x04
    14de:	4d 83       	std	Y+5, r20	; 0x05
    14e0:	5e 83       	std	Y+6, r21	; 0x06
    14e2:	6f 83       	std	Y+7, r22	; 0x07
    14e4:	78 87       	std	Y+8, r23	; 0x08
    14e6:	29 87       	std	Y+9, r18	; 0x09
    14e8:	0a 87       	std	Y+10, r16	; 0x0a
    14ea:	eb 86       	std	Y+11, r14	; 0x0b
    14ec:	dd 86       	std	Y+13, r13	; 0x0d
    14ee:	cc 86       	std	Y+12, r12	; 0x0c
    14f0:	bf 86       	std	Y+15, r11	; 0x0f
    14f2:	ae 86       	std	Y+14, r10	; 0x0e
    14f4:	99 8a       	std	Y+17, r9	; 0x11
    14f6:	88 8a       	std	Y+16, r8	; 0x10
    14f8:	88 e0       	ldi	r24, 0x08	; 8
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 c8 19 	call	0x3390	; 0x3390 <malloc>
    1500:	9a 83       	std	Y+2, r25	; 0x02
    1502:	89 83       	std	Y+1, r24	; 0x01
    1504:	8c 81       	ldd	r24, Y+4	; 0x04
    1506:	88 2f       	mov	r24, r24
    1508:	90 e0       	ldi	r25, 0x00	; 0
    150a:	88 0f       	add	r24, r24
    150c:	99 1f       	adc	r25, r25
    150e:	84 59       	subi	r24, 0x94	; 148
    1510:	9a 4f       	sbci	r25, 0xFA	; 250
    1512:	29 81       	ldd	r18, Y+1	; 0x01
    1514:	3a 81       	ldd	r19, Y+2	; 0x02
    1516:	fc 01       	movw	r30, r24
    1518:	31 83       	std	Z+1, r19	; 0x01
    151a:	20 83       	st	Z, r18
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	88 2f       	mov	r24, r24
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	88 5d       	subi	r24, 0xD8	; 216
    1528:	9e 4f       	sbci	r25, 0xFE	; 254
    152a:	fc 01       	movw	r30, r24
    152c:	20 81       	ld	r18, Z
    152e:	31 81       	ldd	r19, Z+1	; 0x01
    1530:	89 81       	ldd	r24, Y+1	; 0x01
    1532:	9a 81       	ldd	r25, Y+2	; 0x02
    1534:	fc 01       	movw	r30, r24
    1536:	31 83       	std	Z+1, r19	; 0x01
    1538:	20 83       	st	Z, r18
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	9a 81       	ldd	r25, Y+2	; 0x02
    153e:	2e 85       	ldd	r18, Y+14	; 0x0e
    1540:	3f 85       	ldd	r19, Y+15	; 0x0f
    1542:	fc 01       	movw	r30, r24
    1544:	33 83       	std	Z+3, r19	; 0x03
    1546:	22 83       	std	Z+2, r18	; 0x02
    1548:	89 81       	ldd	r24, Y+1	; 0x01
    154a:	9a 81       	ldd	r25, Y+2	; 0x02
    154c:	2c 85       	ldd	r18, Y+12	; 0x0c
    154e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1550:	fc 01       	movw	r30, r24
    1552:	35 83       	std	Z+5, r19	; 0x05
    1554:	24 83       	std	Z+4, r18	; 0x04
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	28 89       	ldd	r18, Y+16	; 0x10
    155c:	39 89       	ldd	r19, Y+17	; 0x11
    155e:	fc 01       	movw	r30, r24
    1560:	37 83       	std	Z+7, r19	; 0x07
    1562:	26 83       	std	Z+6, r18	; 0x06
    1564:	8f e5       	ldi	r24, 0x5F	; 95
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	fc 01       	movw	r30, r24
    156a:	80 81       	ld	r24, Z
    156c:	8b 83       	std	Y+3, r24	; 0x03
    156e:	f8 94       	cli
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	9a 81       	ldd	r25, Y+2	; 0x02
    1574:	fc 01       	movw	r30, r24
    1576:	80 81       	ld	r24, Z
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	06 97       	sbiw	r24, 0x06	; 6
    157c:	29 81       	ldd	r18, Y+1	; 0x01
    157e:	3a 81       	ldd	r19, Y+2	; 0x02
    1580:	f9 01       	movw	r30, r18
    1582:	20 81       	ld	r18, Z
    1584:	31 81       	ldd	r19, Z+1	; 0x01
    1586:	26 50       	subi	r18, 0x06	; 6
    1588:	31 09       	sbc	r19, r1
    158a:	f9 01       	movw	r30, r18
    158c:	20 81       	ld	r18, Z
    158e:	22 60       	ori	r18, 0x02	; 2
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	9a 81       	ldd	r25, Y+2	; 0x02
    1598:	fc 01       	movw	r30, r24
    159a:	80 81       	ld	r24, Z
    159c:	91 81       	ldd	r25, Z+1	; 0x01
    159e:	8c 01       	movw	r16, r24
    15a0:	02 50       	subi	r16, 0x02	; 2
    15a2:	11 09       	sbc	r17, r1
    15a4:	8d 81       	ldd	r24, Y+5	; 0x05
    15a6:	9e 81       	ldd	r25, Y+6	; 0x06
    15a8:	af 81       	ldd	r26, Y+7	; 0x07
    15aa:	b8 85       	ldd	r27, Y+8	; 0x08
    15ac:	88 0f       	add	r24, r24
    15ae:	99 1f       	adc	r25, r25
    15b0:	aa 1f       	adc	r26, r26
    15b2:	bb 1f       	adc	r27, r27
    15b4:	88 0f       	add	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	aa 1f       	adc	r26, r26
    15ba:	bb 1f       	adc	r27, r27
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	aa 1f       	adc	r26, r26
    15c2:	bb 1f       	adc	r27, r27
    15c4:	9c 01       	movw	r18, r24
    15c6:	ad 01       	movw	r20, r26
    15c8:	80 e0       	ldi	r24, 0x00	; 0
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	a1 ee       	ldi	r26, 0xE1	; 225
    15ce:	b0 e0       	ldi	r27, 0x00	; 0
    15d0:	bc 01       	movw	r22, r24
    15d2:	cd 01       	movw	r24, r26
    15d4:	0e 94 8c 19 	call	0x3318	; 0x3318 <__udivmodsi4>
    15d8:	da 01       	movw	r26, r20
    15da:	c9 01       	movw	r24, r18
    15dc:	81 50       	subi	r24, 0x01	; 1
    15de:	f8 01       	movw	r30, r16
    15e0:	80 83       	st	Z, r24
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	9a 81       	ldd	r25, Y+2	; 0x02
    15e6:	fc 01       	movw	r30, r24
    15e8:	80 81       	ld	r24, Z
    15ea:	91 81       	ldd	r25, Z+1	; 0x01
    15ec:	05 97       	sbiw	r24, 0x05	; 5
    15ee:	28 e9       	ldi	r18, 0x98	; 152
    15f0:	fc 01       	movw	r30, r24
    15f2:	20 83       	st	Z, r18
    15f4:	89 81       	ldd	r24, Y+1	; 0x01
    15f6:	9a 81       	ldd	r25, Y+2	; 0x02
    15f8:	fc 01       	movw	r30, r24
    15fa:	80 81       	ld	r24, Z
    15fc:	91 81       	ldd	r25, Z+1	; 0x01
    15fe:	04 97       	sbiw	r24, 0x04	; 4
    1600:	26 e0       	ldi	r18, 0x06	; 6
    1602:	fc 01       	movw	r30, r24
    1604:	20 83       	st	Z, r18
    1606:	8f e5       	ldi	r24, 0x5F	; 95
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	fc 01       	movw	r30, r24
    160e:	20 83       	st	Z, r18
    1610:	89 81       	ldd	r24, Y+1	; 0x01
    1612:	9a 81       	ldd	r25, Y+2	; 0x02
    1614:	65 96       	adiw	r28, 0x15	; 21
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	de bf       	out	0x3e, r29	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	cd bf       	out	0x3d, r28	; 61
    1620:	df 91       	pop	r29
    1622:	cf 91       	pop	r28
    1624:	1f 91       	pop	r17
    1626:	0f 91       	pop	r16
    1628:	ef 90       	pop	r14
    162a:	df 90       	pop	r13
    162c:	cf 90       	pop	r12
    162e:	bf 90       	pop	r11
    1630:	af 90       	pop	r10
    1632:	9f 90       	pop	r9
    1634:	8f 90       	pop	r8
    1636:	08 95       	ret

00001638 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1638:	1f 92       	push	r1
    163a:	0f 92       	push	r0
    163c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1640:	0f 92       	push	r0
    1642:	11 24       	eor	r1, r1
    1644:	2f 93       	push	r18
    1646:	3f 93       	push	r19
    1648:	4f 93       	push	r20
    164a:	5f 93       	push	r21
    164c:	6f 93       	push	r22
    164e:	7f 93       	push	r23
    1650:	8f 93       	push	r24
    1652:	9f 93       	push	r25
    1654:	af 93       	push	r26
    1656:	bf 93       	push	r27
    1658:	ef 93       	push	r30
    165a:	ff 93       	push	r31
    165c:	cf 93       	push	r28
    165e:	df 93       	push	r29
    1660:	1f 92       	push	r1
    1662:	cd b7       	in	r28, 0x3d	; 61
    1664:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1666:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    166a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    166e:	89 2b       	or	r24, r25
    1670:	31 f1       	breq	.+76     	; 0x16be <__vector_20+0x86>
		item = UDR0;
    1672:	86 ec       	ldi	r24, 0xC6	; 198
    1674:	90 e0       	ldi	r25, 0x00	; 0
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    167c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1680:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1684:	fc 01       	movw	r30, r24
    1686:	84 81       	ldd	r24, Z+4	; 0x04
    1688:	95 81       	ldd	r25, Z+5	; 0x05
    168a:	69 81       	ldd	r22, Y+1	; 0x01
    168c:	0e 94 5d 05 	call	0xaba	; 0xaba <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1690:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1694:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1698:	fc 01       	movw	r30, r24
    169a:	86 81       	ldd	r24, Z+6	; 0x06
    169c:	97 81       	ldd	r25, Z+7	; 0x07
    169e:	89 2b       	or	r24, r25
    16a0:	71 f0       	breq	.+28     	; 0x16be <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    16a2:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    16a6:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    16aa:	fc 01       	movw	r30, r24
    16ac:	26 81       	ldd	r18, Z+6	; 0x06
    16ae:	37 81       	ldd	r19, Z+7	; 0x07
    16b0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    16b4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    16b8:	69 81       	ldd	r22, Y+1	; 0x01
    16ba:	f9 01       	movw	r30, r18
    16bc:	09 95       	icall
		}
	}
}
    16be:	0f 90       	pop	r0
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	ff 91       	pop	r31
    16c6:	ef 91       	pop	r30
    16c8:	bf 91       	pop	r27
    16ca:	af 91       	pop	r26
    16cc:	9f 91       	pop	r25
    16ce:	8f 91       	pop	r24
    16d0:	7f 91       	pop	r23
    16d2:	6f 91       	pop	r22
    16d4:	5f 91       	pop	r21
    16d6:	4f 91       	pop	r20
    16d8:	3f 91       	pop	r19
    16da:	2f 91       	pop	r18
    16dc:	0f 90       	pop	r0
    16de:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16e2:	0f 90       	pop	r0
    16e4:	1f 90       	pop	r1
    16e6:	18 95       	reti

000016e8 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    16e8:	1f 92       	push	r1
    16ea:	0f 92       	push	r0
    16ec:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    16f0:	0f 92       	push	r0
    16f2:	11 24       	eor	r1, r1
    16f4:	2f 93       	push	r18
    16f6:	3f 93       	push	r19
    16f8:	4f 93       	push	r20
    16fa:	5f 93       	push	r21
    16fc:	6f 93       	push	r22
    16fe:	7f 93       	push	r23
    1700:	8f 93       	push	r24
    1702:	9f 93       	push	r25
    1704:	af 93       	push	r26
    1706:	bf 93       	push	r27
    1708:	ef 93       	push	r30
    170a:	ff 93       	push	r31
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	1f 92       	push	r1
    1712:	cd b7       	in	r28, 0x3d	; 61
    1714:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1716:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    171a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    171e:	89 2b       	or	r24, r25
    1720:	f9 f0       	breq	.+62     	; 0x1760 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1722:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1726:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    172a:	fc 01       	movw	r30, r24
    172c:	82 81       	ldd	r24, Z+2	; 0x02
    172e:	93 81       	ldd	r25, Z+3	; 0x03
    1730:	9e 01       	movw	r18, r28
    1732:	2f 5f       	subi	r18, 0xFF	; 255
    1734:	3f 4f       	sbci	r19, 0xFF	; 255
    1736:	b9 01       	movw	r22, r18
    1738:	0e 94 15 05 	call	0xa2a	; 0xa2a <buffer_get_item>
    173c:	88 23       	and	r24, r24
    173e:	31 f4       	brne	.+12     	; 0x174c <__vector_21+0x64>
			UDR0 = item;
    1740:	86 ec       	ldi	r24, 0xC6	; 198
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	29 81       	ldd	r18, Y+1	; 0x01
    1746:	fc 01       	movw	r30, r24
    1748:	20 83       	st	Z, r18
    174a:	13 c0       	rjmp	.+38     	; 0x1772 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    174c:	81 ec       	ldi	r24, 0xC1	; 193
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	21 ec       	ldi	r18, 0xC1	; 193
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	f9 01       	movw	r30, r18
    1756:	20 81       	ld	r18, Z
    1758:	2f 7d       	andi	r18, 0xDF	; 223
    175a:	fc 01       	movw	r30, r24
    175c:	20 83       	st	Z, r18
    175e:	09 c0       	rjmp	.+18     	; 0x1772 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1760:	81 ec       	ldi	r24, 0xC1	; 193
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	21 ec       	ldi	r18, 0xC1	; 193
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	f9 01       	movw	r30, r18
    176a:	20 81       	ld	r18, Z
    176c:	2f 7d       	andi	r18, 0xDF	; 223
    176e:	fc 01       	movw	r30, r24
    1770:	20 83       	st	Z, r18
	}
}
    1772:	0f 90       	pop	r0
    1774:	df 91       	pop	r29
    1776:	cf 91       	pop	r28
    1778:	ff 91       	pop	r31
    177a:	ef 91       	pop	r30
    177c:	bf 91       	pop	r27
    177e:	af 91       	pop	r26
    1780:	9f 91       	pop	r25
    1782:	8f 91       	pop	r24
    1784:	7f 91       	pop	r23
    1786:	6f 91       	pop	r22
    1788:	5f 91       	pop	r21
    178a:	4f 91       	pop	r20
    178c:	3f 91       	pop	r19
    178e:	2f 91       	pop	r18
    1790:	0f 90       	pop	r0
    1792:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1796:	0f 90       	pop	r0
    1798:	1f 90       	pop	r1
    179a:	18 95       	reti

0000179c <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    179c:	1f 92       	push	r1
    179e:	0f 92       	push	r0
    17a0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17a4:	0f 92       	push	r0
    17a6:	11 24       	eor	r1, r1
    17a8:	2f 93       	push	r18
    17aa:	3f 93       	push	r19
    17ac:	4f 93       	push	r20
    17ae:	5f 93       	push	r21
    17b0:	6f 93       	push	r22
    17b2:	7f 93       	push	r23
    17b4:	8f 93       	push	r24
    17b6:	9f 93       	push	r25
    17b8:	af 93       	push	r26
    17ba:	bf 93       	push	r27
    17bc:	ef 93       	push	r30
    17be:	ff 93       	push	r31
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	1f 92       	push	r1
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    17ca:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    17ce:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    17d2:	89 2b       	or	r24, r25
    17d4:	31 f1       	breq	.+76     	; 0x1822 <__vector_28+0x86>
		item = UDR1;
    17d6:	8e ec       	ldi	r24, 0xCE	; 206
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	fc 01       	movw	r30, r24
    17dc:	80 81       	ld	r24, Z
    17de:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    17e0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    17e4:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    17e8:	fc 01       	movw	r30, r24
    17ea:	84 81       	ldd	r24, Z+4	; 0x04
    17ec:	95 81       	ldd	r25, Z+5	; 0x05
    17ee:	69 81       	ldd	r22, Y+1	; 0x01
    17f0:	0e 94 5d 05 	call	0xaba	; 0xaba <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    17f4:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    17f8:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    17fc:	fc 01       	movw	r30, r24
    17fe:	86 81       	ldd	r24, Z+6	; 0x06
    1800:	97 81       	ldd	r25, Z+7	; 0x07
    1802:	89 2b       	or	r24, r25
    1804:	71 f0       	breq	.+28     	; 0x1822 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1806:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    180a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    180e:	fc 01       	movw	r30, r24
    1810:	26 81       	ldd	r18, Z+6	; 0x06
    1812:	37 81       	ldd	r19, Z+7	; 0x07
    1814:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1818:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    181c:	69 81       	ldd	r22, Y+1	; 0x01
    181e:	f9 01       	movw	r30, r18
    1820:	09 95       	icall
		}
	}
}
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	ff 91       	pop	r31
    182a:	ef 91       	pop	r30
    182c:	bf 91       	pop	r27
    182e:	af 91       	pop	r26
    1830:	9f 91       	pop	r25
    1832:	8f 91       	pop	r24
    1834:	7f 91       	pop	r23
    1836:	6f 91       	pop	r22
    1838:	5f 91       	pop	r21
    183a:	4f 91       	pop	r20
    183c:	3f 91       	pop	r19
    183e:	2f 91       	pop	r18
    1840:	0f 90       	pop	r0
    1842:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1846:	0f 90       	pop	r0
    1848:	1f 90       	pop	r1
    184a:	18 95       	reti

0000184c <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    184c:	1f 92       	push	r1
    184e:	0f 92       	push	r0
    1850:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1854:	0f 92       	push	r0
    1856:	11 24       	eor	r1, r1
    1858:	2f 93       	push	r18
    185a:	3f 93       	push	r19
    185c:	4f 93       	push	r20
    185e:	5f 93       	push	r21
    1860:	6f 93       	push	r22
    1862:	7f 93       	push	r23
    1864:	8f 93       	push	r24
    1866:	9f 93       	push	r25
    1868:	af 93       	push	r26
    186a:	bf 93       	push	r27
    186c:	ef 93       	push	r30
    186e:	ff 93       	push	r31
    1870:	cf 93       	push	r28
    1872:	df 93       	push	r29
    1874:	1f 92       	push	r1
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    187a:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    187e:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1882:	89 2b       	or	r24, r25
    1884:	f9 f0       	breq	.+62     	; 0x18c4 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1886:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    188a:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    188e:	fc 01       	movw	r30, r24
    1890:	82 81       	ldd	r24, Z+2	; 0x02
    1892:	93 81       	ldd	r25, Z+3	; 0x03
    1894:	9e 01       	movw	r18, r28
    1896:	2f 5f       	subi	r18, 0xFF	; 255
    1898:	3f 4f       	sbci	r19, 0xFF	; 255
    189a:	b9 01       	movw	r22, r18
    189c:	0e 94 15 05 	call	0xa2a	; 0xa2a <buffer_get_item>
    18a0:	88 23       	and	r24, r24
    18a2:	31 f4       	brne	.+12     	; 0x18b0 <__vector_29+0x64>
			UDR1 = item;
    18a4:	8e ec       	ldi	r24, 0xCE	; 206
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	29 81       	ldd	r18, Y+1	; 0x01
    18aa:	fc 01       	movw	r30, r24
    18ac:	20 83       	st	Z, r18
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    18b0:	89 ec       	ldi	r24, 0xC9	; 201
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	29 ec       	ldi	r18, 0xC9	; 201
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	f9 01       	movw	r30, r18
    18ba:	20 81       	ld	r18, Z
    18bc:	2f 7d       	andi	r18, 0xDF	; 223
    18be:	fc 01       	movw	r30, r24
    18c0:	20 83       	st	Z, r18
    18c2:	09 c0       	rjmp	.+18     	; 0x18d6 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    18c4:	89 ec       	ldi	r24, 0xC9	; 201
    18c6:	90 e0       	ldi	r25, 0x00	; 0
    18c8:	29 ec       	ldi	r18, 0xC9	; 201
    18ca:	30 e0       	ldi	r19, 0x00	; 0
    18cc:	f9 01       	movw	r30, r18
    18ce:	20 81       	ld	r18, Z
    18d0:	2f 7d       	andi	r18, 0xDF	; 223
    18d2:	fc 01       	movw	r30, r24
    18d4:	20 83       	st	Z, r18
	}
}
    18d6:	0f 90       	pop	r0
    18d8:	df 91       	pop	r29
    18da:	cf 91       	pop	r28
    18dc:	ff 91       	pop	r31
    18de:	ef 91       	pop	r30
    18e0:	bf 91       	pop	r27
    18e2:	af 91       	pop	r26
    18e4:	9f 91       	pop	r25
    18e6:	8f 91       	pop	r24
    18e8:	7f 91       	pop	r23
    18ea:	6f 91       	pop	r22
    18ec:	5f 91       	pop	r21
    18ee:	4f 91       	pop	r20
    18f0:	3f 91       	pop	r19
    18f2:	2f 91       	pop	r18
    18f4:	0f 90       	pop	r0
    18f6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18fa:	0f 90       	pop	r0
    18fc:	1f 90       	pop	r1
    18fe:	18 95       	reti

00001900 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	00 d0       	rcall	.+0      	; 0x1906 <xQueueGenericReset+0x6>
    1906:	00 d0       	rcall	.+0      	; 0x1908 <xQueueGenericReset+0x8>
    1908:	1f 92       	push	r1
    190a:	cd b7       	in	r28, 0x3d	; 61
    190c:	de b7       	in	r29, 0x3e	; 62
    190e:	9c 83       	std	Y+4, r25	; 0x04
    1910:	8b 83       	std	Y+3, r24	; 0x03
    1912:	6d 83       	std	Y+5, r22	; 0x05
    1914:	8b 81       	ldd	r24, Y+3	; 0x03
    1916:	9c 81       	ldd	r25, Y+4	; 0x04
    1918:	9a 83       	std	Y+2, r25	; 0x02
    191a:	89 83       	std	Y+1, r24	; 0x01
    191c:	0f b6       	in	r0, 0x3f	; 63
    191e:	f8 94       	cli
    1920:	0f 92       	push	r0
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	9a 81       	ldd	r25, Y+2	; 0x02
    1926:	fc 01       	movw	r30, r24
    1928:	80 81       	ld	r24, Z
    192a:	91 81       	ldd	r25, Z+1	; 0x01
    192c:	29 81       	ldd	r18, Y+1	; 0x01
    192e:	3a 81       	ldd	r19, Y+2	; 0x02
    1930:	f9 01       	movw	r30, r18
    1932:	23 8d       	ldd	r18, Z+27	; 0x1b
    1934:	42 2f       	mov	r20, r18
    1936:	50 e0       	ldi	r21, 0x00	; 0
    1938:	29 81       	ldd	r18, Y+1	; 0x01
    193a:	3a 81       	ldd	r19, Y+2	; 0x02
    193c:	f9 01       	movw	r30, r18
    193e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1940:	22 2f       	mov	r18, r18
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	42 9f       	mul	r20, r18
    1946:	b0 01       	movw	r22, r0
    1948:	43 9f       	mul	r20, r19
    194a:	70 0d       	add	r23, r0
    194c:	52 9f       	mul	r21, r18
    194e:	70 0d       	add	r23, r0
    1950:	11 24       	eor	r1, r1
    1952:	9b 01       	movw	r18, r22
    1954:	28 0f       	add	r18, r24
    1956:	39 1f       	adc	r19, r25
    1958:	89 81       	ldd	r24, Y+1	; 0x01
    195a:	9a 81       	ldd	r25, Y+2	; 0x02
    195c:	fc 01       	movw	r30, r24
    195e:	33 83       	std	Z+3, r19	; 0x03
    1960:	22 83       	std	Z+2, r18	; 0x02
    1962:	89 81       	ldd	r24, Y+1	; 0x01
    1964:	9a 81       	ldd	r25, Y+2	; 0x02
    1966:	fc 01       	movw	r30, r24
    1968:	12 8e       	std	Z+26, r1	; 0x1a
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	9a 81       	ldd	r25, Y+2	; 0x02
    196e:	fc 01       	movw	r30, r24
    1970:	20 81       	ld	r18, Z
    1972:	31 81       	ldd	r19, Z+1	; 0x01
    1974:	89 81       	ldd	r24, Y+1	; 0x01
    1976:	9a 81       	ldd	r25, Y+2	; 0x02
    1978:	fc 01       	movw	r30, r24
    197a:	35 83       	std	Z+5, r19	; 0x05
    197c:	24 83       	std	Z+4, r18	; 0x04
    197e:	89 81       	ldd	r24, Y+1	; 0x01
    1980:	9a 81       	ldd	r25, Y+2	; 0x02
    1982:	fc 01       	movw	r30, r24
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	29 81       	ldd	r18, Y+1	; 0x01
    198a:	3a 81       	ldd	r19, Y+2	; 0x02
    198c:	f9 01       	movw	r30, r18
    198e:	23 8d       	ldd	r18, Z+27	; 0x1b
    1990:	22 2f       	mov	r18, r18
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	a9 01       	movw	r20, r18
    1996:	41 50       	subi	r20, 0x01	; 1
    1998:	51 09       	sbc	r21, r1
    199a:	29 81       	ldd	r18, Y+1	; 0x01
    199c:	3a 81       	ldd	r19, Y+2	; 0x02
    199e:	f9 01       	movw	r30, r18
    19a0:	24 8d       	ldd	r18, Z+28	; 0x1c
    19a2:	22 2f       	mov	r18, r18
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	42 9f       	mul	r20, r18
    19a8:	b0 01       	movw	r22, r0
    19aa:	43 9f       	mul	r20, r19
    19ac:	70 0d       	add	r23, r0
    19ae:	52 9f       	mul	r21, r18
    19b0:	70 0d       	add	r23, r0
    19b2:	11 24       	eor	r1, r1
    19b4:	9b 01       	movw	r18, r22
    19b6:	28 0f       	add	r18, r24
    19b8:	39 1f       	adc	r19, r25
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	fc 01       	movw	r30, r24
    19c0:	37 83       	std	Z+7, r19	; 0x07
    19c2:	26 83       	std	Z+6, r18	; 0x06
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	2f ef       	ldi	r18, 0xFF	; 255
    19ca:	fc 01       	movw	r30, r24
    19cc:	25 8f       	std	Z+29, r18	; 0x1d
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	9a 81       	ldd	r25, Y+2	; 0x02
    19d2:	2f ef       	ldi	r18, 0xFF	; 255
    19d4:	fc 01       	movw	r30, r24
    19d6:	26 8f       	std	Z+30, r18	; 0x1e
    19d8:	8d 81       	ldd	r24, Y+5	; 0x05
    19da:	88 23       	and	r24, r24
    19dc:	81 f4       	brne	.+32     	; 0x19fe <xQueueGenericReset+0xfe>
    19de:	89 81       	ldd	r24, Y+1	; 0x01
    19e0:	9a 81       	ldd	r25, Y+2	; 0x02
    19e2:	fc 01       	movw	r30, r24
    19e4:	80 85       	ldd	r24, Z+8	; 0x08
    19e6:	88 23       	and	r24, r24
    19e8:	a1 f0       	breq	.+40     	; 0x1a12 <xQueueGenericReset+0x112>
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	9a 81       	ldd	r25, Y+2	; 0x02
    19ee:	08 96       	adiw	r24, 0x08	; 8
    19f0:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    19f4:	88 23       	and	r24, r24
    19f6:	69 f0       	breq	.+26     	; 0x1a12 <xQueueGenericReset+0x112>
    19f8:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    19fc:	0a c0       	rjmp	.+20     	; 0x1a12 <xQueueGenericReset+0x112>
    19fe:	89 81       	ldd	r24, Y+1	; 0x01
    1a00:	9a 81       	ldd	r25, Y+2	; 0x02
    1a02:	08 96       	adiw	r24, 0x08	; 8
    1a04:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	41 96       	adiw	r24, 0x11	; 17
    1a0e:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    1a12:	0f 90       	pop	r0
    1a14:	0f be       	out	0x3f, r0	; 63
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	0f 90       	pop	r0
    1a1a:	0f 90       	pop	r0
    1a1c:	0f 90       	pop	r0
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	08 95       	ret

00001a28 <xQueueGenericCreate>:
    1a28:	0f 93       	push	r16
    1a2a:	1f 93       	push	r17
    1a2c:	cf 93       	push	r28
    1a2e:	df 93       	push	r29
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	29 97       	sbiw	r28, 0x09	; 9
    1a36:	0f b6       	in	r0, 0x3f	; 63
    1a38:	f8 94       	cli
    1a3a:	de bf       	out	0x3e, r29	; 62
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	cd bf       	out	0x3d, r28	; 61
    1a40:	8f 83       	std	Y+7, r24	; 0x07
    1a42:	68 87       	std	Y+8, r22	; 0x08
    1a44:	49 87       	std	Y+9, r20	; 0x09
    1a46:	88 85       	ldd	r24, Y+8	; 0x08
    1a48:	88 23       	and	r24, r24
    1a4a:	19 f4       	brne	.+6      	; 0x1a52 <xQueueGenericCreate+0x2a>
    1a4c:	1a 82       	std	Y+2, r1	; 0x02
    1a4e:	19 82       	std	Y+1, r1	; 0x01
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <xQueueGenericCreate+0x48>
    1a52:	8f 81       	ldd	r24, Y+7	; 0x07
    1a54:	48 2f       	mov	r20, r24
    1a56:	50 e0       	ldi	r21, 0x00	; 0
    1a58:	88 85       	ldd	r24, Y+8	; 0x08
    1a5a:	28 2f       	mov	r18, r24
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	42 9f       	mul	r20, r18
    1a60:	c0 01       	movw	r24, r0
    1a62:	43 9f       	mul	r20, r19
    1a64:	90 0d       	add	r25, r0
    1a66:	52 9f       	mul	r21, r18
    1a68:	90 0d       	add	r25, r0
    1a6a:	11 24       	eor	r1, r1
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    1a70:	89 81       	ldd	r24, Y+1	; 0x01
    1a72:	9a 81       	ldd	r25, Y+2	; 0x02
    1a74:	81 96       	adiw	r24, 0x21	; 33
    1a76:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pvPortMalloc>
    1a7a:	9c 83       	std	Y+4, r25	; 0x04
    1a7c:	8b 83       	std	Y+3, r24	; 0x03
    1a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a80:	9c 81       	ldd	r25, Y+4	; 0x04
    1a82:	89 2b       	or	r24, r25
    1a84:	81 f0       	breq	.+32     	; 0x1aa6 <xQueueGenericCreate+0x7e>
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	81 96       	adiw	r24, 0x21	; 33
    1a8c:	9e 83       	std	Y+6, r25	; 0x06
    1a8e:	8d 83       	std	Y+5, r24	; 0x05
    1a90:	2b 81       	ldd	r18, Y+3	; 0x03
    1a92:	3c 81       	ldd	r19, Y+4	; 0x04
    1a94:	8d 81       	ldd	r24, Y+5	; 0x05
    1a96:	9e 81       	ldd	r25, Y+6	; 0x06
    1a98:	89 01       	movw	r16, r18
    1a9a:	29 85       	ldd	r18, Y+9	; 0x09
    1a9c:	ac 01       	movw	r20, r24
    1a9e:	68 85       	ldd	r22, Y+8	; 0x08
    1aa0:	8f 81       	ldd	r24, Y+7	; 0x07
    1aa2:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <prvInitialiseNewQueue>
    1aa6:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aaa:	29 96       	adiw	r28, 0x09	; 9
    1aac:	0f b6       	in	r0, 0x3f	; 63
    1aae:	f8 94       	cli
    1ab0:	de bf       	out	0x3e, r29	; 62
    1ab2:	0f be       	out	0x3f, r0	; 63
    1ab4:	cd bf       	out	0x3d, r28	; 61
    1ab6:	df 91       	pop	r29
    1ab8:	cf 91       	pop	r28
    1aba:	1f 91       	pop	r17
    1abc:	0f 91       	pop	r16
    1abe:	08 95       	ret

00001ac0 <prvInitialiseNewQueue>:
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
    1acc:	27 97       	sbiw	r28, 0x07	; 7
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	f8 94       	cli
    1ad2:	de bf       	out	0x3e, r29	; 62
    1ad4:	0f be       	out	0x3f, r0	; 63
    1ad6:	cd bf       	out	0x3d, r28	; 61
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	6a 83       	std	Y+2, r22	; 0x02
    1adc:	5c 83       	std	Y+4, r21	; 0x04
    1ade:	4b 83       	std	Y+3, r20	; 0x03
    1ae0:	2d 83       	std	Y+5, r18	; 0x05
    1ae2:	1f 83       	std	Y+7, r17	; 0x07
    1ae4:	0e 83       	std	Y+6, r16	; 0x06
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	88 23       	and	r24, r24
    1aea:	41 f4       	brne	.+16     	; 0x1afc <prvInitialiseNewQueue+0x3c>
    1aec:	8e 81       	ldd	r24, Y+6	; 0x06
    1aee:	9f 81       	ldd	r25, Y+7	; 0x07
    1af0:	2e 81       	ldd	r18, Y+6	; 0x06
    1af2:	3f 81       	ldd	r19, Y+7	; 0x07
    1af4:	fc 01       	movw	r30, r24
    1af6:	31 83       	std	Z+1, r19	; 0x01
    1af8:	20 83       	st	Z, r18
    1afa:	07 c0       	rjmp	.+14     	; 0x1b0a <prvInitialiseNewQueue+0x4a>
    1afc:	8e 81       	ldd	r24, Y+6	; 0x06
    1afe:	9f 81       	ldd	r25, Y+7	; 0x07
    1b00:	2b 81       	ldd	r18, Y+3	; 0x03
    1b02:	3c 81       	ldd	r19, Y+4	; 0x04
    1b04:	fc 01       	movw	r30, r24
    1b06:	31 83       	std	Z+1, r19	; 0x01
    1b08:	20 83       	st	Z, r18
    1b0a:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0c:	9f 81       	ldd	r25, Y+7	; 0x07
    1b0e:	29 81       	ldd	r18, Y+1	; 0x01
    1b10:	fc 01       	movw	r30, r24
    1b12:	23 8f       	std	Z+27, r18	; 0x1b
    1b14:	8e 81       	ldd	r24, Y+6	; 0x06
    1b16:	9f 81       	ldd	r25, Y+7	; 0x07
    1b18:	2a 81       	ldd	r18, Y+2	; 0x02
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	24 8f       	std	Z+28, r18	; 0x1c
    1b1e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b20:	9f 81       	ldd	r25, Y+7	; 0x07
    1b22:	61 e0       	ldi	r22, 0x01	; 1
    1b24:	0e 94 80 0c 	call	0x1900	; 0x1900 <xQueueGenericReset>
    1b28:	8e 81       	ldd	r24, Y+6	; 0x06
    1b2a:	9f 81       	ldd	r25, Y+7	; 0x07
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 a3       	std	Z+32, r18	; 0x20
    1b32:	27 96       	adiw	r28, 0x07	; 7
    1b34:	0f b6       	in	r0, 0x3f	; 63
    1b36:	f8 94       	cli
    1b38:	de bf       	out	0x3e, r29	; 62
    1b3a:	0f be       	out	0x3f, r0	; 63
    1b3c:	cd bf       	out	0x3d, r28	; 61
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	08 95       	ret

00001b48 <prvInitialiseMutex>:
    1b48:	cf 93       	push	r28
    1b4a:	df 93       	push	r29
    1b4c:	00 d0       	rcall	.+0      	; 0x1b4e <prvInitialiseMutex+0x6>
    1b4e:	cd b7       	in	r28, 0x3d	; 61
    1b50:	de b7       	in	r29, 0x3e	; 62
    1b52:	9a 83       	std	Y+2, r25	; 0x02
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	89 81       	ldd	r24, Y+1	; 0x01
    1b58:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5a:	89 2b       	or	r24, r25
    1b5c:	b9 f0       	breq	.+46     	; 0x1b8c <prvInitialiseMutex+0x44>
    1b5e:	89 81       	ldd	r24, Y+1	; 0x01
    1b60:	9a 81       	ldd	r25, Y+2	; 0x02
    1b62:	fc 01       	movw	r30, r24
    1b64:	13 82       	std	Z+3, r1	; 0x03
    1b66:	12 82       	std	Z+2, r1	; 0x02
    1b68:	89 81       	ldd	r24, Y+1	; 0x01
    1b6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	11 82       	std	Z+1, r1	; 0x01
    1b70:	10 82       	st	Z, r1
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
    1b74:	9a 81       	ldd	r25, Y+2	; 0x02
    1b76:	fc 01       	movw	r30, r24
    1b78:	16 82       	std	Z+6, r1	; 0x06
    1b7a:	89 81       	ldd	r24, Y+1	; 0x01
    1b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b7e:	20 e0       	ldi	r18, 0x00	; 0
    1b80:	40 e0       	ldi	r20, 0x00	; 0
    1b82:	50 e0       	ldi	r21, 0x00	; 0
    1b84:	60 e0       	ldi	r22, 0x00	; 0
    1b86:	70 e0       	ldi	r23, 0x00	; 0
    1b88:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <xQueueGenericSend>
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	08 95       	ret

00001b96 <xQueueCreateMutex>:
    1b96:	cf 93       	push	r28
    1b98:	df 93       	push	r29
    1b9a:	00 d0       	rcall	.+0      	; 0x1b9c <xQueueCreateMutex+0x6>
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <xQueueCreateMutex+0x8>
    1b9e:	1f 92       	push	r1
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	8d 83       	std	Y+5, r24	; 0x05
    1ba6:	81 e0       	ldi	r24, 0x01	; 1
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	1a 82       	std	Y+2, r1	; 0x02
    1bac:	4d 81       	ldd	r20, Y+5	; 0x05
    1bae:	6a 81       	ldd	r22, Y+2	; 0x02
    1bb0:	89 81       	ldd	r24, Y+1	; 0x01
    1bb2:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <xQueueGenericCreate>
    1bb6:	9c 83       	std	Y+4, r25	; 0x04
    1bb8:	8b 83       	std	Y+3, r24	; 0x03
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbe:	0e 94 a4 0d 	call	0x1b48	; 0x1b48 <prvInitialiseMutex>
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	0f 90       	pop	r0
    1bc8:	0f 90       	pop	r0
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	08 95       	ret

00001bd6 <xQueueGenericSend>:
    1bd6:	cf 93       	push	r28
    1bd8:	df 93       	push	r29
    1bda:	cd b7       	in	r28, 0x3d	; 61
    1bdc:	de b7       	in	r29, 0x3e	; 62
    1bde:	2e 97       	sbiw	r28, 0x0e	; 14
    1be0:	0f b6       	in	r0, 0x3f	; 63
    1be2:	f8 94       	cli
    1be4:	de bf       	out	0x3e, r29	; 62
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	cd bf       	out	0x3d, r28	; 61
    1bea:	99 87       	std	Y+9, r25	; 0x09
    1bec:	88 87       	std	Y+8, r24	; 0x08
    1bee:	7b 87       	std	Y+11, r23	; 0x0b
    1bf0:	6a 87       	std	Y+10, r22	; 0x0a
    1bf2:	5d 87       	std	Y+13, r21	; 0x0d
    1bf4:	4c 87       	std	Y+12, r20	; 0x0c
    1bf6:	2e 87       	std	Y+14, r18	; 0x0e
    1bf8:	19 82       	std	Y+1, r1	; 0x01
    1bfa:	88 85       	ldd	r24, Y+8	; 0x08
    1bfc:	99 85       	ldd	r25, Y+9	; 0x09
    1bfe:	9b 83       	std	Y+3, r25	; 0x03
    1c00:	8a 83       	std	Y+2, r24	; 0x02
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	f8 94       	cli
    1c06:	0f 92       	push	r0
    1c08:	8a 81       	ldd	r24, Y+2	; 0x02
    1c0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c10:	8a 81       	ldd	r24, Y+2	; 0x02
    1c12:	9b 81       	ldd	r25, Y+3	; 0x03
    1c14:	fc 01       	movw	r30, r24
    1c16:	83 8d       	ldd	r24, Z+27	; 0x1b
    1c18:	28 17       	cp	r18, r24
    1c1a:	18 f0       	brcs	.+6      	; 0x1c22 <xQueueGenericSend+0x4c>
    1c1c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c1e:	82 30       	cpi	r24, 0x02	; 2
    1c20:	11 f5       	brne	.+68     	; 0x1c66 <xQueueGenericSend+0x90>
    1c22:	2a 85       	ldd	r18, Y+10	; 0x0a
    1c24:	3b 85       	ldd	r19, Y+11	; 0x0b
    1c26:	8a 81       	ldd	r24, Y+2	; 0x02
    1c28:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2a:	4e 85       	ldd	r20, Y+14	; 0x0e
    1c2c:	b9 01       	movw	r22, r18
    1c2e:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <prvCopyDataToQueue>
    1c32:	8c 83       	std	Y+4, r24	; 0x04
    1c34:	8a 81       	ldd	r24, Y+2	; 0x02
    1c36:	9b 81       	ldd	r25, Y+3	; 0x03
    1c38:	fc 01       	movw	r30, r24
    1c3a:	81 89       	ldd	r24, Z+17	; 0x11
    1c3c:	88 23       	and	r24, r24
    1c3e:	51 f0       	breq	.+20     	; 0x1c54 <xQueueGenericSend+0x7e>
    1c40:	8a 81       	ldd	r24, Y+2	; 0x02
    1c42:	9b 81       	ldd	r25, Y+3	; 0x03
    1c44:	41 96       	adiw	r24, 0x11	; 17
    1c46:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    1c4a:	88 23       	and	r24, r24
    1c4c:	41 f0       	breq	.+16     	; 0x1c5e <xQueueGenericSend+0x88>
    1c4e:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1c52:	05 c0       	rjmp	.+10     	; 0x1c5e <xQueueGenericSend+0x88>
    1c54:	8c 81       	ldd	r24, Y+4	; 0x04
    1c56:	88 23       	and	r24, r24
    1c58:	11 f0       	breq	.+4      	; 0x1c5e <xQueueGenericSend+0x88>
    1c5a:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1c5e:	0f 90       	pop	r0
    1c60:	0f be       	out	0x3f, r0	; 63
    1c62:	81 e0       	ldi	r24, 0x01	; 1
    1c64:	61 c0       	rjmp	.+194    	; 0x1d28 <xQueueGenericSend+0x152>
    1c66:	8c 85       	ldd	r24, Y+12	; 0x0c
    1c68:	9d 85       	ldd	r25, Y+13	; 0x0d
    1c6a:	89 2b       	or	r24, r25
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <xQueueGenericSend+0xa0>
    1c6e:	0f 90       	pop	r0
    1c70:	0f be       	out	0x3f, r0	; 63
    1c72:	80 e0       	ldi	r24, 0x00	; 0
    1c74:	59 c0       	rjmp	.+178    	; 0x1d28 <xQueueGenericSend+0x152>
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	88 23       	and	r24, r24
    1c7a:	31 f4       	brne	.+12     	; 0x1c88 <xQueueGenericSend+0xb2>
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	05 96       	adiw	r24, 0x05	; 5
    1c80:	0e 94 82 16 	call	0x2d04	; 0x2d04 <vTaskSetTimeOutState>
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	89 83       	std	Y+1, r24	; 0x01
    1c88:	0f 90       	pop	r0
    1c8a:	0f be       	out	0x3f, r0	; 63
    1c8c:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSuspendAll>
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	0f 92       	push	r0
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	fc 01       	movw	r30, r24
    1c9c:	85 8d       	ldd	r24, Z+29	; 0x1d
    1c9e:	8f 3f       	cpi	r24, 0xFF	; 255
    1ca0:	21 f4       	brne	.+8      	; 0x1caa <xQueueGenericSend+0xd4>
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	15 8e       	std	Z+29, r1	; 0x1d
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	9b 81       	ldd	r25, Y+3	; 0x03
    1cae:	fc 01       	movw	r30, r24
    1cb0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cb2:	8f 3f       	cpi	r24, 0xFF	; 255
    1cb4:	21 f4       	brne	.+8      	; 0x1cbe <xQueueGenericSend+0xe8>
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cba:	fc 01       	movw	r30, r24
    1cbc:	16 8e       	std	Z+30, r1	; 0x1e
    1cbe:	0f 90       	pop	r0
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	9e 01       	movw	r18, r28
    1cc4:	24 5f       	subi	r18, 0xF4	; 244
    1cc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cc8:	ce 01       	movw	r24, r28
    1cca:	05 96       	adiw	r24, 0x05	; 5
    1ccc:	b9 01       	movw	r22, r18
    1cce:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <xTaskCheckForTimeOut>
    1cd2:	88 23       	and	r24, r24
    1cd4:	01 f5       	brne	.+64     	; 0x1d16 <xQueueGenericSend+0x140>
    1cd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cda:	0e 94 8d 11 	call	0x231a	; 0x231a <prvIsQueueFull>
    1cde:	88 23       	and	r24, r24
    1ce0:	99 f0       	breq	.+38     	; 0x1d08 <xQueueGenericSend+0x132>
    1ce2:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ce4:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	9b 81       	ldd	r25, Y+3	; 0x03
    1cea:	08 96       	adiw	r24, 0x08	; 8
    1cec:	b9 01       	movw	r22, r18
    1cee:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vTaskPlaceOnEventList>
    1cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    1cf6:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1cfa:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1cfe:	88 23       	and	r24, r24
    1d00:	91 f4       	brne	.+36     	; 0x1d26 <xQueueGenericSend+0x150>
    1d02:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1d06:	0f c0       	rjmp	.+30     	; 0x1d26 <xQueueGenericSend+0x150>
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1d0c:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1d10:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1d14:	76 cf       	rjmp	.-276    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d16:	8a 81       	ldd	r24, Y+2	; 0x02
    1d18:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1a:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1d1e:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	01 c0       	rjmp	.+2      	; 0x1d28 <xQueueGenericSend+0x152>
    1d26:	6d cf       	rjmp	.-294    	; 0x1c02 <xQueueGenericSend+0x2c>
    1d28:	2e 96       	adiw	r28, 0x0e	; 14
    1d2a:	0f b6       	in	r0, 0x3f	; 63
    1d2c:	f8 94       	cli
    1d2e:	de bf       	out	0x3e, r29	; 62
    1d30:	0f be       	out	0x3f, r0	; 63
    1d32:	cd bf       	out	0x3d, r28	; 61
    1d34:	df 91       	pop	r29
    1d36:	cf 91       	pop	r28
    1d38:	08 95       	ret

00001d3a <xQueueGenericSendFromISR>:
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	2c 97       	sbiw	r28, 0x0c	; 12
    1d44:	0f b6       	in	r0, 0x3f	; 63
    1d46:	f8 94       	cli
    1d48:	de bf       	out	0x3e, r29	; 62
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	cd bf       	out	0x3d, r28	; 61
    1d4e:	9f 83       	std	Y+7, r25	; 0x07
    1d50:	8e 83       	std	Y+6, r24	; 0x06
    1d52:	79 87       	std	Y+9, r23	; 0x09
    1d54:	68 87       	std	Y+8, r22	; 0x08
    1d56:	5b 87       	std	Y+11, r21	; 0x0b
    1d58:	4a 87       	std	Y+10, r20	; 0x0a
    1d5a:	2c 87       	std	Y+12, r18	; 0x0c
    1d5c:	8e 81       	ldd	r24, Y+6	; 0x06
    1d5e:	9f 81       	ldd	r25, Y+7	; 0x07
    1d60:	9b 83       	std	Y+3, r25	; 0x03
    1d62:	8a 83       	std	Y+2, r24	; 0x02
    1d64:	1c 82       	std	Y+4, r1	; 0x04
    1d66:	8a 81       	ldd	r24, Y+2	; 0x02
    1d68:	9b 81       	ldd	r25, Y+3	; 0x03
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	9b 81       	ldd	r25, Y+3	; 0x03
    1d72:	fc 01       	movw	r30, r24
    1d74:	83 8d       	ldd	r24, Z+27	; 0x1b
    1d76:	28 17       	cp	r18, r24
    1d78:	18 f0       	brcs	.+6      	; 0x1d80 <xQueueGenericSendFromISR+0x46>
    1d7a:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d7c:	82 30       	cpi	r24, 0x02	; 2
    1d7e:	89 f5       	brne	.+98     	; 0x1de2 <xQueueGenericSendFromISR+0xa8>
    1d80:	8a 81       	ldd	r24, Y+2	; 0x02
    1d82:	9b 81       	ldd	r25, Y+3	; 0x03
    1d84:	fc 01       	movw	r30, r24
    1d86:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d88:	8d 83       	std	Y+5, r24	; 0x05
    1d8a:	28 85       	ldd	r18, Y+8	; 0x08
    1d8c:	39 85       	ldd	r19, Y+9	; 0x09
    1d8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d90:	9b 81       	ldd	r25, Y+3	; 0x03
    1d92:	4c 85       	ldd	r20, Y+12	; 0x0c
    1d94:	b9 01       	movw	r22, r18
    1d96:	0e 94 f2 0f 	call	0x1fe4	; 0x1fe4 <prvCopyDataToQueue>
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d9e:	b9 f4       	brne	.+46     	; 0x1dce <xQueueGenericSendFromISR+0x94>
    1da0:	8a 81       	ldd	r24, Y+2	; 0x02
    1da2:	9b 81       	ldd	r25, Y+3	; 0x03
    1da4:	fc 01       	movw	r30, r24
    1da6:	81 89       	ldd	r24, Z+17	; 0x11
    1da8:	88 23       	and	r24, r24
    1daa:	c1 f0       	breq	.+48     	; 0x1ddc <xQueueGenericSendFromISR+0xa2>
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	9b 81       	ldd	r25, Y+3	; 0x03
    1db0:	41 96       	adiw	r24, 0x11	; 17
    1db2:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    1db6:	88 23       	and	r24, r24
    1db8:	89 f0       	breq	.+34     	; 0x1ddc <xQueueGenericSendFromISR+0xa2>
    1dba:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dbc:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dbe:	89 2b       	or	r24, r25
    1dc0:	69 f0       	breq	.+26     	; 0x1ddc <xQueueGenericSendFromISR+0xa2>
    1dc2:	8a 85       	ldd	r24, Y+10	; 0x0a
    1dc4:	9b 85       	ldd	r25, Y+11	; 0x0b
    1dc6:	21 e0       	ldi	r18, 0x01	; 1
    1dc8:	fc 01       	movw	r30, r24
    1dca:	20 83       	st	Z, r18
    1dcc:	07 c0       	rjmp	.+14     	; 0x1ddc <xQueueGenericSendFromISR+0xa2>
    1dce:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd0:	8f 5f       	subi	r24, 0xFF	; 255
    1dd2:	28 2f       	mov	r18, r24
    1dd4:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd6:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd8:	fc 01       	movw	r30, r24
    1dda:	26 8f       	std	Z+30, r18	; 0x1e
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	89 83       	std	Y+1, r24	; 0x01
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <xQueueGenericSendFromISR+0xaa>
    1de2:	19 82       	std	Y+1, r1	; 0x01
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	2c 96       	adiw	r28, 0x0c	; 12
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	df 91       	pop	r29
    1df4:	cf 91       	pop	r28
    1df6:	08 95       	ret

00001df8 <xQueueGenericReceive>:
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	60 97       	sbiw	r28, 0x10	; 16
    1e02:	0f b6       	in	r0, 0x3f	; 63
    1e04:	f8 94       	cli
    1e06:	de bf       	out	0x3e, r29	; 62
    1e08:	0f be       	out	0x3f, r0	; 63
    1e0a:	cd bf       	out	0x3d, r28	; 61
    1e0c:	9b 87       	std	Y+11, r25	; 0x0b
    1e0e:	8a 87       	std	Y+10, r24	; 0x0a
    1e10:	7d 87       	std	Y+13, r23	; 0x0d
    1e12:	6c 87       	std	Y+12, r22	; 0x0c
    1e14:	5f 87       	std	Y+15, r21	; 0x0f
    1e16:	4e 87       	std	Y+14, r20	; 0x0e
    1e18:	28 8b       	std	Y+16, r18	; 0x10
    1e1a:	19 82       	std	Y+1, r1	; 0x01
    1e1c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e1e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e20:	9b 83       	std	Y+3, r25	; 0x03
    1e22:	8a 83       	std	Y+2, r24	; 0x02
    1e24:	0f b6       	in	r0, 0x3f	; 63
    1e26:	f8 94       	cli
    1e28:	0f 92       	push	r0
    1e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2e:	fc 01       	movw	r30, r24
    1e30:	82 8d       	ldd	r24, Z+26	; 0x1a
    1e32:	8c 83       	std	Y+4, r24	; 0x04
    1e34:	8c 81       	ldd	r24, Y+4	; 0x04
    1e36:	88 23       	and	r24, r24
    1e38:	09 f4       	brne	.+2      	; 0x1e3c <xQueueGenericReceive+0x44>
    1e3a:	51 c0       	rjmp	.+162    	; 0x1ede <xQueueGenericReceive+0xe6>
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	fc 01       	movw	r30, r24
    1e42:	86 81       	ldd	r24, Z+6	; 0x06
    1e44:	97 81       	ldd	r25, Z+7	; 0x07
    1e46:	9e 83       	std	Y+6, r25	; 0x06
    1e48:	8d 83       	std	Y+5, r24	; 0x05
    1e4a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e4c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e50:	9b 81       	ldd	r25, Y+3	; 0x03
    1e52:	b9 01       	movw	r22, r18
    1e54:	0e 94 c2 10 	call	0x2184	; 0x2184 <prvCopyDataFromQueue>
    1e58:	88 89       	ldd	r24, Y+16	; 0x10
    1e5a:	88 23       	and	r24, r24
    1e5c:	31 f5       	brne	.+76     	; 0x1eaa <xQueueGenericReceive+0xb2>
    1e5e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e60:	2f ef       	ldi	r18, 0xFF	; 255
    1e62:	28 0f       	add	r18, r24
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	fc 01       	movw	r30, r24
    1e6a:	22 8f       	std	Z+26, r18	; 0x1a
    1e6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e70:	fc 01       	movw	r30, r24
    1e72:	80 81       	ld	r24, Z
    1e74:	91 81       	ldd	r25, Z+1	; 0x01
    1e76:	89 2b       	or	r24, r25
    1e78:	41 f4       	brne	.+16     	; 0x1e8a <xQueueGenericReceive+0x92>
    1e7a:	0e 94 f7 18 	call	0x31ee	; 0x31ee <pvTaskIncrementMutexHeldCount>
    1e7e:	9c 01       	movw	r18, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	9b 81       	ldd	r25, Y+3	; 0x03
    1e84:	fc 01       	movw	r30, r24
    1e86:	33 83       	std	Z+3, r19	; 0x03
    1e88:	22 83       	std	Z+2, r18	; 0x02
    1e8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e8c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8e:	fc 01       	movw	r30, r24
    1e90:	80 85       	ldd	r24, Z+8	; 0x08
    1e92:	88 23       	and	r24, r24
    1e94:	01 f1       	breq	.+64     	; 0x1ed6 <xQueueGenericReceive+0xde>
    1e96:	8a 81       	ldd	r24, Y+2	; 0x02
    1e98:	9b 81       	ldd	r25, Y+3	; 0x03
    1e9a:	08 96       	adiw	r24, 0x08	; 8
    1e9c:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    1ea0:	88 23       	and	r24, r24
    1ea2:	c9 f0       	breq	.+50     	; 0x1ed6 <xQueueGenericReceive+0xde>
    1ea4:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1ea8:	16 c0       	rjmp	.+44     	; 0x1ed6 <xQueueGenericReceive+0xde>
    1eaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1eac:	9b 81       	ldd	r25, Y+3	; 0x03
    1eae:	2d 81       	ldd	r18, Y+5	; 0x05
    1eb0:	3e 81       	ldd	r19, Y+6	; 0x06
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	37 83       	std	Z+7, r19	; 0x07
    1eb6:	26 83       	std	Z+6, r18	; 0x06
    1eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eba:	9b 81       	ldd	r25, Y+3	; 0x03
    1ebc:	fc 01       	movw	r30, r24
    1ebe:	81 89       	ldd	r24, Z+17	; 0x11
    1ec0:	88 23       	and	r24, r24
    1ec2:	49 f0       	breq	.+18     	; 0x1ed6 <xQueueGenericReceive+0xde>
    1ec4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec8:	41 96       	adiw	r24, 0x11	; 17
    1eca:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    1ece:	88 23       	and	r24, r24
    1ed0:	11 f0       	breq	.+4      	; 0x1ed6 <xQueueGenericReceive+0xde>
    1ed2:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1ed6:	0f 90       	pop	r0
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	81 e0       	ldi	r24, 0x01	; 1
    1edc:	7a c0       	rjmp	.+244    	; 0x1fd2 <xQueueGenericReceive+0x1da>
    1ede:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ee0:	9f 85       	ldd	r25, Y+15	; 0x0f
    1ee2:	89 2b       	or	r24, r25
    1ee4:	21 f4       	brne	.+8      	; 0x1eee <xQueueGenericReceive+0xf6>
    1ee6:	0f 90       	pop	r0
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	72 c0       	rjmp	.+228    	; 0x1fd2 <xQueueGenericReceive+0x1da>
    1eee:	89 81       	ldd	r24, Y+1	; 0x01
    1ef0:	88 23       	and	r24, r24
    1ef2:	31 f4       	brne	.+12     	; 0x1f00 <xQueueGenericReceive+0x108>
    1ef4:	ce 01       	movw	r24, r28
    1ef6:	07 96       	adiw	r24, 0x07	; 7
    1ef8:	0e 94 82 16 	call	0x2d04	; 0x2d04 <vTaskSetTimeOutState>
    1efc:	81 e0       	ldi	r24, 0x01	; 1
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	0f 90       	pop	r0
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSuspendAll>
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	0f 92       	push	r0
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	fc 01       	movw	r30, r24
    1f14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f16:	8f 3f       	cpi	r24, 0xFF	; 255
    1f18:	21 f4       	brne	.+8      	; 0x1f22 <xQueueGenericReceive+0x12a>
    1f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1e:	fc 01       	movw	r30, r24
    1f20:	15 8e       	std	Z+29, r1	; 0x1d
    1f22:	8a 81       	ldd	r24, Y+2	; 0x02
    1f24:	9b 81       	ldd	r25, Y+3	; 0x03
    1f26:	fc 01       	movw	r30, r24
    1f28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1f2c:	21 f4       	brne	.+8      	; 0x1f36 <xQueueGenericReceive+0x13e>
    1f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f30:	9b 81       	ldd	r25, Y+3	; 0x03
    1f32:	fc 01       	movw	r30, r24
    1f34:	16 8e       	std	Z+30, r1	; 0x1e
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	9e 01       	movw	r18, r28
    1f3c:	22 5f       	subi	r18, 0xF2	; 242
    1f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f40:	ce 01       	movw	r24, r28
    1f42:	07 96       	adiw	r24, 0x07	; 7
    1f44:	b9 01       	movw	r22, r18
    1f46:	0e 94 9d 16 	call	0x2d3a	; 0x2d3a <xTaskCheckForTimeOut>
    1f4a:	88 23       	and	r24, r24
    1f4c:	99 f5       	brne	.+102    	; 0x1fb4 <xQueueGenericReceive+0x1bc>
    1f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f50:	9b 81       	ldd	r25, Y+3	; 0x03
    1f52:	0e 94 6f 11 	call	0x22de	; 0x22de <prvIsQueueEmpty>
    1f56:	88 23       	and	r24, r24
    1f58:	31 f1       	breq	.+76     	; 0x1fa6 <xQueueGenericReceive+0x1ae>
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	fc 01       	movw	r30, r24
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	89 2b       	or	r24, r25
    1f66:	61 f4       	brne	.+24     	; 0x1f80 <xQueueGenericReceive+0x188>
    1f68:	0f b6       	in	r0, 0x3f	; 63
    1f6a:	f8 94       	cli
    1f6c:	0f 92       	push	r0
    1f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f70:	9b 81       	ldd	r25, Y+3	; 0x03
    1f72:	fc 01       	movw	r30, r24
    1f74:	82 81       	ldd	r24, Z+2	; 0x02
    1f76:	93 81       	ldd	r25, Z+3	; 0x03
    1f78:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <vTaskPriorityInherit>
    1f7c:	0f 90       	pop	r0
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	2e 85       	ldd	r18, Y+14	; 0x0e
    1f82:	3f 85       	ldd	r19, Y+15	; 0x0f
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	41 96       	adiw	r24, 0x11	; 17
    1f8a:	b9 01       	movw	r22, r18
    1f8c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <vTaskPlaceOnEventList>
    1f90:	8a 81       	ldd	r24, Y+2	; 0x02
    1f92:	9b 81       	ldd	r25, Y+3	; 0x03
    1f94:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1f98:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1f9c:	88 23       	and	r24, r24
    1f9e:	c1 f4       	brne	.+48     	; 0x1fd0 <xQueueGenericReceive+0x1d8>
    1fa0:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    1fa4:	15 c0       	rjmp	.+42     	; 0x1fd0 <xQueueGenericReceive+0x1d8>
    1fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    1faa:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1fae:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1fb2:	38 cf       	rjmp	.-400    	; 0x1e24 <xQueueGenericReceive+0x2c>
    1fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb8:	0e 94 12 11 	call	0x2224	; 0x2224 <prvUnlockQueue>
    1fbc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    1fc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc4:	0e 94 6f 11 	call	0x22de	; 0x22de <prvIsQueueEmpty>
    1fc8:	88 23       	and	r24, r24
    1fca:	11 f0       	breq	.+4      	; 0x1fd0 <xQueueGenericReceive+0x1d8>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	01 c0       	rjmp	.+2      	; 0x1fd2 <xQueueGenericReceive+0x1da>
    1fd0:	29 cf       	rjmp	.-430    	; 0x1e24 <xQueueGenericReceive+0x2c>
    1fd2:	60 96       	adiw	r28, 0x10	; 16
    1fd4:	0f b6       	in	r0, 0x3f	; 63
    1fd6:	f8 94       	cli
    1fd8:	de bf       	out	0x3e, r29	; 62
    1fda:	0f be       	out	0x3f, r0	; 63
    1fdc:	cd bf       	out	0x3d, r28	; 61
    1fde:	df 91       	pop	r29
    1fe0:	cf 91       	pop	r28
    1fe2:	08 95       	ret

00001fe4 <prvCopyDataToQueue>:
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	cd b7       	in	r28, 0x3d	; 61
    1fea:	de b7       	in	r29, 0x3e	; 62
    1fec:	27 97       	sbiw	r28, 0x07	; 7
    1fee:	0f b6       	in	r0, 0x3f	; 63
    1ff0:	f8 94       	cli
    1ff2:	de bf       	out	0x3e, r29	; 62
    1ff4:	0f be       	out	0x3f, r0	; 63
    1ff6:	cd bf       	out	0x3d, r28	; 61
    1ff8:	9c 83       	std	Y+4, r25	; 0x04
    1ffa:	8b 83       	std	Y+3, r24	; 0x03
    1ffc:	7e 83       	std	Y+6, r23	; 0x06
    1ffe:	6d 83       	std	Y+5, r22	; 0x05
    2000:	4f 83       	std	Y+7, r20	; 0x07
    2002:	19 82       	std	Y+1, r1	; 0x01
    2004:	8b 81       	ldd	r24, Y+3	; 0x03
    2006:	9c 81       	ldd	r25, Y+4	; 0x04
    2008:	fc 01       	movw	r30, r24
    200a:	82 8d       	ldd	r24, Z+26	; 0x1a
    200c:	8a 83       	std	Y+2, r24	; 0x02
    200e:	8b 81       	ldd	r24, Y+3	; 0x03
    2010:	9c 81       	ldd	r25, Y+4	; 0x04
    2012:	fc 01       	movw	r30, r24
    2014:	84 8d       	ldd	r24, Z+28	; 0x1c
    2016:	88 23       	and	r24, r24
    2018:	b1 f4       	brne	.+44     	; 0x2046 <prvCopyDataToQueue+0x62>
    201a:	8b 81       	ldd	r24, Y+3	; 0x03
    201c:	9c 81       	ldd	r25, Y+4	; 0x04
    201e:	fc 01       	movw	r30, r24
    2020:	80 81       	ld	r24, Z
    2022:	91 81       	ldd	r25, Z+1	; 0x01
    2024:	89 2b       	or	r24, r25
    2026:	09 f0       	breq	.+2      	; 0x202a <prvCopyDataToQueue+0x46>
    2028:	9c c0       	rjmp	.+312    	; 0x2162 <prvCopyDataToQueue+0x17e>
    202a:	8b 81       	ldd	r24, Y+3	; 0x03
    202c:	9c 81       	ldd	r25, Y+4	; 0x04
    202e:	fc 01       	movw	r30, r24
    2030:	82 81       	ldd	r24, Z+2	; 0x02
    2032:	93 81       	ldd	r25, Z+3	; 0x03
    2034:	0e 94 7a 18 	call	0x30f4	; 0x30f4 <xTaskPriorityDisinherit>
    2038:	89 83       	std	Y+1, r24	; 0x01
    203a:	8b 81       	ldd	r24, Y+3	; 0x03
    203c:	9c 81       	ldd	r25, Y+4	; 0x04
    203e:	fc 01       	movw	r30, r24
    2040:	13 82       	std	Z+3, r1	; 0x03
    2042:	12 82       	std	Z+2, r1	; 0x02
    2044:	8e c0       	rjmp	.+284    	; 0x2162 <prvCopyDataToQueue+0x17e>
    2046:	8f 81       	ldd	r24, Y+7	; 0x07
    2048:	88 23       	and	r24, r24
    204a:	d9 f5       	brne	.+118    	; 0x20c2 <prvCopyDataToQueue+0xde>
    204c:	8b 81       	ldd	r24, Y+3	; 0x03
    204e:	9c 81       	ldd	r25, Y+4	; 0x04
    2050:	fc 01       	movw	r30, r24
    2052:	84 8d       	ldd	r24, Z+28	; 0x1c
    2054:	48 2f       	mov	r20, r24
    2056:	50 e0       	ldi	r21, 0x00	; 0
    2058:	8b 81       	ldd	r24, Y+3	; 0x03
    205a:	9c 81       	ldd	r25, Y+4	; 0x04
    205c:	fc 01       	movw	r30, r24
    205e:	84 81       	ldd	r24, Z+4	; 0x04
    2060:	95 81       	ldd	r25, Z+5	; 0x05
    2062:	2d 81       	ldd	r18, Y+5	; 0x05
    2064:	3e 81       	ldd	r19, Y+6	; 0x06
    2066:	b9 01       	movw	r22, r18
    2068:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <memcpy>
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	fc 01       	movw	r30, r24
    2072:	24 81       	ldd	r18, Z+4	; 0x04
    2074:	35 81       	ldd	r19, Z+5	; 0x05
    2076:	8b 81       	ldd	r24, Y+3	; 0x03
    2078:	9c 81       	ldd	r25, Y+4	; 0x04
    207a:	fc 01       	movw	r30, r24
    207c:	84 8d       	ldd	r24, Z+28	; 0x1c
    207e:	88 2f       	mov	r24, r24
    2080:	90 e0       	ldi	r25, 0x00	; 0
    2082:	28 0f       	add	r18, r24
    2084:	39 1f       	adc	r19, r25
    2086:	8b 81       	ldd	r24, Y+3	; 0x03
    2088:	9c 81       	ldd	r25, Y+4	; 0x04
    208a:	fc 01       	movw	r30, r24
    208c:	35 83       	std	Z+5, r19	; 0x05
    208e:	24 83       	std	Z+4, r18	; 0x04
    2090:	8b 81       	ldd	r24, Y+3	; 0x03
    2092:	9c 81       	ldd	r25, Y+4	; 0x04
    2094:	fc 01       	movw	r30, r24
    2096:	24 81       	ldd	r18, Z+4	; 0x04
    2098:	35 81       	ldd	r19, Z+5	; 0x05
    209a:	8b 81       	ldd	r24, Y+3	; 0x03
    209c:	9c 81       	ldd	r25, Y+4	; 0x04
    209e:	fc 01       	movw	r30, r24
    20a0:	82 81       	ldd	r24, Z+2	; 0x02
    20a2:	93 81       	ldd	r25, Z+3	; 0x03
    20a4:	28 17       	cp	r18, r24
    20a6:	39 07       	cpc	r19, r25
    20a8:	08 f4       	brcc	.+2      	; 0x20ac <prvCopyDataToQueue+0xc8>
    20aa:	5b c0       	rjmp	.+182    	; 0x2162 <prvCopyDataToQueue+0x17e>
    20ac:	8b 81       	ldd	r24, Y+3	; 0x03
    20ae:	9c 81       	ldd	r25, Y+4	; 0x04
    20b0:	fc 01       	movw	r30, r24
    20b2:	20 81       	ld	r18, Z
    20b4:	31 81       	ldd	r19, Z+1	; 0x01
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	fc 01       	movw	r30, r24
    20bc:	35 83       	std	Z+5, r19	; 0x05
    20be:	24 83       	std	Z+4, r18	; 0x04
    20c0:	50 c0       	rjmp	.+160    	; 0x2162 <prvCopyDataToQueue+0x17e>
    20c2:	8b 81       	ldd	r24, Y+3	; 0x03
    20c4:	9c 81       	ldd	r25, Y+4	; 0x04
    20c6:	fc 01       	movw	r30, r24
    20c8:	84 8d       	ldd	r24, Z+28	; 0x1c
    20ca:	48 2f       	mov	r20, r24
    20cc:	50 e0       	ldi	r21, 0x00	; 0
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	fc 01       	movw	r30, r24
    20d4:	86 81       	ldd	r24, Z+6	; 0x06
    20d6:	97 81       	ldd	r25, Z+7	; 0x07
    20d8:	2d 81       	ldd	r18, Y+5	; 0x05
    20da:	3e 81       	ldd	r19, Y+6	; 0x06
    20dc:	b9 01       	movw	r22, r18
    20de:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <memcpy>
    20e2:	8b 81       	ldd	r24, Y+3	; 0x03
    20e4:	9c 81       	ldd	r25, Y+4	; 0x04
    20e6:	fc 01       	movw	r30, r24
    20e8:	26 81       	ldd	r18, Z+6	; 0x06
    20ea:	37 81       	ldd	r19, Z+7	; 0x07
    20ec:	8b 81       	ldd	r24, Y+3	; 0x03
    20ee:	9c 81       	ldd	r25, Y+4	; 0x04
    20f0:	fc 01       	movw	r30, r24
    20f2:	84 8d       	ldd	r24, Z+28	; 0x1c
    20f4:	88 2f       	mov	r24, r24
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	91 95       	neg	r25
    20fa:	81 95       	neg	r24
    20fc:	91 09       	sbc	r25, r1
    20fe:	28 0f       	add	r18, r24
    2100:	39 1f       	adc	r19, r25
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	fc 01       	movw	r30, r24
    2108:	37 83       	std	Z+7, r19	; 0x07
    210a:	26 83       	std	Z+6, r18	; 0x06
    210c:	8b 81       	ldd	r24, Y+3	; 0x03
    210e:	9c 81       	ldd	r25, Y+4	; 0x04
    2110:	fc 01       	movw	r30, r24
    2112:	26 81       	ldd	r18, Z+6	; 0x06
    2114:	37 81       	ldd	r19, Z+7	; 0x07
    2116:	8b 81       	ldd	r24, Y+3	; 0x03
    2118:	9c 81       	ldd	r25, Y+4	; 0x04
    211a:	fc 01       	movw	r30, r24
    211c:	80 81       	ld	r24, Z
    211e:	91 81       	ldd	r25, Z+1	; 0x01
    2120:	28 17       	cp	r18, r24
    2122:	39 07       	cpc	r19, r25
    2124:	a8 f4       	brcc	.+42     	; 0x2150 <prvCopyDataToQueue+0x16c>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	22 81       	ldd	r18, Z+2	; 0x02
    212e:	33 81       	ldd	r19, Z+3	; 0x03
    2130:	8b 81       	ldd	r24, Y+3	; 0x03
    2132:	9c 81       	ldd	r25, Y+4	; 0x04
    2134:	fc 01       	movw	r30, r24
    2136:	84 8d       	ldd	r24, Z+28	; 0x1c
    2138:	88 2f       	mov	r24, r24
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	91 95       	neg	r25
    213e:	81 95       	neg	r24
    2140:	91 09       	sbc	r25, r1
    2142:	28 0f       	add	r18, r24
    2144:	39 1f       	adc	r19, r25
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	fc 01       	movw	r30, r24
    214c:	37 83       	std	Z+7, r19	; 0x07
    214e:	26 83       	std	Z+6, r18	; 0x06
    2150:	8f 81       	ldd	r24, Y+7	; 0x07
    2152:	82 30       	cpi	r24, 0x02	; 2
    2154:	31 f4       	brne	.+12     	; 0x2162 <prvCopyDataToQueue+0x17e>
    2156:	8a 81       	ldd	r24, Y+2	; 0x02
    2158:	88 23       	and	r24, r24
    215a:	19 f0       	breq	.+6      	; 0x2162 <prvCopyDataToQueue+0x17e>
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	81 50       	subi	r24, 0x01	; 1
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	21 e0       	ldi	r18, 0x01	; 1
    2166:	28 0f       	add	r18, r24
    2168:	8b 81       	ldd	r24, Y+3	; 0x03
    216a:	9c 81       	ldd	r25, Y+4	; 0x04
    216c:	fc 01       	movw	r30, r24
    216e:	22 8f       	std	Z+26, r18	; 0x1a
    2170:	89 81       	ldd	r24, Y+1	; 0x01
    2172:	27 96       	adiw	r28, 0x07	; 7
    2174:	0f b6       	in	r0, 0x3f	; 63
    2176:	f8 94       	cli
    2178:	de bf       	out	0x3e, r29	; 62
    217a:	0f be       	out	0x3f, r0	; 63
    217c:	cd bf       	out	0x3d, r28	; 61
    217e:	df 91       	pop	r29
    2180:	cf 91       	pop	r28
    2182:	08 95       	ret

00002184 <prvCopyDataFromQueue>:
    2184:	cf 93       	push	r28
    2186:	df 93       	push	r29
    2188:	00 d0       	rcall	.+0      	; 0x218a <prvCopyDataFromQueue+0x6>
    218a:	00 d0       	rcall	.+0      	; 0x218c <prvCopyDataFromQueue+0x8>
    218c:	cd b7       	in	r28, 0x3d	; 61
    218e:	de b7       	in	r29, 0x3e	; 62
    2190:	9a 83       	std	Y+2, r25	; 0x02
    2192:	89 83       	std	Y+1, r24	; 0x01
    2194:	7c 83       	std	Y+4, r23	; 0x04
    2196:	6b 83       	std	Y+3, r22	; 0x03
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	fc 01       	movw	r30, r24
    219e:	84 8d       	ldd	r24, Z+28	; 0x1c
    21a0:	88 23       	and	r24, r24
    21a2:	c9 f1       	breq	.+114    	; 0x2216 <prvCopyDataFromQueue+0x92>
    21a4:	89 81       	ldd	r24, Y+1	; 0x01
    21a6:	9a 81       	ldd	r25, Y+2	; 0x02
    21a8:	fc 01       	movw	r30, r24
    21aa:	26 81       	ldd	r18, Z+6	; 0x06
    21ac:	37 81       	ldd	r19, Z+7	; 0x07
    21ae:	89 81       	ldd	r24, Y+1	; 0x01
    21b0:	9a 81       	ldd	r25, Y+2	; 0x02
    21b2:	fc 01       	movw	r30, r24
    21b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    21b6:	88 2f       	mov	r24, r24
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	28 0f       	add	r18, r24
    21bc:	39 1f       	adc	r19, r25
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	9a 81       	ldd	r25, Y+2	; 0x02
    21c2:	fc 01       	movw	r30, r24
    21c4:	37 83       	std	Z+7, r19	; 0x07
    21c6:	26 83       	std	Z+6, r18	; 0x06
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	9a 81       	ldd	r25, Y+2	; 0x02
    21cc:	fc 01       	movw	r30, r24
    21ce:	26 81       	ldd	r18, Z+6	; 0x06
    21d0:	37 81       	ldd	r19, Z+7	; 0x07
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	9a 81       	ldd	r25, Y+2	; 0x02
    21d6:	fc 01       	movw	r30, r24
    21d8:	82 81       	ldd	r24, Z+2	; 0x02
    21da:	93 81       	ldd	r25, Z+3	; 0x03
    21dc:	28 17       	cp	r18, r24
    21de:	39 07       	cpc	r19, r25
    21e0:	50 f0       	brcs	.+20     	; 0x21f6 <prvCopyDataFromQueue+0x72>
    21e2:	89 81       	ldd	r24, Y+1	; 0x01
    21e4:	9a 81       	ldd	r25, Y+2	; 0x02
    21e6:	fc 01       	movw	r30, r24
    21e8:	20 81       	ld	r18, Z
    21ea:	31 81       	ldd	r19, Z+1	; 0x01
    21ec:	89 81       	ldd	r24, Y+1	; 0x01
    21ee:	9a 81       	ldd	r25, Y+2	; 0x02
    21f0:	fc 01       	movw	r30, r24
    21f2:	37 83       	std	Z+7, r19	; 0x07
    21f4:	26 83       	std	Z+6, r18	; 0x06
    21f6:	89 81       	ldd	r24, Y+1	; 0x01
    21f8:	9a 81       	ldd	r25, Y+2	; 0x02
    21fa:	fc 01       	movw	r30, r24
    21fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    21fe:	48 2f       	mov	r20, r24
    2200:	50 e0       	ldi	r21, 0x00	; 0
    2202:	89 81       	ldd	r24, Y+1	; 0x01
    2204:	9a 81       	ldd	r25, Y+2	; 0x02
    2206:	fc 01       	movw	r30, r24
    2208:	26 81       	ldd	r18, Z+6	; 0x06
    220a:	37 81       	ldd	r19, Z+7	; 0x07
    220c:	8b 81       	ldd	r24, Y+3	; 0x03
    220e:	9c 81       	ldd	r25, Y+4	; 0x04
    2210:	b9 01       	movw	r22, r18
    2212:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <memcpy>
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	0f 90       	pop	r0
    221c:	0f 90       	pop	r0
    221e:	df 91       	pop	r29
    2220:	cf 91       	pop	r28
    2222:	08 95       	ret

00002224 <prvUnlockQueue>:
    2224:	cf 93       	push	r28
    2226:	df 93       	push	r29
    2228:	00 d0       	rcall	.+0      	; 0x222a <prvUnlockQueue+0x6>
    222a:	00 d0       	rcall	.+0      	; 0x222c <prvUnlockQueue+0x8>
    222c:	cd b7       	in	r28, 0x3d	; 61
    222e:	de b7       	in	r29, 0x3e	; 62
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
    2234:	0f b6       	in	r0, 0x3f	; 63
    2236:	f8 94       	cli
    2238:	0f 92       	push	r0
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	fc 01       	movw	r30, r24
    2240:	86 8d       	ldd	r24, Z+30	; 0x1e
    2242:	89 83       	std	Y+1, r24	; 0x01
    2244:	14 c0       	rjmp	.+40     	; 0x226e <prvUnlockQueue+0x4a>
    2246:	8b 81       	ldd	r24, Y+3	; 0x03
    2248:	9c 81       	ldd	r25, Y+4	; 0x04
    224a:	fc 01       	movw	r30, r24
    224c:	81 89       	ldd	r24, Z+17	; 0x11
    224e:	88 23       	and	r24, r24
    2250:	51 f0       	breq	.+20     	; 0x2266 <prvUnlockQueue+0x42>
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	41 96       	adiw	r24, 0x11	; 17
    2258:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    225c:	88 23       	and	r24, r24
    225e:	21 f0       	breq	.+8      	; 0x2268 <prvUnlockQueue+0x44>
    2260:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <vTaskMissedYield>
    2264:	01 c0       	rjmp	.+2      	; 0x2268 <prvUnlockQueue+0x44>
    2266:	06 c0       	rjmp	.+12     	; 0x2274 <prvUnlockQueue+0x50>
    2268:	89 81       	ldd	r24, Y+1	; 0x01
    226a:	81 50       	subi	r24, 0x01	; 1
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	18 16       	cp	r1, r24
    2272:	4c f3       	brlt	.-46     	; 0x2246 <prvUnlockQueue+0x22>
    2274:	8b 81       	ldd	r24, Y+3	; 0x03
    2276:	9c 81       	ldd	r25, Y+4	; 0x04
    2278:	2f ef       	ldi	r18, 0xFF	; 255
    227a:	fc 01       	movw	r30, r24
    227c:	26 8f       	std	Z+30, r18	; 0x1e
    227e:	0f 90       	pop	r0
    2280:	0f be       	out	0x3f, r0	; 63
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	0f 92       	push	r0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	fc 01       	movw	r30, r24
    228e:	85 8d       	ldd	r24, Z+29	; 0x1d
    2290:	8a 83       	std	Y+2, r24	; 0x02
    2292:	14 c0       	rjmp	.+40     	; 0x22bc <prvUnlockQueue+0x98>
    2294:	8b 81       	ldd	r24, Y+3	; 0x03
    2296:	9c 81       	ldd	r25, Y+4	; 0x04
    2298:	fc 01       	movw	r30, r24
    229a:	80 85       	ldd	r24, Z+8	; 0x08
    229c:	88 23       	and	r24, r24
    229e:	69 f0       	breq	.+26     	; 0x22ba <prvUnlockQueue+0x96>
    22a0:	8b 81       	ldd	r24, Y+3	; 0x03
    22a2:	9c 81       	ldd	r25, Y+4	; 0x04
    22a4:	08 96       	adiw	r24, 0x08	; 8
    22a6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <xTaskRemoveFromEventList>
    22aa:	88 23       	and	r24, r24
    22ac:	11 f0       	breq	.+4      	; 0x22b2 <prvUnlockQueue+0x8e>
    22ae:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <vTaskMissedYield>
    22b2:	8a 81       	ldd	r24, Y+2	; 0x02
    22b4:	81 50       	subi	r24, 0x01	; 1
    22b6:	8a 83       	std	Y+2, r24	; 0x02
    22b8:	01 c0       	rjmp	.+2      	; 0x22bc <prvUnlockQueue+0x98>
    22ba:	03 c0       	rjmp	.+6      	; 0x22c2 <prvUnlockQueue+0x9e>
    22bc:	8a 81       	ldd	r24, Y+2	; 0x02
    22be:	18 16       	cp	r1, r24
    22c0:	4c f3       	brlt	.-46     	; 0x2294 <prvUnlockQueue+0x70>
    22c2:	8b 81       	ldd	r24, Y+3	; 0x03
    22c4:	9c 81       	ldd	r25, Y+4	; 0x04
    22c6:	2f ef       	ldi	r18, 0xFF	; 255
    22c8:	fc 01       	movw	r30, r24
    22ca:	25 8f       	std	Z+29, r18	; 0x1d
    22cc:	0f 90       	pop	r0
    22ce:	0f be       	out	0x3f, r0	; 63
    22d0:	0f 90       	pop	r0
    22d2:	0f 90       	pop	r0
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	df 91       	pop	r29
    22da:	cf 91       	pop	r28
    22dc:	08 95       	ret

000022de <prvIsQueueEmpty>:
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	00 d0       	rcall	.+0      	; 0x22e4 <prvIsQueueEmpty+0x6>
    22e4:	1f 92       	push	r1
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	9b 83       	std	Y+3, r25	; 0x03
    22ec:	8a 83       	std	Y+2, r24	; 0x02
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	0f 92       	push	r0
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	fc 01       	movw	r30, r24
    22fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    22fc:	88 23       	and	r24, r24
    22fe:	19 f4       	brne	.+6      	; 0x2306 <prvIsQueueEmpty+0x28>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	89 83       	std	Y+1, r24	; 0x01
    2304:	01 c0       	rjmp	.+2      	; 0x2308 <prvIsQueueEmpty+0x2a>
    2306:	19 82       	std	Y+1, r1	; 0x01
    2308:	0f 90       	pop	r0
    230a:	0f be       	out	0x3f, r0	; 63
    230c:	89 81       	ldd	r24, Y+1	; 0x01
    230e:	0f 90       	pop	r0
    2310:	0f 90       	pop	r0
    2312:	0f 90       	pop	r0
    2314:	df 91       	pop	r29
    2316:	cf 91       	pop	r28
    2318:	08 95       	ret

0000231a <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    231a:	cf 93       	push	r28
    231c:	df 93       	push	r29
    231e:	00 d0       	rcall	.+0      	; 0x2320 <prvIsQueueFull+0x6>
    2320:	1f 92       	push	r1
    2322:	cd b7       	in	r28, 0x3d	; 61
    2324:	de b7       	in	r29, 0x3e	; 62
    2326:	9b 83       	std	Y+3, r25	; 0x03
    2328:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2330:	8a 81       	ldd	r24, Y+2	; 0x02
    2332:	9b 81       	ldd	r25, Y+3	; 0x03
    2334:	fc 01       	movw	r30, r24
    2336:	22 8d       	ldd	r18, Z+26	; 0x1a
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	9b 81       	ldd	r25, Y+3	; 0x03
    233c:	fc 01       	movw	r30, r24
    233e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2340:	28 17       	cp	r18, r24
    2342:	19 f4       	brne	.+6      	; 0x234a <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	01 c0       	rjmp	.+2      	; 0x234c <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    234a:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    234c:	0f 90       	pop	r0
    234e:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2350:	89 81       	ldd	r24, Y+1	; 0x01
}
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	08 95       	ret

0000235e <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    235e:	8f 92       	push	r8
    2360:	9f 92       	push	r9
    2362:	af 92       	push	r10
    2364:	bf 92       	push	r11
    2366:	cf 92       	push	r12
    2368:	df 92       	push	r13
    236a:	ef 92       	push	r14
    236c:	ff 92       	push	r15
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	cd b7       	in	r28, 0x3d	; 61
    2378:	de b7       	in	r29, 0x3e	; 62
    237a:	60 97       	sbiw	r28, 0x10	; 16
    237c:	0f b6       	in	r0, 0x3f	; 63
    237e:	f8 94       	cli
    2380:	de bf       	out	0x3e, r29	; 62
    2382:	0f be       	out	0x3f, r0	; 63
    2384:	cd bf       	out	0x3d, r28	; 61
    2386:	9f 83       	std	Y+7, r25	; 0x07
    2388:	8e 83       	std	Y+6, r24	; 0x06
    238a:	79 87       	std	Y+9, r23	; 0x09
    238c:	68 87       	std	Y+8, r22	; 0x08
    238e:	5b 87       	std	Y+11, r21	; 0x0b
    2390:	4a 87       	std	Y+10, r20	; 0x0a
    2392:	3d 87       	std	Y+13, r19	; 0x0d
    2394:	2c 87       	std	Y+12, r18	; 0x0c
    2396:	0e 87       	std	Y+14, r16	; 0x0e
    2398:	f8 8a       	std	Y+16, r15	; 0x10
    239a:	ef 86       	std	Y+15, r14	; 0x0f
    239c:	8a 85       	ldd	r24, Y+10	; 0x0a
    239e:	9b 85       	ldd	r25, Y+11	; 0x0b
    23a0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pvPortMalloc>
    23a4:	9d 83       	std	Y+5, r25	; 0x05
    23a6:	8c 83       	std	Y+4, r24	; 0x04
    23a8:	8c 81       	ldd	r24, Y+4	; 0x04
    23aa:	9d 81       	ldd	r25, Y+5	; 0x05
    23ac:	89 2b       	or	r24, r25
    23ae:	b9 f0       	breq	.+46     	; 0x23de <xTaskCreate+0x80>
    23b0:	8c e2       	ldi	r24, 0x2C	; 44
    23b2:	90 e0       	ldi	r25, 0x00	; 0
    23b4:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <pvPortMalloc>
    23b8:	9a 83       	std	Y+2, r25	; 0x02
    23ba:	89 83       	std	Y+1, r24	; 0x01
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	89 2b       	or	r24, r25
    23c2:	41 f0       	breq	.+16     	; 0x23d4 <xTaskCreate+0x76>
    23c4:	89 81       	ldd	r24, Y+1	; 0x01
    23c6:	9a 81       	ldd	r25, Y+2	; 0x02
    23c8:	2c 81       	ldd	r18, Y+4	; 0x04
    23ca:	3d 81       	ldd	r19, Y+5	; 0x05
    23cc:	fc 01       	movw	r30, r24
    23ce:	30 8f       	std	Z+24, r19	; 0x18
    23d0:	27 8b       	std	Z+23, r18	; 0x17
    23d2:	07 c0       	rjmp	.+14     	; 0x23e2 <xTaskCreate+0x84>
    23d4:	8c 81       	ldd	r24, Y+4	; 0x04
    23d6:	9d 81       	ldd	r25, Y+5	; 0x05
    23d8:	0e 94 4f 0a 	call	0x149e	; 0x149e <vPortFree>
    23dc:	02 c0       	rjmp	.+4      	; 0x23e2 <xTaskCreate+0x84>
    23de:	1a 82       	std	Y+2, r1	; 0x02
    23e0:	19 82       	std	Y+1, r1	; 0x01
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	9a 81       	ldd	r25, Y+2	; 0x02
    23e6:	89 2b       	or	r24, r25
    23e8:	09 f1       	breq	.+66     	; 0x242c <xTaskCreate+0xce>
    23ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    23ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ee:	cc 01       	movw	r24, r24
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	09 81       	ldd	r16, Y+1	; 0x01
    23f6:	1a 81       	ldd	r17, Y+2	; 0x02
    23f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    23fa:	58 89       	ldd	r21, Y+16	; 0x10
    23fc:	2c 85       	ldd	r18, Y+12	; 0x0c
    23fe:	3d 85       	ldd	r19, Y+13	; 0x0d
    2400:	68 85       	ldd	r22, Y+8	; 0x08
    2402:	79 85       	ldd	r23, Y+9	; 0x09
    2404:	ee 81       	ldd	r30, Y+6	; 0x06
    2406:	ff 81       	ldd	r31, Y+7	; 0x07
    2408:	81 2c       	mov	r8, r1
    240a:	91 2c       	mov	r9, r1
    240c:	58 01       	movw	r10, r16
    240e:	6a 01       	movw	r12, r20
    2410:	ee 84       	ldd	r14, Y+14	; 0x0e
    2412:	89 01       	movw	r16, r18
    2414:	9c 01       	movw	r18, r24
    2416:	ad 01       	movw	r20, r26
    2418:	cf 01       	movw	r24, r30
    241a:	0e 94 2c 12 	call	0x2458	; 0x2458 <prvInitialiseNewTask>
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	0e 94 06 13 	call	0x260c	; 0x260c <prvAddNewTaskToReadyList>
    2426:	81 e0       	ldi	r24, 0x01	; 1
    2428:	8b 83       	std	Y+3, r24	; 0x03
    242a:	02 c0       	rjmp	.+4      	; 0x2430 <xTaskCreate+0xd2>
    242c:	8f ef       	ldi	r24, 0xFF	; 255
    242e:	8b 83       	std	Y+3, r24	; 0x03
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	60 96       	adiw	r28, 0x10	; 16
    2434:	0f b6       	in	r0, 0x3f	; 63
    2436:	f8 94       	cli
    2438:	de bf       	out	0x3e, r29	; 62
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	cd bf       	out	0x3d, r28	; 61
    243e:	df 91       	pop	r29
    2440:	cf 91       	pop	r28
    2442:	1f 91       	pop	r17
    2444:	0f 91       	pop	r16
    2446:	ff 90       	pop	r15
    2448:	ef 90       	pop	r14
    244a:	df 90       	pop	r13
    244c:	cf 90       	pop	r12
    244e:	bf 90       	pop	r11
    2450:	af 90       	pop	r10
    2452:	9f 90       	pop	r9
    2454:	8f 90       	pop	r8
    2456:	08 95       	ret

00002458 <prvInitialiseNewTask>:
    2458:	8f 92       	push	r8
    245a:	9f 92       	push	r9
    245c:	af 92       	push	r10
    245e:	bf 92       	push	r11
    2460:	cf 92       	push	r12
    2462:	df 92       	push	r13
    2464:	ef 92       	push	r14
    2466:	0f 93       	push	r16
    2468:	1f 93       	push	r17
    246a:	cf 93       	push	r28
    246c:	df 93       	push	r29
    246e:	cd b7       	in	r28, 0x3d	; 61
    2470:	de b7       	in	r29, 0x3e	; 62
    2472:	64 97       	sbiw	r28, 0x14	; 20
    2474:	0f b6       	in	r0, 0x3f	; 63
    2476:	f8 94       	cli
    2478:	de bf       	out	0x3e, r29	; 62
    247a:	0f be       	out	0x3f, r0	; 63
    247c:	cd bf       	out	0x3d, r28	; 61
    247e:	9d 83       	std	Y+5, r25	; 0x05
    2480:	8c 83       	std	Y+4, r24	; 0x04
    2482:	7f 83       	std	Y+7, r23	; 0x07
    2484:	6e 83       	std	Y+6, r22	; 0x06
    2486:	28 87       	std	Y+8, r18	; 0x08
    2488:	39 87       	std	Y+9, r19	; 0x09
    248a:	4a 87       	std	Y+10, r20	; 0x0a
    248c:	5b 87       	std	Y+11, r21	; 0x0b
    248e:	1d 87       	std	Y+13, r17	; 0x0d
    2490:	0c 87       	std	Y+12, r16	; 0x0c
    2492:	ee 86       	std	Y+14, r14	; 0x0e
    2494:	d8 8a       	std	Y+16, r13	; 0x10
    2496:	cf 86       	std	Y+15, r12	; 0x0f
    2498:	ba 8a       	std	Y+18, r11	; 0x12
    249a:	a9 8a       	std	Y+17, r10	; 0x11
    249c:	9c 8a       	std	Y+20, r9	; 0x14
    249e:	8b 8a       	std	Y+19, r8	; 0x13
    24a0:	28 85       	ldd	r18, Y+8	; 0x08
    24a2:	39 85       	ldd	r19, Y+9	; 0x09
    24a4:	89 89       	ldd	r24, Y+17	; 0x11
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	fc 01       	movw	r30, r24
    24aa:	87 89       	ldd	r24, Z+23	; 0x17
    24ac:	90 8d       	ldd	r25, Z+24	; 0x18
    24ae:	a9 01       	movw	r20, r18
    24b0:	65 ea       	ldi	r22, 0xA5	; 165
    24b2:	70 e0       	ldi	r23, 0x00	; 0
    24b4:	0e 94 5a 1b 	call	0x36b4	; 0x36b4 <memset>
    24b8:	89 89       	ldd	r24, Y+17	; 0x11
    24ba:	9a 89       	ldd	r25, Y+18	; 0x12
    24bc:	fc 01       	movw	r30, r24
    24be:	27 89       	ldd	r18, Z+23	; 0x17
    24c0:	30 8d       	ldd	r19, Z+24	; 0x18
    24c2:	88 85       	ldd	r24, Y+8	; 0x08
    24c4:	99 85       	ldd	r25, Y+9	; 0x09
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	82 0f       	add	r24, r18
    24ca:	93 1f       	adc	r25, r19
    24cc:	9b 83       	std	Y+3, r25	; 0x03
    24ce:	8a 83       	std	Y+2, r24	; 0x02
    24d0:	19 82       	std	Y+1, r1	; 0x01
    24d2:	22 c0       	rjmp	.+68     	; 0x2518 <prvInitialiseNewTask+0xc0>
    24d4:	89 81       	ldd	r24, Y+1	; 0x01
    24d6:	88 2f       	mov	r24, r24
    24d8:	90 e0       	ldi	r25, 0x00	; 0
    24da:	29 81       	ldd	r18, Y+1	; 0x01
    24dc:	22 2f       	mov	r18, r18
    24de:	30 e0       	ldi	r19, 0x00	; 0
    24e0:	4e 81       	ldd	r20, Y+6	; 0x06
    24e2:	5f 81       	ldd	r21, Y+7	; 0x07
    24e4:	24 0f       	add	r18, r20
    24e6:	35 1f       	adc	r19, r21
    24e8:	f9 01       	movw	r30, r18
    24ea:	40 81       	ld	r20, Z
    24ec:	29 89       	ldd	r18, Y+17	; 0x11
    24ee:	3a 89       	ldd	r19, Y+18	; 0x12
    24f0:	82 0f       	add	r24, r18
    24f2:	93 1f       	adc	r25, r19
    24f4:	49 96       	adiw	r24, 0x19	; 25
    24f6:	fc 01       	movw	r30, r24
    24f8:	40 83       	st	Z, r20
    24fa:	89 81       	ldd	r24, Y+1	; 0x01
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	2e 81       	ldd	r18, Y+6	; 0x06
    2502:	3f 81       	ldd	r19, Y+7	; 0x07
    2504:	82 0f       	add	r24, r18
    2506:	93 1f       	adc	r25, r19
    2508:	fc 01       	movw	r30, r24
    250a:	80 81       	ld	r24, Z
    250c:	88 23       	and	r24, r24
    250e:	09 f4       	brne	.+2      	; 0x2512 <prvInitialiseNewTask+0xba>
    2510:	06 c0       	rjmp	.+12     	; 0x251e <prvInitialiseNewTask+0xc6>
    2512:	89 81       	ldd	r24, Y+1	; 0x01
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	89 81       	ldd	r24, Y+1	; 0x01
    251a:	88 30       	cpi	r24, 0x08	; 8
    251c:	d8 f2       	brcs	.-74     	; 0x24d4 <prvInitialiseNewTask+0x7c>
    251e:	89 89       	ldd	r24, Y+17	; 0x11
    2520:	9a 89       	ldd	r25, Y+18	; 0x12
    2522:	fc 01       	movw	r30, r24
    2524:	10 a2       	std	Z+32, r1	; 0x20
    2526:	8e 85       	ldd	r24, Y+14	; 0x0e
    2528:	84 30       	cpi	r24, 0x04	; 4
    252a:	10 f0       	brcs	.+4      	; 0x2530 <prvInitialiseNewTask+0xd8>
    252c:	83 e0       	ldi	r24, 0x03	; 3
    252e:	8e 87       	std	Y+14, r24	; 0x0e
    2530:	89 89       	ldd	r24, Y+17	; 0x11
    2532:	9a 89       	ldd	r25, Y+18	; 0x12
    2534:	2e 85       	ldd	r18, Y+14	; 0x0e
    2536:	fc 01       	movw	r30, r24
    2538:	26 8b       	std	Z+22, r18	; 0x16
    253a:	89 89       	ldd	r24, Y+17	; 0x11
    253c:	9a 89       	ldd	r25, Y+18	; 0x12
    253e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2540:	fc 01       	movw	r30, r24
    2542:	23 a3       	std	Z+35, r18	; 0x23
    2544:	89 89       	ldd	r24, Y+17	; 0x11
    2546:	9a 89       	ldd	r25, Y+18	; 0x12
    2548:	fc 01       	movw	r30, r24
    254a:	14 a2       	std	Z+36, r1	; 0x24
    254c:	89 89       	ldd	r24, Y+17	; 0x11
    254e:	9a 89       	ldd	r25, Y+18	; 0x12
    2550:	02 96       	adiw	r24, 0x02	; 2
    2552:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vListInitialiseItem>
    2556:	89 89       	ldd	r24, Y+17	; 0x11
    2558:	9a 89       	ldd	r25, Y+18	; 0x12
    255a:	0c 96       	adiw	r24, 0x0c	; 12
    255c:	0e 94 d5 05 	call	0xbaa	; 0xbaa <vListInitialiseItem>
    2560:	89 89       	ldd	r24, Y+17	; 0x11
    2562:	9a 89       	ldd	r25, Y+18	; 0x12
    2564:	29 89       	ldd	r18, Y+17	; 0x11
    2566:	3a 89       	ldd	r19, Y+18	; 0x12
    2568:	fc 01       	movw	r30, r24
    256a:	31 87       	std	Z+9, r19	; 0x09
    256c:	20 87       	std	Z+8, r18	; 0x08
    256e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2570:	88 2f       	mov	r24, r24
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	24 e0       	ldi	r18, 0x04	; 4
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	28 1b       	sub	r18, r24
    257a:	39 0b       	sbc	r19, r25
    257c:	89 89       	ldd	r24, Y+17	; 0x11
    257e:	9a 89       	ldd	r25, Y+18	; 0x12
    2580:	fc 01       	movw	r30, r24
    2582:	35 87       	std	Z+13, r19	; 0x0d
    2584:	24 87       	std	Z+12, r18	; 0x0c
    2586:	89 89       	ldd	r24, Y+17	; 0x11
    2588:	9a 89       	ldd	r25, Y+18	; 0x12
    258a:	29 89       	ldd	r18, Y+17	; 0x11
    258c:	3a 89       	ldd	r19, Y+18	; 0x12
    258e:	fc 01       	movw	r30, r24
    2590:	33 8b       	std	Z+19, r19	; 0x13
    2592:	22 8b       	std	Z+18, r18	; 0x12
    2594:	89 89       	ldd	r24, Y+17	; 0x11
    2596:	9a 89       	ldd	r25, Y+18	; 0x12
    2598:	fc 01       	movw	r30, r24
    259a:	16 a2       	std	Z+38, r1	; 0x26
    259c:	15 a2       	std	Z+37, r1	; 0x25
    259e:	89 89       	ldd	r24, Y+17	; 0x11
    25a0:	9a 89       	ldd	r25, Y+18	; 0x12
    25a2:	fc 01       	movw	r30, r24
    25a4:	17 a2       	std	Z+39, r1	; 0x27
    25a6:	10 a6       	std	Z+40, r1	; 0x28
    25a8:	11 a6       	std	Z+41, r1	; 0x29
    25aa:	12 a6       	std	Z+42, r1	; 0x2a
    25ac:	89 89       	ldd	r24, Y+17	; 0x11
    25ae:	9a 89       	ldd	r25, Y+18	; 0x12
    25b0:	fc 01       	movw	r30, r24
    25b2:	13 a6       	std	Z+43, r1	; 0x2b
    25b4:	4c 85       	ldd	r20, Y+12	; 0x0c
    25b6:	5d 85       	ldd	r21, Y+13	; 0x0d
    25b8:	2c 81       	ldd	r18, Y+4	; 0x04
    25ba:	3d 81       	ldd	r19, Y+5	; 0x05
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	b9 01       	movw	r22, r18
    25c2:	0e 94 02 07 	call	0xe04	; 0xe04 <pxPortInitialiseStack>
    25c6:	9c 01       	movw	r18, r24
    25c8:	89 89       	ldd	r24, Y+17	; 0x11
    25ca:	9a 89       	ldd	r25, Y+18	; 0x12
    25cc:	fc 01       	movw	r30, r24
    25ce:	31 83       	std	Z+1, r19	; 0x01
    25d0:	20 83       	st	Z, r18
    25d2:	8f 85       	ldd	r24, Y+15	; 0x0f
    25d4:	98 89       	ldd	r25, Y+16	; 0x10
    25d6:	89 2b       	or	r24, r25
    25d8:	39 f0       	breq	.+14     	; 0x25e8 <prvInitialiseNewTask+0x190>
    25da:	8f 85       	ldd	r24, Y+15	; 0x0f
    25dc:	98 89       	ldd	r25, Y+16	; 0x10
    25de:	29 89       	ldd	r18, Y+17	; 0x11
    25e0:	3a 89       	ldd	r19, Y+18	; 0x12
    25e2:	fc 01       	movw	r30, r24
    25e4:	31 83       	std	Z+1, r19	; 0x01
    25e6:	20 83       	st	Z, r18
    25e8:	64 96       	adiw	r28, 0x14	; 20
    25ea:	0f b6       	in	r0, 0x3f	; 63
    25ec:	f8 94       	cli
    25ee:	de bf       	out	0x3e, r29	; 62
    25f0:	0f be       	out	0x3f, r0	; 63
    25f2:	cd bf       	out	0x3d, r28	; 61
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	1f 91       	pop	r17
    25fa:	0f 91       	pop	r16
    25fc:	ef 90       	pop	r14
    25fe:	df 90       	pop	r13
    2600:	cf 90       	pop	r12
    2602:	bf 90       	pop	r11
    2604:	af 90       	pop	r10
    2606:	9f 90       	pop	r9
    2608:	8f 90       	pop	r8
    260a:	08 95       	ret

0000260c <prvAddNewTaskToReadyList>:
    260c:	cf 93       	push	r28
    260e:	df 93       	push	r29
    2610:	00 d0       	rcall	.+0      	; 0x2612 <prvAddNewTaskToReadyList+0x6>
    2612:	cd b7       	in	r28, 0x3d	; 61
    2614:	de b7       	in	r29, 0x3e	; 62
    2616:	9a 83       	std	Y+2, r25	; 0x02
    2618:	89 83       	std	Y+1, r24	; 0x01
    261a:	0f b6       	in	r0, 0x3f	; 63
    261c:	f8 94       	cli
    261e:	0f 92       	push	r0
    2620:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2624:	8f 5f       	subi	r24, 0xFF	; 255
    2626:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    262a:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    262e:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2632:	89 2b       	or	r24, r25
    2634:	69 f4       	brne	.+26     	; 0x2650 <prvAddNewTaskToReadyList+0x44>
    2636:	89 81       	ldd	r24, Y+1	; 0x01
    2638:	9a 81       	ldd	r25, Y+2	; 0x02
    263a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    263e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2642:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2646:	81 30       	cpi	r24, 0x01	; 1
    2648:	c9 f4       	brne	.+50     	; 0x267c <prvAddNewTaskToReadyList+0x70>
    264a:	0e 94 21 17 	call	0x2e42	; 0x2e42 <prvInitialiseTaskLists>
    264e:	16 c0       	rjmp	.+44     	; 0x267c <prvAddNewTaskToReadyList+0x70>
    2650:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    2654:	88 23       	and	r24, r24
    2656:	91 f4       	brne	.+36     	; 0x267c <prvAddNewTaskToReadyList+0x70>
    2658:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    265c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2660:	fc 01       	movw	r30, r24
    2662:	26 89       	ldd	r18, Z+22	; 0x16
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	9a 81       	ldd	r25, Y+2	; 0x02
    2668:	fc 01       	movw	r30, r24
    266a:	86 89       	ldd	r24, Z+22	; 0x16
    266c:	82 17       	cp	r24, r18
    266e:	30 f0       	brcs	.+12     	; 0x267c <prvAddNewTaskToReadyList+0x70>
    2670:	89 81       	ldd	r24, Y+1	; 0x01
    2672:	9a 81       	ldd	r25, Y+2	; 0x02
    2674:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2678:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    267c:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxTaskNumber>
    2680:	8f 5f       	subi	r24, 0xFF	; 255
    2682:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxTaskNumber>
    2686:	20 91 c7 05 	lds	r18, 0x05C7	; 0x8005c7 <uxTaskNumber>
    268a:	89 81       	ldd	r24, Y+1	; 0x01
    268c:	9a 81       	ldd	r25, Y+2	; 0x02
    268e:	fc 01       	movw	r30, r24
    2690:	21 a3       	std	Z+33, r18	; 0x21
    2692:	89 81       	ldd	r24, Y+1	; 0x01
    2694:	9a 81       	ldd	r25, Y+2	; 0x02
    2696:	fc 01       	movw	r30, r24
    2698:	96 89       	ldd	r25, Z+22	; 0x16
    269a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    269e:	89 17       	cp	r24, r25
    26a0:	30 f4       	brcc	.+12     	; 0x26ae <prvAddNewTaskToReadyList+0xa2>
    26a2:	89 81       	ldd	r24, Y+1	; 0x01
    26a4:	9a 81       	ldd	r25, Y+2	; 0x02
    26a6:	fc 01       	movw	r30, r24
    26a8:	86 89       	ldd	r24, Z+22	; 0x16
    26aa:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    26ae:	89 81       	ldd	r24, Y+1	; 0x01
    26b0:	9a 81       	ldd	r25, Y+2	; 0x02
    26b2:	ac 01       	movw	r20, r24
    26b4:	4e 5f       	subi	r20, 0xFE	; 254
    26b6:	5f 4f       	sbci	r21, 0xFF	; 255
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	9a 81       	ldd	r25, Y+2	; 0x02
    26bc:	fc 01       	movw	r30, r24
    26be:	86 89       	ldd	r24, Z+22	; 0x16
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	c9 01       	movw	r24, r18
    26c6:	88 0f       	add	r24, r24
    26c8:	99 1f       	adc	r25, r25
    26ca:	88 0f       	add	r24, r24
    26cc:	99 1f       	adc	r25, r25
    26ce:	88 0f       	add	r24, r24
    26d0:	99 1f       	adc	r25, r25
    26d2:	82 0f       	add	r24, r18
    26d4:	93 1f       	adc	r25, r19
    26d6:	8e 58       	subi	r24, 0x8E	; 142
    26d8:	9a 4f       	sbci	r25, 0xFA	; 250
    26da:	ba 01       	movw	r22, r20
    26dc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    26e0:	0f 90       	pop	r0
    26e2:	0f be       	out	0x3f, r0	; 63
    26e4:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    26e8:	88 23       	and	r24, r24
    26ea:	71 f0       	breq	.+28     	; 0x2708 <prvAddNewTaskToReadyList+0xfc>
    26ec:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    26f0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    26f4:	fc 01       	movw	r30, r24
    26f6:	26 89       	ldd	r18, Z+22	; 0x16
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	9a 81       	ldd	r25, Y+2	; 0x02
    26fc:	fc 01       	movw	r30, r24
    26fe:	86 89       	ldd	r24, Z+22	; 0x16
    2700:	28 17       	cp	r18, r24
    2702:	10 f4       	brcc	.+4      	; 0x2708 <prvAddNewTaskToReadyList+0xfc>
    2704:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    2708:	0f 90       	pop	r0
    270a:	0f 90       	pop	r0
    270c:	df 91       	pop	r29
    270e:	cf 91       	pop	r28
    2710:	08 95       	ret

00002712 <vTaskDelay>:
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	00 d0       	rcall	.+0      	; 0x2718 <vTaskDelay+0x6>
    2718:	1f 92       	push	r1
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	9b 83       	std	Y+3, r25	; 0x03
    2720:	8a 83       	std	Y+2, r24	; 0x02
    2722:	19 82       	std	Y+1, r1	; 0x01
    2724:	8a 81       	ldd	r24, Y+2	; 0x02
    2726:	9b 81       	ldd	r25, Y+3	; 0x03
    2728:	89 2b       	or	r24, r25
    272a:	51 f0       	breq	.+20     	; 0x2740 <vTaskDelay+0x2e>
    272c:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSuspendAll>
    2730:	8a 81       	ldd	r24, Y+2	; 0x02
    2732:	9b 81       	ldd	r25, Y+3	; 0x03
    2734:	60 e0       	ldi	r22, 0x00	; 0
    2736:	0e 94 11 19 	call	0x3222	; 0x3222 <prvAddCurrentTaskToDelayedList>
    273a:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    273e:	89 83       	std	Y+1, r24	; 0x01
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	88 23       	and	r24, r24
    2744:	11 f4       	brne	.+4      	; 0x274a <vTaskDelay+0x38>
    2746:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    274a:	0f 90       	pop	r0
    274c:	0f 90       	pop	r0
    274e:	0f 90       	pop	r0
    2750:	df 91       	pop	r29
    2752:	cf 91       	pop	r28
    2754:	08 95       	ret

00002756 <vTaskStartScheduler>:
    2756:	ef 92       	push	r14
    2758:	ff 92       	push	r15
    275a:	0f 93       	push	r16
    275c:	cf 93       	push	r28
    275e:	df 93       	push	r29
    2760:	1f 92       	push	r1
    2762:	cd b7       	in	r28, 0x3d	; 61
    2764:	de b7       	in	r29, 0x3e	; 62
    2766:	0f 2e       	mov	r0, r31
    2768:	fa ec       	ldi	r31, 0xCA	; 202
    276a:	ef 2e       	mov	r14, r31
    276c:	f5 e0       	ldi	r31, 0x05	; 5
    276e:	ff 2e       	mov	r15, r31
    2770:	f0 2d       	mov	r31, r0
    2772:	00 e0       	ldi	r16, 0x00	; 0
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	45 e5       	ldi	r20, 0x55	; 85
    277a:	50 e0       	ldi	r21, 0x00	; 0
    277c:	66 e4       	ldi	r22, 0x46	; 70
    277e:	71 e0       	ldi	r23, 0x01	; 1
    2780:	8f e0       	ldi	r24, 0x0F	; 15
    2782:	97 e1       	ldi	r25, 0x17	; 23
    2784:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskCreate>
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	81 f4       	brne	.+32     	; 0x27b0 <vTaskStartScheduler+0x5a>
    2790:	f8 94       	cli
    2792:	8f ef       	ldi	r24, 0xFF	; 255
    2794:	9f ef       	ldi	r25, 0xFF	; 255
    2796:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    279a:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <xSchedulerRunning>
    27a4:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <xTickCount+0x1>
    27a8:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <xTickCount>
    27ac:	0e 94 ab 08 	call	0x1156	; 0x1156 <xPortStartScheduler>
    27b0:	0f 90       	pop	r0
    27b2:	df 91       	pop	r29
    27b4:	cf 91       	pop	r28
    27b6:	0f 91       	pop	r16
    27b8:	ff 90       	pop	r15
    27ba:	ef 90       	pop	r14
    27bc:	08 95       	ret

000027be <vTaskSuspendAll>:
    27be:	cf 93       	push	r28
    27c0:	df 93       	push	r29
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    27ca:	8f 5f       	subi	r24, 0xFF	; 255
    27cc:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	08 95       	ret

000027d6 <xTaskResumeAll>:
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	00 d0       	rcall	.+0      	; 0x27dc <xTaskResumeAll+0x6>
    27dc:	00 d0       	rcall	.+0      	; 0x27de <xTaskResumeAll+0x8>
    27de:	cd b7       	in	r28, 0x3d	; 61
    27e0:	de b7       	in	r29, 0x3e	; 62
    27e2:	1a 82       	std	Y+2, r1	; 0x02
    27e4:	19 82       	std	Y+1, r1	; 0x01
    27e6:	1b 82       	std	Y+3, r1	; 0x03
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	0f 92       	push	r0
    27ee:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    27f2:	81 50       	subi	r24, 0x01	; 1
    27f4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    27f8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    27fc:	88 23       	and	r24, r24
    27fe:	09 f0       	breq	.+2      	; 0x2802 <xTaskResumeAll+0x2c>
    2800:	77 c0       	rjmp	.+238    	; 0x28f0 <xTaskResumeAll+0x11a>
    2802:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2806:	88 23       	and	r24, r24
    2808:	09 f4       	brne	.+2      	; 0x280c <xTaskResumeAll+0x36>
    280a:	72 c0       	rjmp	.+228    	; 0x28f0 <xTaskResumeAll+0x11a>
    280c:	49 c0       	rjmp	.+146    	; 0x28a0 <xTaskResumeAll+0xca>
    280e:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <xPendingReadyList+0x5>
    2812:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <xPendingReadyList+0x6>
    2816:	fc 01       	movw	r30, r24
    2818:	86 81       	ldd	r24, Z+6	; 0x06
    281a:	97 81       	ldd	r25, Z+7	; 0x07
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	89 81       	ldd	r24, Y+1	; 0x01
    2822:	9a 81       	ldd	r25, Y+2	; 0x02
    2824:	0c 96       	adiw	r24, 0x0c	; 12
    2826:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	02 96       	adiw	r24, 0x02	; 2
    2830:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    2834:	89 81       	ldd	r24, Y+1	; 0x01
    2836:	9a 81       	ldd	r25, Y+2	; 0x02
    2838:	fc 01       	movw	r30, r24
    283a:	96 89       	ldd	r25, Z+22	; 0x16
    283c:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2840:	89 17       	cp	r24, r25
    2842:	30 f4       	brcc	.+12     	; 0x2850 <xTaskResumeAll+0x7a>
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	fc 01       	movw	r30, r24
    284a:	86 89       	ldd	r24, Z+22	; 0x16
    284c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	9a 81       	ldd	r25, Y+2	; 0x02
    2854:	ac 01       	movw	r20, r24
    2856:	4e 5f       	subi	r20, 0xFE	; 254
    2858:	5f 4f       	sbci	r21, 0xFF	; 255
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	fc 01       	movw	r30, r24
    2860:	86 89       	ldd	r24, Z+22	; 0x16
    2862:	28 2f       	mov	r18, r24
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	c9 01       	movw	r24, r18
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	88 0f       	add	r24, r24
    286e:	99 1f       	adc	r25, r25
    2870:	88 0f       	add	r24, r24
    2872:	99 1f       	adc	r25, r25
    2874:	82 0f       	add	r24, r18
    2876:	93 1f       	adc	r25, r19
    2878:	8e 58       	subi	r24, 0x8E	; 142
    287a:	9a 4f       	sbci	r25, 0xFA	; 250
    287c:	ba 01       	movw	r22, r20
    287e:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    2882:	89 81       	ldd	r24, Y+1	; 0x01
    2884:	9a 81       	ldd	r25, Y+2	; 0x02
    2886:	fc 01       	movw	r30, r24
    2888:	26 89       	ldd	r18, Z+22	; 0x16
    288a:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    288e:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2892:	fc 01       	movw	r30, r24
    2894:	86 89       	ldd	r24, Z+22	; 0x16
    2896:	28 17       	cp	r18, r24
    2898:	18 f0       	brcs	.+6      	; 0x28a0 <xTaskResumeAll+0xca>
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    28a0:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <xPendingReadyList>
    28a4:	88 23       	and	r24, r24
    28a6:	09 f0       	breq	.+2      	; 0x28aa <xTaskResumeAll+0xd4>
    28a8:	b2 cf       	rjmp	.-156    	; 0x280e <xTaskResumeAll+0x38>
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	9a 81       	ldd	r25, Y+2	; 0x02
    28ae:	89 2b       	or	r24, r25
    28b0:	11 f0       	breq	.+4      	; 0x28b6 <xTaskResumeAll+0xe0>
    28b2:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <prvResetNextTaskUnblockTime>
    28b6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    28ba:	8c 83       	std	Y+4, r24	; 0x04
    28bc:	8c 81       	ldd	r24, Y+4	; 0x04
    28be:	88 23       	and	r24, r24
    28c0:	79 f0       	breq	.+30     	; 0x28e0 <xTaskResumeAll+0x10a>
    28c2:	0e 94 82 14 	call	0x2904	; 0x2904 <xTaskIncrementTick>
    28c6:	88 23       	and	r24, r24
    28c8:	19 f0       	breq	.+6      	; 0x28d0 <xTaskResumeAll+0xfa>
    28ca:	81 e0       	ldi	r24, 0x01	; 1
    28cc:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    28d0:	8c 81       	ldd	r24, Y+4	; 0x04
    28d2:	81 50       	subi	r24, 0x01	; 1
    28d4:	8c 83       	std	Y+4, r24	; 0x04
    28d6:	8c 81       	ldd	r24, Y+4	; 0x04
    28d8:	88 23       	and	r24, r24
    28da:	99 f7       	brne	.-26     	; 0x28c2 <xTaskResumeAll+0xec>
    28dc:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <uxPendedTicks>
    28e0:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    28e4:	88 23       	and	r24, r24
    28e6:	21 f0       	breq	.+8      	; 0x28f0 <xTaskResumeAll+0x11a>
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	8b 83       	std	Y+3, r24	; 0x03
    28ec:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    28f0:	0f 90       	pop	r0
    28f2:	0f be       	out	0x3f, r0	; 63
    28f4:	8b 81       	ldd	r24, Y+3	; 0x03
    28f6:	0f 90       	pop	r0
    28f8:	0f 90       	pop	r0
    28fa:	0f 90       	pop	r0
    28fc:	0f 90       	pop	r0
    28fe:	df 91       	pop	r29
    2900:	cf 91       	pop	r28
    2902:	08 95       	ret

00002904 <xTaskIncrementTick>:
    2904:	cf 93       	push	r28
    2906:	df 93       	push	r29
    2908:	cd b7       	in	r28, 0x3d	; 61
    290a:	de b7       	in	r29, 0x3e	; 62
    290c:	29 97       	sbiw	r28, 0x09	; 9
    290e:	0f b6       	in	r0, 0x3f	; 63
    2910:	f8 94       	cli
    2912:	de bf       	out	0x3e, r29	; 62
    2914:	0f be       	out	0x3f, r0	; 63
    2916:	cd bf       	out	0x3d, r28	; 61
    2918:	19 82       	std	Y+1, r1	; 0x01
    291a:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    291e:	88 23       	and	r24, r24
    2920:	09 f0       	breq	.+2      	; 0x2924 <xTaskIncrementTick+0x20>
    2922:	c7 c0       	rjmp	.+398    	; 0x2ab2 <xTaskIncrementTick+0x1ae>
    2924:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2928:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	9b 83       	std	Y+3, r25	; 0x03
    2930:	8a 83       	std	Y+2, r24	; 0x02
    2932:	8a 81       	ldd	r24, Y+2	; 0x02
    2934:	9b 81       	ldd	r25, Y+3	; 0x03
    2936:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <xTickCount+0x1>
    293a:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <xTickCount>
    293e:	8a 81       	ldd	r24, Y+2	; 0x02
    2940:	9b 81       	ldd	r25, Y+3	; 0x03
    2942:	89 2b       	or	r24, r25
    2944:	d9 f4       	brne	.+54     	; 0x297c <xTaskIncrementTick+0x78>
    2946:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    294a:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    294e:	9d 83       	std	Y+5, r25	; 0x05
    2950:	8c 83       	std	Y+4, r24	; 0x04
    2952:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    2956:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    295a:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    295e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2962:	8c 81       	ldd	r24, Y+4	; 0x04
    2964:	9d 81       	ldd	r25, Y+5	; 0x05
    2966:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    296a:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    296e:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <xNumOfOverflows>
    2978:	0e 94 b5 17 	call	0x2f6a	; 0x2f6a <prvResetNextTaskUnblockTime>
    297c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    2980:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2984:	2a 81       	ldd	r18, Y+2	; 0x02
    2986:	3b 81       	ldd	r19, Y+3	; 0x03
    2988:	28 17       	cp	r18, r24
    298a:	39 07       	cpc	r19, r25
    298c:	08 f4       	brcc	.+2      	; 0x2990 <xTaskIncrementTick+0x8c>
    298e:	77 c0       	rjmp	.+238    	; 0x2a7e <xTaskIncrementTick+0x17a>
    2990:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2994:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2998:	fc 01       	movw	r30, r24
    299a:	80 81       	ld	r24, Z
    299c:	88 23       	and	r24, r24
    299e:	39 f4       	brne	.+14     	; 0x29ae <xTaskIncrementTick+0xaa>
    29a0:	8f ef       	ldi	r24, 0xFF	; 255
    29a2:	9f ef       	ldi	r25, 0xFF	; 255
    29a4:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    29a8:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    29ac:	68 c0       	rjmp	.+208    	; 0x2a7e <xTaskIncrementTick+0x17a>
    29ae:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    29b2:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    29b6:	fc 01       	movw	r30, r24
    29b8:	85 81       	ldd	r24, Z+5	; 0x05
    29ba:	96 81       	ldd	r25, Z+6	; 0x06
    29bc:	fc 01       	movw	r30, r24
    29be:	86 81       	ldd	r24, Z+6	; 0x06
    29c0:	97 81       	ldd	r25, Z+7	; 0x07
    29c2:	9f 83       	std	Y+7, r25	; 0x07
    29c4:	8e 83       	std	Y+6, r24	; 0x06
    29c6:	8e 81       	ldd	r24, Y+6	; 0x06
    29c8:	9f 81       	ldd	r25, Y+7	; 0x07
    29ca:	fc 01       	movw	r30, r24
    29cc:	82 81       	ldd	r24, Z+2	; 0x02
    29ce:	93 81       	ldd	r25, Z+3	; 0x03
    29d0:	99 87       	std	Y+9, r25	; 0x09
    29d2:	88 87       	std	Y+8, r24	; 0x08
    29d4:	2a 81       	ldd	r18, Y+2	; 0x02
    29d6:	3b 81       	ldd	r19, Y+3	; 0x03
    29d8:	88 85       	ldd	r24, Y+8	; 0x08
    29da:	99 85       	ldd	r25, Y+9	; 0x09
    29dc:	28 17       	cp	r18, r24
    29de:	39 07       	cpc	r19, r25
    29e0:	38 f4       	brcc	.+14     	; 0x29f0 <xTaskIncrementTick+0xec>
    29e2:	88 85       	ldd	r24, Y+8	; 0x08
    29e4:	99 85       	ldd	r25, Y+9	; 0x09
    29e6:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    29ea:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    29ee:	47 c0       	rjmp	.+142    	; 0x2a7e <xTaskIncrementTick+0x17a>
    29f0:	8e 81       	ldd	r24, Y+6	; 0x06
    29f2:	9f 81       	ldd	r25, Y+7	; 0x07
    29f4:	02 96       	adiw	r24, 0x02	; 2
    29f6:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    29fa:	8e 81       	ldd	r24, Y+6	; 0x06
    29fc:	9f 81       	ldd	r25, Y+7	; 0x07
    29fe:	fc 01       	movw	r30, r24
    2a00:	84 89       	ldd	r24, Z+20	; 0x14
    2a02:	95 89       	ldd	r25, Z+21	; 0x15
    2a04:	89 2b       	or	r24, r25
    2a06:	29 f0       	breq	.+10     	; 0x2a12 <xTaskIncrementTick+0x10e>
    2a08:	8e 81       	ldd	r24, Y+6	; 0x06
    2a0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a0c:	0c 96       	adiw	r24, 0x0c	; 12
    2a0e:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    2a12:	8e 81       	ldd	r24, Y+6	; 0x06
    2a14:	9f 81       	ldd	r25, Y+7	; 0x07
    2a16:	fc 01       	movw	r30, r24
    2a18:	96 89       	ldd	r25, Z+22	; 0x16
    2a1a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2a1e:	89 17       	cp	r24, r25
    2a20:	30 f4       	brcc	.+12     	; 0x2a2e <xTaskIncrementTick+0x12a>
    2a22:	8e 81       	ldd	r24, Y+6	; 0x06
    2a24:	9f 81       	ldd	r25, Y+7	; 0x07
    2a26:	fc 01       	movw	r30, r24
    2a28:	86 89       	ldd	r24, Z+22	; 0x16
    2a2a:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2a2e:	8e 81       	ldd	r24, Y+6	; 0x06
    2a30:	9f 81       	ldd	r25, Y+7	; 0x07
    2a32:	ac 01       	movw	r20, r24
    2a34:	4e 5f       	subi	r20, 0xFE	; 254
    2a36:	5f 4f       	sbci	r21, 0xFF	; 255
    2a38:	8e 81       	ldd	r24, Y+6	; 0x06
    2a3a:	9f 81       	ldd	r25, Y+7	; 0x07
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	86 89       	ldd	r24, Z+22	; 0x16
    2a40:	28 2f       	mov	r18, r24
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	c9 01       	movw	r24, r18
    2a46:	88 0f       	add	r24, r24
    2a48:	99 1f       	adc	r25, r25
    2a4a:	88 0f       	add	r24, r24
    2a4c:	99 1f       	adc	r25, r25
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	82 0f       	add	r24, r18
    2a54:	93 1f       	adc	r25, r19
    2a56:	8e 58       	subi	r24, 0x8E	; 142
    2a58:	9a 4f       	sbci	r25, 0xFA	; 250
    2a5a:	ba 01       	movw	r22, r20
    2a5c:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    2a60:	8e 81       	ldd	r24, Y+6	; 0x06
    2a62:	9f 81       	ldd	r25, Y+7	; 0x07
    2a64:	fc 01       	movw	r30, r24
    2a66:	26 89       	ldd	r18, Z+22	; 0x16
    2a68:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2a6c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2a70:	fc 01       	movw	r30, r24
    2a72:	86 89       	ldd	r24, Z+22	; 0x16
    2a74:	28 17       	cp	r18, r24
    2a76:	10 f0       	brcs	.+4      	; 0x2a7c <xTaskIncrementTick+0x178>
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	89 83       	std	Y+1, r24	; 0x01
    2a7c:	89 cf       	rjmp	.-238    	; 0x2990 <xTaskIncrementTick+0x8c>
    2a7e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2a82:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2a86:	fc 01       	movw	r30, r24
    2a88:	86 89       	ldd	r24, Z+22	; 0x16
    2a8a:	28 2f       	mov	r18, r24
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	c9 01       	movw	r24, r18
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	88 0f       	add	r24, r24
    2a9a:	99 1f       	adc	r25, r25
    2a9c:	82 0f       	add	r24, r18
    2a9e:	93 1f       	adc	r25, r19
    2aa0:	8e 58       	subi	r24, 0x8E	; 142
    2aa2:	9a 4f       	sbci	r25, 0xFA	; 250
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	80 81       	ld	r24, Z
    2aa8:	82 30       	cpi	r24, 0x02	; 2
    2aaa:	10 f0       	brcs	.+4      	; 0x2ab0 <xTaskIncrementTick+0x1ac>
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	89 83       	std	Y+1, r24	; 0x01
    2ab0:	05 c0       	rjmp	.+10     	; 0x2abc <xTaskIncrementTick+0x1b8>
    2ab2:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2ab6:	8f 5f       	subi	r24, 0xFF	; 255
    2ab8:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxPendedTicks>
    2abc:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2ac0:	88 23       	and	r24, r24
    2ac2:	11 f0       	breq	.+4      	; 0x2ac8 <xTaskIncrementTick+0x1c4>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	89 83       	std	Y+1, r24	; 0x01
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	29 96       	adiw	r28, 0x09	; 9
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	08 95       	ret

00002adc <vTaskSwitchContext>:
    2adc:	cf 93       	push	r28
    2ade:	df 93       	push	r29
    2ae0:	00 d0       	rcall	.+0      	; 0x2ae2 <vTaskSwitchContext+0x6>
    2ae2:	1f 92       	push	r1
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2aec:	88 23       	and	r24, r24
    2aee:	21 f0       	breq	.+8      	; 0x2af8 <vTaskSwitchContext+0x1c>
    2af0:	81 e0       	ldi	r24, 0x01	; 1
    2af2:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2af6:	71 c0       	rjmp	.+226    	; 0x2bda <vTaskSwitchContext+0xfe>
    2af8:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <xYieldPending>
    2afc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2b00:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2b04:	fc 01       	movw	r30, r24
    2b06:	85 a1       	ldd	r24, Z+37	; 0x25
    2b08:	96 a1       	ldd	r25, Z+38	; 0x26
    2b0a:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <switch_out>
    2b0e:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2b12:	89 83       	std	Y+1, r24	; 0x01
    2b14:	03 c0       	rjmp	.+6      	; 0x2b1c <vTaskSwitchContext+0x40>
    2b16:	89 81       	ldd	r24, Y+1	; 0x01
    2b18:	81 50       	subi	r24, 0x01	; 1
    2b1a:	89 83       	std	Y+1, r24	; 0x01
    2b1c:	89 81       	ldd	r24, Y+1	; 0x01
    2b1e:	28 2f       	mov	r18, r24
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	c9 01       	movw	r24, r18
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	88 0f       	add	r24, r24
    2b2e:	99 1f       	adc	r25, r25
    2b30:	82 0f       	add	r24, r18
    2b32:	93 1f       	adc	r25, r19
    2b34:	8e 58       	subi	r24, 0x8E	; 142
    2b36:	9a 4f       	sbci	r25, 0xFA	; 250
    2b38:	fc 01       	movw	r30, r24
    2b3a:	80 81       	ld	r24, Z
    2b3c:	88 23       	and	r24, r24
    2b3e:	59 f3       	breq	.-42     	; 0x2b16 <vTaskSwitchContext+0x3a>
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	28 2f       	mov	r18, r24
    2b44:	30 e0       	ldi	r19, 0x00	; 0
    2b46:	c9 01       	movw	r24, r18
    2b48:	88 0f       	add	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	88 0f       	add	r24, r24
    2b4e:	99 1f       	adc	r25, r25
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	82 0f       	add	r24, r18
    2b56:	93 1f       	adc	r25, r19
    2b58:	8e 58       	subi	r24, 0x8E	; 142
    2b5a:	9a 4f       	sbci	r25, 0xFA	; 250
    2b5c:	9b 83       	std	Y+3, r25	; 0x03
    2b5e:	8a 83       	std	Y+2, r24	; 0x02
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	9b 81       	ldd	r25, Y+3	; 0x03
    2b64:	fc 01       	movw	r30, r24
    2b66:	81 81       	ldd	r24, Z+1	; 0x01
    2b68:	92 81       	ldd	r25, Z+2	; 0x02
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	22 81       	ldd	r18, Z+2	; 0x02
    2b6e:	33 81       	ldd	r19, Z+3	; 0x03
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	fc 01       	movw	r30, r24
    2b76:	32 83       	std	Z+2, r19	; 0x02
    2b78:	21 83       	std	Z+1, r18	; 0x01
    2b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b7e:	fc 01       	movw	r30, r24
    2b80:	21 81       	ldd	r18, Z+1	; 0x01
    2b82:	32 81       	ldd	r19, Z+2	; 0x02
    2b84:	8a 81       	ldd	r24, Y+2	; 0x02
    2b86:	9b 81       	ldd	r25, Y+3	; 0x03
    2b88:	03 96       	adiw	r24, 0x03	; 3
    2b8a:	28 17       	cp	r18, r24
    2b8c:	39 07       	cpc	r19, r25
    2b8e:	69 f4       	brne	.+26     	; 0x2baa <vTaskSwitchContext+0xce>
    2b90:	8a 81       	ldd	r24, Y+2	; 0x02
    2b92:	9b 81       	ldd	r25, Y+3	; 0x03
    2b94:	fc 01       	movw	r30, r24
    2b96:	81 81       	ldd	r24, Z+1	; 0x01
    2b98:	92 81       	ldd	r25, Z+2	; 0x02
    2b9a:	fc 01       	movw	r30, r24
    2b9c:	22 81       	ldd	r18, Z+2	; 0x02
    2b9e:	33 81       	ldd	r19, Z+3	; 0x03
    2ba0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	32 83       	std	Z+2, r19	; 0x02
    2ba8:	21 83       	std	Z+1, r18	; 0x01
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	fc 01       	movw	r30, r24
    2bb0:	81 81       	ldd	r24, Z+1	; 0x01
    2bb2:	92 81       	ldd	r25, Z+2	; 0x02
    2bb4:	fc 01       	movw	r30, r24
    2bb6:	86 81       	ldd	r24, Z+6	; 0x06
    2bb8:	97 81       	ldd	r25, Z+7	; 0x07
    2bba:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2bbe:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2bc8:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2bcc:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	85 a1       	ldd	r24, Z+37	; 0x25
    2bd4:	96 a1       	ldd	r25, Z+38	; 0x26
    2bd6:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <switch_in>
    2bda:	0f 90       	pop	r0
    2bdc:	0f 90       	pop	r0
    2bde:	0f 90       	pop	r0
    2be0:	df 91       	pop	r29
    2be2:	cf 91       	pop	r28
    2be4:	08 95       	ret

00002be6 <vTaskPlaceOnEventList>:
    2be6:	cf 93       	push	r28
    2be8:	df 93       	push	r29
    2bea:	00 d0       	rcall	.+0      	; 0x2bec <vTaskPlaceOnEventList+0x6>
    2bec:	00 d0       	rcall	.+0      	; 0x2bee <vTaskPlaceOnEventList+0x8>
    2bee:	cd b7       	in	r28, 0x3d	; 61
    2bf0:	de b7       	in	r29, 0x3e	; 62
    2bf2:	9a 83       	std	Y+2, r25	; 0x02
    2bf4:	89 83       	std	Y+1, r24	; 0x01
    2bf6:	7c 83       	std	Y+4, r23	; 0x04
    2bf8:	6b 83       	std	Y+3, r22	; 0x03
    2bfa:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2bfe:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2c02:	9c 01       	movw	r18, r24
    2c04:	24 5f       	subi	r18, 0xF4	; 244
    2c06:	3f 4f       	sbci	r19, 0xFF	; 255
    2c08:	89 81       	ldd	r24, Y+1	; 0x01
    2c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0c:	b9 01       	movw	r22, r18
    2c0e:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsert>
    2c12:	8b 81       	ldd	r24, Y+3	; 0x03
    2c14:	9c 81       	ldd	r25, Y+4	; 0x04
    2c16:	61 e0       	ldi	r22, 0x01	; 1
    2c18:	0e 94 11 19 	call	0x3222	; 0x3222 <prvAddCurrentTaskToDelayedList>
    2c1c:	0f 90       	pop	r0
    2c1e:	0f 90       	pop	r0
    2c20:	0f 90       	pop	r0
    2c22:	0f 90       	pop	r0
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	08 95       	ret

00002c2a <xTaskRemoveFromEventList>:
    2c2a:	cf 93       	push	r28
    2c2c:	df 93       	push	r29
    2c2e:	00 d0       	rcall	.+0      	; 0x2c30 <xTaskRemoveFromEventList+0x6>
    2c30:	00 d0       	rcall	.+0      	; 0x2c32 <xTaskRemoveFromEventList+0x8>
    2c32:	1f 92       	push	r1
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
    2c38:	9d 83       	std	Y+5, r25	; 0x05
    2c3a:	8c 83       	std	Y+4, r24	; 0x04
    2c3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2c40:	fc 01       	movw	r30, r24
    2c42:	85 81       	ldd	r24, Z+5	; 0x05
    2c44:	96 81       	ldd	r25, Z+6	; 0x06
    2c46:	fc 01       	movw	r30, r24
    2c48:	86 81       	ldd	r24, Z+6	; 0x06
    2c4a:	97 81       	ldd	r25, Z+7	; 0x07
    2c4c:	9b 83       	std	Y+3, r25	; 0x03
    2c4e:	8a 83       	std	Y+2, r24	; 0x02
    2c50:	8a 81       	ldd	r24, Y+2	; 0x02
    2c52:	9b 81       	ldd	r25, Y+3	; 0x03
    2c54:	0c 96       	adiw	r24, 0x0c	; 12
    2c56:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    2c5a:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2c5e:	88 23       	and	r24, r24
    2c60:	69 f5       	brne	.+90     	; 0x2cbc <xTaskRemoveFromEventList+0x92>
    2c62:	8a 81       	ldd	r24, Y+2	; 0x02
    2c64:	9b 81       	ldd	r25, Y+3	; 0x03
    2c66:	02 96       	adiw	r24, 0x02	; 2
    2c68:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    2c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c70:	fc 01       	movw	r30, r24
    2c72:	96 89       	ldd	r25, Z+22	; 0x16
    2c74:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2c78:	89 17       	cp	r24, r25
    2c7a:	30 f4       	brcc	.+12     	; 0x2c88 <xTaskRemoveFromEventList+0x5e>
    2c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c80:	fc 01       	movw	r30, r24
    2c82:	86 89       	ldd	r24, Z+22	; 0x16
    2c84:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2c88:	8a 81       	ldd	r24, Y+2	; 0x02
    2c8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c8c:	ac 01       	movw	r20, r24
    2c8e:	4e 5f       	subi	r20, 0xFE	; 254
    2c90:	5f 4f       	sbci	r21, 0xFF	; 255
    2c92:	8a 81       	ldd	r24, Y+2	; 0x02
    2c94:	9b 81       	ldd	r25, Y+3	; 0x03
    2c96:	fc 01       	movw	r30, r24
    2c98:	86 89       	ldd	r24, Z+22	; 0x16
    2c9a:	28 2f       	mov	r18, r24
    2c9c:	30 e0       	ldi	r19, 0x00	; 0
    2c9e:	c9 01       	movw	r24, r18
    2ca0:	88 0f       	add	r24, r24
    2ca2:	99 1f       	adc	r25, r25
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	88 0f       	add	r24, r24
    2caa:	99 1f       	adc	r25, r25
    2cac:	82 0f       	add	r24, r18
    2cae:	93 1f       	adc	r25, r19
    2cb0:	8e 58       	subi	r24, 0x8E	; 142
    2cb2:	9a 4f       	sbci	r25, 0xFA	; 250
    2cb4:	ba 01       	movw	r22, r20
    2cb6:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    2cba:	08 c0       	rjmp	.+16     	; 0x2ccc <xTaskRemoveFromEventList+0xa2>
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	0c 96       	adiw	r24, 0x0c	; 12
    2cc2:	bc 01       	movw	r22, r24
    2cc4:	8c ea       	ldi	r24, 0xAC	; 172
    2cc6:	95 e0       	ldi	r25, 0x05	; 5
    2cc8:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    2ccc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cce:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd0:	fc 01       	movw	r30, r24
    2cd2:	26 89       	ldd	r18, Z+22	; 0x16
    2cd4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2cd8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2cdc:	fc 01       	movw	r30, r24
    2cde:	86 89       	ldd	r24, Z+22	; 0x16
    2ce0:	82 17       	cp	r24, r18
    2ce2:	30 f4       	brcc	.+12     	; 0x2cf0 <xTaskRemoveFromEventList+0xc6>
    2ce4:	81 e0       	ldi	r24, 0x01	; 1
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2cee:	01 c0       	rjmp	.+2      	; 0x2cf2 <xTaskRemoveFromEventList+0xc8>
    2cf0:	19 82       	std	Y+1, r1	; 0x01
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <vTaskSetTimeOutState>:
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <vTaskSetTimeOutState+0x6>
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	9a 83       	std	Y+2, r25	; 0x02
    2d10:	89 83       	std	Y+1, r24	; 0x01
    2d12:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	20 83       	st	Z, r18
    2d1e:	20 91 c0 05 	lds	r18, 0x05C0	; 0x8005c0 <xTickCount>
    2d22:	30 91 c1 05 	lds	r19, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2d26:	89 81       	ldd	r24, Y+1	; 0x01
    2d28:	9a 81       	ldd	r25, Y+2	; 0x02
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	32 83       	std	Z+2, r19	; 0x02
    2d2e:	21 83       	std	Z+1, r18	; 0x01
    2d30:	0f 90       	pop	r0
    2d32:	0f 90       	pop	r0
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	08 95       	ret

00002d3a <xTaskCheckForTimeOut>:
    2d3a:	cf 93       	push	r28
    2d3c:	df 93       	push	r29
    2d3e:	cd b7       	in	r28, 0x3d	; 61
    2d40:	de b7       	in	r29, 0x3e	; 62
    2d42:	27 97       	sbiw	r28, 0x07	; 7
    2d44:	0f b6       	in	r0, 0x3f	; 63
    2d46:	f8 94       	cli
    2d48:	de bf       	out	0x3e, r29	; 62
    2d4a:	0f be       	out	0x3f, r0	; 63
    2d4c:	cd bf       	out	0x3d, r28	; 61
    2d4e:	9d 83       	std	Y+5, r25	; 0x05
    2d50:	8c 83       	std	Y+4, r24	; 0x04
    2d52:	7f 83       	std	Y+7, r23	; 0x07
    2d54:	6e 83       	std	Y+6, r22	; 0x06
    2d56:	0f b6       	in	r0, 0x3f	; 63
    2d58:	f8 94       	cli
    2d5a:	0f 92       	push	r0
    2d5c:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2d60:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2d64:	9b 83       	std	Y+3, r25	; 0x03
    2d66:	8a 83       	std	Y+2, r24	; 0x02
    2d68:	8c 81       	ldd	r24, Y+4	; 0x04
    2d6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d6c:	fc 01       	movw	r30, r24
    2d6e:	90 81       	ld	r25, Z
    2d70:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2d74:	98 17       	cp	r25, r24
    2d76:	69 f0       	breq	.+26     	; 0x2d92 <xTaskCheckForTimeOut+0x58>
    2d78:	8c 81       	ldd	r24, Y+4	; 0x04
    2d7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d7c:	fc 01       	movw	r30, r24
    2d7e:	21 81       	ldd	r18, Z+1	; 0x01
    2d80:	32 81       	ldd	r19, Z+2	; 0x02
    2d82:	8a 81       	ldd	r24, Y+2	; 0x02
    2d84:	9b 81       	ldd	r25, Y+3	; 0x03
    2d86:	82 17       	cp	r24, r18
    2d88:	93 07       	cpc	r25, r19
    2d8a:	18 f0       	brcs	.+6      	; 0x2d92 <xTaskCheckForTimeOut+0x58>
    2d8c:	81 e0       	ldi	r24, 0x01	; 1
    2d8e:	89 83       	std	Y+1, r24	; 0x01
    2d90:	30 c0       	rjmp	.+96     	; 0x2df2 <xTaskCheckForTimeOut+0xb8>
    2d92:	8c 81       	ldd	r24, Y+4	; 0x04
    2d94:	9d 81       	ldd	r25, Y+5	; 0x05
    2d96:	fc 01       	movw	r30, r24
    2d98:	81 81       	ldd	r24, Z+1	; 0x01
    2d9a:	92 81       	ldd	r25, Z+2	; 0x02
    2d9c:	2a 81       	ldd	r18, Y+2	; 0x02
    2d9e:	3b 81       	ldd	r19, Y+3	; 0x03
    2da0:	28 1b       	sub	r18, r24
    2da2:	39 0b       	sbc	r19, r25
    2da4:	8e 81       	ldd	r24, Y+6	; 0x06
    2da6:	9f 81       	ldd	r25, Y+7	; 0x07
    2da8:	fc 01       	movw	r30, r24
    2daa:	80 81       	ld	r24, Z
    2dac:	91 81       	ldd	r25, Z+1	; 0x01
    2dae:	28 17       	cp	r18, r24
    2db0:	39 07       	cpc	r19, r25
    2db2:	e8 f4       	brcc	.+58     	; 0x2dee <xTaskCheckForTimeOut+0xb4>
    2db4:	8e 81       	ldd	r24, Y+6	; 0x06
    2db6:	9f 81       	ldd	r25, Y+7	; 0x07
    2db8:	fc 01       	movw	r30, r24
    2dba:	20 81       	ld	r18, Z
    2dbc:	31 81       	ldd	r19, Z+1	; 0x01
    2dbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	41 81       	ldd	r20, Z+1	; 0x01
    2dc6:	52 81       	ldd	r21, Z+2	; 0x02
    2dc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dca:	9b 81       	ldd	r25, Y+3	; 0x03
    2dcc:	ba 01       	movw	r22, r20
    2dce:	68 1b       	sub	r22, r24
    2dd0:	79 0b       	sbc	r23, r25
    2dd2:	cb 01       	movw	r24, r22
    2dd4:	28 0f       	add	r18, r24
    2dd6:	39 1f       	adc	r19, r25
    2dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dda:	9f 81       	ldd	r25, Y+7	; 0x07
    2ddc:	fc 01       	movw	r30, r24
    2dde:	31 83       	std	Z+1, r19	; 0x01
    2de0:	20 83       	st	Z, r18
    2de2:	8c 81       	ldd	r24, Y+4	; 0x04
    2de4:	9d 81       	ldd	r25, Y+5	; 0x05
    2de6:	0e 94 82 16 	call	0x2d04	; 0x2d04 <vTaskSetTimeOutState>
    2dea:	19 82       	std	Y+1, r1	; 0x01
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <xTaskCheckForTimeOut+0xb8>
    2dee:	81 e0       	ldi	r24, 0x01	; 1
    2df0:	89 83       	std	Y+1, r24	; 0x01
    2df2:	0f 90       	pop	r0
    2df4:	0f be       	out	0x3f, r0	; 63
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	27 96       	adiw	r28, 0x07	; 7
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	df 91       	pop	r29
    2e06:	cf 91       	pop	r28
    2e08:	08 95       	ret

00002e0a <vTaskMissedYield>:
    2e0a:	cf 93       	push	r28
    2e0c:	df 93       	push	r29
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2e18:	df 91       	pop	r29
    2e1a:	cf 91       	pop	r28
    2e1c:	08 95       	ret

00002e1e <prvIdleTask>:
    2e1e:	cf 93       	push	r28
    2e20:	df 93       	push	r29
    2e22:	00 d0       	rcall	.+0      	; 0x2e24 <prvIdleTask+0x6>
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
    2e28:	9a 83       	std	Y+2, r25	; 0x02
    2e2a:	89 83       	std	Y+1, r24	; 0x01
    2e2c:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <prvCheckTasksWaitingTermination>
    2e30:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxReadyTasksLists>
    2e34:	82 30       	cpi	r24, 0x02	; 2
    2e36:	10 f0       	brcs	.+4      	; 0x2e3c <prvIdleTask+0x1e>
    2e38:	0e 94 e0 08 	call	0x11c0	; 0x11c0 <vPortYield>
    2e3c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <vApplicationIdleHook>
    2e40:	f5 cf       	rjmp	.-22     	; 0x2e2c <prvIdleTask+0xe>

00002e42 <prvInitialiseTaskLists>:
    2e42:	cf 93       	push	r28
    2e44:	df 93       	push	r29
    2e46:	1f 92       	push	r1
    2e48:	cd b7       	in	r28, 0x3d	; 61
    2e4a:	de b7       	in	r29, 0x3e	; 62
    2e4c:	19 82       	std	Y+1, r1	; 0x01
    2e4e:	13 c0       	rjmp	.+38     	; 0x2e76 <prvInitialiseTaskLists+0x34>
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	28 2f       	mov	r18, r24
    2e54:	30 e0       	ldi	r19, 0x00	; 0
    2e56:	c9 01       	movw	r24, r18
    2e58:	88 0f       	add	r24, r24
    2e5a:	99 1f       	adc	r25, r25
    2e5c:	88 0f       	add	r24, r24
    2e5e:	99 1f       	adc	r25, r25
    2e60:	88 0f       	add	r24, r24
    2e62:	99 1f       	adc	r25, r25
    2e64:	82 0f       	add	r24, r18
    2e66:	93 1f       	adc	r25, r19
    2e68:	8e 58       	subi	r24, 0x8E	; 142
    2e6a:	9a 4f       	sbci	r25, 0xFA	; 250
    2e6c:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    2e70:	89 81       	ldd	r24, Y+1	; 0x01
    2e72:	8f 5f       	subi	r24, 0xFF	; 255
    2e74:	89 83       	std	Y+1, r24	; 0x01
    2e76:	89 81       	ldd	r24, Y+1	; 0x01
    2e78:	84 30       	cpi	r24, 0x04	; 4
    2e7a:	50 f3       	brcs	.-44     	; 0x2e50 <prvInitialiseTaskLists+0xe>
    2e7c:	86 e9       	ldi	r24, 0x96	; 150
    2e7e:	95 e0       	ldi	r25, 0x05	; 5
    2e80:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    2e84:	8f e9       	ldi	r24, 0x9F	; 159
    2e86:	95 e0       	ldi	r25, 0x05	; 5
    2e88:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    2e8c:	8c ea       	ldi	r24, 0xAC	; 172
    2e8e:	95 e0       	ldi	r25, 0x05	; 5
    2e90:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    2e94:	85 eb       	ldi	r24, 0xB5	; 181
    2e96:	95 e0       	ldi	r25, 0x05	; 5
    2e98:	0e 94 a0 05 	call	0xb40	; 0xb40 <vListInitialise>
    2e9c:	86 e9       	ldi	r24, 0x96	; 150
    2e9e:	95 e0       	ldi	r25, 0x05	; 5
    2ea0:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    2ea4:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2ea8:	8f e9       	ldi	r24, 0x9F	; 159
    2eaa:	95 e0       	ldi	r25, 0x05	; 5
    2eac:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2eb0:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    2eb4:	0f 90       	pop	r0
    2eb6:	df 91       	pop	r29
    2eb8:	cf 91       	pop	r28
    2eba:	08 95       	ret

00002ebc <prvCheckTasksWaitingTermination>:
    2ebc:	cf 93       	push	r28
    2ebe:	df 93       	push	r29
    2ec0:	00 d0       	rcall	.+0      	; 0x2ec2 <prvCheckTasksWaitingTermination+0x6>
    2ec2:	1f 92       	push	r1
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	2f c0       	rjmp	.+94     	; 0x2f28 <prvCheckTasksWaitingTermination+0x6c>
    2eca:	0e 94 df 13 	call	0x27be	; 0x27be <vTaskSuspendAll>
    2ece:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <xTasksWaitingTermination>
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	99 23       	and	r25, r25
    2ed6:	09 f0       	breq	.+2      	; 0x2eda <prvCheckTasksWaitingTermination+0x1e>
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	89 83       	std	Y+1, r24	; 0x01
    2edc:	0e 94 eb 13 	call	0x27d6	; 0x27d6 <xTaskResumeAll>
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	88 23       	and	r24, r24
    2ee4:	09 f5       	brne	.+66     	; 0x2f28 <prvCheckTasksWaitingTermination+0x6c>
    2ee6:	0f b6       	in	r0, 0x3f	; 63
    2ee8:	f8 94       	cli
    2eea:	0f 92       	push	r0
    2eec:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <xTasksWaitingTermination+0x5>
    2ef0:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <xTasksWaitingTermination+0x6>
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	86 81       	ldd	r24, Z+6	; 0x06
    2ef8:	97 81       	ldd	r25, Z+7	; 0x07
    2efa:	9b 83       	std	Y+3, r25	; 0x03
    2efc:	8a 83       	std	Y+2, r24	; 0x02
    2efe:	8a 81       	ldd	r24, Y+2	; 0x02
    2f00:	9b 81       	ldd	r25, Y+3	; 0x03
    2f02:	02 96       	adiw	r24, 0x02	; 2
    2f04:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    2f08:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2f0c:	81 50       	subi	r24, 0x01	; 1
    2f0e:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    2f12:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    2f16:	81 50       	subi	r24, 0x01	; 1
    2f18:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    2f1c:	0f 90       	pop	r0
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	8a 81       	ldd	r24, Y+2	; 0x02
    2f22:	9b 81       	ldd	r25, Y+3	; 0x03
    2f24:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <prvDeleteTCB>
    2f28:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    2f2c:	88 23       	and	r24, r24
    2f2e:	69 f6       	brne	.-102    	; 0x2eca <prvCheckTasksWaitingTermination+0xe>
    2f30:	0f 90       	pop	r0
    2f32:	0f 90       	pop	r0
    2f34:	0f 90       	pop	r0
    2f36:	df 91       	pop	r29
    2f38:	cf 91       	pop	r28
    2f3a:	08 95       	ret

00002f3c <prvDeleteTCB>:
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	00 d0       	rcall	.+0      	; 0x2f42 <prvDeleteTCB+0x6>
    2f42:	cd b7       	in	r28, 0x3d	; 61
    2f44:	de b7       	in	r29, 0x3e	; 62
    2f46:	9a 83       	std	Y+2, r25	; 0x02
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4e:	fc 01       	movw	r30, r24
    2f50:	87 89       	ldd	r24, Z+23	; 0x17
    2f52:	90 8d       	ldd	r25, Z+24	; 0x18
    2f54:	0e 94 4f 0a 	call	0x149e	; 0x149e <vPortFree>
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f5c:	0e 94 4f 0a 	call	0x149e	; 0x149e <vPortFree>
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	df 91       	pop	r29
    2f66:	cf 91       	pop	r28
    2f68:	08 95       	ret

00002f6a <prvResetNextTaskUnblockTime>:
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <prvResetNextTaskUnblockTime+0x6>
    2f70:	cd b7       	in	r28, 0x3d	; 61
    2f72:	de b7       	in	r29, 0x3e	; 62
    2f74:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2f78:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	80 81       	ld	r24, Z
    2f80:	88 23       	and	r24, r24
    2f82:	39 f4       	brne	.+14     	; 0x2f92 <prvResetNextTaskUnblockTime+0x28>
    2f84:	8f ef       	ldi	r24, 0xFF	; 255
    2f86:	9f ef       	ldi	r25, 0xFF	; 255
    2f88:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2f8c:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2f90:	15 c0       	rjmp	.+42     	; 0x2fbc <prvResetNextTaskUnblockTime+0x52>
    2f92:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2f96:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2f9a:	fc 01       	movw	r30, r24
    2f9c:	85 81       	ldd	r24, Z+5	; 0x05
    2f9e:	96 81       	ldd	r25, Z+6	; 0x06
    2fa0:	fc 01       	movw	r30, r24
    2fa2:	86 81       	ldd	r24, Z+6	; 0x06
    2fa4:	97 81       	ldd	r25, Z+7	; 0x07
    2fa6:	9a 83       	std	Y+2, r25	; 0x02
    2fa8:	89 83       	std	Y+1, r24	; 0x01
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	fc 01       	movw	r30, r24
    2fb0:	82 81       	ldd	r24, Z+2	; 0x02
    2fb2:	93 81       	ldd	r25, Z+3	; 0x03
    2fb4:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2fb8:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	08 95       	ret

00002fc6 <vTaskPriorityInherit>:
    2fc6:	cf 93       	push	r28
    2fc8:	df 93       	push	r29
    2fca:	00 d0       	rcall	.+0      	; 0x2fcc <vTaskPriorityInherit+0x6>
    2fcc:	00 d0       	rcall	.+0      	; 0x2fce <vTaskPriorityInherit+0x8>
    2fce:	cd b7       	in	r28, 0x3d	; 61
    2fd0:	de b7       	in	r29, 0x3e	; 62
    2fd2:	9c 83       	std	Y+4, r25	; 0x04
    2fd4:	8b 83       	std	Y+3, r24	; 0x03
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	9a 83       	std	Y+2, r25	; 0x02
    2fdc:	89 83       	std	Y+1, r24	; 0x01
    2fde:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    2fe2:	89 2b       	or	r24, r25
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <vTaskPriorityInherit+0x22>
    2fe6:	7f c0       	rjmp	.+254    	; 0x30e6 <vTaskPriorityInherit+0x120>
    2fe8:	89 81       	ldd	r24, Y+1	; 0x01
    2fea:	9a 81       	ldd	r25, Y+2	; 0x02
    2fec:	fc 01       	movw	r30, r24
    2fee:	26 89       	ldd	r18, Z+22	; 0x16
    2ff0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2ff4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	86 89       	ldd	r24, Z+22	; 0x16
    2ffc:	28 17       	cp	r18, r24
    2ffe:	08 f0       	brcs	.+2      	; 0x3002 <vTaskPriorityInherit+0x3c>
    3000:	72 c0       	rjmp	.+228    	; 0x30e6 <vTaskPriorityInherit+0x120>
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	9a 81       	ldd	r25, Y+2	; 0x02
    3006:	fc 01       	movw	r30, r24
    3008:	84 85       	ldd	r24, Z+12	; 0x0c
    300a:	95 85       	ldd	r25, Z+13	; 0x0d
    300c:	99 23       	and	r25, r25
    300e:	8c f0       	brlt	.+34     	; 0x3032 <vTaskPriorityInherit+0x6c>
    3010:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3014:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3018:	fc 01       	movw	r30, r24
    301a:	86 89       	ldd	r24, Z+22	; 0x16
    301c:	88 2f       	mov	r24, r24
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	24 e0       	ldi	r18, 0x04	; 4
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	28 1b       	sub	r18, r24
    3026:	39 0b       	sbc	r19, r25
    3028:	89 81       	ldd	r24, Y+1	; 0x01
    302a:	9a 81       	ldd	r25, Y+2	; 0x02
    302c:	fc 01       	movw	r30, r24
    302e:	35 87       	std	Z+13, r19	; 0x0d
    3030:	24 87       	std	Z+12, r18	; 0x0c
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	fc 01       	movw	r30, r24
    3038:	42 85       	ldd	r20, Z+10	; 0x0a
    303a:	53 85       	ldd	r21, Z+11	; 0x0b
    303c:	89 81       	ldd	r24, Y+1	; 0x01
    303e:	9a 81       	ldd	r25, Y+2	; 0x02
    3040:	fc 01       	movw	r30, r24
    3042:	86 89       	ldd	r24, Z+22	; 0x16
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	c9 01       	movw	r24, r18
    304a:	88 0f       	add	r24, r24
    304c:	99 1f       	adc	r25, r25
    304e:	88 0f       	add	r24, r24
    3050:	99 1f       	adc	r25, r25
    3052:	88 0f       	add	r24, r24
    3054:	99 1f       	adc	r25, r25
    3056:	82 0f       	add	r24, r18
    3058:	93 1f       	adc	r25, r19
    305a:	8e 58       	subi	r24, 0x8E	; 142
    305c:	9a 4f       	sbci	r25, 0xFA	; 250
    305e:	48 17       	cp	r20, r24
    3060:	59 07       	cpc	r21, r25
    3062:	b9 f5       	brne	.+110    	; 0x30d2 <vTaskPriorityInherit+0x10c>
    3064:	89 81       	ldd	r24, Y+1	; 0x01
    3066:	9a 81       	ldd	r25, Y+2	; 0x02
    3068:	02 96       	adiw	r24, 0x02	; 2
    306a:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    306e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3072:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3076:	fc 01       	movw	r30, r24
    3078:	26 89       	ldd	r18, Z+22	; 0x16
    307a:	89 81       	ldd	r24, Y+1	; 0x01
    307c:	9a 81       	ldd	r25, Y+2	; 0x02
    307e:	fc 01       	movw	r30, r24
    3080:	26 8b       	std	Z+22, r18	; 0x16
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	9a 81       	ldd	r25, Y+2	; 0x02
    3086:	fc 01       	movw	r30, r24
    3088:	96 89       	ldd	r25, Z+22	; 0x16
    308a:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    308e:	89 17       	cp	r24, r25
    3090:	30 f4       	brcc	.+12     	; 0x309e <vTaskPriorityInherit+0xd8>
    3092:	89 81       	ldd	r24, Y+1	; 0x01
    3094:	9a 81       	ldd	r25, Y+2	; 0x02
    3096:	fc 01       	movw	r30, r24
    3098:	86 89       	ldd	r24, Z+22	; 0x16
    309a:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    309e:	89 81       	ldd	r24, Y+1	; 0x01
    30a0:	9a 81       	ldd	r25, Y+2	; 0x02
    30a2:	ac 01       	movw	r20, r24
    30a4:	4e 5f       	subi	r20, 0xFE	; 254
    30a6:	5f 4f       	sbci	r21, 0xFF	; 255
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	fc 01       	movw	r30, r24
    30ae:	86 89       	ldd	r24, Z+22	; 0x16
    30b0:	28 2f       	mov	r18, r24
    30b2:	30 e0       	ldi	r19, 0x00	; 0
    30b4:	c9 01       	movw	r24, r18
    30b6:	88 0f       	add	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	88 0f       	add	r24, r24
    30bc:	99 1f       	adc	r25, r25
    30be:	88 0f       	add	r24, r24
    30c0:	99 1f       	adc	r25, r25
    30c2:	82 0f       	add	r24, r18
    30c4:	93 1f       	adc	r25, r19
    30c6:	8e 58       	subi	r24, 0x8E	; 142
    30c8:	9a 4f       	sbci	r25, 0xFA	; 250
    30ca:	ba 01       	movw	r22, r20
    30cc:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    30d0:	0a c0       	rjmp	.+20     	; 0x30e6 <vTaskPriorityInherit+0x120>
    30d2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    30d6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    30da:	fc 01       	movw	r30, r24
    30dc:	26 89       	ldd	r18, Z+22	; 0x16
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	fc 01       	movw	r30, r24
    30e4:	26 8b       	std	Z+22, r18	; 0x16
    30e6:	0f 90       	pop	r0
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	08 95       	ret

000030f4 <xTaskPriorityDisinherit>:
    30f4:	cf 93       	push	r28
    30f6:	df 93       	push	r29
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <xTaskPriorityDisinherit+0x6>
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <xTaskPriorityDisinherit+0x8>
    30fc:	1f 92       	push	r1
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	9d 83       	std	Y+5, r25	; 0x05
    3104:	8c 83       	std	Y+4, r24	; 0x04
    3106:	8c 81       	ldd	r24, Y+4	; 0x04
    3108:	9d 81       	ldd	r25, Y+5	; 0x05
    310a:	9b 83       	std	Y+3, r25	; 0x03
    310c:	8a 83       	std	Y+2, r24	; 0x02
    310e:	19 82       	std	Y+1, r1	; 0x01
    3110:	8c 81       	ldd	r24, Y+4	; 0x04
    3112:	9d 81       	ldd	r25, Y+5	; 0x05
    3114:	89 2b       	or	r24, r25
    3116:	09 f4       	brne	.+2      	; 0x311a <xTaskPriorityDisinherit+0x26>
    3118:	61 c0       	rjmp	.+194    	; 0x31dc <xTaskPriorityDisinherit+0xe8>
    311a:	8a 81       	ldd	r24, Y+2	; 0x02
    311c:	9b 81       	ldd	r25, Y+3	; 0x03
    311e:	fc 01       	movw	r30, r24
    3120:	84 a1       	ldd	r24, Z+36	; 0x24
    3122:	2f ef       	ldi	r18, 0xFF	; 255
    3124:	28 0f       	add	r18, r24
    3126:	8a 81       	ldd	r24, Y+2	; 0x02
    3128:	9b 81       	ldd	r25, Y+3	; 0x03
    312a:	fc 01       	movw	r30, r24
    312c:	24 a3       	std	Z+36, r18	; 0x24
    312e:	8a 81       	ldd	r24, Y+2	; 0x02
    3130:	9b 81       	ldd	r25, Y+3	; 0x03
    3132:	fc 01       	movw	r30, r24
    3134:	26 89       	ldd	r18, Z+22	; 0x16
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	fc 01       	movw	r30, r24
    313c:	83 a1       	ldd	r24, Z+35	; 0x23
    313e:	28 17       	cp	r18, r24
    3140:	09 f4       	brne	.+2      	; 0x3144 <xTaskPriorityDisinherit+0x50>
    3142:	4c c0       	rjmp	.+152    	; 0x31dc <xTaskPriorityDisinherit+0xe8>
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	fc 01       	movw	r30, r24
    314a:	84 a1       	ldd	r24, Z+36	; 0x24
    314c:	88 23       	and	r24, r24
    314e:	09 f0       	breq	.+2      	; 0x3152 <xTaskPriorityDisinherit+0x5e>
    3150:	45 c0       	rjmp	.+138    	; 0x31dc <xTaskPriorityDisinherit+0xe8>
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	02 96       	adiw	r24, 0x02	; 2
    3158:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
    315c:	8a 81       	ldd	r24, Y+2	; 0x02
    315e:	9b 81       	ldd	r25, Y+3	; 0x03
    3160:	fc 01       	movw	r30, r24
    3162:	23 a1       	ldd	r18, Z+35	; 0x23
    3164:	8a 81       	ldd	r24, Y+2	; 0x02
    3166:	9b 81       	ldd	r25, Y+3	; 0x03
    3168:	fc 01       	movw	r30, r24
    316a:	26 8b       	std	Z+22, r18	; 0x16
    316c:	8a 81       	ldd	r24, Y+2	; 0x02
    316e:	9b 81       	ldd	r25, Y+3	; 0x03
    3170:	fc 01       	movw	r30, r24
    3172:	86 89       	ldd	r24, Z+22	; 0x16
    3174:	88 2f       	mov	r24, r24
    3176:	90 e0       	ldi	r25, 0x00	; 0
    3178:	24 e0       	ldi	r18, 0x04	; 4
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	28 1b       	sub	r18, r24
    317e:	39 0b       	sbc	r19, r25
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	9b 81       	ldd	r25, Y+3	; 0x03
    3184:	fc 01       	movw	r30, r24
    3186:	35 87       	std	Z+13, r19	; 0x0d
    3188:	24 87       	std	Z+12, r18	; 0x0c
    318a:	8a 81       	ldd	r24, Y+2	; 0x02
    318c:	9b 81       	ldd	r25, Y+3	; 0x03
    318e:	fc 01       	movw	r30, r24
    3190:	96 89       	ldd	r25, Z+22	; 0x16
    3192:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3196:	89 17       	cp	r24, r25
    3198:	30 f4       	brcc	.+12     	; 0x31a6 <xTaskPriorityDisinherit+0xb2>
    319a:	8a 81       	ldd	r24, Y+2	; 0x02
    319c:	9b 81       	ldd	r25, Y+3	; 0x03
    319e:	fc 01       	movw	r30, r24
    31a0:	86 89       	ldd	r24, Z+22	; 0x16
    31a2:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    31a6:	8a 81       	ldd	r24, Y+2	; 0x02
    31a8:	9b 81       	ldd	r25, Y+3	; 0x03
    31aa:	ac 01       	movw	r20, r24
    31ac:	4e 5f       	subi	r20, 0xFE	; 254
    31ae:	5f 4f       	sbci	r21, 0xFF	; 255
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	fc 01       	movw	r30, r24
    31b6:	86 89       	ldd	r24, Z+22	; 0x16
    31b8:	28 2f       	mov	r18, r24
    31ba:	30 e0       	ldi	r19, 0x00	; 0
    31bc:	c9 01       	movw	r24, r18
    31be:	88 0f       	add	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25
    31ca:	82 0f       	add	r24, r18
    31cc:	93 1f       	adc	r25, r19
    31ce:	8e 58       	subi	r24, 0x8E	; 142
    31d0:	9a 4f       	sbci	r25, 0xFA	; 250
    31d2:	ba 01       	movw	r22, r20
    31d4:	0e 94 e6 05 	call	0xbcc	; 0xbcc <vListInsertEnd>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	0f 90       	pop	r0
    31e6:	0f 90       	pop	r0
    31e8:	df 91       	pop	r29
    31ea:	cf 91       	pop	r28
    31ec:	08 95       	ret

000031ee <pvTaskIncrementMutexHeldCount>:
    31ee:	cf 93       	push	r28
    31f0:	df 93       	push	r29
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31fa:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31fe:	89 2b       	or	r24, r25
    3200:	49 f0       	breq	.+18     	; 0x3214 <pvTaskIncrementMutexHeldCount+0x26>
    3202:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3206:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    320a:	fc 01       	movw	r30, r24
    320c:	24 a1       	ldd	r18, Z+36	; 0x24
    320e:	2f 5f       	subi	r18, 0xFF	; 255
    3210:	fc 01       	movw	r30, r24
    3212:	24 a3       	std	Z+36, r18	; 0x24
    3214:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3218:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    321c:	df 91       	pop	r29
    321e:	cf 91       	pop	r28
    3220:	08 95       	ret

00003222 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3222:	cf 93       	push	r28
    3224:	df 93       	push	r29
    3226:	cd b7       	in	r28, 0x3d	; 61
    3228:	de b7       	in	r29, 0x3e	; 62
    322a:	27 97       	sbiw	r28, 0x07	; 7
    322c:	0f b6       	in	r0, 0x3f	; 63
    322e:	f8 94       	cli
    3230:	de bf       	out	0x3e, r29	; 62
    3232:	0f be       	out	0x3f, r0	; 63
    3234:	cd bf       	out	0x3d, r28	; 61
    3236:	9e 83       	std	Y+6, r25	; 0x06
    3238:	8d 83       	std	Y+5, r24	; 0x05
    323a:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    323c:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    3240:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    3244:	9a 83       	std	Y+2, r25	; 0x02
    3246:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3248:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    324c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3250:	02 96       	adiw	r24, 0x02	; 2
    3252:	0e 94 ab 06 	call	0xd56	; 0xd56 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3256:	29 81       	ldd	r18, Y+1	; 0x01
    3258:	3a 81       	ldd	r19, Y+2	; 0x02
    325a:	8d 81       	ldd	r24, Y+5	; 0x05
    325c:	9e 81       	ldd	r25, Y+6	; 0x06
    325e:	82 0f       	add	r24, r18
    3260:	93 1f       	adc	r25, r19
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3266:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    326a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    326e:	2b 81       	ldd	r18, Y+3	; 0x03
    3270:	3c 81       	ldd	r19, Y+4	; 0x04
    3272:	fc 01       	movw	r30, r24
    3274:	33 83       	std	Z+3, r19	; 0x03
    3276:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3278:	2b 81       	ldd	r18, Y+3	; 0x03
    327a:	3c 81       	ldd	r19, Y+4	; 0x04
    327c:	89 81       	ldd	r24, Y+1	; 0x01
    327e:	9a 81       	ldd	r25, Y+2	; 0x02
    3280:	28 17       	cp	r18, r24
    3282:	39 07       	cpc	r19, r25
    3284:	78 f4       	brcc	.+30     	; 0x32a4 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3286:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    328a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    328e:	9c 01       	movw	r18, r24
    3290:	2e 5f       	subi	r18, 0xFE	; 254
    3292:	3f 4f       	sbci	r19, 0xFF	; 255
    3294:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    3298:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    329c:	b9 01       	movw	r22, r18
    329e:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsert>
    32a2:	1d c0       	rjmp	.+58     	; 0x32de <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    32a4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    32a8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    32ac:	9c 01       	movw	r18, r24
    32ae:	2e 5f       	subi	r18, 0xFE	; 254
    32b0:	3f 4f       	sbci	r19, 0xFF	; 255
    32b2:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    32b6:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    32ba:	b9 01       	movw	r22, r18
    32bc:	0e 94 34 06 	call	0xc68	; 0xc68 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    32c0:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    32c4:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    32c8:	2b 81       	ldd	r18, Y+3	; 0x03
    32ca:	3c 81       	ldd	r19, Y+4	; 0x04
    32cc:	28 17       	cp	r18, r24
    32ce:	39 07       	cpc	r19, r25
    32d0:	30 f4       	brcc	.+12     	; 0x32de <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    32d2:	8b 81       	ldd	r24, Y+3	; 0x03
    32d4:	9c 81       	ldd	r25, Y+4	; 0x04
    32d6:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    32da:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    32de:	27 96       	adiw	r28, 0x07	; 7
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	08 95       	ret

000032f0 <__divmodhi4>:
    32f0:	97 fb       	bst	r25, 7
    32f2:	07 2e       	mov	r0, r23
    32f4:	16 f4       	brtc	.+4      	; 0x32fa <__divmodhi4+0xa>
    32f6:	00 94       	com	r0
    32f8:	07 d0       	rcall	.+14     	; 0x3308 <__divmodhi4_neg1>
    32fa:	77 fd       	sbrc	r23, 7
    32fc:	09 d0       	rcall	.+18     	; 0x3310 <__divmodhi4_neg2>
    32fe:	0e 94 b4 19 	call	0x3368	; 0x3368 <__udivmodhi4>
    3302:	07 fc       	sbrc	r0, 7
    3304:	05 d0       	rcall	.+10     	; 0x3310 <__divmodhi4_neg2>
    3306:	3e f4       	brtc	.+14     	; 0x3316 <__divmodhi4_exit>

00003308 <__divmodhi4_neg1>:
    3308:	90 95       	com	r25
    330a:	81 95       	neg	r24
    330c:	9f 4f       	sbci	r25, 0xFF	; 255
    330e:	08 95       	ret

00003310 <__divmodhi4_neg2>:
    3310:	70 95       	com	r23
    3312:	61 95       	neg	r22
    3314:	7f 4f       	sbci	r23, 0xFF	; 255

00003316 <__divmodhi4_exit>:
    3316:	08 95       	ret

00003318 <__udivmodsi4>:
    3318:	a1 e2       	ldi	r26, 0x21	; 33
    331a:	1a 2e       	mov	r1, r26
    331c:	aa 1b       	sub	r26, r26
    331e:	bb 1b       	sub	r27, r27
    3320:	fd 01       	movw	r30, r26
    3322:	0d c0       	rjmp	.+26     	; 0x333e <__udivmodsi4_ep>

00003324 <__udivmodsi4_loop>:
    3324:	aa 1f       	adc	r26, r26
    3326:	bb 1f       	adc	r27, r27
    3328:	ee 1f       	adc	r30, r30
    332a:	ff 1f       	adc	r31, r31
    332c:	a2 17       	cp	r26, r18
    332e:	b3 07       	cpc	r27, r19
    3330:	e4 07       	cpc	r30, r20
    3332:	f5 07       	cpc	r31, r21
    3334:	20 f0       	brcs	.+8      	; 0x333e <__udivmodsi4_ep>
    3336:	a2 1b       	sub	r26, r18
    3338:	b3 0b       	sbc	r27, r19
    333a:	e4 0b       	sbc	r30, r20
    333c:	f5 0b       	sbc	r31, r21

0000333e <__udivmodsi4_ep>:
    333e:	66 1f       	adc	r22, r22
    3340:	77 1f       	adc	r23, r23
    3342:	88 1f       	adc	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	1a 94       	dec	r1
    3348:	69 f7       	brne	.-38     	; 0x3324 <__udivmodsi4_loop>
    334a:	60 95       	com	r22
    334c:	70 95       	com	r23
    334e:	80 95       	com	r24
    3350:	90 95       	com	r25
    3352:	9b 01       	movw	r18, r22
    3354:	ac 01       	movw	r20, r24
    3356:	bd 01       	movw	r22, r26
    3358:	cf 01       	movw	r24, r30
    335a:	08 95       	ret

0000335c <__tablejump2__>:
    335c:	ee 0f       	add	r30, r30
    335e:	ff 1f       	adc	r31, r31
    3360:	05 90       	lpm	r0, Z+
    3362:	f4 91       	lpm	r31, Z
    3364:	e0 2d       	mov	r30, r0
    3366:	09 94       	ijmp

00003368 <__udivmodhi4>:
    3368:	aa 1b       	sub	r26, r26
    336a:	bb 1b       	sub	r27, r27
    336c:	51 e1       	ldi	r21, 0x11	; 17
    336e:	07 c0       	rjmp	.+14     	; 0x337e <__udivmodhi4_ep>

00003370 <__udivmodhi4_loop>:
    3370:	aa 1f       	adc	r26, r26
    3372:	bb 1f       	adc	r27, r27
    3374:	a6 17       	cp	r26, r22
    3376:	b7 07       	cpc	r27, r23
    3378:	10 f0       	brcs	.+4      	; 0x337e <__udivmodhi4_ep>
    337a:	a6 1b       	sub	r26, r22
    337c:	b7 0b       	sbc	r27, r23

0000337e <__udivmodhi4_ep>:
    337e:	88 1f       	adc	r24, r24
    3380:	99 1f       	adc	r25, r25
    3382:	5a 95       	dec	r21
    3384:	a9 f7       	brne	.-22     	; 0x3370 <__udivmodhi4_loop>
    3386:	80 95       	com	r24
    3388:	90 95       	com	r25
    338a:	bc 01       	movw	r22, r24
    338c:	cd 01       	movw	r24, r26
    338e:	08 95       	ret

00003390 <malloc>:
    3390:	cf 93       	push	r28
    3392:	df 93       	push	r29
    3394:	82 30       	cpi	r24, 0x02	; 2
    3396:	91 05       	cpc	r25, r1
    3398:	10 f4       	brcc	.+4      	; 0x339e <malloc+0xe>
    339a:	82 e0       	ldi	r24, 0x02	; 2
    339c:	90 e0       	ldi	r25, 0x00	; 0
    339e:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <__flp>
    33a2:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <__flp+0x1>
    33a6:	20 e0       	ldi	r18, 0x00	; 0
    33a8:	30 e0       	ldi	r19, 0x00	; 0
    33aa:	c0 e0       	ldi	r28, 0x00	; 0
    33ac:	d0 e0       	ldi	r29, 0x00	; 0
    33ae:	30 97       	sbiw	r30, 0x00	; 0
    33b0:	11 f1       	breq	.+68     	; 0x33f6 <malloc+0x66>
    33b2:	40 81       	ld	r20, Z
    33b4:	51 81       	ldd	r21, Z+1	; 0x01
    33b6:	48 17       	cp	r20, r24
    33b8:	59 07       	cpc	r21, r25
    33ba:	c0 f0       	brcs	.+48     	; 0x33ec <malloc+0x5c>
    33bc:	48 17       	cp	r20, r24
    33be:	59 07       	cpc	r21, r25
    33c0:	61 f4       	brne	.+24     	; 0x33da <malloc+0x4a>
    33c2:	82 81       	ldd	r24, Z+2	; 0x02
    33c4:	93 81       	ldd	r25, Z+3	; 0x03
    33c6:	20 97       	sbiw	r28, 0x00	; 0
    33c8:	19 f0       	breq	.+6      	; 0x33d0 <malloc+0x40>
    33ca:	9b 83       	std	Y+3, r25	; 0x03
    33cc:	8a 83       	std	Y+2, r24	; 0x02
    33ce:	2b c0       	rjmp	.+86     	; 0x3426 <malloc+0x96>
    33d0:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    33d4:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    33d8:	26 c0       	rjmp	.+76     	; 0x3426 <malloc+0x96>
    33da:	21 15       	cp	r18, r1
    33dc:	31 05       	cpc	r19, r1
    33de:	19 f0       	breq	.+6      	; 0x33e6 <malloc+0x56>
    33e0:	42 17       	cp	r20, r18
    33e2:	53 07       	cpc	r21, r19
    33e4:	18 f4       	brcc	.+6      	; 0x33ec <malloc+0x5c>
    33e6:	9a 01       	movw	r18, r20
    33e8:	be 01       	movw	r22, r28
    33ea:	df 01       	movw	r26, r30
    33ec:	ef 01       	movw	r28, r30
    33ee:	02 80       	ldd	r0, Z+2	; 0x02
    33f0:	f3 81       	ldd	r31, Z+3	; 0x03
    33f2:	e0 2d       	mov	r30, r0
    33f4:	dc cf       	rjmp	.-72     	; 0x33ae <malloc+0x1e>
    33f6:	21 15       	cp	r18, r1
    33f8:	31 05       	cpc	r19, r1
    33fa:	09 f1       	breq	.+66     	; 0x343e <malloc+0xae>
    33fc:	28 1b       	sub	r18, r24
    33fe:	39 0b       	sbc	r19, r25
    3400:	24 30       	cpi	r18, 0x04	; 4
    3402:	31 05       	cpc	r19, r1
    3404:	90 f4       	brcc	.+36     	; 0x342a <malloc+0x9a>
    3406:	12 96       	adiw	r26, 0x02	; 2
    3408:	8d 91       	ld	r24, X+
    340a:	9c 91       	ld	r25, X
    340c:	13 97       	sbiw	r26, 0x03	; 3
    340e:	61 15       	cp	r22, r1
    3410:	71 05       	cpc	r23, r1
    3412:	21 f0       	breq	.+8      	; 0x341c <malloc+0x8c>
    3414:	fb 01       	movw	r30, r22
    3416:	93 83       	std	Z+3, r25	; 0x03
    3418:	82 83       	std	Z+2, r24	; 0x02
    341a:	04 c0       	rjmp	.+8      	; 0x3424 <malloc+0x94>
    341c:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    3420:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    3424:	fd 01       	movw	r30, r26
    3426:	32 96       	adiw	r30, 0x02	; 2
    3428:	44 c0       	rjmp	.+136    	; 0x34b2 <malloc+0x122>
    342a:	fd 01       	movw	r30, r26
    342c:	e2 0f       	add	r30, r18
    342e:	f3 1f       	adc	r31, r19
    3430:	81 93       	st	Z+, r24
    3432:	91 93       	st	Z+, r25
    3434:	22 50       	subi	r18, 0x02	; 2
    3436:	31 09       	sbc	r19, r1
    3438:	2d 93       	st	X+, r18
    343a:	3c 93       	st	X, r19
    343c:	3a c0       	rjmp	.+116    	; 0x34b2 <malloc+0x122>
    343e:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    3442:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    3446:	23 2b       	or	r18, r19
    3448:	41 f4       	brne	.+16     	; 0x345a <malloc+0xca>
    344a:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    344e:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3452:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <__brkval+0x1>
    3456:	20 93 cd 05 	sts	0x05CD, r18	; 0x8005cd <__brkval>
    345a:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    345e:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3462:	21 15       	cp	r18, r1
    3464:	31 05       	cpc	r19, r1
    3466:	41 f4       	brne	.+16     	; 0x3478 <malloc+0xe8>
    3468:	2d b7       	in	r18, 0x3d	; 61
    346a:	3e b7       	in	r19, 0x3e	; 62
    346c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3470:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3474:	24 1b       	sub	r18, r20
    3476:	35 0b       	sbc	r19, r21
    3478:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <__brkval>
    347c:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <__brkval+0x1>
    3480:	e2 17       	cp	r30, r18
    3482:	f3 07       	cpc	r31, r19
    3484:	a0 f4       	brcc	.+40     	; 0x34ae <malloc+0x11e>
    3486:	2e 1b       	sub	r18, r30
    3488:	3f 0b       	sbc	r19, r31
    348a:	28 17       	cp	r18, r24
    348c:	39 07       	cpc	r19, r25
    348e:	78 f0       	brcs	.+30     	; 0x34ae <malloc+0x11e>
    3490:	ac 01       	movw	r20, r24
    3492:	4e 5f       	subi	r20, 0xFE	; 254
    3494:	5f 4f       	sbci	r21, 0xFF	; 255
    3496:	24 17       	cp	r18, r20
    3498:	35 07       	cpc	r19, r21
    349a:	48 f0       	brcs	.+18     	; 0x34ae <malloc+0x11e>
    349c:	4e 0f       	add	r20, r30
    349e:	5f 1f       	adc	r21, r31
    34a0:	50 93 ce 05 	sts	0x05CE, r21	; 0x8005ce <__brkval+0x1>
    34a4:	40 93 cd 05 	sts	0x05CD, r20	; 0x8005cd <__brkval>
    34a8:	81 93       	st	Z+, r24
    34aa:	91 93       	st	Z+, r25
    34ac:	02 c0       	rjmp	.+4      	; 0x34b2 <malloc+0x122>
    34ae:	e0 e0       	ldi	r30, 0x00	; 0
    34b0:	f0 e0       	ldi	r31, 0x00	; 0
    34b2:	cf 01       	movw	r24, r30
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	08 95       	ret

000034ba <free>:
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	cf 93       	push	r28
    34c0:	df 93       	push	r29
    34c2:	00 97       	sbiw	r24, 0x00	; 0
    34c4:	09 f4       	brne	.+2      	; 0x34c8 <free+0xe>
    34c6:	8c c0       	rjmp	.+280    	; 0x35e0 <free+0x126>
    34c8:	fc 01       	movw	r30, r24
    34ca:	32 97       	sbiw	r30, 0x02	; 2
    34cc:	13 82       	std	Z+3, r1	; 0x03
    34ce:	12 82       	std	Z+2, r1	; 0x02
    34d0:	00 91 cf 05 	lds	r16, 0x05CF	; 0x8005cf <__flp>
    34d4:	10 91 d0 05 	lds	r17, 0x05D0	; 0x8005d0 <__flp+0x1>
    34d8:	01 15       	cp	r16, r1
    34da:	11 05       	cpc	r17, r1
    34dc:	81 f4       	brne	.+32     	; 0x34fe <free+0x44>
    34de:	20 81       	ld	r18, Z
    34e0:	31 81       	ldd	r19, Z+1	; 0x01
    34e2:	82 0f       	add	r24, r18
    34e4:	93 1f       	adc	r25, r19
    34e6:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    34ea:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    34ee:	28 17       	cp	r18, r24
    34f0:	39 07       	cpc	r19, r25
    34f2:	79 f5       	brne	.+94     	; 0x3552 <free+0x98>
    34f4:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <__brkval+0x1>
    34f8:	e0 93 cd 05 	sts	0x05CD, r30	; 0x8005cd <__brkval>
    34fc:	71 c0       	rjmp	.+226    	; 0x35e0 <free+0x126>
    34fe:	d8 01       	movw	r26, r16
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	ae 17       	cp	r26, r30
    3506:	bf 07       	cpc	r27, r31
    3508:	50 f4       	brcc	.+20     	; 0x351e <free+0x64>
    350a:	12 96       	adiw	r26, 0x02	; 2
    350c:	2d 91       	ld	r18, X+
    350e:	3c 91       	ld	r19, X
    3510:	13 97       	sbiw	r26, 0x03	; 3
    3512:	ad 01       	movw	r20, r26
    3514:	21 15       	cp	r18, r1
    3516:	31 05       	cpc	r19, r1
    3518:	09 f1       	breq	.+66     	; 0x355c <free+0xa2>
    351a:	d9 01       	movw	r26, r18
    351c:	f3 cf       	rjmp	.-26     	; 0x3504 <free+0x4a>
    351e:	9d 01       	movw	r18, r26
    3520:	da 01       	movw	r26, r20
    3522:	33 83       	std	Z+3, r19	; 0x03
    3524:	22 83       	std	Z+2, r18	; 0x02
    3526:	60 81       	ld	r22, Z
    3528:	71 81       	ldd	r23, Z+1	; 0x01
    352a:	86 0f       	add	r24, r22
    352c:	97 1f       	adc	r25, r23
    352e:	82 17       	cp	r24, r18
    3530:	93 07       	cpc	r25, r19
    3532:	69 f4       	brne	.+26     	; 0x354e <free+0x94>
    3534:	ec 01       	movw	r28, r24
    3536:	28 81       	ld	r18, Y
    3538:	39 81       	ldd	r19, Y+1	; 0x01
    353a:	26 0f       	add	r18, r22
    353c:	37 1f       	adc	r19, r23
    353e:	2e 5f       	subi	r18, 0xFE	; 254
    3540:	3f 4f       	sbci	r19, 0xFF	; 255
    3542:	31 83       	std	Z+1, r19	; 0x01
    3544:	20 83       	st	Z, r18
    3546:	8a 81       	ldd	r24, Y+2	; 0x02
    3548:	9b 81       	ldd	r25, Y+3	; 0x03
    354a:	93 83       	std	Z+3, r25	; 0x03
    354c:	82 83       	std	Z+2, r24	; 0x02
    354e:	45 2b       	or	r20, r21
    3550:	29 f4       	brne	.+10     	; 0x355c <free+0xa2>
    3552:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <__flp+0x1>
    3556:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <__flp>
    355a:	42 c0       	rjmp	.+132    	; 0x35e0 <free+0x126>
    355c:	13 96       	adiw	r26, 0x03	; 3
    355e:	fc 93       	st	X, r31
    3560:	ee 93       	st	-X, r30
    3562:	12 97       	sbiw	r26, 0x02	; 2
    3564:	ed 01       	movw	r28, r26
    3566:	49 91       	ld	r20, Y+
    3568:	59 91       	ld	r21, Y+
    356a:	9e 01       	movw	r18, r28
    356c:	24 0f       	add	r18, r20
    356e:	35 1f       	adc	r19, r21
    3570:	e2 17       	cp	r30, r18
    3572:	f3 07       	cpc	r31, r19
    3574:	71 f4       	brne	.+28     	; 0x3592 <free+0xd8>
    3576:	80 81       	ld	r24, Z
    3578:	91 81       	ldd	r25, Z+1	; 0x01
    357a:	84 0f       	add	r24, r20
    357c:	95 1f       	adc	r25, r21
    357e:	02 96       	adiw	r24, 0x02	; 2
    3580:	11 96       	adiw	r26, 0x01	; 1
    3582:	9c 93       	st	X, r25
    3584:	8e 93       	st	-X, r24
    3586:	82 81       	ldd	r24, Z+2	; 0x02
    3588:	93 81       	ldd	r25, Z+3	; 0x03
    358a:	13 96       	adiw	r26, 0x03	; 3
    358c:	9c 93       	st	X, r25
    358e:	8e 93       	st	-X, r24
    3590:	12 97       	sbiw	r26, 0x02	; 2
    3592:	e0 e0       	ldi	r30, 0x00	; 0
    3594:	f0 e0       	ldi	r31, 0x00	; 0
    3596:	d8 01       	movw	r26, r16
    3598:	12 96       	adiw	r26, 0x02	; 2
    359a:	8d 91       	ld	r24, X+
    359c:	9c 91       	ld	r25, X
    359e:	13 97       	sbiw	r26, 0x03	; 3
    35a0:	00 97       	sbiw	r24, 0x00	; 0
    35a2:	19 f0       	breq	.+6      	; 0x35aa <free+0xf0>
    35a4:	f8 01       	movw	r30, r16
    35a6:	8c 01       	movw	r16, r24
    35a8:	f6 cf       	rjmp	.-20     	; 0x3596 <free+0xdc>
    35aa:	8d 91       	ld	r24, X+
    35ac:	9c 91       	ld	r25, X
    35ae:	98 01       	movw	r18, r16
    35b0:	2e 5f       	subi	r18, 0xFE	; 254
    35b2:	3f 4f       	sbci	r19, 0xFF	; 255
    35b4:	82 0f       	add	r24, r18
    35b6:	93 1f       	adc	r25, r19
    35b8:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    35bc:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    35c0:	28 17       	cp	r18, r24
    35c2:	39 07       	cpc	r19, r25
    35c4:	69 f4       	brne	.+26     	; 0x35e0 <free+0x126>
    35c6:	30 97       	sbiw	r30, 0x00	; 0
    35c8:	29 f4       	brne	.+10     	; 0x35d4 <free+0x11a>
    35ca:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp+0x1>
    35ce:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <__flp>
    35d2:	02 c0       	rjmp	.+4      	; 0x35d8 <free+0x11e>
    35d4:	13 82       	std	Z+3, r1	; 0x03
    35d6:	12 82       	std	Z+2, r1	; 0x02
    35d8:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <__brkval+0x1>
    35dc:	00 93 cd 05 	sts	0x05CD, r16	; 0x8005cd <__brkval>
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	08 95       	ret

000035ea <do_rand>:
    35ea:	8f 92       	push	r8
    35ec:	9f 92       	push	r9
    35ee:	af 92       	push	r10
    35f0:	bf 92       	push	r11
    35f2:	cf 92       	push	r12
    35f4:	df 92       	push	r13
    35f6:	ef 92       	push	r14
    35f8:	ff 92       	push	r15
    35fa:	cf 93       	push	r28
    35fc:	df 93       	push	r29
    35fe:	ec 01       	movw	r28, r24
    3600:	68 81       	ld	r22, Y
    3602:	79 81       	ldd	r23, Y+1	; 0x01
    3604:	8a 81       	ldd	r24, Y+2	; 0x02
    3606:	9b 81       	ldd	r25, Y+3	; 0x03
    3608:	61 15       	cp	r22, r1
    360a:	71 05       	cpc	r23, r1
    360c:	81 05       	cpc	r24, r1
    360e:	91 05       	cpc	r25, r1
    3610:	21 f4       	brne	.+8      	; 0x361a <do_rand+0x30>
    3612:	64 e2       	ldi	r22, 0x24	; 36
    3614:	79 ed       	ldi	r23, 0xD9	; 217
    3616:	8b e5       	ldi	r24, 0x5B	; 91
    3618:	97 e0       	ldi	r25, 0x07	; 7
    361a:	2d e1       	ldi	r18, 0x1D	; 29
    361c:	33 ef       	ldi	r19, 0xF3	; 243
    361e:	41 e0       	ldi	r20, 0x01	; 1
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <__divmodsi4>
    3626:	49 01       	movw	r8, r18
    3628:	5a 01       	movw	r10, r20
    362a:	9b 01       	movw	r18, r22
    362c:	ac 01       	movw	r20, r24
    362e:	a7 ea       	ldi	r26, 0xA7	; 167
    3630:	b1 e4       	ldi	r27, 0x41	; 65
    3632:	0e 94 80 1b 	call	0x3700	; 0x3700 <__muluhisi3>
    3636:	6b 01       	movw	r12, r22
    3638:	7c 01       	movw	r14, r24
    363a:	ac ee       	ldi	r26, 0xEC	; 236
    363c:	b4 ef       	ldi	r27, 0xF4	; 244
    363e:	a5 01       	movw	r20, r10
    3640:	94 01       	movw	r18, r8
    3642:	0e 94 8e 1b 	call	0x371c	; 0x371c <__mulohisi3>
    3646:	dc 01       	movw	r26, r24
    3648:	cb 01       	movw	r24, r22
    364a:	8c 0d       	add	r24, r12
    364c:	9d 1d       	adc	r25, r13
    364e:	ae 1d       	adc	r26, r14
    3650:	bf 1d       	adc	r27, r15
    3652:	b7 ff       	sbrs	r27, 7
    3654:	03 c0       	rjmp	.+6      	; 0x365c <do_rand+0x72>
    3656:	01 97       	sbiw	r24, 0x01	; 1
    3658:	a1 09       	sbc	r26, r1
    365a:	b0 48       	sbci	r27, 0x80	; 128
    365c:	88 83       	st	Y, r24
    365e:	99 83       	std	Y+1, r25	; 0x01
    3660:	aa 83       	std	Y+2, r26	; 0x02
    3662:	bb 83       	std	Y+3, r27	; 0x03
    3664:	9f 77       	andi	r25, 0x7F	; 127
    3666:	df 91       	pop	r29
    3668:	cf 91       	pop	r28
    366a:	ff 90       	pop	r15
    366c:	ef 90       	pop	r14
    366e:	df 90       	pop	r13
    3670:	cf 90       	pop	r12
    3672:	bf 90       	pop	r11
    3674:	af 90       	pop	r10
    3676:	9f 90       	pop	r9
    3678:	8f 90       	pop	r8
    367a:	08 95       	ret

0000367c <rand_r>:
    367c:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <do_rand>
    3680:	08 95       	ret

00003682 <rand>:
    3682:	86 e0       	ldi	r24, 0x06	; 6
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <do_rand>
    368a:	08 95       	ret

0000368c <srand>:
    368c:	a0 e0       	ldi	r26, 0x00	; 0
    368e:	b0 e0       	ldi	r27, 0x00	; 0
    3690:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3694:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3698:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    369c:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    36a0:	08 95       	ret

000036a2 <memcpy>:
    36a2:	fb 01       	movw	r30, r22
    36a4:	dc 01       	movw	r26, r24
    36a6:	02 c0       	rjmp	.+4      	; 0x36ac <memcpy+0xa>
    36a8:	01 90       	ld	r0, Z+
    36aa:	0d 92       	st	X+, r0
    36ac:	41 50       	subi	r20, 0x01	; 1
    36ae:	50 40       	sbci	r21, 0x00	; 0
    36b0:	d8 f7       	brcc	.-10     	; 0x36a8 <memcpy+0x6>
    36b2:	08 95       	ret

000036b4 <memset>:
    36b4:	dc 01       	movw	r26, r24
    36b6:	01 c0       	rjmp	.+2      	; 0x36ba <memset+0x6>
    36b8:	6d 93       	st	X+, r22
    36ba:	41 50       	subi	r20, 0x01	; 1
    36bc:	50 40       	sbci	r21, 0x00	; 0
    36be:	e0 f7       	brcc	.-8      	; 0x36b8 <memset+0x4>
    36c0:	08 95       	ret

000036c2 <__divmodsi4>:
    36c2:	05 2e       	mov	r0, r21
    36c4:	97 fb       	bst	r25, 7
    36c6:	1e f4       	brtc	.+6      	; 0x36ce <__divmodsi4+0xc>
    36c8:	00 94       	com	r0
    36ca:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__negsi2>
    36ce:	57 fd       	sbrc	r21, 7
    36d0:	07 d0       	rcall	.+14     	; 0x36e0 <__divmodsi4_neg2>
    36d2:	0e 94 8c 19 	call	0x3318	; 0x3318 <__udivmodsi4>
    36d6:	07 fc       	sbrc	r0, 7
    36d8:	03 d0       	rcall	.+6      	; 0x36e0 <__divmodsi4_neg2>
    36da:	4e f4       	brtc	.+18     	; 0x36ee <__divmodsi4_exit>
    36dc:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__negsi2>

000036e0 <__divmodsi4_neg2>:
    36e0:	50 95       	com	r21
    36e2:	40 95       	com	r20
    36e4:	30 95       	com	r19
    36e6:	21 95       	neg	r18
    36e8:	3f 4f       	sbci	r19, 0xFF	; 255
    36ea:	4f 4f       	sbci	r20, 0xFF	; 255
    36ec:	5f 4f       	sbci	r21, 0xFF	; 255

000036ee <__divmodsi4_exit>:
    36ee:	08 95       	ret

000036f0 <__negsi2>:
    36f0:	90 95       	com	r25
    36f2:	80 95       	com	r24
    36f4:	70 95       	com	r23
    36f6:	61 95       	neg	r22
    36f8:	7f 4f       	sbci	r23, 0xFF	; 255
    36fa:	8f 4f       	sbci	r24, 0xFF	; 255
    36fc:	9f 4f       	sbci	r25, 0xFF	; 255
    36fe:	08 95       	ret

00003700 <__muluhisi3>:
    3700:	0e 94 93 1b 	call	0x3726	; 0x3726 <__umulhisi3>
    3704:	a5 9f       	mul	r26, r21
    3706:	90 0d       	add	r25, r0
    3708:	b4 9f       	mul	r27, r20
    370a:	90 0d       	add	r25, r0
    370c:	a4 9f       	mul	r26, r20
    370e:	80 0d       	add	r24, r0
    3710:	91 1d       	adc	r25, r1
    3712:	11 24       	eor	r1, r1
    3714:	08 95       	ret

00003716 <__mulshisi3>:
    3716:	b7 ff       	sbrs	r27, 7
    3718:	0c 94 80 1b 	jmp	0x3700	; 0x3700 <__muluhisi3>

0000371c <__mulohisi3>:
    371c:	0e 94 80 1b 	call	0x3700	; 0x3700 <__muluhisi3>
    3720:	82 1b       	sub	r24, r18
    3722:	93 0b       	sbc	r25, r19
    3724:	08 95       	ret

00003726 <__umulhisi3>:
    3726:	a2 9f       	mul	r26, r18
    3728:	b0 01       	movw	r22, r0
    372a:	b3 9f       	mul	r27, r19
    372c:	c0 01       	movw	r24, r0
    372e:	a3 9f       	mul	r26, r19
    3730:	70 0d       	add	r23, r0
    3732:	81 1d       	adc	r24, r1
    3734:	11 24       	eor	r1, r1
    3736:	91 1d       	adc	r25, r1
    3738:	b2 9f       	mul	r27, r18
    373a:	70 0d       	add	r23, r0
    373c:	81 1d       	adc	r24, r1
    373e:	11 24       	eor	r1, r1
    3740:	91 1d       	adc	r25, r1
    3742:	08 95       	ret

00003744 <_exit>:
    3744:	f8 94       	cli

00003746 <__stop_program>:
    3746:	ff cf       	rjmp	.-2      	; 0x3746 <__stop_program>
