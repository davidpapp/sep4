
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00003924  000039b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003924  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000487  0080014c  0080014c  00003a04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003a04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000378f  00000000  00000000  00003f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  000076db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00003491  00000000  00000000  0000823c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0000b6d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018f1  00000000  00000000  0000c9dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b6  00000000  00000000  0000e2cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00010b83  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 e5 0a 	jmp	0x15ca	; 0x15ca <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 23 05 	jmp	0xa46	; 0xa46 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 0a 0c 	jmp	0x1814	; 0x1814 <__vector_20>
      54:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_28>
      74:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	ee 02       	muls	r30, r30
      7e:	f7 02       	muls	r31, r23
      80:	0a 03       	fmul	r16, r18
      82:	15 03       	mulsu	r17, r21
      84:	28 03       	fmul	r18, r16
      86:	31 03       	mulsu	r19, r17
      88:	44 03       	mulsu	r20, r20
      8a:	4f 03       	fmul	r20, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e4 e2       	ldi	r30, 0x24	; 36
      a0:	f9 e3       	ldi	r31, 0x39	; 57
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ac e4       	ldi	r26, 0x4C	; 76
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a3 3d       	cpi	r26, 0xD3	; 211
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 5f 04 	call	0x8be	; 0x8be <main>
      c2:	0c 94 90 1c 	jmp	0x3920	; 0x3920 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <move_player>:
		}	
	}
	
}

void move_player(uint8_t *position, uint8_t direction){
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <move_player+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <move_player+0x8>
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9c 83       	std	Y+4, r25	; 0x04
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	81 f4       	brne	.+32     	; 0x10c <move_player+0x42>
		mask <<= *position;
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	02 c0       	rjmp	.+4      	; 0x102 <move_player+0x38>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	2a 95       	dec	r18
     104:	e2 f7       	brpl	.-8      	; 0xfe <move_player+0x34>
     106:	9a 83       	std	Y+2, r25	; 0x02
     108:	89 83       	std	Y+1, r24	; 0x01
     10a:	12 c0       	rjmp	.+36     	; 0x130 <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	31 09       	sbc	r19, r1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	02 c0       	rjmp	.+4      	; 0x128 <move_player+0x5e>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	2a 95       	dec	r18
     12a:	e2 f7       	brpl	.-8      	; 0x124 <move_player+0x5a>
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	4a e0       	ldi	r20, 0x0A	; 10
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueGenericReceive>
	col_value[0] ^= mask;
     146:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     14a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	82 27       	eor	r24, r18
     154:	93 27       	eor	r25, r19
     156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     15e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     162:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
}
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <game_task>:

void game_task(void *pvParameters)
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	00 d0       	rcall	.+0      	; 0x18a <game_task+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;

	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     192:	86 e2       	ldi	r24, 0x26	; 38
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	80 74       	andi	r24, 0x40	; 64
     1a0:	99 27       	eor	r25, r25
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f5       	brne	.+88     	; 0x1fe <game_task+0x7a>
     1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1ae:	18 16       	cp	r1, r24
     1b0:	19 06       	cpc	r1, r25
     1b2:	2c f5       	brge	.+74     	; 0x1fe <game_task+0x7a>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     1b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	4a e0       	ldi	r20, 0x0A	; 10
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueGenericReceive>
			--player_position;
     1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     1dc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1e0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
			move_player(&player_position, 0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8a e0       	ldi	r24, 0x0A	; 10
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     1fc:	34 c0       	rjmp	.+104    	; 0x266 <game_task+0xe2>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     1fe:	86 e2       	ldi	r24, 0x26	; 38
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	51 f5       	brne	.+84     	; 0x266 <game_task+0xe2>
     212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     21a:	08 97       	sbiw	r24, 0x08	; 8
     21c:	24 f5       	brge	.+72     	; 0x266 <game_task+0xe2>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     21e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     222:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueGenericReceive>
			++player_position;
     234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
			move_player(&player_position, 1);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 65 00 	call	0xca	; 0xca <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelay(50);
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskDelay>
	}	
     26e:	91 cf       	rjmp	.-222    	; 0x192 <game_task+0xe>

00000270 <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <bounce+0x6>
     276:	00 d0       	rcall	.+0      	; 0x278 <bounce+0x8>
     278:	00 d0       	rcall	.+0      	; 0x27a <bounce+0xa>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	81 70       	andi	r24, 0x01	; 1
     28e:	88 23       	and	r24, r24
     290:	d9 f4       	brne	.+54     	; 0x2c8 <bounce+0x58>
		uint8_t r = rand()%3;
     292:	0e 94 2f 1c 	call	0x385e	; 0x385e <rand>
     296:	23 e0       	ldi	r18, 0x03	; 3
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	b9 01       	movw	r22, r18
     29c:	0e 94 66 1a 	call	0x34cc	; 0x34cc <__divmodhi4>
     2a0:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	8d 5f       	subi	r24, 0xFD	; 253
     2a6:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	99 81       	ldd	r25, Y+1	; 0x01
     2b2:	89 0f       	add	r24, r25
     2b4:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	87 70       	andi	r24, 0x07	; 7
     2ba:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	5e c0       	rjmp	.+188    	; 0x384 <bounce+0x114>
	}
	else{
		if (side == 0){
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	88 23       	and	r24, r24
     2cc:	71 f5       	brne	.+92     	; 0x32a <bounce+0xba>
			switch (*direction){
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	91 f0       	breq	.+36     	; 0x304 <bounce+0x94>
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	91 05       	cpc	r25, r1
     2e4:	1c f4       	brge	.+6      	; 0x2ec <bounce+0x7c>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <bounce+0x88>
     2ea:	4c c0       	rjmp	.+152    	; 0x384 <bounce+0x114>
     2ec:	85 30       	cpi	r24, 0x05	; 5
     2ee:	91 05       	cpc	r25, r1
     2f0:	79 f0       	breq	.+30     	; 0x310 <bounce+0xa0>
     2f2:	07 97       	sbiw	r24, 0x07	; 7
     2f4:	99 f0       	breq	.+38     	; 0x31c <bounce+0xac>
     2f6:	46 c0       	rjmp	.+140    	; 0x384 <bounce+0x114>
				case 1:
				*direction = 3;
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	9b 81       	ldd	r25, Y+3	; 0x03
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
				break;
     302:	12 c0       	rjmp	.+36     	; 0x328 <bounce+0xb8>
				case 3:
				*direction = 1;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	9b 81       	ldd	r25, Y+3	; 0x03
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
				break;
     30e:	0c c0       	rjmp	.+24     	; 0x328 <bounce+0xb8>
				case 5:
				*direction = 7;
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	27 e0       	ldi	r18, 0x07	; 7
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
				break;
     31a:	06 c0       	rjmp	.+12     	; 0x328 <bounce+0xb8>
				case 7:
				*direction = 5;
     31c:	8a 81       	ldd	r24, Y+2	; 0x02
     31e:	9b 81       	ldd	r25, Y+3	; 0x03
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
				break;
     326:	00 00       	nop
     328:	2d c0       	rjmp	.+90     	; 0x384 <bounce+0x114>
			}
		}
		else{
			switch (*direction){
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	91 05       	cpc	r25, r1
     33a:	91 f0       	breq	.+36     	; 0x360 <bounce+0xf0>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	91 05       	cpc	r25, r1
     340:	1c f4       	brge	.+6      	; 0x348 <bounce+0xd8>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	39 f0       	breq	.+14     	; 0x354 <bounce+0xe4>
     346:	1e c0       	rjmp	.+60     	; 0x384 <bounce+0x114>
     348:	85 30       	cpi	r24, 0x05	; 5
     34a:	91 05       	cpc	r25, r1
     34c:	79 f0       	breq	.+30     	; 0x36c <bounce+0xfc>
     34e:	07 97       	sbiw	r24, 0x07	; 7
     350:	99 f0       	breq	.+38     	; 0x378 <bounce+0x108>
     352:	18 c0       	rjmp	.+48     	; 0x384 <bounce+0x114>
				case 1:
				*direction = 7;
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	27 e0       	ldi	r18, 0x07	; 7
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
				break;
     35e:	12 c0       	rjmp	.+36     	; 0x384 <bounce+0x114>
				case 3:
				*direction = 5;
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	25 e0       	ldi	r18, 0x05	; 5
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
				break;
     36a:	0c c0       	rjmp	.+24     	; 0x384 <bounce+0x114>
				case 5:
				*direction = 3;
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	23 e0       	ldi	r18, 0x03	; 3
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
				break;
     376:	06 c0       	rjmp	.+12     	; 0x384 <bounce+0x114>
				case 7:
				*direction = 1;
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
				break;
     382:	00 00       	nop
			}
		}
	}
	
	
}
     384:	26 96       	adiw	r28, 0x06	; 6
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 d0       	rcall	.+0      	; 0x39c <move_ball+0x6>
     39c:	00 d0       	rcall	.+0      	; 0x39e <move_ball+0x8>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <move_ball+0xa>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	7e 83       	std	Y+6, r23	; 0x06
     3aa:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <move_ball+0x2e>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	2a 95       	dec	r18
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <move_ball+0x2a>
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	80 95       	com	r24
     3d2:	90 95       	com	r25
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 23       	and	r24, r24
     3e2:	a9 f5       	brne	.+106    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     3e4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     3e8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	2b 81       	ldd	r18, Y+3	; 0x03
     408:	3c 81       	ldd	r19, Y+4	; 0x04
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	22 2f       	mov	r18, r18
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	24 5f       	subi	r18, 0xF4	; 244
     418:	3e 4f       	sbci	r19, 0xFE	; 254
     41a:	f9 01       	movw	r30, r18
     41c:	40 81       	ld	r20, Z
     41e:	51 81       	ldd	r21, Z+1	; 0x01
     420:	29 81       	ldd	r18, Y+1	; 0x01
     422:	3a 81       	ldd	r19, Y+2	; 0x02
     424:	24 23       	and	r18, r20
     426:	35 23       	and	r19, r21
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	84 5f       	subi	r24, 0xF4	; 244
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	31 83       	std	Z+1, r19	; 0x01
     434:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     436:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     43a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
     44c:	1e c0       	rjmp	.+60     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	}
	else{
		col_value[current[0]] &= mask;
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	9c 81       	ldd	r25, Y+4	; 0x04
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	22 2f       	mov	r18, r18
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	24 5f       	subi	r18, 0xF4	; 244
     46c:	3e 4f       	sbci	r19, 0xFE	; 254
     46e:	f9 01       	movw	r30, r18
     470:	40 81       	ld	r20, Z
     472:	51 81       	ldd	r21, Z+1	; 0x01
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	3a 81       	ldd	r19, Y+2	; 0x02
     478:	24 23       	and	r18, r20
     47a:	35 23       	and	r19, r21
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	84 5f       	subi	r24, 0xF4	; 244
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	fc 01       	movw	r30, r24
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	fc 01       	movw	r30, r24
     490:	20 81       	ld	r18, Z
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	current[1] = next[1];
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	9c 81       	ldd	r25, Y+4	; 0x04
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	2d 81       	ldd	r18, Y+5	; 0x05
     4a2:	3e 81       	ldd	r19, Y+6	; 0x06
     4a4:	f9 01       	movw	r30, r18
     4a6:	21 81       	ldd	r18, Z+1	; 0x01
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	2a 95       	dec	r18
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	a9 f5       	brne	.+106    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     4d8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     4dc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 ea 0f 	call	0x1fd4	; 0x1fd4 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	9c 81       	ldd	r25, Y+4	; 0x04
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2b 81       	ldd	r18, Y+3	; 0x03
     4fc:	3c 81       	ldd	r19, Y+4	; 0x04
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	22 2f       	mov	r18, r18
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	24 5f       	subi	r18, 0xF4	; 244
     50c:	3e 4f       	sbci	r19, 0xFE	; 254
     50e:	f9 01       	movw	r30, r18
     510:	40 81       	ld	r20, Z
     512:	51 81       	ldd	r21, Z+1	; 0x01
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	3a 81       	ldd	r19, Y+2	; 0x02
     518:	24 2b       	or	r18, r20
     51a:	35 2b       	or	r19, r21
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	84 5f       	subi	r24, 0xF4	; 244
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	31 83       	std	Z+1, r19	; 0x01
     528:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     52a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     52e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
     540:	1e c0       	rjmp	.+60     	; 0x57e <__FUSE_REGION_LENGTH__+0x17e>
	}
	else{
		col_value[current[0]] |= mask;
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	3c 81       	ldd	r19, Y+4	; 0x04
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	22 2f       	mov	r18, r18
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	24 5f       	subi	r18, 0xF4	; 244
     560:	3e 4f       	sbci	r19, 0xFE	; 254
     562:	f9 01       	movw	r30, r18
     564:	40 81       	ld	r20, Z
     566:	51 81       	ldd	r21, Z+1	; 0x01
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	24 2b       	or	r18, r20
     56e:	35 2b       	or	r19, r21
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	84 5f       	subi	r24, 0xF4	; 244
     576:	9e 4f       	sbci	r25, 0xFE	; 254
     578:	fc 01       	movw	r30, r24
     57a:	31 83       	std	Z+1, r19	; 0x01
     57c:	20 83       	st	Z, r18
	}

	
}
     57e:	26 96       	adiw	r28, 0x06	; 6
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	00 d0       	rcall	.+0      	; 0x596 <calc_next+0x6>
     596:	00 d0       	rcall	.+0      	; 0x598 <calc_next+0x8>
     598:	00 d0       	rcall	.+0      	; 0x59a <calc_next+0xa>
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	7c 83       	std	Y+4, r23	; 0x04
     5a4:	6b 83       	std	Y+3, r22	; 0x03
     5a6:	5e 83       	std	Y+6, r21	; 0x06
     5a8:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	9e 81       	ldd	r25, Y+6	; 0x06
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	09 2e       	mov	r0, r25
     5b8:	00 0c       	add	r0, r0
     5ba:	aa 0b       	sbc	r26, r26
     5bc:	bb 0b       	sbc	r27, r27
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	27 e0       	ldi	r18, 0x07	; 7
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	84 1b       	sub	r24, r20
     5c8:	95 0b       	sbc	r25, r21
     5ca:	28 17       	cp	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <calc_next+0x42>
     5d0:	79 c0       	rjmp	.+242    	; 0x6c4 <calc_next+0x134>
     5d2:	82 5c       	subi	r24, 0xC2	; 194
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	fc 01       	movw	r30, r24
     5d8:	0c 94 9c 1a 	jmp	0x3538	; 0x3538 <__tablejump2__>
	{
		case 0:
			--next[1];
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 81       	ld	r18, Z
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			break;
     5ec:	6b c0       	rjmp	.+214    	; 0x6c4 <calc_next+0x134>
		case 1:
		++next[0];
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	28 0f       	add	r18, r24
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
		--next[1];
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 81       	ld	r18, Z
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
		break;
     612:	58 c0       	rjmp	.+176    	; 0x6c4 <calc_next+0x134>
		case 2:
		++next[0];
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	28 0f       	add	r18, r24
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
		break;
     628:	4d c0       	rjmp	.+154    	; 0x6c4 <calc_next+0x134>
		case 3:
		++next[0];
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	28 0f       	add	r18, r24
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
		++next[1];
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	fc 01       	movw	r30, r24
     646:	20 81       	ld	r18, Z
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
		break;
     64e:	3a c0       	rjmp	.+116    	; 0x6c4 <calc_next+0x134>
		case 4:
		++next[1];
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
		break;
     660:	31 c0       	rjmp	.+98     	; 0x6c4 <calc_next+0x134>
		case 5:
		--next[0];
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	28 0f       	add	r18, r24
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
		++next[1];
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	20 81       	ld	r18, Z
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
		break;
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <calc_next+0x134>
		case 6:
		--next[0];
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	28 0f       	add	r18, r24
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
		break;
     69c:	13 c0       	rjmp	.+38     	; 0x6c4 <calc_next+0x134>
		case 7:
		--next[0];
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	28 0f       	add	r18, r24
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
		--next[1];
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 81       	ld	r18, Z
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
		break;
     6c2:	00 00       	nop
	}
	
}
     6c4:	26 96       	adiw	r28, 0x06	; 6
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <ball_task>:

void ball_task(void *pvParameters)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	28 97       	sbiw	r28, 0x08	; 8
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	98 87       	std	Y+8, r25	; 0x08
     6ec:	8f 83       	std	Y+7, r24	; 0x07
	(void) pvParameters;

	uint8_t pos[2] = {7, 5};
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	8a 83       	std	Y+2, r24	; 0x02
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t direction = 0;
     6f6:	1c 82       	std	Y+4, r1	; 0x04
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     6f8:	8a 81       	ldd	r24, Y+2	; 0x02
     6fa:	8d 83       	std	Y+5, r24	; 0x05
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	8e 83       	std	Y+6, r24	; 0x06
		uint8_t is_bounced = 1;
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     704:	45 c0       	rjmp	.+138    	; 0x790 <ball_task+0xba>
		{	
			is_bounced = 0;
     706:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     708:	ae 01       	movw	r20, r28
     70a:	4c 5f       	subi	r20, 0xFC	; 252
     70c:	5f 4f       	sbci	r21, 0xFF	; 255
     70e:	9e 01       	movw	r18, r28
     710:	2b 5f       	subi	r18, 0xFB	; 251
     712:	3f 4f       	sbci	r19, 0xFF	; 255
     714:	ce 01       	movw	r24, r28
     716:	02 96       	adiw	r24, 0x02	; 2
     718:	b9 01       	movw	r22, r18
     71a:	0e 94 c8 02 	call	0x590	; 0x590 <calc_next>
			
			if (next[0] > 12){
     71e:	8d 81       	ldd	r24, Y+5	; 0x05
     720:	8d 30       	cpi	r24, 0x0D	; 13
     722:	30 f0       	brcs	.+12     	; 0x730 <ball_task+0x5a>
				bounce(&direction, 1);
     724:	ce 01       	movw	r24, r28
     726:	04 96       	adiw	r24, 0x04	; 4
     728:	61 e0       	ldi	r22, 0x01	; 1
     72a:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     72e:	30 c0       	rjmp	.+96     	; 0x790 <ball_task+0xba>
			}
			else if ( next[1] > 9){
     730:	8e 81       	ldd	r24, Y+6	; 0x06
     732:	8a 30       	cpi	r24, 0x0A	; 10
     734:	30 f0       	brcs	.+12     	; 0x742 <ball_task+0x6c>
				bounce(&direction, 0);
     736:	ce 01       	movw	r24, r28
     738:	04 96       	adiw	r24, 0x04	; 4
     73a:	60 e0       	ldi	r22, 0x00	; 0
     73c:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     740:	27 c0       	rjmp	.+78     	; 0x790 <ball_task+0xba>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     742:	8d 81       	ldd	r24, Y+5	; 0x05
     744:	88 23       	and	r24, r24
     746:	d9 f4       	brne	.+54     	; 0x77e <ball_task+0xa8>
     748:	8e 81       	ldd	r24, Y+6	; 0x06
     74a:	28 2f       	mov	r18, r24
     74c:	30 e0       	ldi	r19, 0x00	; 0
     74e:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     752:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     756:	28 17       	cp	r18, r24
     758:	39 07       	cpc	r19, r25
     75a:	59 f0       	breq	.+22     	; 0x772 <ball_task+0x9c>
     75c:	8e 81       	ldd	r24, Y+6	; 0x06
     75e:	28 2f       	mov	r18, r24
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     766:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     76a:	01 96       	adiw	r24, 0x01	; 1
     76c:	28 17       	cp	r18, r24
     76e:	39 07       	cpc	r19, r25
     770:	31 f4       	brne	.+12     	; 0x77e <ball_task+0xa8>
				bounce(&direction, 1);
     772:	ce 01       	movw	r24, r28
     774:	04 96       	adiw	r24, 0x04	; 4
     776:	61 e0       	ldi	r22, 0x01	; 1
     778:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     77c:	09 c0       	rjmp	.+18     	; 0x790 <ball_task+0xba>
			}
			else{
				move_ball(pos, next);
     77e:	9e 01       	movw	r18, r28
     780:	2b 5f       	subi	r18, 0xFB	; 251
     782:	3f 4f       	sbci	r19, 0xFF	; 255
     784:	ce 01       	movw	r24, r28
     786:	02 96       	adiw	r24, 0x02	; 2
     788:	b9 01       	movw	r22, r18
     78a:	0e 94 cb 01 	call	0x396	; 0x396 <move_ball>
				is_bounced = 0;
     78e:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	88 23       	and	r24, r24
     794:	09 f0       	breq	.+2      	; 0x798 <ball_task+0xc2>
     796:	b7 cf       	rjmp	.-146    	; 0x706 <ball_task+0x30>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelay(20);
     798:	84 e1       	ldi	r24, 0x14	; 20
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	0e 94 77 14 	call	0x28ee	; 0x28ee <vTaskDelay>
	}
     7a0:	ab cf       	rjmp	.-170    	; 0x6f8 <ball_task+0x22>

000007a2 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     7a2:	cf 93       	push	r28
     7a4:	df 93       	push	r29
     7a6:	cd b7       	in	r28, 0x3d	; 61
     7a8:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     7aa:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <col_index>
     7ae:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <col_index+0x1>
     7b2:	89 2b       	or	r24, r25
     7b4:	49 f4       	brne	.+18     	; 0x7c8 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     7b6:	8b e2       	ldi	r24, 0x2B	; 43
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	2b e2       	ldi	r18, 0x2B	; 43
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	f9 01       	movw	r30, r18
     7c0:	20 81       	ld	r18, Z
     7c2:	24 60       	ori	r18, 0x04	; 4
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     7c8:	8b e2       	ldi	r24, 0x2B	; 43
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	2b e2       	ldi	r18, 0x2B	; 43
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	20 81       	ld	r18, Z
     7d4:	20 62       	ori	r18, 0x20	; 32
     7d6:	fc 01       	movw	r30, r24
     7d8:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     7da:	8b e2       	ldi	r24, 0x2B	; 43
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	2b e2       	ldi	r18, 0x2B	; 43
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	f9 01       	movw	r30, r18
     7e4:	20 81       	ld	r18, Z
     7e6:	2f 7d       	andi	r18, 0xDF	; 223
     7e8:	fc 01       	movw	r30, r24
     7ea:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     7ec:	8b e2       	ldi	r24, 0x2B	; 43
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	2b e2       	ldi	r18, 0x2B	; 43
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	20 61       	ori	r18, 0x10	; 16
     7fa:	fc 01       	movw	r30, r24
     7fc:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     7fe:	8b e2       	ldi	r24, 0x2B	; 43
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	2b e2       	ldi	r18, 0x2B	; 43
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	f9 01       	movw	r30, r18
     808:	20 81       	ld	r18, Z
     80a:	2f 7e       	andi	r18, 0xEF	; 239
     80c:	fc 01       	movw	r30, r24
     80e:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     810:	82 e2       	ldi	r24, 0x22	; 34
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <col_index>
     818:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <col_index+0x1>
     81c:	22 0f       	add	r18, r18
     81e:	33 1f       	adc	r19, r19
     820:	24 5f       	subi	r18, 0xF4	; 244
     822:	3e 4f       	sbci	r19, 0xFE	; 254
     824:	f9 01       	movw	r30, r18
     826:	20 81       	ld	r18, Z
     828:	31 81       	ldd	r19, Z+1	; 0x01
     82a:	20 95       	com	r18
     82c:	fc 01       	movw	r30, r24
     82e:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     830:	85 e2       	ldi	r24, 0x25	; 37
     832:	90 e0       	ldi	r25, 0x00	; 0
     834:	25 e2       	ldi	r18, 0x25	; 37
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	f9 01       	movw	r30, r18
     83a:	20 81       	ld	r18, Z
     83c:	23 60       	ori	r18, 0x03	; 3
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     842:	85 e2       	ldi	r24, 0x25	; 37
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	25 e2       	ldi	r18, 0x25	; 37
     848:	30 e0       	ldi	r19, 0x00	; 0
     84a:	f9 01       	movw	r30, r18
     84c:	40 81       	ld	r20, Z
     84e:	20 91 54 01 	lds	r18, 0x0154	; 0x800154 <col_index>
     852:	30 91 55 01 	lds	r19, 0x0155	; 0x800155 <col_index+0x1>
     856:	22 0f       	add	r18, r18
     858:	33 1f       	adc	r19, r19
     85a:	24 5f       	subi	r18, 0xF4	; 244
     85c:	3e 4f       	sbci	r19, 0xFE	; 254
     85e:	f9 01       	movw	r30, r18
     860:	20 81       	ld	r18, Z
     862:	31 81       	ldd	r19, Z+1	; 0x01
     864:	23 2f       	mov	r18, r19
     866:	33 27       	eor	r19, r19
     868:	23 70       	andi	r18, 0x03	; 3
     86a:	20 95       	com	r18
     86c:	24 23       	and	r18, r20
     86e:	fc 01       	movw	r30, r24
     870:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     872:	8b e2       	ldi	r24, 0x2B	; 43
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	2b e2       	ldi	r18, 0x2B	; 43
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	f9 01       	movw	r30, r18
     87c:	20 81       	ld	r18, Z
     87e:	2b 7f       	andi	r18, 0xFB	; 251
     880:	fc 01       	movw	r30, r24
     882:	20 83       	st	Z, r18

	++col_index;
     884:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <col_index>
     888:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <col_index+0x1>
     88c:	01 96       	adiw	r24, 0x01	; 1
     88e:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <col_index+0x1>
     892:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <col_index>
	if (col_index > 13){
     896:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <col_index>
     89a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <col_index+0x1>
     89e:	0e 97       	sbiw	r24, 0x0e	; 14
     8a0:	24 f0       	brlt	.+8      	; 0x8aa <handle_display+0x108>
		col_index = 0;
     8a2:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <col_index+0x1>
     8a6:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <col_index>
	}

}
     8aa:	df 91       	pop	r29
     8ac:	cf 91       	pop	r28
     8ae:	08 95       	ret

000008b0 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
	//
}
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <main>:

//-----------------------------------------
int main(void)
{
     8be:	ef 92       	push	r14
     8c0:	ff 92       	push	r15
     8c2:	0f 93       	push	r16
     8c4:	cf 93       	push	r28
     8c6:	df 93       	push	r29
     8c8:	cd b7       	in	r28, 0x3d	; 61
     8ca:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     8cc:	0e 94 59 05 	call	0xab2	; 0xab2 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     8d0:	8b e2       	ldi	r24, 0x2B	; 43
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	2b e2       	ldi	r18, 0x2B	; 43
     8d6:	30 e0       	ldi	r19, 0x00	; 0
     8d8:	f9 01       	movw	r30, r18
     8da:	20 81       	ld	r18, Z
     8dc:	2f 7b       	andi	r18, 0xBF	; 191
     8de:	fc 01       	movw	r30, r24
     8e0:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     8e2:	8e e1       	ldi	r24, 0x1E	; 30
     8e4:	40 e0       	ldi	r20, 0x00	; 0
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xQueueGenericCreate>
     8ec:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     8f0:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <xQueueCreateMutex>
     8fa:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_col_0_mutex+0x1>
     8fe:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <xQueueCreateMutex>
     908:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_player_position_mutex+0x1>
     90c:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_player_position_mutex>
	_ball_position_mutex = xSemaphoreCreateMutex();
     910:	81 e0       	ldi	r24, 0x01	; 1
     912:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <xQueueCreateMutex>
     916:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <_ball_position_mutex+0x1>
     91a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <_ball_position_mutex>
	init_com(_x_com_received_chars_queue);
     91e:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     922:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     926:	0e 94 df 04 	call	0x9be	; 0x9be <init_com>
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     92a:	e1 2c       	mov	r14, r1
     92c:	f1 2c       	mov	r15, r1
     92e:	03 e0       	ldi	r16, 0x03	; 3
     930:	20 e0       	ldi	r18, 0x00	; 0
     932:	30 e0       	ldi	r19, 0x00	; 0
     934:	45 e5       	ldi	r20, 0x55	; 85
     936:	50 e0       	ldi	r21, 0x00	; 0
     938:	6c e3       	ldi	r22, 0x3C	; 60
     93a:	71 e0       	ldi	r23, 0x01	; 1
     93c:	82 ec       	ldi	r24, 0xC2	; 194
     93e:	90 e0       	ldi	r25, 0x00	; 0
     940:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     944:	e1 2c       	mov	r14, r1
     946:	f1 2c       	mov	r15, r1
     948:	04 e0       	ldi	r16, 0x04	; 4
     94a:	20 e0       	ldi	r18, 0x00	; 0
     94c:	30 e0       	ldi	r19, 0x00	; 0
     94e:	45 e5       	ldi	r20, 0x55	; 85
     950:	50 e0       	ldi	r21, 0x00	; 0
     952:	61 e4       	ldi	r22, 0x41	; 65
     954:	71 e0       	ldi	r23, 0x01	; 1
     956:	8b e6       	ldi	r24, 0x6B	; 107
     958:	93 e0       	ldi	r25, 0x03	; 3
     95a:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     95e:	81 ed       	ldi	r24, 0xD1	; 209
     960:	93 e0       	ldi	r25, 0x03	; 3
     962:	0e 94 f1 04 	call	0x9e2	; 0x9e2 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     966:	0e 94 99 14 	call	0x2932	; 0x2932 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     96a:	ff cf       	rjmp	.-2      	; 0x96a <__stack+0x6b>

0000096c <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	00 d0       	rcall	.+0      	; 0x972 <_com_call_back+0x6>
     972:	00 d0       	rcall	.+0      	; 0x974 <_com_call_back+0x8>
     974:	cd b7       	in	r28, 0x3d	; 61
     976:	de b7       	in	r29, 0x3e	; 62
     978:	9b 83       	std	Y+3, r25	; 0x03
     97a:	8a 83       	std	Y+2, r24	; 0x02
     97c:	6c 83       	std	Y+4, r22	; 0x04
     97e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_x_rx_com_queue>
     982:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_x_rx_com_queue+0x1>
     986:	89 2b       	or	r24, r25
     988:	99 f0       	breq	.+38     	; 0x9b0 <_com_call_back+0x44>
     98a:	19 82       	std	Y+1, r1	; 0x01
     98c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_x_rx_com_queue>
     990:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_x_rx_com_queue+0x1>
     994:	be 01       	movw	r22, r28
     996:	6c 5f       	subi	r22, 0xFC	; 252
     998:	7f 4f       	sbci	r23, 0xFF	; 255
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	ae 01       	movw	r20, r28
     99e:	4f 5f       	subi	r20, 0xFF	; 255
     9a0:	5f 4f       	sbci	r21, 0xFF	; 255
     9a2:	0e 94 8b 0f 	call	0x1f16	; 0x1f16 <xQueueGenericSendFromISR>
     9a6:	89 81       	ldd	r24, Y+1	; 0x01
     9a8:	88 23       	and	r24, r24
     9aa:	11 f0       	breq	.+4      	; 0x9b0 <_com_call_back+0x44>
     9ac:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
     9b0:	0f 90       	pop	r0
     9b2:	0f 90       	pop	r0
     9b4:	0f 90       	pop	r0
     9b6:	0f 90       	pop	r0
     9b8:	df 91       	pop	r29
     9ba:	cf 91       	pop	r28
     9bc:	08 95       	ret

000009be <init_com>:
     9be:	cf 93       	push	r28
     9c0:	df 93       	push	r29
     9c2:	00 d0       	rcall	.+0      	; 0x9c4 <init_com+0x6>
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
     9c8:	9a 83       	std	Y+2, r25	; 0x02
     9ca:	89 83       	std	Y+1, r24	; 0x01
     9cc:	89 81       	ldd	r24, Y+1	; 0x01
     9ce:	9a 81       	ldd	r25, Y+2	; 0x02
     9d0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_x_rx_com_queue+0x1>
     9d4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_x_rx_com_queue>
     9d8:	0f 90       	pop	r0
     9da:	0f 90       	pop	r0
     9dc:	df 91       	pop	r29
     9de:	cf 91       	pop	r28
     9e0:	08 95       	ret

000009e2 <init_display_timer>:
     9e2:	cf 93       	push	r28
     9e4:	df 93       	push	r29
     9e6:	00 d0       	rcall	.+0      	; 0x9e8 <init_display_timer+0x6>
     9e8:	cd b7       	in	r28, 0x3d	; 61
     9ea:	de b7       	in	r29, 0x3e	; 62
     9ec:	9a 83       	std	Y+2, r25	; 0x02
     9ee:	89 83       	std	Y+1, r24	; 0x01
     9f0:	89 81       	ldd	r24, Y+1	; 0x01
     9f2:	9a 81       	ldd	r25, Y+2	; 0x02
     9f4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <cb_ptr+0x1>
     9f8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <cb_ptr>
     9fc:	87 e4       	ldi	r24, 0x47	; 71
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	2a e0       	ldi	r18, 0x0A	; 10
     a02:	fc 01       	movw	r30, r24
     a04:	20 83       	st	Z, r18
     a06:	84 e4       	ldi	r24, 0x44	; 68
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	24 e4       	ldi	r18, 0x44	; 68
     a0c:	30 e0       	ldi	r19, 0x00	; 0
     a0e:	f9 01       	movw	r30, r18
     a10:	20 81       	ld	r18, Z
     a12:	22 60       	ori	r18, 0x02	; 2
     a14:	fc 01       	movw	r30, r24
     a16:	20 83       	st	Z, r18
     a18:	8e e6       	ldi	r24, 0x6E	; 110
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	2e e6       	ldi	r18, 0x6E	; 110
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	f9 01       	movw	r30, r18
     a22:	20 81       	ld	r18, Z
     a24:	22 60       	ori	r18, 0x02	; 2
     a26:	fc 01       	movw	r30, r24
     a28:	20 83       	st	Z, r18
     a2a:	85 e4       	ldi	r24, 0x45	; 69
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	25 e4       	ldi	r18, 0x45	; 69
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	25 60       	ori	r18, 0x05	; 5
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
     a3c:	0f 90       	pop	r0
     a3e:	0f 90       	pop	r0
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	08 95       	ret

00000a46 <__vector_16>:
     a46:	1f 92       	push	r1
     a48:	0f 92       	push	r0
     a4a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a4e:	0f 92       	push	r0
     a50:	11 24       	eor	r1, r1
     a52:	2f 93       	push	r18
     a54:	3f 93       	push	r19
     a56:	4f 93       	push	r20
     a58:	5f 93       	push	r21
     a5a:	6f 93       	push	r22
     a5c:	7f 93       	push	r23
     a5e:	8f 93       	push	r24
     a60:	9f 93       	push	r25
     a62:	af 93       	push	r26
     a64:	bf 93       	push	r27
     a66:	ef 93       	push	r30
     a68:	ff 93       	push	r31
     a6a:	cf 93       	push	r28
     a6c:	df 93       	push	r29
     a6e:	cd b7       	in	r28, 0x3d	; 61
     a70:	de b7       	in	r29, 0x3e	; 62
     a72:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cb_ptr>
     a76:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cb_ptr+0x1>
     a7a:	89 2b       	or	r24, r25
     a7c:	31 f0       	breq	.+12     	; 0xa8a <__vector_16+0x44>
     a7e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cb_ptr>
     a82:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cb_ptr+0x1>
     a86:	fc 01       	movw	r30, r24
     a88:	09 95       	icall
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	ff 91       	pop	r31
     a90:	ef 91       	pop	r30
     a92:	bf 91       	pop	r27
     a94:	af 91       	pop	r26
     a96:	9f 91       	pop	r25
     a98:	8f 91       	pop	r24
     a9a:	7f 91       	pop	r23
     a9c:	6f 91       	pop	r22
     a9e:	5f 91       	pop	r21
     aa0:	4f 91       	pop	r20
     aa2:	3f 91       	pop	r19
     aa4:	2f 91       	pop	r18
     aa6:	0f 90       	pop	r0
     aa8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     aac:	0f 90       	pop	r0
     aae:	1f 90       	pop	r1
     ab0:	18 95       	reti

00000ab2 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     ab2:	8f 92       	push	r8
     ab4:	9f 92       	push	r9
     ab6:	af 92       	push	r10
     ab8:	bf 92       	push	r11
     aba:	cf 92       	push	r12
     abc:	df 92       	push	r13
     abe:	ef 92       	push	r14
     ac0:	0f 93       	push	r16
     ac2:	cf 93       	push	r28
     ac4:	df 93       	push	r29
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     aca:	8c e5       	ldi	r24, 0x5C	; 92
     acc:	91 e0       	ldi	r25, 0x01	; 1
     ace:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <buffer_init>
	buffer_init(&_com_tx_buffer);
     ad2:	8f e6       	ldi	r24, 0x6F	; 111
     ad4:	91 e0       	ldi	r25, 0x01	; 1
     ad6:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     ada:	0f 2e       	mov	r0, r31
     adc:	f6 eb       	ldi	r31, 0xB6	; 182
     ade:	8f 2e       	mov	r8, r31
     ae0:	f4 e0       	ldi	r31, 0x04	; 4
     ae2:	9f 2e       	mov	r9, r31
     ae4:	f0 2d       	mov	r31, r0
     ae6:	0f 2e       	mov	r0, r31
     ae8:	ff e6       	ldi	r31, 0x6F	; 111
     aea:	af 2e       	mov	r10, r31
     aec:	f1 e0       	ldi	r31, 0x01	; 1
     aee:	bf 2e       	mov	r11, r31
     af0:	f0 2d       	mov	r31, r0
     af2:	0f 2e       	mov	r0, r31
     af4:	fc e5       	ldi	r31, 0x5C	; 92
     af6:	cf 2e       	mov	r12, r31
     af8:	f1 e0       	ldi	r31, 0x01	; 1
     afa:	df 2e       	mov	r13, r31
     afc:	f0 2d       	mov	r31, r0
     afe:	e1 2c       	mov	r14, r1
     b00:	00 e0       	ldi	r16, 0x00	; 0
     b02:	23 e0       	ldi	r18, 0x03	; 3
     b04:	40 e0       	ldi	r20, 0x00	; 0
     b06:	52 ec       	ldi	r21, 0xC2	; 194
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	80 e0       	ldi	r24, 0x00	; 0
     b0e:	0e 94 49 0b 	call	0x1692	; 0x1692 <serial_new_instance>
     b12:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_com_serial_instance+0x1>
     b16:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     b1a:	88 e2       	ldi	r24, 0x28	; 40
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	28 e2       	ldi	r18, 0x28	; 40
     b20:	30 e0       	ldi	r19, 0x00	; 0
     b22:	f9 01       	movw	r30, r18
     b24:	20 81       	ld	r18, Z
     b26:	23 6c       	ori	r18, 0xC3	; 195
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     b2c:	8b e2       	ldi	r24, 0x2B	; 43
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	2b e2       	ldi	r18, 0x2B	; 43
     b32:	30 e0       	ldi	r19, 0x00	; 0
     b34:	f9 01       	movw	r30, r18
     b36:	20 81       	ld	r18, Z
     b38:	28 60       	ori	r18, 0x08	; 8
     b3a:	fc 01       	movw	r30, r24
     b3c:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b3e:	8a e2       	ldi	r24, 0x2A	; 42
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	2a e2       	ldi	r18, 0x2A	; 42
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	f9 01       	movw	r30, r18
     b48:	20 81       	ld	r18, Z
     b4a:	24 67       	ori	r18, 0x74	; 116
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b50:	8b e2       	ldi	r24, 0x2B	; 43
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	2b e2       	ldi	r18, 0x2B	; 43
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	f9 01       	movw	r30, r18
     b5a:	20 81       	ld	r18, Z
     b5c:	20 64       	ori	r18, 0x40	; 64
     b5e:	fc 01       	movw	r30, r24
     b60:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     b62:	81 e2       	ldi	r24, 0x21	; 33
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	fc 01       	movw	r30, r24
     b68:	80 81       	ld	r24, Z
     b6a:	81 e2       	ldi	r24, 0x21	; 33
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	2f ef       	ldi	r18, 0xFF	; 255
     b70:	fc 01       	movw	r30, r24
     b72:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b74:	84 e2       	ldi	r24, 0x24	; 36
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	24 e2       	ldi	r18, 0x24	; 36
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	f9 01       	movw	r30, r18
     b7e:	20 81       	ld	r18, Z
     b80:	23 60       	ori	r18, 0x03	; 3
     b82:	fc 01       	movw	r30, r24
     b84:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b86:	84 e2       	ldi	r24, 0x24	; 36
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	24 e2       	ldi	r18, 0x24	; 36
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	f9 01       	movw	r30, r18
     b90:	20 81       	ld	r18, Z
     b92:	2c 63       	ori	r18, 0x3C	; 60
     b94:	fc 01       	movw	r30, r24
     b96:	20 83       	st	Z, r18
}
     b98:	df 91       	pop	r29
     b9a:	cf 91       	pop	r28
     b9c:	0f 91       	pop	r16
     b9e:	ef 90       	pop	r14
     ba0:	df 90       	pop	r13
     ba2:	cf 90       	pop	r12
     ba4:	bf 90       	pop	r11
     ba6:	af 90       	pop	r10
     ba8:	9f 90       	pop	r9
     baa:	8f 90       	pop	r8
     bac:	08 95       	ret

00000bae <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     bae:	cf 93       	push	r28
     bb0:	df 93       	push	r29
     bb2:	1f 92       	push	r1
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     bba:	0f 90       	pop	r0
     bbc:	df 91       	pop	r29
     bbe:	cf 91       	pop	r28
     bc0:	08 95       	ret

00000bc2 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     bc2:	cf 93       	push	r28
     bc4:	df 93       	push	r29
     bc6:	1f 92       	push	r1
     bc8:	cd b7       	in	r28, 0x3d	; 61
     bca:	de b7       	in	r29, 0x3e	; 62
     bcc:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     bce:	0f 90       	pop	r0
     bd0:	df 91       	pop	r29
     bd2:	cf 91       	pop	r28
     bd4:	08 95       	ret

00000bd6 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	00 d0       	rcall	.+0      	; 0xbdc <buffer_init+0x6>
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     be4:	89 81       	ldd	r24, Y+1	; 0x01
     be6:	9a 81       	ldd	r25, Y+2	; 0x02
     be8:	fc 01       	movw	r30, r24
     bea:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	fc 01       	movw	r30, r24
     bfa:	12 8a       	std	Z+18, r1	; 0x12
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	df 91       	pop	r29
     c02:	cf 91       	pop	r28
     c04:	08 95       	ret

00000c06 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	00 d0       	rcall	.+0      	; 0xc0c <buffer_get_item+0x6>
     c0c:	00 d0       	rcall	.+0      	; 0xc0e <buffer_get_item+0x8>
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	9a 83       	std	Y+2, r25	; 0x02
     c14:	89 83       	std	Y+1, r24	; 0x01
     c16:	7c 83       	std	Y+4, r23	; 0x04
     c18:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     c1a:	89 81       	ldd	r24, Y+1	; 0x01
     c1c:	9a 81       	ldd	r25, Y+2	; 0x02
     c1e:	fc 01       	movw	r30, r24
     c20:	82 89       	ldd	r24, Z+18	; 0x12
     c22:	88 23       	and	r24, r24
     c24:	81 f1       	breq	.+96     	; 0xc86 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	9a 81       	ldd	r25, Y+2	; 0x02
     c2a:	fc 01       	movw	r30, r24
     c2c:	81 89       	ldd	r24, Z+17	; 0x11
     c2e:	88 2f       	mov	r24, r24
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	29 81       	ldd	r18, Y+1	; 0x01
     c34:	3a 81       	ldd	r19, Y+2	; 0x02
     c36:	82 0f       	add	r24, r18
     c38:	93 1f       	adc	r25, r19
     c3a:	fc 01       	movw	r30, r24
     c3c:	20 81       	ld	r18, Z
     c3e:	8b 81       	ldd	r24, Y+3	; 0x03
     c40:	9c 81       	ldd	r25, Y+4	; 0x04
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     c46:	89 81       	ldd	r24, Y+1	; 0x01
     c48:	9a 81       	ldd	r25, Y+2	; 0x02
     c4a:	fc 01       	movw	r30, r24
     c4c:	81 89       	ldd	r24, Z+17	; 0x11
     c4e:	88 2f       	mov	r24, r24
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	01 96       	adiw	r24, 0x01	; 1
     c54:	8f 70       	andi	r24, 0x0F	; 15
     c56:	90 78       	andi	r25, 0x80	; 128
     c58:	99 23       	and	r25, r25
     c5a:	24 f4       	brge	.+8      	; 0xc64 <buffer_get_item+0x5e>
     c5c:	01 97       	sbiw	r24, 0x01	; 1
     c5e:	80 6f       	ori	r24, 0xF0	; 240
     c60:	9f 6f       	ori	r25, 0xFF	; 255
     c62:	01 96       	adiw	r24, 0x01	; 1
     c64:	28 2f       	mov	r18, r24
     c66:	89 81       	ldd	r24, Y+1	; 0x01
     c68:	9a 81       	ldd	r25, Y+2	; 0x02
     c6a:	fc 01       	movw	r30, r24
     c6c:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	9a 81       	ldd	r25, Y+2	; 0x02
     c72:	fc 01       	movw	r30, r24
     c74:	82 89       	ldd	r24, Z+18	; 0x12
     c76:	2f ef       	ldi	r18, 0xFF	; 255
     c78:	28 0f       	add	r18, r24
     c7a:	89 81       	ldd	r24, Y+1	; 0x01
     c7c:	9a 81       	ldd	r25, Y+2	; 0x02
     c7e:	fc 01       	movw	r30, r24
     c80:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     c86:	81 e0       	ldi	r24, 0x01	; 1
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	0f 90       	pop	r0
     c8e:	0f 90       	pop	r0
     c90:	df 91       	pop	r29
     c92:	cf 91       	pop	r28
     c94:	08 95       	ret

00000c96 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     c96:	cf 93       	push	r28
     c98:	df 93       	push	r29
     c9a:	00 d0       	rcall	.+0      	; 0xc9c <buffer_put_item+0x6>
     c9c:	1f 92       	push	r1
     c9e:	cd b7       	in	r28, 0x3d	; 61
     ca0:	de b7       	in	r29, 0x3e	; 62
     ca2:	9a 83       	std	Y+2, r25	; 0x02
     ca4:	89 83       	std	Y+1, r24	; 0x01
     ca6:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	fc 01       	movw	r30, r24
     cae:	82 89       	ldd	r24, Z+18	; 0x12
     cb0:	80 31       	cpi	r24, 0x10	; 16
     cb2:	68 f5       	brcc	.+90     	; 0xd0e <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     cb4:	89 81       	ldd	r24, Y+1	; 0x01
     cb6:	9a 81       	ldd	r25, Y+2	; 0x02
     cb8:	fc 01       	movw	r30, r24
     cba:	80 89       	ldd	r24, Z+16	; 0x10
     cbc:	88 2f       	mov	r24, r24
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	29 81       	ldd	r18, Y+1	; 0x01
     cc2:	3a 81       	ldd	r19, Y+2	; 0x02
     cc4:	82 0f       	add	r24, r18
     cc6:	93 1f       	adc	r25, r19
     cc8:	2b 81       	ldd	r18, Y+3	; 0x03
     cca:	fc 01       	movw	r30, r24
     ccc:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     cce:	89 81       	ldd	r24, Y+1	; 0x01
     cd0:	9a 81       	ldd	r25, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	80 89       	ldd	r24, Z+16	; 0x10
     cd6:	88 2f       	mov	r24, r24
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	01 96       	adiw	r24, 0x01	; 1
     cdc:	8f 70       	andi	r24, 0x0F	; 15
     cde:	90 78       	andi	r25, 0x80	; 128
     ce0:	99 23       	and	r25, r25
     ce2:	24 f4       	brge	.+8      	; 0xcec <buffer_put_item+0x56>
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	80 6f       	ori	r24, 0xF0	; 240
     ce8:	9f 6f       	ori	r25, 0xFF	; 255
     cea:	01 96       	adiw	r24, 0x01	; 1
     cec:	28 2f       	mov	r18, r24
     cee:	89 81       	ldd	r24, Y+1	; 0x01
     cf0:	9a 81       	ldd	r25, Y+2	; 0x02
     cf2:	fc 01       	movw	r30, r24
     cf4:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     cf6:	89 81       	ldd	r24, Y+1	; 0x01
     cf8:	9a 81       	ldd	r25, Y+2	; 0x02
     cfa:	fc 01       	movw	r30, r24
     cfc:	82 89       	ldd	r24, Z+18	; 0x12
     cfe:	21 e0       	ldi	r18, 0x01	; 1
     d00:	28 0f       	add	r18, r24
     d02:	89 81       	ldd	r24, Y+1	; 0x01
     d04:	9a 81       	ldd	r25, Y+2	; 0x02
     d06:	fc 01       	movw	r30, r24
     d08:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	01 c0       	rjmp	.+2      	; 0xd10 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     d0e:	82 e0       	ldi	r24, 0x02	; 2
}
     d10:	0f 90       	pop	r0
     d12:	0f 90       	pop	r0
     d14:	0f 90       	pop	r0
     d16:	df 91       	pop	r29
     d18:	cf 91       	pop	r28
     d1a:	08 95       	ret

00000d1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     d1c:	cf 93       	push	r28
     d1e:	df 93       	push	r29
     d20:	00 d0       	rcall	.+0      	; 0xd22 <vListInitialise+0x6>
     d22:	cd b7       	in	r28, 0x3d	; 61
     d24:	de b7       	in	r29, 0x3e	; 62
     d26:	9a 83       	std	Y+2, r25	; 0x02
     d28:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	9c 01       	movw	r18, r24
     d30:	2d 5f       	subi	r18, 0xFD	; 253
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	32 83       	std	Z+2, r19	; 0x02
     d3c:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	2f ef       	ldi	r18, 0xFF	; 255
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	fc 01       	movw	r30, r24
     d48:	34 83       	std	Z+4, r19	; 0x04
     d4a:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	9c 01       	movw	r18, r24
     d52:	2d 5f       	subi	r18, 0xFD	; 253
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	89 81       	ldd	r24, Y+1	; 0x01
     d58:	9a 81       	ldd	r25, Y+2	; 0x02
     d5a:	fc 01       	movw	r30, r24
     d5c:	36 83       	std	Z+6, r19	; 0x06
     d5e:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d60:	89 81       	ldd	r24, Y+1	; 0x01
     d62:	9a 81       	ldd	r25, Y+2	; 0x02
     d64:	9c 01       	movw	r18, r24
     d66:	2d 5f       	subi	r18, 0xFD	; 253
     d68:	3f 4f       	sbci	r19, 0xFF	; 255
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	fc 01       	movw	r30, r24
     d70:	30 87       	std	Z+8, r19	; 0x08
     d72:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	9a 81       	ldd	r25, Y+2	; 0x02
     d78:	fc 01       	movw	r30, r24
     d7a:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <vListInitialiseItem+0x6>
     d8c:	cd b7       	in	r28, 0x3d	; 61
     d8e:	de b7       	in	r29, 0x3e	; 62
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d94:	89 81       	ldd	r24, Y+1	; 0x01
     d96:	9a 81       	ldd	r25, Y+2	; 0x02
     d98:	fc 01       	movw	r30, r24
     d9a:	11 86       	std	Z+9, r1	; 0x09
     d9c:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d9e:	0f 90       	pop	r0
     da0:	0f 90       	pop	r0
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	08 95       	ret

00000da8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     da8:	cf 93       	push	r28
     daa:	df 93       	push	r29
     dac:	00 d0       	rcall	.+0      	; 0xdae <vListInsertEnd+0x6>
     dae:	00 d0       	rcall	.+0      	; 0xdb0 <vListInsertEnd+0x8>
     db0:	00 d0       	rcall	.+0      	; 0xdb2 <vListInsertEnd+0xa>
     db2:	cd b7       	in	r28, 0x3d	; 61
     db4:	de b7       	in	r29, 0x3e	; 62
     db6:	9c 83       	std	Y+4, r25	; 0x04
     db8:	8b 83       	std	Y+3, r24	; 0x03
     dba:	7e 83       	std	Y+6, r23	; 0x06
     dbc:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     dbe:	8b 81       	ldd	r24, Y+3	; 0x03
     dc0:	9c 81       	ldd	r25, Y+4	; 0x04
     dc2:	fc 01       	movw	r30, r24
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	92 81       	ldd	r25, Z+2	; 0x02
     dc8:	9a 83       	std	Y+2, r25	; 0x02
     dca:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     dcc:	8d 81       	ldd	r24, Y+5	; 0x05
     dce:	9e 81       	ldd	r25, Y+6	; 0x06
     dd0:	29 81       	ldd	r18, Y+1	; 0x01
     dd2:	3a 81       	ldd	r19, Y+2	; 0x02
     dd4:	fc 01       	movw	r30, r24
     dd6:	33 83       	std	Z+3, r19	; 0x03
     dd8:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     dda:	89 81       	ldd	r24, Y+1	; 0x01
     ddc:	9a 81       	ldd	r25, Y+2	; 0x02
     dde:	fc 01       	movw	r30, r24
     de0:	24 81       	ldd	r18, Z+4	; 0x04
     de2:	35 81       	ldd	r19, Z+5	; 0x05
     de4:	8d 81       	ldd	r24, Y+5	; 0x05
     de6:	9e 81       	ldd	r25, Y+6	; 0x06
     de8:	fc 01       	movw	r30, r24
     dea:	35 83       	std	Z+5, r19	; 0x05
     dec:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	fc 01       	movw	r30, r24
     df4:	84 81       	ldd	r24, Z+4	; 0x04
     df6:	95 81       	ldd	r25, Z+5	; 0x05
     df8:	2d 81       	ldd	r18, Y+5	; 0x05
     dfa:	3e 81       	ldd	r19, Y+6	; 0x06
     dfc:	fc 01       	movw	r30, r24
     dfe:	33 83       	std	Z+3, r19	; 0x03
     e00:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     e02:	89 81       	ldd	r24, Y+1	; 0x01
     e04:	9a 81       	ldd	r25, Y+2	; 0x02
     e06:	2d 81       	ldd	r18, Y+5	; 0x05
     e08:	3e 81       	ldd	r19, Y+6	; 0x06
     e0a:	fc 01       	movw	r30, r24
     e0c:	35 83       	std	Z+5, r19	; 0x05
     e0e:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     e10:	8d 81       	ldd	r24, Y+5	; 0x05
     e12:	9e 81       	ldd	r25, Y+6	; 0x06
     e14:	2b 81       	ldd	r18, Y+3	; 0x03
     e16:	3c 81       	ldd	r19, Y+4	; 0x04
     e18:	fc 01       	movw	r30, r24
     e1a:	31 87       	std	Z+9, r19	; 0x09
     e1c:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     e1e:	8b 81       	ldd	r24, Y+3	; 0x03
     e20:	9c 81       	ldd	r25, Y+4	; 0x04
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	21 e0       	ldi	r18, 0x01	; 1
     e28:	28 0f       	add	r18, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	9c 81       	ldd	r25, Y+4	; 0x04
     e2e:	fc 01       	movw	r30, r24
     e30:	20 83       	st	Z, r18
}
     e32:	26 96       	adiw	r28, 0x06	; 6
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	df 91       	pop	r29
     e40:	cf 91       	pop	r28
     e42:	08 95       	ret

00000e44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e44:	cf 93       	push	r28
     e46:	df 93       	push	r29
     e48:	cd b7       	in	r28, 0x3d	; 61
     e4a:	de b7       	in	r29, 0x3e	; 62
     e4c:	28 97       	sbiw	r28, 0x08	; 8
     e4e:	0f b6       	in	r0, 0x3f	; 63
     e50:	f8 94       	cli
     e52:	de bf       	out	0x3e, r29	; 62
     e54:	0f be       	out	0x3f, r0	; 63
     e56:	cd bf       	out	0x3d, r28	; 61
     e58:	9e 83       	std	Y+6, r25	; 0x06
     e5a:	8d 83       	std	Y+5, r24	; 0x05
     e5c:	78 87       	std	Y+8, r23	; 0x08
     e5e:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e60:	8f 81       	ldd	r24, Y+7	; 0x07
     e62:	98 85       	ldd	r25, Y+8	; 0x08
     e64:	fc 01       	movw	r30, r24
     e66:	80 81       	ld	r24, Z
     e68:	91 81       	ldd	r25, Z+1	; 0x01
     e6a:	9c 83       	std	Y+4, r25	; 0x04
     e6c:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     e6e:	8b 81       	ldd	r24, Y+3	; 0x03
     e70:	9c 81       	ldd	r25, Y+4	; 0x04
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	41 f4       	brne	.+16     	; 0xe86 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     e76:	8d 81       	ldd	r24, Y+5	; 0x05
     e78:	9e 81       	ldd	r25, Y+6	; 0x06
     e7a:	fc 01       	movw	r30, r24
     e7c:	87 81       	ldd	r24, Z+7	; 0x07
     e7e:	90 85       	ldd	r25, Z+8	; 0x08
     e80:	9a 83       	std	Y+2, r25	; 0x02
     e82:	89 83       	std	Y+1, r24	; 0x01
     e84:	1a c0       	rjmp	.+52     	; 0xeba <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e86:	8d 81       	ldd	r24, Y+5	; 0x05
     e88:	9e 81       	ldd	r25, Y+6	; 0x06
     e8a:	03 96       	adiw	r24, 0x03	; 3
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
     e90:	07 c0       	rjmp	.+14     	; 0xea0 <vListInsert+0x5c>
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	9a 81       	ldd	r25, Y+2	; 0x02
     e96:	fc 01       	movw	r30, r24
     e98:	82 81       	ldd	r24, Z+2	; 0x02
     e9a:	93 81       	ldd	r25, Z+3	; 0x03
     e9c:	9a 83       	std	Y+2, r25	; 0x02
     e9e:	89 83       	std	Y+1, r24	; 0x01
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	fc 01       	movw	r30, r24
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	fc 01       	movw	r30, r24
     eac:	20 81       	ld	r18, Z
     eae:	31 81       	ldd	r19, Z+1	; 0x01
     eb0:	8b 81       	ldd	r24, Y+3	; 0x03
     eb2:	9c 81       	ldd	r25, Y+4	; 0x04
     eb4:	82 17       	cp	r24, r18
     eb6:	93 07       	cpc	r25, r19
     eb8:	60 f7       	brcc	.-40     	; 0xe92 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     eba:	89 81       	ldd	r24, Y+1	; 0x01
     ebc:	9a 81       	ldd	r25, Y+2	; 0x02
     ebe:	fc 01       	movw	r30, r24
     ec0:	22 81       	ldd	r18, Z+2	; 0x02
     ec2:	33 81       	ldd	r19, Z+3	; 0x03
     ec4:	8f 81       	ldd	r24, Y+7	; 0x07
     ec6:	98 85       	ldd	r25, Y+8	; 0x08
     ec8:	fc 01       	movw	r30, r24
     eca:	33 83       	std	Z+3, r19	; 0x03
     ecc:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     ece:	8f 81       	ldd	r24, Y+7	; 0x07
     ed0:	98 85       	ldd	r25, Y+8	; 0x08
     ed2:	fc 01       	movw	r30, r24
     ed4:	82 81       	ldd	r24, Z+2	; 0x02
     ed6:	93 81       	ldd	r25, Z+3	; 0x03
     ed8:	2f 81       	ldd	r18, Y+7	; 0x07
     eda:	38 85       	ldd	r19, Y+8	; 0x08
     edc:	fc 01       	movw	r30, r24
     ede:	35 83       	std	Z+5, r19	; 0x05
     ee0:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     ee2:	8f 81       	ldd	r24, Y+7	; 0x07
     ee4:	98 85       	ldd	r25, Y+8	; 0x08
     ee6:	29 81       	ldd	r18, Y+1	; 0x01
     ee8:	3a 81       	ldd	r19, Y+2	; 0x02
     eea:	fc 01       	movw	r30, r24
     eec:	35 83       	std	Z+5, r19	; 0x05
     eee:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     ef0:	89 81       	ldd	r24, Y+1	; 0x01
     ef2:	9a 81       	ldd	r25, Y+2	; 0x02
     ef4:	2f 81       	ldd	r18, Y+7	; 0x07
     ef6:	38 85       	ldd	r19, Y+8	; 0x08
     ef8:	fc 01       	movw	r30, r24
     efa:	33 83       	std	Z+3, r19	; 0x03
     efc:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     efe:	8f 81       	ldd	r24, Y+7	; 0x07
     f00:	98 85       	ldd	r25, Y+8	; 0x08
     f02:	2d 81       	ldd	r18, Y+5	; 0x05
     f04:	3e 81       	ldd	r19, Y+6	; 0x06
     f06:	fc 01       	movw	r30, r24
     f08:	31 87       	std	Z+9, r19	; 0x09
     f0a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	fc 01       	movw	r30, r24
     f12:	80 81       	ld	r24, Z
     f14:	21 e0       	ldi	r18, 0x01	; 1
     f16:	28 0f       	add	r18, r24
     f18:	8d 81       	ldd	r24, Y+5	; 0x05
     f1a:	9e 81       	ldd	r25, Y+6	; 0x06
     f1c:	fc 01       	movw	r30, r24
     f1e:	20 83       	st	Z, r18
}
     f20:	28 96       	adiw	r28, 0x08	; 8
     f22:	0f b6       	in	r0, 0x3f	; 63
     f24:	f8 94       	cli
     f26:	de bf       	out	0x3e, r29	; 62
     f28:	0f be       	out	0x3f, r0	; 63
     f2a:	cd bf       	out	0x3d, r28	; 61
     f2c:	df 91       	pop	r29
     f2e:	cf 91       	pop	r28
     f30:	08 95       	ret

00000f32 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	00 d0       	rcall	.+0      	; 0xf38 <uxListRemove+0x6>
     f38:	00 d0       	rcall	.+0      	; 0xf3a <uxListRemove+0x8>
     f3a:	cd b7       	in	r28, 0x3d	; 61
     f3c:	de b7       	in	r29, 0x3e	; 62
     f3e:	9c 83       	std	Y+4, r25	; 0x04
     f40:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	fc 01       	movw	r30, r24
     f48:	80 85       	ldd	r24, Z+8	; 0x08
     f4a:	91 85       	ldd	r25, Z+9	; 0x09
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f50:	8b 81       	ldd	r24, Y+3	; 0x03
     f52:	9c 81       	ldd	r25, Y+4	; 0x04
     f54:	fc 01       	movw	r30, r24
     f56:	82 81       	ldd	r24, Z+2	; 0x02
     f58:	93 81       	ldd	r25, Z+3	; 0x03
     f5a:	2b 81       	ldd	r18, Y+3	; 0x03
     f5c:	3c 81       	ldd	r19, Y+4	; 0x04
     f5e:	f9 01       	movw	r30, r18
     f60:	24 81       	ldd	r18, Z+4	; 0x04
     f62:	35 81       	ldd	r19, Z+5	; 0x05
     f64:	fc 01       	movw	r30, r24
     f66:	35 83       	std	Z+5, r19	; 0x05
     f68:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	fc 01       	movw	r30, r24
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	95 81       	ldd	r25, Z+5	; 0x05
     f74:	2b 81       	ldd	r18, Y+3	; 0x03
     f76:	3c 81       	ldd	r19, Y+4	; 0x04
     f78:	f9 01       	movw	r30, r18
     f7a:	22 81       	ldd	r18, Z+2	; 0x02
     f7c:	33 81       	ldd	r19, Z+3	; 0x03
     f7e:	fc 01       	movw	r30, r24
     f80:	33 83       	std	Z+3, r19	; 0x03
     f82:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     f84:	89 81       	ldd	r24, Y+1	; 0x01
     f86:	9a 81       	ldd	r25, Y+2	; 0x02
     f88:	fc 01       	movw	r30, r24
     f8a:	21 81       	ldd	r18, Z+1	; 0x01
     f8c:	32 81       	ldd	r19, Z+2	; 0x02
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	28 17       	cp	r18, r24
     f94:	39 07       	cpc	r19, r25
     f96:	51 f4       	brne	.+20     	; 0xfac <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	9c 81       	ldd	r25, Y+4	; 0x04
     f9c:	fc 01       	movw	r30, r24
     f9e:	24 81       	ldd	r18, Z+4	; 0x04
     fa0:	35 81       	ldd	r19, Z+5	; 0x05
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	9a 81       	ldd	r25, Y+2	; 0x02
     fa6:	fc 01       	movw	r30, r24
     fa8:	32 83       	std	Z+2, r19	; 0x02
     faa:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	fc 01       	movw	r30, r24
     fb2:	11 86       	std	Z+9, r1	; 0x09
     fb4:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	80 81       	ld	r24, Z
     fbe:	2f ef       	ldi	r18, 0xFF	; 255
     fc0:	28 0f       	add	r18, r24
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	fc 01       	movw	r30, r24
     fc8:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	fc 01       	movw	r30, r24
     fd0:	80 81       	ld	r24, Z
}
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	0f 90       	pop	r0
     fd8:	0f 90       	pop	r0
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	08 95       	ret

00000fe0 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     fe0:	cf 93       	push	r28
     fe2:	df 93       	push	r29
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	28 97       	sbiw	r28, 0x08	; 8
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61
     ff4:	9c 83       	std	Y+4, r25	; 0x04
     ff6:	8b 83       	std	Y+3, r24	; 0x03
     ff8:	7e 83       	std	Y+6, r23	; 0x06
     ffa:	6d 83       	std	Y+5, r22	; 0x05
     ffc:	58 87       	std	Y+8, r21	; 0x08
     ffe:	4f 83       	std	Y+7, r20	; 0x07
    1000:	8b 81       	ldd	r24, Y+3	; 0x03
    1002:	9c 81       	ldd	r25, Y+4	; 0x04
    1004:	21 e1       	ldi	r18, 0x11	; 17
    1006:	fc 01       	movw	r30, r24
    1008:	20 83       	st	Z, r18
    100a:	8b 81       	ldd	r24, Y+3	; 0x03
    100c:	9c 81       	ldd	r25, Y+4	; 0x04
    100e:	01 97       	sbiw	r24, 0x01	; 1
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	22 e2       	ldi	r18, 0x22	; 34
    101a:	fc 01       	movw	r30, r24
    101c:	20 83       	st	Z, r18
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	01 97       	sbiw	r24, 0x01	; 1
    1024:	9c 83       	std	Y+4, r25	; 0x04
    1026:	8b 83       	std	Y+3, r24	; 0x03
    1028:	8b 81       	ldd	r24, Y+3	; 0x03
    102a:	9c 81       	ldd	r25, Y+4	; 0x04
    102c:	23 e3       	ldi	r18, 0x33	; 51
    102e:	fc 01       	movw	r30, r24
    1030:	20 83       	st	Z, r18
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	01 97       	sbiw	r24, 0x01	; 1
    1038:	9c 83       	std	Y+4, r25	; 0x04
    103a:	8b 83       	std	Y+3, r24	; 0x03
    103c:	8d 81       	ldd	r24, Y+5	; 0x05
    103e:	9e 81       	ldd	r25, Y+6	; 0x06
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
    1044:	29 81       	ldd	r18, Y+1	; 0x01
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	9c 81       	ldd	r25, Y+4	; 0x04
    104a:	fc 01       	movw	r30, r24
    104c:	20 83       	st	Z, r18
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	01 97       	sbiw	r24, 0x01	; 1
    1054:	9c 83       	std	Y+4, r25	; 0x04
    1056:	8b 83       	std	Y+3, r24	; 0x03
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	89 2f       	mov	r24, r25
    105e:	99 27       	eor	r25, r25
    1060:	9a 83       	std	Y+2, r25	; 0x02
    1062:	89 83       	std	Y+1, r24	; 0x01
    1064:	29 81       	ldd	r18, Y+1	; 0x01
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	fc 01       	movw	r30, r24
    106c:	20 83       	st	Z, r18
    106e:	8b 81       	ldd	r24, Y+3	; 0x03
    1070:	9c 81       	ldd	r25, Y+4	; 0x04
    1072:	01 97       	sbiw	r24, 0x01	; 1
    1074:	9c 83       	std	Y+4, r25	; 0x04
    1076:	8b 83       	std	Y+3, r24	; 0x03
    1078:	8b 81       	ldd	r24, Y+3	; 0x03
    107a:	9c 81       	ldd	r25, Y+4	; 0x04
    107c:	fc 01       	movw	r30, r24
    107e:	10 82       	st	Z, r1
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	20 e8       	ldi	r18, 0x80	; 128
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	fc 01       	movw	r30, r24
    10a4:	10 82       	st	Z, r1
    10a6:	8b 81       	ldd	r24, Y+3	; 0x03
    10a8:	9c 81       	ldd	r25, Y+4	; 0x04
    10aa:	01 97       	sbiw	r24, 0x01	; 1
    10ac:	9c 83       	std	Y+4, r25	; 0x04
    10ae:	8b 83       	std	Y+3, r24	; 0x03
    10b0:	8b 81       	ldd	r24, Y+3	; 0x03
    10b2:	9c 81       	ldd	r25, Y+4	; 0x04
    10b4:	22 e0       	ldi	r18, 0x02	; 2
    10b6:	fc 01       	movw	r30, r24
    10b8:	20 83       	st	Z, r18
    10ba:	8b 81       	ldd	r24, Y+3	; 0x03
    10bc:	9c 81       	ldd	r25, Y+4	; 0x04
    10be:	01 97       	sbiw	r24, 0x01	; 1
    10c0:	9c 83       	std	Y+4, r25	; 0x04
    10c2:	8b 83       	std	Y+3, r24	; 0x03
    10c4:	8b 81       	ldd	r24, Y+3	; 0x03
    10c6:	9c 81       	ldd	r25, Y+4	; 0x04
    10c8:	23 e0       	ldi	r18, 0x03	; 3
    10ca:	fc 01       	movw	r30, r24
    10cc:	20 83       	st	Z, r18
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	01 97       	sbiw	r24, 0x01	; 1
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	24 e0       	ldi	r18, 0x04	; 4
    10de:	fc 01       	movw	r30, r24
    10e0:	20 83       	st	Z, r18
    10e2:	8b 81       	ldd	r24, Y+3	; 0x03
    10e4:	9c 81       	ldd	r25, Y+4	; 0x04
    10e6:	01 97       	sbiw	r24, 0x01	; 1
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	25 e0       	ldi	r18, 0x05	; 5
    10f2:	fc 01       	movw	r30, r24
    10f4:	20 83       	st	Z, r18
    10f6:	8b 81       	ldd	r24, Y+3	; 0x03
    10f8:	9c 81       	ldd	r25, Y+4	; 0x04
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9c 83       	std	Y+4, r25	; 0x04
    10fe:	8b 83       	std	Y+3, r24	; 0x03
    1100:	8b 81       	ldd	r24, Y+3	; 0x03
    1102:	9c 81       	ldd	r25, Y+4	; 0x04
    1104:	26 e0       	ldi	r18, 0x06	; 6
    1106:	fc 01       	movw	r30, r24
    1108:	20 83       	st	Z, r18
    110a:	8b 81       	ldd	r24, Y+3	; 0x03
    110c:	9c 81       	ldd	r25, Y+4	; 0x04
    110e:	01 97       	sbiw	r24, 0x01	; 1
    1110:	9c 83       	std	Y+4, r25	; 0x04
    1112:	8b 83       	std	Y+3, r24	; 0x03
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	9c 81       	ldd	r25, Y+4	; 0x04
    1118:	27 e0       	ldi	r18, 0x07	; 7
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
    111e:	8b 81       	ldd	r24, Y+3	; 0x03
    1120:	9c 81       	ldd	r25, Y+4	; 0x04
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	9c 83       	std	Y+4, r25	; 0x04
    1126:	8b 83       	std	Y+3, r24	; 0x03
    1128:	8b 81       	ldd	r24, Y+3	; 0x03
    112a:	9c 81       	ldd	r25, Y+4	; 0x04
    112c:	28 e0       	ldi	r18, 0x08	; 8
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	8b 81       	ldd	r24, Y+3	; 0x03
    1134:	9c 81       	ldd	r25, Y+4	; 0x04
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	9c 83       	std	Y+4, r25	; 0x04
    113a:	8b 83       	std	Y+3, r24	; 0x03
    113c:	8b 81       	ldd	r24, Y+3	; 0x03
    113e:	9c 81       	ldd	r25, Y+4	; 0x04
    1140:	29 e0       	ldi	r18, 0x09	; 9
    1142:	fc 01       	movw	r30, r24
    1144:	20 83       	st	Z, r18
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	01 97       	sbiw	r24, 0x01	; 1
    114c:	9c 83       	std	Y+4, r25	; 0x04
    114e:	8b 83       	std	Y+3, r24	; 0x03
    1150:	8b 81       	ldd	r24, Y+3	; 0x03
    1152:	9c 81       	ldd	r25, Y+4	; 0x04
    1154:	20 e1       	ldi	r18, 0x10	; 16
    1156:	fc 01       	movw	r30, r24
    1158:	20 83       	st	Z, r18
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	01 97       	sbiw	r24, 0x01	; 1
    1160:	9c 83       	std	Y+4, r25	; 0x04
    1162:	8b 83       	std	Y+3, r24	; 0x03
    1164:	8b 81       	ldd	r24, Y+3	; 0x03
    1166:	9c 81       	ldd	r25, Y+4	; 0x04
    1168:	21 e1       	ldi	r18, 0x11	; 17
    116a:	fc 01       	movw	r30, r24
    116c:	20 83       	st	Z, r18
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9c 83       	std	Y+4, r25	; 0x04
    1176:	8b 83       	std	Y+3, r24	; 0x03
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	22 e1       	ldi	r18, 0x12	; 18
    117e:	fc 01       	movw	r30, r24
    1180:	20 83       	st	Z, r18
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	01 97       	sbiw	r24, 0x01	; 1
    1188:	9c 83       	std	Y+4, r25	; 0x04
    118a:	8b 83       	std	Y+3, r24	; 0x03
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	23 e1       	ldi	r18, 0x13	; 19
    1192:	fc 01       	movw	r30, r24
    1194:	20 83       	st	Z, r18
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	01 97       	sbiw	r24, 0x01	; 1
    119c:	9c 83       	std	Y+4, r25	; 0x04
    119e:	8b 83       	std	Y+3, r24	; 0x03
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	24 e1       	ldi	r18, 0x14	; 20
    11a6:	fc 01       	movw	r30, r24
    11a8:	20 83       	st	Z, r18
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	01 97       	sbiw	r24, 0x01	; 1
    11b0:	9c 83       	std	Y+4, r25	; 0x04
    11b2:	8b 83       	std	Y+3, r24	; 0x03
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	25 e1       	ldi	r18, 0x15	; 21
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 83       	st	Z, r18
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	01 97       	sbiw	r24, 0x01	; 1
    11c4:	9c 83       	std	Y+4, r25	; 0x04
    11c6:	8b 83       	std	Y+3, r24	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	26 e1       	ldi	r18, 0x16	; 22
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9c 83       	std	Y+4, r25	; 0x04
    11da:	8b 83       	std	Y+3, r24	; 0x03
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	27 e1       	ldi	r18, 0x17	; 23
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	01 97       	sbiw	r24, 0x01	; 1
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	28 e1       	ldi	r18, 0x18	; 24
    11f6:	fc 01       	movw	r30, r24
    11f8:	20 83       	st	Z, r18
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	01 97       	sbiw	r24, 0x01	; 1
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	29 e1       	ldi	r18, 0x19	; 25
    120a:	fc 01       	movw	r30, r24
    120c:	20 83       	st	Z, r18
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	01 97       	sbiw	r24, 0x01	; 1
    1214:	9c 83       	std	Y+4, r25	; 0x04
    1216:	8b 83       	std	Y+3, r24	; 0x03
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	20 e2       	ldi	r18, 0x20	; 32
    121e:	fc 01       	movw	r30, r24
    1220:	20 83       	st	Z, r18
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	01 97       	sbiw	r24, 0x01	; 1
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	21 e2       	ldi	r18, 0x21	; 33
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	01 97       	sbiw	r24, 0x01	; 1
    123c:	9c 83       	std	Y+4, r25	; 0x04
    123e:	8b 83       	std	Y+3, r24	; 0x03
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	22 e2       	ldi	r18, 0x22	; 34
    1246:	fc 01       	movw	r30, r24
    1248:	20 83       	st	Z, r18
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	01 97       	sbiw	r24, 0x01	; 1
    1250:	9c 83       	std	Y+4, r25	; 0x04
    1252:	8b 83       	std	Y+3, r24	; 0x03
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	23 e2       	ldi	r18, 0x23	; 35
    125a:	fc 01       	movw	r30, r24
    125c:	20 83       	st	Z, r18
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	01 97       	sbiw	r24, 0x01	; 1
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	8b 83       	std	Y+3, r24	; 0x03
    1268:	8f 81       	ldd	r24, Y+7	; 0x07
    126a:	98 85       	ldd	r25, Y+8	; 0x08
    126c:	9a 83       	std	Y+2, r25	; 0x02
    126e:	89 83       	std	Y+1, r24	; 0x01
    1270:	29 81       	ldd	r18, Y+1	; 0x01
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	fc 01       	movw	r30, r24
    1278:	20 83       	st	Z, r18
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	9c 81       	ldd	r25, Y+4	; 0x04
    127e:	01 97       	sbiw	r24, 0x01	; 1
    1280:	9c 83       	std	Y+4, r25	; 0x04
    1282:	8b 83       	std	Y+3, r24	; 0x03
    1284:	89 81       	ldd	r24, Y+1	; 0x01
    1286:	9a 81       	ldd	r25, Y+2	; 0x02
    1288:	89 2f       	mov	r24, r25
    128a:	99 27       	eor	r25, r25
    128c:	9a 83       	std	Y+2, r25	; 0x02
    128e:	89 83       	std	Y+1, r24	; 0x01
    1290:	29 81       	ldd	r18, Y+1	; 0x01
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	fc 01       	movw	r30, r24
    1298:	20 83       	st	Z, r18
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	01 97       	sbiw	r24, 0x01	; 1
    12a0:	9c 83       	std	Y+4, r25	; 0x04
    12a2:	8b 83       	std	Y+3, r24	; 0x03
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	26 e2       	ldi	r18, 0x26	; 38
    12aa:	fc 01       	movw	r30, r24
    12ac:	20 83       	st	Z, r18
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	01 97       	sbiw	r24, 0x01	; 1
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	27 e2       	ldi	r18, 0x27	; 39
    12be:	fc 01       	movw	r30, r24
    12c0:	20 83       	st	Z, r18
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	01 97       	sbiw	r24, 0x01	; 1
    12c8:	9c 83       	std	Y+4, r25	; 0x04
    12ca:	8b 83       	std	Y+3, r24	; 0x03
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	28 e2       	ldi	r18, 0x28	; 40
    12d2:	fc 01       	movw	r30, r24
    12d4:	20 83       	st	Z, r18
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	01 97       	sbiw	r24, 0x01	; 1
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	29 e2       	ldi	r18, 0x29	; 41
    12e6:	fc 01       	movw	r30, r24
    12e8:	20 83       	st	Z, r18
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	9c 83       	std	Y+4, r25	; 0x04
    12f2:	8b 83       	std	Y+3, r24	; 0x03
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	20 e3       	ldi	r18, 0x30	; 48
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 83       	st	Z, r18
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	21 e3       	ldi	r18, 0x31	; 49
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	28 96       	adiw	r28, 0x08	; 8
    1322:	0f b6       	in	r0, 0x3f	; 63
    1324:	f8 94       	cli
    1326:	de bf       	out	0x3e, r29	; 62
    1328:	0f be       	out	0x3f, r0	; 63
    132a:	cd bf       	out	0x3d, r28	; 61
    132c:	df 91       	pop	r29
    132e:	cf 91       	pop	r28
    1330:	08 95       	ret

00001332 <xPortStartScheduler>:
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	0e 94 84 0a 	call	0x1508	; 0x1508 <prvSetupTimerInterrupt>
    133e:	a0 91 72 05 	lds	r26, 0x0572	; 0x800572 <pxCurrentTCB>
    1342:	b0 91 73 05 	lds	r27, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    1346:	cd 91       	ld	r28, X+
    1348:	cd bf       	out	0x3d, r28	; 61
    134a:	dd 91       	ld	r29, X+
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	ff 91       	pop	r31
    1350:	ef 91       	pop	r30
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	bf 91       	pop	r27
    1358:	af 91       	pop	r26
    135a:	9f 91       	pop	r25
    135c:	8f 91       	pop	r24
    135e:	7f 91       	pop	r23
    1360:	6f 91       	pop	r22
    1362:	5f 91       	pop	r21
    1364:	4f 91       	pop	r20
    1366:	3f 91       	pop	r19
    1368:	2f 91       	pop	r18
    136a:	1f 91       	pop	r17
    136c:	0f 91       	pop	r16
    136e:	ff 90       	pop	r15
    1370:	ef 90       	pop	r14
    1372:	df 90       	pop	r13
    1374:	cf 90       	pop	r12
    1376:	bf 90       	pop	r11
    1378:	af 90       	pop	r10
    137a:	9f 90       	pop	r9
    137c:	8f 90       	pop	r8
    137e:	7f 90       	pop	r7
    1380:	6f 90       	pop	r6
    1382:	5f 90       	pop	r5
    1384:	4f 90       	pop	r4
    1386:	3f 90       	pop	r3
    1388:	2f 90       	pop	r2
    138a:	1f 90       	pop	r1
    138c:	0f 90       	pop	r0
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	0f 90       	pop	r0
    1392:	08 95       	ret
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	df 91       	pop	r29
    1398:	cf 91       	pop	r28
    139a:	08 95       	ret

0000139c <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    139c:	0f 92       	push	r0
    139e:	0f b6       	in	r0, 0x3f	; 63
    13a0:	f8 94       	cli
    13a2:	0f 92       	push	r0
    13a4:	1f 92       	push	r1
    13a6:	11 24       	eor	r1, r1
    13a8:	2f 92       	push	r2
    13aa:	3f 92       	push	r3
    13ac:	4f 92       	push	r4
    13ae:	5f 92       	push	r5
    13b0:	6f 92       	push	r6
    13b2:	7f 92       	push	r7
    13b4:	8f 92       	push	r8
    13b6:	9f 92       	push	r9
    13b8:	af 92       	push	r10
    13ba:	bf 92       	push	r11
    13bc:	cf 92       	push	r12
    13be:	df 92       	push	r13
    13c0:	ef 92       	push	r14
    13c2:	ff 92       	push	r15
    13c4:	0f 93       	push	r16
    13c6:	1f 93       	push	r17
    13c8:	2f 93       	push	r18
    13ca:	3f 93       	push	r19
    13cc:	4f 93       	push	r20
    13ce:	5f 93       	push	r21
    13d0:	6f 93       	push	r22
    13d2:	7f 93       	push	r23
    13d4:	8f 93       	push	r24
    13d6:	9f 93       	push	r25
    13d8:	af 93       	push	r26
    13da:	bf 93       	push	r27
    13dc:	cf 93       	push	r28
    13de:	df 93       	push	r29
    13e0:	ef 93       	push	r30
    13e2:	ff 93       	push	r31
    13e4:	a0 91 72 05 	lds	r26, 0x0572	; 0x800572 <pxCurrentTCB>
    13e8:	b0 91 73 05 	lds	r27, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    13ec:	0d b6       	in	r0, 0x3d	; 61
    13ee:	0d 92       	st	X+, r0
    13f0:	0e b6       	in	r0, 0x3e	; 62
    13f2:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    13f4:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13f8:	a0 91 72 05 	lds	r26, 0x0572	; 0x800572 <pxCurrentTCB>
    13fc:	b0 91 73 05 	lds	r27, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    1400:	cd 91       	ld	r28, X+
    1402:	cd bf       	out	0x3d, r28	; 61
    1404:	dd 91       	ld	r29, X+
    1406:	de bf       	out	0x3e, r29	; 62
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	df 91       	pop	r29
    140e:	cf 91       	pop	r28
    1410:	bf 91       	pop	r27
    1412:	af 91       	pop	r26
    1414:	9f 91       	pop	r25
    1416:	8f 91       	pop	r24
    1418:	7f 91       	pop	r23
    141a:	6f 91       	pop	r22
    141c:	5f 91       	pop	r21
    141e:	4f 91       	pop	r20
    1420:	3f 91       	pop	r19
    1422:	2f 91       	pop	r18
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	bf 90       	pop	r11
    1432:	af 90       	pop	r10
    1434:	9f 90       	pop	r9
    1436:	8f 90       	pop	r8
    1438:	7f 90       	pop	r7
    143a:	6f 90       	pop	r6
    143c:	5f 90       	pop	r5
    143e:	4f 90       	pop	r4
    1440:	3f 90       	pop	r3
    1442:	2f 90       	pop	r2
    1444:	1f 90       	pop	r1
    1446:	0f 90       	pop	r0
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	0f 90       	pop	r0

	asm volatile ( "ret" );
    144c:	08 95       	ret

0000144e <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    144e:	0f 92       	push	r0
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	0f 92       	push	r0
    1456:	1f 92       	push	r1
    1458:	11 24       	eor	r1, r1
    145a:	2f 92       	push	r2
    145c:	3f 92       	push	r3
    145e:	4f 92       	push	r4
    1460:	5f 92       	push	r5
    1462:	6f 92       	push	r6
    1464:	7f 92       	push	r7
    1466:	8f 92       	push	r8
    1468:	9f 92       	push	r9
    146a:	af 92       	push	r10
    146c:	bf 92       	push	r11
    146e:	cf 92       	push	r12
    1470:	df 92       	push	r13
    1472:	ef 92       	push	r14
    1474:	ff 92       	push	r15
    1476:	0f 93       	push	r16
    1478:	1f 93       	push	r17
    147a:	2f 93       	push	r18
    147c:	3f 93       	push	r19
    147e:	4f 93       	push	r20
    1480:	5f 93       	push	r21
    1482:	6f 93       	push	r22
    1484:	7f 93       	push	r23
    1486:	8f 93       	push	r24
    1488:	9f 93       	push	r25
    148a:	af 93       	push	r26
    148c:	bf 93       	push	r27
    148e:	cf 93       	push	r28
    1490:	df 93       	push	r29
    1492:	ef 93       	push	r30
    1494:	ff 93       	push	r31
    1496:	a0 91 72 05 	lds	r26, 0x0572	; 0x800572 <pxCurrentTCB>
    149a:	b0 91 73 05 	lds	r27, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    149e:	0d b6       	in	r0, 0x3d	; 61
    14a0:	0d 92       	st	X+, r0
    14a2:	0e b6       	in	r0, 0x3e	; 62
    14a4:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    14a6:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <xTaskIncrementTick>
    14aa:	88 23       	and	r24, r24
    14ac:	11 f0       	breq	.+4      	; 0x14b2 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    14ae:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    14b2:	a0 91 72 05 	lds	r26, 0x0572	; 0x800572 <pxCurrentTCB>
    14b6:	b0 91 73 05 	lds	r27, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    14ba:	cd 91       	ld	r28, X+
    14bc:	cd bf       	out	0x3d, r28	; 61
    14be:	dd 91       	ld	r29, X+
    14c0:	de bf       	out	0x3e, r29	; 62
    14c2:	ff 91       	pop	r31
    14c4:	ef 91       	pop	r30
    14c6:	df 91       	pop	r29
    14c8:	cf 91       	pop	r28
    14ca:	bf 91       	pop	r27
    14cc:	af 91       	pop	r26
    14ce:	9f 91       	pop	r25
    14d0:	8f 91       	pop	r24
    14d2:	7f 91       	pop	r23
    14d4:	6f 91       	pop	r22
    14d6:	5f 91       	pop	r21
    14d8:	4f 91       	pop	r20
    14da:	3f 91       	pop	r19
    14dc:	2f 91       	pop	r18
    14de:	1f 91       	pop	r17
    14e0:	0f 91       	pop	r16
    14e2:	ff 90       	pop	r15
    14e4:	ef 90       	pop	r14
    14e6:	df 90       	pop	r13
    14e8:	cf 90       	pop	r12
    14ea:	bf 90       	pop	r11
    14ec:	af 90       	pop	r10
    14ee:	9f 90       	pop	r9
    14f0:	8f 90       	pop	r8
    14f2:	7f 90       	pop	r7
    14f4:	6f 90       	pop	r6
    14f6:	5f 90       	pop	r5
    14f8:	4f 90       	pop	r4
    14fa:	3f 90       	pop	r3
    14fc:	2f 90       	pop	r2
    14fe:	1f 90       	pop	r1
    1500:	0f 90       	pop	r0
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1506:	08 95       	ret

00001508 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1508:	cf 93       	push	r28
    150a:	df 93       	push	r29
    150c:	00 d0       	rcall	.+0      	; 0x150e <prvSetupTimerInterrupt+0x6>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <prvSetupTimerInterrupt+0x8>
    1510:	00 d0       	rcall	.+0      	; 0x1512 <prvSetupTimerInterrupt+0xa>
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1516:	89 e9       	ldi	r24, 0x99	; 153
    1518:	99 e3       	ldi	r25, 0x39	; 57
    151a:	a0 e0       	ldi	r26, 0x00	; 0
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	89 83       	std	Y+1, r24	; 0x01
    1520:	9a 83       	std	Y+2, r25	; 0x02
    1522:	ab 83       	std	Y+3, r26	; 0x03
    1524:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	9a 81       	ldd	r25, Y+2	; 0x02
    152a:	ab 81       	ldd	r26, Y+3	; 0x03
    152c:	bc 81       	ldd	r27, Y+4	; 0x04
    152e:	68 94       	set
    1530:	15 f8       	bld	r1, 5
    1532:	b6 95       	lsr	r27
    1534:	a7 95       	ror	r26
    1536:	97 95       	ror	r25
    1538:	87 95       	ror	r24
    153a:	16 94       	lsr	r1
    153c:	d1 f7       	brne	.-12     	; 0x1532 <prvSetupTimerInterrupt+0x2a>
    153e:	89 83       	std	Y+1, r24	; 0x01
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	ab 83       	std	Y+3, r26	; 0x03
    1544:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	9a 81       	ldd	r25, Y+2	; 0x02
    154a:	ab 81       	ldd	r26, Y+3	; 0x03
    154c:	bc 81       	ldd	r27, Y+4	; 0x04
    154e:	01 97       	sbiw	r24, 0x01	; 1
    1550:	a1 09       	sbc	r26, r1
    1552:	b1 09       	sbc	r27, r1
    1554:	89 83       	std	Y+1, r24	; 0x01
    1556:	9a 83       	std	Y+2, r25	; 0x02
    1558:	ab 83       	std	Y+3, r26	; 0x03
    155a:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    155c:	89 81       	ldd	r24, Y+1	; 0x01
    155e:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02
    1564:	ab 81       	ldd	r26, Y+3	; 0x03
    1566:	bc 81       	ldd	r27, Y+4	; 0x04
    1568:	89 2f       	mov	r24, r25
    156a:	9a 2f       	mov	r25, r26
    156c:	ab 2f       	mov	r26, r27
    156e:	bb 27       	eor	r27, r27
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	9a 83       	std	Y+2, r25	; 0x02
    1574:	ab 83       	std	Y+3, r26	; 0x03
    1576:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1578:	89 81       	ldd	r24, Y+1	; 0x01
    157a:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    157c:	89 e8       	ldi	r24, 0x89	; 137
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	2e 81       	ldd	r18, Y+6	; 0x06
    1582:	fc 01       	movw	r30, r24
    1584:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1586:	88 e8       	ldi	r24, 0x88	; 136
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1590:	8b e0       	ldi	r24, 0x0B	; 11
    1592:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1594:	81 e8       	ldi	r24, 0x81	; 129
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	2d 81       	ldd	r18, Y+5	; 0x05
    159a:	fc 01       	movw	r30, r24
    159c:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    159e:	8f e6       	ldi	r24, 0x6F	; 111
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	fc 01       	movw	r30, r24
    15a4:	80 81       	ld	r24, Z
    15a6:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	82 60       	ori	r24, 0x02	; 2
    15ac:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    15ae:	8f e6       	ldi	r24, 0x6F	; 111
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	2d 81       	ldd	r18, Y+5	; 0x05
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
}
    15b8:	26 96       	adiw	r28, 0x06	; 6
    15ba:	0f b6       	in	r0, 0x3f	; 63
    15bc:	f8 94       	cli
    15be:	de bf       	out	0x3e, r29	; 62
    15c0:	0f be       	out	0x3f, r0	; 63
    15c2:	cd bf       	out	0x3d, r28	; 61
    15c4:	df 91       	pop	r29
    15c6:	cf 91       	pop	r28
    15c8:	08 95       	ret

000015ca <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    15ca:	0e 94 27 0a 	call	0x144e	; 0x144e <vPortYieldFromTick>
		asm volatile ( "reti" );
    15ce:	18 95       	reti

000015d0 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15d0:	cf 93       	push	r28
    15d2:	df 93       	push	r29
    15d4:	00 d0       	rcall	.+0      	; 0x15d6 <pvPortMalloc+0x6>
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <pvPortMalloc+0x8>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    15e0:	1a 82       	std	Y+2, r1	; 0x02
    15e2:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    15e4:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    15e8:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <pucAlignedHeap.1965>
    15ec:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <pucAlignedHeap.1965+0x1>
    15f0:	89 2b       	or	r24, r25
    15f2:	31 f4       	brne	.+12     	; 0x1600 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    15f4:	83 e8       	ldi	r24, 0x83	; 131
    15f6:	91 e0       	ldi	r25, 0x01	; 1
    15f8:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <pucAlignedHeap.1965+0x1>
    15fc:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1600:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <xNextFreeByte>
    1604:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <xNextFreeByte+0x1>
    1608:	8b 81       	ldd	r24, Y+3	; 0x03
    160a:	9c 81       	ldd	r25, Y+4	; 0x04
    160c:	82 0f       	add	r24, r18
    160e:	93 1f       	adc	r25, r19
    1610:	87 3e       	cpi	r24, 0xE7	; 231
    1612:	93 40       	sbci	r25, 0x03	; 3
    1614:	38 f5       	brcc	.+78     	; 0x1664 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1616:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <xNextFreeByte>
    161a:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <xNextFreeByte+0x1>
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	9c 81       	ldd	r25, Y+4	; 0x04
    1622:	28 0f       	add	r18, r24
    1624:	39 1f       	adc	r19, r25
    1626:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xNextFreeByte>
    162a:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    162e:	82 17       	cp	r24, r18
    1630:	93 07       	cpc	r25, r19
    1632:	c0 f4       	brcc	.+48     	; 0x1664 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1634:	20 91 6c 05 	lds	r18, 0x056C	; 0x80056c <pucAlignedHeap.1965>
    1638:	30 91 6d 05 	lds	r19, 0x056D	; 0x80056d <pucAlignedHeap.1965+0x1>
    163c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <xNextFreeByte>
    1640:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <xNextFreeByte+0x1>
    1644:	82 0f       	add	r24, r18
    1646:	93 1f       	adc	r25, r19
    1648:	9a 83       	std	Y+2, r25	; 0x02
    164a:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    164c:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <xNextFreeByte>
    1650:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <xNextFreeByte+0x1>
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	82 0f       	add	r24, r18
    165a:	93 1f       	adc	r25, r19
    165c:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <xNextFreeByte+0x1>
    1660:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1664:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
}
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	0f 90       	pop	r0
    1674:	df 91       	pop	r29
    1676:	cf 91       	pop	r28
    1678:	08 95       	ret

0000167a <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	00 d0       	rcall	.+0      	; 0x1680 <vPortFree+0x6>
    1680:	cd b7       	in	r28, 0x3d	; 61
    1682:	de b7       	in	r29, 0x3e	; 62
    1684:	9a 83       	std	Y+2, r25	; 0x02
    1686:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1688:	0f 90       	pop	r0
    168a:	0f 90       	pop	r0
    168c:	df 91       	pop	r29
    168e:	cf 91       	pop	r28
    1690:	08 95       	ret

00001692 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1692:	8f 92       	push	r8
    1694:	9f 92       	push	r9
    1696:	af 92       	push	r10
    1698:	bf 92       	push	r11
    169a:	cf 92       	push	r12
    169c:	df 92       	push	r13
    169e:	ef 92       	push	r14
    16a0:	0f 93       	push	r16
    16a2:	1f 93       	push	r17
    16a4:	cf 93       	push	r28
    16a6:	df 93       	push	r29
    16a8:	cd b7       	in	r28, 0x3d	; 61
    16aa:	de b7       	in	r29, 0x3e	; 62
    16ac:	65 97       	sbiw	r28, 0x15	; 21
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	8c 83       	std	Y+4, r24	; 0x04
    16ba:	4d 83       	std	Y+5, r20	; 0x05
    16bc:	5e 83       	std	Y+6, r21	; 0x06
    16be:	6f 83       	std	Y+7, r22	; 0x07
    16c0:	78 87       	std	Y+8, r23	; 0x08
    16c2:	29 87       	std	Y+9, r18	; 0x09
    16c4:	0a 87       	std	Y+10, r16	; 0x0a
    16c6:	eb 86       	std	Y+11, r14	; 0x0b
    16c8:	dd 86       	std	Y+13, r13	; 0x0d
    16ca:	cc 86       	std	Y+12, r12	; 0x0c
    16cc:	bf 86       	std	Y+15, r11	; 0x0f
    16ce:	ae 86       	std	Y+14, r10	; 0x0e
    16d0:	99 8a       	std	Y+17, r9	; 0x11
    16d2:	88 8a       	std	Y+16, r8	; 0x10
    16d4:	88 e0       	ldi	r24, 0x08	; 8
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	0e 94 b6 1a 	call	0x356c	; 0x356c <malloc>
    16dc:	9a 83       	std	Y+2, r25	; 0x02
    16de:	89 83       	std	Y+1, r24	; 0x01
    16e0:	8c 81       	ldd	r24, Y+4	; 0x04
    16e2:	88 2f       	mov	r24, r24
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	88 0f       	add	r24, r24
    16e8:	99 1f       	adc	r25, r25
    16ea:	82 59       	subi	r24, 0x92	; 146
    16ec:	9a 4f       	sbci	r25, 0xFA	; 250
    16ee:	29 81       	ldd	r18, Y+1	; 0x01
    16f0:	3a 81       	ldd	r19, Y+2	; 0x02
    16f2:	fc 01       	movw	r30, r24
    16f4:	31 83       	std	Z+1, r19	; 0x01
    16f6:	20 83       	st	Z, r18
    16f8:	8c 81       	ldd	r24, Y+4	; 0x04
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	88 5d       	subi	r24, 0xD8	; 216
    1704:	9e 4f       	sbci	r25, 0xFE	; 254
    1706:	fc 01       	movw	r30, r24
    1708:	20 81       	ld	r18, Z
    170a:	31 81       	ldd	r19, Z+1	; 0x01
    170c:	89 81       	ldd	r24, Y+1	; 0x01
    170e:	9a 81       	ldd	r25, Y+2	; 0x02
    1710:	fc 01       	movw	r30, r24
    1712:	31 83       	std	Z+1, r19	; 0x01
    1714:	20 83       	st	Z, r18
    1716:	89 81       	ldd	r24, Y+1	; 0x01
    1718:	9a 81       	ldd	r25, Y+2	; 0x02
    171a:	2e 85       	ldd	r18, Y+14	; 0x0e
    171c:	3f 85       	ldd	r19, Y+15	; 0x0f
    171e:	fc 01       	movw	r30, r24
    1720:	33 83       	std	Z+3, r19	; 0x03
    1722:	22 83       	std	Z+2, r18	; 0x02
    1724:	89 81       	ldd	r24, Y+1	; 0x01
    1726:	9a 81       	ldd	r25, Y+2	; 0x02
    1728:	2c 85       	ldd	r18, Y+12	; 0x0c
    172a:	3d 85       	ldd	r19, Y+13	; 0x0d
    172c:	fc 01       	movw	r30, r24
    172e:	35 83       	std	Z+5, r19	; 0x05
    1730:	24 83       	std	Z+4, r18	; 0x04
    1732:	89 81       	ldd	r24, Y+1	; 0x01
    1734:	9a 81       	ldd	r25, Y+2	; 0x02
    1736:	28 89       	ldd	r18, Y+16	; 0x10
    1738:	39 89       	ldd	r19, Y+17	; 0x11
    173a:	fc 01       	movw	r30, r24
    173c:	37 83       	std	Z+7, r19	; 0x07
    173e:	26 83       	std	Z+6, r18	; 0x06
    1740:	8f e5       	ldi	r24, 0x5F	; 95
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	fc 01       	movw	r30, r24
    1746:	80 81       	ld	r24, Z
    1748:	8b 83       	std	Y+3, r24	; 0x03
    174a:	f8 94       	cli
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	91 81       	ldd	r25, Z+1	; 0x01
    1756:	06 97       	sbiw	r24, 0x06	; 6
    1758:	29 81       	ldd	r18, Y+1	; 0x01
    175a:	3a 81       	ldd	r19, Y+2	; 0x02
    175c:	f9 01       	movw	r30, r18
    175e:	20 81       	ld	r18, Z
    1760:	31 81       	ldd	r19, Z+1	; 0x01
    1762:	26 50       	subi	r18, 0x06	; 6
    1764:	31 09       	sbc	r19, r1
    1766:	f9 01       	movw	r30, r18
    1768:	20 81       	ld	r18, Z
    176a:	22 60       	ori	r18, 0x02	; 2
    176c:	fc 01       	movw	r30, r24
    176e:	20 83       	st	Z, r18
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	9a 81       	ldd	r25, Y+2	; 0x02
    1774:	fc 01       	movw	r30, r24
    1776:	80 81       	ld	r24, Z
    1778:	91 81       	ldd	r25, Z+1	; 0x01
    177a:	8c 01       	movw	r16, r24
    177c:	02 50       	subi	r16, 0x02	; 2
    177e:	11 09       	sbc	r17, r1
    1780:	8d 81       	ldd	r24, Y+5	; 0x05
    1782:	9e 81       	ldd	r25, Y+6	; 0x06
    1784:	af 81       	ldd	r26, Y+7	; 0x07
    1786:	b8 85       	ldd	r27, Y+8	; 0x08
    1788:	88 0f       	add	r24, r24
    178a:	99 1f       	adc	r25, r25
    178c:	aa 1f       	adc	r26, r26
    178e:	bb 1f       	adc	r27, r27
    1790:	88 0f       	add	r24, r24
    1792:	99 1f       	adc	r25, r25
    1794:	aa 1f       	adc	r26, r26
    1796:	bb 1f       	adc	r27, r27
    1798:	88 0f       	add	r24, r24
    179a:	99 1f       	adc	r25, r25
    179c:	aa 1f       	adc	r26, r26
    179e:	bb 1f       	adc	r27, r27
    17a0:	9c 01       	movw	r18, r24
    17a2:	ad 01       	movw	r20, r26
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a1 ee       	ldi	r26, 0xE1	; 225
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	bc 01       	movw	r22, r24
    17ae:	cd 01       	movw	r24, r26
    17b0:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__udivmodsi4>
    17b4:	da 01       	movw	r26, r20
    17b6:	c9 01       	movw	r24, r18
    17b8:	81 50       	subi	r24, 0x01	; 1
    17ba:	f8 01       	movw	r30, r16
    17bc:	80 83       	st	Z, r24
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	9a 81       	ldd	r25, Y+2	; 0x02
    17c2:	fc 01       	movw	r30, r24
    17c4:	80 81       	ld	r24, Z
    17c6:	91 81       	ldd	r25, Z+1	; 0x01
    17c8:	05 97       	sbiw	r24, 0x05	; 5
    17ca:	28 e9       	ldi	r18, 0x98	; 152
    17cc:	fc 01       	movw	r30, r24
    17ce:	20 83       	st	Z, r18
    17d0:	89 81       	ldd	r24, Y+1	; 0x01
    17d2:	9a 81       	ldd	r25, Y+2	; 0x02
    17d4:	fc 01       	movw	r30, r24
    17d6:	80 81       	ld	r24, Z
    17d8:	91 81       	ldd	r25, Z+1	; 0x01
    17da:	04 97       	sbiw	r24, 0x04	; 4
    17dc:	26 e0       	ldi	r18, 0x06	; 6
    17de:	fc 01       	movw	r30, r24
    17e0:	20 83       	st	Z, r18
    17e2:	8f e5       	ldi	r24, 0x5F	; 95
    17e4:	90 e0       	ldi	r25, 0x00	; 0
    17e6:	2b 81       	ldd	r18, Y+3	; 0x03
    17e8:	fc 01       	movw	r30, r24
    17ea:	20 83       	st	Z, r18
    17ec:	89 81       	ldd	r24, Y+1	; 0x01
    17ee:	9a 81       	ldd	r25, Y+2	; 0x02
    17f0:	65 96       	adiw	r28, 0x15	; 21
    17f2:	0f b6       	in	r0, 0x3f	; 63
    17f4:	f8 94       	cli
    17f6:	de bf       	out	0x3e, r29	; 62
    17f8:	0f be       	out	0x3f, r0	; 63
    17fa:	cd bf       	out	0x3d, r28	; 61
    17fc:	df 91       	pop	r29
    17fe:	cf 91       	pop	r28
    1800:	1f 91       	pop	r17
    1802:	0f 91       	pop	r16
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	bf 90       	pop	r11
    180c:	af 90       	pop	r10
    180e:	9f 90       	pop	r9
    1810:	8f 90       	pop	r8
    1812:	08 95       	ret

00001814 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1814:	1f 92       	push	r1
    1816:	0f 92       	push	r0
    1818:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    181c:	0f 92       	push	r0
    181e:	11 24       	eor	r1, r1
    1820:	2f 93       	push	r18
    1822:	3f 93       	push	r19
    1824:	4f 93       	push	r20
    1826:	5f 93       	push	r21
    1828:	6f 93       	push	r22
    182a:	7f 93       	push	r23
    182c:	8f 93       	push	r24
    182e:	9f 93       	push	r25
    1830:	af 93       	push	r26
    1832:	bf 93       	push	r27
    1834:	ef 93       	push	r30
    1836:	ff 93       	push	r31
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	1f 92       	push	r1
    183e:	cd b7       	in	r28, 0x3d	; 61
    1840:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1842:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    1846:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    184a:	89 2b       	or	r24, r25
    184c:	31 f1       	breq	.+76     	; 0x189a <__vector_20+0x86>
		item = UDR0;
    184e:	86 ec       	ldi	r24, 0xC6	; 198
    1850:	90 e0       	ldi	r25, 0x00	; 0
    1852:	fc 01       	movw	r30, r24
    1854:	80 81       	ld	r24, Z
    1856:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1858:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    185c:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    1860:	fc 01       	movw	r30, r24
    1862:	84 81       	ldd	r24, Z+4	; 0x04
    1864:	95 81       	ldd	r25, Z+5	; 0x05
    1866:	69 81       	ldd	r22, Y+1	; 0x01
    1868:	0e 94 4b 06 	call	0xc96	; 0xc96 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    186c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    1870:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    1874:	fc 01       	movw	r30, r24
    1876:	86 81       	ldd	r24, Z+6	; 0x06
    1878:	97 81       	ldd	r25, Z+7	; 0x07
    187a:	89 2b       	or	r24, r25
    187c:	71 f0       	breq	.+28     	; 0x189a <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    187e:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    1882:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    1886:	fc 01       	movw	r30, r24
    1888:	26 81       	ldd	r18, Z+6	; 0x06
    188a:	37 81       	ldd	r19, Z+7	; 0x07
    188c:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    1890:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    1894:	69 81       	ldd	r22, Y+1	; 0x01
    1896:	f9 01       	movw	r30, r18
    1898:	09 95       	icall
		}
	}
}
    189a:	0f 90       	pop	r0
    189c:	df 91       	pop	r29
    189e:	cf 91       	pop	r28
    18a0:	ff 91       	pop	r31
    18a2:	ef 91       	pop	r30
    18a4:	bf 91       	pop	r27
    18a6:	af 91       	pop	r26
    18a8:	9f 91       	pop	r25
    18aa:	8f 91       	pop	r24
    18ac:	7f 91       	pop	r23
    18ae:	6f 91       	pop	r22
    18b0:	5f 91       	pop	r21
    18b2:	4f 91       	pop	r20
    18b4:	3f 91       	pop	r19
    18b6:	2f 91       	pop	r18
    18b8:	0f 90       	pop	r0
    18ba:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18be:	0f 90       	pop	r0
    18c0:	1f 90       	pop	r1
    18c2:	18 95       	reti

000018c4 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18cc:	0f 92       	push	r0
    18ce:	11 24       	eor	r1, r1
    18d0:	2f 93       	push	r18
    18d2:	3f 93       	push	r19
    18d4:	4f 93       	push	r20
    18d6:	5f 93       	push	r21
    18d8:	6f 93       	push	r22
    18da:	7f 93       	push	r23
    18dc:	8f 93       	push	r24
    18de:	9f 93       	push	r25
    18e0:	af 93       	push	r26
    18e2:	bf 93       	push	r27
    18e4:	ef 93       	push	r30
    18e6:	ff 93       	push	r31
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	1f 92       	push	r1
    18ee:	cd b7       	in	r28, 0x3d	; 61
    18f0:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    18f2:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    18f6:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    18fa:	89 2b       	or	r24, r25
    18fc:	f9 f0       	breq	.+62     	; 0x193c <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    18fe:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle>
    1902:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x1>
    1906:	fc 01       	movw	r30, r24
    1908:	82 81       	ldd	r24, Z+2	; 0x02
    190a:	93 81       	ldd	r25, Z+3	; 0x03
    190c:	9e 01       	movw	r18, r28
    190e:	2f 5f       	subi	r18, 0xFF	; 255
    1910:	3f 4f       	sbci	r19, 0xFF	; 255
    1912:	b9 01       	movw	r22, r18
    1914:	0e 94 03 06 	call	0xc06	; 0xc06 <buffer_get_item>
    1918:	88 23       	and	r24, r24
    191a:	31 f4       	brne	.+12     	; 0x1928 <__vector_21+0x64>
			UDR0 = item;
    191c:	86 ec       	ldi	r24, 0xC6	; 198
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	29 81       	ldd	r18, Y+1	; 0x01
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
    1926:	13 c0       	rjmp	.+38     	; 0x194e <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1928:	81 ec       	ldi	r24, 0xC1	; 193
    192a:	90 e0       	ldi	r25, 0x00	; 0
    192c:	21 ec       	ldi	r18, 0xC1	; 193
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	f9 01       	movw	r30, r18
    1932:	20 81       	ld	r18, Z
    1934:	2f 7d       	andi	r18, 0xDF	; 223
    1936:	fc 01       	movw	r30, r24
    1938:	20 83       	st	Z, r18
    193a:	09 c0       	rjmp	.+18     	; 0x194e <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    193c:	81 ec       	ldi	r24, 0xC1	; 193
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	21 ec       	ldi	r18, 0xC1	; 193
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	f9 01       	movw	r30, r18
    1946:	20 81       	ld	r18, Z
    1948:	2f 7d       	andi	r18, 0xDF	; 223
    194a:	fc 01       	movw	r30, r24
    194c:	20 83       	st	Z, r18
	}
}
    194e:	0f 90       	pop	r0
    1950:	df 91       	pop	r29
    1952:	cf 91       	pop	r28
    1954:	ff 91       	pop	r31
    1956:	ef 91       	pop	r30
    1958:	bf 91       	pop	r27
    195a:	af 91       	pop	r26
    195c:	9f 91       	pop	r25
    195e:	8f 91       	pop	r24
    1960:	7f 91       	pop	r23
    1962:	6f 91       	pop	r22
    1964:	5f 91       	pop	r21
    1966:	4f 91       	pop	r20
    1968:	3f 91       	pop	r19
    196a:	2f 91       	pop	r18
    196c:	0f 90       	pop	r0
    196e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1972:	0f 90       	pop	r0
    1974:	1f 90       	pop	r1
    1976:	18 95       	reti

00001978 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1980:	0f 92       	push	r0
    1982:	11 24       	eor	r1, r1
    1984:	2f 93       	push	r18
    1986:	3f 93       	push	r19
    1988:	4f 93       	push	r20
    198a:	5f 93       	push	r21
    198c:	6f 93       	push	r22
    198e:	7f 93       	push	r23
    1990:	8f 93       	push	r24
    1992:	9f 93       	push	r25
    1994:	af 93       	push	r26
    1996:	bf 93       	push	r27
    1998:	ef 93       	push	r30
    199a:	ff 93       	push	r31
    199c:	cf 93       	push	r28
    199e:	df 93       	push	r29
    19a0:	1f 92       	push	r1
    19a2:	cd b7       	in	r28, 0x3d	; 61
    19a4:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    19a6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    19aa:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    19ae:	89 2b       	or	r24, r25
    19b0:	31 f1       	breq	.+76     	; 0x19fe <__vector_28+0x86>
		item = UDR1;
    19b2:	8e ec       	ldi	r24, 0xCE	; 206
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	fc 01       	movw	r30, r24
    19b8:	80 81       	ld	r24, Z
    19ba:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    19bc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    19c0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    19c4:	fc 01       	movw	r30, r24
    19c6:	84 81       	ldd	r24, Z+4	; 0x04
    19c8:	95 81       	ldd	r25, Z+5	; 0x05
    19ca:	69 81       	ldd	r22, Y+1	; 0x01
    19cc:	0e 94 4b 06 	call	0xc96	; 0xc96 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    19d0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    19d4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    19d8:	fc 01       	movw	r30, r24
    19da:	86 81       	ldd	r24, Z+6	; 0x06
    19dc:	97 81       	ldd	r25, Z+7	; 0x07
    19de:	89 2b       	or	r24, r25
    19e0:	71 f0       	breq	.+28     	; 0x19fe <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    19e2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    19e6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    19ea:	fc 01       	movw	r30, r24
    19ec:	26 81       	ldd	r18, Z+6	; 0x06
    19ee:	37 81       	ldd	r19, Z+7	; 0x07
    19f0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    19f4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    19f8:	69 81       	ldd	r22, Y+1	; 0x01
    19fa:	f9 01       	movw	r30, r18
    19fc:	09 95       	icall
		}
	}
}
    19fe:	0f 90       	pop	r0
    1a00:	df 91       	pop	r29
    1a02:	cf 91       	pop	r28
    1a04:	ff 91       	pop	r31
    1a06:	ef 91       	pop	r30
    1a08:	bf 91       	pop	r27
    1a0a:	af 91       	pop	r26
    1a0c:	9f 91       	pop	r25
    1a0e:	8f 91       	pop	r24
    1a10:	7f 91       	pop	r23
    1a12:	6f 91       	pop	r22
    1a14:	5f 91       	pop	r21
    1a16:	4f 91       	pop	r20
    1a18:	3f 91       	pop	r19
    1a1a:	2f 91       	pop	r18
    1a1c:	0f 90       	pop	r0
    1a1e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a22:	0f 90       	pop	r0
    1a24:	1f 90       	pop	r1
    1a26:	18 95       	reti

00001a28 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1a28:	1f 92       	push	r1
    1a2a:	0f 92       	push	r0
    1a2c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a30:	0f 92       	push	r0
    1a32:	11 24       	eor	r1, r1
    1a34:	2f 93       	push	r18
    1a36:	3f 93       	push	r19
    1a38:	4f 93       	push	r20
    1a3a:	5f 93       	push	r21
    1a3c:	6f 93       	push	r22
    1a3e:	7f 93       	push	r23
    1a40:	8f 93       	push	r24
    1a42:	9f 93       	push	r25
    1a44:	af 93       	push	r26
    1a46:	bf 93       	push	r27
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	1f 92       	push	r1
    1a52:	cd b7       	in	r28, 0x3d	; 61
    1a54:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1a56:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    1a5a:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    1a5e:	89 2b       	or	r24, r25
    1a60:	f9 f0       	breq	.+62     	; 0x1aa0 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1a62:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <_ser_handle+0x2>
    1a66:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <_ser_handle+0x3>
    1a6a:	fc 01       	movw	r30, r24
    1a6c:	82 81       	ldd	r24, Z+2	; 0x02
    1a6e:	93 81       	ldd	r25, Z+3	; 0x03
    1a70:	9e 01       	movw	r18, r28
    1a72:	2f 5f       	subi	r18, 0xFF	; 255
    1a74:	3f 4f       	sbci	r19, 0xFF	; 255
    1a76:	b9 01       	movw	r22, r18
    1a78:	0e 94 03 06 	call	0xc06	; 0xc06 <buffer_get_item>
    1a7c:	88 23       	and	r24, r24
    1a7e:	31 f4       	brne	.+12     	; 0x1a8c <__vector_29+0x64>
			UDR1 = item;
    1a80:	8e ec       	ldi	r24, 0xCE	; 206
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	29 81       	ldd	r18, Y+1	; 0x01
    1a86:	fc 01       	movw	r30, r24
    1a88:	20 83       	st	Z, r18
    1a8a:	13 c0       	rjmp	.+38     	; 0x1ab2 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1a8c:	89 ec       	ldi	r24, 0xC9	; 201
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	29 ec       	ldi	r18, 0xC9	; 201
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	f9 01       	movw	r30, r18
    1a96:	20 81       	ld	r18, Z
    1a98:	2f 7d       	andi	r18, 0xDF	; 223
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	20 83       	st	Z, r18
    1a9e:	09 c0       	rjmp	.+18     	; 0x1ab2 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1aa0:	89 ec       	ldi	r24, 0xC9	; 201
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	29 ec       	ldi	r18, 0xC9	; 201
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	f9 01       	movw	r30, r18
    1aaa:	20 81       	ld	r18, Z
    1aac:	2f 7d       	andi	r18, 0xDF	; 223
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
	}
}
    1ab2:	0f 90       	pop	r0
    1ab4:	df 91       	pop	r29
    1ab6:	cf 91       	pop	r28
    1ab8:	ff 91       	pop	r31
    1aba:	ef 91       	pop	r30
    1abc:	bf 91       	pop	r27
    1abe:	af 91       	pop	r26
    1ac0:	9f 91       	pop	r25
    1ac2:	8f 91       	pop	r24
    1ac4:	7f 91       	pop	r23
    1ac6:	6f 91       	pop	r22
    1ac8:	5f 91       	pop	r21
    1aca:	4f 91       	pop	r20
    1acc:	3f 91       	pop	r19
    1ace:	2f 91       	pop	r18
    1ad0:	0f 90       	pop	r0
    1ad2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ad6:	0f 90       	pop	r0
    1ad8:	1f 90       	pop	r1
    1ada:	18 95       	reti

00001adc <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <xQueueGenericReset+0x6>
    1ae2:	00 d0       	rcall	.+0      	; 0x1ae4 <xQueueGenericReset+0x8>
    1ae4:	1f 92       	push	r1
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
    1aea:	9c 83       	std	Y+4, r25	; 0x04
    1aec:	8b 83       	std	Y+3, r24	; 0x03
    1aee:	6d 83       	std	Y+5, r22	; 0x05
    1af0:	8b 81       	ldd	r24, Y+3	; 0x03
    1af2:	9c 81       	ldd	r25, Y+4	; 0x04
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01
    1af8:	0f b6       	in	r0, 0x3f	; 63
    1afa:	f8 94       	cli
    1afc:	0f 92       	push	r0
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	9a 81       	ldd	r25, Y+2	; 0x02
    1b02:	fc 01       	movw	r30, r24
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	29 81       	ldd	r18, Y+1	; 0x01
    1b0a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b0c:	f9 01       	movw	r30, r18
    1b0e:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b10:	42 2f       	mov	r20, r18
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	29 81       	ldd	r18, Y+1	; 0x01
    1b16:	3a 81       	ldd	r19, Y+2	; 0x02
    1b18:	f9 01       	movw	r30, r18
    1b1a:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b1c:	22 2f       	mov	r18, r18
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	42 9f       	mul	r20, r18
    1b22:	b0 01       	movw	r22, r0
    1b24:	43 9f       	mul	r20, r19
    1b26:	70 0d       	add	r23, r0
    1b28:	52 9f       	mul	r21, r18
    1b2a:	70 0d       	add	r23, r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	9b 01       	movw	r18, r22
    1b30:	28 0f       	add	r18, r24
    1b32:	39 1f       	adc	r19, r25
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	fc 01       	movw	r30, r24
    1b3a:	33 83       	std	Z+3, r19	; 0x03
    1b3c:	22 83       	std	Z+2, r18	; 0x02
    1b3e:	89 81       	ldd	r24, Y+1	; 0x01
    1b40:	9a 81       	ldd	r25, Y+2	; 0x02
    1b42:	fc 01       	movw	r30, r24
    1b44:	12 8e       	std	Z+26, r1	; 0x1a
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4a:	fc 01       	movw	r30, r24
    1b4c:	20 81       	ld	r18, Z
    1b4e:	31 81       	ldd	r19, Z+1	; 0x01
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	9a 81       	ldd	r25, Y+2	; 0x02
    1b54:	fc 01       	movw	r30, r24
    1b56:	35 83       	std	Z+5, r19	; 0x05
    1b58:	24 83       	std	Z+4, r18	; 0x04
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b5e:	fc 01       	movw	r30, r24
    1b60:	80 81       	ld	r24, Z
    1b62:	91 81       	ldd	r25, Z+1	; 0x01
    1b64:	29 81       	ldd	r18, Y+1	; 0x01
    1b66:	3a 81       	ldd	r19, Y+2	; 0x02
    1b68:	f9 01       	movw	r30, r18
    1b6a:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b6c:	22 2f       	mov	r18, r18
    1b6e:	30 e0       	ldi	r19, 0x00	; 0
    1b70:	a9 01       	movw	r20, r18
    1b72:	41 50       	subi	r20, 0x01	; 1
    1b74:	51 09       	sbc	r21, r1
    1b76:	29 81       	ldd	r18, Y+1	; 0x01
    1b78:	3a 81       	ldd	r19, Y+2	; 0x02
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b7e:	22 2f       	mov	r18, r18
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	42 9f       	mul	r20, r18
    1b84:	b0 01       	movw	r22, r0
    1b86:	43 9f       	mul	r20, r19
    1b88:	70 0d       	add	r23, r0
    1b8a:	52 9f       	mul	r21, r18
    1b8c:	70 0d       	add	r23, r0
    1b8e:	11 24       	eor	r1, r1
    1b90:	9b 01       	movw	r18, r22
    1b92:	28 0f       	add	r18, r24
    1b94:	39 1f       	adc	r19, r25
    1b96:	89 81       	ldd	r24, Y+1	; 0x01
    1b98:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9a:	fc 01       	movw	r30, r24
    1b9c:	37 83       	std	Z+7, r19	; 0x07
    1b9e:	26 83       	std	Z+6, r18	; 0x06
    1ba0:	89 81       	ldd	r24, Y+1	; 0x01
    1ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba4:	2f ef       	ldi	r18, 0xFF	; 255
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	25 8f       	std	Z+29, r18	; 0x1d
    1baa:	89 81       	ldd	r24, Y+1	; 0x01
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	2f ef       	ldi	r18, 0xFF	; 255
    1bb0:	fc 01       	movw	r30, r24
    1bb2:	26 8f       	std	Z+30, r18	; 0x1e
    1bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bb6:	88 23       	and	r24, r24
    1bb8:	81 f4       	brne	.+32     	; 0x1bda <xQueueGenericReset+0xfe>
    1bba:	89 81       	ldd	r24, Y+1	; 0x01
    1bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 85       	ldd	r24, Z+8	; 0x08
    1bc2:	88 23       	and	r24, r24
    1bc4:	a1 f0       	breq	.+40     	; 0x1bee <xQueueGenericReset+0x112>
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bca:	08 96       	adiw	r24, 0x08	; 8
    1bcc:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    1bd0:	88 23       	and	r24, r24
    1bd2:	69 f0       	breq	.+26     	; 0x1bee <xQueueGenericReset+0x112>
    1bd4:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    1bd8:	0a c0       	rjmp	.+20     	; 0x1bee <xQueueGenericReset+0x112>
    1bda:	89 81       	ldd	r24, Y+1	; 0x01
    1bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bde:	08 96       	adiw	r24, 0x08	; 8
    1be0:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    1be4:	89 81       	ldd	r24, Y+1	; 0x01
    1be6:	9a 81       	ldd	r25, Y+2	; 0x02
    1be8:	41 96       	adiw	r24, 0x11	; 17
    1bea:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    1bee:	0f 90       	pop	r0
    1bf0:	0f be       	out	0x3f, r0	; 63
    1bf2:	81 e0       	ldi	r24, 0x01	; 1
    1bf4:	0f 90       	pop	r0
    1bf6:	0f 90       	pop	r0
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <xQueueGenericCreate>:
    1c04:	0f 93       	push	r16
    1c06:	1f 93       	push	r17
    1c08:	cf 93       	push	r28
    1c0a:	df 93       	push	r29
    1c0c:	cd b7       	in	r28, 0x3d	; 61
    1c0e:	de b7       	in	r29, 0x3e	; 62
    1c10:	29 97       	sbiw	r28, 0x09	; 9
    1c12:	0f b6       	in	r0, 0x3f	; 63
    1c14:	f8 94       	cli
    1c16:	de bf       	out	0x3e, r29	; 62
    1c18:	0f be       	out	0x3f, r0	; 63
    1c1a:	cd bf       	out	0x3d, r28	; 61
    1c1c:	8f 83       	std	Y+7, r24	; 0x07
    1c1e:	68 87       	std	Y+8, r22	; 0x08
    1c20:	49 87       	std	Y+9, r20	; 0x09
    1c22:	88 85       	ldd	r24, Y+8	; 0x08
    1c24:	88 23       	and	r24, r24
    1c26:	19 f4       	brne	.+6      	; 0x1c2e <xQueueGenericCreate+0x2a>
    1c28:	1a 82       	std	Y+2, r1	; 0x02
    1c2a:	19 82       	std	Y+1, r1	; 0x01
    1c2c:	0f c0       	rjmp	.+30     	; 0x1c4c <xQueueGenericCreate+0x48>
    1c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c30:	48 2f       	mov	r20, r24
    1c32:	50 e0       	ldi	r21, 0x00	; 0
    1c34:	88 85       	ldd	r24, Y+8	; 0x08
    1c36:	28 2f       	mov	r18, r24
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	42 9f       	mul	r20, r18
    1c3c:	c0 01       	movw	r24, r0
    1c3e:	43 9f       	mul	r20, r19
    1c40:	90 0d       	add	r25, r0
    1c42:	52 9f       	mul	r21, r18
    1c44:	90 0d       	add	r25, r0
    1c46:	11 24       	eor	r1, r1
    1c48:	9a 83       	std	Y+2, r25	; 0x02
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	81 96       	adiw	r24, 0x21	; 33
    1c52:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pvPortMalloc>
    1c56:	9c 83       	std	Y+4, r25	; 0x04
    1c58:	8b 83       	std	Y+3, r24	; 0x03
    1c5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5e:	89 2b       	or	r24, r25
    1c60:	81 f0       	breq	.+32     	; 0x1c82 <xQueueGenericCreate+0x7e>
    1c62:	8b 81       	ldd	r24, Y+3	; 0x03
    1c64:	9c 81       	ldd	r25, Y+4	; 0x04
    1c66:	81 96       	adiw	r24, 0x21	; 33
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c6e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c70:	8d 81       	ldd	r24, Y+5	; 0x05
    1c72:	9e 81       	ldd	r25, Y+6	; 0x06
    1c74:	89 01       	movw	r16, r18
    1c76:	29 85       	ldd	r18, Y+9	; 0x09
    1c78:	ac 01       	movw	r20, r24
    1c7a:	68 85       	ldd	r22, Y+8	; 0x08
    1c7c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c7e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <prvInitialiseNewQueue>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	29 96       	adiw	r28, 0x09	; 9
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	1f 91       	pop	r17
    1c98:	0f 91       	pop	r16
    1c9a:	08 95       	ret

00001c9c <prvInitialiseNewQueue>:
    1c9c:	0f 93       	push	r16
    1c9e:	1f 93       	push	r17
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    1ca8:	27 97       	sbiw	r28, 0x07	; 7
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	de bf       	out	0x3e, r29	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	cd bf       	out	0x3d, r28	; 61
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	6a 83       	std	Y+2, r22	; 0x02
    1cb8:	5c 83       	std	Y+4, r21	; 0x04
    1cba:	4b 83       	std	Y+3, r20	; 0x03
    1cbc:	2d 83       	std	Y+5, r18	; 0x05
    1cbe:	1f 83       	std	Y+7, r17	; 0x07
    1cc0:	0e 83       	std	Y+6, r16	; 0x06
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 23       	and	r24, r24
    1cc6:	41 f4       	brne	.+16     	; 0x1cd8 <prvInitialiseNewQueue+0x3c>
    1cc8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cca:	9f 81       	ldd	r25, Y+7	; 0x07
    1ccc:	2e 81       	ldd	r18, Y+6	; 0x06
    1cce:	3f 81       	ldd	r19, Y+7	; 0x07
    1cd0:	fc 01       	movw	r30, r24
    1cd2:	31 83       	std	Z+1, r19	; 0x01
    1cd4:	20 83       	st	Z, r18
    1cd6:	07 c0       	rjmp	.+14     	; 0x1ce6 <prvInitialiseNewQueue+0x4a>
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cde:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	31 83       	std	Z+1, r19	; 0x01
    1ce4:	20 83       	st	Z, r18
    1ce6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cea:	29 81       	ldd	r18, Y+1	; 0x01
    1cec:	fc 01       	movw	r30, r24
    1cee:	23 8f       	std	Z+27, r18	; 0x1b
    1cf0:	8e 81       	ldd	r24, Y+6	; 0x06
    1cf2:	9f 81       	ldd	r25, Y+7	; 0x07
    1cf4:	2a 81       	ldd	r18, Y+2	; 0x02
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	24 8f       	std	Z+28, r18	; 0x1c
    1cfa:	8e 81       	ldd	r24, Y+6	; 0x06
    1cfc:	9f 81       	ldd	r25, Y+7	; 0x07
    1cfe:	61 e0       	ldi	r22, 0x01	; 1
    1d00:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <xQueueGenericReset>
    1d04:	8e 81       	ldd	r24, Y+6	; 0x06
    1d06:	9f 81       	ldd	r25, Y+7	; 0x07
    1d08:	2d 81       	ldd	r18, Y+5	; 0x05
    1d0a:	fc 01       	movw	r30, r24
    1d0c:	20 a3       	std	Z+32, r18	; 0x20
    1d0e:	27 96       	adiw	r28, 0x07	; 7
    1d10:	0f b6       	in	r0, 0x3f	; 63
    1d12:	f8 94       	cli
    1d14:	de bf       	out	0x3e, r29	; 62
    1d16:	0f be       	out	0x3f, r0	; 63
    1d18:	cd bf       	out	0x3d, r28	; 61
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	0f 91       	pop	r16
    1d22:	08 95       	ret

00001d24 <prvInitialiseMutex>:
    1d24:	cf 93       	push	r28
    1d26:	df 93       	push	r29
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <prvInitialiseMutex+0x6>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	89 2b       	or	r24, r25
    1d38:	b9 f0       	breq	.+46     	; 0x1d68 <prvInitialiseMutex+0x44>
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	13 82       	std	Z+3, r1	; 0x03
    1d42:	12 82       	std	Z+2, r1	; 0x02
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	fc 01       	movw	r30, r24
    1d4a:	11 82       	std	Z+1, r1	; 0x01
    1d4c:	10 82       	st	Z, r1
    1d4e:	89 81       	ldd	r24, Y+1	; 0x01
    1d50:	9a 81       	ldd	r25, Y+2	; 0x02
    1d52:	fc 01       	movw	r30, r24
    1d54:	16 82       	std	Z+6, r1	; 0x06
    1d56:	89 81       	ldd	r24, Y+1	; 0x01
    1d58:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	40 e0       	ldi	r20, 0x00	; 0
    1d5e:	50 e0       	ldi	r21, 0x00	; 0
    1d60:	60 e0       	ldi	r22, 0x00	; 0
    1d62:	70 e0       	ldi	r23, 0x00	; 0
    1d64:	0e 94 d9 0e 	call	0x1db2	; 0x1db2 <xQueueGenericSend>
    1d68:	0f 90       	pop	r0
    1d6a:	0f 90       	pop	r0
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	08 95       	ret

00001d72 <xQueueCreateMutex>:
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	00 d0       	rcall	.+0      	; 0x1d78 <xQueueCreateMutex+0x6>
    1d78:	00 d0       	rcall	.+0      	; 0x1d7a <xQueueCreateMutex+0x8>
    1d7a:	1f 92       	push	r1
    1d7c:	cd b7       	in	r28, 0x3d	; 61
    1d7e:	de b7       	in	r29, 0x3e	; 62
    1d80:	8d 83       	std	Y+5, r24	; 0x05
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	89 83       	std	Y+1, r24	; 0x01
    1d86:	1a 82       	std	Y+2, r1	; 0x02
    1d88:	4d 81       	ldd	r20, Y+5	; 0x05
    1d8a:	6a 81       	ldd	r22, Y+2	; 0x02
    1d8c:	89 81       	ldd	r24, Y+1	; 0x01
    1d8e:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <xQueueGenericCreate>
    1d92:	9c 83       	std	Y+4, r25	; 0x04
    1d94:	8b 83       	std	Y+3, r24	; 0x03
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <prvInitialiseMutex>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	0f 90       	pop	r0
    1da4:	0f 90       	pop	r0
    1da6:	0f 90       	pop	r0
    1da8:	0f 90       	pop	r0
    1daa:	0f 90       	pop	r0
    1dac:	df 91       	pop	r29
    1dae:	cf 91       	pop	r28
    1db0:	08 95       	ret

00001db2 <xQueueGenericSend>:
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	cd b7       	in	r28, 0x3d	; 61
    1db8:	de b7       	in	r29, 0x3e	; 62
    1dba:	2e 97       	sbiw	r28, 0x0e	; 14
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	de bf       	out	0x3e, r29	; 62
    1dc2:	0f be       	out	0x3f, r0	; 63
    1dc4:	cd bf       	out	0x3d, r28	; 61
    1dc6:	99 87       	std	Y+9, r25	; 0x09
    1dc8:	88 87       	std	Y+8, r24	; 0x08
    1dca:	7b 87       	std	Y+11, r23	; 0x0b
    1dcc:	6a 87       	std	Y+10, r22	; 0x0a
    1dce:	5d 87       	std	Y+13, r21	; 0x0d
    1dd0:	4c 87       	std	Y+12, r20	; 0x0c
    1dd2:	2e 87       	std	Y+14, r18	; 0x0e
    1dd4:	19 82       	std	Y+1, r1	; 0x01
    1dd6:	88 85       	ldd	r24, Y+8	; 0x08
    1dd8:	99 85       	ldd	r25, Y+9	; 0x09
    1dda:	9b 83       	std	Y+3, r25	; 0x03
    1ddc:	8a 83       	std	Y+2, r24	; 0x02
    1dde:	0f b6       	in	r0, 0x3f	; 63
    1de0:	f8 94       	cli
    1de2:	0f 92       	push	r0
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	9b 81       	ldd	r25, Y+3	; 0x03
    1de8:	fc 01       	movw	r30, r24
    1dea:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	9b 81       	ldd	r25, Y+3	; 0x03
    1df0:	fc 01       	movw	r30, r24
    1df2:	83 8d       	ldd	r24, Z+27	; 0x1b
    1df4:	28 17       	cp	r18, r24
    1df6:	18 f0       	brcs	.+6      	; 0x1dfe <xQueueGenericSend+0x4c>
    1df8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dfa:	82 30       	cpi	r24, 0x02	; 2
    1dfc:	11 f5       	brne	.+68     	; 0x1e42 <xQueueGenericSend+0x90>
    1dfe:	2a 85       	ldd	r18, Y+10	; 0x0a
    1e00:	3b 85       	ldd	r19, Y+11	; 0x0b
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	9b 81       	ldd	r25, Y+3	; 0x03
    1e06:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e08:	b9 01       	movw	r22, r18
    1e0a:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <prvCopyDataToQueue>
    1e0e:	8c 83       	std	Y+4, r24	; 0x04
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	9b 81       	ldd	r25, Y+3	; 0x03
    1e14:	fc 01       	movw	r30, r24
    1e16:	81 89       	ldd	r24, Z+17	; 0x11
    1e18:	88 23       	and	r24, r24
    1e1a:	51 f0       	breq	.+20     	; 0x1e30 <xQueueGenericSend+0x7e>
    1e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e20:	41 96       	adiw	r24, 0x11	; 17
    1e22:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    1e26:	88 23       	and	r24, r24
    1e28:	41 f0       	breq	.+16     	; 0x1e3a <xQueueGenericSend+0x88>
    1e2a:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    1e2e:	05 c0       	rjmp	.+10     	; 0x1e3a <xQueueGenericSend+0x88>
    1e30:	8c 81       	ldd	r24, Y+4	; 0x04
    1e32:	88 23       	and	r24, r24
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <xQueueGenericSend+0x88>
    1e36:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    1e3a:	0f 90       	pop	r0
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	61 c0       	rjmp	.+194    	; 0x1f04 <xQueueGenericSend+0x152>
    1e42:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e44:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e46:	89 2b       	or	r24, r25
    1e48:	21 f4       	brne	.+8      	; 0x1e52 <xQueueGenericSend+0xa0>
    1e4a:	0f 90       	pop	r0
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	59 c0       	rjmp	.+178    	; 0x1f04 <xQueueGenericSend+0x152>
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	88 23       	and	r24, r24
    1e56:	31 f4       	brne	.+12     	; 0x1e64 <xQueueGenericSend+0xb2>
    1e58:	ce 01       	movw	r24, r28
    1e5a:	05 96       	adiw	r24, 0x05	; 5
    1e5c:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <vTaskSetTimeOutState>
    1e60:	81 e0       	ldi	r24, 0x01	; 1
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	0f 90       	pop	r0
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskSuspendAll>
    1e6c:	0f b6       	in	r0, 0x3f	; 63
    1e6e:	f8 94       	cli
    1e70:	0f 92       	push	r0
    1e72:	8a 81       	ldd	r24, Y+2	; 0x02
    1e74:	9b 81       	ldd	r25, Y+3	; 0x03
    1e76:	fc 01       	movw	r30, r24
    1e78:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e7a:	8f 3f       	cpi	r24, 0xFF	; 255
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <xQueueGenericSend+0xd4>
    1e7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e80:	9b 81       	ldd	r25, Y+3	; 0x03
    1e82:	fc 01       	movw	r30, r24
    1e84:	15 8e       	std	Z+29, r1	; 0x1d
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	fc 01       	movw	r30, r24
    1e8c:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e8e:	8f 3f       	cpi	r24, 0xFF	; 255
    1e90:	21 f4       	brne	.+8      	; 0x1e9a <xQueueGenericSend+0xe8>
    1e92:	8a 81       	ldd	r24, Y+2	; 0x02
    1e94:	9b 81       	ldd	r25, Y+3	; 0x03
    1e96:	fc 01       	movw	r30, r24
    1e98:	16 8e       	std	Z+30, r1	; 0x1e
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	9e 01       	movw	r18, r28
    1ea0:	24 5f       	subi	r18, 0xF4	; 244
    1ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    1ea4:	ce 01       	movw	r24, r28
    1ea6:	05 96       	adiw	r24, 0x05	; 5
    1ea8:	b9 01       	movw	r22, r18
    1eaa:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <xTaskCheckForTimeOut>
    1eae:	88 23       	and	r24, r24
    1eb0:	01 f5       	brne	.+64     	; 0x1ef2 <xQueueGenericSend+0x140>
    1eb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb4:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb6:	0e 94 7b 12 	call	0x24f6	; 0x24f6 <prvIsQueueFull>
    1eba:	88 23       	and	r24, r24
    1ebc:	99 f0       	breq	.+38     	; 0x1ee4 <xQueueGenericSend+0x132>
    1ebe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ec0:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	08 96       	adiw	r24, 0x08	; 8
    1ec8:	b9 01       	movw	r22, r18
    1eca:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <vTaskPlaceOnEventList>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed2:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    1ed6:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    1eda:	88 23       	and	r24, r24
    1edc:	91 f4       	brne	.+36     	; 0x1f02 <xQueueGenericSend+0x150>
    1ede:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    1ee2:	0f c0       	rjmp	.+30     	; 0x1f02 <xQueueGenericSend+0x150>
    1ee4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee8:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    1eec:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    1ef0:	76 cf       	rjmp	.-276    	; 0x1dde <xQueueGenericSend+0x2c>
    1ef2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef6:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    1efa:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <xQueueGenericSend+0x152>
    1f02:	6d cf       	rjmp	.-294    	; 0x1dde <xQueueGenericSend+0x2c>
    1f04:	2e 96       	adiw	r28, 0x0e	; 14
    1f06:	0f b6       	in	r0, 0x3f	; 63
    1f08:	f8 94       	cli
    1f0a:	de bf       	out	0x3e, r29	; 62
    1f0c:	0f be       	out	0x3f, r0	; 63
    1f0e:	cd bf       	out	0x3d, r28	; 61
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	08 95       	ret

00001f16 <xQueueGenericSendFromISR>:
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	2c 97       	sbiw	r28, 0x0c	; 12
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	9f 83       	std	Y+7, r25	; 0x07
    1f2c:	8e 83       	std	Y+6, r24	; 0x06
    1f2e:	79 87       	std	Y+9, r23	; 0x09
    1f30:	68 87       	std	Y+8, r22	; 0x08
    1f32:	5b 87       	std	Y+11, r21	; 0x0b
    1f34:	4a 87       	std	Y+10, r20	; 0x0a
    1f36:	2c 87       	std	Y+12, r18	; 0x0c
    1f38:	8e 81       	ldd	r24, Y+6	; 0x06
    1f3a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f3c:	9b 83       	std	Y+3, r25	; 0x03
    1f3e:	8a 83       	std	Y+2, r24	; 0x02
    1f40:	1c 82       	std	Y+4, r1	; 0x04
    1f42:	8a 81       	ldd	r24, Y+2	; 0x02
    1f44:	9b 81       	ldd	r25, Y+3	; 0x03
    1f46:	fc 01       	movw	r30, r24
    1f48:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4e:	fc 01       	movw	r30, r24
    1f50:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f52:	28 17       	cp	r18, r24
    1f54:	18 f0       	brcs	.+6      	; 0x1f5c <xQueueGenericSendFromISR+0x46>
    1f56:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f58:	82 30       	cpi	r24, 0x02	; 2
    1f5a:	89 f5       	brne	.+98     	; 0x1fbe <xQueueGenericSendFromISR+0xa8>
    1f5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f60:	fc 01       	movw	r30, r24
    1f62:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f64:	8d 83       	std	Y+5, r24	; 0x05
    1f66:	28 85       	ldd	r18, Y+8	; 0x08
    1f68:	39 85       	ldd	r19, Y+9	; 0x09
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6e:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f70:	b9 01       	movw	r22, r18
    1f72:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <prvCopyDataToQueue>
    1f76:	8d 81       	ldd	r24, Y+5	; 0x05
    1f78:	8f 3f       	cpi	r24, 0xFF	; 255
    1f7a:	b9 f4       	brne	.+46     	; 0x1faa <xQueueGenericSendFromISR+0x94>
    1f7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f80:	fc 01       	movw	r30, r24
    1f82:	81 89       	ldd	r24, Z+17	; 0x11
    1f84:	88 23       	and	r24, r24
    1f86:	c1 f0       	breq	.+48     	; 0x1fb8 <xQueueGenericSendFromISR+0xa2>
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	41 96       	adiw	r24, 0x11	; 17
    1f8e:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    1f92:	88 23       	and	r24, r24
    1f94:	89 f0       	breq	.+34     	; 0x1fb8 <xQueueGenericSendFromISR+0xa2>
    1f96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f9a:	89 2b       	or	r24, r25
    1f9c:	69 f0       	breq	.+26     	; 0x1fb8 <xQueueGenericSendFromISR+0xa2>
    1f9e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fa0:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fa2:	21 e0       	ldi	r18, 0x01	; 1
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	20 83       	st	Z, r18
    1fa8:	07 c0       	rjmp	.+14     	; 0x1fb8 <xQueueGenericSendFromISR+0xa2>
    1faa:	8d 81       	ldd	r24, Y+5	; 0x05
    1fac:	8f 5f       	subi	r24, 0xFF	; 255
    1fae:	28 2f       	mov	r18, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	26 8f       	std	Z+30, r18	; 0x1e
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	89 83       	std	Y+1, r24	; 0x01
    1fbc:	01 c0       	rjmp	.+2      	; 0x1fc0 <xQueueGenericSendFromISR+0xaa>
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	89 81       	ldd	r24, Y+1	; 0x01
    1fc2:	2c 96       	adiw	r28, 0x0c	; 12
    1fc4:	0f b6       	in	r0, 0x3f	; 63
    1fc6:	f8 94       	cli
    1fc8:	de bf       	out	0x3e, r29	; 62
    1fca:	0f be       	out	0x3f, r0	; 63
    1fcc:	cd bf       	out	0x3d, r28	; 61
    1fce:	df 91       	pop	r29
    1fd0:	cf 91       	pop	r28
    1fd2:	08 95       	ret

00001fd4 <xQueueGenericReceive>:
    1fd4:	cf 93       	push	r28
    1fd6:	df 93       	push	r29
    1fd8:	cd b7       	in	r28, 0x3d	; 61
    1fda:	de b7       	in	r29, 0x3e	; 62
    1fdc:	60 97       	sbiw	r28, 0x10	; 16
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	de bf       	out	0x3e, r29	; 62
    1fe4:	0f be       	out	0x3f, r0	; 63
    1fe6:	cd bf       	out	0x3d, r28	; 61
    1fe8:	9b 87       	std	Y+11, r25	; 0x0b
    1fea:	8a 87       	std	Y+10, r24	; 0x0a
    1fec:	7d 87       	std	Y+13, r23	; 0x0d
    1fee:	6c 87       	std	Y+12, r22	; 0x0c
    1ff0:	5f 87       	std	Y+15, r21	; 0x0f
    1ff2:	4e 87       	std	Y+14, r20	; 0x0e
    1ff4:	28 8b       	std	Y+16, r18	; 0x10
    1ff6:	19 82       	std	Y+1, r1	; 0x01
    1ff8:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ffa:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ffc:	9b 83       	std	Y+3, r25	; 0x03
    1ffe:	8a 83       	std	Y+2, r24	; 0x02
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	0f 92       	push	r0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	fc 01       	movw	r30, r24
    200c:	82 8d       	ldd	r24, Z+26	; 0x1a
    200e:	8c 83       	std	Y+4, r24	; 0x04
    2010:	8c 81       	ldd	r24, Y+4	; 0x04
    2012:	88 23       	and	r24, r24
    2014:	09 f4       	brne	.+2      	; 0x2018 <xQueueGenericReceive+0x44>
    2016:	51 c0       	rjmp	.+162    	; 0x20ba <xQueueGenericReceive+0xe6>
    2018:	8a 81       	ldd	r24, Y+2	; 0x02
    201a:	9b 81       	ldd	r25, Y+3	; 0x03
    201c:	fc 01       	movw	r30, r24
    201e:	86 81       	ldd	r24, Z+6	; 0x06
    2020:	97 81       	ldd	r25, Z+7	; 0x07
    2022:	9e 83       	std	Y+6, r25	; 0x06
    2024:	8d 83       	std	Y+5, r24	; 0x05
    2026:	2c 85       	ldd	r18, Y+12	; 0x0c
    2028:	3d 85       	ldd	r19, Y+13	; 0x0d
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	9b 81       	ldd	r25, Y+3	; 0x03
    202e:	b9 01       	movw	r22, r18
    2030:	0e 94 b0 11 	call	0x2360	; 0x2360 <prvCopyDataFromQueue>
    2034:	88 89       	ldd	r24, Y+16	; 0x10
    2036:	88 23       	and	r24, r24
    2038:	31 f5       	brne	.+76     	; 0x2086 <xQueueGenericReceive+0xb2>
    203a:	8c 81       	ldd	r24, Y+4	; 0x04
    203c:	2f ef       	ldi	r18, 0xFF	; 255
    203e:	28 0f       	add	r18, r24
    2040:	8a 81       	ldd	r24, Y+2	; 0x02
    2042:	9b 81       	ldd	r25, Y+3	; 0x03
    2044:	fc 01       	movw	r30, r24
    2046:	22 8f       	std	Z+26, r18	; 0x1a
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	fc 01       	movw	r30, r24
    204e:	80 81       	ld	r24, Z
    2050:	91 81       	ldd	r25, Z+1	; 0x01
    2052:	89 2b       	or	r24, r25
    2054:	41 f4       	brne	.+16     	; 0x2066 <xQueueGenericReceive+0x92>
    2056:	0e 94 e5 19 	call	0x33ca	; 0x33ca <pvTaskIncrementMutexHeldCount>
    205a:	9c 01       	movw	r18, r24
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	33 83       	std	Z+3, r19	; 0x03
    2064:	22 83       	std	Z+2, r18	; 0x02
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	9b 81       	ldd	r25, Y+3	; 0x03
    206a:	fc 01       	movw	r30, r24
    206c:	80 85       	ldd	r24, Z+8	; 0x08
    206e:	88 23       	and	r24, r24
    2070:	01 f1       	breq	.+64     	; 0x20b2 <xQueueGenericReceive+0xde>
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	08 96       	adiw	r24, 0x08	; 8
    2078:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    207c:	88 23       	and	r24, r24
    207e:	c9 f0       	breq	.+50     	; 0x20b2 <xQueueGenericReceive+0xde>
    2080:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    2084:	16 c0       	rjmp	.+44     	; 0x20b2 <xQueueGenericReceive+0xde>
    2086:	8a 81       	ldd	r24, Y+2	; 0x02
    2088:	9b 81       	ldd	r25, Y+3	; 0x03
    208a:	2d 81       	ldd	r18, Y+5	; 0x05
    208c:	3e 81       	ldd	r19, Y+6	; 0x06
    208e:	fc 01       	movw	r30, r24
    2090:	37 83       	std	Z+7, r19	; 0x07
    2092:	26 83       	std	Z+6, r18	; 0x06
    2094:	8a 81       	ldd	r24, Y+2	; 0x02
    2096:	9b 81       	ldd	r25, Y+3	; 0x03
    2098:	fc 01       	movw	r30, r24
    209a:	81 89       	ldd	r24, Z+17	; 0x11
    209c:	88 23       	and	r24, r24
    209e:	49 f0       	breq	.+18     	; 0x20b2 <xQueueGenericReceive+0xde>
    20a0:	8a 81       	ldd	r24, Y+2	; 0x02
    20a2:	9b 81       	ldd	r25, Y+3	; 0x03
    20a4:	41 96       	adiw	r24, 0x11	; 17
    20a6:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    20aa:	88 23       	and	r24, r24
    20ac:	11 f0       	breq	.+4      	; 0x20b2 <xQueueGenericReceive+0xde>
    20ae:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    20b2:	0f 90       	pop	r0
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	7a c0       	rjmp	.+244    	; 0x21ae <xQueueGenericReceive+0x1da>
    20ba:	8e 85       	ldd	r24, Y+14	; 0x0e
    20bc:	9f 85       	ldd	r25, Y+15	; 0x0f
    20be:	89 2b       	or	r24, r25
    20c0:	21 f4       	brne	.+8      	; 0x20ca <xQueueGenericReceive+0xf6>
    20c2:	0f 90       	pop	r0
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	72 c0       	rjmp	.+228    	; 0x21ae <xQueueGenericReceive+0x1da>
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	88 23       	and	r24, r24
    20ce:	31 f4       	brne	.+12     	; 0x20dc <xQueueGenericReceive+0x108>
    20d0:	ce 01       	movw	r24, r28
    20d2:	07 96       	adiw	r24, 0x07	; 7
    20d4:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <vTaskSetTimeOutState>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	89 83       	std	Y+1, r24	; 0x01
    20dc:	0f 90       	pop	r0
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskSuspendAll>
    20e4:	0f b6       	in	r0, 0x3f	; 63
    20e6:	f8 94       	cli
    20e8:	0f 92       	push	r0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	fc 01       	movw	r30, r24
    20f0:	85 8d       	ldd	r24, Z+29	; 0x1d
    20f2:	8f 3f       	cpi	r24, 0xFF	; 255
    20f4:	21 f4       	brne	.+8      	; 0x20fe <xQueueGenericReceive+0x12a>
    20f6:	8a 81       	ldd	r24, Y+2	; 0x02
    20f8:	9b 81       	ldd	r25, Y+3	; 0x03
    20fa:	fc 01       	movw	r30, r24
    20fc:	15 8e       	std	Z+29, r1	; 0x1d
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	9b 81       	ldd	r25, Y+3	; 0x03
    2102:	fc 01       	movw	r30, r24
    2104:	86 8d       	ldd	r24, Z+30	; 0x1e
    2106:	8f 3f       	cpi	r24, 0xFF	; 255
    2108:	21 f4       	brne	.+8      	; 0x2112 <xQueueGenericReceive+0x13e>
    210a:	8a 81       	ldd	r24, Y+2	; 0x02
    210c:	9b 81       	ldd	r25, Y+3	; 0x03
    210e:	fc 01       	movw	r30, r24
    2110:	16 8e       	std	Z+30, r1	; 0x1e
    2112:	0f 90       	pop	r0
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	9e 01       	movw	r18, r28
    2118:	22 5f       	subi	r18, 0xF2	; 242
    211a:	3f 4f       	sbci	r19, 0xFF	; 255
    211c:	ce 01       	movw	r24, r28
    211e:	07 96       	adiw	r24, 0x07	; 7
    2120:	b9 01       	movw	r22, r18
    2122:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <xTaskCheckForTimeOut>
    2126:	88 23       	and	r24, r24
    2128:	99 f5       	brne	.+102    	; 0x2190 <xQueueGenericReceive+0x1bc>
    212a:	8a 81       	ldd	r24, Y+2	; 0x02
    212c:	9b 81       	ldd	r25, Y+3	; 0x03
    212e:	0e 94 5d 12 	call	0x24ba	; 0x24ba <prvIsQueueEmpty>
    2132:	88 23       	and	r24, r24
    2134:	31 f1       	breq	.+76     	; 0x2182 <xQueueGenericReceive+0x1ae>
    2136:	8a 81       	ldd	r24, Y+2	; 0x02
    2138:	9b 81       	ldd	r25, Y+3	; 0x03
    213a:	fc 01       	movw	r30, r24
    213c:	80 81       	ld	r24, Z
    213e:	91 81       	ldd	r25, Z+1	; 0x01
    2140:	89 2b       	or	r24, r25
    2142:	61 f4       	brne	.+24     	; 0x215c <xQueueGenericReceive+0x188>
    2144:	0f b6       	in	r0, 0x3f	; 63
    2146:	f8 94       	cli
    2148:	0f 92       	push	r0
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	fc 01       	movw	r30, r24
    2150:	82 81       	ldd	r24, Z+2	; 0x02
    2152:	93 81       	ldd	r25, Z+3	; 0x03
    2154:	0e 94 d1 18 	call	0x31a2	; 0x31a2 <vTaskPriorityInherit>
    2158:	0f 90       	pop	r0
    215a:	0f be       	out	0x3f, r0	; 63
    215c:	2e 85       	ldd	r18, Y+14	; 0x0e
    215e:	3f 85       	ldd	r19, Y+15	; 0x0f
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	41 96       	adiw	r24, 0x11	; 17
    2166:	b9 01       	movw	r22, r18
    2168:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <vTaskPlaceOnEventList>
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	9b 81       	ldd	r25, Y+3	; 0x03
    2170:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    2174:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    2178:	88 23       	and	r24, r24
    217a:	c1 f4       	brne	.+48     	; 0x21ac <xQueueGenericReceive+0x1d8>
    217c:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    2180:	15 c0       	rjmp	.+42     	; 0x21ac <xQueueGenericReceive+0x1d8>
    2182:	8a 81       	ldd	r24, Y+2	; 0x02
    2184:	9b 81       	ldd	r25, Y+3	; 0x03
    2186:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    218a:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    218e:	38 cf       	rjmp	.-400    	; 0x2000 <xQueueGenericReceive+0x2c>
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	9b 81       	ldd	r25, Y+3	; 0x03
    2194:	0e 94 00 12 	call	0x2400	; 0x2400 <prvUnlockQueue>
    2198:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	9b 81       	ldd	r25, Y+3	; 0x03
    21a0:	0e 94 5d 12 	call	0x24ba	; 0x24ba <prvIsQueueEmpty>
    21a4:	88 23       	and	r24, r24
    21a6:	11 f0       	breq	.+4      	; 0x21ac <xQueueGenericReceive+0x1d8>
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	01 c0       	rjmp	.+2      	; 0x21ae <xQueueGenericReceive+0x1da>
    21ac:	29 cf       	rjmp	.-430    	; 0x2000 <xQueueGenericReceive+0x2c>
    21ae:	60 96       	adiw	r28, 0x10	; 16
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	de bf       	out	0x3e, r29	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	cd bf       	out	0x3d, r28	; 61
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	08 95       	ret

000021c0 <prvCopyDataToQueue>:
    21c0:	cf 93       	push	r28
    21c2:	df 93       	push	r29
    21c4:	cd b7       	in	r28, 0x3d	; 61
    21c6:	de b7       	in	r29, 0x3e	; 62
    21c8:	27 97       	sbiw	r28, 0x07	; 7
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	de bf       	out	0x3e, r29	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	cd bf       	out	0x3d, r28	; 61
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    21d8:	7e 83       	std	Y+6, r23	; 0x06
    21da:	6d 83       	std	Y+5, r22	; 0x05
    21dc:	4f 83       	std	Y+7, r20	; 0x07
    21de:	19 82       	std	Y+1, r1	; 0x01
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	9c 81       	ldd	r25, Y+4	; 0x04
    21e4:	fc 01       	movw	r30, r24
    21e6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	fc 01       	movw	r30, r24
    21f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    21f2:	88 23       	and	r24, r24
    21f4:	b1 f4       	brne	.+44     	; 0x2222 <prvCopyDataToQueue+0x62>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	91 81       	ldd	r25, Z+1	; 0x01
    2200:	89 2b       	or	r24, r25
    2202:	09 f0       	breq	.+2      	; 0x2206 <prvCopyDataToQueue+0x46>
    2204:	9c c0       	rjmp	.+312    	; 0x233e <prvCopyDataToQueue+0x17e>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	fc 01       	movw	r30, r24
    220c:	82 81       	ldd	r24, Z+2	; 0x02
    220e:	93 81       	ldd	r25, Z+3	; 0x03
    2210:	0e 94 68 19 	call	0x32d0	; 0x32d0 <xTaskPriorityDisinherit>
    2214:	89 83       	std	Y+1, r24	; 0x01
    2216:	8b 81       	ldd	r24, Y+3	; 0x03
    2218:	9c 81       	ldd	r25, Y+4	; 0x04
    221a:	fc 01       	movw	r30, r24
    221c:	13 82       	std	Z+3, r1	; 0x03
    221e:	12 82       	std	Z+2, r1	; 0x02
    2220:	8e c0       	rjmp	.+284    	; 0x233e <prvCopyDataToQueue+0x17e>
    2222:	8f 81       	ldd	r24, Y+7	; 0x07
    2224:	88 23       	and	r24, r24
    2226:	d9 f5       	brne	.+118    	; 0x229e <prvCopyDataToQueue+0xde>
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	fc 01       	movw	r30, r24
    222e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2230:	48 2f       	mov	r20, r24
    2232:	50 e0       	ldi	r21, 0x00	; 0
    2234:	8b 81       	ldd	r24, Y+3	; 0x03
    2236:	9c 81       	ldd	r25, Y+4	; 0x04
    2238:	fc 01       	movw	r30, r24
    223a:	84 81       	ldd	r24, Z+4	; 0x04
    223c:	95 81       	ldd	r25, Z+5	; 0x05
    223e:	2d 81       	ldd	r18, Y+5	; 0x05
    2240:	3e 81       	ldd	r19, Y+6	; 0x06
    2242:	b9 01       	movw	r22, r18
    2244:	0e 94 3f 1c 	call	0x387e	; 0x387e <memcpy>
    2248:	8b 81       	ldd	r24, Y+3	; 0x03
    224a:	9c 81       	ldd	r25, Y+4	; 0x04
    224c:	fc 01       	movw	r30, r24
    224e:	24 81       	ldd	r18, Z+4	; 0x04
    2250:	35 81       	ldd	r19, Z+5	; 0x05
    2252:	8b 81       	ldd	r24, Y+3	; 0x03
    2254:	9c 81       	ldd	r25, Y+4	; 0x04
    2256:	fc 01       	movw	r30, r24
    2258:	84 8d       	ldd	r24, Z+28	; 0x1c
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	28 0f       	add	r18, r24
    2260:	39 1f       	adc	r19, r25
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	fc 01       	movw	r30, r24
    2268:	35 83       	std	Z+5, r19	; 0x05
    226a:	24 83       	std	Z+4, r18	; 0x04
    226c:	8b 81       	ldd	r24, Y+3	; 0x03
    226e:	9c 81       	ldd	r25, Y+4	; 0x04
    2270:	fc 01       	movw	r30, r24
    2272:	24 81       	ldd	r18, Z+4	; 0x04
    2274:	35 81       	ldd	r19, Z+5	; 0x05
    2276:	8b 81       	ldd	r24, Y+3	; 0x03
    2278:	9c 81       	ldd	r25, Y+4	; 0x04
    227a:	fc 01       	movw	r30, r24
    227c:	82 81       	ldd	r24, Z+2	; 0x02
    227e:	93 81       	ldd	r25, Z+3	; 0x03
    2280:	28 17       	cp	r18, r24
    2282:	39 07       	cpc	r19, r25
    2284:	08 f4       	brcc	.+2      	; 0x2288 <prvCopyDataToQueue+0xc8>
    2286:	5b c0       	rjmp	.+182    	; 0x233e <prvCopyDataToQueue+0x17e>
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	fc 01       	movw	r30, r24
    228e:	20 81       	ld	r18, Z
    2290:	31 81       	ldd	r19, Z+1	; 0x01
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	fc 01       	movw	r30, r24
    2298:	35 83       	std	Z+5, r19	; 0x05
    229a:	24 83       	std	Z+4, r18	; 0x04
    229c:	50 c0       	rjmp	.+160    	; 0x233e <prvCopyDataToQueue+0x17e>
    229e:	8b 81       	ldd	r24, Y+3	; 0x03
    22a0:	9c 81       	ldd	r25, Y+4	; 0x04
    22a2:	fc 01       	movw	r30, r24
    22a4:	84 8d       	ldd	r24, Z+28	; 0x1c
    22a6:	48 2f       	mov	r20, r24
    22a8:	50 e0       	ldi	r21, 0x00	; 0
    22aa:	8b 81       	ldd	r24, Y+3	; 0x03
    22ac:	9c 81       	ldd	r25, Y+4	; 0x04
    22ae:	fc 01       	movw	r30, r24
    22b0:	86 81       	ldd	r24, Z+6	; 0x06
    22b2:	97 81       	ldd	r25, Z+7	; 0x07
    22b4:	2d 81       	ldd	r18, Y+5	; 0x05
    22b6:	3e 81       	ldd	r19, Y+6	; 0x06
    22b8:	b9 01       	movw	r22, r18
    22ba:	0e 94 3f 1c 	call	0x387e	; 0x387e <memcpy>
    22be:	8b 81       	ldd	r24, Y+3	; 0x03
    22c0:	9c 81       	ldd	r25, Y+4	; 0x04
    22c2:	fc 01       	movw	r30, r24
    22c4:	26 81       	ldd	r18, Z+6	; 0x06
    22c6:	37 81       	ldd	r19, Z+7	; 0x07
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	fc 01       	movw	r30, r24
    22ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    22d0:	88 2f       	mov	r24, r24
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	91 95       	neg	r25
    22d6:	81 95       	neg	r24
    22d8:	91 09       	sbc	r25, r1
    22da:	28 0f       	add	r18, r24
    22dc:	39 1f       	adc	r19, r25
    22de:	8b 81       	ldd	r24, Y+3	; 0x03
    22e0:	9c 81       	ldd	r25, Y+4	; 0x04
    22e2:	fc 01       	movw	r30, r24
    22e4:	37 83       	std	Z+7, r19	; 0x07
    22e6:	26 83       	std	Z+6, r18	; 0x06
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	fc 01       	movw	r30, r24
    22ee:	26 81       	ldd	r18, Z+6	; 0x06
    22f0:	37 81       	ldd	r19, Z+7	; 0x07
    22f2:	8b 81       	ldd	r24, Y+3	; 0x03
    22f4:	9c 81       	ldd	r25, Y+4	; 0x04
    22f6:	fc 01       	movw	r30, r24
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	28 17       	cp	r18, r24
    22fe:	39 07       	cpc	r19, r25
    2300:	a8 f4       	brcc	.+42     	; 0x232c <prvCopyDataToQueue+0x16c>
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	9c 81       	ldd	r25, Y+4	; 0x04
    2306:	fc 01       	movw	r30, r24
    2308:	22 81       	ldd	r18, Z+2	; 0x02
    230a:	33 81       	ldd	r19, Z+3	; 0x03
    230c:	8b 81       	ldd	r24, Y+3	; 0x03
    230e:	9c 81       	ldd	r25, Y+4	; 0x04
    2310:	fc 01       	movw	r30, r24
    2312:	84 8d       	ldd	r24, Z+28	; 0x1c
    2314:	88 2f       	mov	r24, r24
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	91 95       	neg	r25
    231a:	81 95       	neg	r24
    231c:	91 09       	sbc	r25, r1
    231e:	28 0f       	add	r18, r24
    2320:	39 1f       	adc	r19, r25
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	fc 01       	movw	r30, r24
    2328:	37 83       	std	Z+7, r19	; 0x07
    232a:	26 83       	std	Z+6, r18	; 0x06
    232c:	8f 81       	ldd	r24, Y+7	; 0x07
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	31 f4       	brne	.+12     	; 0x233e <prvCopyDataToQueue+0x17e>
    2332:	8a 81       	ldd	r24, Y+2	; 0x02
    2334:	88 23       	and	r24, r24
    2336:	19 f0       	breq	.+6      	; 0x233e <prvCopyDataToQueue+0x17e>
    2338:	8a 81       	ldd	r24, Y+2	; 0x02
    233a:	81 50       	subi	r24, 0x01	; 1
    233c:	8a 83       	std	Y+2, r24	; 0x02
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	21 e0       	ldi	r18, 0x01	; 1
    2342:	28 0f       	add	r18, r24
    2344:	8b 81       	ldd	r24, Y+3	; 0x03
    2346:	9c 81       	ldd	r25, Y+4	; 0x04
    2348:	fc 01       	movw	r30, r24
    234a:	22 8f       	std	Z+26, r18	; 0x1a
    234c:	89 81       	ldd	r24, Y+1	; 0x01
    234e:	27 96       	adiw	r28, 0x07	; 7
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	08 95       	ret

00002360 <prvCopyDataFromQueue>:
    2360:	cf 93       	push	r28
    2362:	df 93       	push	r29
    2364:	00 d0       	rcall	.+0      	; 0x2366 <prvCopyDataFromQueue+0x6>
    2366:	00 d0       	rcall	.+0      	; 0x2368 <prvCopyDataFromQueue+0x8>
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	7c 83       	std	Y+4, r23	; 0x04
    2372:	6b 83       	std	Y+3, r22	; 0x03
    2374:	89 81       	ldd	r24, Y+1	; 0x01
    2376:	9a 81       	ldd	r25, Y+2	; 0x02
    2378:	fc 01       	movw	r30, r24
    237a:	84 8d       	ldd	r24, Z+28	; 0x1c
    237c:	88 23       	and	r24, r24
    237e:	c9 f1       	breq	.+114    	; 0x23f2 <prvCopyDataFromQueue+0x92>
    2380:	89 81       	ldd	r24, Y+1	; 0x01
    2382:	9a 81       	ldd	r25, Y+2	; 0x02
    2384:	fc 01       	movw	r30, r24
    2386:	26 81       	ldd	r18, Z+6	; 0x06
    2388:	37 81       	ldd	r19, Z+7	; 0x07
    238a:	89 81       	ldd	r24, Y+1	; 0x01
    238c:	9a 81       	ldd	r25, Y+2	; 0x02
    238e:	fc 01       	movw	r30, r24
    2390:	84 8d       	ldd	r24, Z+28	; 0x1c
    2392:	88 2f       	mov	r24, r24
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	28 0f       	add	r18, r24
    2398:	39 1f       	adc	r19, r25
    239a:	89 81       	ldd	r24, Y+1	; 0x01
    239c:	9a 81       	ldd	r25, Y+2	; 0x02
    239e:	fc 01       	movw	r30, r24
    23a0:	37 83       	std	Z+7, r19	; 0x07
    23a2:	26 83       	std	Z+6, r18	; 0x06
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	fc 01       	movw	r30, r24
    23aa:	26 81       	ldd	r18, Z+6	; 0x06
    23ac:	37 81       	ldd	r19, Z+7	; 0x07
    23ae:	89 81       	ldd	r24, Y+1	; 0x01
    23b0:	9a 81       	ldd	r25, Y+2	; 0x02
    23b2:	fc 01       	movw	r30, r24
    23b4:	82 81       	ldd	r24, Z+2	; 0x02
    23b6:	93 81       	ldd	r25, Z+3	; 0x03
    23b8:	28 17       	cp	r18, r24
    23ba:	39 07       	cpc	r19, r25
    23bc:	50 f0       	brcs	.+20     	; 0x23d2 <prvCopyDataFromQueue+0x72>
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	9a 81       	ldd	r25, Y+2	; 0x02
    23c2:	fc 01       	movw	r30, r24
    23c4:	20 81       	ld	r18, Z
    23c6:	31 81       	ldd	r19, Z+1	; 0x01
    23c8:	89 81       	ldd	r24, Y+1	; 0x01
    23ca:	9a 81       	ldd	r25, Y+2	; 0x02
    23cc:	fc 01       	movw	r30, r24
    23ce:	37 83       	std	Z+7, r19	; 0x07
    23d0:	26 83       	std	Z+6, r18	; 0x06
    23d2:	89 81       	ldd	r24, Y+1	; 0x01
    23d4:	9a 81       	ldd	r25, Y+2	; 0x02
    23d6:	fc 01       	movw	r30, r24
    23d8:	84 8d       	ldd	r24, Z+28	; 0x1c
    23da:	48 2f       	mov	r20, r24
    23dc:	50 e0       	ldi	r21, 0x00	; 0
    23de:	89 81       	ldd	r24, Y+1	; 0x01
    23e0:	9a 81       	ldd	r25, Y+2	; 0x02
    23e2:	fc 01       	movw	r30, r24
    23e4:	26 81       	ldd	r18, Z+6	; 0x06
    23e6:	37 81       	ldd	r19, Z+7	; 0x07
    23e8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ea:	9c 81       	ldd	r25, Y+4	; 0x04
    23ec:	b9 01       	movw	r22, r18
    23ee:	0e 94 3f 1c 	call	0x387e	; 0x387e <memcpy>
    23f2:	0f 90       	pop	r0
    23f4:	0f 90       	pop	r0
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	df 91       	pop	r29
    23fc:	cf 91       	pop	r28
    23fe:	08 95       	ret

00002400 <prvUnlockQueue>:
    2400:	cf 93       	push	r28
    2402:	df 93       	push	r29
    2404:	00 d0       	rcall	.+0      	; 0x2406 <prvUnlockQueue+0x6>
    2406:	00 d0       	rcall	.+0      	; 0x2408 <prvUnlockQueue+0x8>
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	9c 83       	std	Y+4, r25	; 0x04
    240e:	8b 83       	std	Y+3, r24	; 0x03
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	0f 92       	push	r0
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	fc 01       	movw	r30, r24
    241c:	86 8d       	ldd	r24, Z+30	; 0x1e
    241e:	89 83       	std	Y+1, r24	; 0x01
    2420:	14 c0       	rjmp	.+40     	; 0x244a <prvUnlockQueue+0x4a>
    2422:	8b 81       	ldd	r24, Y+3	; 0x03
    2424:	9c 81       	ldd	r25, Y+4	; 0x04
    2426:	fc 01       	movw	r30, r24
    2428:	81 89       	ldd	r24, Z+17	; 0x11
    242a:	88 23       	and	r24, r24
    242c:	51 f0       	breq	.+20     	; 0x2442 <prvUnlockQueue+0x42>
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	41 96       	adiw	r24, 0x11	; 17
    2434:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    2438:	88 23       	and	r24, r24
    243a:	21 f0       	breq	.+8      	; 0x2444 <prvUnlockQueue+0x44>
    243c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <vTaskMissedYield>
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <prvUnlockQueue+0x44>
    2442:	06 c0       	rjmp	.+12     	; 0x2450 <prvUnlockQueue+0x50>
    2444:	89 81       	ldd	r24, Y+1	; 0x01
    2446:	81 50       	subi	r24, 0x01	; 1
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	18 16       	cp	r1, r24
    244e:	4c f3       	brlt	.-46     	; 0x2422 <prvUnlockQueue+0x22>
    2450:	8b 81       	ldd	r24, Y+3	; 0x03
    2452:	9c 81       	ldd	r25, Y+4	; 0x04
    2454:	2f ef       	ldi	r18, 0xFF	; 255
    2456:	fc 01       	movw	r30, r24
    2458:	26 8f       	std	Z+30, r18	; 0x1e
    245a:	0f 90       	pop	r0
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	0f 92       	push	r0
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	fc 01       	movw	r30, r24
    246a:	85 8d       	ldd	r24, Z+29	; 0x1d
    246c:	8a 83       	std	Y+2, r24	; 0x02
    246e:	14 c0       	rjmp	.+40     	; 0x2498 <prvUnlockQueue+0x98>
    2470:	8b 81       	ldd	r24, Y+3	; 0x03
    2472:	9c 81       	ldd	r25, Y+4	; 0x04
    2474:	fc 01       	movw	r30, r24
    2476:	80 85       	ldd	r24, Z+8	; 0x08
    2478:	88 23       	and	r24, r24
    247a:	69 f0       	breq	.+26     	; 0x2496 <prvUnlockQueue+0x96>
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	08 96       	adiw	r24, 0x08	; 8
    2482:	0e 94 03 17 	call	0x2e06	; 0x2e06 <xTaskRemoveFromEventList>
    2486:	88 23       	and	r24, r24
    2488:	11 f0       	breq	.+4      	; 0x248e <prvUnlockQueue+0x8e>
    248a:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <vTaskMissedYield>
    248e:	8a 81       	ldd	r24, Y+2	; 0x02
    2490:	81 50       	subi	r24, 0x01	; 1
    2492:	8a 83       	std	Y+2, r24	; 0x02
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <prvUnlockQueue+0x98>
    2496:	03 c0       	rjmp	.+6      	; 0x249e <prvUnlockQueue+0x9e>
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	18 16       	cp	r1, r24
    249c:	4c f3       	brlt	.-46     	; 0x2470 <prvUnlockQueue+0x70>
    249e:	8b 81       	ldd	r24, Y+3	; 0x03
    24a0:	9c 81       	ldd	r25, Y+4	; 0x04
    24a2:	2f ef       	ldi	r18, 0xFF	; 255
    24a4:	fc 01       	movw	r30, r24
    24a6:	25 8f       	std	Z+29, r18	; 0x1d
    24a8:	0f 90       	pop	r0
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	df 91       	pop	r29
    24b6:	cf 91       	pop	r28
    24b8:	08 95       	ret

000024ba <prvIsQueueEmpty>:
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <prvIsQueueEmpty+0x6>
    24c0:	1f 92       	push	r1
    24c2:	cd b7       	in	r28, 0x3d	; 61
    24c4:	de b7       	in	r29, 0x3e	; 62
    24c6:	9b 83       	std	Y+3, r25	; 0x03
    24c8:	8a 83       	std	Y+2, r24	; 0x02
    24ca:	0f b6       	in	r0, 0x3f	; 63
    24cc:	f8 94       	cli
    24ce:	0f 92       	push	r0
    24d0:	8a 81       	ldd	r24, Y+2	; 0x02
    24d2:	9b 81       	ldd	r25, Y+3	; 0x03
    24d4:	fc 01       	movw	r30, r24
    24d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    24d8:	88 23       	and	r24, r24
    24da:	19 f4       	brne	.+6      	; 0x24e2 <prvIsQueueEmpty+0x28>
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	89 83       	std	Y+1, r24	; 0x01
    24e0:	01 c0       	rjmp	.+2      	; 0x24e4 <prvIsQueueEmpty+0x2a>
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	0f 90       	pop	r0
    24e6:	0f be       	out	0x3f, r0	; 63
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	0f 90       	pop	r0
    24ec:	0f 90       	pop	r0
    24ee:	0f 90       	pop	r0
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	08 95       	ret

000024f6 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	00 d0       	rcall	.+0      	; 0x24fc <prvIsQueueFull+0x6>
    24fc:	1f 92       	push	r1
    24fe:	cd b7       	in	r28, 0x3d	; 61
    2500:	de b7       	in	r29, 0x3e	; 62
    2502:	9b 83       	std	Y+3, r25	; 0x03
    2504:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    250c:	8a 81       	ldd	r24, Y+2	; 0x02
    250e:	9b 81       	ldd	r25, Y+3	; 0x03
    2510:	fc 01       	movw	r30, r24
    2512:	22 8d       	ldd	r18, Z+26	; 0x1a
    2514:	8a 81       	ldd	r24, Y+2	; 0x02
    2516:	9b 81       	ldd	r25, Y+3	; 0x03
    2518:	fc 01       	movw	r30, r24
    251a:	83 8d       	ldd	r24, Z+27	; 0x1b
    251c:	28 17       	cp	r18, r24
    251e:	19 f4       	brne	.+6      	; 0x2526 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	89 83       	std	Y+1, r24	; 0x01
    2524:	01 c0       	rjmp	.+2      	; 0x2528 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2526:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2528:	0f 90       	pop	r0
    252a:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    252c:	89 81       	ldd	r24, Y+1	; 0x01
}
    252e:	0f 90       	pop	r0
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	df 91       	pop	r29
    2536:	cf 91       	pop	r28
    2538:	08 95       	ret

0000253a <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    253a:	8f 92       	push	r8
    253c:	9f 92       	push	r9
    253e:	af 92       	push	r10
    2540:	bf 92       	push	r11
    2542:	cf 92       	push	r12
    2544:	df 92       	push	r13
    2546:	ef 92       	push	r14
    2548:	ff 92       	push	r15
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	60 97       	sbiw	r28, 0x10	; 16
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	9f 83       	std	Y+7, r25	; 0x07
    2564:	8e 83       	std	Y+6, r24	; 0x06
    2566:	79 87       	std	Y+9, r23	; 0x09
    2568:	68 87       	std	Y+8, r22	; 0x08
    256a:	5b 87       	std	Y+11, r21	; 0x0b
    256c:	4a 87       	std	Y+10, r20	; 0x0a
    256e:	3d 87       	std	Y+13, r19	; 0x0d
    2570:	2c 87       	std	Y+12, r18	; 0x0c
    2572:	0e 87       	std	Y+14, r16	; 0x0e
    2574:	f8 8a       	std	Y+16, r15	; 0x10
    2576:	ef 86       	std	Y+15, r14	; 0x0f
    2578:	8a 85       	ldd	r24, Y+10	; 0x0a
    257a:	9b 85       	ldd	r25, Y+11	; 0x0b
    257c:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pvPortMalloc>
    2580:	9d 83       	std	Y+5, r25	; 0x05
    2582:	8c 83       	std	Y+4, r24	; 0x04
    2584:	8c 81       	ldd	r24, Y+4	; 0x04
    2586:	9d 81       	ldd	r25, Y+5	; 0x05
    2588:	89 2b       	or	r24, r25
    258a:	b9 f0       	breq	.+46     	; 0x25ba <xTaskCreate+0x80>
    258c:	8c e2       	ldi	r24, 0x2C	; 44
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	0e 94 e8 0a 	call	0x15d0	; 0x15d0 <pvPortMalloc>
    2594:	9a 83       	std	Y+2, r25	; 0x02
    2596:	89 83       	std	Y+1, r24	; 0x01
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	89 2b       	or	r24, r25
    259e:	41 f0       	breq	.+16     	; 0x25b0 <xTaskCreate+0x76>
    25a0:	89 81       	ldd	r24, Y+1	; 0x01
    25a2:	9a 81       	ldd	r25, Y+2	; 0x02
    25a4:	2c 81       	ldd	r18, Y+4	; 0x04
    25a6:	3d 81       	ldd	r19, Y+5	; 0x05
    25a8:	fc 01       	movw	r30, r24
    25aa:	30 8f       	std	Z+24, r19	; 0x18
    25ac:	27 8b       	std	Z+23, r18	; 0x17
    25ae:	07 c0       	rjmp	.+14     	; 0x25be <xTaskCreate+0x84>
    25b0:	8c 81       	ldd	r24, Y+4	; 0x04
    25b2:	9d 81       	ldd	r25, Y+5	; 0x05
    25b4:	0e 94 3d 0b 	call	0x167a	; 0x167a <vPortFree>
    25b8:	02 c0       	rjmp	.+4      	; 0x25be <xTaskCreate+0x84>
    25ba:	1a 82       	std	Y+2, r1	; 0x02
    25bc:	19 82       	std	Y+1, r1	; 0x01
    25be:	89 81       	ldd	r24, Y+1	; 0x01
    25c0:	9a 81       	ldd	r25, Y+2	; 0x02
    25c2:	89 2b       	or	r24, r25
    25c4:	09 f1       	breq	.+66     	; 0x2608 <xTaskCreate+0xce>
    25c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    25c8:	9b 85       	ldd	r25, Y+11	; 0x0b
    25ca:	cc 01       	movw	r24, r24
    25cc:	a0 e0       	ldi	r26, 0x00	; 0
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	09 81       	ldd	r16, Y+1	; 0x01
    25d2:	1a 81       	ldd	r17, Y+2	; 0x02
    25d4:	4f 85       	ldd	r20, Y+15	; 0x0f
    25d6:	58 89       	ldd	r21, Y+16	; 0x10
    25d8:	2c 85       	ldd	r18, Y+12	; 0x0c
    25da:	3d 85       	ldd	r19, Y+13	; 0x0d
    25dc:	68 85       	ldd	r22, Y+8	; 0x08
    25de:	79 85       	ldd	r23, Y+9	; 0x09
    25e0:	ee 81       	ldd	r30, Y+6	; 0x06
    25e2:	ff 81       	ldd	r31, Y+7	; 0x07
    25e4:	81 2c       	mov	r8, r1
    25e6:	91 2c       	mov	r9, r1
    25e8:	58 01       	movw	r10, r16
    25ea:	6a 01       	movw	r12, r20
    25ec:	ee 84       	ldd	r14, Y+14	; 0x0e
    25ee:	89 01       	movw	r16, r18
    25f0:	9c 01       	movw	r18, r24
    25f2:	ad 01       	movw	r20, r26
    25f4:	cf 01       	movw	r24, r30
    25f6:	0e 94 1a 13 	call	0x2634	; 0x2634 <prvInitialiseNewTask>
    25fa:	89 81       	ldd	r24, Y+1	; 0x01
    25fc:	9a 81       	ldd	r25, Y+2	; 0x02
    25fe:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <prvAddNewTaskToReadyList>
    2602:	81 e0       	ldi	r24, 0x01	; 1
    2604:	8b 83       	std	Y+3, r24	; 0x03
    2606:	02 c0       	rjmp	.+4      	; 0x260c <xTaskCreate+0xd2>
    2608:	8f ef       	ldi	r24, 0xFF	; 255
    260a:	8b 83       	std	Y+3, r24	; 0x03
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	60 96       	adiw	r28, 0x10	; 16
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	df 90       	pop	r13
    2628:	cf 90       	pop	r12
    262a:	bf 90       	pop	r11
    262c:	af 90       	pop	r10
    262e:	9f 90       	pop	r9
    2630:	8f 90       	pop	r8
    2632:	08 95       	ret

00002634 <prvInitialiseNewTask>:
    2634:	8f 92       	push	r8
    2636:	9f 92       	push	r9
    2638:	af 92       	push	r10
    263a:	bf 92       	push	r11
    263c:	cf 92       	push	r12
    263e:	df 92       	push	r13
    2640:	ef 92       	push	r14
    2642:	0f 93       	push	r16
    2644:	1f 93       	push	r17
    2646:	cf 93       	push	r28
    2648:	df 93       	push	r29
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	64 97       	sbiw	r28, 0x14	; 20
    2650:	0f b6       	in	r0, 0x3f	; 63
    2652:	f8 94       	cli
    2654:	de bf       	out	0x3e, r29	; 62
    2656:	0f be       	out	0x3f, r0	; 63
    2658:	cd bf       	out	0x3d, r28	; 61
    265a:	9d 83       	std	Y+5, r25	; 0x05
    265c:	8c 83       	std	Y+4, r24	; 0x04
    265e:	7f 83       	std	Y+7, r23	; 0x07
    2660:	6e 83       	std	Y+6, r22	; 0x06
    2662:	28 87       	std	Y+8, r18	; 0x08
    2664:	39 87       	std	Y+9, r19	; 0x09
    2666:	4a 87       	std	Y+10, r20	; 0x0a
    2668:	5b 87       	std	Y+11, r21	; 0x0b
    266a:	1d 87       	std	Y+13, r17	; 0x0d
    266c:	0c 87       	std	Y+12, r16	; 0x0c
    266e:	ee 86       	std	Y+14, r14	; 0x0e
    2670:	d8 8a       	std	Y+16, r13	; 0x10
    2672:	cf 86       	std	Y+15, r12	; 0x0f
    2674:	ba 8a       	std	Y+18, r11	; 0x12
    2676:	a9 8a       	std	Y+17, r10	; 0x11
    2678:	9c 8a       	std	Y+20, r9	; 0x14
    267a:	8b 8a       	std	Y+19, r8	; 0x13
    267c:	28 85       	ldd	r18, Y+8	; 0x08
    267e:	39 85       	ldd	r19, Y+9	; 0x09
    2680:	89 89       	ldd	r24, Y+17	; 0x11
    2682:	9a 89       	ldd	r25, Y+18	; 0x12
    2684:	fc 01       	movw	r30, r24
    2686:	87 89       	ldd	r24, Z+23	; 0x17
    2688:	90 8d       	ldd	r25, Z+24	; 0x18
    268a:	a9 01       	movw	r20, r18
    268c:	65 ea       	ldi	r22, 0xA5	; 165
    268e:	70 e0       	ldi	r23, 0x00	; 0
    2690:	0e 94 48 1c 	call	0x3890	; 0x3890 <memset>
    2694:	89 89       	ldd	r24, Y+17	; 0x11
    2696:	9a 89       	ldd	r25, Y+18	; 0x12
    2698:	fc 01       	movw	r30, r24
    269a:	27 89       	ldd	r18, Z+23	; 0x17
    269c:	30 8d       	ldd	r19, Z+24	; 0x18
    269e:	88 85       	ldd	r24, Y+8	; 0x08
    26a0:	99 85       	ldd	r25, Y+9	; 0x09
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	82 0f       	add	r24, r18
    26a6:	93 1f       	adc	r25, r19
    26a8:	9b 83       	std	Y+3, r25	; 0x03
    26aa:	8a 83       	std	Y+2, r24	; 0x02
    26ac:	19 82       	std	Y+1, r1	; 0x01
    26ae:	22 c0       	rjmp	.+68     	; 0x26f4 <prvInitialiseNewTask+0xc0>
    26b0:	89 81       	ldd	r24, Y+1	; 0x01
    26b2:	88 2f       	mov	r24, r24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	29 81       	ldd	r18, Y+1	; 0x01
    26b8:	22 2f       	mov	r18, r18
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4e 81       	ldd	r20, Y+6	; 0x06
    26be:	5f 81       	ldd	r21, Y+7	; 0x07
    26c0:	24 0f       	add	r18, r20
    26c2:	35 1f       	adc	r19, r21
    26c4:	f9 01       	movw	r30, r18
    26c6:	40 81       	ld	r20, Z
    26c8:	29 89       	ldd	r18, Y+17	; 0x11
    26ca:	3a 89       	ldd	r19, Y+18	; 0x12
    26cc:	82 0f       	add	r24, r18
    26ce:	93 1f       	adc	r25, r19
    26d0:	49 96       	adiw	r24, 0x19	; 25
    26d2:	fc 01       	movw	r30, r24
    26d4:	40 83       	st	Z, r20
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	88 2f       	mov	r24, r24
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	2e 81       	ldd	r18, Y+6	; 0x06
    26de:	3f 81       	ldd	r19, Y+7	; 0x07
    26e0:	82 0f       	add	r24, r18
    26e2:	93 1f       	adc	r25, r19
    26e4:	fc 01       	movw	r30, r24
    26e6:	80 81       	ld	r24, Z
    26e8:	88 23       	and	r24, r24
    26ea:	09 f4       	brne	.+2      	; 0x26ee <prvInitialiseNewTask+0xba>
    26ec:	06 c0       	rjmp	.+12     	; 0x26fa <prvInitialiseNewTask+0xc6>
    26ee:	89 81       	ldd	r24, Y+1	; 0x01
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	89 81       	ldd	r24, Y+1	; 0x01
    26f6:	88 30       	cpi	r24, 0x08	; 8
    26f8:	d8 f2       	brcs	.-74     	; 0x26b0 <prvInitialiseNewTask+0x7c>
    26fa:	89 89       	ldd	r24, Y+17	; 0x11
    26fc:	9a 89       	ldd	r25, Y+18	; 0x12
    26fe:	fc 01       	movw	r30, r24
    2700:	10 a2       	std	Z+32, r1	; 0x20
    2702:	8e 85       	ldd	r24, Y+14	; 0x0e
    2704:	84 30       	cpi	r24, 0x04	; 4
    2706:	10 f0       	brcs	.+4      	; 0x270c <prvInitialiseNewTask+0xd8>
    2708:	83 e0       	ldi	r24, 0x03	; 3
    270a:	8e 87       	std	Y+14, r24	; 0x0e
    270c:	89 89       	ldd	r24, Y+17	; 0x11
    270e:	9a 89       	ldd	r25, Y+18	; 0x12
    2710:	2e 85       	ldd	r18, Y+14	; 0x0e
    2712:	fc 01       	movw	r30, r24
    2714:	26 8b       	std	Z+22, r18	; 0x16
    2716:	89 89       	ldd	r24, Y+17	; 0x11
    2718:	9a 89       	ldd	r25, Y+18	; 0x12
    271a:	2e 85       	ldd	r18, Y+14	; 0x0e
    271c:	fc 01       	movw	r30, r24
    271e:	23 a3       	std	Z+35, r18	; 0x23
    2720:	89 89       	ldd	r24, Y+17	; 0x11
    2722:	9a 89       	ldd	r25, Y+18	; 0x12
    2724:	fc 01       	movw	r30, r24
    2726:	14 a2       	std	Z+36, r1	; 0x24
    2728:	89 89       	ldd	r24, Y+17	; 0x11
    272a:	9a 89       	ldd	r25, Y+18	; 0x12
    272c:	02 96       	adiw	r24, 0x02	; 2
    272e:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialiseItem>
    2732:	89 89       	ldd	r24, Y+17	; 0x11
    2734:	9a 89       	ldd	r25, Y+18	; 0x12
    2736:	0c 96       	adiw	r24, 0x0c	; 12
    2738:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInitialiseItem>
    273c:	89 89       	ldd	r24, Y+17	; 0x11
    273e:	9a 89       	ldd	r25, Y+18	; 0x12
    2740:	29 89       	ldd	r18, Y+17	; 0x11
    2742:	3a 89       	ldd	r19, Y+18	; 0x12
    2744:	fc 01       	movw	r30, r24
    2746:	31 87       	std	Z+9, r19	; 0x09
    2748:	20 87       	std	Z+8, r18	; 0x08
    274a:	8e 85       	ldd	r24, Y+14	; 0x0e
    274c:	88 2f       	mov	r24, r24
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	24 e0       	ldi	r18, 0x04	; 4
    2752:	30 e0       	ldi	r19, 0x00	; 0
    2754:	28 1b       	sub	r18, r24
    2756:	39 0b       	sbc	r19, r25
    2758:	89 89       	ldd	r24, Y+17	; 0x11
    275a:	9a 89       	ldd	r25, Y+18	; 0x12
    275c:	fc 01       	movw	r30, r24
    275e:	35 87       	std	Z+13, r19	; 0x0d
    2760:	24 87       	std	Z+12, r18	; 0x0c
    2762:	89 89       	ldd	r24, Y+17	; 0x11
    2764:	9a 89       	ldd	r25, Y+18	; 0x12
    2766:	29 89       	ldd	r18, Y+17	; 0x11
    2768:	3a 89       	ldd	r19, Y+18	; 0x12
    276a:	fc 01       	movw	r30, r24
    276c:	33 8b       	std	Z+19, r19	; 0x13
    276e:	22 8b       	std	Z+18, r18	; 0x12
    2770:	89 89       	ldd	r24, Y+17	; 0x11
    2772:	9a 89       	ldd	r25, Y+18	; 0x12
    2774:	fc 01       	movw	r30, r24
    2776:	16 a2       	std	Z+38, r1	; 0x26
    2778:	15 a2       	std	Z+37, r1	; 0x25
    277a:	89 89       	ldd	r24, Y+17	; 0x11
    277c:	9a 89       	ldd	r25, Y+18	; 0x12
    277e:	fc 01       	movw	r30, r24
    2780:	17 a2       	std	Z+39, r1	; 0x27
    2782:	10 a6       	std	Z+40, r1	; 0x28
    2784:	11 a6       	std	Z+41, r1	; 0x29
    2786:	12 a6       	std	Z+42, r1	; 0x2a
    2788:	89 89       	ldd	r24, Y+17	; 0x11
    278a:	9a 89       	ldd	r25, Y+18	; 0x12
    278c:	fc 01       	movw	r30, r24
    278e:	13 a6       	std	Z+43, r1	; 0x2b
    2790:	4c 85       	ldd	r20, Y+12	; 0x0c
    2792:	5d 85       	ldd	r21, Y+13	; 0x0d
    2794:	2c 81       	ldd	r18, Y+4	; 0x04
    2796:	3d 81       	ldd	r19, Y+5	; 0x05
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	9b 81       	ldd	r25, Y+3	; 0x03
    279c:	b9 01       	movw	r22, r18
    279e:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <pxPortInitialiseStack>
    27a2:	9c 01       	movw	r18, r24
    27a4:	89 89       	ldd	r24, Y+17	; 0x11
    27a6:	9a 89       	ldd	r25, Y+18	; 0x12
    27a8:	fc 01       	movw	r30, r24
    27aa:	31 83       	std	Z+1, r19	; 0x01
    27ac:	20 83       	st	Z, r18
    27ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b0:	98 89       	ldd	r25, Y+16	; 0x10
    27b2:	89 2b       	or	r24, r25
    27b4:	39 f0       	breq	.+14     	; 0x27c4 <prvInitialiseNewTask+0x190>
    27b6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27b8:	98 89       	ldd	r25, Y+16	; 0x10
    27ba:	29 89       	ldd	r18, Y+17	; 0x11
    27bc:	3a 89       	ldd	r19, Y+18	; 0x12
    27be:	fc 01       	movw	r30, r24
    27c0:	31 83       	std	Z+1, r19	; 0x01
    27c2:	20 83       	st	Z, r18
    27c4:	64 96       	adiw	r28, 0x14	; 20
    27c6:	0f b6       	in	r0, 0x3f	; 63
    27c8:	f8 94       	cli
    27ca:	de bf       	out	0x3e, r29	; 62
    27cc:	0f be       	out	0x3f, r0	; 63
    27ce:	cd bf       	out	0x3d, r28	; 61
    27d0:	df 91       	pop	r29
    27d2:	cf 91       	pop	r28
    27d4:	1f 91       	pop	r17
    27d6:	0f 91       	pop	r16
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	bf 90       	pop	r11
    27e0:	af 90       	pop	r10
    27e2:	9f 90       	pop	r9
    27e4:	8f 90       	pop	r8
    27e6:	08 95       	ret

000027e8 <prvAddNewTaskToReadyList>:
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <prvAddNewTaskToReadyList+0x6>
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	9a 83       	std	Y+2, r25	; 0x02
    27f4:	89 83       	std	Y+1, r24	; 0x01
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	0f 92       	push	r0
    27fc:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <uxCurrentNumberOfTasks>
    2800:	8f 5f       	subi	r24, 0xFF	; 255
    2802:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <uxCurrentNumberOfTasks>
    2806:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    280a:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    280e:	89 2b       	or	r24, r25
    2810:	69 f4       	brne	.+26     	; 0x282c <prvAddNewTaskToReadyList+0x44>
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	9a 81       	ldd	r25, Y+2	; 0x02
    2816:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <pxCurrentTCB+0x1>
    281a:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <pxCurrentTCB>
    281e:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <uxCurrentNumberOfTasks>
    2822:	81 30       	cpi	r24, 0x01	; 1
    2824:	c9 f4       	brne	.+50     	; 0x2858 <prvAddNewTaskToReadyList+0x70>
    2826:	0e 94 0f 18 	call	0x301e	; 0x301e <prvInitialiseTaskLists>
    282a:	16 c0       	rjmp	.+44     	; 0x2858 <prvAddNewTaskToReadyList+0x70>
    282c:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xSchedulerRunning>
    2830:	88 23       	and	r24, r24
    2832:	91 f4       	brne	.+36     	; 0x2858 <prvAddNewTaskToReadyList+0x70>
    2834:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2838:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    283c:	fc 01       	movw	r30, r24
    283e:	26 89       	ldd	r18, Z+22	; 0x16
    2840:	89 81       	ldd	r24, Y+1	; 0x01
    2842:	9a 81       	ldd	r25, Y+2	; 0x02
    2844:	fc 01       	movw	r30, r24
    2846:	86 89       	ldd	r24, Z+22	; 0x16
    2848:	82 17       	cp	r24, r18
    284a:	30 f0       	brcs	.+12     	; 0x2858 <prvAddNewTaskToReadyList+0x70>
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <pxCurrentTCB+0x1>
    2854:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <pxCurrentTCB>
    2858:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxTaskNumber>
    285c:	8f 5f       	subi	r24, 0xFF	; 255
    285e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <uxTaskNumber>
    2862:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <uxTaskNumber>
    2866:	89 81       	ldd	r24, Y+1	; 0x01
    2868:	9a 81       	ldd	r25, Y+2	; 0x02
    286a:	fc 01       	movw	r30, r24
    286c:	21 a3       	std	Z+33, r18	; 0x21
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	9a 81       	ldd	r25, Y+2	; 0x02
    2872:	fc 01       	movw	r30, r24
    2874:	96 89       	ldd	r25, Z+22	; 0x16
    2876:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    287a:	89 17       	cp	r24, r25
    287c:	30 f4       	brcc	.+12     	; 0x288a <prvAddNewTaskToReadyList+0xa2>
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	fc 01       	movw	r30, r24
    2884:	86 89       	ldd	r24, Z+22	; 0x16
    2886:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    288a:	89 81       	ldd	r24, Y+1	; 0x01
    288c:	9a 81       	ldd	r25, Y+2	; 0x02
    288e:	ac 01       	movw	r20, r24
    2890:	4e 5f       	subi	r20, 0xFE	; 254
    2892:	5f 4f       	sbci	r21, 0xFF	; 255
    2894:	89 81       	ldd	r24, Y+1	; 0x01
    2896:	9a 81       	ldd	r25, Y+2	; 0x02
    2898:	fc 01       	movw	r30, r24
    289a:	86 89       	ldd	r24, Z+22	; 0x16
    289c:	28 2f       	mov	r18, r24
    289e:	30 e0       	ldi	r19, 0x00	; 0
    28a0:	c9 01       	movw	r24, r18
    28a2:	88 0f       	add	r24, r24
    28a4:	99 1f       	adc	r25, r25
    28a6:	88 0f       	add	r24, r24
    28a8:	99 1f       	adc	r25, r25
    28aa:	88 0f       	add	r24, r24
    28ac:	99 1f       	adc	r25, r25
    28ae:	82 0f       	add	r24, r18
    28b0:	93 1f       	adc	r25, r19
    28b2:	8c 58       	subi	r24, 0x8C	; 140
    28b4:	9a 4f       	sbci	r25, 0xFA	; 250
    28b6:	ba 01       	movw	r22, r20
    28b8:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    28bc:	0f 90       	pop	r0
    28be:	0f be       	out	0x3f, r0	; 63
    28c0:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xSchedulerRunning>
    28c4:	88 23       	and	r24, r24
    28c6:	71 f0       	breq	.+28     	; 0x28e4 <prvAddNewTaskToReadyList+0xfc>
    28c8:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    28cc:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    28d0:	fc 01       	movw	r30, r24
    28d2:	26 89       	ldd	r18, Z+22	; 0x16
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	86 89       	ldd	r24, Z+22	; 0x16
    28dc:	28 17       	cp	r18, r24
    28de:	10 f4       	brcc	.+4      	; 0x28e4 <prvAddNewTaskToReadyList+0xfc>
    28e0:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    28e4:	0f 90       	pop	r0
    28e6:	0f 90       	pop	r0
    28e8:	df 91       	pop	r29
    28ea:	cf 91       	pop	r28
    28ec:	08 95       	ret

000028ee <vTaskDelay>:
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	00 d0       	rcall	.+0      	; 0x28f4 <vTaskDelay+0x6>
    28f4:	1f 92       	push	r1
    28f6:	cd b7       	in	r28, 0x3d	; 61
    28f8:	de b7       	in	r29, 0x3e	; 62
    28fa:	9b 83       	std	Y+3, r25	; 0x03
    28fc:	8a 83       	std	Y+2, r24	; 0x02
    28fe:	19 82       	std	Y+1, r1	; 0x01
    2900:	8a 81       	ldd	r24, Y+2	; 0x02
    2902:	9b 81       	ldd	r25, Y+3	; 0x03
    2904:	89 2b       	or	r24, r25
    2906:	51 f0       	breq	.+20     	; 0x291c <vTaskDelay+0x2e>
    2908:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskSuspendAll>
    290c:	8a 81       	ldd	r24, Y+2	; 0x02
    290e:	9b 81       	ldd	r25, Y+3	; 0x03
    2910:	60 e0       	ldi	r22, 0x00	; 0
    2912:	0e 94 ff 19 	call	0x33fe	; 0x33fe <prvAddCurrentTaskToDelayedList>
    2916:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    291a:	89 83       	std	Y+1, r24	; 0x01
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	88 23       	and	r24, r24
    2920:	11 f4       	brne	.+4      	; 0x2926 <vTaskDelay+0x38>
    2922:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	df 91       	pop	r29
    292e:	cf 91       	pop	r28
    2930:	08 95       	ret

00002932 <vTaskStartScheduler>:
    2932:	ef 92       	push	r14
    2934:	ff 92       	push	r15
    2936:	0f 93       	push	r16
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	1f 92       	push	r1
    293e:	cd b7       	in	r28, 0x3d	; 61
    2940:	de b7       	in	r29, 0x3e	; 62
    2942:	0f 2e       	mov	r0, r31
    2944:	fc ec       	ldi	r31, 0xCC	; 204
    2946:	ef 2e       	mov	r14, r31
    2948:	f5 e0       	ldi	r31, 0x05	; 5
    294a:	ff 2e       	mov	r15, r31
    294c:	f0 2d       	mov	r31, r0
    294e:	00 e0       	ldi	r16, 0x00	; 0
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	30 e0       	ldi	r19, 0x00	; 0
    2954:	45 e5       	ldi	r20, 0x55	; 85
    2956:	50 e0       	ldi	r21, 0x00	; 0
    2958:	66 e4       	ldi	r22, 0x46	; 70
    295a:	71 e0       	ldi	r23, 0x01	; 1
    295c:	8d ef       	ldi	r24, 0xFD	; 253
    295e:	97 e1       	ldi	r25, 0x17	; 23
    2960:	0e 94 9d 12 	call	0x253a	; 0x253a <xTaskCreate>
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	81 30       	cpi	r24, 0x01	; 1
    296a:	81 f4       	brne	.+32     	; 0x298c <vTaskStartScheduler+0x5a>
    296c:	f8 94       	cli
    296e:	8f ef       	ldi	r24, 0xFF	; 255
    2970:	9f ef       	ldi	r25, 0xFF	; 255
    2972:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    2976:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xSchedulerRunning>
    2980:	10 92 c3 05 	sts	0x05C3, r1	; 0x8005c3 <xTickCount+0x1>
    2984:	10 92 c2 05 	sts	0x05C2, r1	; 0x8005c2 <xTickCount>
    2988:	0e 94 99 09 	call	0x1332	; 0x1332 <xPortStartScheduler>
    298c:	0f 90       	pop	r0
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	0f 91       	pop	r16
    2994:	ff 90       	pop	r15
    2996:	ef 90       	pop	r14
    2998:	08 95       	ret

0000299a <vTaskSuspendAll>:
    299a:	cf 93       	push	r28
    299c:	df 93       	push	r29
    299e:	cd b7       	in	r28, 0x3d	; 61
    29a0:	de b7       	in	r29, 0x3e	; 62
    29a2:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    29a6:	8f 5f       	subi	r24, 0xFF	; 255
    29a8:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <uxSchedulerSuspended>
    29ac:	df 91       	pop	r29
    29ae:	cf 91       	pop	r28
    29b0:	08 95       	ret

000029b2 <xTaskResumeAll>:
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <xTaskResumeAll+0x6>
    29b8:	00 d0       	rcall	.+0      	; 0x29ba <xTaskResumeAll+0x8>
    29ba:	cd b7       	in	r28, 0x3d	; 61
    29bc:	de b7       	in	r29, 0x3e	; 62
    29be:	1a 82       	std	Y+2, r1	; 0x02
    29c0:	19 82       	std	Y+1, r1	; 0x01
    29c2:	1b 82       	std	Y+3, r1	; 0x03
    29c4:	0f b6       	in	r0, 0x3f	; 63
    29c6:	f8 94       	cli
    29c8:	0f 92       	push	r0
    29ca:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    29ce:	81 50       	subi	r24, 0x01	; 1
    29d0:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <uxSchedulerSuspended>
    29d4:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    29d8:	88 23       	and	r24, r24
    29da:	09 f0       	breq	.+2      	; 0x29de <xTaskResumeAll+0x2c>
    29dc:	77 c0       	rjmp	.+238    	; 0x2acc <xTaskResumeAll+0x11a>
    29de:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <uxCurrentNumberOfTasks>
    29e2:	88 23       	and	r24, r24
    29e4:	09 f4       	brne	.+2      	; 0x29e8 <xTaskResumeAll+0x36>
    29e6:	72 c0       	rjmp	.+228    	; 0x2acc <xTaskResumeAll+0x11a>
    29e8:	49 c0       	rjmp	.+146    	; 0x2a7c <xTaskResumeAll+0xca>
    29ea:	80 91 b3 05 	lds	r24, 0x05B3	; 0x8005b3 <xPendingReadyList+0x5>
    29ee:	90 91 b4 05 	lds	r25, 0x05B4	; 0x8005b4 <xPendingReadyList+0x6>
    29f2:	fc 01       	movw	r30, r24
    29f4:	86 81       	ldd	r24, Z+6	; 0x06
    29f6:	97 81       	ldd	r25, Z+7	; 0x07
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	0c 96       	adiw	r24, 0x0c	; 12
    2a02:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2a06:	89 81       	ldd	r24, Y+1	; 0x01
    2a08:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0a:	02 96       	adiw	r24, 0x02	; 2
    2a0c:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	fc 01       	movw	r30, r24
    2a16:	96 89       	ldd	r25, Z+22	; 0x16
    2a18:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    2a1c:	89 17       	cp	r24, r25
    2a1e:	30 f4       	brcc	.+12     	; 0x2a2c <xTaskResumeAll+0x7a>
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	9a 81       	ldd	r25, Y+2	; 0x02
    2a24:	fc 01       	movw	r30, r24
    2a26:	86 89       	ldd	r24, Z+22	; 0x16
    2a28:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    2a2c:	89 81       	ldd	r24, Y+1	; 0x01
    2a2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a30:	ac 01       	movw	r20, r24
    2a32:	4e 5f       	subi	r20, 0xFE	; 254
    2a34:	5f 4f       	sbci	r21, 0xFF	; 255
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	fc 01       	movw	r30, r24
    2a3c:	86 89       	ldd	r24, Z+22	; 0x16
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	c9 01       	movw	r24, r18
    2a44:	88 0f       	add	r24, r24
    2a46:	99 1f       	adc	r25, r25
    2a48:	88 0f       	add	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	88 0f       	add	r24, r24
    2a4e:	99 1f       	adc	r25, r25
    2a50:	82 0f       	add	r24, r18
    2a52:	93 1f       	adc	r25, r19
    2a54:	8c 58       	subi	r24, 0x8C	; 140
    2a56:	9a 4f       	sbci	r25, 0xFA	; 250
    2a58:	ba 01       	movw	r22, r20
    2a5a:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	fc 01       	movw	r30, r24
    2a64:	26 89       	ldd	r18, Z+22	; 0x16
    2a66:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2a6a:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2a6e:	fc 01       	movw	r30, r24
    2a70:	86 89       	ldd	r24, Z+22	; 0x16
    2a72:	28 17       	cp	r18, r24
    2a74:	18 f0       	brcs	.+6      	; 0x2a7c <xTaskResumeAll+0xca>
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <xYieldPending>
    2a7c:	80 91 ae 05 	lds	r24, 0x05AE	; 0x8005ae <xPendingReadyList>
    2a80:	88 23       	and	r24, r24
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <xTaskResumeAll+0xd4>
    2a84:	b2 cf       	rjmp	.-156    	; 0x29ea <xTaskResumeAll+0x38>
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	89 2b       	or	r24, r25
    2a8c:	11 f0       	breq	.+4      	; 0x2a92 <xTaskResumeAll+0xe0>
    2a8e:	0e 94 a3 18 	call	0x3146	; 0x3146 <prvResetNextTaskUnblockTime>
    2a92:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxPendedTicks>
    2a96:	8c 83       	std	Y+4, r24	; 0x04
    2a98:	8c 81       	ldd	r24, Y+4	; 0x04
    2a9a:	88 23       	and	r24, r24
    2a9c:	79 f0       	breq	.+30     	; 0x2abc <xTaskResumeAll+0x10a>
    2a9e:	0e 94 70 15 	call	0x2ae0	; 0x2ae0 <xTaskIncrementTick>
    2aa2:	88 23       	and	r24, r24
    2aa4:	19 f0       	breq	.+6      	; 0x2aac <xTaskResumeAll+0xfa>
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
    2aa8:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <xYieldPending>
    2aac:	8c 81       	ldd	r24, Y+4	; 0x04
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	8c 83       	std	Y+4, r24	; 0x04
    2ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    2ab4:	88 23       	and	r24, r24
    2ab6:	99 f7       	brne	.-26     	; 0x2a9e <xTaskResumeAll+0xec>
    2ab8:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <uxPendedTicks>
    2abc:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <xYieldPending>
    2ac0:	88 23       	and	r24, r24
    2ac2:	21 f0       	breq	.+8      	; 0x2acc <xTaskResumeAll+0x11a>
    2ac4:	81 e0       	ldi	r24, 0x01	; 1
    2ac6:	8b 83       	std	Y+3, r24	; 0x03
    2ac8:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    2acc:	0f 90       	pop	r0
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	0f 90       	pop	r0
    2ad4:	0f 90       	pop	r0
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	08 95       	ret

00002ae0 <xTaskIncrementTick>:
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	cd b7       	in	r28, 0x3d	; 61
    2ae6:	de b7       	in	r29, 0x3e	; 62
    2ae8:	29 97       	sbiw	r28, 0x09	; 9
    2aea:	0f b6       	in	r0, 0x3f	; 63
    2aec:	f8 94       	cli
    2aee:	de bf       	out	0x3e, r29	; 62
    2af0:	0f be       	out	0x3f, r0	; 63
    2af2:	cd bf       	out	0x3d, r28	; 61
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    2afa:	88 23       	and	r24, r24
    2afc:	09 f0       	breq	.+2      	; 0x2b00 <xTaskIncrementTick+0x20>
    2afe:	c7 c0       	rjmp	.+398    	; 0x2c8e <xTaskIncrementTick+0x1ae>
    2b00:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <xTickCount>
    2b04:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <xTickCount+0x1>
    2b08:	01 96       	adiw	r24, 0x01	; 1
    2b0a:	9b 83       	std	Y+3, r25	; 0x03
    2b0c:	8a 83       	std	Y+2, r24	; 0x02
    2b0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b10:	9b 81       	ldd	r25, Y+3	; 0x03
    2b12:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <xTickCount+0x1>
    2b16:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <xTickCount>
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2b1e:	89 2b       	or	r24, r25
    2b20:	d9 f4       	brne	.+54     	; 0x2b58 <xTaskIncrementTick+0x78>
    2b22:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    2b26:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    2b2a:	9d 83       	std	Y+5, r25	; 0x05
    2b2c:	8c 83       	std	Y+4, r24	; 0x04
    2b2e:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <pxOverflowDelayedTaskList>
    2b32:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <pxOverflowDelayedTaskList+0x1>
    2b36:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxDelayedTaskList+0x1>
    2b3a:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxDelayedTaskList>
    2b3e:	8c 81       	ldd	r24, Y+4	; 0x04
    2b40:	9d 81       	ldd	r25, Y+5	; 0x05
    2b42:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <pxOverflowDelayedTaskList+0x1>
    2b46:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <pxOverflowDelayedTaskList>
    2b4a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNumOfOverflows>
    2b4e:	8f 5f       	subi	r24, 0xFF	; 255
    2b50:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNumOfOverflows>
    2b54:	0e 94 a3 18 	call	0x3146	; 0x3146 <prvResetNextTaskUnblockTime>
    2b58:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xNextTaskUnblockTime>
    2b5c:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xNextTaskUnblockTime+0x1>
    2b60:	2a 81       	ldd	r18, Y+2	; 0x02
    2b62:	3b 81       	ldd	r19, Y+3	; 0x03
    2b64:	28 17       	cp	r18, r24
    2b66:	39 07       	cpc	r19, r25
    2b68:	08 f4       	brcc	.+2      	; 0x2b6c <xTaskIncrementTick+0x8c>
    2b6a:	77 c0       	rjmp	.+238    	; 0x2c5a <xTaskIncrementTick+0x17a>
    2b6c:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    2b70:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    2b74:	fc 01       	movw	r30, r24
    2b76:	80 81       	ld	r24, Z
    2b78:	88 23       	and	r24, r24
    2b7a:	39 f4       	brne	.+14     	; 0x2b8a <xTaskIncrementTick+0xaa>
    2b7c:	8f ef       	ldi	r24, 0xFF	; 255
    2b7e:	9f ef       	ldi	r25, 0xFF	; 255
    2b80:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    2b84:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    2b88:	68 c0       	rjmp	.+208    	; 0x2c5a <xTaskIncrementTick+0x17a>
    2b8a:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    2b8e:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    2b92:	fc 01       	movw	r30, r24
    2b94:	85 81       	ldd	r24, Z+5	; 0x05
    2b96:	96 81       	ldd	r25, Z+6	; 0x06
    2b98:	fc 01       	movw	r30, r24
    2b9a:	86 81       	ldd	r24, Z+6	; 0x06
    2b9c:	97 81       	ldd	r25, Z+7	; 0x07
    2b9e:	9f 83       	std	Y+7, r25	; 0x07
    2ba0:	8e 83       	std	Y+6, r24	; 0x06
    2ba2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ba4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba6:	fc 01       	movw	r30, r24
    2ba8:	82 81       	ldd	r24, Z+2	; 0x02
    2baa:	93 81       	ldd	r25, Z+3	; 0x03
    2bac:	99 87       	std	Y+9, r25	; 0x09
    2bae:	88 87       	std	Y+8, r24	; 0x08
    2bb0:	2a 81       	ldd	r18, Y+2	; 0x02
    2bb2:	3b 81       	ldd	r19, Y+3	; 0x03
    2bb4:	88 85       	ldd	r24, Y+8	; 0x08
    2bb6:	99 85       	ldd	r25, Y+9	; 0x09
    2bb8:	28 17       	cp	r18, r24
    2bba:	39 07       	cpc	r19, r25
    2bbc:	38 f4       	brcc	.+14     	; 0x2bcc <xTaskIncrementTick+0xec>
    2bbe:	88 85       	ldd	r24, Y+8	; 0x08
    2bc0:	99 85       	ldd	r25, Y+9	; 0x09
    2bc2:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    2bc6:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    2bca:	47 c0       	rjmp	.+142    	; 0x2c5a <xTaskIncrementTick+0x17a>
    2bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bce:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd0:	02 96       	adiw	r24, 0x02	; 2
    2bd2:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bda:	fc 01       	movw	r30, r24
    2bdc:	84 89       	ldd	r24, Z+20	; 0x14
    2bde:	95 89       	ldd	r25, Z+21	; 0x15
    2be0:	89 2b       	or	r24, r25
    2be2:	29 f0       	breq	.+10     	; 0x2bee <xTaskIncrementTick+0x10e>
    2be4:	8e 81       	ldd	r24, Y+6	; 0x06
    2be6:	9f 81       	ldd	r25, Y+7	; 0x07
    2be8:	0c 96       	adiw	r24, 0x0c	; 12
    2bea:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2bee:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	96 89       	ldd	r25, Z+22	; 0x16
    2bf6:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    2bfa:	89 17       	cp	r24, r25
    2bfc:	30 f4       	brcc	.+12     	; 0x2c0a <xTaskIncrementTick+0x12a>
    2bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2c00:	9f 81       	ldd	r25, Y+7	; 0x07
    2c02:	fc 01       	movw	r30, r24
    2c04:	86 89       	ldd	r24, Z+22	; 0x16
    2c06:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    2c0a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0e:	ac 01       	movw	r20, r24
    2c10:	4e 5f       	subi	r20, 0xFE	; 254
    2c12:	5f 4f       	sbci	r21, 0xFF	; 255
    2c14:	8e 81       	ldd	r24, Y+6	; 0x06
    2c16:	9f 81       	ldd	r25, Y+7	; 0x07
    2c18:	fc 01       	movw	r30, r24
    2c1a:	86 89       	ldd	r24, Z+22	; 0x16
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	c9 01       	movw	r24, r18
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	8c 58       	subi	r24, 0x8C	; 140
    2c34:	9a 4f       	sbci	r25, 0xFA	; 250
    2c36:	ba 01       	movw	r22, r20
    2c38:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    2c3c:	8e 81       	ldd	r24, Y+6	; 0x06
    2c3e:	9f 81       	ldd	r25, Y+7	; 0x07
    2c40:	fc 01       	movw	r30, r24
    2c42:	26 89       	ldd	r18, Z+22	; 0x16
    2c44:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2c48:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2c4c:	fc 01       	movw	r30, r24
    2c4e:	86 89       	ldd	r24, Z+22	; 0x16
    2c50:	28 17       	cp	r18, r24
    2c52:	10 f0       	brcs	.+4      	; 0x2c58 <xTaskIncrementTick+0x178>
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	89 83       	std	Y+1, r24	; 0x01
    2c58:	89 cf       	rjmp	.-238    	; 0x2b6c <xTaskIncrementTick+0x8c>
    2c5a:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2c5e:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2c62:	fc 01       	movw	r30, r24
    2c64:	86 89       	ldd	r24, Z+22	; 0x16
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	c9 01       	movw	r24, r18
    2c6c:	88 0f       	add	r24, r24
    2c6e:	99 1f       	adc	r25, r25
    2c70:	88 0f       	add	r24, r24
    2c72:	99 1f       	adc	r25, r25
    2c74:	88 0f       	add	r24, r24
    2c76:	99 1f       	adc	r25, r25
    2c78:	82 0f       	add	r24, r18
    2c7a:	93 1f       	adc	r25, r19
    2c7c:	8c 58       	subi	r24, 0x8C	; 140
    2c7e:	9a 4f       	sbci	r25, 0xFA	; 250
    2c80:	fc 01       	movw	r30, r24
    2c82:	80 81       	ld	r24, Z
    2c84:	82 30       	cpi	r24, 0x02	; 2
    2c86:	10 f0       	brcs	.+4      	; 0x2c8c <xTaskIncrementTick+0x1ac>
    2c88:	81 e0       	ldi	r24, 0x01	; 1
    2c8a:	89 83       	std	Y+1, r24	; 0x01
    2c8c:	05 c0       	rjmp	.+10     	; 0x2c98 <xTaskIncrementTick+0x1b8>
    2c8e:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <uxPendedTicks>
    2c92:	8f 5f       	subi	r24, 0xFF	; 255
    2c94:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <uxPendedTicks>
    2c98:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <xYieldPending>
    2c9c:	88 23       	and	r24, r24
    2c9e:	11 f0       	breq	.+4      	; 0x2ca4 <xTaskIncrementTick+0x1c4>
    2ca0:	81 e0       	ldi	r24, 0x01	; 1
    2ca2:	89 83       	std	Y+1, r24	; 0x01
    2ca4:	89 81       	ldd	r24, Y+1	; 0x01
    2ca6:	29 96       	adiw	r28, 0x09	; 9
    2ca8:	0f b6       	in	r0, 0x3f	; 63
    2caa:	f8 94       	cli
    2cac:	de bf       	out	0x3e, r29	; 62
    2cae:	0f be       	out	0x3f, r0	; 63
    2cb0:	cd bf       	out	0x3d, r28	; 61
    2cb2:	df 91       	pop	r29
    2cb4:	cf 91       	pop	r28
    2cb6:	08 95       	ret

00002cb8 <vTaskSwitchContext>:
    2cb8:	cf 93       	push	r28
    2cba:	df 93       	push	r29
    2cbc:	00 d0       	rcall	.+0      	; 0x2cbe <vTaskSwitchContext+0x6>
    2cbe:	1f 92       	push	r1
    2cc0:	cd b7       	in	r28, 0x3d	; 61
    2cc2:	de b7       	in	r29, 0x3e	; 62
    2cc4:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    2cc8:	88 23       	and	r24, r24
    2cca:	21 f0       	breq	.+8      	; 0x2cd4 <vTaskSwitchContext+0x1c>
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <xYieldPending>
    2cd2:	71 c0       	rjmp	.+226    	; 0x2db6 <vTaskSwitchContext+0xfe>
    2cd4:	10 92 c7 05 	sts	0x05C7, r1	; 0x8005c7 <xYieldPending>
    2cd8:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2cdc:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	85 a1       	ldd	r24, Z+37	; 0x25
    2ce4:	96 a1       	ldd	r25, Z+38	; 0x26
    2ce6:	0e 94 e1 05 	call	0xbc2	; 0xbc2 <switch_out>
    2cea:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    2cee:	89 83       	std	Y+1, r24	; 0x01
    2cf0:	03 c0       	rjmp	.+6      	; 0x2cf8 <vTaskSwitchContext+0x40>
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	81 50       	subi	r24, 0x01	; 1
    2cf6:	89 83       	std	Y+1, r24	; 0x01
    2cf8:	89 81       	ldd	r24, Y+1	; 0x01
    2cfa:	28 2f       	mov	r18, r24
    2cfc:	30 e0       	ldi	r19, 0x00	; 0
    2cfe:	c9 01       	movw	r24, r18
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	82 0f       	add	r24, r18
    2d0e:	93 1f       	adc	r25, r19
    2d10:	8c 58       	subi	r24, 0x8C	; 140
    2d12:	9a 4f       	sbci	r25, 0xFA	; 250
    2d14:	fc 01       	movw	r30, r24
    2d16:	80 81       	ld	r24, Z
    2d18:	88 23       	and	r24, r24
    2d1a:	59 f3       	breq	.-42     	; 0x2cf2 <vTaskSwitchContext+0x3a>
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	28 2f       	mov	r18, r24
    2d20:	30 e0       	ldi	r19, 0x00	; 0
    2d22:	c9 01       	movw	r24, r18
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	88 0f       	add	r24, r24
    2d2e:	99 1f       	adc	r25, r25
    2d30:	82 0f       	add	r24, r18
    2d32:	93 1f       	adc	r25, r19
    2d34:	8c 58       	subi	r24, 0x8C	; 140
    2d36:	9a 4f       	sbci	r25, 0xFA	; 250
    2d38:	9b 83       	std	Y+3, r25	; 0x03
    2d3a:	8a 83       	std	Y+2, r24	; 0x02
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	fc 01       	movw	r30, r24
    2d42:	81 81       	ldd	r24, Z+1	; 0x01
    2d44:	92 81       	ldd	r25, Z+2	; 0x02
    2d46:	fc 01       	movw	r30, r24
    2d48:	22 81       	ldd	r18, Z+2	; 0x02
    2d4a:	33 81       	ldd	r19, Z+3	; 0x03
    2d4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d50:	fc 01       	movw	r30, r24
    2d52:	32 83       	std	Z+2, r19	; 0x02
    2d54:	21 83       	std	Z+1, r18	; 0x01
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	21 81       	ldd	r18, Z+1	; 0x01
    2d5e:	32 81       	ldd	r19, Z+2	; 0x02
    2d60:	8a 81       	ldd	r24, Y+2	; 0x02
    2d62:	9b 81       	ldd	r25, Y+3	; 0x03
    2d64:	03 96       	adiw	r24, 0x03	; 3
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	69 f4       	brne	.+26     	; 0x2d86 <vTaskSwitchContext+0xce>
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	fc 01       	movw	r30, r24
    2d72:	81 81       	ldd	r24, Z+1	; 0x01
    2d74:	92 81       	ldd	r25, Z+2	; 0x02
    2d76:	fc 01       	movw	r30, r24
    2d78:	22 81       	ldd	r18, Z+2	; 0x02
    2d7a:	33 81       	ldd	r19, Z+3	; 0x03
    2d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d80:	fc 01       	movw	r30, r24
    2d82:	32 83       	std	Z+2, r19	; 0x02
    2d84:	21 83       	std	Z+1, r18	; 0x01
    2d86:	8a 81       	ldd	r24, Y+2	; 0x02
    2d88:	9b 81       	ldd	r25, Y+3	; 0x03
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	81 81       	ldd	r24, Z+1	; 0x01
    2d8e:	92 81       	ldd	r25, Z+2	; 0x02
    2d90:	fc 01       	movw	r30, r24
    2d92:	86 81       	ldd	r24, Z+6	; 0x06
    2d94:	97 81       	ldd	r25, Z+7	; 0x07
    2d96:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <pxCurrentTCB+0x1>
    2d9a:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <pxCurrentTCB>
    2d9e:	89 81       	ldd	r24, Y+1	; 0x01
    2da0:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    2da4:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2da8:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2dac:	fc 01       	movw	r30, r24
    2dae:	85 a1       	ldd	r24, Z+37	; 0x25
    2db0:	96 a1       	ldd	r25, Z+38	; 0x26
    2db2:	0e 94 d7 05 	call	0xbae	; 0xbae <switch_in>
    2db6:	0f 90       	pop	r0
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
    2dbc:	df 91       	pop	r29
    2dbe:	cf 91       	pop	r28
    2dc0:	08 95       	ret

00002dc2 <vTaskPlaceOnEventList>:
    2dc2:	cf 93       	push	r28
    2dc4:	df 93       	push	r29
    2dc6:	00 d0       	rcall	.+0      	; 0x2dc8 <vTaskPlaceOnEventList+0x6>
    2dc8:	00 d0       	rcall	.+0      	; 0x2dca <vTaskPlaceOnEventList+0x8>
    2dca:	cd b7       	in	r28, 0x3d	; 61
    2dcc:	de b7       	in	r29, 0x3e	; 62
    2dce:	9a 83       	std	Y+2, r25	; 0x02
    2dd0:	89 83       	std	Y+1, r24	; 0x01
    2dd2:	7c 83       	std	Y+4, r23	; 0x04
    2dd4:	6b 83       	std	Y+3, r22	; 0x03
    2dd6:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2dda:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2dde:	9c 01       	movw	r18, r24
    2de0:	24 5f       	subi	r18, 0xF4	; 244
    2de2:	3f 4f       	sbci	r19, 0xFF	; 255
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	b9 01       	movw	r22, r18
    2dea:	0e 94 22 07 	call	0xe44	; 0xe44 <vListInsert>
    2dee:	8b 81       	ldd	r24, Y+3	; 0x03
    2df0:	9c 81       	ldd	r25, Y+4	; 0x04
    2df2:	61 e0       	ldi	r22, 0x01	; 1
    2df4:	0e 94 ff 19 	call	0x33fe	; 0x33fe <prvAddCurrentTaskToDelayedList>
    2df8:	0f 90       	pop	r0
    2dfa:	0f 90       	pop	r0
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
    2e00:	df 91       	pop	r29
    2e02:	cf 91       	pop	r28
    2e04:	08 95       	ret

00002e06 <xTaskRemoveFromEventList>:
    2e06:	cf 93       	push	r28
    2e08:	df 93       	push	r29
    2e0a:	00 d0       	rcall	.+0      	; 0x2e0c <xTaskRemoveFromEventList+0x6>
    2e0c:	00 d0       	rcall	.+0      	; 0x2e0e <xTaskRemoveFromEventList+0x8>
    2e0e:	1f 92       	push	r1
    2e10:	cd b7       	in	r28, 0x3d	; 61
    2e12:	de b7       	in	r29, 0x3e	; 62
    2e14:	9d 83       	std	Y+5, r25	; 0x05
    2e16:	8c 83       	std	Y+4, r24	; 0x04
    2e18:	8c 81       	ldd	r24, Y+4	; 0x04
    2e1a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e1c:	fc 01       	movw	r30, r24
    2e1e:	85 81       	ldd	r24, Z+5	; 0x05
    2e20:	96 81       	ldd	r25, Z+6	; 0x06
    2e22:	fc 01       	movw	r30, r24
    2e24:	86 81       	ldd	r24, Z+6	; 0x06
    2e26:	97 81       	ldd	r25, Z+7	; 0x07
    2e28:	9b 83       	std	Y+3, r25	; 0x03
    2e2a:	8a 83       	std	Y+2, r24	; 0x02
    2e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e30:	0c 96       	adiw	r24, 0x0c	; 12
    2e32:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2e36:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxSchedulerSuspended>
    2e3a:	88 23       	and	r24, r24
    2e3c:	69 f5       	brne	.+90     	; 0x2e98 <xTaskRemoveFromEventList+0x92>
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	02 96       	adiw	r24, 0x02	; 2
    2e44:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    2e48:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	96 89       	ldd	r25, Z+22	; 0x16
    2e50:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    2e54:	89 17       	cp	r24, r25
    2e56:	30 f4       	brcc	.+12     	; 0x2e64 <xTaskRemoveFromEventList+0x5e>
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	fc 01       	movw	r30, r24
    2e5e:	86 89       	ldd	r24, Z+22	; 0x16
    2e60:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    2e64:	8a 81       	ldd	r24, Y+2	; 0x02
    2e66:	9b 81       	ldd	r25, Y+3	; 0x03
    2e68:	ac 01       	movw	r20, r24
    2e6a:	4e 5f       	subi	r20, 0xFE	; 254
    2e6c:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
    2e72:	fc 01       	movw	r30, r24
    2e74:	86 89       	ldd	r24, Z+22	; 0x16
    2e76:	28 2f       	mov	r18, r24
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	c9 01       	movw	r24, r18
    2e7c:	88 0f       	add	r24, r24
    2e7e:	99 1f       	adc	r25, r25
    2e80:	88 0f       	add	r24, r24
    2e82:	99 1f       	adc	r25, r25
    2e84:	88 0f       	add	r24, r24
    2e86:	99 1f       	adc	r25, r25
    2e88:	82 0f       	add	r24, r18
    2e8a:	93 1f       	adc	r25, r19
    2e8c:	8c 58       	subi	r24, 0x8C	; 140
    2e8e:	9a 4f       	sbci	r25, 0xFA	; 250
    2e90:	ba 01       	movw	r22, r20
    2e92:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    2e96:	08 c0       	rjmp	.+16     	; 0x2ea8 <xTaskRemoveFromEventList+0xa2>
    2e98:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e9c:	0c 96       	adiw	r24, 0x0c	; 12
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	8e ea       	ldi	r24, 0xAE	; 174
    2ea2:	95 e0       	ldi	r25, 0x05	; 5
    2ea4:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    2ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    2eaa:	9b 81       	ldd	r25, Y+3	; 0x03
    2eac:	fc 01       	movw	r30, r24
    2eae:	26 89       	ldd	r18, Z+22	; 0x16
    2eb0:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    2eb4:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    2eb8:	fc 01       	movw	r30, r24
    2eba:	86 89       	ldd	r24, Z+22	; 0x16
    2ebc:	82 17       	cp	r24, r18
    2ebe:	30 f4       	brcc	.+12     	; 0x2ecc <xTaskRemoveFromEventList+0xc6>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	89 83       	std	Y+1, r24	; 0x01
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <xYieldPending>
    2eca:	01 c0       	rjmp	.+2      	; 0x2ece <xTaskRemoveFromEventList+0xc8>
    2ecc:	19 82       	std	Y+1, r1	; 0x01
    2ece:	89 81       	ldd	r24, Y+1	; 0x01
    2ed0:	0f 90       	pop	r0
    2ed2:	0f 90       	pop	r0
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	08 95       	ret

00002ee0 <vTaskSetTimeOutState>:
    2ee0:	cf 93       	push	r28
    2ee2:	df 93       	push	r29
    2ee4:	00 d0       	rcall	.+0      	; 0x2ee6 <vTaskSetTimeOutState+0x6>
    2ee6:	cd b7       	in	r28, 0x3d	; 61
    2ee8:	de b7       	in	r29, 0x3e	; 62
    2eea:	9a 83       	std	Y+2, r25	; 0x02
    2eec:	89 83       	std	Y+1, r24	; 0x01
    2eee:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <xNumOfOverflows>
    2ef2:	89 81       	ldd	r24, Y+1	; 0x01
    2ef4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ef6:	fc 01       	movw	r30, r24
    2ef8:	20 83       	st	Z, r18
    2efa:	20 91 c2 05 	lds	r18, 0x05C2	; 0x8005c2 <xTickCount>
    2efe:	30 91 c3 05 	lds	r19, 0x05C3	; 0x8005c3 <xTickCount+0x1>
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	fc 01       	movw	r30, r24
    2f08:	32 83       	std	Z+2, r19	; 0x02
    2f0a:	21 83       	std	Z+1, r18	; 0x01
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	df 91       	pop	r29
    2f12:	cf 91       	pop	r28
    2f14:	08 95       	ret

00002f16 <xTaskCheckForTimeOut>:
    2f16:	cf 93       	push	r28
    2f18:	df 93       	push	r29
    2f1a:	cd b7       	in	r28, 0x3d	; 61
    2f1c:	de b7       	in	r29, 0x3e	; 62
    2f1e:	27 97       	sbiw	r28, 0x07	; 7
    2f20:	0f b6       	in	r0, 0x3f	; 63
    2f22:	f8 94       	cli
    2f24:	de bf       	out	0x3e, r29	; 62
    2f26:	0f be       	out	0x3f, r0	; 63
    2f28:	cd bf       	out	0x3d, r28	; 61
    2f2a:	9d 83       	std	Y+5, r25	; 0x05
    2f2c:	8c 83       	std	Y+4, r24	; 0x04
    2f2e:	7f 83       	std	Y+7, r23	; 0x07
    2f30:	6e 83       	std	Y+6, r22	; 0x06
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	0f 92       	push	r0
    2f38:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <xTickCount>
    2f3c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <xTickCount+0x1>
    2f40:	9b 83       	std	Y+3, r25	; 0x03
    2f42:	8a 83       	std	Y+2, r24	; 0x02
    2f44:	8c 81       	ldd	r24, Y+4	; 0x04
    2f46:	9d 81       	ldd	r25, Y+5	; 0x05
    2f48:	fc 01       	movw	r30, r24
    2f4a:	90 81       	ld	r25, Z
    2f4c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNumOfOverflows>
    2f50:	98 17       	cp	r25, r24
    2f52:	69 f0       	breq	.+26     	; 0x2f6e <xTaskCheckForTimeOut+0x58>
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	fc 01       	movw	r30, r24
    2f5a:	21 81       	ldd	r18, Z+1	; 0x01
    2f5c:	32 81       	ldd	r19, Z+2	; 0x02
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	82 17       	cp	r24, r18
    2f64:	93 07       	cpc	r25, r19
    2f66:	18 f0       	brcs	.+6      	; 0x2f6e <xTaskCheckForTimeOut+0x58>
    2f68:	81 e0       	ldi	r24, 0x01	; 1
    2f6a:	89 83       	std	Y+1, r24	; 0x01
    2f6c:	30 c0       	rjmp	.+96     	; 0x2fce <xTaskCheckForTimeOut+0xb8>
    2f6e:	8c 81       	ldd	r24, Y+4	; 0x04
    2f70:	9d 81       	ldd	r25, Y+5	; 0x05
    2f72:	fc 01       	movw	r30, r24
    2f74:	81 81       	ldd	r24, Z+1	; 0x01
    2f76:	92 81       	ldd	r25, Z+2	; 0x02
    2f78:	2a 81       	ldd	r18, Y+2	; 0x02
    2f7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2f7c:	28 1b       	sub	r18, r24
    2f7e:	39 0b       	sbc	r19, r25
    2f80:	8e 81       	ldd	r24, Y+6	; 0x06
    2f82:	9f 81       	ldd	r25, Y+7	; 0x07
    2f84:	fc 01       	movw	r30, r24
    2f86:	80 81       	ld	r24, Z
    2f88:	91 81       	ldd	r25, Z+1	; 0x01
    2f8a:	28 17       	cp	r18, r24
    2f8c:	39 07       	cpc	r19, r25
    2f8e:	e8 f4       	brcc	.+58     	; 0x2fca <xTaskCheckForTimeOut+0xb4>
    2f90:	8e 81       	ldd	r24, Y+6	; 0x06
    2f92:	9f 81       	ldd	r25, Y+7	; 0x07
    2f94:	fc 01       	movw	r30, r24
    2f96:	20 81       	ld	r18, Z
    2f98:	31 81       	ldd	r19, Z+1	; 0x01
    2f9a:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9c:	9d 81       	ldd	r25, Y+5	; 0x05
    2f9e:	fc 01       	movw	r30, r24
    2fa0:	41 81       	ldd	r20, Z+1	; 0x01
    2fa2:	52 81       	ldd	r21, Z+2	; 0x02
    2fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa6:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa8:	ba 01       	movw	r22, r20
    2faa:	68 1b       	sub	r22, r24
    2fac:	79 0b       	sbc	r23, r25
    2fae:	cb 01       	movw	r24, r22
    2fb0:	28 0f       	add	r18, r24
    2fb2:	39 1f       	adc	r19, r25
    2fb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2fb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb8:	fc 01       	movw	r30, r24
    2fba:	31 83       	std	Z+1, r19	; 0x01
    2fbc:	20 83       	st	Z, r18
    2fbe:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc0:	9d 81       	ldd	r25, Y+5	; 0x05
    2fc2:	0e 94 70 17 	call	0x2ee0	; 0x2ee0 <vTaskSetTimeOutState>
    2fc6:	19 82       	std	Y+1, r1	; 0x01
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <xTaskCheckForTimeOut+0xb8>
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	89 83       	std	Y+1, r24	; 0x01
    2fce:	0f 90       	pop	r0
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	27 96       	adiw	r28, 0x07	; 7
    2fd6:	0f b6       	in	r0, 0x3f	; 63
    2fd8:	f8 94       	cli
    2fda:	de bf       	out	0x3e, r29	; 62
    2fdc:	0f be       	out	0x3f, r0	; 63
    2fde:	cd bf       	out	0x3d, r28	; 61
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	08 95       	ret

00002fe6 <vTaskMissedYield>:
    2fe6:	cf 93       	push	r28
    2fe8:	df 93       	push	r29
    2fea:	cd b7       	in	r28, 0x3d	; 61
    2fec:	de b7       	in	r29, 0x3e	; 62
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <xYieldPending>
    2ff4:	df 91       	pop	r29
    2ff6:	cf 91       	pop	r28
    2ff8:	08 95       	ret

00002ffa <prvIdleTask>:
    2ffa:	cf 93       	push	r28
    2ffc:	df 93       	push	r29
    2ffe:	00 d0       	rcall	.+0      	; 0x3000 <prvIdleTask+0x6>
    3000:	cd b7       	in	r28, 0x3d	; 61
    3002:	de b7       	in	r29, 0x3e	; 62
    3004:	9a 83       	std	Y+2, r25	; 0x02
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	0e 94 4c 18 	call	0x3098	; 0x3098 <prvCheckTasksWaitingTermination>
    300c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <pxReadyTasksLists>
    3010:	82 30       	cpi	r24, 0x02	; 2
    3012:	10 f0       	brcs	.+4      	; 0x3018 <prvIdleTask+0x1e>
    3014:	0e 94 ce 09 	call	0x139c	; 0x139c <vPortYield>
    3018:	0e 94 58 04 	call	0x8b0	; 0x8b0 <vApplicationIdleHook>
    301c:	f5 cf       	rjmp	.-22     	; 0x3008 <prvIdleTask+0xe>

0000301e <prvInitialiseTaskLists>:
    301e:	cf 93       	push	r28
    3020:	df 93       	push	r29
    3022:	1f 92       	push	r1
    3024:	cd b7       	in	r28, 0x3d	; 61
    3026:	de b7       	in	r29, 0x3e	; 62
    3028:	19 82       	std	Y+1, r1	; 0x01
    302a:	13 c0       	rjmp	.+38     	; 0x3052 <prvInitialiseTaskLists+0x34>
    302c:	89 81       	ldd	r24, Y+1	; 0x01
    302e:	28 2f       	mov	r18, r24
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	c9 01       	movw	r24, r18
    3034:	88 0f       	add	r24, r24
    3036:	99 1f       	adc	r25, r25
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	82 0f       	add	r24, r18
    3042:	93 1f       	adc	r25, r19
    3044:	8c 58       	subi	r24, 0x8C	; 140
    3046:	9a 4f       	sbci	r25, 0xFA	; 250
    3048:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	8f 5f       	subi	r24, 0xFF	; 255
    3050:	89 83       	std	Y+1, r24	; 0x01
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	84 30       	cpi	r24, 0x04	; 4
    3056:	50 f3       	brcs	.-44     	; 0x302c <prvInitialiseTaskLists+0xe>
    3058:	88 e9       	ldi	r24, 0x98	; 152
    305a:	95 e0       	ldi	r25, 0x05	; 5
    305c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    3060:	81 ea       	ldi	r24, 0xA1	; 161
    3062:	95 e0       	ldi	r25, 0x05	; 5
    3064:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    3068:	8e ea       	ldi	r24, 0xAE	; 174
    306a:	95 e0       	ldi	r25, 0x05	; 5
    306c:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    3070:	87 eb       	ldi	r24, 0xB7	; 183
    3072:	95 e0       	ldi	r25, 0x05	; 5
    3074:	0e 94 8e 06 	call	0xd1c	; 0xd1c <vListInitialise>
    3078:	88 e9       	ldi	r24, 0x98	; 152
    307a:	95 e0       	ldi	r25, 0x05	; 5
    307c:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxDelayedTaskList+0x1>
    3080:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxDelayedTaskList>
    3084:	81 ea       	ldi	r24, 0xA1	; 161
    3086:	95 e0       	ldi	r25, 0x05	; 5
    3088:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <pxOverflowDelayedTaskList+0x1>
    308c:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <pxOverflowDelayedTaskList>
    3090:	0f 90       	pop	r0
    3092:	df 91       	pop	r29
    3094:	cf 91       	pop	r28
    3096:	08 95       	ret

00003098 <prvCheckTasksWaitingTermination>:
    3098:	cf 93       	push	r28
    309a:	df 93       	push	r29
    309c:	00 d0       	rcall	.+0      	; 0x309e <prvCheckTasksWaitingTermination+0x6>
    309e:	1f 92       	push	r1
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    30a4:	2f c0       	rjmp	.+94     	; 0x3104 <prvCheckTasksWaitingTermination+0x6c>
    30a6:	0e 94 cd 14 	call	0x299a	; 0x299a <vTaskSuspendAll>
    30aa:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <xTasksWaitingTermination>
    30ae:	81 e0       	ldi	r24, 0x01	; 1
    30b0:	99 23       	and	r25, r25
    30b2:	09 f0       	breq	.+2      	; 0x30b6 <prvCheckTasksWaitingTermination+0x1e>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	0e 94 d9 14 	call	0x29b2	; 0x29b2 <xTaskResumeAll>
    30bc:	89 81       	ldd	r24, Y+1	; 0x01
    30be:	88 23       	and	r24, r24
    30c0:	09 f5       	brne	.+66     	; 0x3104 <prvCheckTasksWaitingTermination+0x6c>
    30c2:	0f b6       	in	r0, 0x3f	; 63
    30c4:	f8 94       	cli
    30c6:	0f 92       	push	r0
    30c8:	80 91 bc 05 	lds	r24, 0x05BC	; 0x8005bc <xTasksWaitingTermination+0x5>
    30cc:	90 91 bd 05 	lds	r25, 0x05BD	; 0x8005bd <xTasksWaitingTermination+0x6>
    30d0:	fc 01       	movw	r30, r24
    30d2:	86 81       	ldd	r24, Z+6	; 0x06
    30d4:	97 81       	ldd	r25, Z+7	; 0x07
    30d6:	9b 83       	std	Y+3, r25	; 0x03
    30d8:	8a 83       	std	Y+2, r24	; 0x02
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	02 96       	adiw	r24, 0x02	; 2
    30e0:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    30e4:	80 91 c1 05 	lds	r24, 0x05C1	; 0x8005c1 <uxCurrentNumberOfTasks>
    30e8:	81 50       	subi	r24, 0x01	; 1
    30ea:	80 93 c1 05 	sts	0x05C1, r24	; 0x8005c1 <uxCurrentNumberOfTasks>
    30ee:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <uxDeletedTasksWaitingCleanUp>
    30f2:	81 50       	subi	r24, 0x01	; 1
    30f4:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <uxDeletedTasksWaitingCleanUp>
    30f8:	0f 90       	pop	r0
    30fa:	0f be       	out	0x3f, r0	; 63
    30fc:	8a 81       	ldd	r24, Y+2	; 0x02
    30fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3100:	0e 94 8c 18 	call	0x3118	; 0x3118 <prvDeleteTCB>
    3104:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <uxDeletedTasksWaitingCleanUp>
    3108:	88 23       	and	r24, r24
    310a:	69 f6       	brne	.-102    	; 0x30a6 <prvCheckTasksWaitingTermination+0xe>
    310c:	0f 90       	pop	r0
    310e:	0f 90       	pop	r0
    3110:	0f 90       	pop	r0
    3112:	df 91       	pop	r29
    3114:	cf 91       	pop	r28
    3116:	08 95       	ret

00003118 <prvDeleteTCB>:
    3118:	cf 93       	push	r28
    311a:	df 93       	push	r29
    311c:	00 d0       	rcall	.+0      	; 0x311e <prvDeleteTCB+0x6>
    311e:	cd b7       	in	r28, 0x3d	; 61
    3120:	de b7       	in	r29, 0x3e	; 62
    3122:	9a 83       	std	Y+2, r25	; 0x02
    3124:	89 83       	std	Y+1, r24	; 0x01
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	fc 01       	movw	r30, r24
    312c:	87 89       	ldd	r24, Z+23	; 0x17
    312e:	90 8d       	ldd	r25, Z+24	; 0x18
    3130:	0e 94 3d 0b 	call	0x167a	; 0x167a <vPortFree>
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	9a 81       	ldd	r25, Y+2	; 0x02
    3138:	0e 94 3d 0b 	call	0x167a	; 0x167a <vPortFree>
    313c:	0f 90       	pop	r0
    313e:	0f 90       	pop	r0
    3140:	df 91       	pop	r29
    3142:	cf 91       	pop	r28
    3144:	08 95       	ret

00003146 <prvResetNextTaskUnblockTime>:
    3146:	cf 93       	push	r28
    3148:	df 93       	push	r29
    314a:	00 d0       	rcall	.+0      	; 0x314c <prvResetNextTaskUnblockTime+0x6>
    314c:	cd b7       	in	r28, 0x3d	; 61
    314e:	de b7       	in	r29, 0x3e	; 62
    3150:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    3154:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    3158:	fc 01       	movw	r30, r24
    315a:	80 81       	ld	r24, Z
    315c:	88 23       	and	r24, r24
    315e:	39 f4       	brne	.+14     	; 0x316e <prvResetNextTaskUnblockTime+0x28>
    3160:	8f ef       	ldi	r24, 0xFF	; 255
    3162:	9f ef       	ldi	r25, 0xFF	; 255
    3164:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    3168:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    316c:	15 c0       	rjmp	.+42     	; 0x3198 <prvResetNextTaskUnblockTime+0x52>
    316e:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    3172:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    3176:	fc 01       	movw	r30, r24
    3178:	85 81       	ldd	r24, Z+5	; 0x05
    317a:	96 81       	ldd	r25, Z+6	; 0x06
    317c:	fc 01       	movw	r30, r24
    317e:	86 81       	ldd	r24, Z+6	; 0x06
    3180:	97 81       	ldd	r25, Z+7	; 0x07
    3182:	9a 83       	std	Y+2, r25	; 0x02
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	89 81       	ldd	r24, Y+1	; 0x01
    3188:	9a 81       	ldd	r25, Y+2	; 0x02
    318a:	fc 01       	movw	r30, r24
    318c:	82 81       	ldd	r24, Z+2	; 0x02
    318e:	93 81       	ldd	r25, Z+3	; 0x03
    3190:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    3194:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>
    3198:	0f 90       	pop	r0
    319a:	0f 90       	pop	r0
    319c:	df 91       	pop	r29
    319e:	cf 91       	pop	r28
    31a0:	08 95       	ret

000031a2 <vTaskPriorityInherit>:
    31a2:	cf 93       	push	r28
    31a4:	df 93       	push	r29
    31a6:	00 d0       	rcall	.+0      	; 0x31a8 <vTaskPriorityInherit+0x6>
    31a8:	00 d0       	rcall	.+0      	; 0x31aa <vTaskPriorityInherit+0x8>
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	9c 83       	std	Y+4, r25	; 0x04
    31b0:	8b 83       	std	Y+3, r24	; 0x03
    31b2:	8b 81       	ldd	r24, Y+3	; 0x03
    31b4:	9c 81       	ldd	r25, Y+4	; 0x04
    31b6:	9a 83       	std	Y+2, r25	; 0x02
    31b8:	89 83       	std	Y+1, r24	; 0x01
    31ba:	8b 81       	ldd	r24, Y+3	; 0x03
    31bc:	9c 81       	ldd	r25, Y+4	; 0x04
    31be:	89 2b       	or	r24, r25
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <vTaskPriorityInherit+0x22>
    31c2:	7f c0       	rjmp	.+254    	; 0x32c2 <vTaskPriorityInherit+0x120>
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	fc 01       	movw	r30, r24
    31ca:	26 89       	ldd	r18, Z+22	; 0x16
    31cc:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    31d0:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    31d4:	fc 01       	movw	r30, r24
    31d6:	86 89       	ldd	r24, Z+22	; 0x16
    31d8:	28 17       	cp	r18, r24
    31da:	08 f0       	brcs	.+2      	; 0x31de <vTaskPriorityInherit+0x3c>
    31dc:	72 c0       	rjmp	.+228    	; 0x32c2 <vTaskPriorityInherit+0x120>
    31de:	89 81       	ldd	r24, Y+1	; 0x01
    31e0:	9a 81       	ldd	r25, Y+2	; 0x02
    31e2:	fc 01       	movw	r30, r24
    31e4:	84 85       	ldd	r24, Z+12	; 0x0c
    31e6:	95 85       	ldd	r25, Z+13	; 0x0d
    31e8:	99 23       	and	r25, r25
    31ea:	8c f0       	brlt	.+34     	; 0x320e <vTaskPriorityInherit+0x6c>
    31ec:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    31f0:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    31f4:	fc 01       	movw	r30, r24
    31f6:	86 89       	ldd	r24, Z+22	; 0x16
    31f8:	88 2f       	mov	r24, r24
    31fa:	90 e0       	ldi	r25, 0x00	; 0
    31fc:	24 e0       	ldi	r18, 0x04	; 4
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	28 1b       	sub	r18, r24
    3202:	39 0b       	sbc	r19, r25
    3204:	89 81       	ldd	r24, Y+1	; 0x01
    3206:	9a 81       	ldd	r25, Y+2	; 0x02
    3208:	fc 01       	movw	r30, r24
    320a:	35 87       	std	Z+13, r19	; 0x0d
    320c:	24 87       	std	Z+12, r18	; 0x0c
    320e:	89 81       	ldd	r24, Y+1	; 0x01
    3210:	9a 81       	ldd	r25, Y+2	; 0x02
    3212:	fc 01       	movw	r30, r24
    3214:	42 85       	ldd	r20, Z+10	; 0x0a
    3216:	53 85       	ldd	r21, Z+11	; 0x0b
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	9a 81       	ldd	r25, Y+2	; 0x02
    321c:	fc 01       	movw	r30, r24
    321e:	86 89       	ldd	r24, Z+22	; 0x16
    3220:	28 2f       	mov	r18, r24
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	c9 01       	movw	r24, r18
    3226:	88 0f       	add	r24, r24
    3228:	99 1f       	adc	r25, r25
    322a:	88 0f       	add	r24, r24
    322c:	99 1f       	adc	r25, r25
    322e:	88 0f       	add	r24, r24
    3230:	99 1f       	adc	r25, r25
    3232:	82 0f       	add	r24, r18
    3234:	93 1f       	adc	r25, r19
    3236:	8c 58       	subi	r24, 0x8C	; 140
    3238:	9a 4f       	sbci	r25, 0xFA	; 250
    323a:	48 17       	cp	r20, r24
    323c:	59 07       	cpc	r21, r25
    323e:	b9 f5       	brne	.+110    	; 0x32ae <vTaskPriorityInherit+0x10c>
    3240:	89 81       	ldd	r24, Y+1	; 0x01
    3242:	9a 81       	ldd	r25, Y+2	; 0x02
    3244:	02 96       	adiw	r24, 0x02	; 2
    3246:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    324a:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    324e:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    3252:	fc 01       	movw	r30, r24
    3254:	26 89       	ldd	r18, Z+22	; 0x16
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	9a 81       	ldd	r25, Y+2	; 0x02
    325a:	fc 01       	movw	r30, r24
    325c:	26 8b       	std	Z+22, r18	; 0x16
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	fc 01       	movw	r30, r24
    3264:	96 89       	ldd	r25, Z+22	; 0x16
    3266:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    326a:	89 17       	cp	r24, r25
    326c:	30 f4       	brcc	.+12     	; 0x327a <vTaskPriorityInherit+0xd8>
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	fc 01       	movw	r30, r24
    3274:	86 89       	ldd	r24, Z+22	; 0x16
    3276:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    327a:	89 81       	ldd	r24, Y+1	; 0x01
    327c:	9a 81       	ldd	r25, Y+2	; 0x02
    327e:	ac 01       	movw	r20, r24
    3280:	4e 5f       	subi	r20, 0xFE	; 254
    3282:	5f 4f       	sbci	r21, 0xFF	; 255
    3284:	89 81       	ldd	r24, Y+1	; 0x01
    3286:	9a 81       	ldd	r25, Y+2	; 0x02
    3288:	fc 01       	movw	r30, r24
    328a:	86 89       	ldd	r24, Z+22	; 0x16
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	c9 01       	movw	r24, r18
    3292:	88 0f       	add	r24, r24
    3294:	99 1f       	adc	r25, r25
    3296:	88 0f       	add	r24, r24
    3298:	99 1f       	adc	r25, r25
    329a:	88 0f       	add	r24, r24
    329c:	99 1f       	adc	r25, r25
    329e:	82 0f       	add	r24, r18
    32a0:	93 1f       	adc	r25, r19
    32a2:	8c 58       	subi	r24, 0x8C	; 140
    32a4:	9a 4f       	sbci	r25, 0xFA	; 250
    32a6:	ba 01       	movw	r22, r20
    32a8:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    32ac:	0a c0       	rjmp	.+20     	; 0x32c2 <vTaskPriorityInherit+0x120>
    32ae:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    32b2:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    32b6:	fc 01       	movw	r30, r24
    32b8:	26 89       	ldd	r18, Z+22	; 0x16
    32ba:	89 81       	ldd	r24, Y+1	; 0x01
    32bc:	9a 81       	ldd	r25, Y+2	; 0x02
    32be:	fc 01       	movw	r30, r24
    32c0:	26 8b       	std	Z+22, r18	; 0x16
    32c2:	0f 90       	pop	r0
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	df 91       	pop	r29
    32cc:	cf 91       	pop	r28
    32ce:	08 95       	ret

000032d0 <xTaskPriorityDisinherit>:
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <xTaskPriorityDisinherit+0x6>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <xTaskPriorityDisinherit+0x8>
    32d8:	1f 92       	push	r1
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	9d 83       	std	Y+5, r25	; 0x05
    32e0:	8c 83       	std	Y+4, r24	; 0x04
    32e2:	8c 81       	ldd	r24, Y+4	; 0x04
    32e4:	9d 81       	ldd	r25, Y+5	; 0x05
    32e6:	9b 83       	std	Y+3, r25	; 0x03
    32e8:	8a 83       	std	Y+2, r24	; 0x02
    32ea:	19 82       	std	Y+1, r1	; 0x01
    32ec:	8c 81       	ldd	r24, Y+4	; 0x04
    32ee:	9d 81       	ldd	r25, Y+5	; 0x05
    32f0:	89 2b       	or	r24, r25
    32f2:	09 f4       	brne	.+2      	; 0x32f6 <xTaskPriorityDisinherit+0x26>
    32f4:	61 c0       	rjmp	.+194    	; 0x33b8 <xTaskPriorityDisinherit+0xe8>
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	fc 01       	movw	r30, r24
    32fc:	84 a1       	ldd	r24, Z+36	; 0x24
    32fe:	2f ef       	ldi	r18, 0xFF	; 255
    3300:	28 0f       	add	r18, r24
    3302:	8a 81       	ldd	r24, Y+2	; 0x02
    3304:	9b 81       	ldd	r25, Y+3	; 0x03
    3306:	fc 01       	movw	r30, r24
    3308:	24 a3       	std	Z+36, r18	; 0x24
    330a:	8a 81       	ldd	r24, Y+2	; 0x02
    330c:	9b 81       	ldd	r25, Y+3	; 0x03
    330e:	fc 01       	movw	r30, r24
    3310:	26 89       	ldd	r18, Z+22	; 0x16
    3312:	8a 81       	ldd	r24, Y+2	; 0x02
    3314:	9b 81       	ldd	r25, Y+3	; 0x03
    3316:	fc 01       	movw	r30, r24
    3318:	83 a1       	ldd	r24, Z+35	; 0x23
    331a:	28 17       	cp	r18, r24
    331c:	09 f4       	brne	.+2      	; 0x3320 <xTaskPriorityDisinherit+0x50>
    331e:	4c c0       	rjmp	.+152    	; 0x33b8 <xTaskPriorityDisinherit+0xe8>
    3320:	8a 81       	ldd	r24, Y+2	; 0x02
    3322:	9b 81       	ldd	r25, Y+3	; 0x03
    3324:	fc 01       	movw	r30, r24
    3326:	84 a1       	ldd	r24, Z+36	; 0x24
    3328:	88 23       	and	r24, r24
    332a:	09 f0       	breq	.+2      	; 0x332e <xTaskPriorityDisinherit+0x5e>
    332c:	45 c0       	rjmp	.+138    	; 0x33b8 <xTaskPriorityDisinherit+0xe8>
    332e:	8a 81       	ldd	r24, Y+2	; 0x02
    3330:	9b 81       	ldd	r25, Y+3	; 0x03
    3332:	02 96       	adiw	r24, 0x02	; 2
    3334:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
    3338:	8a 81       	ldd	r24, Y+2	; 0x02
    333a:	9b 81       	ldd	r25, Y+3	; 0x03
    333c:	fc 01       	movw	r30, r24
    333e:	23 a1       	ldd	r18, Z+35	; 0x23
    3340:	8a 81       	ldd	r24, Y+2	; 0x02
    3342:	9b 81       	ldd	r25, Y+3	; 0x03
    3344:	fc 01       	movw	r30, r24
    3346:	26 8b       	std	Z+22, r18	; 0x16
    3348:	8a 81       	ldd	r24, Y+2	; 0x02
    334a:	9b 81       	ldd	r25, Y+3	; 0x03
    334c:	fc 01       	movw	r30, r24
    334e:	86 89       	ldd	r24, Z+22	; 0x16
    3350:	88 2f       	mov	r24, r24
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	24 e0       	ldi	r18, 0x04	; 4
    3356:	30 e0       	ldi	r19, 0x00	; 0
    3358:	28 1b       	sub	r18, r24
    335a:	39 0b       	sbc	r19, r25
    335c:	8a 81       	ldd	r24, Y+2	; 0x02
    335e:	9b 81       	ldd	r25, Y+3	; 0x03
    3360:	fc 01       	movw	r30, r24
    3362:	35 87       	std	Z+13, r19	; 0x0d
    3364:	24 87       	std	Z+12, r18	; 0x0c
    3366:	8a 81       	ldd	r24, Y+2	; 0x02
    3368:	9b 81       	ldd	r25, Y+3	; 0x03
    336a:	fc 01       	movw	r30, r24
    336c:	96 89       	ldd	r25, Z+22	; 0x16
    336e:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxTopReadyPriority>
    3372:	89 17       	cp	r24, r25
    3374:	30 f4       	brcc	.+12     	; 0x3382 <xTaskPriorityDisinherit+0xb2>
    3376:	8a 81       	ldd	r24, Y+2	; 0x02
    3378:	9b 81       	ldd	r25, Y+3	; 0x03
    337a:	fc 01       	movw	r30, r24
    337c:	86 89       	ldd	r24, Z+22	; 0x16
    337e:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxTopReadyPriority>
    3382:	8a 81       	ldd	r24, Y+2	; 0x02
    3384:	9b 81       	ldd	r25, Y+3	; 0x03
    3386:	ac 01       	movw	r20, r24
    3388:	4e 5f       	subi	r20, 0xFE	; 254
    338a:	5f 4f       	sbci	r21, 0xFF	; 255
    338c:	8a 81       	ldd	r24, Y+2	; 0x02
    338e:	9b 81       	ldd	r25, Y+3	; 0x03
    3390:	fc 01       	movw	r30, r24
    3392:	86 89       	ldd	r24, Z+22	; 0x16
    3394:	28 2f       	mov	r18, r24
    3396:	30 e0       	ldi	r19, 0x00	; 0
    3398:	c9 01       	movw	r24, r18
    339a:	88 0f       	add	r24, r24
    339c:	99 1f       	adc	r25, r25
    339e:	88 0f       	add	r24, r24
    33a0:	99 1f       	adc	r25, r25
    33a2:	88 0f       	add	r24, r24
    33a4:	99 1f       	adc	r25, r25
    33a6:	82 0f       	add	r24, r18
    33a8:	93 1f       	adc	r25, r19
    33aa:	8c 58       	subi	r24, 0x8C	; 140
    33ac:	9a 4f       	sbci	r25, 0xFA	; 250
    33ae:	ba 01       	movw	r22, r20
    33b0:	0e 94 d4 06 	call	0xda8	; 0xda8 <vListInsertEnd>
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	89 83       	std	Y+1, r24	; 0x01
    33b8:	89 81       	ldd	r24, Y+1	; 0x01
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	0f 90       	pop	r0
    33c0:	0f 90       	pop	r0
    33c2:	0f 90       	pop	r0
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <pvTaskIncrementMutexHeldCount>:
    33ca:	cf 93       	push	r28
    33cc:	df 93       	push	r29
    33ce:	cd b7       	in	r28, 0x3d	; 61
    33d0:	de b7       	in	r29, 0x3e	; 62
    33d2:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    33d6:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    33da:	89 2b       	or	r24, r25
    33dc:	49 f0       	breq	.+18     	; 0x33f0 <pvTaskIncrementMutexHeldCount+0x26>
    33de:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    33e2:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    33e6:	fc 01       	movw	r30, r24
    33e8:	24 a1       	ldd	r18, Z+36	; 0x24
    33ea:	2f 5f       	subi	r18, 0xFF	; 255
    33ec:	fc 01       	movw	r30, r24
    33ee:	24 a3       	std	Z+36, r18	; 0x24
    33f0:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    33f4:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    33f8:	df 91       	pop	r29
    33fa:	cf 91       	pop	r28
    33fc:	08 95       	ret

000033fe <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    33fe:	cf 93       	push	r28
    3400:	df 93       	push	r29
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
    3406:	27 97       	sbiw	r28, 0x07	; 7
    3408:	0f b6       	in	r0, 0x3f	; 63
    340a:	f8 94       	cli
    340c:	de bf       	out	0x3e, r29	; 62
    340e:	0f be       	out	0x3f, r0	; 63
    3410:	cd bf       	out	0x3d, r28	; 61
    3412:	9e 83       	std	Y+6, r25	; 0x06
    3414:	8d 83       	std	Y+5, r24	; 0x05
    3416:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3418:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <xTickCount>
    341c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <xTickCount+0x1>
    3420:	9a 83       	std	Y+2, r25	; 0x02
    3422:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3424:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    3428:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    342c:	02 96       	adiw	r24, 0x02	; 2
    342e:	0e 94 99 07 	call	0xf32	; 0xf32 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3432:	29 81       	ldd	r18, Y+1	; 0x01
    3434:	3a 81       	ldd	r19, Y+2	; 0x02
    3436:	8d 81       	ldd	r24, Y+5	; 0x05
    3438:	9e 81       	ldd	r25, Y+6	; 0x06
    343a:	82 0f       	add	r24, r18
    343c:	93 1f       	adc	r25, r19
    343e:	9c 83       	std	Y+4, r25	; 0x04
    3440:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3442:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    3446:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    344a:	2b 81       	ldd	r18, Y+3	; 0x03
    344c:	3c 81       	ldd	r19, Y+4	; 0x04
    344e:	fc 01       	movw	r30, r24
    3450:	33 83       	std	Z+3, r19	; 0x03
    3452:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3454:	2b 81       	ldd	r18, Y+3	; 0x03
    3456:	3c 81       	ldd	r19, Y+4	; 0x04
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	28 17       	cp	r18, r24
    345e:	39 07       	cpc	r19, r25
    3460:	78 f4       	brcc	.+30     	; 0x3480 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3462:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    3466:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    346a:	9c 01       	movw	r18, r24
    346c:	2e 5f       	subi	r18, 0xFE	; 254
    346e:	3f 4f       	sbci	r19, 0xFF	; 255
    3470:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <pxOverflowDelayedTaskList>
    3474:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <pxOverflowDelayedTaskList+0x1>
    3478:	b9 01       	movw	r22, r18
    347a:	0e 94 22 07 	call	0xe44	; 0xe44 <vListInsert>
    347e:	1d c0       	rjmp	.+58     	; 0x34ba <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3480:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxCurrentTCB>
    3484:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <pxCurrentTCB+0x1>
    3488:	9c 01       	movw	r18, r24
    348a:	2e 5f       	subi	r18, 0xFE	; 254
    348c:	3f 4f       	sbci	r19, 0xFF	; 255
    348e:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxDelayedTaskList>
    3492:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxDelayedTaskList+0x1>
    3496:	b9 01       	movw	r22, r18
    3498:	0e 94 22 07 	call	0xe44	; 0xe44 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    349c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xNextTaskUnblockTime>
    34a0:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xNextTaskUnblockTime+0x1>
    34a4:	2b 81       	ldd	r18, Y+3	; 0x03
    34a6:	3c 81       	ldd	r19, Y+4	; 0x04
    34a8:	28 17       	cp	r18, r24
    34aa:	39 07       	cpc	r19, r25
    34ac:	30 f4       	brcc	.+12     	; 0x34ba <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    34ae:	8b 81       	ldd	r24, Y+3	; 0x03
    34b0:	9c 81       	ldd	r25, Y+4	; 0x04
    34b2:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xNextTaskUnblockTime+0x1>
    34b6:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    34ba:	27 96       	adiw	r28, 0x07	; 7
    34bc:	0f b6       	in	r0, 0x3f	; 63
    34be:	f8 94       	cli
    34c0:	de bf       	out	0x3e, r29	; 62
    34c2:	0f be       	out	0x3f, r0	; 63
    34c4:	cd bf       	out	0x3d, r28	; 61
    34c6:	df 91       	pop	r29
    34c8:	cf 91       	pop	r28
    34ca:	08 95       	ret

000034cc <__divmodhi4>:
    34cc:	97 fb       	bst	r25, 7
    34ce:	07 2e       	mov	r0, r23
    34d0:	16 f4       	brtc	.+4      	; 0x34d6 <__divmodhi4+0xa>
    34d2:	00 94       	com	r0
    34d4:	07 d0       	rcall	.+14     	; 0x34e4 <__divmodhi4_neg1>
    34d6:	77 fd       	sbrc	r23, 7
    34d8:	09 d0       	rcall	.+18     	; 0x34ec <__divmodhi4_neg2>
    34da:	0e 94 a2 1a 	call	0x3544	; 0x3544 <__udivmodhi4>
    34de:	07 fc       	sbrc	r0, 7
    34e0:	05 d0       	rcall	.+10     	; 0x34ec <__divmodhi4_neg2>
    34e2:	3e f4       	brtc	.+14     	; 0x34f2 <__divmodhi4_exit>

000034e4 <__divmodhi4_neg1>:
    34e4:	90 95       	com	r25
    34e6:	81 95       	neg	r24
    34e8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ea:	08 95       	ret

000034ec <__divmodhi4_neg2>:
    34ec:	70 95       	com	r23
    34ee:	61 95       	neg	r22
    34f0:	7f 4f       	sbci	r23, 0xFF	; 255

000034f2 <__divmodhi4_exit>:
    34f2:	08 95       	ret

000034f4 <__udivmodsi4>:
    34f4:	a1 e2       	ldi	r26, 0x21	; 33
    34f6:	1a 2e       	mov	r1, r26
    34f8:	aa 1b       	sub	r26, r26
    34fa:	bb 1b       	sub	r27, r27
    34fc:	fd 01       	movw	r30, r26
    34fe:	0d c0       	rjmp	.+26     	; 0x351a <__udivmodsi4_ep>

00003500 <__udivmodsi4_loop>:
    3500:	aa 1f       	adc	r26, r26
    3502:	bb 1f       	adc	r27, r27
    3504:	ee 1f       	adc	r30, r30
    3506:	ff 1f       	adc	r31, r31
    3508:	a2 17       	cp	r26, r18
    350a:	b3 07       	cpc	r27, r19
    350c:	e4 07       	cpc	r30, r20
    350e:	f5 07       	cpc	r31, r21
    3510:	20 f0       	brcs	.+8      	; 0x351a <__udivmodsi4_ep>
    3512:	a2 1b       	sub	r26, r18
    3514:	b3 0b       	sbc	r27, r19
    3516:	e4 0b       	sbc	r30, r20
    3518:	f5 0b       	sbc	r31, r21

0000351a <__udivmodsi4_ep>:
    351a:	66 1f       	adc	r22, r22
    351c:	77 1f       	adc	r23, r23
    351e:	88 1f       	adc	r24, r24
    3520:	99 1f       	adc	r25, r25
    3522:	1a 94       	dec	r1
    3524:	69 f7       	brne	.-38     	; 0x3500 <__udivmodsi4_loop>
    3526:	60 95       	com	r22
    3528:	70 95       	com	r23
    352a:	80 95       	com	r24
    352c:	90 95       	com	r25
    352e:	9b 01       	movw	r18, r22
    3530:	ac 01       	movw	r20, r24
    3532:	bd 01       	movw	r22, r26
    3534:	cf 01       	movw	r24, r30
    3536:	08 95       	ret

00003538 <__tablejump2__>:
    3538:	ee 0f       	add	r30, r30
    353a:	ff 1f       	adc	r31, r31
    353c:	05 90       	lpm	r0, Z+
    353e:	f4 91       	lpm	r31, Z
    3540:	e0 2d       	mov	r30, r0
    3542:	09 94       	ijmp

00003544 <__udivmodhi4>:
    3544:	aa 1b       	sub	r26, r26
    3546:	bb 1b       	sub	r27, r27
    3548:	51 e1       	ldi	r21, 0x11	; 17
    354a:	07 c0       	rjmp	.+14     	; 0x355a <__udivmodhi4_ep>

0000354c <__udivmodhi4_loop>:
    354c:	aa 1f       	adc	r26, r26
    354e:	bb 1f       	adc	r27, r27
    3550:	a6 17       	cp	r26, r22
    3552:	b7 07       	cpc	r27, r23
    3554:	10 f0       	brcs	.+4      	; 0x355a <__udivmodhi4_ep>
    3556:	a6 1b       	sub	r26, r22
    3558:	b7 0b       	sbc	r27, r23

0000355a <__udivmodhi4_ep>:
    355a:	88 1f       	adc	r24, r24
    355c:	99 1f       	adc	r25, r25
    355e:	5a 95       	dec	r21
    3560:	a9 f7       	brne	.-22     	; 0x354c <__udivmodhi4_loop>
    3562:	80 95       	com	r24
    3564:	90 95       	com	r25
    3566:	bc 01       	movw	r22, r24
    3568:	cd 01       	movw	r24, r26
    356a:	08 95       	ret

0000356c <malloc>:
    356c:	cf 93       	push	r28
    356e:	df 93       	push	r29
    3570:	82 30       	cpi	r24, 0x02	; 2
    3572:	91 05       	cpc	r25, r1
    3574:	10 f4       	brcc	.+4      	; 0x357a <malloc+0xe>
    3576:	82 e0       	ldi	r24, 0x02	; 2
    3578:	90 e0       	ldi	r25, 0x00	; 0
    357a:	e0 91 d1 05 	lds	r30, 0x05D1	; 0x8005d1 <__flp>
    357e:	f0 91 d2 05 	lds	r31, 0x05D2	; 0x8005d2 <__flp+0x1>
    3582:	20 e0       	ldi	r18, 0x00	; 0
    3584:	30 e0       	ldi	r19, 0x00	; 0
    3586:	c0 e0       	ldi	r28, 0x00	; 0
    3588:	d0 e0       	ldi	r29, 0x00	; 0
    358a:	30 97       	sbiw	r30, 0x00	; 0
    358c:	11 f1       	breq	.+68     	; 0x35d2 <malloc+0x66>
    358e:	40 81       	ld	r20, Z
    3590:	51 81       	ldd	r21, Z+1	; 0x01
    3592:	48 17       	cp	r20, r24
    3594:	59 07       	cpc	r21, r25
    3596:	c0 f0       	brcs	.+48     	; 0x35c8 <malloc+0x5c>
    3598:	48 17       	cp	r20, r24
    359a:	59 07       	cpc	r21, r25
    359c:	61 f4       	brne	.+24     	; 0x35b6 <malloc+0x4a>
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 97       	sbiw	r28, 0x00	; 0
    35a4:	19 f0       	breq	.+6      	; 0x35ac <malloc+0x40>
    35a6:	9b 83       	std	Y+3, r25	; 0x03
    35a8:	8a 83       	std	Y+2, r24	; 0x02
    35aa:	2b c0       	rjmp	.+86     	; 0x3602 <malloc+0x96>
    35ac:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <__flp+0x1>
    35b0:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <__flp>
    35b4:	26 c0       	rjmp	.+76     	; 0x3602 <malloc+0x96>
    35b6:	21 15       	cp	r18, r1
    35b8:	31 05       	cpc	r19, r1
    35ba:	19 f0       	breq	.+6      	; 0x35c2 <malloc+0x56>
    35bc:	42 17       	cp	r20, r18
    35be:	53 07       	cpc	r21, r19
    35c0:	18 f4       	brcc	.+6      	; 0x35c8 <malloc+0x5c>
    35c2:	9a 01       	movw	r18, r20
    35c4:	be 01       	movw	r22, r28
    35c6:	df 01       	movw	r26, r30
    35c8:	ef 01       	movw	r28, r30
    35ca:	02 80       	ldd	r0, Z+2	; 0x02
    35cc:	f3 81       	ldd	r31, Z+3	; 0x03
    35ce:	e0 2d       	mov	r30, r0
    35d0:	dc cf       	rjmp	.-72     	; 0x358a <malloc+0x1e>
    35d2:	21 15       	cp	r18, r1
    35d4:	31 05       	cpc	r19, r1
    35d6:	09 f1       	breq	.+66     	; 0x361a <malloc+0xae>
    35d8:	28 1b       	sub	r18, r24
    35da:	39 0b       	sbc	r19, r25
    35dc:	24 30       	cpi	r18, 0x04	; 4
    35de:	31 05       	cpc	r19, r1
    35e0:	90 f4       	brcc	.+36     	; 0x3606 <malloc+0x9a>
    35e2:	12 96       	adiw	r26, 0x02	; 2
    35e4:	8d 91       	ld	r24, X+
    35e6:	9c 91       	ld	r25, X
    35e8:	13 97       	sbiw	r26, 0x03	; 3
    35ea:	61 15       	cp	r22, r1
    35ec:	71 05       	cpc	r23, r1
    35ee:	21 f0       	breq	.+8      	; 0x35f8 <malloc+0x8c>
    35f0:	fb 01       	movw	r30, r22
    35f2:	93 83       	std	Z+3, r25	; 0x03
    35f4:	82 83       	std	Z+2, r24	; 0x02
    35f6:	04 c0       	rjmp	.+8      	; 0x3600 <malloc+0x94>
    35f8:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <__flp+0x1>
    35fc:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <__flp>
    3600:	fd 01       	movw	r30, r26
    3602:	32 96       	adiw	r30, 0x02	; 2
    3604:	44 c0       	rjmp	.+136    	; 0x368e <malloc+0x122>
    3606:	fd 01       	movw	r30, r26
    3608:	e2 0f       	add	r30, r18
    360a:	f3 1f       	adc	r31, r19
    360c:	81 93       	st	Z+, r24
    360e:	91 93       	st	Z+, r25
    3610:	22 50       	subi	r18, 0x02	; 2
    3612:	31 09       	sbc	r19, r1
    3614:	2d 93       	st	X+, r18
    3616:	3c 93       	st	X, r19
    3618:	3a c0       	rjmp	.+116    	; 0x368e <malloc+0x122>
    361a:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <__brkval>
    361e:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <__brkval+0x1>
    3622:	23 2b       	or	r18, r19
    3624:	41 f4       	brne	.+16     	; 0x3636 <malloc+0xca>
    3626:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    362a:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    362e:	30 93 d0 05 	sts	0x05D0, r19	; 0x8005d0 <__brkval+0x1>
    3632:	20 93 cf 05 	sts	0x05CF, r18	; 0x8005cf <__brkval>
    3636:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    363a:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    363e:	21 15       	cp	r18, r1
    3640:	31 05       	cpc	r19, r1
    3642:	41 f4       	brne	.+16     	; 0x3654 <malloc+0xe8>
    3644:	2d b7       	in	r18, 0x3d	; 61
    3646:	3e b7       	in	r19, 0x3e	; 62
    3648:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    364c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3650:	24 1b       	sub	r18, r20
    3652:	35 0b       	sbc	r19, r21
    3654:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <__brkval>
    3658:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <__brkval+0x1>
    365c:	e2 17       	cp	r30, r18
    365e:	f3 07       	cpc	r31, r19
    3660:	a0 f4       	brcc	.+40     	; 0x368a <malloc+0x11e>
    3662:	2e 1b       	sub	r18, r30
    3664:	3f 0b       	sbc	r19, r31
    3666:	28 17       	cp	r18, r24
    3668:	39 07       	cpc	r19, r25
    366a:	78 f0       	brcs	.+30     	; 0x368a <malloc+0x11e>
    366c:	ac 01       	movw	r20, r24
    366e:	4e 5f       	subi	r20, 0xFE	; 254
    3670:	5f 4f       	sbci	r21, 0xFF	; 255
    3672:	24 17       	cp	r18, r20
    3674:	35 07       	cpc	r19, r21
    3676:	48 f0       	brcs	.+18     	; 0x368a <malloc+0x11e>
    3678:	4e 0f       	add	r20, r30
    367a:	5f 1f       	adc	r21, r31
    367c:	50 93 d0 05 	sts	0x05D0, r21	; 0x8005d0 <__brkval+0x1>
    3680:	40 93 cf 05 	sts	0x05CF, r20	; 0x8005cf <__brkval>
    3684:	81 93       	st	Z+, r24
    3686:	91 93       	st	Z+, r25
    3688:	02 c0       	rjmp	.+4      	; 0x368e <malloc+0x122>
    368a:	e0 e0       	ldi	r30, 0x00	; 0
    368c:	f0 e0       	ldi	r31, 0x00	; 0
    368e:	cf 01       	movw	r24, r30
    3690:	df 91       	pop	r29
    3692:	cf 91       	pop	r28
    3694:	08 95       	ret

00003696 <free>:
    3696:	0f 93       	push	r16
    3698:	1f 93       	push	r17
    369a:	cf 93       	push	r28
    369c:	df 93       	push	r29
    369e:	00 97       	sbiw	r24, 0x00	; 0
    36a0:	09 f4       	brne	.+2      	; 0x36a4 <free+0xe>
    36a2:	8c c0       	rjmp	.+280    	; 0x37bc <free+0x126>
    36a4:	fc 01       	movw	r30, r24
    36a6:	32 97       	sbiw	r30, 0x02	; 2
    36a8:	13 82       	std	Z+3, r1	; 0x03
    36aa:	12 82       	std	Z+2, r1	; 0x02
    36ac:	00 91 d1 05 	lds	r16, 0x05D1	; 0x8005d1 <__flp>
    36b0:	10 91 d2 05 	lds	r17, 0x05D2	; 0x8005d2 <__flp+0x1>
    36b4:	01 15       	cp	r16, r1
    36b6:	11 05       	cpc	r17, r1
    36b8:	81 f4       	brne	.+32     	; 0x36da <free+0x44>
    36ba:	20 81       	ld	r18, Z
    36bc:	31 81       	ldd	r19, Z+1	; 0x01
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <__brkval>
    36c6:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <__brkval+0x1>
    36ca:	28 17       	cp	r18, r24
    36cc:	39 07       	cpc	r19, r25
    36ce:	79 f5       	brne	.+94     	; 0x372e <free+0x98>
    36d0:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <__brkval+0x1>
    36d4:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <__brkval>
    36d8:	71 c0       	rjmp	.+226    	; 0x37bc <free+0x126>
    36da:	d8 01       	movw	r26, r16
    36dc:	40 e0       	ldi	r20, 0x00	; 0
    36de:	50 e0       	ldi	r21, 0x00	; 0
    36e0:	ae 17       	cp	r26, r30
    36e2:	bf 07       	cpc	r27, r31
    36e4:	50 f4       	brcc	.+20     	; 0x36fa <free+0x64>
    36e6:	12 96       	adiw	r26, 0x02	; 2
    36e8:	2d 91       	ld	r18, X+
    36ea:	3c 91       	ld	r19, X
    36ec:	13 97       	sbiw	r26, 0x03	; 3
    36ee:	ad 01       	movw	r20, r26
    36f0:	21 15       	cp	r18, r1
    36f2:	31 05       	cpc	r19, r1
    36f4:	09 f1       	breq	.+66     	; 0x3738 <free+0xa2>
    36f6:	d9 01       	movw	r26, r18
    36f8:	f3 cf       	rjmp	.-26     	; 0x36e0 <free+0x4a>
    36fa:	9d 01       	movw	r18, r26
    36fc:	da 01       	movw	r26, r20
    36fe:	33 83       	std	Z+3, r19	; 0x03
    3700:	22 83       	std	Z+2, r18	; 0x02
    3702:	60 81       	ld	r22, Z
    3704:	71 81       	ldd	r23, Z+1	; 0x01
    3706:	86 0f       	add	r24, r22
    3708:	97 1f       	adc	r25, r23
    370a:	82 17       	cp	r24, r18
    370c:	93 07       	cpc	r25, r19
    370e:	69 f4       	brne	.+26     	; 0x372a <free+0x94>
    3710:	ec 01       	movw	r28, r24
    3712:	28 81       	ld	r18, Y
    3714:	39 81       	ldd	r19, Y+1	; 0x01
    3716:	26 0f       	add	r18, r22
    3718:	37 1f       	adc	r19, r23
    371a:	2e 5f       	subi	r18, 0xFE	; 254
    371c:	3f 4f       	sbci	r19, 0xFF	; 255
    371e:	31 83       	std	Z+1, r19	; 0x01
    3720:	20 83       	st	Z, r18
    3722:	8a 81       	ldd	r24, Y+2	; 0x02
    3724:	9b 81       	ldd	r25, Y+3	; 0x03
    3726:	93 83       	std	Z+3, r25	; 0x03
    3728:	82 83       	std	Z+2, r24	; 0x02
    372a:	45 2b       	or	r20, r21
    372c:	29 f4       	brne	.+10     	; 0x3738 <free+0xa2>
    372e:	f0 93 d2 05 	sts	0x05D2, r31	; 0x8005d2 <__flp+0x1>
    3732:	e0 93 d1 05 	sts	0x05D1, r30	; 0x8005d1 <__flp>
    3736:	42 c0       	rjmp	.+132    	; 0x37bc <free+0x126>
    3738:	13 96       	adiw	r26, 0x03	; 3
    373a:	fc 93       	st	X, r31
    373c:	ee 93       	st	-X, r30
    373e:	12 97       	sbiw	r26, 0x02	; 2
    3740:	ed 01       	movw	r28, r26
    3742:	49 91       	ld	r20, Y+
    3744:	59 91       	ld	r21, Y+
    3746:	9e 01       	movw	r18, r28
    3748:	24 0f       	add	r18, r20
    374a:	35 1f       	adc	r19, r21
    374c:	e2 17       	cp	r30, r18
    374e:	f3 07       	cpc	r31, r19
    3750:	71 f4       	brne	.+28     	; 0x376e <free+0xd8>
    3752:	80 81       	ld	r24, Z
    3754:	91 81       	ldd	r25, Z+1	; 0x01
    3756:	84 0f       	add	r24, r20
    3758:	95 1f       	adc	r25, r21
    375a:	02 96       	adiw	r24, 0x02	; 2
    375c:	11 96       	adiw	r26, 0x01	; 1
    375e:	9c 93       	st	X, r25
    3760:	8e 93       	st	-X, r24
    3762:	82 81       	ldd	r24, Z+2	; 0x02
    3764:	93 81       	ldd	r25, Z+3	; 0x03
    3766:	13 96       	adiw	r26, 0x03	; 3
    3768:	9c 93       	st	X, r25
    376a:	8e 93       	st	-X, r24
    376c:	12 97       	sbiw	r26, 0x02	; 2
    376e:	e0 e0       	ldi	r30, 0x00	; 0
    3770:	f0 e0       	ldi	r31, 0x00	; 0
    3772:	d8 01       	movw	r26, r16
    3774:	12 96       	adiw	r26, 0x02	; 2
    3776:	8d 91       	ld	r24, X+
    3778:	9c 91       	ld	r25, X
    377a:	13 97       	sbiw	r26, 0x03	; 3
    377c:	00 97       	sbiw	r24, 0x00	; 0
    377e:	19 f0       	breq	.+6      	; 0x3786 <free+0xf0>
    3780:	f8 01       	movw	r30, r16
    3782:	8c 01       	movw	r16, r24
    3784:	f6 cf       	rjmp	.-20     	; 0x3772 <free+0xdc>
    3786:	8d 91       	ld	r24, X+
    3788:	9c 91       	ld	r25, X
    378a:	98 01       	movw	r18, r16
    378c:	2e 5f       	subi	r18, 0xFE	; 254
    378e:	3f 4f       	sbci	r19, 0xFF	; 255
    3790:	82 0f       	add	r24, r18
    3792:	93 1f       	adc	r25, r19
    3794:	20 91 cf 05 	lds	r18, 0x05CF	; 0x8005cf <__brkval>
    3798:	30 91 d0 05 	lds	r19, 0x05D0	; 0x8005d0 <__brkval+0x1>
    379c:	28 17       	cp	r18, r24
    379e:	39 07       	cpc	r19, r25
    37a0:	69 f4       	brne	.+26     	; 0x37bc <free+0x126>
    37a2:	30 97       	sbiw	r30, 0x00	; 0
    37a4:	29 f4       	brne	.+10     	; 0x37b0 <free+0x11a>
    37a6:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <__flp+0x1>
    37aa:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <__flp>
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <free+0x11e>
    37b0:	13 82       	std	Z+3, r1	; 0x03
    37b2:	12 82       	std	Z+2, r1	; 0x02
    37b4:	10 93 d0 05 	sts	0x05D0, r17	; 0x8005d0 <__brkval+0x1>
    37b8:	00 93 cf 05 	sts	0x05CF, r16	; 0x8005cf <__brkval>
    37bc:	df 91       	pop	r29
    37be:	cf 91       	pop	r28
    37c0:	1f 91       	pop	r17
    37c2:	0f 91       	pop	r16
    37c4:	08 95       	ret

000037c6 <do_rand>:
    37c6:	8f 92       	push	r8
    37c8:	9f 92       	push	r9
    37ca:	af 92       	push	r10
    37cc:	bf 92       	push	r11
    37ce:	cf 92       	push	r12
    37d0:	df 92       	push	r13
    37d2:	ef 92       	push	r14
    37d4:	ff 92       	push	r15
    37d6:	cf 93       	push	r28
    37d8:	df 93       	push	r29
    37da:	ec 01       	movw	r28, r24
    37dc:	68 81       	ld	r22, Y
    37de:	79 81       	ldd	r23, Y+1	; 0x01
    37e0:	8a 81       	ldd	r24, Y+2	; 0x02
    37e2:	9b 81       	ldd	r25, Y+3	; 0x03
    37e4:	61 15       	cp	r22, r1
    37e6:	71 05       	cpc	r23, r1
    37e8:	81 05       	cpc	r24, r1
    37ea:	91 05       	cpc	r25, r1
    37ec:	21 f4       	brne	.+8      	; 0x37f6 <do_rand+0x30>
    37ee:	64 e2       	ldi	r22, 0x24	; 36
    37f0:	79 ed       	ldi	r23, 0xD9	; 217
    37f2:	8b e5       	ldi	r24, 0x5B	; 91
    37f4:	97 e0       	ldi	r25, 0x07	; 7
    37f6:	2d e1       	ldi	r18, 0x1D	; 29
    37f8:	33 ef       	ldi	r19, 0xF3	; 243
    37fa:	41 e0       	ldi	r20, 0x01	; 1
    37fc:	50 e0       	ldi	r21, 0x00	; 0
    37fe:	0e 94 4f 1c 	call	0x389e	; 0x389e <__divmodsi4>
    3802:	49 01       	movw	r8, r18
    3804:	5a 01       	movw	r10, r20
    3806:	9b 01       	movw	r18, r22
    3808:	ac 01       	movw	r20, r24
    380a:	a7 ea       	ldi	r26, 0xA7	; 167
    380c:	b1 e4       	ldi	r27, 0x41	; 65
    380e:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <__muluhisi3>
    3812:	6b 01       	movw	r12, r22
    3814:	7c 01       	movw	r14, r24
    3816:	ac ee       	ldi	r26, 0xEC	; 236
    3818:	b4 ef       	ldi	r27, 0xF4	; 244
    381a:	a5 01       	movw	r20, r10
    381c:	94 01       	movw	r18, r8
    381e:	0e 94 7c 1c 	call	0x38f8	; 0x38f8 <__mulohisi3>
    3822:	dc 01       	movw	r26, r24
    3824:	cb 01       	movw	r24, r22
    3826:	8c 0d       	add	r24, r12
    3828:	9d 1d       	adc	r25, r13
    382a:	ae 1d       	adc	r26, r14
    382c:	bf 1d       	adc	r27, r15
    382e:	b7 ff       	sbrs	r27, 7
    3830:	03 c0       	rjmp	.+6      	; 0x3838 <do_rand+0x72>
    3832:	01 97       	sbiw	r24, 0x01	; 1
    3834:	a1 09       	sbc	r26, r1
    3836:	b0 48       	sbci	r27, 0x80	; 128
    3838:	88 83       	st	Y, r24
    383a:	99 83       	std	Y+1, r25	; 0x01
    383c:	aa 83       	std	Y+2, r26	; 0x02
    383e:	bb 83       	std	Y+3, r27	; 0x03
    3840:	9f 77       	andi	r25, 0x7F	; 127
    3842:	df 91       	pop	r29
    3844:	cf 91       	pop	r28
    3846:	ff 90       	pop	r15
    3848:	ef 90       	pop	r14
    384a:	df 90       	pop	r13
    384c:	cf 90       	pop	r12
    384e:	bf 90       	pop	r11
    3850:	af 90       	pop	r10
    3852:	9f 90       	pop	r9
    3854:	8f 90       	pop	r8
    3856:	08 95       	ret

00003858 <rand_r>:
    3858:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <do_rand>
    385c:	08 95       	ret

0000385e <rand>:
    385e:	86 e0       	ldi	r24, 0x06	; 6
    3860:	91 e0       	ldi	r25, 0x01	; 1
    3862:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <do_rand>
    3866:	08 95       	ret

00003868 <srand>:
    3868:	a0 e0       	ldi	r26, 0x00	; 0
    386a:	b0 e0       	ldi	r27, 0x00	; 0
    386c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3870:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3874:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3878:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    387c:	08 95       	ret

0000387e <memcpy>:
    387e:	fb 01       	movw	r30, r22
    3880:	dc 01       	movw	r26, r24
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <memcpy+0xa>
    3884:	01 90       	ld	r0, Z+
    3886:	0d 92       	st	X+, r0
    3888:	41 50       	subi	r20, 0x01	; 1
    388a:	50 40       	sbci	r21, 0x00	; 0
    388c:	d8 f7       	brcc	.-10     	; 0x3884 <memcpy+0x6>
    388e:	08 95       	ret

00003890 <memset>:
    3890:	dc 01       	movw	r26, r24
    3892:	01 c0       	rjmp	.+2      	; 0x3896 <memset+0x6>
    3894:	6d 93       	st	X+, r22
    3896:	41 50       	subi	r20, 0x01	; 1
    3898:	50 40       	sbci	r21, 0x00	; 0
    389a:	e0 f7       	brcc	.-8      	; 0x3894 <memset+0x4>
    389c:	08 95       	ret

0000389e <__divmodsi4>:
    389e:	05 2e       	mov	r0, r21
    38a0:	97 fb       	bst	r25, 7
    38a2:	1e f4       	brtc	.+6      	; 0x38aa <__divmodsi4+0xc>
    38a4:	00 94       	com	r0
    38a6:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__negsi2>
    38aa:	57 fd       	sbrc	r21, 7
    38ac:	07 d0       	rcall	.+14     	; 0x38bc <__divmodsi4_neg2>
    38ae:	0e 94 7a 1a 	call	0x34f4	; 0x34f4 <__udivmodsi4>
    38b2:	07 fc       	sbrc	r0, 7
    38b4:	03 d0       	rcall	.+6      	; 0x38bc <__divmodsi4_neg2>
    38b6:	4e f4       	brtc	.+18     	; 0x38ca <__divmodsi4_exit>
    38b8:	0c 94 66 1c 	jmp	0x38cc	; 0x38cc <__negsi2>

000038bc <__divmodsi4_neg2>:
    38bc:	50 95       	com	r21
    38be:	40 95       	com	r20
    38c0:	30 95       	com	r19
    38c2:	21 95       	neg	r18
    38c4:	3f 4f       	sbci	r19, 0xFF	; 255
    38c6:	4f 4f       	sbci	r20, 0xFF	; 255
    38c8:	5f 4f       	sbci	r21, 0xFF	; 255

000038ca <__divmodsi4_exit>:
    38ca:	08 95       	ret

000038cc <__negsi2>:
    38cc:	90 95       	com	r25
    38ce:	80 95       	com	r24
    38d0:	70 95       	com	r23
    38d2:	61 95       	neg	r22
    38d4:	7f 4f       	sbci	r23, 0xFF	; 255
    38d6:	8f 4f       	sbci	r24, 0xFF	; 255
    38d8:	9f 4f       	sbci	r25, 0xFF	; 255
    38da:	08 95       	ret

000038dc <__muluhisi3>:
    38dc:	0e 94 81 1c 	call	0x3902	; 0x3902 <__umulhisi3>
    38e0:	a5 9f       	mul	r26, r21
    38e2:	90 0d       	add	r25, r0
    38e4:	b4 9f       	mul	r27, r20
    38e6:	90 0d       	add	r25, r0
    38e8:	a4 9f       	mul	r26, r20
    38ea:	80 0d       	add	r24, r0
    38ec:	91 1d       	adc	r25, r1
    38ee:	11 24       	eor	r1, r1
    38f0:	08 95       	ret

000038f2 <__mulshisi3>:
    38f2:	b7 ff       	sbrs	r27, 7
    38f4:	0c 94 6e 1c 	jmp	0x38dc	; 0x38dc <__muluhisi3>

000038f8 <__mulohisi3>:
    38f8:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <__muluhisi3>
    38fc:	82 1b       	sub	r24, r18
    38fe:	93 0b       	sbc	r25, r19
    3900:	08 95       	ret

00003902 <__umulhisi3>:
    3902:	a2 9f       	mul	r26, r18
    3904:	b0 01       	movw	r22, r0
    3906:	b3 9f       	mul	r27, r19
    3908:	c0 01       	movw	r24, r0
    390a:	a3 9f       	mul	r26, r19
    390c:	70 0d       	add	r23, r0
    390e:	81 1d       	adc	r24, r1
    3910:	11 24       	eor	r1, r1
    3912:	91 1d       	adc	r25, r1
    3914:	b2 9f       	mul	r27, r18
    3916:	70 0d       	add	r23, r0
    3918:	81 1d       	adc	r24, r1
    391a:	11 24       	eor	r1, r1
    391c:	91 1d       	adc	r25, r1
    391e:	08 95       	ret

00003920 <_exit>:
    3920:	f8 94       	cli

00003922 <__stop_program>:
    3922:	ff cf       	rjmp	.-2      	; 0x3922 <__stop_program>
