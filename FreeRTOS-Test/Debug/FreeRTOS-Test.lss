
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005e  00800100  00003e9e  00003f32  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003e9e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000048b  0080015e  0080015e  00003f90  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003f90  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fc0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004f0  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000039cf  00000000  00000000  000044f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba6  00000000  00000000  00007ebf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000036eb  00000000  00000000  00008a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000136c  00000000  00000000  0000c150  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000197f  00000000  00000000  0000d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000298d  00000000  00000000  0000ee3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000460  00000000  00000000  000117c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 12 0d 	jmp	0x1a24	; 0x1a24 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 50 07 	jmp	0xea0	; 0xea0 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 37 0e 	jmp	0x1c6e	; 0x1c6e <__vector_20>
      54:	0c 94 8f 0e 	jmp	0x1d1e	; 0x1d1e <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 e9 0e 	jmp	0x1dd2	; 0x1dd2 <__vector_28>
      74:	0c 94 41 0f 	jmp	0x1e82	; 0x1e82 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	64 04       	cpc	r6, r4
      7e:	6d 04       	cpc	r6, r13
      80:	80 04       	cpc	r8, r0
      82:	8b 04       	cpc	r8, r11
      84:	9e 04       	cpc	r9, r14
      86:	a7 04       	cpc	r10, r7
      88:	ba 04       	cpc	r11, r10
      8a:	c5 04       	cpc	r12, r5

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e9       	ldi	r30, 0x9E	; 158
      a0:	fe e3       	ldi	r31, 0x3E	; 62
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ae 35       	cpi	r26, 0x5E	; 94
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ae e5       	ldi	r26, 0x5E	; 94
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a9 3e       	cpi	r26, 0xE9	; 233
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <main>
      c2:	0c 94 4d 1f 	jmp	0x3e9a	; 0x3e9a <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <serial_task>:
		com_send_bytes(frame->data,frame->size);
		frame = NULL;
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
	}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	68 97       	sbiw	r28, 0x18	; 24
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
      de:	98 8f       	std	Y+24, r25	; 0x18
      e0:	8f 8b       	std	Y+23, r24	; 0x17
      e2:	19 82       	std	Y+1, r1	; 0x01
      e4:	1a 86       	std	Y+10, r1	; 0x0a
      e6:	81 e6       	ldi	r24, 0x61	; 97
      e8:	8e 83       	std	Y+6, r24	; 0x06
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	8f 83       	std	Y+7, r24	; 0x07
      ee:	1b 82       	std	Y+3, r1	; 0x03
      f0:	1a 82       	std	Y+2, r1	; 0x02
      f2:	1c 82       	std	Y+4, r1	; 0x04
      f4:	0e 94 16 18 	call	0x302c	; 0x302c <xTaskGetTickCount>
      f8:	99 87       	std	Y+9, r25	; 0x09
      fa:	88 87       	std	Y+8, r24	; 0x08
      fc:	66 c0       	rjmp	.+204    	; 0x1ca <serial_task+0x100>
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	88 2f       	mov	r24, r24
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	91 05       	cpc	r25, r1
     108:	71 f0       	breq	.+28     	; 0x126 <serial_task+0x5c>
     10a:	82 30       	cpi	r24, 0x02	; 2
     10c:	91 05       	cpc	r25, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <serial_task+0x48>
     110:	4d c0       	rjmp	.+154    	; 0x1ac <serial_task+0xe2>
     112:	89 2b       	or	r24, r25
     114:	09 f0       	breq	.+2      	; 0x118 <serial_task+0x4e>
     116:	57 c0       	rjmp	.+174    	; 0x1c6 <serial_task+0xfc>
     118:	9a 85       	ldd	r25, Y+10	; 0x0a
     11a:	8e 81       	ldd	r24, Y+6	; 0x06
     11c:	98 17       	cp	r25, r24
     11e:	11 f4       	brne	.+4      	; 0x124 <serial_task+0x5a>
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	89 83       	std	Y+1, r24	; 0x01
     124:	52 c0       	rjmp	.+164    	; 0x1ca <serial_task+0x100>
     126:	9a 85       	ldd	r25, Y+10	; 0x0a
     128:	8e 81       	ldd	r24, Y+6	; 0x06
     12a:	98 17       	cp	r25, r24
     12c:	51 f5       	brne	.+84     	; 0x182 <serial_task+0xb8>
     12e:	8c 81       	ldd	r24, Y+4	; 0x04
     130:	8b 8b       	std	Y+19, r24	; 0x13
     132:	8c 81       	ldd	r24, Y+4	; 0x04
     134:	8d 83       	std	Y+5, r24	; 0x05
     136:	19 c0       	rjmp	.+50     	; 0x16a <serial_task+0xa0>
     138:	8d 81       	ldd	r24, Y+5	; 0x05
     13a:	88 2f       	mov	r24, r24
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	2a 81       	ldd	r18, Y+2	; 0x02
     142:	3b 81       	ldd	r19, Y+3	; 0x03
     144:	f9 01       	movw	r30, r18
     146:	40 81       	ld	r20, Z
     148:	9e 01       	movw	r18, r28
     14a:	25 5f       	subi	r18, 0xF5	; 245
     14c:	3f 4f       	sbci	r19, 0xFF	; 255
     14e:	82 0f       	add	r24, r18
     150:	93 1f       	adc	r25, r19
     152:	fc 01       	movw	r30, r24
     154:	40 83       	st	Z, r20
     156:	8a 81       	ldd	r24, Y+2	; 0x02
     158:	9b 81       	ldd	r25, Y+3	; 0x03
     15a:	fc 01       	movw	r30, r24
     15c:	81 81       	ldd	r24, Z+1	; 0x01
     15e:	92 81       	ldd	r25, Z+2	; 0x02
     160:	9b 83       	std	Y+3, r25	; 0x03
     162:	8a 83       	std	Y+2, r24	; 0x02
     164:	8d 81       	ldd	r24, Y+5	; 0x05
     166:	81 50       	subi	r24, 0x01	; 1
     168:	8d 83       	std	Y+5, r24	; 0x05
     16a:	8d 81       	ldd	r24, Y+5	; 0x05
     16c:	88 23       	and	r24, r24
     16e:	21 f7       	brne	.-56     	; 0x138 <serial_task+0x6e>
     170:	ce 01       	movw	r24, r28
     172:	0b 96       	adiw	r24, 0x0b	; 11
     174:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <frame+0x1>
     178:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <frame>
     17c:	1c 82       	std	Y+4, r1	; 0x04
     17e:	19 82       	std	Y+1, r1	; 0x01
     180:	14 c0       	rjmp	.+40     	; 0x1aa <serial_task+0xe0>
     182:	9a 85       	ldd	r25, Y+10	; 0x0a
     184:	8f 81       	ldd	r24, Y+7	; 0x07
     186:	98 17       	cp	r25, r24
     188:	19 f4       	brne	.+6      	; 0x190 <serial_task+0xc6>
     18a:	82 e0       	ldi	r24, 0x02	; 2
     18c:	89 83       	std	Y+1, r24	; 0x01
     18e:	0d c0       	rjmp	.+26     	; 0x1aa <serial_task+0xe0>
     190:	8a 85       	ldd	r24, Y+10	; 0x0a
     192:	8c 8b       	std	Y+20, r24	; 0x14
     194:	8a 81       	ldd	r24, Y+2	; 0x02
     196:	9b 81       	ldd	r25, Y+3	; 0x03
     198:	9e 8b       	std	Y+22, r25	; 0x16
     19a:	8d 8b       	std	Y+21, r24	; 0x15
     19c:	ce 01       	movw	r24, r28
     19e:	44 96       	adiw	r24, 0x14	; 20
     1a0:	9b 83       	std	Y+3, r25	; 0x03
     1a2:	8a 83       	std	Y+2, r24	; 0x02
     1a4:	8c 81       	ldd	r24, Y+4	; 0x04
     1a6:	8f 5f       	subi	r24, 0xFF	; 255
     1a8:	8c 83       	std	Y+4, r24	; 0x04
     1aa:	0f c0       	rjmp	.+30     	; 0x1ca <serial_task+0x100>
     1ac:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     1b0:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     1b4:	be 01       	movw	r22, r28
     1b6:	66 5f       	subi	r22, 0xF6	; 246
     1b8:	7f 4f       	sbci	r23, 0xFF	; 255
     1ba:	20 e0       	ldi	r18, 0x00	; 0
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
     1c4:	02 c0       	rjmp	.+4      	; 0x1ca <serial_task+0x100>
     1c6:	19 82       	std	Y+1, r1	; 0x01
     1c8:	00 00       	nop
     1ca:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     1ce:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     1d2:	be 01       	movw	r22, r28
     1d4:	66 5f       	subi	r22, 0xF6	; 246
     1d6:	7f 4f       	sbci	r23, 0xFF	; 255
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	40 e0       	ldi	r20, 0x00	; 0
     1dc:	50 e0       	ldi	r21, 0x00	; 0
     1de:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
     1e2:	88 23       	and	r24, r24
     1e4:	09 f0       	breq	.+2      	; 0x1e8 <serial_task+0x11e>
     1e6:	8b cf       	rjmp	.-234    	; 0xfe <serial_task+0x34>
     1e8:	ce 01       	movw	r24, r28
     1ea:	08 96       	adiw	r24, 0x08	; 8
     1ec:	64 e1       	ldi	r22, 0x14	; 20
     1ee:	70 e0       	ldi	r23, 0x00	; 0
     1f0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskDelayUntil>
     1f4:	83 cf       	rjmp	.-250    	; 0xfc <serial_task+0x32>

000001f6 <move_player>:
	
}

void move_player(uint8_t *position, uint8_t direction){
     1f6:	cf 93       	push	r28
     1f8:	df 93       	push	r29
     1fa:	00 d0       	rcall	.+0      	; 0x1fc <move_player+0x6>
     1fc:	00 d0       	rcall	.+0      	; 0x1fe <move_player+0x8>
     1fe:	1f 92       	push	r1
     200:	cd b7       	in	r28, 0x3d	; 61
     202:	de b7       	in	r29, 0x3e	; 62
     204:	9c 83       	std	Y+4, r25	; 0x04
     206:	8b 83       	std	Y+3, r24	; 0x03
     208:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
     20a:	85 e0       	ldi	r24, 0x05	; 5
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	9a 83       	std	Y+2, r25	; 0x02
     210:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	88 23       	and	r24, r24
     216:	81 f4       	brne	.+32     	; 0x238 <move_player+0x42>
		mask <<= *position;
     218:	8b 81       	ldd	r24, Y+3	; 0x03
     21a:	9c 81       	ldd	r25, Y+4	; 0x04
     21c:	fc 01       	movw	r30, r24
     21e:	80 81       	ld	r24, Z
     220:	28 2f       	mov	r18, r24
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	9a 81       	ldd	r25, Y+2	; 0x02
     228:	02 c0       	rjmp	.+4      	; 0x22e <move_player+0x38>
     22a:	88 0f       	add	r24, r24
     22c:	99 1f       	adc	r25, r25
     22e:	2a 95       	dec	r18
     230:	e2 f7       	brpl	.-8      	; 0x22a <move_player+0x34>
     232:	9a 83       	std	Y+2, r25	; 0x02
     234:	89 83       	std	Y+1, r24	; 0x01
     236:	12 c0       	rjmp	.+36     	; 0x25c <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     238:	8b 81       	ldd	r24, Y+3	; 0x03
     23a:	9c 81       	ldd	r25, Y+4	; 0x04
     23c:	fc 01       	movw	r30, r24
     23e:	80 81       	ld	r24, Z
     240:	88 2f       	mov	r24, r24
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	9c 01       	movw	r18, r24
     246:	21 50       	subi	r18, 0x01	; 1
     248:	31 09       	sbc	r19, r1
     24a:	89 81       	ldd	r24, Y+1	; 0x01
     24c:	9a 81       	ldd	r25, Y+2	; 0x02
     24e:	02 c0       	rjmp	.+4      	; 0x254 <move_player+0x5e>
     250:	88 0f       	add	r24, r24
     252:	99 1f       	adc	r25, r25
     254:	2a 95       	dec	r18
     256:	e2 f7       	brpl	.-8      	; 0x250 <move_player+0x5a>
     258:	9a 83       	std	Y+2, r25	; 0x02
     25a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     25c:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     260:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     264:	20 e0       	ldi	r18, 0x00	; 0
     266:	4a e0       	ldi	r20, 0x0A	; 10
     268:	50 e0       	ldi	r21, 0x00	; 0
     26a:	60 e0       	ldi	r22, 0x00	; 0
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
	col_value[0] ^= mask;
     272:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     276:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	9a 81       	ldd	r25, Y+2	; 0x02
     27e:	82 27       	eor	r24, r18
     280:	93 27       	eor	r25, r19
     282:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     286:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     28a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     28e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     292:	20 e0       	ldi	r18, 0x00	; 0
     294:	40 e0       	ldi	r20, 0x00	; 0
     296:	50 e0       	ldi	r21, 0x00	; 0
     298:	60 e0       	ldi	r22, 0x00	; 0
     29a:	70 e0       	ldi	r23, 0x00	; 0
     29c:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
}
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	0f 90       	pop	r0
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	df 91       	pop	r29
     2ac:	cf 91       	pop	r28
     2ae:	08 95       	ret

000002b0 <local_player_task>:

void local_player_task(void *pvParameters)
{
     2b0:	cf 93       	push	r28
     2b2:	df 93       	push	r29
     2b4:	00 d0       	rcall	.+0      	; 0x2b6 <local_player_task+0x6>
     2b6:	00 d0       	rcall	.+0      	; 0x2b8 <local_player_task+0x8>
     2b8:	cd b7       	in	r28, 0x3d	; 61
     2ba:	de b7       	in	r29, 0x3e	; 62
     2bc:	9c 83       	std	Y+4, r25	; 0x04
     2be:	8b 83       	std	Y+3, r24	; 0x03
	(void) pvParameters;
	
	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     2c0:	0e 94 16 18 	call	0x302c	; 0x302c <xTaskGetTickCount>
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     2c8:	86 e2       	ldi	r24, 0x26	; 38
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	fc 01       	movw	r30, r24
     2ce:	80 81       	ld	r24, Z
     2d0:	88 2f       	mov	r24, r24
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	80 74       	andi	r24, 0x40	; 64
     2d6:	99 27       	eor	r25, r25
     2d8:	89 2b       	or	r24, r25
     2da:	61 f5       	brne	.+88     	; 0x334 <local_player_task+0x84>
     2dc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     2e0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     2e4:	18 16       	cp	r1, r24
     2e6:	19 06       	cpc	r1, r25
     2e8:	2c f5       	brge	.+74     	; 0x334 <local_player_task+0x84>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     2ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     2ee:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	4a e0       	ldi	r20, 0x0A	; 10
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
			--player_position;
     300:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     304:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     308:	01 97       	sbiw	r24, 0x01	; 1
     30a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     30e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     312:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     316:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	40 e0       	ldi	r20, 0x00	; 0
     31e:	50 e0       	ldi	r21, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
			move_player(&player_position, 0);
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	8a e0       	ldi	r24, 0x0A	; 10
     32c:	91 e0       	ldi	r25, 0x01	; 1
     32e:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <move_player>
     332:	34 c0       	rjmp	.+104    	; 0x39c <local_player_task+0xec>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     334:	86 e2       	ldi	r24, 0x26	; 38
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	fc 01       	movw	r30, r24
     33a:	80 81       	ld	r24, Z
     33c:	88 2f       	mov	r24, r24
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	81 70       	andi	r24, 0x01	; 1
     342:	99 27       	eor	r25, r25
     344:	89 2b       	or	r24, r25
     346:	51 f5       	brne	.+84     	; 0x39c <local_player_task+0xec>
     348:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     34c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     350:	08 97       	sbiw	r24, 0x08	; 8
     352:	24 f5       	brge	.+72     	; 0x39c <local_player_task+0xec>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     354:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     358:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	4a e0       	ldi	r20, 0x0A	; 10
     360:	50 e0       	ldi	r21, 0x00	; 0
     362:	60 e0       	ldi	r22, 0x00	; 0
     364:	70 e0       	ldi	r23, 0x00	; 0
     366:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
			++player_position;
     36a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     36e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     372:	01 96       	adiw	r24, 0x01	; 1
     374:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     378:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     37c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     380:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	40 e0       	ldi	r20, 0x00	; 0
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
			move_player(&player_position, 1);
     392:	61 e0       	ldi	r22, 0x01	; 1
     394:	8a e0       	ldi	r24, 0x0A	; 10
     396:	91 e0       	ldi	r25, 0x01	; 1
     398:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     39c:	68 e2       	ldi	r22, 0x28	; 40
     39e:	70 e0       	ldi	r23, 0x00	; 0
     3a0:	ce 01       	movw	r24, r28
     3a2:	01 96       	adiw	r24, 0x01	; 1
     3a4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskDelayUntil>
	}	
     3a8:	8f cf       	rjmp	.-226    	; 0x2c8 <local_player_task+0x18>

000003aa <move_player2>:
	
}

void move_player2(uint8_t *position, uint8_t direction){
     3aa:	cf 93       	push	r28
     3ac:	df 93       	push	r29
     3ae:	00 d0       	rcall	.+0      	; 0x3b0 <move_player2+0x6>
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <move_player2+0x8>
     3b2:	1f 92       	push	r1
     3b4:	cd b7       	in	r28, 0x3d	; 61
     3b6:	de b7       	in	r29, 0x3e	; 62
     3b8:	9c 83       	std	Y+4, r25	; 0x04
     3ba:	8b 83       	std	Y+3, r24	; 0x03
     3bc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
     3be:	85 e0       	ldi	r24, 0x05	; 5
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	9a 83       	std	Y+2, r25	; 0x02
     3c4:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
     3c6:	8d 81       	ldd	r24, Y+5	; 0x05
     3c8:	88 23       	and	r24, r24
     3ca:	81 f4       	brne	.+32     	; 0x3ec <move_player2+0x42>
		mask <<= *position;
     3cc:	8b 81       	ldd	r24, Y+3	; 0x03
     3ce:	9c 81       	ldd	r25, Y+4	; 0x04
     3d0:	fc 01       	movw	r30, r24
     3d2:	80 81       	ld	r24, Z
     3d4:	28 2f       	mov	r18, r24
     3d6:	30 e0       	ldi	r19, 0x00	; 0
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	9a 81       	ldd	r25, Y+2	; 0x02
     3dc:	02 c0       	rjmp	.+4      	; 0x3e2 <move_player2+0x38>
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	2a 95       	dec	r18
     3e4:	e2 f7       	brpl	.-8      	; 0x3de <move_player2+0x34>
     3e6:	9a 83       	std	Y+2, r25	; 0x02
     3e8:	89 83       	std	Y+1, r24	; 0x01
     3ea:	12 c0       	rjmp	.+36     	; 0x410 <__FUSE_REGION_LENGTH__+0x10>
	}
	else{
		mask <<= *position-1;
     3ec:	8b 81       	ldd	r24, Y+3	; 0x03
     3ee:	9c 81       	ldd	r25, Y+4	; 0x04
     3f0:	fc 01       	movw	r30, r24
     3f2:	80 81       	ld	r24, Z
     3f4:	88 2f       	mov	r24, r24
     3f6:	90 e0       	ldi	r25, 0x00	; 0
     3f8:	9c 01       	movw	r18, r24
     3fa:	21 50       	subi	r18, 0x01	; 1
     3fc:	31 09       	sbc	r19, r1
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	02 c0       	rjmp	.+4      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	2a 95       	dec	r18
     40a:	e2 f7       	brpl	.-8      	; 0x404 <__FUSE_REGION_LENGTH__+0x4>
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_13_mutex, (TickType_t) 1);
     410:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_13_mutex>
     414:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_13_mutex+0x1>
     418:	20 e0       	ldi	r18, 0x00	; 0
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	50 e0       	ldi	r21, 0x00	; 0
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
	col_value[13] ^= mask;
     426:	20 91 26 01 	lds	r18, 0x0126	; 0x800126 <col_value+0x1a>
     42a:	30 91 27 01 	lds	r19, 0x0127	; 0x800127 <col_value+0x1b>
     42e:	89 81       	ldd	r24, Y+1	; 0x01
     430:	9a 81       	ldd	r25, Y+2	; 0x02
     432:	82 27       	eor	r24, r18
     434:	93 27       	eor	r25, r19
     436:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <col_value+0x1b>
     43a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <col_value+0x1a>
	xSemaphoreGive(_col_13_mutex);
     43e:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_13_mutex>
     442:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_13_mutex+0x1>
     446:	20 e0       	ldi	r18, 0x00	; 0
     448:	40 e0       	ldi	r20, 0x00	; 0
     44a:	50 e0       	ldi	r21, 0x00	; 0
     44c:	60 e0       	ldi	r22, 0x00	; 0
     44e:	70 e0       	ldi	r23, 0x00	; 0
     450:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
}
     454:	0f 90       	pop	r0
     456:	0f 90       	pop	r0
     458:	0f 90       	pop	r0
     45a:	0f 90       	pop	r0
     45c:	0f 90       	pop	r0
     45e:	df 91       	pop	r29
     460:	cf 91       	pop	r28
     462:	08 95       	ret

00000464 <external_player_task>:

void external_player_task(void *pvParameters)
{
     464:	cf 93       	push	r28
     466:	df 93       	push	r29
     468:	00 d0       	rcall	.+0      	; 0x46a <external_player_task+0x6>
     46a:	00 d0       	rcall	.+0      	; 0x46c <external_player_task+0x8>
     46c:	1f 92       	push	r1
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	9d 83       	std	Y+5, r25	; 0x05
     474:	8c 83       	std	Y+4, r24	; 0x04
	(void) pvParameters;
	uint8_t position = 4;
     476:	84 e0       	ldi	r24, 0x04	; 4
     478:	89 83       	std	Y+1, r24	; 0x01

	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     47a:	0e 94 16 18 	call	0x302c	; 0x302c <xTaskGetTickCount>
     47e:	9b 83       	std	Y+3, r25	; 0x03
     480:	8a 83       	std	Y+2, r24	; 0x02
	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (frame == NULL)
     482:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <frame>
     486:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <frame+0x1>
     48a:	89 2b       	or	r24, r25
     48c:	09 f1       	breq	.+66     	; 0x4d0 <external_player_task+0x6c>
		{
		}
		else if (frame->data[0] == 'w'){
     48e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <frame>
     492:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <frame+0x1>
     496:	fc 01       	movw	r30, r24
     498:	80 81       	ld	r24, Z
     49a:	87 37       	cpi	r24, 0x77	; 119
     49c:	49 f4       	brne	.+18     	; 0x4b0 <external_player_task+0x4c>
			--position;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	81 50       	subi	r24, 0x01	; 1
     4a2:	89 83       	std	Y+1, r24	; 0x01
			move_player2(&position, 0);
     4a4:	60 e0       	ldi	r22, 0x00	; 0
     4a6:	ce 01       	movw	r24, r28
     4a8:	01 96       	adiw	r24, 0x01	; 1
     4aa:	0e 94 d5 01 	call	0x3aa	; 0x3aa <move_player2>
     4ae:	10 c0       	rjmp	.+32     	; 0x4d0 <external_player_task+0x6c>
		}
		else if (frame->data[0] == 's'){
     4b0:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <frame>
     4b4:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <frame+0x1>
     4b8:	fc 01       	movw	r30, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	83 37       	cpi	r24, 0x73	; 115
     4be:	41 f4       	brne	.+16     	; 0x4d0 <external_player_task+0x6c>
			++position;
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	8f 5f       	subi	r24, 0xFF	; 255
     4c4:	89 83       	std	Y+1, r24	; 0x01
			move_player2(&position, 1);
     4c6:	61 e0       	ldi	r22, 0x01	; 1
     4c8:	ce 01       	movw	r24, r28
     4ca:	01 96       	adiw	r24, 0x01	; 1
     4cc:	0e 94 d5 01 	call	0x3aa	; 0x3aa <move_player2>
		}
		frame = NULL;
     4d0:	10 92 6b 01 	sts	0x016B, r1	; 0x80016b <frame+0x1>
     4d4:	10 92 6a 01 	sts	0x016A, r1	; 0x80016a <frame>
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     4d8:	ce 01       	movw	r24, r28
     4da:	02 96       	adiw	r24, 0x02	; 2
     4dc:	68 e2       	ldi	r22, 0x28	; 40
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskDelayUntil>
	}
     4e4:	ce cf       	rjmp	.-100    	; 0x482 <external_player_task+0x1e>

000004e6 <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     4e6:	cf 93       	push	r28
     4e8:	df 93       	push	r29
     4ea:	00 d0       	rcall	.+0      	; 0x4ec <bounce+0x6>
     4ec:	00 d0       	rcall	.+0      	; 0x4ee <bounce+0x8>
     4ee:	00 d0       	rcall	.+0      	; 0x4f0 <bounce+0xa>
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	9b 83       	std	Y+3, r25	; 0x03
     4f6:	8a 83       	std	Y+2, r24	; 0x02
     4f8:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     4fa:	8a 81       	ldd	r24, Y+2	; 0x02
     4fc:	9b 81       	ldd	r25, Y+3	; 0x03
     4fe:	fc 01       	movw	r30, r24
     500:	80 81       	ld	r24, Z
     502:	81 70       	andi	r24, 0x01	; 1
     504:	88 23       	and	r24, r24
     506:	d9 f4       	brne	.+54     	; 0x53e <bounce+0x58>
		uint8_t r = rand()%3;
     508:	0e 94 ec 1e 	call	0x3dd8	; 0x3dd8 <rand>
     50c:	23 e0       	ldi	r18, 0x03	; 3
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	b9 01       	movw	r22, r18
     512:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <__divmodhi4>
     516:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     518:	89 81       	ldd	r24, Y+1	; 0x01
     51a:	8d 5f       	subi	r24, 0xFD	; 253
     51c:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	9b 81       	ldd	r25, Y+3	; 0x03
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	99 81       	ldd	r25, Y+1	; 0x01
     528:	89 0f       	add	r24, r25
     52a:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     52c:	89 81       	ldd	r24, Y+1	; 0x01
     52e:	87 70       	andi	r24, 0x07	; 7
     530:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     532:	8a 81       	ldd	r24, Y+2	; 0x02
     534:	9b 81       	ldd	r25, Y+3	; 0x03
     536:	29 81       	ldd	r18, Y+1	; 0x01
     538:	fc 01       	movw	r30, r24
     53a:	20 83       	st	Z, r18
     53c:	5e c0       	rjmp	.+188    	; 0x5fa <bounce+0x114>
	}
	else{
		if (side == 0){
     53e:	8c 81       	ldd	r24, Y+4	; 0x04
     540:	88 23       	and	r24, r24
     542:	71 f5       	brne	.+92     	; 0x5a0 <bounce+0xba>
			switch (*direction){
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	9b 81       	ldd	r25, Y+3	; 0x03
     548:	fc 01       	movw	r30, r24
     54a:	80 81       	ld	r24, Z
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	91 05       	cpc	r25, r1
     554:	91 f0       	breq	.+36     	; 0x57a <bounce+0x94>
     556:	84 30       	cpi	r24, 0x04	; 4
     558:	91 05       	cpc	r25, r1
     55a:	1c f4       	brge	.+6      	; 0x562 <bounce+0x7c>
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	39 f0       	breq	.+14     	; 0x56e <bounce+0x88>
     560:	4c c0       	rjmp	.+152    	; 0x5fa <bounce+0x114>
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	91 05       	cpc	r25, r1
     566:	79 f0       	breq	.+30     	; 0x586 <bounce+0xa0>
     568:	07 97       	sbiw	r24, 0x07	; 7
     56a:	99 f0       	breq	.+38     	; 0x592 <bounce+0xac>
     56c:	46 c0       	rjmp	.+140    	; 0x5fa <bounce+0x114>
				case 1:
				*direction = 3;
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	23 e0       	ldi	r18, 0x03	; 3
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
				break;
     578:	12 c0       	rjmp	.+36     	; 0x59e <bounce+0xb8>
				case 3:
				*direction = 1;
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	21 e0       	ldi	r18, 0x01	; 1
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
				break;
     584:	0c c0       	rjmp	.+24     	; 0x59e <bounce+0xb8>
				case 5:
				*direction = 7;
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	27 e0       	ldi	r18, 0x07	; 7
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
				break;
     590:	06 c0       	rjmp	.+12     	; 0x59e <bounce+0xb8>
				case 7:
				*direction = 5;
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	9b 81       	ldd	r25, Y+3	; 0x03
     596:	25 e0       	ldi	r18, 0x05	; 5
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
				break;
     59c:	00 00       	nop
     59e:	2d c0       	rjmp	.+90     	; 0x5fa <bounce+0x114>
			}
		}
		else{
			switch (*direction){
     5a0:	8a 81       	ldd	r24, Y+2	; 0x02
     5a2:	9b 81       	ldd	r25, Y+3	; 0x03
     5a4:	fc 01       	movw	r30, r24
     5a6:	80 81       	ld	r24, Z
     5a8:	88 2f       	mov	r24, r24
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	83 30       	cpi	r24, 0x03	; 3
     5ae:	91 05       	cpc	r25, r1
     5b0:	91 f0       	breq	.+36     	; 0x5d6 <bounce+0xf0>
     5b2:	84 30       	cpi	r24, 0x04	; 4
     5b4:	91 05       	cpc	r25, r1
     5b6:	1c f4       	brge	.+6      	; 0x5be <bounce+0xd8>
     5b8:	01 97       	sbiw	r24, 0x01	; 1
     5ba:	39 f0       	breq	.+14     	; 0x5ca <bounce+0xe4>
     5bc:	1e c0       	rjmp	.+60     	; 0x5fa <bounce+0x114>
     5be:	85 30       	cpi	r24, 0x05	; 5
     5c0:	91 05       	cpc	r25, r1
     5c2:	79 f0       	breq	.+30     	; 0x5e2 <bounce+0xfc>
     5c4:	07 97       	sbiw	r24, 0x07	; 7
     5c6:	99 f0       	breq	.+38     	; 0x5ee <bounce+0x108>
     5c8:	18 c0       	rjmp	.+48     	; 0x5fa <bounce+0x114>
				case 1:
				*direction = 7;
     5ca:	8a 81       	ldd	r24, Y+2	; 0x02
     5cc:	9b 81       	ldd	r25, Y+3	; 0x03
     5ce:	27 e0       	ldi	r18, 0x07	; 7
     5d0:	fc 01       	movw	r30, r24
     5d2:	20 83       	st	Z, r18
				break;
     5d4:	12 c0       	rjmp	.+36     	; 0x5fa <bounce+0x114>
				case 3:
				*direction = 5;
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	9b 81       	ldd	r25, Y+3	; 0x03
     5da:	25 e0       	ldi	r18, 0x05	; 5
     5dc:	fc 01       	movw	r30, r24
     5de:	20 83       	st	Z, r18
				break;
     5e0:	0c c0       	rjmp	.+24     	; 0x5fa <bounce+0x114>
				case 5:
				*direction = 3;
     5e2:	8a 81       	ldd	r24, Y+2	; 0x02
     5e4:	9b 81       	ldd	r25, Y+3	; 0x03
     5e6:	23 e0       	ldi	r18, 0x03	; 3
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
				break;
     5ec:	06 c0       	rjmp	.+12     	; 0x5fa <bounce+0x114>
				case 7:
				*direction = 1;
     5ee:	8a 81       	ldd	r24, Y+2	; 0x02
     5f0:	9b 81       	ldd	r25, Y+3	; 0x03
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	fc 01       	movw	r30, r24
     5f6:	20 83       	st	Z, r18
				break;
     5f8:	00 00       	nop
			}
		}
	}
	
	
}
     5fa:	26 96       	adiw	r28, 0x06	; 6
     5fc:	0f b6       	in	r0, 0x3f	; 63
     5fe:	f8 94       	cli
     600:	de bf       	out	0x3e, r29	; 62
     602:	0f be       	out	0x3f, r0	; 63
     604:	cd bf       	out	0x3d, r28	; 61
     606:	df 91       	pop	r29
     608:	cf 91       	pop	r28
     60a:	08 95       	ret

0000060c <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     60c:	cf 93       	push	r28
     60e:	df 93       	push	r29
     610:	00 d0       	rcall	.+0      	; 0x612 <move_ball+0x6>
     612:	00 d0       	rcall	.+0      	; 0x614 <move_ball+0x8>
     614:	00 d0       	rcall	.+0      	; 0x616 <move_ball+0xa>
     616:	cd b7       	in	r28, 0x3d	; 61
     618:	de b7       	in	r29, 0x3e	; 62
     61a:	9c 83       	std	Y+4, r25	; 0x04
     61c:	8b 83       	std	Y+3, r24	; 0x03
     61e:	7e 83       	std	Y+6, r23	; 0x06
     620:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	01 96       	adiw	r24, 0x01	; 1
     628:	fc 01       	movw	r30, r24
     62a:	80 81       	ld	r24, Z
     62c:	28 2f       	mov	r18, r24
     62e:	30 e0       	ldi	r19, 0x00	; 0
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	02 c0       	rjmp	.+4      	; 0x63a <move_ball+0x2e>
     636:	88 0f       	add	r24, r24
     638:	99 1f       	adc	r25, r25
     63a:	2a 95       	dec	r18
     63c:	e2 f7       	brpl	.-8      	; 0x636 <move_ball+0x2a>
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     642:	89 81       	ldd	r24, Y+1	; 0x01
     644:	9a 81       	ldd	r25, Y+2	; 0x02
     646:	80 95       	com	r24
     648:	90 95       	com	r25
     64a:	9a 83       	std	Y+2, r25	; 0x02
     64c:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     64e:	8b 81       	ldd	r24, Y+3	; 0x03
     650:	9c 81       	ldd	r25, Y+4	; 0x04
     652:	fc 01       	movw	r30, r24
     654:	80 81       	ld	r24, Z
     656:	88 23       	and	r24, r24
     658:	a9 f5       	brne	.+106    	; 0x6c4 <move_ball+0xb8>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     65a:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     65e:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     662:	20 e0       	ldi	r18, 0x00	; 0
     664:	4a e0       	ldi	r20, 0x0A	; 10
     666:	50 e0       	ldi	r21, 0x00	; 0
     668:	60 e0       	ldi	r22, 0x00	; 0
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     670:	8b 81       	ldd	r24, Y+3	; 0x03
     672:	9c 81       	ldd	r25, Y+4	; 0x04
     674:	fc 01       	movw	r30, r24
     676:	80 81       	ld	r24, Z
     678:	88 2f       	mov	r24, r24
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	2b 81       	ldd	r18, Y+3	; 0x03
     67e:	3c 81       	ldd	r19, Y+4	; 0x04
     680:	f9 01       	movw	r30, r18
     682:	20 81       	ld	r18, Z
     684:	22 2f       	mov	r18, r18
     686:	30 e0       	ldi	r19, 0x00	; 0
     688:	22 0f       	add	r18, r18
     68a:	33 1f       	adc	r19, r19
     68c:	24 5f       	subi	r18, 0xF4	; 244
     68e:	3e 4f       	sbci	r19, 0xFE	; 254
     690:	f9 01       	movw	r30, r18
     692:	40 81       	ld	r20, Z
     694:	51 81       	ldd	r21, Z+1	; 0x01
     696:	29 81       	ldd	r18, Y+1	; 0x01
     698:	3a 81       	ldd	r19, Y+2	; 0x02
     69a:	24 23       	and	r18, r20
     69c:	35 23       	and	r19, r21
     69e:	88 0f       	add	r24, r24
     6a0:	99 1f       	adc	r25, r25
     6a2:	84 5f       	subi	r24, 0xF4	; 244
     6a4:	9e 4f       	sbci	r25, 0xFE	; 254
     6a6:	fc 01       	movw	r30, r24
     6a8:	31 83       	std	Z+1, r19	; 0x01
     6aa:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     6ac:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     6b0:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     6b4:	20 e0       	ldi	r18, 0x00	; 0
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	50 e0       	ldi	r21, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
     6c2:	1e c0       	rjmp	.+60     	; 0x700 <move_ball+0xf4>
	}
	else{
		col_value[current[0]] &= mask;
     6c4:	8b 81       	ldd	r24, Y+3	; 0x03
     6c6:	9c 81       	ldd	r25, Y+4	; 0x04
     6c8:	fc 01       	movw	r30, r24
     6ca:	80 81       	ld	r24, Z
     6cc:	88 2f       	mov	r24, r24
     6ce:	90 e0       	ldi	r25, 0x00	; 0
     6d0:	2b 81       	ldd	r18, Y+3	; 0x03
     6d2:	3c 81       	ldd	r19, Y+4	; 0x04
     6d4:	f9 01       	movw	r30, r18
     6d6:	20 81       	ld	r18, Z
     6d8:	22 2f       	mov	r18, r18
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	22 0f       	add	r18, r18
     6de:	33 1f       	adc	r19, r19
     6e0:	24 5f       	subi	r18, 0xF4	; 244
     6e2:	3e 4f       	sbci	r19, 0xFE	; 254
     6e4:	f9 01       	movw	r30, r18
     6e6:	40 81       	ld	r20, Z
     6e8:	51 81       	ldd	r21, Z+1	; 0x01
     6ea:	29 81       	ldd	r18, Y+1	; 0x01
     6ec:	3a 81       	ldd	r19, Y+2	; 0x02
     6ee:	24 23       	and	r18, r20
     6f0:	35 23       	and	r19, r21
     6f2:	88 0f       	add	r24, r24
     6f4:	99 1f       	adc	r25, r25
     6f6:	84 5f       	subi	r24, 0xF4	; 244
     6f8:	9e 4f       	sbci	r25, 0xFE	; 254
     6fa:	fc 01       	movw	r30, r24
     6fc:	31 83       	std	Z+1, r19	; 0x01
     6fe:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     700:	8d 81       	ldd	r24, Y+5	; 0x05
     702:	9e 81       	ldd	r25, Y+6	; 0x06
     704:	fc 01       	movw	r30, r24
     706:	20 81       	ld	r18, Z
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
	current[1] = next[1];
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	2d 81       	ldd	r18, Y+5	; 0x05
     718:	3e 81       	ldd	r19, Y+6	; 0x06
     71a:	f9 01       	movw	r30, r18
     71c:	21 81       	ldd	r18, Z+1	; 0x01
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	9c 81       	ldd	r25, Y+4	; 0x04
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	fc 01       	movw	r30, r24
     72a:	80 81       	ld	r24, Z
     72c:	28 2f       	mov	r18, r24
     72e:	30 e0       	ldi	r19, 0x00	; 0
     730:	81 e0       	ldi	r24, 0x01	; 1
     732:	90 e0       	ldi	r25, 0x00	; 0
     734:	02 c0       	rjmp	.+4      	; 0x73a <move_ball+0x12e>
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	2a 95       	dec	r18
     73c:	e2 f7       	brpl	.-8      	; 0x736 <move_ball+0x12a>
     73e:	9a 83       	std	Y+2, r25	; 0x02
     740:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	88 23       	and	r24, r24
     74c:	a9 f5       	brne	.+106    	; 0x7b8 <move_ball+0x1ac>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 1);
     74e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     752:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     756:	20 e0       	ldi	r18, 0x00	; 0
     758:	41 e0       	ldi	r20, 0x01	; 1
     75a:	50 e0       	ldi	r21, 0x00	; 0
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	70 e0       	ldi	r23, 0x00	; 0
     760:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	fc 01       	movw	r30, r24
     76a:	80 81       	ld	r24, Z
     76c:	88 2f       	mov	r24, r24
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	2b 81       	ldd	r18, Y+3	; 0x03
     772:	3c 81       	ldd	r19, Y+4	; 0x04
     774:	f9 01       	movw	r30, r18
     776:	20 81       	ld	r18, Z
     778:	22 2f       	mov	r18, r18
     77a:	30 e0       	ldi	r19, 0x00	; 0
     77c:	22 0f       	add	r18, r18
     77e:	33 1f       	adc	r19, r19
     780:	24 5f       	subi	r18, 0xF4	; 244
     782:	3e 4f       	sbci	r19, 0xFE	; 254
     784:	f9 01       	movw	r30, r18
     786:	40 81       	ld	r20, Z
     788:	51 81       	ldd	r21, Z+1	; 0x01
     78a:	29 81       	ldd	r18, Y+1	; 0x01
     78c:	3a 81       	ldd	r19, Y+2	; 0x02
     78e:	24 2b       	or	r18, r20
     790:	35 2b       	or	r19, r21
     792:	88 0f       	add	r24, r24
     794:	99 1f       	adc	r25, r25
     796:	84 5f       	subi	r24, 0xF4	; 244
     798:	9e 4f       	sbci	r25, 0xFE	; 254
     79a:	fc 01       	movw	r30, r24
     79c:	31 83       	std	Z+1, r19	; 0x01
     79e:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     7a0:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_col_0_mutex>
     7a4:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_col_0_mutex+0x1>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	40 e0       	ldi	r20, 0x00	; 0
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	60 e0       	ldi	r22, 0x00	; 0
     7b0:	70 e0       	ldi	r23, 0x00	; 0
     7b2:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
     7b6:	59 c0       	rjmp	.+178    	; 0x86a <move_ball+0x25e>
	}
	else if (current[0] == 13)
     7b8:	8b 81       	ldd	r24, Y+3	; 0x03
     7ba:	9c 81       	ldd	r25, Y+4	; 0x04
     7bc:	fc 01       	movw	r30, r24
     7be:	80 81       	ld	r24, Z
     7c0:	8d 30       	cpi	r24, 0x0D	; 13
     7c2:	a9 f5       	brne	.+106    	; 0x82e <move_ball+0x222>
	{
		xSemaphoreTake(_col_13_mutex, (TickType_t) 1);
     7c4:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_13_mutex>
     7c8:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_13_mutex+0x1>
     7cc:	20 e0       	ldi	r18, 0x00	; 0
     7ce:	41 e0       	ldi	r20, 0x01	; 1
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	60 e0       	ldi	r22, 0x00	; 0
     7d4:	70 e0       	ldi	r23, 0x00	; 0
     7d6:	0e 94 17 12 	call	0x242e	; 0x242e <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     7da:	8b 81       	ldd	r24, Y+3	; 0x03
     7dc:	9c 81       	ldd	r25, Y+4	; 0x04
     7de:	fc 01       	movw	r30, r24
     7e0:	80 81       	ld	r24, Z
     7e2:	88 2f       	mov	r24, r24
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2b 81       	ldd	r18, Y+3	; 0x03
     7e8:	3c 81       	ldd	r19, Y+4	; 0x04
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	22 2f       	mov	r18, r18
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	24 5f       	subi	r18, 0xF4	; 244
     7f8:	3e 4f       	sbci	r19, 0xFE	; 254
     7fa:	f9 01       	movw	r30, r18
     7fc:	40 81       	ld	r20, Z
     7fe:	51 81       	ldd	r21, Z+1	; 0x01
     800:	29 81       	ldd	r18, Y+1	; 0x01
     802:	3a 81       	ldd	r19, Y+2	; 0x02
     804:	24 2b       	or	r18, r20
     806:	35 2b       	or	r19, r21
     808:	88 0f       	add	r24, r24
     80a:	99 1f       	adc	r25, r25
     80c:	84 5f       	subi	r24, 0xF4	; 244
     80e:	9e 4f       	sbci	r25, 0xFE	; 254
     810:	fc 01       	movw	r30, r24
     812:	31 83       	std	Z+1, r19	; 0x01
     814:	20 83       	st	Z, r18
		xSemaphoreGive(_col_13_mutex);
     816:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_13_mutex>
     81a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_13_mutex+0x1>
     81e:	20 e0       	ldi	r18, 0x00	; 0
     820:	40 e0       	ldi	r20, 0x00	; 0
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	70 e0       	ldi	r23, 0x00	; 0
     828:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
     82c:	1e c0       	rjmp	.+60     	; 0x86a <move_ball+0x25e>
	}
	else{
		col_value[current[0]] |= mask;
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	88 2f       	mov	r24, r24
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	2b 81       	ldd	r18, Y+3	; 0x03
     83c:	3c 81       	ldd	r19, Y+4	; 0x04
     83e:	f9 01       	movw	r30, r18
     840:	20 81       	ld	r18, Z
     842:	22 2f       	mov	r18, r18
     844:	30 e0       	ldi	r19, 0x00	; 0
     846:	22 0f       	add	r18, r18
     848:	33 1f       	adc	r19, r19
     84a:	24 5f       	subi	r18, 0xF4	; 244
     84c:	3e 4f       	sbci	r19, 0xFE	; 254
     84e:	f9 01       	movw	r30, r18
     850:	40 81       	ld	r20, Z
     852:	51 81       	ldd	r21, Z+1	; 0x01
     854:	29 81       	ldd	r18, Y+1	; 0x01
     856:	3a 81       	ldd	r19, Y+2	; 0x02
     858:	24 2b       	or	r18, r20
     85a:	35 2b       	or	r19, r21
     85c:	88 0f       	add	r24, r24
     85e:	99 1f       	adc	r25, r25
     860:	84 5f       	subi	r24, 0xF4	; 244
     862:	9e 4f       	sbci	r25, 0xFE	; 254
     864:	fc 01       	movw	r30, r24
     866:	31 83       	std	Z+1, r19	; 0x01
     868:	20 83       	st	Z, r18
	}

	
}
     86a:	26 96       	adiw	r28, 0x06	; 6
     86c:	0f b6       	in	r0, 0x3f	; 63
     86e:	f8 94       	cli
     870:	de bf       	out	0x3e, r29	; 62
     872:	0f be       	out	0x3f, r0	; 63
     874:	cd bf       	out	0x3d, r28	; 61
     876:	df 91       	pop	r29
     878:	cf 91       	pop	r28
     87a:	08 95       	ret

0000087c <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     87c:	cf 93       	push	r28
     87e:	df 93       	push	r29
     880:	00 d0       	rcall	.+0      	; 0x882 <calc_next+0x6>
     882:	00 d0       	rcall	.+0      	; 0x884 <calc_next+0x8>
     884:	00 d0       	rcall	.+0      	; 0x886 <calc_next+0xa>
     886:	cd b7       	in	r28, 0x3d	; 61
     888:	de b7       	in	r29, 0x3e	; 62
     88a:	9a 83       	std	Y+2, r25	; 0x02
     88c:	89 83       	std	Y+1, r24	; 0x01
     88e:	7c 83       	std	Y+4, r23	; 0x04
     890:	6b 83       	std	Y+3, r22	; 0x03
     892:	5e 83       	std	Y+6, r21	; 0x06
     894:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     896:	8d 81       	ldd	r24, Y+5	; 0x05
     898:	9e 81       	ldd	r25, Y+6	; 0x06
     89a:	fc 01       	movw	r30, r24
     89c:	80 81       	ld	r24, Z
     89e:	88 2f       	mov	r24, r24
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	09 2e       	mov	r0, r25
     8a4:	00 0c       	add	r0, r0
     8a6:	aa 0b       	sbc	r26, r26
     8a8:	bb 0b       	sbc	r27, r27
     8aa:	40 e0       	ldi	r20, 0x00	; 0
     8ac:	50 e0       	ldi	r21, 0x00	; 0
     8ae:	27 e0       	ldi	r18, 0x07	; 7
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	84 1b       	sub	r24, r20
     8b4:	95 0b       	sbc	r25, r21
     8b6:	28 17       	cp	r18, r24
     8b8:	39 07       	cpc	r19, r25
     8ba:	08 f4       	brcc	.+2      	; 0x8be <calc_next+0x42>
     8bc:	79 c0       	rjmp	.+242    	; 0x9b0 <__stack+0xb1>
     8be:	82 5c       	subi	r24, 0xC2	; 194
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	fc 01       	movw	r30, r24
     8c4:	0c 94 59 1d 	jmp	0x3ab2	; 0x3ab2 <__tablejump2__>
	{
		case 0:
			--next[1];
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	9c 81       	ldd	r25, Y+4	; 0x04
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	fc 01       	movw	r30, r24
     8d0:	20 81       	ld	r18, Z
     8d2:	21 50       	subi	r18, 0x01	; 1
     8d4:	fc 01       	movw	r30, r24
     8d6:	20 83       	st	Z, r18
			break;
     8d8:	6b c0       	rjmp	.+214    	; 0x9b0 <__stack+0xb1>
		case 1:
		++next[0];
     8da:	8b 81       	ldd	r24, Y+3	; 0x03
     8dc:	9c 81       	ldd	r25, Y+4	; 0x04
     8de:	fc 01       	movw	r30, r24
     8e0:	80 81       	ld	r24, Z
     8e2:	21 e0       	ldi	r18, 0x01	; 1
     8e4:	28 0f       	add	r18, r24
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	fc 01       	movw	r30, r24
     8ec:	20 83       	st	Z, r18
		--next[1];
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	9c 81       	ldd	r25, Y+4	; 0x04
     8f2:	01 96       	adiw	r24, 0x01	; 1
     8f4:	fc 01       	movw	r30, r24
     8f6:	20 81       	ld	r18, Z
     8f8:	21 50       	subi	r18, 0x01	; 1
     8fa:	fc 01       	movw	r30, r24
     8fc:	20 83       	st	Z, r18
		break;
     8fe:	58 c0       	rjmp	.+176    	; 0x9b0 <__stack+0xb1>
		case 2:
		++next[0];
     900:	8b 81       	ldd	r24, Y+3	; 0x03
     902:	9c 81       	ldd	r25, Y+4	; 0x04
     904:	fc 01       	movw	r30, r24
     906:	80 81       	ld	r24, Z
     908:	21 e0       	ldi	r18, 0x01	; 1
     90a:	28 0f       	add	r18, r24
     90c:	8b 81       	ldd	r24, Y+3	; 0x03
     90e:	9c 81       	ldd	r25, Y+4	; 0x04
     910:	fc 01       	movw	r30, r24
     912:	20 83       	st	Z, r18
		break;
     914:	4d c0       	rjmp	.+154    	; 0x9b0 <__stack+0xb1>
		case 3:
		++next[0];
     916:	8b 81       	ldd	r24, Y+3	; 0x03
     918:	9c 81       	ldd	r25, Y+4	; 0x04
     91a:	fc 01       	movw	r30, r24
     91c:	80 81       	ld	r24, Z
     91e:	21 e0       	ldi	r18, 0x01	; 1
     920:	28 0f       	add	r18, r24
     922:	8b 81       	ldd	r24, Y+3	; 0x03
     924:	9c 81       	ldd	r25, Y+4	; 0x04
     926:	fc 01       	movw	r30, r24
     928:	20 83       	st	Z, r18
		++next[1];
     92a:	8b 81       	ldd	r24, Y+3	; 0x03
     92c:	9c 81       	ldd	r25, Y+4	; 0x04
     92e:	01 96       	adiw	r24, 0x01	; 1
     930:	fc 01       	movw	r30, r24
     932:	20 81       	ld	r18, Z
     934:	2f 5f       	subi	r18, 0xFF	; 255
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
		break;
     93a:	3a c0       	rjmp	.+116    	; 0x9b0 <__stack+0xb1>
		case 4:
		++next[1];
     93c:	8b 81       	ldd	r24, Y+3	; 0x03
     93e:	9c 81       	ldd	r25, Y+4	; 0x04
     940:	01 96       	adiw	r24, 0x01	; 1
     942:	fc 01       	movw	r30, r24
     944:	20 81       	ld	r18, Z
     946:	2f 5f       	subi	r18, 0xFF	; 255
     948:	fc 01       	movw	r30, r24
     94a:	20 83       	st	Z, r18
		break;
     94c:	31 c0       	rjmp	.+98     	; 0x9b0 <__stack+0xb1>
		case 5:
		--next[0];
     94e:	8b 81       	ldd	r24, Y+3	; 0x03
     950:	9c 81       	ldd	r25, Y+4	; 0x04
     952:	fc 01       	movw	r30, r24
     954:	80 81       	ld	r24, Z
     956:	2f ef       	ldi	r18, 0xFF	; 255
     958:	28 0f       	add	r18, r24
     95a:	8b 81       	ldd	r24, Y+3	; 0x03
     95c:	9c 81       	ldd	r25, Y+4	; 0x04
     95e:	fc 01       	movw	r30, r24
     960:	20 83       	st	Z, r18
		++next[1];
     962:	8b 81       	ldd	r24, Y+3	; 0x03
     964:	9c 81       	ldd	r25, Y+4	; 0x04
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	fc 01       	movw	r30, r24
     96a:	20 81       	ld	r18, Z
     96c:	2f 5f       	subi	r18, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
		break;
     972:	1e c0       	rjmp	.+60     	; 0x9b0 <__stack+0xb1>
		case 6:
		--next[0];
     974:	8b 81       	ldd	r24, Y+3	; 0x03
     976:	9c 81       	ldd	r25, Y+4	; 0x04
     978:	fc 01       	movw	r30, r24
     97a:	80 81       	ld	r24, Z
     97c:	2f ef       	ldi	r18, 0xFF	; 255
     97e:	28 0f       	add	r18, r24
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	9c 81       	ldd	r25, Y+4	; 0x04
     984:	fc 01       	movw	r30, r24
     986:	20 83       	st	Z, r18
		break;
     988:	13 c0       	rjmp	.+38     	; 0x9b0 <__stack+0xb1>
		case 7:
		--next[0];
     98a:	8b 81       	ldd	r24, Y+3	; 0x03
     98c:	9c 81       	ldd	r25, Y+4	; 0x04
     98e:	fc 01       	movw	r30, r24
     990:	80 81       	ld	r24, Z
     992:	2f ef       	ldi	r18, 0xFF	; 255
     994:	28 0f       	add	r18, r24
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	fc 01       	movw	r30, r24
     99c:	20 83       	st	Z, r18
		--next[1];
     99e:	8b 81       	ldd	r24, Y+3	; 0x03
     9a0:	9c 81       	ldd	r25, Y+4	; 0x04
     9a2:	01 96       	adiw	r24, 0x01	; 1
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 81       	ld	r18, Z
     9a8:	21 50       	subi	r18, 0x01	; 1
     9aa:	fc 01       	movw	r30, r24
     9ac:	20 83       	st	Z, r18
		break;
     9ae:	00 00       	nop
	}
	
}
     9b0:	26 96       	adiw	r28, 0x06	; 6
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	f8 94       	cli
     9b6:	de bf       	out	0x3e, r29	; 62
     9b8:	0f be       	out	0x3f, r0	; 63
     9ba:	cd bf       	out	0x3d, r28	; 61
     9bc:	df 91       	pop	r29
     9be:	cf 91       	pop	r28
     9c0:	08 95       	ret

000009c2 <ball_task>:

void ball_task(void *pvParameters)
{
     9c2:	cf 93       	push	r28
     9c4:	df 93       	push	r29
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	2a 97       	sbiw	r28, 0x0a	; 10
     9cc:	0f b6       	in	r0, 0x3f	; 63
     9ce:	f8 94       	cli
     9d0:	de bf       	out	0x3e, r29	; 62
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	cd bf       	out	0x3d, r28	; 61
     9d6:	9a 87       	std	Y+10, r25	; 0x0a
     9d8:	89 87       	std	Y+9, r24	; 0x09
	(void) pvParameters;
		//"Pong" 
		col_value[13] = 240;
     9da:	80 ef       	ldi	r24, 0xF0	; 240
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <col_value+0x1b>
     9e2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <col_value+0x1a>
		col_value[12] = 336;
     9e6:	80 e5       	ldi	r24, 0x50	; 80
     9e8:	91 e0       	ldi	r25, 0x01	; 1
     9ea:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <col_value+0x19>
     9ee:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <col_value+0x18>
		col_value[11] = 288;
     9f2:	80 e2       	ldi	r24, 0x20	; 32
     9f4:	91 e0       	ldi	r25, 0x01	; 1
     9f6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <col_value+0x17>
     9fa:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <col_value+0x16>
		col_value[10] = 0;
     9fe:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <col_value+0x15>
     a02:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <col_value+0x14>
		col_value[9] = 224;
     a06:	80 ee       	ldi	r24, 0xE0	; 224
     a08:	90 e0       	ldi	r25, 0x00	; 0
     a0a:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <col_value+0x13>
     a0e:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <col_value+0x12>
		col_value[8] = 16;
     a12:	80 e1       	ldi	r24, 0x10	; 16
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <col_value+0x11>
     a1a:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <col_value+0x10>
		col_value[7] = 240;
     a1e:	80 ef       	ldi	r24, 0xF0	; 240
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <col_value+0xf>
     a26:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <col_value+0xe>
		col_value[6] = 0;
     a2a:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <col_value+0xd>
     a2e:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <col_value+0xc>
		col_value[5] = 96;
     a32:	80 e6       	ldi	r24, 0x60	; 96
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <col_value+0xb>
     a3a:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <col_value+0xa>
		col_value[4] = 144;
     a3e:	80 e9       	ldi	r24, 0x90	; 144
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <col_value+0x9>
     a46:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <col_value+0x8>
		col_value[3] = 96;
     a4a:	80 e6       	ldi	r24, 0x60	; 96
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <col_value+0x7>
     a52:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <col_value+0x6>
		col_value[2] = 12;
     a56:	8c e0       	ldi	r24, 0x0C	; 12
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <col_value+0x5>
     a5e:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <col_value+0x4>
		col_value[1] = 18;
     a62:	82 e1       	ldi	r24, 0x12	; 18
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <col_value+0x3>
     a6a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <col_value+0x2>
		col_value[0] = 254;
     a6e:	8e ef       	ldi	r24, 0xFE	; 254
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     a76:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
		vTaskDelay(2000);
     a7a:	80 ed       	ldi	r24, 0xD0	; 208
     a7c:	97 e0       	ldi	r25, 0x07	; 7
     a7e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <vTaskDelay>
		col_value[13] = 48;
     a82:	80 e3       	ldi	r24, 0x30	; 48
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <col_value+0x1b>
     a8a:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <col_value+0x1a>
		col_value[12] = 0;
     a8e:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <col_value+0x19>
     a92:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <col_value+0x18>
		col_value[11] = 0;
     a96:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <col_value+0x17>
     a9a:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <col_value+0x16>
		col_value[10] = 0;
     a9e:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <col_value+0x15>
     aa2:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <col_value+0x14>
		col_value[9] = 0;
     aa6:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <col_value+0x13>
     aaa:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <col_value+0x12>
		col_value[8] = 0;
     aae:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <col_value+0x11>
     ab2:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <col_value+0x10>
		col_value[7] = 0;
     ab6:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <col_value+0xf>
     aba:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <col_value+0xe>
		col_value[6] = 0;
     abe:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <col_value+0xd>
     ac2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <col_value+0xc>
		col_value[5] = 0;
     ac6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <col_value+0xb>
     aca:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <col_value+0xa>
		col_value[4] = 0;
     ace:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <col_value+0x9>
     ad2:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <col_value+0x8>
		col_value[3] = 0;
     ad6:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <col_value+0x7>
     ada:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <col_value+0x6>
		col_value[2] = 0;
     ade:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <col_value+0x5>
     ae2:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <col_value+0x4>
		col_value[1] = 0;
     ae6:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <col_value+0x3>
     aea:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <col_value+0x2>
		col_value[0] = 48;	
     aee:	80 e3       	ldi	r24, 0x30	; 48
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     af6:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	TickType_t lastWakeTime;
	uint8_t pos[2] = {7, 5};
     afa:	87 e0       	ldi	r24, 0x07	; 7
     afc:	8c 83       	std	Y+4, r24	; 0x04
     afe:	85 e0       	ldi	r24, 0x05	; 5
     b00:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t direction = 0;
     b02:	1e 82       	std	Y+6, r1	; 0x06
	lastWakeTime = xTaskGetTickCount();
     b04:	0e 94 16 18 	call	0x302c	; 0x302c <xTaskGetTickCount>
     b08:	9b 83       	std	Y+3, r25	; 0x03
     b0a:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     b0c:	8c 81       	ldd	r24, Y+4	; 0x04
     b0e:	8f 83       	std	Y+7, r24	; 0x07
     b10:	8d 81       	ldd	r24, Y+5	; 0x05
     b12:	88 87       	std	Y+8, r24	; 0x08
		uint8_t is_bounced = 1;
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     b18:	45 c0       	rjmp	.+138    	; 0xba4 <ball_task+0x1e2>
		{	
			is_bounced = 0;
     b1a:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     b1c:	ae 01       	movw	r20, r28
     b1e:	4a 5f       	subi	r20, 0xFA	; 250
     b20:	5f 4f       	sbci	r21, 0xFF	; 255
     b22:	9e 01       	movw	r18, r28
     b24:	29 5f       	subi	r18, 0xF9	; 249
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	ce 01       	movw	r24, r28
     b2a:	04 96       	adiw	r24, 0x04	; 4
     b2c:	b9 01       	movw	r22, r18
     b2e:	0e 94 3e 04 	call	0x87c	; 0x87c <calc_next>
			
			if (next[0] > 12){
     b32:	8f 81       	ldd	r24, Y+7	; 0x07
     b34:	8d 30       	cpi	r24, 0x0D	; 13
     b36:	30 f0       	brcs	.+12     	; 0xb44 <ball_task+0x182>
				bounce(&direction, 1);
     b38:	ce 01       	movw	r24, r28
     b3a:	06 96       	adiw	r24, 0x06	; 6
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	0e 94 73 02 	call	0x4e6	; 0x4e6 <bounce>
     b42:	30 c0       	rjmp	.+96     	; 0xba4 <ball_task+0x1e2>
			}
			else if ( next[1] > 9){
     b44:	88 85       	ldd	r24, Y+8	; 0x08
     b46:	8a 30       	cpi	r24, 0x0A	; 10
     b48:	30 f0       	brcs	.+12     	; 0xb56 <ball_task+0x194>
				bounce(&direction, 0);
     b4a:	ce 01       	movw	r24, r28
     b4c:	06 96       	adiw	r24, 0x06	; 6
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	0e 94 73 02 	call	0x4e6	; 0x4e6 <bounce>
     b54:	27 c0       	rjmp	.+78     	; 0xba4 <ball_task+0x1e2>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     b56:	8f 81       	ldd	r24, Y+7	; 0x07
     b58:	88 23       	and	r24, r24
     b5a:	d9 f4       	brne	.+54     	; 0xb92 <ball_task+0x1d0>
     b5c:	88 85       	ldd	r24, Y+8	; 0x08
     b5e:	28 2f       	mov	r18, r24
     b60:	30 e0       	ldi	r19, 0x00	; 0
     b62:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     b66:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     b6a:	28 17       	cp	r18, r24
     b6c:	39 07       	cpc	r19, r25
     b6e:	59 f0       	breq	.+22     	; 0xb86 <ball_task+0x1c4>
     b70:	88 85       	ldd	r24, Y+8	; 0x08
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     b7a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     b7e:	01 96       	adiw	r24, 0x01	; 1
     b80:	28 17       	cp	r18, r24
     b82:	39 07       	cpc	r19, r25
     b84:	31 f4       	brne	.+12     	; 0xb92 <ball_task+0x1d0>
				bounce(&direction, 1);
     b86:	ce 01       	movw	r24, r28
     b88:	06 96       	adiw	r24, 0x06	; 6
     b8a:	61 e0       	ldi	r22, 0x01	; 1
     b8c:	0e 94 73 02 	call	0x4e6	; 0x4e6 <bounce>
     b90:	09 c0       	rjmp	.+18     	; 0xba4 <ball_task+0x1e2>
			}
			else{
				move_ball(pos, next);
     b92:	9e 01       	movw	r18, r28
     b94:	29 5f       	subi	r18, 0xF9	; 249
     b96:	3f 4f       	sbci	r19, 0xFF	; 255
     b98:	ce 01       	movw	r24, r28
     b9a:	04 96       	adiw	r24, 0x04	; 4
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 06 03 	call	0x60c	; 0x60c <move_ball>
				is_bounced = 0;
     ba2:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     ba4:	89 81       	ldd	r24, Y+1	; 0x01
     ba6:	88 23       	and	r24, r24
     ba8:	09 f0       	breq	.+2      	; 0xbac <ball_task+0x1ea>
     baa:	b7 cf       	rjmp	.-146    	; 0xb1a <ball_task+0x158>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 80);
     bac:	ce 01       	movw	r24, r28
     bae:	02 96       	adiw	r24, 0x02	; 2
     bb0:	60 e5       	ldi	r22, 0x50	; 80
     bb2:	70 e0       	ldi	r23, 0x00	; 0
     bb4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <vTaskDelayUntil>
	}
     bb8:	a9 cf       	rjmp	.-174    	; 0xb0c <ball_task+0x14a>

00000bba <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     bba:	cf 93       	push	r28
     bbc:	df 93       	push	r29
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     bc2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <col_index>
     bc6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <col_index+0x1>
     bca:	89 2b       	or	r24, r25
     bcc:	49 f4       	brne	.+18     	; 0xbe0 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     bce:	8b e2       	ldi	r24, 0x2B	; 43
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	2b e2       	ldi	r18, 0x2B	; 43
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	f9 01       	movw	r30, r18
     bd8:	20 81       	ld	r18, Z
     bda:	24 60       	ori	r18, 0x04	; 4
     bdc:	fc 01       	movw	r30, r24
     bde:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     be0:	8b e2       	ldi	r24, 0x2B	; 43
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	2b e2       	ldi	r18, 0x2B	; 43
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	f9 01       	movw	r30, r18
     bea:	20 81       	ld	r18, Z
     bec:	20 62       	ori	r18, 0x20	; 32
     bee:	fc 01       	movw	r30, r24
     bf0:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     bf2:	8b e2       	ldi	r24, 0x2B	; 43
     bf4:	90 e0       	ldi	r25, 0x00	; 0
     bf6:	2b e2       	ldi	r18, 0x2B	; 43
     bf8:	30 e0       	ldi	r19, 0x00	; 0
     bfa:	f9 01       	movw	r30, r18
     bfc:	20 81       	ld	r18, Z
     bfe:	2f 7d       	andi	r18, 0xDF	; 223
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     c04:	8b e2       	ldi	r24, 0x2B	; 43
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	2b e2       	ldi	r18, 0x2B	; 43
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	f9 01       	movw	r30, r18
     c0e:	20 81       	ld	r18, Z
     c10:	20 61       	ori	r18, 0x10	; 16
     c12:	fc 01       	movw	r30, r24
     c14:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     c16:	8b e2       	ldi	r24, 0x2B	; 43
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	2b e2       	ldi	r18, 0x2B	; 43
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	f9 01       	movw	r30, r18
     c20:	20 81       	ld	r18, Z
     c22:	2f 7e       	andi	r18, 0xEF	; 239
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     c28:	82 e2       	ldi	r24, 0x22	; 34
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <col_index>
     c30:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <col_index+0x1>
     c34:	22 0f       	add	r18, r18
     c36:	33 1f       	adc	r19, r19
     c38:	24 5f       	subi	r18, 0xF4	; 244
     c3a:	3e 4f       	sbci	r19, 0xFE	; 254
     c3c:	f9 01       	movw	r30, r18
     c3e:	20 81       	ld	r18, Z
     c40:	31 81       	ldd	r19, Z+1	; 0x01
     c42:	20 95       	com	r18
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     c48:	85 e2       	ldi	r24, 0x25	; 37
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	25 e2       	ldi	r18, 0x25	; 37
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	f9 01       	movw	r30, r18
     c52:	20 81       	ld	r18, Z
     c54:	23 60       	ori	r18, 0x03	; 3
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     c5a:	85 e2       	ldi	r24, 0x25	; 37
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	25 e2       	ldi	r18, 0x25	; 37
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	40 81       	ld	r20, Z
     c66:	20 91 68 01 	lds	r18, 0x0168	; 0x800168 <col_index>
     c6a:	30 91 69 01 	lds	r19, 0x0169	; 0x800169 <col_index+0x1>
     c6e:	22 0f       	add	r18, r18
     c70:	33 1f       	adc	r19, r19
     c72:	24 5f       	subi	r18, 0xF4	; 244
     c74:	3e 4f       	sbci	r19, 0xFE	; 254
     c76:	f9 01       	movw	r30, r18
     c78:	20 81       	ld	r18, Z
     c7a:	31 81       	ldd	r19, Z+1	; 0x01
     c7c:	23 2f       	mov	r18, r19
     c7e:	33 27       	eor	r19, r19
     c80:	23 70       	andi	r18, 0x03	; 3
     c82:	20 95       	com	r18
     c84:	24 23       	and	r18, r20
     c86:	fc 01       	movw	r30, r24
     c88:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     c8a:	8b e2       	ldi	r24, 0x2B	; 43
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	2b e2       	ldi	r18, 0x2B	; 43
     c90:	30 e0       	ldi	r19, 0x00	; 0
     c92:	f9 01       	movw	r30, r18
     c94:	20 81       	ld	r18, Z
     c96:	2b 7f       	andi	r18, 0xFB	; 251
     c98:	fc 01       	movw	r30, r24
     c9a:	20 83       	st	Z, r18

	++col_index;
     c9c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <col_index>
     ca0:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <col_index+0x1>
     ca4:	01 96       	adiw	r24, 0x01	; 1
     ca6:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <col_index+0x1>
     caa:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <col_index>
	if (col_index > 13){
     cae:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <col_index>
     cb2:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <col_index+0x1>
     cb6:	0e 97       	sbiw	r24, 0x0e	; 14
     cb8:	24 f0       	brlt	.+8      	; 0xcc2 <handle_display+0x108>
		col_index = 0;
     cba:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <col_index+0x1>
     cbe:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <col_index>
	}

}
     cc2:	df 91       	pop	r29
     cc4:	cf 91       	pop	r28
     cc6:	08 95       	ret

00000cc8 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     cc8:	cf 93       	push	r28
     cca:	df 93       	push	r29
     ccc:	cd b7       	in	r28, 0x3d	; 61
     cce:	de b7       	in	r29, 0x3e	; 62
	//
}
     cd0:	df 91       	pop	r29
     cd2:	cf 91       	pop	r28
     cd4:	08 95       	ret

00000cd6 <main>:

//-----------------------------------------
int main(void)
{
     cd6:	ef 92       	push	r14
     cd8:	ff 92       	push	r15
     cda:	0f 93       	push	r16
     cdc:	cf 93       	push	r28
     cde:	df 93       	push	r29
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     ce4:	0e 94 86 07 	call	0xf0c	; 0xf0c <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     ce8:	8b e2       	ldi	r24, 0x2B	; 43
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	2b e2       	ldi	r18, 0x2B	; 43
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	f9 01       	movw	r30, r18
     cf2:	20 81       	ld	r18, Z
     cf4:	2f 7b       	andi	r18, 0xBF	; 191
     cf6:	fc 01       	movw	r30, r24
     cf8:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     cfa:	8e e1       	ldi	r24, 0x1E	; 30
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	61 e0       	ldi	r22, 0x01	; 1
     d00:	0e 94 2f 10 	call	0x205e	; 0x205e <xQueueGenericCreate>
     d04:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <__data_end+0x1>
     d08:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueCreateMutex>
     d12:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_col_0_mutex+0x1>
     d16:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_col_0_mutex>
	_col_13_mutex = xSemaphoreCreateMutex();
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueCreateMutex>
     d20:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_col_13_mutex+0x1>
     d24:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_col_13_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueCreateMutex>
     d2e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <_player_position_mutex+0x1>
     d32:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_player_position_mutex>
	_ball_position_mutex = xSemaphoreCreateMutex();
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueCreateMutex>
     d3c:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <_ball_position_mutex+0x1>
     d40:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <_ball_position_mutex>
	init_com(_x_com_received_chars_queue);
     d44:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <__data_end>
     d48:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <__data_end+0x1>
     d4c:	0e 94 0c 07 	call	0xe18	; 0xe18 <init_com>
	
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(serial_task,(const char *)"serial", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     d50:	e1 2c       	mov	r14, r1
     d52:	f1 2c       	mov	r15, r1
     d54:	04 e0       	ldi	r16, 0x04	; 4
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	45 e5       	ldi	r20, 0x55	; 85
     d5c:	50 e0       	ldi	r21, 0x00	; 0
     d5e:	6c e3       	ldi	r22, 0x3C	; 60
     d60:	71 e0       	ldi	r23, 0x01	; 1
     d62:	85 e6       	ldi	r24, 0x65	; 101
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 ca 14 	call	0x2994	; 0x2994 <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     d6a:	e1 2c       	mov	r14, r1
     d6c:	f1 2c       	mov	r15, r1
     d6e:	03 e0       	ldi	r16, 0x03	; 3
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	45 e5       	ldi	r20, 0x55	; 85
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	63 e4       	ldi	r22, 0x43	; 67
     d7a:	71 e0       	ldi	r23, 0x01	; 1
     d7c:	81 ee       	ldi	r24, 0xE1	; 225
     d7e:	94 e0       	ldi	r25, 0x04	; 4
     d80:	0e 94 ca 14 	call	0x2994	; 0x2994 <xTaskCreate>
	xTaskCreate(local_player_task,(const char *)"lplayer", configMINIMAL_STACK_SIZE, (void *)NULL, task3_prio, NULL);
     d84:	e1 2c       	mov	r14, r1
     d86:	f1 2c       	mov	r15, r1
     d88:	02 e0       	ldi	r16, 0x02	; 2
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	45 e5       	ldi	r20, 0x55	; 85
     d90:	50 e0       	ldi	r21, 0x00	; 0
     d92:	68 e4       	ldi	r22, 0x48	; 72
     d94:	71 e0       	ldi	r23, 0x01	; 1
     d96:	88 e5       	ldi	r24, 0x58	; 88
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	0e 94 ca 14 	call	0x2994	; 0x2994 <xTaskCreate>
	xTaskCreate(external_player_task,(const char *)"eplayer", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     d9e:	e1 2c       	mov	r14, r1
     da0:	f1 2c       	mov	r15, r1
     da2:	00 e0       	ldi	r16, 0x00	; 0
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	45 e5       	ldi	r20, 0x55	; 85
     daa:	50 e0       	ldi	r21, 0x00	; 0
     dac:	60 e5       	ldi	r22, 0x50	; 80
     dae:	71 e0       	ldi	r23, 0x01	; 1
     db0:	82 e3       	ldi	r24, 0x32	; 50
     db2:	92 e0       	ldi	r25, 0x02	; 2
     db4:	0e 94 ca 14 	call	0x2994	; 0x2994 <xTaskCreate>
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	
	
	// Start the display handler timer
	init_display_timer(handle_display);
     db8:	8d ed       	ldi	r24, 0xDD	; 221
     dba:	95 e0       	ldi	r25, 0x05	; 5
     dbc:	0e 94 1e 07 	call	0xe3c	; 0xe3c <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     dc0:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     dc4:	ff cf       	rjmp	.-2      	; 0xdc4 <main+0xee>

00000dc6 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <_com_call_back+0x6>
     dcc:	00 d0       	rcall	.+0      	; 0xdce <_com_call_back+0x8>
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	9b 83       	std	Y+3, r25	; 0x03
     dd4:	8a 83       	std	Y+2, r24	; 0x02
     dd6:	6c 83       	std	Y+4, r22	; 0x04
     dd8:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_x_rx_com_queue>
     ddc:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_x_rx_com_queue+0x1>
     de0:	89 2b       	or	r24, r25
     de2:	99 f0       	breq	.+38     	; 0xe0a <_com_call_back+0x44>
     de4:	19 82       	std	Y+1, r1	; 0x01
     de6:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <_x_rx_com_queue>
     dea:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <_x_rx_com_queue+0x1>
     dee:	be 01       	movw	r22, r28
     df0:	6c 5f       	subi	r22, 0xFC	; 252
     df2:	7f 4f       	sbci	r23, 0xFF	; 255
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	ae 01       	movw	r20, r28
     df8:	4f 5f       	subi	r20, 0xFF	; 255
     dfa:	5f 4f       	sbci	r21, 0xFF	; 255
     dfc:	0e 94 b8 11 	call	0x2370	; 0x2370 <xQueueGenericSendFromISR>
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	88 23       	and	r24, r24
     e04:	11 f0       	breq	.+4      	; 0xe0a <_com_call_back+0x44>
     e06:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
     e0a:	0f 90       	pop	r0
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <init_com>:
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <init_com+0x6>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <_x_rx_com_queue+0x1>
     e2e:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <_x_rx_com_queue>
     e32:	0f 90       	pop	r0
     e34:	0f 90       	pop	r0
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	08 95       	ret

00000e3c <init_display_timer>:
     e3c:	cf 93       	push	r28
     e3e:	df 93       	push	r29
     e40:	00 d0       	rcall	.+0      	; 0xe42 <init_display_timer+0x6>
     e42:	cd b7       	in	r28, 0x3d	; 61
     e44:	de b7       	in	r29, 0x3e	; 62
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	90 93 71 01 	sts	0x0171, r25	; 0x800171 <cb_ptr+0x1>
     e52:	80 93 70 01 	sts	0x0170, r24	; 0x800170 <cb_ptr>
     e56:	87 e4       	ldi	r24, 0x47	; 71
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	2a e0       	ldi	r18, 0x0A	; 10
     e5c:	fc 01       	movw	r30, r24
     e5e:	20 83       	st	Z, r18
     e60:	84 e4       	ldi	r24, 0x44	; 68
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	24 e4       	ldi	r18, 0x44	; 68
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	f9 01       	movw	r30, r18
     e6a:	20 81       	ld	r18, Z
     e6c:	22 60       	ori	r18, 0x02	; 2
     e6e:	fc 01       	movw	r30, r24
     e70:	20 83       	st	Z, r18
     e72:	8e e6       	ldi	r24, 0x6E	; 110
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	2e e6       	ldi	r18, 0x6E	; 110
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	f9 01       	movw	r30, r18
     e7c:	20 81       	ld	r18, Z
     e7e:	22 60       	ori	r18, 0x02	; 2
     e80:	fc 01       	movw	r30, r24
     e82:	20 83       	st	Z, r18
     e84:	85 e4       	ldi	r24, 0x45	; 69
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	25 e4       	ldi	r18, 0x45	; 69
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	f9 01       	movw	r30, r18
     e8e:	20 81       	ld	r18, Z
     e90:	25 60       	ori	r18, 0x05	; 5
     e92:	fc 01       	movw	r30, r24
     e94:	20 83       	st	Z, r18
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <__vector_16>:
     ea0:	1f 92       	push	r1
     ea2:	0f 92       	push	r0
     ea4:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ea8:	0f 92       	push	r0
     eaa:	11 24       	eor	r1, r1
     eac:	2f 93       	push	r18
     eae:	3f 93       	push	r19
     eb0:	4f 93       	push	r20
     eb2:	5f 93       	push	r21
     eb4:	6f 93       	push	r22
     eb6:	7f 93       	push	r23
     eb8:	8f 93       	push	r24
     eba:	9f 93       	push	r25
     ebc:	af 93       	push	r26
     ebe:	bf 93       	push	r27
     ec0:	ef 93       	push	r30
     ec2:	ff 93       	push	r31
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	cd b7       	in	r28, 0x3d	; 61
     eca:	de b7       	in	r29, 0x3e	; 62
     ecc:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <cb_ptr>
     ed0:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <cb_ptr+0x1>
     ed4:	89 2b       	or	r24, r25
     ed6:	31 f0       	breq	.+12     	; 0xee4 <__vector_16+0x44>
     ed8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <cb_ptr>
     edc:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <cb_ptr+0x1>
     ee0:	fc 01       	movw	r30, r24
     ee2:	09 95       	icall
     ee4:	df 91       	pop	r29
     ee6:	cf 91       	pop	r28
     ee8:	ff 91       	pop	r31
     eea:	ef 91       	pop	r30
     eec:	bf 91       	pop	r27
     eee:	af 91       	pop	r26
     ef0:	9f 91       	pop	r25
     ef2:	8f 91       	pop	r24
     ef4:	7f 91       	pop	r23
     ef6:	6f 91       	pop	r22
     ef8:	5f 91       	pop	r21
     efa:	4f 91       	pop	r20
     efc:	3f 91       	pop	r19
     efe:	2f 91       	pop	r18
     f00:	0f 90       	pop	r0
     f02:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     f06:	0f 90       	pop	r0
     f08:	1f 90       	pop	r1
     f0a:	18 95       	reti

00000f0c <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     f0c:	8f 92       	push	r8
     f0e:	9f 92       	push	r9
     f10:	af 92       	push	r10
     f12:	bf 92       	push	r11
     f14:	cf 92       	push	r12
     f16:	df 92       	push	r13
     f18:	ef 92       	push	r14
     f1a:	0f 93       	push	r16
     f1c:	cf 93       	push	r28
     f1e:	df 93       	push	r29
     f20:	cd b7       	in	r28, 0x3d	; 61
     f22:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     f24:	82 e7       	ldi	r24, 0x72	; 114
     f26:	91 e0       	ldi	r25, 0x01	; 1
     f28:	0e 94 18 08 	call	0x1030	; 0x1030 <buffer_init>
	buffer_init(&_com_tx_buffer);
     f2c:	85 e8       	ldi	r24, 0x85	; 133
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	0e 94 18 08 	call	0x1030	; 0x1030 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     f34:	0f 2e       	mov	r0, r31
     f36:	f3 ee       	ldi	r31, 0xE3	; 227
     f38:	8f 2e       	mov	r8, r31
     f3a:	f6 e0       	ldi	r31, 0x06	; 6
     f3c:	9f 2e       	mov	r9, r31
     f3e:	f0 2d       	mov	r31, r0
     f40:	0f 2e       	mov	r0, r31
     f42:	f5 e8       	ldi	r31, 0x85	; 133
     f44:	af 2e       	mov	r10, r31
     f46:	f1 e0       	ldi	r31, 0x01	; 1
     f48:	bf 2e       	mov	r11, r31
     f4a:	f0 2d       	mov	r31, r0
     f4c:	0f 2e       	mov	r0, r31
     f4e:	f2 e7       	ldi	r31, 0x72	; 114
     f50:	cf 2e       	mov	r12, r31
     f52:	f1 e0       	ldi	r31, 0x01	; 1
     f54:	df 2e       	mov	r13, r31
     f56:	f0 2d       	mov	r31, r0
     f58:	e1 2c       	mov	r14, r1
     f5a:	00 e0       	ldi	r16, 0x00	; 0
     f5c:	23 e0       	ldi	r18, 0x03	; 3
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	52 ec       	ldi	r21, 0xC2	; 194
     f62:	61 e0       	ldi	r22, 0x01	; 1
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	0e 94 76 0d 	call	0x1aec	; 0x1aec <serial_new_instance>
     f6c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <_com_serial_instance+0x1>
     f70:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     f74:	88 e2       	ldi	r24, 0x28	; 40
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	28 e2       	ldi	r18, 0x28	; 40
     f7a:	30 e0       	ldi	r19, 0x00	; 0
     f7c:	f9 01       	movw	r30, r18
     f7e:	20 81       	ld	r18, Z
     f80:	23 6c       	ori	r18, 0xC3	; 195
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     f86:	8b e2       	ldi	r24, 0x2B	; 43
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	2b e2       	ldi	r18, 0x2B	; 43
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	f9 01       	movw	r30, r18
     f90:	20 81       	ld	r18, Z
     f92:	28 60       	ori	r18, 0x08	; 8
     f94:	fc 01       	movw	r30, r24
     f96:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     f98:	8a e2       	ldi	r24, 0x2A	; 42
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	2a e2       	ldi	r18, 0x2A	; 42
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	f9 01       	movw	r30, r18
     fa2:	20 81       	ld	r18, Z
     fa4:	24 67       	ori	r18, 0x74	; 116
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     faa:	8b e2       	ldi	r24, 0x2B	; 43
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	2b e2       	ldi	r18, 0x2B	; 43
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	f9 01       	movw	r30, r18
     fb4:	20 81       	ld	r18, Z
     fb6:	20 64       	ori	r18, 0x40	; 64
     fb8:	fc 01       	movw	r30, r24
     fba:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     fbc:	81 e2       	ldi	r24, 0x21	; 33
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	81 e2       	ldi	r24, 0x21	; 33
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	2f ef       	ldi	r18, 0xFF	; 255
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     fce:	84 e2       	ldi	r24, 0x24	; 36
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	24 e2       	ldi	r18, 0x24	; 36
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	23 60       	ori	r18, 0x03	; 3
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     fe0:	84 e2       	ldi	r24, 0x24	; 36
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	24 e2       	ldi	r18, 0x24	; 36
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	f9 01       	movw	r30, r18
     fea:	20 81       	ld	r18, Z
     fec:	2c 63       	ori	r18, 0x3C	; 60
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
}
     ff2:	df 91       	pop	r29
     ff4:	cf 91       	pop	r28
     ff6:	0f 91       	pop	r16
     ff8:	ef 90       	pop	r14
     ffa:	df 90       	pop	r13
     ffc:	cf 90       	pop	r12
     ffe:	bf 90       	pop	r11
    1000:	af 90       	pop	r10
    1002:	9f 90       	pop	r9
    1004:	8f 90       	pop	r8
    1006:	08 95       	ret

00001008 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
    1008:	cf 93       	push	r28
    100a:	df 93       	push	r29
    100c:	1f 92       	push	r1
    100e:	cd b7       	in	r28, 0x3d	; 61
    1010:	de b7       	in	r29, 0x3e	; 62
    1012:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
    1014:	0f 90       	pop	r0
    1016:	df 91       	pop	r29
    1018:	cf 91       	pop	r28
    101a:	08 95       	ret

0000101c <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
    101c:	cf 93       	push	r28
    101e:	df 93       	push	r29
    1020:	1f 92       	push	r1
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
    1028:	0f 90       	pop	r0
    102a:	df 91       	pop	r29
    102c:	cf 91       	pop	r28
    102e:	08 95       	ret

00001030 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	00 d0       	rcall	.+0      	; 0x1036 <buffer_init+0x6>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9a 83       	std	Y+2, r25	; 0x02
    103c:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
    103e:	89 81       	ldd	r24, Y+1	; 0x01
    1040:	9a 81       	ldd	r25, Y+2	; 0x02
    1042:	fc 01       	movw	r30, r24
    1044:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	fc 01       	movw	r30, r24
    104c:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
    104e:	89 81       	ldd	r24, Y+1	; 0x01
    1050:	9a 81       	ldd	r25, Y+2	; 0x02
    1052:	fc 01       	movw	r30, r24
    1054:	12 8a       	std	Z+18, r1	; 0x12
}
    1056:	0f 90       	pop	r0
    1058:	0f 90       	pop	r0
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	08 95       	ret

00001060 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
    1060:	cf 93       	push	r28
    1062:	df 93       	push	r29
    1064:	00 d0       	rcall	.+0      	; 0x1066 <buffer_get_item+0x6>
    1066:	00 d0       	rcall	.+0      	; 0x1068 <buffer_get_item+0x8>
    1068:	cd b7       	in	r28, 0x3d	; 61
    106a:	de b7       	in	r29, 0x3e	; 62
    106c:	9a 83       	std	Y+2, r25	; 0x02
    106e:	89 83       	std	Y+1, r24	; 0x01
    1070:	7c 83       	std	Y+4, r23	; 0x04
    1072:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	fc 01       	movw	r30, r24
    107a:	82 89       	ldd	r24, Z+18	; 0x12
    107c:	88 23       	and	r24, r24
    107e:	81 f1       	breq	.+96     	; 0x10e0 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	fc 01       	movw	r30, r24
    1086:	81 89       	ldd	r24, Z+17	; 0x11
    1088:	88 2f       	mov	r24, r24
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	29 81       	ldd	r18, Y+1	; 0x01
    108e:	3a 81       	ldd	r19, Y+2	; 0x02
    1090:	82 0f       	add	r24, r18
    1092:	93 1f       	adc	r25, r19
    1094:	fc 01       	movw	r30, r24
    1096:	20 81       	ld	r18, Z
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	fc 01       	movw	r30, r24
    109e:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	9a 81       	ldd	r25, Y+2	; 0x02
    10a4:	fc 01       	movw	r30, r24
    10a6:	81 89       	ldd	r24, Z+17	; 0x11
    10a8:	88 2f       	mov	r24, r24
    10aa:	90 e0       	ldi	r25, 0x00	; 0
    10ac:	01 96       	adiw	r24, 0x01	; 1
    10ae:	8f 70       	andi	r24, 0x0F	; 15
    10b0:	90 78       	andi	r25, 0x80	; 128
    10b2:	99 23       	and	r25, r25
    10b4:	24 f4       	brge	.+8      	; 0x10be <buffer_get_item+0x5e>
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	80 6f       	ori	r24, 0xF0	; 240
    10ba:	9f 6f       	ori	r25, 0xFF	; 255
    10bc:	01 96       	adiw	r24, 0x01	; 1
    10be:	28 2f       	mov	r18, r24
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	9a 81       	ldd	r25, Y+2	; 0x02
    10c4:	fc 01       	movw	r30, r24
    10c6:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	9a 81       	ldd	r25, Y+2	; 0x02
    10cc:	fc 01       	movw	r30, r24
    10ce:	82 89       	ldd	r24, Z+18	; 0x12
    10d0:	2f ef       	ldi	r18, 0xFF	; 255
    10d2:	28 0f       	add	r18, r24
    10d4:	89 81       	ldd	r24, Y+1	; 0x01
    10d6:	9a 81       	ldd	r25, Y+2	; 0x02
    10d8:	fc 01       	movw	r30, r24
    10da:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
    10de:	01 c0       	rjmp	.+2      	; 0x10e2 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
    10e0:	81 e0       	ldi	r24, 0x01	; 1
}
    10e2:	0f 90       	pop	r0
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
    10e8:	0f 90       	pop	r0
    10ea:	df 91       	pop	r29
    10ec:	cf 91       	pop	r28
    10ee:	08 95       	ret

000010f0 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	00 d0       	rcall	.+0      	; 0x10f6 <buffer_put_item+0x6>
    10f6:	1f 92       	push	r1
    10f8:	cd b7       	in	r28, 0x3d	; 61
    10fa:	de b7       	in	r29, 0x3e	; 62
    10fc:	9a 83       	std	Y+2, r25	; 0x02
    10fe:	89 83       	std	Y+1, r24	; 0x01
    1100:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
    1102:	89 81       	ldd	r24, Y+1	; 0x01
    1104:	9a 81       	ldd	r25, Y+2	; 0x02
    1106:	fc 01       	movw	r30, r24
    1108:	82 89       	ldd	r24, Z+18	; 0x12
    110a:	80 31       	cpi	r24, 0x10	; 16
    110c:	68 f5       	brcc	.+90     	; 0x1168 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
    110e:	89 81       	ldd	r24, Y+1	; 0x01
    1110:	9a 81       	ldd	r25, Y+2	; 0x02
    1112:	fc 01       	movw	r30, r24
    1114:	80 89       	ldd	r24, Z+16	; 0x10
    1116:	88 2f       	mov	r24, r24
    1118:	90 e0       	ldi	r25, 0x00	; 0
    111a:	29 81       	ldd	r18, Y+1	; 0x01
    111c:	3a 81       	ldd	r19, Y+2	; 0x02
    111e:	82 0f       	add	r24, r18
    1120:	93 1f       	adc	r25, r19
    1122:	2b 81       	ldd	r18, Y+3	; 0x03
    1124:	fc 01       	movw	r30, r24
    1126:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
    1128:	89 81       	ldd	r24, Y+1	; 0x01
    112a:	9a 81       	ldd	r25, Y+2	; 0x02
    112c:	fc 01       	movw	r30, r24
    112e:	80 89       	ldd	r24, Z+16	; 0x10
    1130:	88 2f       	mov	r24, r24
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	01 96       	adiw	r24, 0x01	; 1
    1136:	8f 70       	andi	r24, 0x0F	; 15
    1138:	90 78       	andi	r25, 0x80	; 128
    113a:	99 23       	and	r25, r25
    113c:	24 f4       	brge	.+8      	; 0x1146 <buffer_put_item+0x56>
    113e:	01 97       	sbiw	r24, 0x01	; 1
    1140:	80 6f       	ori	r24, 0xF0	; 240
    1142:	9f 6f       	ori	r25, 0xFF	; 255
    1144:	01 96       	adiw	r24, 0x01	; 1
    1146:	28 2f       	mov	r18, r24
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	fc 01       	movw	r30, r24
    114e:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
    1150:	89 81       	ldd	r24, Y+1	; 0x01
    1152:	9a 81       	ldd	r25, Y+2	; 0x02
    1154:	fc 01       	movw	r30, r24
    1156:	82 89       	ldd	r24, Z+18	; 0x12
    1158:	21 e0       	ldi	r18, 0x01	; 1
    115a:	28 0f       	add	r18, r24
    115c:	89 81       	ldd	r24, Y+1	; 0x01
    115e:	9a 81       	ldd	r25, Y+2	; 0x02
    1160:	fc 01       	movw	r30, r24
    1162:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	01 c0       	rjmp	.+2      	; 0x116a <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
    1168:	82 e0       	ldi	r24, 0x02	; 2
}
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
    116e:	0f 90       	pop	r0
    1170:	df 91       	pop	r29
    1172:	cf 91       	pop	r28
    1174:	08 95       	ret

00001176 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
    1176:	cf 93       	push	r28
    1178:	df 93       	push	r29
    117a:	00 d0       	rcall	.+0      	; 0x117c <vListInitialise+0x6>
    117c:	cd b7       	in	r28, 0x3d	; 61
    117e:	de b7       	in	r29, 0x3e	; 62
    1180:	9a 83       	std	Y+2, r25	; 0x02
    1182:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1184:	89 81       	ldd	r24, Y+1	; 0x01
    1186:	9a 81       	ldd	r25, Y+2	; 0x02
    1188:	9c 01       	movw	r18, r24
    118a:	2d 5f       	subi	r18, 0xFD	; 253
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	89 81       	ldd	r24, Y+1	; 0x01
    1190:	9a 81       	ldd	r25, Y+2	; 0x02
    1192:	fc 01       	movw	r30, r24
    1194:	32 83       	std	Z+2, r19	; 0x02
    1196:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	2f ef       	ldi	r18, 0xFF	; 255
    119e:	3f ef       	ldi	r19, 0xFF	; 255
    11a0:	fc 01       	movw	r30, r24
    11a2:	34 83       	std	Z+4, r19	; 0x04
    11a4:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11a6:	89 81       	ldd	r24, Y+1	; 0x01
    11a8:	9a 81       	ldd	r25, Y+2	; 0x02
    11aa:	9c 01       	movw	r18, r24
    11ac:	2d 5f       	subi	r18, 0xFD	; 253
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	89 81       	ldd	r24, Y+1	; 0x01
    11b2:	9a 81       	ldd	r25, Y+2	; 0x02
    11b4:	fc 01       	movw	r30, r24
    11b6:	36 83       	std	Z+6, r19	; 0x06
    11b8:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	9c 01       	movw	r18, r24
    11c0:	2d 5f       	subi	r18, 0xFD	; 253
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	89 81       	ldd	r24, Y+1	; 0x01
    11c6:	9a 81       	ldd	r25, Y+2	; 0x02
    11c8:	fc 01       	movw	r30, r24
    11ca:	30 87       	std	Z+8, r19	; 0x08
    11cc:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
    11ce:	89 81       	ldd	r24, Y+1	; 0x01
    11d0:	9a 81       	ldd	r25, Y+2	; 0x02
    11d2:	fc 01       	movw	r30, r24
    11d4:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	df 91       	pop	r29
    11dc:	cf 91       	pop	r28
    11de:	08 95       	ret

000011e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    11e0:	cf 93       	push	r28
    11e2:	df 93       	push	r29
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <vListInitialiseItem+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	9a 83       	std	Y+2, r25	; 0x02
    11ec:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    11ee:	89 81       	ldd	r24, Y+1	; 0x01
    11f0:	9a 81       	ldd	r25, Y+2	; 0x02
    11f2:	fc 01       	movw	r30, r24
    11f4:	11 86       	std	Z+9, r1	; 0x09
    11f6:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    11f8:	0f 90       	pop	r0
    11fa:	0f 90       	pop	r0
    11fc:	df 91       	pop	r29
    11fe:	cf 91       	pop	r28
    1200:	08 95       	ret

00001202 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	00 d0       	rcall	.+0      	; 0x1208 <vListInsertEnd+0x6>
    1208:	00 d0       	rcall	.+0      	; 0x120a <vListInsertEnd+0x8>
    120a:	00 d0       	rcall	.+0      	; 0x120c <vListInsertEnd+0xa>
    120c:	cd b7       	in	r28, 0x3d	; 61
    120e:	de b7       	in	r29, 0x3e	; 62
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	8b 83       	std	Y+3, r24	; 0x03
    1214:	7e 83       	std	Y+6, r23	; 0x06
    1216:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	fc 01       	movw	r30, r24
    121e:	81 81       	ldd	r24, Z+1	; 0x01
    1220:	92 81       	ldd	r25, Z+2	; 0x02
    1222:	9a 83       	std	Y+2, r25	; 0x02
    1224:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    1226:	8d 81       	ldd	r24, Y+5	; 0x05
    1228:	9e 81       	ldd	r25, Y+6	; 0x06
    122a:	29 81       	ldd	r18, Y+1	; 0x01
    122c:	3a 81       	ldd	r19, Y+2	; 0x02
    122e:	fc 01       	movw	r30, r24
    1230:	33 83       	std	Z+3, r19	; 0x03
    1232:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	fc 01       	movw	r30, r24
    123a:	24 81       	ldd	r18, Z+4	; 0x04
    123c:	35 81       	ldd	r19, Z+5	; 0x05
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	fc 01       	movw	r30, r24
    1244:	35 83       	std	Z+5, r19	; 0x05
    1246:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	84 81       	ldd	r24, Z+4	; 0x04
    1250:	95 81       	ldd	r25, Z+5	; 0x05
    1252:	2d 81       	ldd	r18, Y+5	; 0x05
    1254:	3e 81       	ldd	r19, Y+6	; 0x06
    1256:	fc 01       	movw	r30, r24
    1258:	33 83       	std	Z+3, r19	; 0x03
    125a:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	2d 81       	ldd	r18, Y+5	; 0x05
    1262:	3e 81       	ldd	r19, Y+6	; 0x06
    1264:	fc 01       	movw	r30, r24
    1266:	35 83       	std	Z+5, r19	; 0x05
    1268:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    126a:	8d 81       	ldd	r24, Y+5	; 0x05
    126c:	9e 81       	ldd	r25, Y+6	; 0x06
    126e:	2b 81       	ldd	r18, Y+3	; 0x03
    1270:	3c 81       	ldd	r19, Y+4	; 0x04
    1272:	fc 01       	movw	r30, r24
    1274:	31 87       	std	Z+9, r19	; 0x09
    1276:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	fc 01       	movw	r30, r24
    127e:	80 81       	ld	r24, Z
    1280:	21 e0       	ldi	r18, 0x01	; 1
    1282:	28 0f       	add	r18, r24
    1284:	8b 81       	ldd	r24, Y+3	; 0x03
    1286:	9c 81       	ldd	r25, Y+4	; 0x04
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
}
    128c:	26 96       	adiw	r28, 0x06	; 6
    128e:	0f b6       	in	r0, 0x3f	; 63
    1290:	f8 94       	cli
    1292:	de bf       	out	0x3e, r29	; 62
    1294:	0f be       	out	0x3f, r0	; 63
    1296:	cd bf       	out	0x3d, r28	; 61
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    129e:	cf 93       	push	r28
    12a0:	df 93       	push	r29
    12a2:	cd b7       	in	r28, 0x3d	; 61
    12a4:	de b7       	in	r29, 0x3e	; 62
    12a6:	28 97       	sbiw	r28, 0x08	; 8
    12a8:	0f b6       	in	r0, 0x3f	; 63
    12aa:	f8 94       	cli
    12ac:	de bf       	out	0x3e, r29	; 62
    12ae:	0f be       	out	0x3f, r0	; 63
    12b0:	cd bf       	out	0x3d, r28	; 61
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	78 87       	std	Y+8, r23	; 0x08
    12b8:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	fc 01       	movw	r30, r24
    12c0:	80 81       	ld	r24, Z
    12c2:	91 81       	ldd	r25, Z+1	; 0x01
    12c4:	9c 83       	std	Y+4, r25	; 0x04
    12c6:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 96       	adiw	r24, 0x01	; 1
    12ce:	41 f4       	brne	.+16     	; 0x12e0 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    12d0:	8d 81       	ldd	r24, Y+5	; 0x05
    12d2:	9e 81       	ldd	r25, Y+6	; 0x06
    12d4:	fc 01       	movw	r30, r24
    12d6:	87 81       	ldd	r24, Z+7	; 0x07
    12d8:	90 85       	ldd	r25, Z+8	; 0x08
    12da:	9a 83       	std	Y+2, r25	; 0x02
    12dc:	89 83       	std	Y+1, r24	; 0x01
    12de:	1a c0       	rjmp	.+52     	; 0x1314 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	9e 81       	ldd	r25, Y+6	; 0x06
    12e4:	03 96       	adiw	r24, 0x03	; 3
    12e6:	9a 83       	std	Y+2, r25	; 0x02
    12e8:	89 83       	std	Y+1, r24	; 0x01
    12ea:	07 c0       	rjmp	.+14     	; 0x12fa <vListInsert+0x5c>
    12ec:	89 81       	ldd	r24, Y+1	; 0x01
    12ee:	9a 81       	ldd	r25, Y+2	; 0x02
    12f0:	fc 01       	movw	r30, r24
    12f2:	82 81       	ldd	r24, Z+2	; 0x02
    12f4:	93 81       	ldd	r25, Z+3	; 0x03
    12f6:	9a 83       	std	Y+2, r25	; 0x02
    12f8:	89 83       	std	Y+1, r24	; 0x01
    12fa:	89 81       	ldd	r24, Y+1	; 0x01
    12fc:	9a 81       	ldd	r25, Y+2	; 0x02
    12fe:	fc 01       	movw	r30, r24
    1300:	82 81       	ldd	r24, Z+2	; 0x02
    1302:	93 81       	ldd	r25, Z+3	; 0x03
    1304:	fc 01       	movw	r30, r24
    1306:	20 81       	ld	r18, Z
    1308:	31 81       	ldd	r19, Z+1	; 0x01
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	82 17       	cp	r24, r18
    1310:	93 07       	cpc	r25, r19
    1312:	60 f7       	brcc	.-40     	; 0x12ec <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1314:	89 81       	ldd	r24, Y+1	; 0x01
    1316:	9a 81       	ldd	r25, Y+2	; 0x02
    1318:	fc 01       	movw	r30, r24
    131a:	22 81       	ldd	r18, Z+2	; 0x02
    131c:	33 81       	ldd	r19, Z+3	; 0x03
    131e:	8f 81       	ldd	r24, Y+7	; 0x07
    1320:	98 85       	ldd	r25, Y+8	; 0x08
    1322:	fc 01       	movw	r30, r24
    1324:	33 83       	std	Z+3, r19	; 0x03
    1326:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    1328:	8f 81       	ldd	r24, Y+7	; 0x07
    132a:	98 85       	ldd	r25, Y+8	; 0x08
    132c:	fc 01       	movw	r30, r24
    132e:	82 81       	ldd	r24, Z+2	; 0x02
    1330:	93 81       	ldd	r25, Z+3	; 0x03
    1332:	2f 81       	ldd	r18, Y+7	; 0x07
    1334:	38 85       	ldd	r19, Y+8	; 0x08
    1336:	fc 01       	movw	r30, r24
    1338:	35 83       	std	Z+5, r19	; 0x05
    133a:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    133c:	8f 81       	ldd	r24, Y+7	; 0x07
    133e:	98 85       	ldd	r25, Y+8	; 0x08
    1340:	29 81       	ldd	r18, Y+1	; 0x01
    1342:	3a 81       	ldd	r19, Y+2	; 0x02
    1344:	fc 01       	movw	r30, r24
    1346:	35 83       	std	Z+5, r19	; 0x05
    1348:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    134a:	89 81       	ldd	r24, Y+1	; 0x01
    134c:	9a 81       	ldd	r25, Y+2	; 0x02
    134e:	2f 81       	ldd	r18, Y+7	; 0x07
    1350:	38 85       	ldd	r19, Y+8	; 0x08
    1352:	fc 01       	movw	r30, r24
    1354:	33 83       	std	Z+3, r19	; 0x03
    1356:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1358:	8f 81       	ldd	r24, Y+7	; 0x07
    135a:	98 85       	ldd	r25, Y+8	; 0x08
    135c:	2d 81       	ldd	r18, Y+5	; 0x05
    135e:	3e 81       	ldd	r19, Y+6	; 0x06
    1360:	fc 01       	movw	r30, r24
    1362:	31 87       	std	Z+9, r19	; 0x09
    1364:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1366:	8d 81       	ldd	r24, Y+5	; 0x05
    1368:	9e 81       	ldd	r25, Y+6	; 0x06
    136a:	fc 01       	movw	r30, r24
    136c:	80 81       	ld	r24, Z
    136e:	21 e0       	ldi	r18, 0x01	; 1
    1370:	28 0f       	add	r18, r24
    1372:	8d 81       	ldd	r24, Y+5	; 0x05
    1374:	9e 81       	ldd	r25, Y+6	; 0x06
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
}
    137a:	28 96       	adiw	r28, 0x08	; 8
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	de bf       	out	0x3e, r29	; 62
    1382:	0f be       	out	0x3f, r0	; 63
    1384:	cd bf       	out	0x3d, r28	; 61
    1386:	df 91       	pop	r29
    1388:	cf 91       	pop	r28
    138a:	08 95       	ret

0000138c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	00 d0       	rcall	.+0      	; 0x1392 <uxListRemove+0x6>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <uxListRemove+0x8>
    1394:	cd b7       	in	r28, 0x3d	; 61
    1396:	de b7       	in	r29, 0x3e	; 62
    1398:	9c 83       	std	Y+4, r25	; 0x04
    139a:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	fc 01       	movw	r30, r24
    13a2:	80 85       	ldd	r24, Z+8	; 0x08
    13a4:	91 85       	ldd	r25, Z+9	; 0x09
    13a6:	9a 83       	std	Y+2, r25	; 0x02
    13a8:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	fc 01       	movw	r30, r24
    13b0:	82 81       	ldd	r24, Z+2	; 0x02
    13b2:	93 81       	ldd	r25, Z+3	; 0x03
    13b4:	2b 81       	ldd	r18, Y+3	; 0x03
    13b6:	3c 81       	ldd	r19, Y+4	; 0x04
    13b8:	f9 01       	movw	r30, r18
    13ba:	24 81       	ldd	r18, Z+4	; 0x04
    13bc:	35 81       	ldd	r19, Z+5	; 0x05
    13be:	fc 01       	movw	r30, r24
    13c0:	35 83       	std	Z+5, r19	; 0x05
    13c2:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	fc 01       	movw	r30, r24
    13ca:	84 81       	ldd	r24, Z+4	; 0x04
    13cc:	95 81       	ldd	r25, Z+5	; 0x05
    13ce:	2b 81       	ldd	r18, Y+3	; 0x03
    13d0:	3c 81       	ldd	r19, Y+4	; 0x04
    13d2:	f9 01       	movw	r30, r18
    13d4:	22 81       	ldd	r18, Z+2	; 0x02
    13d6:	33 81       	ldd	r19, Z+3	; 0x03
    13d8:	fc 01       	movw	r30, r24
    13da:	33 83       	std	Z+3, r19	; 0x03
    13dc:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	fc 01       	movw	r30, r24
    13e4:	21 81       	ldd	r18, Z+1	; 0x01
    13e6:	32 81       	ldd	r19, Z+2	; 0x02
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	28 17       	cp	r18, r24
    13ee:	39 07       	cpc	r19, r25
    13f0:	51 f4       	brne	.+20     	; 0x1406 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	fc 01       	movw	r30, r24
    13f8:	24 81       	ldd	r18, Z+4	; 0x04
    13fa:	35 81       	ldd	r19, Z+5	; 0x05
    13fc:	89 81       	ldd	r24, Y+1	; 0x01
    13fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1400:	fc 01       	movw	r30, r24
    1402:	32 83       	std	Z+2, r19	; 0x02
    1404:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	fc 01       	movw	r30, r24
    140c:	11 86       	std	Z+9, r1	; 0x09
    140e:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1410:	89 81       	ldd	r24, Y+1	; 0x01
    1412:	9a 81       	ldd	r25, Y+2	; 0x02
    1414:	fc 01       	movw	r30, r24
    1416:	80 81       	ld	r24, Z
    1418:	2f ef       	ldi	r18, 0xFF	; 255
    141a:	28 0f       	add	r18, r24
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	fc 01       	movw	r30, r24
    1422:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	fc 01       	movw	r30, r24
    142a:	80 81       	ld	r24, Z
}
    142c:	0f 90       	pop	r0
    142e:	0f 90       	pop	r0
    1430:	0f 90       	pop	r0
    1432:	0f 90       	pop	r0
    1434:	df 91       	pop	r29
    1436:	cf 91       	pop	r28
    1438:	08 95       	ret

0000143a <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    143a:	cf 93       	push	r28
    143c:	df 93       	push	r29
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	28 97       	sbiw	r28, 0x08	; 8
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	9c 83       	std	Y+4, r25	; 0x04
    1450:	8b 83       	std	Y+3, r24	; 0x03
    1452:	7e 83       	std	Y+6, r23	; 0x06
    1454:	6d 83       	std	Y+5, r22	; 0x05
    1456:	58 87       	std	Y+8, r21	; 0x08
    1458:	4f 83       	std	Y+7, r20	; 0x07
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	21 e1       	ldi	r18, 0x11	; 17
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	22 e2       	ldi	r18, 0x22	; 34
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	23 e3       	ldi	r18, 0x33	; 51
    1488:	fc 01       	movw	r30, r24
    148a:	20 83       	st	Z, r18
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	8d 81       	ldd	r24, Y+5	; 0x05
    1498:	9e 81       	ldd	r25, Y+6	; 0x06
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	29 81       	ldd	r18, Y+1	; 0x01
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	fc 01       	movw	r30, r24
    14a6:	20 83       	st	Z, r18
    14a8:	8b 81       	ldd	r24, Y+3	; 0x03
    14aa:	9c 81       	ldd	r25, Y+4	; 0x04
    14ac:	01 97       	sbiw	r24, 0x01	; 1
    14ae:	9c 83       	std	Y+4, r25	; 0x04
    14b0:	8b 83       	std	Y+3, r24	; 0x03
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	9a 81       	ldd	r25, Y+2	; 0x02
    14b6:	89 2f       	mov	r24, r25
    14b8:	99 27       	eor	r25, r25
    14ba:	9a 83       	std	Y+2, r25	; 0x02
    14bc:	89 83       	std	Y+1, r24	; 0x01
    14be:	29 81       	ldd	r18, Y+1	; 0x01
    14c0:	8b 81       	ldd	r24, Y+3	; 0x03
    14c2:	9c 81       	ldd	r25, Y+4	; 0x04
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	fc 01       	movw	r30, r24
    14d8:	10 82       	st	Z, r1
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	01 97       	sbiw	r24, 0x01	; 1
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	9c 81       	ldd	r25, Y+4	; 0x04
    14e8:	20 e8       	ldi	r18, 0x80	; 128
    14ea:	fc 01       	movw	r30, r24
    14ec:	20 83       	st	Z, r18
    14ee:	8b 81       	ldd	r24, Y+3	; 0x03
    14f0:	9c 81       	ldd	r25, Y+4	; 0x04
    14f2:	01 97       	sbiw	r24, 0x01	; 1
    14f4:	9c 83       	std	Y+4, r25	; 0x04
    14f6:	8b 83       	std	Y+3, r24	; 0x03
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	fc 01       	movw	r30, r24
    14fe:	10 82       	st	Z, r1
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	01 97       	sbiw	r24, 0x01	; 1
    1506:	9c 83       	std	Y+4, r25	; 0x04
    1508:	8b 83       	std	Y+3, r24	; 0x03
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	22 e0       	ldi	r18, 0x02	; 2
    1510:	fc 01       	movw	r30, r24
    1512:	20 83       	st	Z, r18
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	01 97       	sbiw	r24, 0x01	; 1
    151a:	9c 83       	std	Y+4, r25	; 0x04
    151c:	8b 83       	std	Y+3, r24	; 0x03
    151e:	8b 81       	ldd	r24, Y+3	; 0x03
    1520:	9c 81       	ldd	r25, Y+4	; 0x04
    1522:	23 e0       	ldi	r18, 0x03	; 3
    1524:	fc 01       	movw	r30, r24
    1526:	20 83       	st	Z, r18
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	9c 83       	std	Y+4, r25	; 0x04
    1530:	8b 83       	std	Y+3, r24	; 0x03
    1532:	8b 81       	ldd	r24, Y+3	; 0x03
    1534:	9c 81       	ldd	r25, Y+4	; 0x04
    1536:	24 e0       	ldi	r18, 0x04	; 4
    1538:	fc 01       	movw	r30, r24
    153a:	20 83       	st	Z, r18
    153c:	8b 81       	ldd	r24, Y+3	; 0x03
    153e:	9c 81       	ldd	r25, Y+4	; 0x04
    1540:	01 97       	sbiw	r24, 0x01	; 1
    1542:	9c 83       	std	Y+4, r25	; 0x04
    1544:	8b 83       	std	Y+3, r24	; 0x03
    1546:	8b 81       	ldd	r24, Y+3	; 0x03
    1548:	9c 81       	ldd	r25, Y+4	; 0x04
    154a:	25 e0       	ldi	r18, 0x05	; 5
    154c:	fc 01       	movw	r30, r24
    154e:	20 83       	st	Z, r18
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	9c 81       	ldd	r25, Y+4	; 0x04
    1554:	01 97       	sbiw	r24, 0x01	; 1
    1556:	9c 83       	std	Y+4, r25	; 0x04
    1558:	8b 83       	std	Y+3, r24	; 0x03
    155a:	8b 81       	ldd	r24, Y+3	; 0x03
    155c:	9c 81       	ldd	r25, Y+4	; 0x04
    155e:	26 e0       	ldi	r18, 0x06	; 6
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9c 83       	std	Y+4, r25	; 0x04
    156c:	8b 83       	std	Y+3, r24	; 0x03
    156e:	8b 81       	ldd	r24, Y+3	; 0x03
    1570:	9c 81       	ldd	r25, Y+4	; 0x04
    1572:	27 e0       	ldi	r18, 0x07	; 7
    1574:	fc 01       	movw	r30, r24
    1576:	20 83       	st	Z, r18
    1578:	8b 81       	ldd	r24, Y+3	; 0x03
    157a:	9c 81       	ldd	r25, Y+4	; 0x04
    157c:	01 97       	sbiw	r24, 0x01	; 1
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	28 e0       	ldi	r18, 0x08	; 8
    1588:	fc 01       	movw	r30, r24
    158a:	20 83       	st	Z, r18
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	9c 81       	ldd	r25, Y+4	; 0x04
    1590:	01 97       	sbiw	r24, 0x01	; 1
    1592:	9c 83       	std	Y+4, r25	; 0x04
    1594:	8b 83       	std	Y+3, r24	; 0x03
    1596:	8b 81       	ldd	r24, Y+3	; 0x03
    1598:	9c 81       	ldd	r25, Y+4	; 0x04
    159a:	29 e0       	ldi	r18, 0x09	; 9
    159c:	fc 01       	movw	r30, r24
    159e:	20 83       	st	Z, r18
    15a0:	8b 81       	ldd	r24, Y+3	; 0x03
    15a2:	9c 81       	ldd	r25, Y+4	; 0x04
    15a4:	01 97       	sbiw	r24, 0x01	; 1
    15a6:	9c 83       	std	Y+4, r25	; 0x04
    15a8:	8b 83       	std	Y+3, r24	; 0x03
    15aa:	8b 81       	ldd	r24, Y+3	; 0x03
    15ac:	9c 81       	ldd	r25, Y+4	; 0x04
    15ae:	20 e1       	ldi	r18, 0x10	; 16
    15b0:	fc 01       	movw	r30, r24
    15b2:	20 83       	st	Z, r18
    15b4:	8b 81       	ldd	r24, Y+3	; 0x03
    15b6:	9c 81       	ldd	r25, Y+4	; 0x04
    15b8:	01 97       	sbiw	r24, 0x01	; 1
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	9c 81       	ldd	r25, Y+4	; 0x04
    15c2:	21 e1       	ldi	r18, 0x11	; 17
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
    15c8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ca:	9c 81       	ldd	r25, Y+4	; 0x04
    15cc:	01 97       	sbiw	r24, 0x01	; 1
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	22 e1       	ldi	r18, 0x12	; 18
    15d8:	fc 01       	movw	r30, r24
    15da:	20 83       	st	Z, r18
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	01 97       	sbiw	r24, 0x01	; 1
    15e2:	9c 83       	std	Y+4, r25	; 0x04
    15e4:	8b 83       	std	Y+3, r24	; 0x03
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	23 e1       	ldi	r18, 0x13	; 19
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	01 97       	sbiw	r24, 0x01	; 1
    15f6:	9c 83       	std	Y+4, r25	; 0x04
    15f8:	8b 83       	std	Y+3, r24	; 0x03
    15fa:	8b 81       	ldd	r24, Y+3	; 0x03
    15fc:	9c 81       	ldd	r25, Y+4	; 0x04
    15fe:	24 e1       	ldi	r18, 0x14	; 20
    1600:	fc 01       	movw	r30, r24
    1602:	20 83       	st	Z, r18
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	01 97       	sbiw	r24, 0x01	; 1
    160a:	9c 83       	std	Y+4, r25	; 0x04
    160c:	8b 83       	std	Y+3, r24	; 0x03
    160e:	8b 81       	ldd	r24, Y+3	; 0x03
    1610:	9c 81       	ldd	r25, Y+4	; 0x04
    1612:	25 e1       	ldi	r18, 0x15	; 21
    1614:	fc 01       	movw	r30, r24
    1616:	20 83       	st	Z, r18
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	8b 81       	ldd	r24, Y+3	; 0x03
    1624:	9c 81       	ldd	r25, Y+4	; 0x04
    1626:	26 e1       	ldi	r18, 0x16	; 22
    1628:	fc 01       	movw	r30, r24
    162a:	20 83       	st	Z, r18
    162c:	8b 81       	ldd	r24, Y+3	; 0x03
    162e:	9c 81       	ldd	r25, Y+4	; 0x04
    1630:	01 97       	sbiw	r24, 0x01	; 1
    1632:	9c 83       	std	Y+4, r25	; 0x04
    1634:	8b 83       	std	Y+3, r24	; 0x03
    1636:	8b 81       	ldd	r24, Y+3	; 0x03
    1638:	9c 81       	ldd	r25, Y+4	; 0x04
    163a:	27 e1       	ldi	r18, 0x17	; 23
    163c:	fc 01       	movw	r30, r24
    163e:	20 83       	st	Z, r18
    1640:	8b 81       	ldd	r24, Y+3	; 0x03
    1642:	9c 81       	ldd	r25, Y+4	; 0x04
    1644:	01 97       	sbiw	r24, 0x01	; 1
    1646:	9c 83       	std	Y+4, r25	; 0x04
    1648:	8b 83       	std	Y+3, r24	; 0x03
    164a:	8b 81       	ldd	r24, Y+3	; 0x03
    164c:	9c 81       	ldd	r25, Y+4	; 0x04
    164e:	28 e1       	ldi	r18, 0x18	; 24
    1650:	fc 01       	movw	r30, r24
    1652:	20 83       	st	Z, r18
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	9c 83       	std	Y+4, r25	; 0x04
    165c:	8b 83       	std	Y+3, r24	; 0x03
    165e:	8b 81       	ldd	r24, Y+3	; 0x03
    1660:	9c 81       	ldd	r25, Y+4	; 0x04
    1662:	29 e1       	ldi	r18, 0x19	; 25
    1664:	fc 01       	movw	r30, r24
    1666:	20 83       	st	Z, r18
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	01 97       	sbiw	r24, 0x01	; 1
    166e:	9c 83       	std	Y+4, r25	; 0x04
    1670:	8b 83       	std	Y+3, r24	; 0x03
    1672:	8b 81       	ldd	r24, Y+3	; 0x03
    1674:	9c 81       	ldd	r25, Y+4	; 0x04
    1676:	20 e2       	ldi	r18, 0x20	; 32
    1678:	fc 01       	movw	r30, r24
    167a:	20 83       	st	Z, r18
    167c:	8b 81       	ldd	r24, Y+3	; 0x03
    167e:	9c 81       	ldd	r25, Y+4	; 0x04
    1680:	01 97       	sbiw	r24, 0x01	; 1
    1682:	9c 83       	std	Y+4, r25	; 0x04
    1684:	8b 83       	std	Y+3, r24	; 0x03
    1686:	8b 81       	ldd	r24, Y+3	; 0x03
    1688:	9c 81       	ldd	r25, Y+4	; 0x04
    168a:	21 e2       	ldi	r18, 0x21	; 33
    168c:	fc 01       	movw	r30, r24
    168e:	20 83       	st	Z, r18
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	9c 81       	ldd	r25, Y+4	; 0x04
    1694:	01 97       	sbiw	r24, 0x01	; 1
    1696:	9c 83       	std	Y+4, r25	; 0x04
    1698:	8b 83       	std	Y+3, r24	; 0x03
    169a:	8b 81       	ldd	r24, Y+3	; 0x03
    169c:	9c 81       	ldd	r25, Y+4	; 0x04
    169e:	22 e2       	ldi	r18, 0x22	; 34
    16a0:	fc 01       	movw	r30, r24
    16a2:	20 83       	st	Z, r18
    16a4:	8b 81       	ldd	r24, Y+3	; 0x03
    16a6:	9c 81       	ldd	r25, Y+4	; 0x04
    16a8:	01 97       	sbiw	r24, 0x01	; 1
    16aa:	9c 83       	std	Y+4, r25	; 0x04
    16ac:	8b 83       	std	Y+3, r24	; 0x03
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	9c 81       	ldd	r25, Y+4	; 0x04
    16b2:	23 e2       	ldi	r18, 0x23	; 35
    16b4:	fc 01       	movw	r30, r24
    16b6:	20 83       	st	Z, r18
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	9c 83       	std	Y+4, r25	; 0x04
    16c0:	8b 83       	std	Y+3, r24	; 0x03
    16c2:	8f 81       	ldd	r24, Y+7	; 0x07
    16c4:	98 85       	ldd	r25, Y+8	; 0x08
    16c6:	9a 83       	std	Y+2, r25	; 0x02
    16c8:	89 83       	std	Y+1, r24	; 0x01
    16ca:	29 81       	ldd	r18, Y+1	; 0x01
    16cc:	8b 81       	ldd	r24, Y+3	; 0x03
    16ce:	9c 81       	ldd	r25, Y+4	; 0x04
    16d0:	fc 01       	movw	r30, r24
    16d2:	20 83       	st	Z, r18
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	9c 81       	ldd	r25, Y+4	; 0x04
    16d8:	01 97       	sbiw	r24, 0x01	; 1
    16da:	9c 83       	std	Y+4, r25	; 0x04
    16dc:	8b 83       	std	Y+3, r24	; 0x03
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	89 2f       	mov	r24, r25
    16e4:	99 27       	eor	r25, r25
    16e6:	9a 83       	std	Y+2, r25	; 0x02
    16e8:	89 83       	std	Y+1, r24	; 0x01
    16ea:	29 81       	ldd	r18, Y+1	; 0x01
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
    16f4:	8b 81       	ldd	r24, Y+3	; 0x03
    16f6:	9c 81       	ldd	r25, Y+4	; 0x04
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	9c 83       	std	Y+4, r25	; 0x04
    16fc:	8b 83       	std	Y+3, r24	; 0x03
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	9c 81       	ldd	r25, Y+4	; 0x04
    1702:	26 e2       	ldi	r18, 0x26	; 38
    1704:	fc 01       	movw	r30, r24
    1706:	20 83       	st	Z, r18
    1708:	8b 81       	ldd	r24, Y+3	; 0x03
    170a:	9c 81       	ldd	r25, Y+4	; 0x04
    170c:	01 97       	sbiw	r24, 0x01	; 1
    170e:	9c 83       	std	Y+4, r25	; 0x04
    1710:	8b 83       	std	Y+3, r24	; 0x03
    1712:	8b 81       	ldd	r24, Y+3	; 0x03
    1714:	9c 81       	ldd	r25, Y+4	; 0x04
    1716:	27 e2       	ldi	r18, 0x27	; 39
    1718:	fc 01       	movw	r30, r24
    171a:	20 83       	st	Z, r18
    171c:	8b 81       	ldd	r24, Y+3	; 0x03
    171e:	9c 81       	ldd	r25, Y+4	; 0x04
    1720:	01 97       	sbiw	r24, 0x01	; 1
    1722:	9c 83       	std	Y+4, r25	; 0x04
    1724:	8b 83       	std	Y+3, r24	; 0x03
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	28 e2       	ldi	r18, 0x28	; 40
    172c:	fc 01       	movw	r30, r24
    172e:	20 83       	st	Z, r18
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	29 e2       	ldi	r18, 0x29	; 41
    1740:	fc 01       	movw	r30, r24
    1742:	20 83       	st	Z, r18
    1744:	8b 81       	ldd	r24, Y+3	; 0x03
    1746:	9c 81       	ldd	r25, Y+4	; 0x04
    1748:	01 97       	sbiw	r24, 0x01	; 1
    174a:	9c 83       	std	Y+4, r25	; 0x04
    174c:	8b 83       	std	Y+3, r24	; 0x03
    174e:	8b 81       	ldd	r24, Y+3	; 0x03
    1750:	9c 81       	ldd	r25, Y+4	; 0x04
    1752:	20 e3       	ldi	r18, 0x30	; 48
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
    1758:	8b 81       	ldd	r24, Y+3	; 0x03
    175a:	9c 81       	ldd	r25, Y+4	; 0x04
    175c:	01 97       	sbiw	r24, 0x01	; 1
    175e:	9c 83       	std	Y+4, r25	; 0x04
    1760:	8b 83       	std	Y+3, r24	; 0x03
    1762:	8b 81       	ldd	r24, Y+3	; 0x03
    1764:	9c 81       	ldd	r25, Y+4	; 0x04
    1766:	21 e3       	ldi	r18, 0x31	; 49
    1768:	fc 01       	movw	r30, r24
    176a:	20 83       	st	Z, r18
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	9c 81       	ldd	r25, Y+4	; 0x04
    1770:	01 97       	sbiw	r24, 0x01	; 1
    1772:	9c 83       	std	Y+4, r25	; 0x04
    1774:	8b 83       	std	Y+3, r24	; 0x03
    1776:	8b 81       	ldd	r24, Y+3	; 0x03
    1778:	9c 81       	ldd	r25, Y+4	; 0x04
    177a:	28 96       	adiw	r28, 0x08	; 8
    177c:	0f b6       	in	r0, 0x3f	; 63
    177e:	f8 94       	cli
    1780:	de bf       	out	0x3e, r29	; 62
    1782:	0f be       	out	0x3f, r0	; 63
    1784:	cd bf       	out	0x3d, r28	; 61
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	08 95       	ret

0000178c <xPortStartScheduler>:
    178c:	cf 93       	push	r28
    178e:	df 93       	push	r29
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
    1794:	0e 94 b1 0c 	call	0x1962	; 0x1962 <prvSetupTimerInterrupt>
    1798:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <pxCurrentTCB>
    179c:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    17a0:	cd 91       	ld	r28, X+
    17a2:	cd bf       	out	0x3d, r28	; 61
    17a4:	dd 91       	ld	r29, X+
    17a6:	de bf       	out	0x3e, r29	; 62
    17a8:	ff 91       	pop	r31
    17aa:	ef 91       	pop	r30
    17ac:	df 91       	pop	r29
    17ae:	cf 91       	pop	r28
    17b0:	bf 91       	pop	r27
    17b2:	af 91       	pop	r26
    17b4:	9f 91       	pop	r25
    17b6:	8f 91       	pop	r24
    17b8:	7f 91       	pop	r23
    17ba:	6f 91       	pop	r22
    17bc:	5f 91       	pop	r21
    17be:	4f 91       	pop	r20
    17c0:	3f 91       	pop	r19
    17c2:	2f 91       	pop	r18
    17c4:	1f 91       	pop	r17
    17c6:	0f 91       	pop	r16
    17c8:	ff 90       	pop	r15
    17ca:	ef 90       	pop	r14
    17cc:	df 90       	pop	r13
    17ce:	cf 90       	pop	r12
    17d0:	bf 90       	pop	r11
    17d2:	af 90       	pop	r10
    17d4:	9f 90       	pop	r9
    17d6:	8f 90       	pop	r8
    17d8:	7f 90       	pop	r7
    17da:	6f 90       	pop	r6
    17dc:	5f 90       	pop	r5
    17de:	4f 90       	pop	r4
    17e0:	3f 90       	pop	r3
    17e2:	2f 90       	pop	r2
    17e4:	1f 90       	pop	r1
    17e6:	0f 90       	pop	r0
    17e8:	0f be       	out	0x3f, r0	; 63
    17ea:	0f 90       	pop	r0
    17ec:	08 95       	ret
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	df 91       	pop	r29
    17f2:	cf 91       	pop	r28
    17f4:	08 95       	ret

000017f6 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    17f6:	0f 92       	push	r0
    17f8:	0f b6       	in	r0, 0x3f	; 63
    17fa:	f8 94       	cli
    17fc:	0f 92       	push	r0
    17fe:	1f 92       	push	r1
    1800:	11 24       	eor	r1, r1
    1802:	2f 92       	push	r2
    1804:	3f 92       	push	r3
    1806:	4f 92       	push	r4
    1808:	5f 92       	push	r5
    180a:	6f 92       	push	r6
    180c:	7f 92       	push	r7
    180e:	8f 92       	push	r8
    1810:	9f 92       	push	r9
    1812:	af 92       	push	r10
    1814:	bf 92       	push	r11
    1816:	cf 92       	push	r12
    1818:	df 92       	push	r13
    181a:	ef 92       	push	r14
    181c:	ff 92       	push	r15
    181e:	0f 93       	push	r16
    1820:	1f 93       	push	r17
    1822:	2f 93       	push	r18
    1824:	3f 93       	push	r19
    1826:	4f 93       	push	r20
    1828:	5f 93       	push	r21
    182a:	6f 93       	push	r22
    182c:	7f 93       	push	r23
    182e:	8f 93       	push	r24
    1830:	9f 93       	push	r25
    1832:	af 93       	push	r26
    1834:	bf 93       	push	r27
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	ef 93       	push	r30
    183c:	ff 93       	push	r31
    183e:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <pxCurrentTCB>
    1842:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    1846:	0d b6       	in	r0, 0x3d	; 61
    1848:	0d 92       	st	X+, r0
    184a:	0e b6       	in	r0, 0x3e	; 62
    184c:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    184e:	0e 94 19 19 	call	0x3232	; 0x3232 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1852:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <pxCurrentTCB>
    1856:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    185a:	cd 91       	ld	r28, X+
    185c:	cd bf       	out	0x3d, r28	; 61
    185e:	dd 91       	ld	r29, X+
    1860:	de bf       	out	0x3e, r29	; 62
    1862:	ff 91       	pop	r31
    1864:	ef 91       	pop	r30
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	bf 91       	pop	r27
    186c:	af 91       	pop	r26
    186e:	9f 91       	pop	r25
    1870:	8f 91       	pop	r24
    1872:	7f 91       	pop	r23
    1874:	6f 91       	pop	r22
    1876:	5f 91       	pop	r21
    1878:	4f 91       	pop	r20
    187a:	3f 91       	pop	r19
    187c:	2f 91       	pop	r18
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	ff 90       	pop	r15
    1884:	ef 90       	pop	r14
    1886:	df 90       	pop	r13
    1888:	cf 90       	pop	r12
    188a:	bf 90       	pop	r11
    188c:	af 90       	pop	r10
    188e:	9f 90       	pop	r9
    1890:	8f 90       	pop	r8
    1892:	7f 90       	pop	r7
    1894:	6f 90       	pop	r6
    1896:	5f 90       	pop	r5
    1898:	4f 90       	pop	r4
    189a:	3f 90       	pop	r3
    189c:	2f 90       	pop	r2
    189e:	1f 90       	pop	r1
    18a0:	0f 90       	pop	r0
    18a2:	0f be       	out	0x3f, r0	; 63
    18a4:	0f 90       	pop	r0

	asm volatile ( "ret" );
    18a6:	08 95       	ret

000018a8 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    18a8:	0f 92       	push	r0
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	0f 92       	push	r0
    18b0:	1f 92       	push	r1
    18b2:	11 24       	eor	r1, r1
    18b4:	2f 92       	push	r2
    18b6:	3f 92       	push	r3
    18b8:	4f 92       	push	r4
    18ba:	5f 92       	push	r5
    18bc:	6f 92       	push	r6
    18be:	7f 92       	push	r7
    18c0:	8f 92       	push	r8
    18c2:	9f 92       	push	r9
    18c4:	af 92       	push	r10
    18c6:	bf 92       	push	r11
    18c8:	cf 92       	push	r12
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	2f 93       	push	r18
    18d6:	3f 93       	push	r19
    18d8:	4f 93       	push	r20
    18da:	5f 93       	push	r21
    18dc:	6f 93       	push	r22
    18de:	7f 93       	push	r23
    18e0:	8f 93       	push	r24
    18e2:	9f 93       	push	r25
    18e4:	af 93       	push	r26
    18e6:	bf 93       	push	r27
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	ef 93       	push	r30
    18ee:	ff 93       	push	r31
    18f0:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <pxCurrentTCB>
    18f4:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    18f8:	0d b6       	in	r0, 0x3d	; 61
    18fa:	0d 92       	st	X+, r0
    18fc:	0e b6       	in	r0, 0x3e	; 62
    18fe:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1900:	0e 94 2d 18 	call	0x305a	; 0x305a <xTaskIncrementTick>
    1904:	88 23       	and	r24, r24
    1906:	11 f0       	breq	.+4      	; 0x190c <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1908:	0e 94 19 19 	call	0x3232	; 0x3232 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    190c:	a0 91 88 05 	lds	r26, 0x0588	; 0x800588 <pxCurrentTCB>
    1910:	b0 91 89 05 	lds	r27, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    1914:	cd 91       	ld	r28, X+
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	dd 91       	ld	r29, X+
    191a:	de bf       	out	0x3e, r29	; 62
    191c:	ff 91       	pop	r31
    191e:	ef 91       	pop	r30
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	bf 91       	pop	r27
    1926:	af 91       	pop	r26
    1928:	9f 91       	pop	r25
    192a:	8f 91       	pop	r24
    192c:	7f 91       	pop	r23
    192e:	6f 91       	pop	r22
    1930:	5f 91       	pop	r21
    1932:	4f 91       	pop	r20
    1934:	3f 91       	pop	r19
    1936:	2f 91       	pop	r18
    1938:	1f 91       	pop	r17
    193a:	0f 91       	pop	r16
    193c:	ff 90       	pop	r15
    193e:	ef 90       	pop	r14
    1940:	df 90       	pop	r13
    1942:	cf 90       	pop	r12
    1944:	bf 90       	pop	r11
    1946:	af 90       	pop	r10
    1948:	9f 90       	pop	r9
    194a:	8f 90       	pop	r8
    194c:	7f 90       	pop	r7
    194e:	6f 90       	pop	r6
    1950:	5f 90       	pop	r5
    1952:	4f 90       	pop	r4
    1954:	3f 90       	pop	r3
    1956:	2f 90       	pop	r2
    1958:	1f 90       	pop	r1
    195a:	0f 90       	pop	r0
    195c:	0f be       	out	0x3f, r0	; 63
    195e:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1960:	08 95       	ret

00001962 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1962:	cf 93       	push	r28
    1964:	df 93       	push	r29
    1966:	00 d0       	rcall	.+0      	; 0x1968 <prvSetupTimerInterrupt+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <prvSetupTimerInterrupt+0x8>
    196a:	00 d0       	rcall	.+0      	; 0x196c <prvSetupTimerInterrupt+0xa>
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1970:	89 e9       	ldi	r24, 0x99	; 153
    1972:	99 e3       	ldi	r25, 0x39	; 57
    1974:	a0 e0       	ldi	r26, 0x00	; 0
    1976:	b0 e0       	ldi	r27, 0x00	; 0
    1978:	89 83       	std	Y+1, r24	; 0x01
    197a:	9a 83       	std	Y+2, r25	; 0x02
    197c:	ab 83       	std	Y+3, r26	; 0x03
    197e:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1980:	89 81       	ldd	r24, Y+1	; 0x01
    1982:	9a 81       	ldd	r25, Y+2	; 0x02
    1984:	ab 81       	ldd	r26, Y+3	; 0x03
    1986:	bc 81       	ldd	r27, Y+4	; 0x04
    1988:	68 94       	set
    198a:	15 f8       	bld	r1, 5
    198c:	b6 95       	lsr	r27
    198e:	a7 95       	ror	r26
    1990:	97 95       	ror	r25
    1992:	87 95       	ror	r24
    1994:	16 94       	lsr	r1
    1996:	d1 f7       	brne	.-12     	; 0x198c <prvSetupTimerInterrupt+0x2a>
    1998:	89 83       	std	Y+1, r24	; 0x01
    199a:	9a 83       	std	Y+2, r25	; 0x02
    199c:	ab 83       	std	Y+3, r26	; 0x03
    199e:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    19a0:	89 81       	ldd	r24, Y+1	; 0x01
    19a2:	9a 81       	ldd	r25, Y+2	; 0x02
    19a4:	ab 81       	ldd	r26, Y+3	; 0x03
    19a6:	bc 81       	ldd	r27, Y+4	; 0x04
    19a8:	01 97       	sbiw	r24, 0x01	; 1
    19aa:	a1 09       	sbc	r26, r1
    19ac:	b1 09       	sbc	r27, r1
    19ae:	89 83       	std	Y+1, r24	; 0x01
    19b0:	9a 83       	std	Y+2, r25	; 0x02
    19b2:	ab 83       	std	Y+3, r26	; 0x03
    19b4:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	ab 81       	ldd	r26, Y+3	; 0x03
    19c0:	bc 81       	ldd	r27, Y+4	; 0x04
    19c2:	89 2f       	mov	r24, r25
    19c4:	9a 2f       	mov	r25, r26
    19c6:	ab 2f       	mov	r26, r27
    19c8:	bb 27       	eor	r27, r27
    19ca:	89 83       	std	Y+1, r24	; 0x01
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	ab 83       	std	Y+3, r26	; 0x03
    19d0:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    19d6:	89 e8       	ldi	r24, 0x89	; 137
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	2e 81       	ldd	r18, Y+6	; 0x06
    19dc:	fc 01       	movw	r30, r24
    19de:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    19e0:	88 e8       	ldi	r24, 0x88	; 136
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	2d 81       	ldd	r18, Y+5	; 0x05
    19e6:	fc 01       	movw	r30, r24
    19e8:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    19ea:	8b e0       	ldi	r24, 0x0B	; 11
    19ec:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    19ee:	81 e8       	ldi	r24, 0x81	; 129
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	2d 81       	ldd	r18, Y+5	; 0x05
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    19f8:	8f e6       	ldi	r24, 0x6F	; 111
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	fc 01       	movw	r30, r24
    19fe:	80 81       	ld	r24, Z
    1a00:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1a02:	8d 81       	ldd	r24, Y+5	; 0x05
    1a04:	82 60       	ori	r24, 0x02	; 2
    1a06:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1a08:	8f e6       	ldi	r24, 0x6F	; 111
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a0e:	fc 01       	movw	r30, r24
    1a10:	20 83       	st	Z, r18
}
    1a12:	26 96       	adiw	r28, 0x06	; 6
    1a14:	0f b6       	in	r0, 0x3f	; 63
    1a16:	f8 94       	cli
    1a18:	de bf       	out	0x3e, r29	; 62
    1a1a:	0f be       	out	0x3f, r0	; 63
    1a1c:	cd bf       	out	0x3d, r28	; 61
    1a1e:	df 91       	pop	r29
    1a20:	cf 91       	pop	r28
    1a22:	08 95       	ret

00001a24 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1a24:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1a28:	18 95       	reti

00001a2a <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <pvPortMalloc+0x6>
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <pvPortMalloc+0x8>
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	9c 83       	std	Y+4, r25	; 0x04
    1a38:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1a3a:	1a 82       	std	Y+2, r1	; 0x02
    1a3c:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1a3e:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1a42:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <pucAlignedHeap.1965>
    1a46:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <pucAlignedHeap.1965+0x1>
    1a4a:	89 2b       	or	r24, r25
    1a4c:	31 f4       	brne	.+12     	; 0x1a5a <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1a4e:	89 e9       	ldi	r24, 0x99	; 153
    1a50:	91 e0       	ldi	r25, 0x01	; 1
    1a52:	90 93 83 05 	sts	0x0583, r25	; 0x800583 <pucAlignedHeap.1965+0x1>
    1a56:	80 93 82 05 	sts	0x0582, r24	; 0x800582 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1a5a:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <xNextFreeByte>
    1a5e:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <xNextFreeByte+0x1>
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	82 0f       	add	r24, r18
    1a68:	93 1f       	adc	r25, r19
    1a6a:	87 3e       	cpi	r24, 0xE7	; 231
    1a6c:	93 40       	sbci	r25, 0x03	; 3
    1a6e:	38 f5       	brcc	.+78     	; 0x1abe <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1a70:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <xNextFreeByte>
    1a74:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <xNextFreeByte+0x1>
    1a78:	8b 81       	ldd	r24, Y+3	; 0x03
    1a7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a7c:	28 0f       	add	r18, r24
    1a7e:	39 1f       	adc	r19, r25
    1a80:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <xNextFreeByte>
    1a84:	90 91 81 05 	lds	r25, 0x0581	; 0x800581 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1a88:	82 17       	cp	r24, r18
    1a8a:	93 07       	cpc	r25, r19
    1a8c:	c0 f4       	brcc	.+48     	; 0x1abe <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1a8e:	20 91 82 05 	lds	r18, 0x0582	; 0x800582 <pucAlignedHeap.1965>
    1a92:	30 91 83 05 	lds	r19, 0x0583	; 0x800583 <pucAlignedHeap.1965+0x1>
    1a96:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <xNextFreeByte>
    1a9a:	90 91 81 05 	lds	r25, 0x0581	; 0x800581 <xNextFreeByte+0x1>
    1a9e:	82 0f       	add	r24, r18
    1aa0:	93 1f       	adc	r25, r19
    1aa2:	9a 83       	std	Y+2, r25	; 0x02
    1aa4:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1aa6:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <xNextFreeByte>
    1aaa:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <xNextFreeByte+0x1>
    1aae:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab2:	82 0f       	add	r24, r18
    1ab4:	93 1f       	adc	r25, r19
    1ab6:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <xNextFreeByte+0x1>
    1aba:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1abe:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1ac2:	89 81       	ldd	r24, Y+1	; 0x01
    1ac4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ac6:	0f 90       	pop	r0
    1ac8:	0f 90       	pop	r0
    1aca:	0f 90       	pop	r0
    1acc:	0f 90       	pop	r0
    1ace:	df 91       	pop	r29
    1ad0:	cf 91       	pop	r28
    1ad2:	08 95       	ret

00001ad4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1ad4:	cf 93       	push	r28
    1ad6:	df 93       	push	r29
    1ad8:	00 d0       	rcall	.+0      	; 0x1ada <vPortFree+0x6>
    1ada:	cd b7       	in	r28, 0x3d	; 61
    1adc:	de b7       	in	r29, 0x3e	; 62
    1ade:	9a 83       	std	Y+2, r25	; 0x02
    1ae0:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1ae2:	0f 90       	pop	r0
    1ae4:	0f 90       	pop	r0
    1ae6:	df 91       	pop	r29
    1ae8:	cf 91       	pop	r28
    1aea:	08 95       	ret

00001aec <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1aec:	8f 92       	push	r8
    1aee:	9f 92       	push	r9
    1af0:	af 92       	push	r10
    1af2:	bf 92       	push	r11
    1af4:	cf 92       	push	r12
    1af6:	df 92       	push	r13
    1af8:	ef 92       	push	r14
    1afa:	0f 93       	push	r16
    1afc:	1f 93       	push	r17
    1afe:	cf 93       	push	r28
    1b00:	df 93       	push	r29
    1b02:	cd b7       	in	r28, 0x3d	; 61
    1b04:	de b7       	in	r29, 0x3e	; 62
    1b06:	65 97       	sbiw	r28, 0x15	; 21
    1b08:	0f b6       	in	r0, 0x3f	; 63
    1b0a:	f8 94       	cli
    1b0c:	de bf       	out	0x3e, r29	; 62
    1b0e:	0f be       	out	0x3f, r0	; 63
    1b10:	cd bf       	out	0x3d, r28	; 61
    1b12:	8c 83       	std	Y+4, r24	; 0x04
    1b14:	4d 83       	std	Y+5, r20	; 0x05
    1b16:	5e 83       	std	Y+6, r21	; 0x06
    1b18:	6f 83       	std	Y+7, r22	; 0x07
    1b1a:	78 87       	std	Y+8, r23	; 0x08
    1b1c:	29 87       	std	Y+9, r18	; 0x09
    1b1e:	0a 87       	std	Y+10, r16	; 0x0a
    1b20:	eb 86       	std	Y+11, r14	; 0x0b
    1b22:	dd 86       	std	Y+13, r13	; 0x0d
    1b24:	cc 86       	std	Y+12, r12	; 0x0c
    1b26:	bf 86       	std	Y+15, r11	; 0x0f
    1b28:	ae 86       	std	Y+14, r10	; 0x0e
    1b2a:	99 8a       	std	Y+17, r9	; 0x11
    1b2c:	88 8a       	std	Y+16, r8	; 0x10
    1b2e:	88 e0       	ldi	r24, 0x08	; 8
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	0e 94 73 1d 	call	0x3ae6	; 0x3ae6 <malloc>
    1b36:	9a 83       	std	Y+2, r25	; 0x02
    1b38:	89 83       	std	Y+1, r24	; 0x01
    1b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3c:	88 2f       	mov	r24, r24
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	8c 57       	subi	r24, 0x7C	; 124
    1b46:	9a 4f       	sbci	r25, 0xFA	; 250
    1b48:	29 81       	ldd	r18, Y+1	; 0x01
    1b4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	31 83       	std	Z+1, r19	; 0x01
    1b50:	20 83       	st	Z, r18
    1b52:	8c 81       	ldd	r24, Y+4	; 0x04
    1b54:	88 2f       	mov	r24, r24
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	88 0f       	add	r24, r24
    1b5a:	99 1f       	adc	r25, r25
    1b5c:	88 5d       	subi	r24, 0xD8	; 216
    1b5e:	9e 4f       	sbci	r25, 0xFE	; 254
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 81       	ld	r18, Z
    1b64:	31 81       	ldd	r19, Z+1	; 0x01
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	9a 81       	ldd	r25, Y+2	; 0x02
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	31 83       	std	Z+1, r19	; 0x01
    1b6e:	20 83       	st	Z, r18
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	9a 81       	ldd	r25, Y+2	; 0x02
    1b74:	2e 85       	ldd	r18, Y+14	; 0x0e
    1b76:	3f 85       	ldd	r19, Y+15	; 0x0f
    1b78:	fc 01       	movw	r30, r24
    1b7a:	33 83       	std	Z+3, r19	; 0x03
    1b7c:	22 83       	std	Z+2, r18	; 0x02
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	2c 85       	ldd	r18, Y+12	; 0x0c
    1b84:	3d 85       	ldd	r19, Y+13	; 0x0d
    1b86:	fc 01       	movw	r30, r24
    1b88:	35 83       	std	Z+5, r19	; 0x05
    1b8a:	24 83       	std	Z+4, r18	; 0x04
    1b8c:	89 81       	ldd	r24, Y+1	; 0x01
    1b8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b90:	28 89       	ldd	r18, Y+16	; 0x10
    1b92:	39 89       	ldd	r19, Y+17	; 0x11
    1b94:	fc 01       	movw	r30, r24
    1b96:	37 83       	std	Z+7, r19	; 0x07
    1b98:	26 83       	std	Z+6, r18	; 0x06
    1b9a:	8f e5       	ldi	r24, 0x5F	; 95
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	80 81       	ld	r24, Z
    1ba2:	8b 83       	std	Y+3, r24	; 0x03
    1ba4:	f8 94       	cli
    1ba6:	89 81       	ldd	r24, Y+1	; 0x01
    1ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	06 97       	sbiw	r24, 0x06	; 6
    1bb2:	29 81       	ldd	r18, Y+1	; 0x01
    1bb4:	3a 81       	ldd	r19, Y+2	; 0x02
    1bb6:	f9 01       	movw	r30, r18
    1bb8:	20 81       	ld	r18, Z
    1bba:	31 81       	ldd	r19, Z+1	; 0x01
    1bbc:	26 50       	subi	r18, 0x06	; 6
    1bbe:	31 09       	sbc	r19, r1
    1bc0:	f9 01       	movw	r30, r18
    1bc2:	20 81       	ld	r18, Z
    1bc4:	22 60       	ori	r18, 0x02	; 2
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 83       	st	Z, r18
    1bca:	89 81       	ldd	r24, Y+1	; 0x01
    1bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1bce:	fc 01       	movw	r30, r24
    1bd0:	80 81       	ld	r24, Z
    1bd2:	91 81       	ldd	r25, Z+1	; 0x01
    1bd4:	8c 01       	movw	r16, r24
    1bd6:	02 50       	subi	r16, 0x02	; 2
    1bd8:	11 09       	sbc	r17, r1
    1bda:	8d 81       	ldd	r24, Y+5	; 0x05
    1bdc:	9e 81       	ldd	r25, Y+6	; 0x06
    1bde:	af 81       	ldd	r26, Y+7	; 0x07
    1be0:	b8 85       	ldd	r27, Y+8	; 0x08
    1be2:	88 0f       	add	r24, r24
    1be4:	99 1f       	adc	r25, r25
    1be6:	aa 1f       	adc	r26, r26
    1be8:	bb 1f       	adc	r27, r27
    1bea:	88 0f       	add	r24, r24
    1bec:	99 1f       	adc	r25, r25
    1bee:	aa 1f       	adc	r26, r26
    1bf0:	bb 1f       	adc	r27, r27
    1bf2:	88 0f       	add	r24, r24
    1bf4:	99 1f       	adc	r25, r25
    1bf6:	aa 1f       	adc	r26, r26
    1bf8:	bb 1f       	adc	r27, r27
    1bfa:	9c 01       	movw	r18, r24
    1bfc:	ad 01       	movw	r20, r26
    1bfe:	80 e0       	ldi	r24, 0x00	; 0
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	a1 ee       	ldi	r26, 0xE1	; 225
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	bc 01       	movw	r22, r24
    1c08:	cd 01       	movw	r24, r26
    1c0a:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__udivmodsi4>
    1c0e:	da 01       	movw	r26, r20
    1c10:	c9 01       	movw	r24, r18
    1c12:	81 50       	subi	r24, 0x01	; 1
    1c14:	f8 01       	movw	r30, r16
    1c16:	80 83       	st	Z, r24
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	80 81       	ld	r24, Z
    1c20:	91 81       	ldd	r25, Z+1	; 0x01
    1c22:	05 97       	sbiw	r24, 0x05	; 5
    1c24:	28 e9       	ldi	r18, 0x98	; 152
    1c26:	fc 01       	movw	r30, r24
    1c28:	20 83       	st	Z, r18
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	fc 01       	movw	r30, r24
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
    1c34:	04 97       	sbiw	r24, 0x04	; 4
    1c36:	26 e0       	ldi	r18, 0x06	; 6
    1c38:	fc 01       	movw	r30, r24
    1c3a:	20 83       	st	Z, r18
    1c3c:	8f e5       	ldi	r24, 0x5F	; 95
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	2b 81       	ldd	r18, Y+3	; 0x03
    1c42:	fc 01       	movw	r30, r24
    1c44:	20 83       	st	Z, r18
    1c46:	89 81       	ldd	r24, Y+1	; 0x01
    1c48:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4a:	65 96       	adiw	r28, 0x15	; 21
    1c4c:	0f b6       	in	r0, 0x3f	; 63
    1c4e:	f8 94       	cli
    1c50:	de bf       	out	0x3e, r29	; 62
    1c52:	0f be       	out	0x3f, r0	; 63
    1c54:	cd bf       	out	0x3d, r28	; 61
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	1f 91       	pop	r17
    1c5c:	0f 91       	pop	r16
    1c5e:	ef 90       	pop	r14
    1c60:	df 90       	pop	r13
    1c62:	cf 90       	pop	r12
    1c64:	bf 90       	pop	r11
    1c66:	af 90       	pop	r10
    1c68:	9f 90       	pop	r9
    1c6a:	8f 90       	pop	r8
    1c6c:	08 95       	ret

00001c6e <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1c6e:	1f 92       	push	r1
    1c70:	0f 92       	push	r0
    1c72:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c76:	0f 92       	push	r0
    1c78:	11 24       	eor	r1, r1
    1c7a:	2f 93       	push	r18
    1c7c:	3f 93       	push	r19
    1c7e:	4f 93       	push	r20
    1c80:	5f 93       	push	r21
    1c82:	6f 93       	push	r22
    1c84:	7f 93       	push	r23
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
    1c92:	cf 93       	push	r28
    1c94:	df 93       	push	r29
    1c96:	1f 92       	push	r1
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1c9c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1ca0:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1ca4:	89 2b       	or	r24, r25
    1ca6:	31 f1       	breq	.+76     	; 0x1cf4 <__vector_20+0x86>
		item = UDR0;
    1ca8:	86 ec       	ldi	r24, 0xC6	; 198
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	fc 01       	movw	r30, r24
    1cae:	80 81       	ld	r24, Z
    1cb0:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1cb2:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1cb6:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1cba:	fc 01       	movw	r30, r24
    1cbc:	84 81       	ldd	r24, Z+4	; 0x04
    1cbe:	95 81       	ldd	r25, Z+5	; 0x05
    1cc0:	69 81       	ldd	r22, Y+1	; 0x01
    1cc2:	0e 94 78 08 	call	0x10f0	; 0x10f0 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1cc6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1cca:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1cce:	fc 01       	movw	r30, r24
    1cd0:	86 81       	ldd	r24, Z+6	; 0x06
    1cd2:	97 81       	ldd	r25, Z+7	; 0x07
    1cd4:	89 2b       	or	r24, r25
    1cd6:	71 f0       	breq	.+28     	; 0x1cf4 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1cd8:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1cdc:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1ce0:	fc 01       	movw	r30, r24
    1ce2:	26 81       	ldd	r18, Z+6	; 0x06
    1ce4:	37 81       	ldd	r19, Z+7	; 0x07
    1ce6:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1cea:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1cee:	69 81       	ldd	r22, Y+1	; 0x01
    1cf0:	f9 01       	movw	r30, r18
    1cf2:	09 95       	icall
		}
	}
}
    1cf4:	0f 90       	pop	r0
    1cf6:	df 91       	pop	r29
    1cf8:	cf 91       	pop	r28
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	bf 91       	pop	r27
    1d00:	af 91       	pop	r26
    1d02:	9f 91       	pop	r25
    1d04:	8f 91       	pop	r24
    1d06:	7f 91       	pop	r23
    1d08:	6f 91       	pop	r22
    1d0a:	5f 91       	pop	r21
    1d0c:	4f 91       	pop	r20
    1d0e:	3f 91       	pop	r19
    1d10:	2f 91       	pop	r18
    1d12:	0f 90       	pop	r0
    1d14:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d18:	0f 90       	pop	r0
    1d1a:	1f 90       	pop	r1
    1d1c:	18 95       	reti

00001d1e <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1d1e:	1f 92       	push	r1
    1d20:	0f 92       	push	r0
    1d22:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d26:	0f 92       	push	r0
    1d28:	11 24       	eor	r1, r1
    1d2a:	2f 93       	push	r18
    1d2c:	3f 93       	push	r19
    1d2e:	4f 93       	push	r20
    1d30:	5f 93       	push	r21
    1d32:	6f 93       	push	r22
    1d34:	7f 93       	push	r23
    1d36:	8f 93       	push	r24
    1d38:	9f 93       	push	r25
    1d3a:	af 93       	push	r26
    1d3c:	bf 93       	push	r27
    1d3e:	ef 93       	push	r30
    1d40:	ff 93       	push	r31
    1d42:	cf 93       	push	r28
    1d44:	df 93       	push	r29
    1d46:	1f 92       	push	r1
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1d4c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1d50:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1d54:	89 2b       	or	r24, r25
    1d56:	f9 f0       	breq	.+62     	; 0x1d96 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1d58:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle>
    1d5c:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x1>
    1d60:	fc 01       	movw	r30, r24
    1d62:	82 81       	ldd	r24, Z+2	; 0x02
    1d64:	93 81       	ldd	r25, Z+3	; 0x03
    1d66:	9e 01       	movw	r18, r28
    1d68:	2f 5f       	subi	r18, 0xFF	; 255
    1d6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d6c:	b9 01       	movw	r22, r18
    1d6e:	0e 94 30 08 	call	0x1060	; 0x1060 <buffer_get_item>
    1d72:	88 23       	and	r24, r24
    1d74:	31 f4       	brne	.+12     	; 0x1d82 <__vector_21+0x64>
			UDR0 = item;
    1d76:	86 ec       	ldi	r24, 0xC6	; 198
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	29 81       	ldd	r18, Y+1	; 0x01
    1d7c:	fc 01       	movw	r30, r24
    1d7e:	20 83       	st	Z, r18
    1d80:	13 c0       	rjmp	.+38     	; 0x1da8 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1d82:	81 ec       	ldi	r24, 0xC1	; 193
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	21 ec       	ldi	r18, 0xC1	; 193
    1d88:	30 e0       	ldi	r19, 0x00	; 0
    1d8a:	f9 01       	movw	r30, r18
    1d8c:	20 81       	ld	r18, Z
    1d8e:	2f 7d       	andi	r18, 0xDF	; 223
    1d90:	fc 01       	movw	r30, r24
    1d92:	20 83       	st	Z, r18
    1d94:	09 c0       	rjmp	.+18     	; 0x1da8 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1d96:	81 ec       	ldi	r24, 0xC1	; 193
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	21 ec       	ldi	r18, 0xC1	; 193
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	f9 01       	movw	r30, r18
    1da0:	20 81       	ld	r18, Z
    1da2:	2f 7d       	andi	r18, 0xDF	; 223
    1da4:	fc 01       	movw	r30, r24
    1da6:	20 83       	st	Z, r18
	}
}
    1da8:	0f 90       	pop	r0
    1daa:	df 91       	pop	r29
    1dac:	cf 91       	pop	r28
    1dae:	ff 91       	pop	r31
    1db0:	ef 91       	pop	r30
    1db2:	bf 91       	pop	r27
    1db4:	af 91       	pop	r26
    1db6:	9f 91       	pop	r25
    1db8:	8f 91       	pop	r24
    1dba:	7f 91       	pop	r23
    1dbc:	6f 91       	pop	r22
    1dbe:	5f 91       	pop	r21
    1dc0:	4f 91       	pop	r20
    1dc2:	3f 91       	pop	r19
    1dc4:	2f 91       	pop	r18
    1dc6:	0f 90       	pop	r0
    1dc8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1dcc:	0f 90       	pop	r0
    1dce:	1f 90       	pop	r1
    1dd0:	18 95       	reti

00001dd2 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1dd2:	1f 92       	push	r1
    1dd4:	0f 92       	push	r0
    1dd6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1dda:	0f 92       	push	r0
    1ddc:	11 24       	eor	r1, r1
    1dde:	2f 93       	push	r18
    1de0:	3f 93       	push	r19
    1de2:	4f 93       	push	r20
    1de4:	5f 93       	push	r21
    1de6:	6f 93       	push	r22
    1de8:	7f 93       	push	r23
    1dea:	8f 93       	push	r24
    1dec:	9f 93       	push	r25
    1dee:	af 93       	push	r26
    1df0:	bf 93       	push	r27
    1df2:	ef 93       	push	r30
    1df4:	ff 93       	push	r31
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	1f 92       	push	r1
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1e00:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1e04:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1e08:	89 2b       	or	r24, r25
    1e0a:	31 f1       	breq	.+76     	; 0x1e58 <__vector_28+0x86>
		item = UDR1;
    1e0c:	8e ec       	ldi	r24, 0xCE	; 206
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	fc 01       	movw	r30, r24
    1e12:	80 81       	ld	r24, Z
    1e14:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1e16:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1e1a:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1e1e:	fc 01       	movw	r30, r24
    1e20:	84 81       	ldd	r24, Z+4	; 0x04
    1e22:	95 81       	ldd	r25, Z+5	; 0x05
    1e24:	69 81       	ldd	r22, Y+1	; 0x01
    1e26:	0e 94 78 08 	call	0x10f0	; 0x10f0 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1e2a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1e2e:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1e32:	fc 01       	movw	r30, r24
    1e34:	86 81       	ldd	r24, Z+6	; 0x06
    1e36:	97 81       	ldd	r25, Z+7	; 0x07
    1e38:	89 2b       	or	r24, r25
    1e3a:	71 f0       	breq	.+28     	; 0x1e58 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1e3c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1e40:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1e44:	fc 01       	movw	r30, r24
    1e46:	26 81       	ldd	r18, Z+6	; 0x06
    1e48:	37 81       	ldd	r19, Z+7	; 0x07
    1e4a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1e4e:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1e52:	69 81       	ldd	r22, Y+1	; 0x01
    1e54:	f9 01       	movw	r30, r18
    1e56:	09 95       	icall
		}
	}
}
    1e58:	0f 90       	pop	r0
    1e5a:	df 91       	pop	r29
    1e5c:	cf 91       	pop	r28
    1e5e:	ff 91       	pop	r31
    1e60:	ef 91       	pop	r30
    1e62:	bf 91       	pop	r27
    1e64:	af 91       	pop	r26
    1e66:	9f 91       	pop	r25
    1e68:	8f 91       	pop	r24
    1e6a:	7f 91       	pop	r23
    1e6c:	6f 91       	pop	r22
    1e6e:	5f 91       	pop	r21
    1e70:	4f 91       	pop	r20
    1e72:	3f 91       	pop	r19
    1e74:	2f 91       	pop	r18
    1e76:	0f 90       	pop	r0
    1e78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1e7c:	0f 90       	pop	r0
    1e7e:	1f 90       	pop	r1
    1e80:	18 95       	reti

00001e82 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1e82:	1f 92       	push	r1
    1e84:	0f 92       	push	r0
    1e86:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1e8a:	0f 92       	push	r0
    1e8c:	11 24       	eor	r1, r1
    1e8e:	2f 93       	push	r18
    1e90:	3f 93       	push	r19
    1e92:	4f 93       	push	r20
    1e94:	5f 93       	push	r21
    1e96:	6f 93       	push	r22
    1e98:	7f 93       	push	r23
    1e9a:	8f 93       	push	r24
    1e9c:	9f 93       	push	r25
    1e9e:	af 93       	push	r26
    1ea0:	bf 93       	push	r27
    1ea2:	ef 93       	push	r30
    1ea4:	ff 93       	push	r31
    1ea6:	cf 93       	push	r28
    1ea8:	df 93       	push	r29
    1eaa:	1f 92       	push	r1
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1eb0:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1eb4:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1eb8:	89 2b       	or	r24, r25
    1eba:	f9 f0       	breq	.+62     	; 0x1efa <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1ebc:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <_ser_handle+0x2>
    1ec0:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <_ser_handle+0x3>
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	82 81       	ldd	r24, Z+2	; 0x02
    1ec8:	93 81       	ldd	r25, Z+3	; 0x03
    1eca:	9e 01       	movw	r18, r28
    1ecc:	2f 5f       	subi	r18, 0xFF	; 255
    1ece:	3f 4f       	sbci	r19, 0xFF	; 255
    1ed0:	b9 01       	movw	r22, r18
    1ed2:	0e 94 30 08 	call	0x1060	; 0x1060 <buffer_get_item>
    1ed6:	88 23       	and	r24, r24
    1ed8:	31 f4       	brne	.+12     	; 0x1ee6 <__vector_29+0x64>
			UDR1 = item;
    1eda:	8e ec       	ldi	r24, 0xCE	; 206
    1edc:	90 e0       	ldi	r25, 0x00	; 0
    1ede:	29 81       	ldd	r18, Y+1	; 0x01
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	20 83       	st	Z, r18
    1ee4:	13 c0       	rjmp	.+38     	; 0x1f0c <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1ee6:	89 ec       	ldi	r24, 0xC9	; 201
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	29 ec       	ldi	r18, 0xC9	; 201
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	f9 01       	movw	r30, r18
    1ef0:	20 81       	ld	r18, Z
    1ef2:	2f 7d       	andi	r18, 0xDF	; 223
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 83       	st	Z, r18
    1ef8:	09 c0       	rjmp	.+18     	; 0x1f0c <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1efa:	89 ec       	ldi	r24, 0xC9	; 201
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	29 ec       	ldi	r18, 0xC9	; 201
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	f9 01       	movw	r30, r18
    1f04:	20 81       	ld	r18, Z
    1f06:	2f 7d       	andi	r18, 0xDF	; 223
    1f08:	fc 01       	movw	r30, r24
    1f0a:	20 83       	st	Z, r18
	}
}
    1f0c:	0f 90       	pop	r0
    1f0e:	df 91       	pop	r29
    1f10:	cf 91       	pop	r28
    1f12:	ff 91       	pop	r31
    1f14:	ef 91       	pop	r30
    1f16:	bf 91       	pop	r27
    1f18:	af 91       	pop	r26
    1f1a:	9f 91       	pop	r25
    1f1c:	8f 91       	pop	r24
    1f1e:	7f 91       	pop	r23
    1f20:	6f 91       	pop	r22
    1f22:	5f 91       	pop	r21
    1f24:	4f 91       	pop	r20
    1f26:	3f 91       	pop	r19
    1f28:	2f 91       	pop	r18
    1f2a:	0f 90       	pop	r0
    1f2c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1f30:	0f 90       	pop	r0
    1f32:	1f 90       	pop	r1
    1f34:	18 95       	reti

00001f36 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1f36:	cf 93       	push	r28
    1f38:	df 93       	push	r29
    1f3a:	00 d0       	rcall	.+0      	; 0x1f3c <xQueueGenericReset+0x6>
    1f3c:	00 d0       	rcall	.+0      	; 0x1f3e <xQueueGenericReset+0x8>
    1f3e:	1f 92       	push	r1
    1f40:	cd b7       	in	r28, 0x3d	; 61
    1f42:	de b7       	in	r29, 0x3e	; 62
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	8b 83       	std	Y+3, r24	; 0x03
    1f48:	6d 83       	std	Y+5, r22	; 0x05
    1f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f4e:	9a 83       	std	Y+2, r25	; 0x02
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	0f 92       	push	r0
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	80 81       	ld	r24, Z
    1f60:	91 81       	ldd	r25, Z+1	; 0x01
    1f62:	29 81       	ldd	r18, Y+1	; 0x01
    1f64:	3a 81       	ldd	r19, Y+2	; 0x02
    1f66:	f9 01       	movw	r30, r18
    1f68:	23 8d       	ldd	r18, Z+27	; 0x1b
    1f6a:	42 2f       	mov	r20, r18
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	29 81       	ldd	r18, Y+1	; 0x01
    1f70:	3a 81       	ldd	r19, Y+2	; 0x02
    1f72:	f9 01       	movw	r30, r18
    1f74:	24 8d       	ldd	r18, Z+28	; 0x1c
    1f76:	22 2f       	mov	r18, r18
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	42 9f       	mul	r20, r18
    1f7c:	b0 01       	movw	r22, r0
    1f7e:	43 9f       	mul	r20, r19
    1f80:	70 0d       	add	r23, r0
    1f82:	52 9f       	mul	r21, r18
    1f84:	70 0d       	add	r23, r0
    1f86:	11 24       	eor	r1, r1
    1f88:	9b 01       	movw	r18, r22
    1f8a:	28 0f       	add	r18, r24
    1f8c:	39 1f       	adc	r19, r25
    1f8e:	89 81       	ldd	r24, Y+1	; 0x01
    1f90:	9a 81       	ldd	r25, Y+2	; 0x02
    1f92:	fc 01       	movw	r30, r24
    1f94:	33 83       	std	Z+3, r19	; 0x03
    1f96:	22 83       	std	Z+2, r18	; 0x02
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9c:	fc 01       	movw	r30, r24
    1f9e:	12 8e       	std	Z+26, r1	; 0x1a
    1fa0:	89 81       	ldd	r24, Y+1	; 0x01
    1fa2:	9a 81       	ldd	r25, Y+2	; 0x02
    1fa4:	fc 01       	movw	r30, r24
    1fa6:	20 81       	ld	r18, Z
    1fa8:	31 81       	ldd	r19, Z+1	; 0x01
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	9a 81       	ldd	r25, Y+2	; 0x02
    1fae:	fc 01       	movw	r30, r24
    1fb0:	35 83       	std	Z+5, r19	; 0x05
    1fb2:	24 83       	std	Z+4, r18	; 0x04
    1fb4:	89 81       	ldd	r24, Y+1	; 0x01
    1fb6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fb8:	fc 01       	movw	r30, r24
    1fba:	80 81       	ld	r24, Z
    1fbc:	91 81       	ldd	r25, Z+1	; 0x01
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	3a 81       	ldd	r19, Y+2	; 0x02
    1fc2:	f9 01       	movw	r30, r18
    1fc4:	23 8d       	ldd	r18, Z+27	; 0x1b
    1fc6:	22 2f       	mov	r18, r18
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	a9 01       	movw	r20, r18
    1fcc:	41 50       	subi	r20, 0x01	; 1
    1fce:	51 09       	sbc	r21, r1
    1fd0:	29 81       	ldd	r18, Y+1	; 0x01
    1fd2:	3a 81       	ldd	r19, Y+2	; 0x02
    1fd4:	f9 01       	movw	r30, r18
    1fd6:	24 8d       	ldd	r18, Z+28	; 0x1c
    1fd8:	22 2f       	mov	r18, r18
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	42 9f       	mul	r20, r18
    1fde:	b0 01       	movw	r22, r0
    1fe0:	43 9f       	mul	r20, r19
    1fe2:	70 0d       	add	r23, r0
    1fe4:	52 9f       	mul	r21, r18
    1fe6:	70 0d       	add	r23, r0
    1fe8:	11 24       	eor	r1, r1
    1fea:	9b 01       	movw	r18, r22
    1fec:	28 0f       	add	r18, r24
    1fee:	39 1f       	adc	r19, r25
    1ff0:	89 81       	ldd	r24, Y+1	; 0x01
    1ff2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff4:	fc 01       	movw	r30, r24
    1ff6:	37 83       	std	Z+7, r19	; 0x07
    1ff8:	26 83       	std	Z+6, r18	; 0x06
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	9a 81       	ldd	r25, Y+2	; 0x02
    1ffe:	2f ef       	ldi	r18, 0xFF	; 255
    2000:	fc 01       	movw	r30, r24
    2002:	25 8f       	std	Z+29, r18	; 0x1d
    2004:	89 81       	ldd	r24, Y+1	; 0x01
    2006:	9a 81       	ldd	r25, Y+2	; 0x02
    2008:	2f ef       	ldi	r18, 0xFF	; 255
    200a:	fc 01       	movw	r30, r24
    200c:	26 8f       	std	Z+30, r18	; 0x1e
    200e:	8d 81       	ldd	r24, Y+5	; 0x05
    2010:	88 23       	and	r24, r24
    2012:	81 f4       	brne	.+32     	; 0x2034 <xQueueGenericReset+0xfe>
    2014:	89 81       	ldd	r24, Y+1	; 0x01
    2016:	9a 81       	ldd	r25, Y+2	; 0x02
    2018:	fc 01       	movw	r30, r24
    201a:	80 85       	ldd	r24, Z+8	; 0x08
    201c:	88 23       	and	r24, r24
    201e:	a1 f0       	breq	.+40     	; 0x2048 <xQueueGenericReset+0x112>
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	9a 81       	ldd	r25, Y+2	; 0x02
    2024:	08 96       	adiw	r24, 0x08	; 8
    2026:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    202a:	88 23       	and	r24, r24
    202c:	69 f0       	breq	.+26     	; 0x2048 <xQueueGenericReset+0x112>
    202e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2032:	0a c0       	rjmp	.+20     	; 0x2048 <xQueueGenericReset+0x112>
    2034:	89 81       	ldd	r24, Y+1	; 0x01
    2036:	9a 81       	ldd	r25, Y+2	; 0x02
    2038:	08 96       	adiw	r24, 0x08	; 8
    203a:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    203e:	89 81       	ldd	r24, Y+1	; 0x01
    2040:	9a 81       	ldd	r25, Y+2	; 0x02
    2042:	41 96       	adiw	r24, 0x11	; 17
    2044:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    2048:	0f 90       	pop	r0
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	81 e0       	ldi	r24, 0x01	; 1
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	0f 90       	pop	r0
    2056:	0f 90       	pop	r0
    2058:	df 91       	pop	r29
    205a:	cf 91       	pop	r28
    205c:	08 95       	ret

0000205e <xQueueGenericCreate>:
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	29 97       	sbiw	r28, 0x09	; 9
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	8f 83       	std	Y+7, r24	; 0x07
    2078:	68 87       	std	Y+8, r22	; 0x08
    207a:	49 87       	std	Y+9, r20	; 0x09
    207c:	88 85       	ldd	r24, Y+8	; 0x08
    207e:	88 23       	and	r24, r24
    2080:	19 f4       	brne	.+6      	; 0x2088 <xQueueGenericCreate+0x2a>
    2082:	1a 82       	std	Y+2, r1	; 0x02
    2084:	19 82       	std	Y+1, r1	; 0x01
    2086:	0f c0       	rjmp	.+30     	; 0x20a6 <xQueueGenericCreate+0x48>
    2088:	8f 81       	ldd	r24, Y+7	; 0x07
    208a:	48 2f       	mov	r20, r24
    208c:	50 e0       	ldi	r21, 0x00	; 0
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	42 9f       	mul	r20, r18
    2096:	c0 01       	movw	r24, r0
    2098:	43 9f       	mul	r20, r19
    209a:	90 0d       	add	r25, r0
    209c:	52 9f       	mul	r21, r18
    209e:	90 0d       	add	r25, r0
    20a0:	11 24       	eor	r1, r1
    20a2:	9a 83       	std	Y+2, r25	; 0x02
    20a4:	89 83       	std	Y+1, r24	; 0x01
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	81 96       	adiw	r24, 0x21	; 33
    20ac:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <pvPortMalloc>
    20b0:	9c 83       	std	Y+4, r25	; 0x04
    20b2:	8b 83       	std	Y+3, r24	; 0x03
    20b4:	8b 81       	ldd	r24, Y+3	; 0x03
    20b6:	9c 81       	ldd	r25, Y+4	; 0x04
    20b8:	89 2b       	or	r24, r25
    20ba:	81 f0       	breq	.+32     	; 0x20dc <xQueueGenericCreate+0x7e>
    20bc:	8b 81       	ldd	r24, Y+3	; 0x03
    20be:	9c 81       	ldd	r25, Y+4	; 0x04
    20c0:	81 96       	adiw	r24, 0x21	; 33
    20c2:	9e 83       	std	Y+6, r25	; 0x06
    20c4:	8d 83       	std	Y+5, r24	; 0x05
    20c6:	2b 81       	ldd	r18, Y+3	; 0x03
    20c8:	3c 81       	ldd	r19, Y+4	; 0x04
    20ca:	8d 81       	ldd	r24, Y+5	; 0x05
    20cc:	9e 81       	ldd	r25, Y+6	; 0x06
    20ce:	89 01       	movw	r16, r18
    20d0:	29 85       	ldd	r18, Y+9	; 0x09
    20d2:	ac 01       	movw	r20, r24
    20d4:	68 85       	ldd	r22, Y+8	; 0x08
    20d6:	8f 81       	ldd	r24, Y+7	; 0x07
    20d8:	0e 94 7b 10 	call	0x20f6	; 0x20f6 <prvInitialiseNewQueue>
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	29 96       	adiw	r28, 0x09	; 9
    20e2:	0f b6       	in	r0, 0x3f	; 63
    20e4:	f8 94       	cli
    20e6:	de bf       	out	0x3e, r29	; 62
    20e8:	0f be       	out	0x3f, r0	; 63
    20ea:	cd bf       	out	0x3d, r28	; 61
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	08 95       	ret

000020f6 <prvInitialiseNewQueue>:
    20f6:	0f 93       	push	r16
    20f8:	1f 93       	push	r17
    20fa:	cf 93       	push	r28
    20fc:	df 93       	push	r29
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	27 97       	sbiw	r28, 0x07	; 7
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
    210e:	89 83       	std	Y+1, r24	; 0x01
    2110:	6a 83       	std	Y+2, r22	; 0x02
    2112:	5c 83       	std	Y+4, r21	; 0x04
    2114:	4b 83       	std	Y+3, r20	; 0x03
    2116:	2d 83       	std	Y+5, r18	; 0x05
    2118:	1f 83       	std	Y+7, r17	; 0x07
    211a:	0e 83       	std	Y+6, r16	; 0x06
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	88 23       	and	r24, r24
    2120:	41 f4       	brne	.+16     	; 0x2132 <prvInitialiseNewQueue+0x3c>
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	2e 81       	ldd	r18, Y+6	; 0x06
    2128:	3f 81       	ldd	r19, Y+7	; 0x07
    212a:	fc 01       	movw	r30, r24
    212c:	31 83       	std	Z+1, r19	; 0x01
    212e:	20 83       	st	Z, r18
    2130:	07 c0       	rjmp	.+14     	; 0x2140 <prvInitialiseNewQueue+0x4a>
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	9f 81       	ldd	r25, Y+7	; 0x07
    2136:	2b 81       	ldd	r18, Y+3	; 0x03
    2138:	3c 81       	ldd	r19, Y+4	; 0x04
    213a:	fc 01       	movw	r30, r24
    213c:	31 83       	std	Z+1, r19	; 0x01
    213e:	20 83       	st	Z, r18
    2140:	8e 81       	ldd	r24, Y+6	; 0x06
    2142:	9f 81       	ldd	r25, Y+7	; 0x07
    2144:	29 81       	ldd	r18, Y+1	; 0x01
    2146:	fc 01       	movw	r30, r24
    2148:	23 8f       	std	Z+27, r18	; 0x1b
    214a:	8e 81       	ldd	r24, Y+6	; 0x06
    214c:	9f 81       	ldd	r25, Y+7	; 0x07
    214e:	2a 81       	ldd	r18, Y+2	; 0x02
    2150:	fc 01       	movw	r30, r24
    2152:	24 8f       	std	Z+28, r18	; 0x1c
    2154:	8e 81       	ldd	r24, Y+6	; 0x06
    2156:	9f 81       	ldd	r25, Y+7	; 0x07
    2158:	61 e0       	ldi	r22, 0x01	; 1
    215a:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <xQueueGenericReset>
    215e:	8e 81       	ldd	r24, Y+6	; 0x06
    2160:	9f 81       	ldd	r25, Y+7	; 0x07
    2162:	2d 81       	ldd	r18, Y+5	; 0x05
    2164:	fc 01       	movw	r30, r24
    2166:	20 a3       	std	Z+32, r18	; 0x20
    2168:	27 96       	adiw	r28, 0x07	; 7
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	0f 91       	pop	r16
    217c:	08 95       	ret

0000217e <prvInitialiseMutex>:
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	00 d0       	rcall	.+0      	; 0x2184 <prvInitialiseMutex+0x6>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	9a 83       	std	Y+2, r25	; 0x02
    218a:	89 83       	std	Y+1, r24	; 0x01
    218c:	89 81       	ldd	r24, Y+1	; 0x01
    218e:	9a 81       	ldd	r25, Y+2	; 0x02
    2190:	89 2b       	or	r24, r25
    2192:	b9 f0       	breq	.+46     	; 0x21c2 <prvInitialiseMutex+0x44>
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	9a 81       	ldd	r25, Y+2	; 0x02
    2198:	fc 01       	movw	r30, r24
    219a:	13 82       	std	Z+3, r1	; 0x03
    219c:	12 82       	std	Z+2, r1	; 0x02
    219e:	89 81       	ldd	r24, Y+1	; 0x01
    21a0:	9a 81       	ldd	r25, Y+2	; 0x02
    21a2:	fc 01       	movw	r30, r24
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	10 82       	st	Z, r1
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	9a 81       	ldd	r25, Y+2	; 0x02
    21ac:	fc 01       	movw	r30, r24
    21ae:	16 82       	std	Z+6, r1	; 0x06
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	40 e0       	ldi	r20, 0x00	; 0
    21b8:	50 e0       	ldi	r21, 0x00	; 0
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	70 e0       	ldi	r23, 0x00	; 0
    21be:	0e 94 06 11 	call	0x220c	; 0x220c <xQueueGenericSend>
    21c2:	0f 90       	pop	r0
    21c4:	0f 90       	pop	r0
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <xQueueCreateMutex>:
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	00 d0       	rcall	.+0      	; 0x21d2 <xQueueCreateMutex+0x6>
    21d2:	00 d0       	rcall	.+0      	; 0x21d4 <xQueueCreateMutex+0x8>
    21d4:	1f 92       	push	r1
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	81 e0       	ldi	r24, 0x01	; 1
    21de:	89 83       	std	Y+1, r24	; 0x01
    21e0:	1a 82       	std	Y+2, r1	; 0x02
    21e2:	4d 81       	ldd	r20, Y+5	; 0x05
    21e4:	6a 81       	ldd	r22, Y+2	; 0x02
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	0e 94 2f 10 	call	0x205e	; 0x205e <xQueueGenericCreate>
    21ec:	9c 83       	std	Y+4, r25	; 0x04
    21ee:	8b 83       	std	Y+3, r24	; 0x03
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	0e 94 bf 10 	call	0x217e	; 0x217e <prvInitialiseMutex>
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	0f 90       	pop	r0
    21fe:	0f 90       	pop	r0
    2200:	0f 90       	pop	r0
    2202:	0f 90       	pop	r0
    2204:	0f 90       	pop	r0
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	08 95       	ret

0000220c <xQueueGenericSend>:
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	cd b7       	in	r28, 0x3d	; 61
    2212:	de b7       	in	r29, 0x3e	; 62
    2214:	2e 97       	sbiw	r28, 0x0e	; 14
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	99 87       	std	Y+9, r25	; 0x09
    2222:	88 87       	std	Y+8, r24	; 0x08
    2224:	7b 87       	std	Y+11, r23	; 0x0b
    2226:	6a 87       	std	Y+10, r22	; 0x0a
    2228:	5d 87       	std	Y+13, r21	; 0x0d
    222a:	4c 87       	std	Y+12, r20	; 0x0c
    222c:	2e 87       	std	Y+14, r18	; 0x0e
    222e:	19 82       	std	Y+1, r1	; 0x01
    2230:	88 85       	ldd	r24, Y+8	; 0x08
    2232:	99 85       	ldd	r25, Y+9	; 0x09
    2234:	9b 83       	std	Y+3, r25	; 0x03
    2236:	8a 83       	std	Y+2, r24	; 0x02
    2238:	0f b6       	in	r0, 0x3f	; 63
    223a:	f8 94       	cli
    223c:	0f 92       	push	r0
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	fc 01       	movw	r30, r24
    2244:	22 8d       	ldd	r18, Z+26	; 0x1a
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	fc 01       	movw	r30, r24
    224c:	83 8d       	ldd	r24, Z+27	; 0x1b
    224e:	28 17       	cp	r18, r24
    2250:	18 f0       	brcs	.+6      	; 0x2258 <xQueueGenericSend+0x4c>
    2252:	8e 85       	ldd	r24, Y+14	; 0x0e
    2254:	82 30       	cpi	r24, 0x02	; 2
    2256:	11 f5       	brne	.+68     	; 0x229c <xQueueGenericSend+0x90>
    2258:	2a 85       	ldd	r18, Y+10	; 0x0a
    225a:	3b 85       	ldd	r19, Y+11	; 0x0b
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	4e 85       	ldd	r20, Y+14	; 0x0e
    2262:	b9 01       	movw	r22, r18
    2264:	0e 94 0d 13 	call	0x261a	; 0x261a <prvCopyDataToQueue>
    2268:	8c 83       	std	Y+4, r24	; 0x04
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	fc 01       	movw	r30, r24
    2270:	81 89       	ldd	r24, Z+17	; 0x11
    2272:	88 23       	and	r24, r24
    2274:	51 f0       	breq	.+20     	; 0x228a <xQueueGenericSend+0x7e>
    2276:	8a 81       	ldd	r24, Y+2	; 0x02
    2278:	9b 81       	ldd	r25, Y+3	; 0x03
    227a:	41 96       	adiw	r24, 0x11	; 17
    227c:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    2280:	88 23       	and	r24, r24
    2282:	41 f0       	breq	.+16     	; 0x2294 <xQueueGenericSend+0x88>
    2284:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2288:	05 c0       	rjmp	.+10     	; 0x2294 <xQueueGenericSend+0x88>
    228a:	8c 81       	ldd	r24, Y+4	; 0x04
    228c:	88 23       	and	r24, r24
    228e:	11 f0       	breq	.+4      	; 0x2294 <xQueueGenericSend+0x88>
    2290:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2294:	0f 90       	pop	r0
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	81 e0       	ldi	r24, 0x01	; 1
    229a:	61 c0       	rjmp	.+194    	; 0x235e <xQueueGenericSend+0x152>
    229c:	8c 85       	ldd	r24, Y+12	; 0x0c
    229e:	9d 85       	ldd	r25, Y+13	; 0x0d
    22a0:	89 2b       	or	r24, r25
    22a2:	21 f4       	brne	.+8      	; 0x22ac <xQueueGenericSend+0xa0>
    22a4:	0f 90       	pop	r0
    22a6:	0f be       	out	0x3f, r0	; 63
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    22aa:	59 c0       	rjmp	.+178    	; 0x235e <xQueueGenericSend+0x152>
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	88 23       	and	r24, r24
    22b0:	31 f4       	brne	.+12     	; 0x22be <xQueueGenericSend+0xb2>
    22b2:	ce 01       	movw	r24, r28
    22b4:	05 96       	adiw	r24, 0x05	; 5
    22b6:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskSetTimeOutState>
    22ba:	81 e0       	ldi	r24, 0x01	; 1
    22bc:	89 83       	std	Y+1, r24	; 0x01
    22be:	0f 90       	pop	r0
    22c0:	0f be       	out	0x3f, r0	; 63
    22c2:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
    22c6:	0f b6       	in	r0, 0x3f	; 63
    22c8:	f8 94       	cli
    22ca:	0f 92       	push	r0
    22cc:	8a 81       	ldd	r24, Y+2	; 0x02
    22ce:	9b 81       	ldd	r25, Y+3	; 0x03
    22d0:	fc 01       	movw	r30, r24
    22d2:	85 8d       	ldd	r24, Z+29	; 0x1d
    22d4:	8f 3f       	cpi	r24, 0xFF	; 255
    22d6:	21 f4       	brne	.+8      	; 0x22e0 <xQueueGenericSend+0xd4>
    22d8:	8a 81       	ldd	r24, Y+2	; 0x02
    22da:	9b 81       	ldd	r25, Y+3	; 0x03
    22dc:	fc 01       	movw	r30, r24
    22de:	15 8e       	std	Z+29, r1	; 0x1d
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	fc 01       	movw	r30, r24
    22e6:	86 8d       	ldd	r24, Z+30	; 0x1e
    22e8:	8f 3f       	cpi	r24, 0xFF	; 255
    22ea:	21 f4       	brne	.+8      	; 0x22f4 <xQueueGenericSend+0xe8>
    22ec:	8a 81       	ldd	r24, Y+2	; 0x02
    22ee:	9b 81       	ldd	r25, Y+3	; 0x03
    22f0:	fc 01       	movw	r30, r24
    22f2:	16 8e       	std	Z+30, r1	; 0x1e
    22f4:	0f 90       	pop	r0
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	9e 01       	movw	r18, r28
    22fa:	24 5f       	subi	r18, 0xF4	; 244
    22fc:	3f 4f       	sbci	r19, 0xFF	; 255
    22fe:	ce 01       	movw	r24, r28
    2300:	05 96       	adiw	r24, 0x05	; 5
    2302:	b9 01       	movw	r22, r18
    2304:	0e 94 48 1a 	call	0x3490	; 0x3490 <xTaskCheckForTimeOut>
    2308:	88 23       	and	r24, r24
    230a:	01 f5       	brne	.+64     	; 0x234c <xQueueGenericSend+0x140>
    230c:	8a 81       	ldd	r24, Y+2	; 0x02
    230e:	9b 81       	ldd	r25, Y+3	; 0x03
    2310:	0e 94 a8 14 	call	0x2950	; 0x2950 <prvIsQueueFull>
    2314:	88 23       	and	r24, r24
    2316:	99 f0       	breq	.+38     	; 0x233e <xQueueGenericSend+0x132>
    2318:	2c 85       	ldd	r18, Y+12	; 0x0c
    231a:	3d 85       	ldd	r19, Y+13	; 0x0d
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	08 96       	adiw	r24, 0x08	; 8
    2322:	b9 01       	movw	r22, r18
    2324:	0e 94 9e 19 	call	0x333c	; 0x333c <vTaskPlaceOnEventList>
    2328:	8a 81       	ldd	r24, Y+2	; 0x02
    232a:	9b 81       	ldd	r25, Y+3	; 0x03
    232c:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    2330:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    2334:	88 23       	and	r24, r24
    2336:	91 f4       	brne	.+36     	; 0x235c <xQueueGenericSend+0x150>
    2338:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    233c:	0f c0       	rjmp	.+30     	; 0x235c <xQueueGenericSend+0x150>
    233e:	8a 81       	ldd	r24, Y+2	; 0x02
    2340:	9b 81       	ldd	r25, Y+3	; 0x03
    2342:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    2346:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    234a:	76 cf       	rjmp	.-276    	; 0x2238 <xQueueGenericSend+0x2c>
    234c:	8a 81       	ldd	r24, Y+2	; 0x02
    234e:	9b 81       	ldd	r25, Y+3	; 0x03
    2350:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    2354:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	01 c0       	rjmp	.+2      	; 0x235e <xQueueGenericSend+0x152>
    235c:	6d cf       	rjmp	.-294    	; 0x2238 <xQueueGenericSend+0x2c>
    235e:	2e 96       	adiw	r28, 0x0e	; 14
    2360:	0f b6       	in	r0, 0x3f	; 63
    2362:	f8 94       	cli
    2364:	de bf       	out	0x3e, r29	; 62
    2366:	0f be       	out	0x3f, r0	; 63
    2368:	cd bf       	out	0x3d, r28	; 61
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	08 95       	ret

00002370 <xQueueGenericSendFromISR>:
    2370:	cf 93       	push	r28
    2372:	df 93       	push	r29
    2374:	cd b7       	in	r28, 0x3d	; 61
    2376:	de b7       	in	r29, 0x3e	; 62
    2378:	2c 97       	sbiw	r28, 0x0c	; 12
    237a:	0f b6       	in	r0, 0x3f	; 63
    237c:	f8 94       	cli
    237e:	de bf       	out	0x3e, r29	; 62
    2380:	0f be       	out	0x3f, r0	; 63
    2382:	cd bf       	out	0x3d, r28	; 61
    2384:	9f 83       	std	Y+7, r25	; 0x07
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	79 87       	std	Y+9, r23	; 0x09
    238a:	68 87       	std	Y+8, r22	; 0x08
    238c:	5b 87       	std	Y+11, r21	; 0x0b
    238e:	4a 87       	std	Y+10, r20	; 0x0a
    2390:	2c 87       	std	Y+12, r18	; 0x0c
    2392:	8e 81       	ldd	r24, Y+6	; 0x06
    2394:	9f 81       	ldd	r25, Y+7	; 0x07
    2396:	9b 83       	std	Y+3, r25	; 0x03
    2398:	8a 83       	std	Y+2, r24	; 0x02
    239a:	1c 82       	std	Y+4, r1	; 0x04
    239c:	8a 81       	ldd	r24, Y+2	; 0x02
    239e:	9b 81       	ldd	r25, Y+3	; 0x03
    23a0:	fc 01       	movw	r30, r24
    23a2:	22 8d       	ldd	r18, Z+26	; 0x1a
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	9b 81       	ldd	r25, Y+3	; 0x03
    23a8:	fc 01       	movw	r30, r24
    23aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    23ac:	28 17       	cp	r18, r24
    23ae:	18 f0       	brcs	.+6      	; 0x23b6 <xQueueGenericSendFromISR+0x46>
    23b0:	8c 85       	ldd	r24, Y+12	; 0x0c
    23b2:	82 30       	cpi	r24, 0x02	; 2
    23b4:	89 f5       	brne	.+98     	; 0x2418 <xQueueGenericSendFromISR+0xa8>
    23b6:	8a 81       	ldd	r24, Y+2	; 0x02
    23b8:	9b 81       	ldd	r25, Y+3	; 0x03
    23ba:	fc 01       	movw	r30, r24
    23bc:	86 8d       	ldd	r24, Z+30	; 0x1e
    23be:	8d 83       	std	Y+5, r24	; 0x05
    23c0:	28 85       	ldd	r18, Y+8	; 0x08
    23c2:	39 85       	ldd	r19, Y+9	; 0x09
    23c4:	8a 81       	ldd	r24, Y+2	; 0x02
    23c6:	9b 81       	ldd	r25, Y+3	; 0x03
    23c8:	4c 85       	ldd	r20, Y+12	; 0x0c
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 0d 13 	call	0x261a	; 0x261a <prvCopyDataToQueue>
    23d0:	8d 81       	ldd	r24, Y+5	; 0x05
    23d2:	8f 3f       	cpi	r24, 0xFF	; 255
    23d4:	b9 f4       	brne	.+46     	; 0x2404 <xQueueGenericSendFromISR+0x94>
    23d6:	8a 81       	ldd	r24, Y+2	; 0x02
    23d8:	9b 81       	ldd	r25, Y+3	; 0x03
    23da:	fc 01       	movw	r30, r24
    23dc:	81 89       	ldd	r24, Z+17	; 0x11
    23de:	88 23       	and	r24, r24
    23e0:	c1 f0       	breq	.+48     	; 0x2412 <xQueueGenericSendFromISR+0xa2>
    23e2:	8a 81       	ldd	r24, Y+2	; 0x02
    23e4:	9b 81       	ldd	r25, Y+3	; 0x03
    23e6:	41 96       	adiw	r24, 0x11	; 17
    23e8:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    23ec:	88 23       	and	r24, r24
    23ee:	89 f0       	breq	.+34     	; 0x2412 <xQueueGenericSendFromISR+0xa2>
    23f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    23f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    23f4:	89 2b       	or	r24, r25
    23f6:	69 f0       	breq	.+26     	; 0x2412 <xQueueGenericSendFromISR+0xa2>
    23f8:	8a 85       	ldd	r24, Y+10	; 0x0a
    23fa:	9b 85       	ldd	r25, Y+11	; 0x0b
    23fc:	21 e0       	ldi	r18, 0x01	; 1
    23fe:	fc 01       	movw	r30, r24
    2400:	20 83       	st	Z, r18
    2402:	07 c0       	rjmp	.+14     	; 0x2412 <xQueueGenericSendFromISR+0xa2>
    2404:	8d 81       	ldd	r24, Y+5	; 0x05
    2406:	8f 5f       	subi	r24, 0xFF	; 255
    2408:	28 2f       	mov	r18, r24
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	fc 01       	movw	r30, r24
    2410:	26 8f       	std	Z+30, r18	; 0x1e
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	01 c0       	rjmp	.+2      	; 0x241a <xQueueGenericSendFromISR+0xaa>
    2418:	19 82       	std	Y+1, r1	; 0x01
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	2c 96       	adiw	r28, 0x0c	; 12
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	de bf       	out	0x3e, r29	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	cd bf       	out	0x3d, r28	; 61
    2428:	df 91       	pop	r29
    242a:	cf 91       	pop	r28
    242c:	08 95       	ret

0000242e <xQueueGenericReceive>:
    242e:	cf 93       	push	r28
    2430:	df 93       	push	r29
    2432:	cd b7       	in	r28, 0x3d	; 61
    2434:	de b7       	in	r29, 0x3e	; 62
    2436:	60 97       	sbiw	r28, 0x10	; 16
    2438:	0f b6       	in	r0, 0x3f	; 63
    243a:	f8 94       	cli
    243c:	de bf       	out	0x3e, r29	; 62
    243e:	0f be       	out	0x3f, r0	; 63
    2440:	cd bf       	out	0x3d, r28	; 61
    2442:	9b 87       	std	Y+11, r25	; 0x0b
    2444:	8a 87       	std	Y+10, r24	; 0x0a
    2446:	7d 87       	std	Y+13, r23	; 0x0d
    2448:	6c 87       	std	Y+12, r22	; 0x0c
    244a:	5f 87       	std	Y+15, r21	; 0x0f
    244c:	4e 87       	std	Y+14, r20	; 0x0e
    244e:	28 8b       	std	Y+16, r18	; 0x10
    2450:	19 82       	std	Y+1, r1	; 0x01
    2452:	8a 85       	ldd	r24, Y+10	; 0x0a
    2454:	9b 85       	ldd	r25, Y+11	; 0x0b
    2456:	9b 83       	std	Y+3, r25	; 0x03
    2458:	8a 83       	std	Y+2, r24	; 0x02
    245a:	0f b6       	in	r0, 0x3f	; 63
    245c:	f8 94       	cli
    245e:	0f 92       	push	r0
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	fc 01       	movw	r30, r24
    2466:	82 8d       	ldd	r24, Z+26	; 0x1a
    2468:	8c 83       	std	Y+4, r24	; 0x04
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	88 23       	and	r24, r24
    246e:	09 f4       	brne	.+2      	; 0x2472 <xQueueGenericReceive+0x44>
    2470:	51 c0       	rjmp	.+162    	; 0x2514 <xQueueGenericReceive+0xe6>
    2472:	8a 81       	ldd	r24, Y+2	; 0x02
    2474:	9b 81       	ldd	r25, Y+3	; 0x03
    2476:	fc 01       	movw	r30, r24
    2478:	86 81       	ldd	r24, Z+6	; 0x06
    247a:	97 81       	ldd	r25, Z+7	; 0x07
    247c:	9e 83       	std	Y+6, r25	; 0x06
    247e:	8d 83       	std	Y+5, r24	; 0x05
    2480:	2c 85       	ldd	r18, Y+12	; 0x0c
    2482:	3d 85       	ldd	r19, Y+13	; 0x0d
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	b9 01       	movw	r22, r18
    248a:	0e 94 dd 13 	call	0x27ba	; 0x27ba <prvCopyDataFromQueue>
    248e:	88 89       	ldd	r24, Y+16	; 0x10
    2490:	88 23       	and	r24, r24
    2492:	31 f5       	brne	.+76     	; 0x24e0 <xQueueGenericReceive+0xb2>
    2494:	8c 81       	ldd	r24, Y+4	; 0x04
    2496:	2f ef       	ldi	r18, 0xFF	; 255
    2498:	28 0f       	add	r18, r24
    249a:	8a 81       	ldd	r24, Y+2	; 0x02
    249c:	9b 81       	ldd	r25, Y+3	; 0x03
    249e:	fc 01       	movw	r30, r24
    24a0:	22 8f       	std	Z+26, r18	; 0x1a
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	89 2b       	or	r24, r25
    24ae:	41 f4       	brne	.+16     	; 0x24c0 <xQueueGenericReceive+0x92>
    24b0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <pvTaskIncrementMutexHeldCount>
    24b4:	9c 01       	movw	r18, r24
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	fc 01       	movw	r30, r24
    24bc:	33 83       	std	Z+3, r19	; 0x03
    24be:	22 83       	std	Z+2, r18	; 0x02
    24c0:	8a 81       	ldd	r24, Y+2	; 0x02
    24c2:	9b 81       	ldd	r25, Y+3	; 0x03
    24c4:	fc 01       	movw	r30, r24
    24c6:	80 85       	ldd	r24, Z+8	; 0x08
    24c8:	88 23       	and	r24, r24
    24ca:	01 f1       	breq	.+64     	; 0x250c <xQueueGenericReceive+0xde>
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	9b 81       	ldd	r25, Y+3	; 0x03
    24d0:	08 96       	adiw	r24, 0x08	; 8
    24d2:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    24d6:	88 23       	and	r24, r24
    24d8:	c9 f0       	breq	.+50     	; 0x250c <xQueueGenericReceive+0xde>
    24da:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    24de:	16 c0       	rjmp	.+44     	; 0x250c <xQueueGenericReceive+0xde>
    24e0:	8a 81       	ldd	r24, Y+2	; 0x02
    24e2:	9b 81       	ldd	r25, Y+3	; 0x03
    24e4:	2d 81       	ldd	r18, Y+5	; 0x05
    24e6:	3e 81       	ldd	r19, Y+6	; 0x06
    24e8:	fc 01       	movw	r30, r24
    24ea:	37 83       	std	Z+7, r19	; 0x07
    24ec:	26 83       	std	Z+6, r18	; 0x06
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	fc 01       	movw	r30, r24
    24f4:	81 89       	ldd	r24, Z+17	; 0x11
    24f6:	88 23       	and	r24, r24
    24f8:	49 f0       	breq	.+18     	; 0x250c <xQueueGenericReceive+0xde>
    24fa:	8a 81       	ldd	r24, Y+2	; 0x02
    24fc:	9b 81       	ldd	r25, Y+3	; 0x03
    24fe:	41 96       	adiw	r24, 0x11	; 17
    2500:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    2504:	88 23       	and	r24, r24
    2506:	11 f0       	breq	.+4      	; 0x250c <xQueueGenericReceive+0xde>
    2508:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    250c:	0f 90       	pop	r0
    250e:	0f be       	out	0x3f, r0	; 63
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	7a c0       	rjmp	.+244    	; 0x2608 <xQueueGenericReceive+0x1da>
    2514:	8e 85       	ldd	r24, Y+14	; 0x0e
    2516:	9f 85       	ldd	r25, Y+15	; 0x0f
    2518:	89 2b       	or	r24, r25
    251a:	21 f4       	brne	.+8      	; 0x2524 <xQueueGenericReceive+0xf6>
    251c:	0f 90       	pop	r0
    251e:	0f be       	out	0x3f, r0	; 63
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	72 c0       	rjmp	.+228    	; 0x2608 <xQueueGenericReceive+0x1da>
    2524:	89 81       	ldd	r24, Y+1	; 0x01
    2526:	88 23       	and	r24, r24
    2528:	31 f4       	brne	.+12     	; 0x2536 <xQueueGenericReceive+0x108>
    252a:	ce 01       	movw	r24, r28
    252c:	07 96       	adiw	r24, 0x07	; 7
    252e:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskSetTimeOutState>
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	89 83       	std	Y+1, r24	; 0x01
    2536:	0f 90       	pop	r0
    2538:	0f be       	out	0x3f, r0	; 63
    253a:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
    253e:	0f b6       	in	r0, 0x3f	; 63
    2540:	f8 94       	cli
    2542:	0f 92       	push	r0
    2544:	8a 81       	ldd	r24, Y+2	; 0x02
    2546:	9b 81       	ldd	r25, Y+3	; 0x03
    2548:	fc 01       	movw	r30, r24
    254a:	85 8d       	ldd	r24, Z+29	; 0x1d
    254c:	8f 3f       	cpi	r24, 0xFF	; 255
    254e:	21 f4       	brne	.+8      	; 0x2558 <xQueueGenericReceive+0x12a>
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	fc 01       	movw	r30, r24
    2556:	15 8e       	std	Z+29, r1	; 0x1d
    2558:	8a 81       	ldd	r24, Y+2	; 0x02
    255a:	9b 81       	ldd	r25, Y+3	; 0x03
    255c:	fc 01       	movw	r30, r24
    255e:	86 8d       	ldd	r24, Z+30	; 0x1e
    2560:	8f 3f       	cpi	r24, 0xFF	; 255
    2562:	21 f4       	brne	.+8      	; 0x256c <xQueueGenericReceive+0x13e>
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	fc 01       	movw	r30, r24
    256a:	16 8e       	std	Z+30, r1	; 0x1e
    256c:	0f 90       	pop	r0
    256e:	0f be       	out	0x3f, r0	; 63
    2570:	9e 01       	movw	r18, r28
    2572:	22 5f       	subi	r18, 0xF2	; 242
    2574:	3f 4f       	sbci	r19, 0xFF	; 255
    2576:	ce 01       	movw	r24, r28
    2578:	07 96       	adiw	r24, 0x07	; 7
    257a:	b9 01       	movw	r22, r18
    257c:	0e 94 48 1a 	call	0x3490	; 0x3490 <xTaskCheckForTimeOut>
    2580:	88 23       	and	r24, r24
    2582:	99 f5       	brne	.+102    	; 0x25ea <xQueueGenericReceive+0x1bc>
    2584:	8a 81       	ldd	r24, Y+2	; 0x02
    2586:	9b 81       	ldd	r25, Y+3	; 0x03
    2588:	0e 94 8a 14 	call	0x2914	; 0x2914 <prvIsQueueEmpty>
    258c:	88 23       	and	r24, r24
    258e:	31 f1       	breq	.+76     	; 0x25dc <xQueueGenericReceive+0x1ae>
    2590:	8a 81       	ldd	r24, Y+2	; 0x02
    2592:	9b 81       	ldd	r25, Y+3	; 0x03
    2594:	fc 01       	movw	r30, r24
    2596:	80 81       	ld	r24, Z
    2598:	91 81       	ldd	r25, Z+1	; 0x01
    259a:	89 2b       	or	r24, r25
    259c:	61 f4       	brne	.+24     	; 0x25b6 <xQueueGenericReceive+0x188>
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	0f 92       	push	r0
    25a4:	8a 81       	ldd	r24, Y+2	; 0x02
    25a6:	9b 81       	ldd	r25, Y+3	; 0x03
    25a8:	fc 01       	movw	r30, r24
    25aa:	82 81       	ldd	r24, Z+2	; 0x02
    25ac:	93 81       	ldd	r25, Z+3	; 0x03
    25ae:	0e 94 8e 1b 	call	0x371c	; 0x371c <vTaskPriorityInherit>
    25b2:	0f 90       	pop	r0
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	2e 85       	ldd	r18, Y+14	; 0x0e
    25b8:	3f 85       	ldd	r19, Y+15	; 0x0f
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	41 96       	adiw	r24, 0x11	; 17
    25c0:	b9 01       	movw	r22, r18
    25c2:	0e 94 9e 19 	call	0x333c	; 0x333c <vTaskPlaceOnEventList>
    25c6:	8a 81       	ldd	r24, Y+2	; 0x02
    25c8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ca:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    25ce:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    25d2:	88 23       	and	r24, r24
    25d4:	c1 f4       	brne	.+48     	; 0x2606 <xQueueGenericReceive+0x1d8>
    25d6:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    25da:	15 c0       	rjmp	.+42     	; 0x2606 <xQueueGenericReceive+0x1d8>
    25dc:	8a 81       	ldd	r24, Y+2	; 0x02
    25de:	9b 81       	ldd	r25, Y+3	; 0x03
    25e0:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    25e4:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    25e8:	38 cf       	rjmp	.-400    	; 0x245a <xQueueGenericReceive+0x2c>
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	0e 94 2d 14 	call	0x285a	; 0x285a <prvUnlockQueue>
    25f2:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    25f6:	8a 81       	ldd	r24, Y+2	; 0x02
    25f8:	9b 81       	ldd	r25, Y+3	; 0x03
    25fa:	0e 94 8a 14 	call	0x2914	; 0x2914 <prvIsQueueEmpty>
    25fe:	88 23       	and	r24, r24
    2600:	11 f0       	breq	.+4      	; 0x2606 <xQueueGenericReceive+0x1d8>
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	01 c0       	rjmp	.+2      	; 0x2608 <xQueueGenericReceive+0x1da>
    2606:	29 cf       	rjmp	.-430    	; 0x245a <xQueueGenericReceive+0x2c>
    2608:	60 96       	adiw	r28, 0x10	; 16
    260a:	0f b6       	in	r0, 0x3f	; 63
    260c:	f8 94       	cli
    260e:	de bf       	out	0x3e, r29	; 62
    2610:	0f be       	out	0x3f, r0	; 63
    2612:	cd bf       	out	0x3d, r28	; 61
    2614:	df 91       	pop	r29
    2616:	cf 91       	pop	r28
    2618:	08 95       	ret

0000261a <prvCopyDataToQueue>:
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	cd b7       	in	r28, 0x3d	; 61
    2620:	de b7       	in	r29, 0x3e	; 62
    2622:	27 97       	sbiw	r28, 0x07	; 7
    2624:	0f b6       	in	r0, 0x3f	; 63
    2626:	f8 94       	cli
    2628:	de bf       	out	0x3e, r29	; 62
    262a:	0f be       	out	0x3f, r0	; 63
    262c:	cd bf       	out	0x3d, r28	; 61
    262e:	9c 83       	std	Y+4, r25	; 0x04
    2630:	8b 83       	std	Y+3, r24	; 0x03
    2632:	7e 83       	std	Y+6, r23	; 0x06
    2634:	6d 83       	std	Y+5, r22	; 0x05
    2636:	4f 83       	std	Y+7, r20	; 0x07
    2638:	19 82       	std	Y+1, r1	; 0x01
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	fc 01       	movw	r30, r24
    2640:	82 8d       	ldd	r24, Z+26	; 0x1a
    2642:	8a 83       	std	Y+2, r24	; 0x02
    2644:	8b 81       	ldd	r24, Y+3	; 0x03
    2646:	9c 81       	ldd	r25, Y+4	; 0x04
    2648:	fc 01       	movw	r30, r24
    264a:	84 8d       	ldd	r24, Z+28	; 0x1c
    264c:	88 23       	and	r24, r24
    264e:	b1 f4       	brne	.+44     	; 0x267c <prvCopyDataToQueue+0x62>
    2650:	8b 81       	ldd	r24, Y+3	; 0x03
    2652:	9c 81       	ldd	r25, Y+4	; 0x04
    2654:	fc 01       	movw	r30, r24
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	89 2b       	or	r24, r25
    265c:	09 f0       	breq	.+2      	; 0x2660 <prvCopyDataToQueue+0x46>
    265e:	9c c0       	rjmp	.+312    	; 0x2798 <prvCopyDataToQueue+0x17e>
    2660:	8b 81       	ldd	r24, Y+3	; 0x03
    2662:	9c 81       	ldd	r25, Y+4	; 0x04
    2664:	fc 01       	movw	r30, r24
    2666:	82 81       	ldd	r24, Z+2	; 0x02
    2668:	93 81       	ldd	r25, Z+3	; 0x03
    266a:	0e 94 25 1c 	call	0x384a	; 0x384a <xTaskPriorityDisinherit>
    266e:	89 83       	std	Y+1, r24	; 0x01
    2670:	8b 81       	ldd	r24, Y+3	; 0x03
    2672:	9c 81       	ldd	r25, Y+4	; 0x04
    2674:	fc 01       	movw	r30, r24
    2676:	13 82       	std	Z+3, r1	; 0x03
    2678:	12 82       	std	Z+2, r1	; 0x02
    267a:	8e c0       	rjmp	.+284    	; 0x2798 <prvCopyDataToQueue+0x17e>
    267c:	8f 81       	ldd	r24, Y+7	; 0x07
    267e:	88 23       	and	r24, r24
    2680:	d9 f5       	brne	.+118    	; 0x26f8 <prvCopyDataToQueue+0xde>
    2682:	8b 81       	ldd	r24, Y+3	; 0x03
    2684:	9c 81       	ldd	r25, Y+4	; 0x04
    2686:	fc 01       	movw	r30, r24
    2688:	84 8d       	ldd	r24, Z+28	; 0x1c
    268a:	48 2f       	mov	r20, r24
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	fc 01       	movw	r30, r24
    2694:	84 81       	ldd	r24, Z+4	; 0x04
    2696:	95 81       	ldd	r25, Z+5	; 0x05
    2698:	2d 81       	ldd	r18, Y+5	; 0x05
    269a:	3e 81       	ldd	r19, Y+6	; 0x06
    269c:	b9 01       	movw	r22, r18
    269e:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <memcpy>
    26a2:	8b 81       	ldd	r24, Y+3	; 0x03
    26a4:	9c 81       	ldd	r25, Y+4	; 0x04
    26a6:	fc 01       	movw	r30, r24
    26a8:	24 81       	ldd	r18, Z+4	; 0x04
    26aa:	35 81       	ldd	r19, Z+5	; 0x05
    26ac:	8b 81       	ldd	r24, Y+3	; 0x03
    26ae:	9c 81       	ldd	r25, Y+4	; 0x04
    26b0:	fc 01       	movw	r30, r24
    26b2:	84 8d       	ldd	r24, Z+28	; 0x1c
    26b4:	88 2f       	mov	r24, r24
    26b6:	90 e0       	ldi	r25, 0x00	; 0
    26b8:	28 0f       	add	r18, r24
    26ba:	39 1f       	adc	r19, r25
    26bc:	8b 81       	ldd	r24, Y+3	; 0x03
    26be:	9c 81       	ldd	r25, Y+4	; 0x04
    26c0:	fc 01       	movw	r30, r24
    26c2:	35 83       	std	Z+5, r19	; 0x05
    26c4:	24 83       	std	Z+4, r18	; 0x04
    26c6:	8b 81       	ldd	r24, Y+3	; 0x03
    26c8:	9c 81       	ldd	r25, Y+4	; 0x04
    26ca:	fc 01       	movw	r30, r24
    26cc:	24 81       	ldd	r18, Z+4	; 0x04
    26ce:	35 81       	ldd	r19, Z+5	; 0x05
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	fc 01       	movw	r30, r24
    26d6:	82 81       	ldd	r24, Z+2	; 0x02
    26d8:	93 81       	ldd	r25, Z+3	; 0x03
    26da:	28 17       	cp	r18, r24
    26dc:	39 07       	cpc	r19, r25
    26de:	08 f4       	brcc	.+2      	; 0x26e2 <prvCopyDataToQueue+0xc8>
    26e0:	5b c0       	rjmp	.+182    	; 0x2798 <prvCopyDataToQueue+0x17e>
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	9c 81       	ldd	r25, Y+4	; 0x04
    26e6:	fc 01       	movw	r30, r24
    26e8:	20 81       	ld	r18, Z
    26ea:	31 81       	ldd	r19, Z+1	; 0x01
    26ec:	8b 81       	ldd	r24, Y+3	; 0x03
    26ee:	9c 81       	ldd	r25, Y+4	; 0x04
    26f0:	fc 01       	movw	r30, r24
    26f2:	35 83       	std	Z+5, r19	; 0x05
    26f4:	24 83       	std	Z+4, r18	; 0x04
    26f6:	50 c0       	rjmp	.+160    	; 0x2798 <prvCopyDataToQueue+0x17e>
    26f8:	8b 81       	ldd	r24, Y+3	; 0x03
    26fa:	9c 81       	ldd	r25, Y+4	; 0x04
    26fc:	fc 01       	movw	r30, r24
    26fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2700:	48 2f       	mov	r20, r24
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	9c 81       	ldd	r25, Y+4	; 0x04
    2708:	fc 01       	movw	r30, r24
    270a:	86 81       	ldd	r24, Z+6	; 0x06
    270c:	97 81       	ldd	r25, Z+7	; 0x07
    270e:	2d 81       	ldd	r18, Y+5	; 0x05
    2710:	3e 81       	ldd	r19, Y+6	; 0x06
    2712:	b9 01       	movw	r22, r18
    2714:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <memcpy>
    2718:	8b 81       	ldd	r24, Y+3	; 0x03
    271a:	9c 81       	ldd	r25, Y+4	; 0x04
    271c:	fc 01       	movw	r30, r24
    271e:	26 81       	ldd	r18, Z+6	; 0x06
    2720:	37 81       	ldd	r19, Z+7	; 0x07
    2722:	8b 81       	ldd	r24, Y+3	; 0x03
    2724:	9c 81       	ldd	r25, Y+4	; 0x04
    2726:	fc 01       	movw	r30, r24
    2728:	84 8d       	ldd	r24, Z+28	; 0x1c
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	91 95       	neg	r25
    2730:	81 95       	neg	r24
    2732:	91 09       	sbc	r25, r1
    2734:	28 0f       	add	r18, r24
    2736:	39 1f       	adc	r19, r25
    2738:	8b 81       	ldd	r24, Y+3	; 0x03
    273a:	9c 81       	ldd	r25, Y+4	; 0x04
    273c:	fc 01       	movw	r30, r24
    273e:	37 83       	std	Z+7, r19	; 0x07
    2740:	26 83       	std	Z+6, r18	; 0x06
    2742:	8b 81       	ldd	r24, Y+3	; 0x03
    2744:	9c 81       	ldd	r25, Y+4	; 0x04
    2746:	fc 01       	movw	r30, r24
    2748:	26 81       	ldd	r18, Z+6	; 0x06
    274a:	37 81       	ldd	r19, Z+7	; 0x07
    274c:	8b 81       	ldd	r24, Y+3	; 0x03
    274e:	9c 81       	ldd	r25, Y+4	; 0x04
    2750:	fc 01       	movw	r30, r24
    2752:	80 81       	ld	r24, Z
    2754:	91 81       	ldd	r25, Z+1	; 0x01
    2756:	28 17       	cp	r18, r24
    2758:	39 07       	cpc	r19, r25
    275a:	a8 f4       	brcc	.+42     	; 0x2786 <prvCopyDataToQueue+0x16c>
    275c:	8b 81       	ldd	r24, Y+3	; 0x03
    275e:	9c 81       	ldd	r25, Y+4	; 0x04
    2760:	fc 01       	movw	r30, r24
    2762:	22 81       	ldd	r18, Z+2	; 0x02
    2764:	33 81       	ldd	r19, Z+3	; 0x03
    2766:	8b 81       	ldd	r24, Y+3	; 0x03
    2768:	9c 81       	ldd	r25, Y+4	; 0x04
    276a:	fc 01       	movw	r30, r24
    276c:	84 8d       	ldd	r24, Z+28	; 0x1c
    276e:	88 2f       	mov	r24, r24
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	91 95       	neg	r25
    2774:	81 95       	neg	r24
    2776:	91 09       	sbc	r25, r1
    2778:	28 0f       	add	r18, r24
    277a:	39 1f       	adc	r19, r25
    277c:	8b 81       	ldd	r24, Y+3	; 0x03
    277e:	9c 81       	ldd	r25, Y+4	; 0x04
    2780:	fc 01       	movw	r30, r24
    2782:	37 83       	std	Z+7, r19	; 0x07
    2784:	26 83       	std	Z+6, r18	; 0x06
    2786:	8f 81       	ldd	r24, Y+7	; 0x07
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	31 f4       	brne	.+12     	; 0x2798 <prvCopyDataToQueue+0x17e>
    278c:	8a 81       	ldd	r24, Y+2	; 0x02
    278e:	88 23       	and	r24, r24
    2790:	19 f0       	breq	.+6      	; 0x2798 <prvCopyDataToQueue+0x17e>
    2792:	8a 81       	ldd	r24, Y+2	; 0x02
    2794:	81 50       	subi	r24, 0x01	; 1
    2796:	8a 83       	std	Y+2, r24	; 0x02
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	28 0f       	add	r18, r24
    279e:	8b 81       	ldd	r24, Y+3	; 0x03
    27a0:	9c 81       	ldd	r25, Y+4	; 0x04
    27a2:	fc 01       	movw	r30, r24
    27a4:	22 8f       	std	Z+26, r18	; 0x1a
    27a6:	89 81       	ldd	r24, Y+1	; 0x01
    27a8:	27 96       	adiw	r28, 0x07	; 7
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	df 91       	pop	r29
    27b6:	cf 91       	pop	r28
    27b8:	08 95       	ret

000027ba <prvCopyDataFromQueue>:
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <prvCopyDataFromQueue+0x6>
    27c0:	00 d0       	rcall	.+0      	; 0x27c2 <prvCopyDataFromQueue+0x8>
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	9a 83       	std	Y+2, r25	; 0x02
    27c8:	89 83       	std	Y+1, r24	; 0x01
    27ca:	7c 83       	std	Y+4, r23	; 0x04
    27cc:	6b 83       	std	Y+3, r22	; 0x03
    27ce:	89 81       	ldd	r24, Y+1	; 0x01
    27d0:	9a 81       	ldd	r25, Y+2	; 0x02
    27d2:	fc 01       	movw	r30, r24
    27d4:	84 8d       	ldd	r24, Z+28	; 0x1c
    27d6:	88 23       	and	r24, r24
    27d8:	c9 f1       	breq	.+114    	; 0x284c <prvCopyDataFromQueue+0x92>
    27da:	89 81       	ldd	r24, Y+1	; 0x01
    27dc:	9a 81       	ldd	r25, Y+2	; 0x02
    27de:	fc 01       	movw	r30, r24
    27e0:	26 81       	ldd	r18, Z+6	; 0x06
    27e2:	37 81       	ldd	r19, Z+7	; 0x07
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	fc 01       	movw	r30, r24
    27ea:	84 8d       	ldd	r24, Z+28	; 0x1c
    27ec:	88 2f       	mov	r24, r24
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	28 0f       	add	r18, r24
    27f2:	39 1f       	adc	r19, r25
    27f4:	89 81       	ldd	r24, Y+1	; 0x01
    27f6:	9a 81       	ldd	r25, Y+2	; 0x02
    27f8:	fc 01       	movw	r30, r24
    27fa:	37 83       	std	Z+7, r19	; 0x07
    27fc:	26 83       	std	Z+6, r18	; 0x06
    27fe:	89 81       	ldd	r24, Y+1	; 0x01
    2800:	9a 81       	ldd	r25, Y+2	; 0x02
    2802:	fc 01       	movw	r30, r24
    2804:	26 81       	ldd	r18, Z+6	; 0x06
    2806:	37 81       	ldd	r19, Z+7	; 0x07
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	fc 01       	movw	r30, r24
    280e:	82 81       	ldd	r24, Z+2	; 0x02
    2810:	93 81       	ldd	r25, Z+3	; 0x03
    2812:	28 17       	cp	r18, r24
    2814:	39 07       	cpc	r19, r25
    2816:	50 f0       	brcs	.+20     	; 0x282c <prvCopyDataFromQueue+0x72>
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	9a 81       	ldd	r25, Y+2	; 0x02
    281c:	fc 01       	movw	r30, r24
    281e:	20 81       	ld	r18, Z
    2820:	31 81       	ldd	r19, Z+1	; 0x01
    2822:	89 81       	ldd	r24, Y+1	; 0x01
    2824:	9a 81       	ldd	r25, Y+2	; 0x02
    2826:	fc 01       	movw	r30, r24
    2828:	37 83       	std	Z+7, r19	; 0x07
    282a:	26 83       	std	Z+6, r18	; 0x06
    282c:	89 81       	ldd	r24, Y+1	; 0x01
    282e:	9a 81       	ldd	r25, Y+2	; 0x02
    2830:	fc 01       	movw	r30, r24
    2832:	84 8d       	ldd	r24, Z+28	; 0x1c
    2834:	48 2f       	mov	r20, r24
    2836:	50 e0       	ldi	r21, 0x00	; 0
    2838:	89 81       	ldd	r24, Y+1	; 0x01
    283a:	9a 81       	ldd	r25, Y+2	; 0x02
    283c:	fc 01       	movw	r30, r24
    283e:	26 81       	ldd	r18, Z+6	; 0x06
    2840:	37 81       	ldd	r19, Z+7	; 0x07
    2842:	8b 81       	ldd	r24, Y+3	; 0x03
    2844:	9c 81       	ldd	r25, Y+4	; 0x04
    2846:	b9 01       	movw	r22, r18
    2848:	0e 94 fc 1e 	call	0x3df8	; 0x3df8 <memcpy>
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	0f 90       	pop	r0
    2854:	df 91       	pop	r29
    2856:	cf 91       	pop	r28
    2858:	08 95       	ret

0000285a <prvUnlockQueue>:
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	00 d0       	rcall	.+0      	; 0x2860 <prvUnlockQueue+0x6>
    2860:	00 d0       	rcall	.+0      	; 0x2862 <prvUnlockQueue+0x8>
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	9c 83       	std	Y+4, r25	; 0x04
    2868:	8b 83       	std	Y+3, r24	; 0x03
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	0f 92       	push	r0
    2870:	8b 81       	ldd	r24, Y+3	; 0x03
    2872:	9c 81       	ldd	r25, Y+4	; 0x04
    2874:	fc 01       	movw	r30, r24
    2876:	86 8d       	ldd	r24, Z+30	; 0x1e
    2878:	89 83       	std	Y+1, r24	; 0x01
    287a:	14 c0       	rjmp	.+40     	; 0x28a4 <prvUnlockQueue+0x4a>
    287c:	8b 81       	ldd	r24, Y+3	; 0x03
    287e:	9c 81       	ldd	r25, Y+4	; 0x04
    2880:	fc 01       	movw	r30, r24
    2882:	81 89       	ldd	r24, Z+17	; 0x11
    2884:	88 23       	and	r24, r24
    2886:	51 f0       	breq	.+20     	; 0x289c <prvUnlockQueue+0x42>
    2888:	8b 81       	ldd	r24, Y+3	; 0x03
    288a:	9c 81       	ldd	r25, Y+4	; 0x04
    288c:	41 96       	adiw	r24, 0x11	; 17
    288e:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    2892:	88 23       	and	r24, r24
    2894:	21 f0       	breq	.+8      	; 0x289e <prvUnlockQueue+0x44>
    2896:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vTaskMissedYield>
    289a:	01 c0       	rjmp	.+2      	; 0x289e <prvUnlockQueue+0x44>
    289c:	06 c0       	rjmp	.+12     	; 0x28aa <prvUnlockQueue+0x50>
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	81 50       	subi	r24, 0x01	; 1
    28a2:	89 83       	std	Y+1, r24	; 0x01
    28a4:	89 81       	ldd	r24, Y+1	; 0x01
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f3       	brlt	.-46     	; 0x287c <prvUnlockQueue+0x22>
    28aa:	8b 81       	ldd	r24, Y+3	; 0x03
    28ac:	9c 81       	ldd	r25, Y+4	; 0x04
    28ae:	2f ef       	ldi	r18, 0xFF	; 255
    28b0:	fc 01       	movw	r30, r24
    28b2:	26 8f       	std	Z+30, r18	; 0x1e
    28b4:	0f 90       	pop	r0
    28b6:	0f be       	out	0x3f, r0	; 63
    28b8:	0f b6       	in	r0, 0x3f	; 63
    28ba:	f8 94       	cli
    28bc:	0f 92       	push	r0
    28be:	8b 81       	ldd	r24, Y+3	; 0x03
    28c0:	9c 81       	ldd	r25, Y+4	; 0x04
    28c2:	fc 01       	movw	r30, r24
    28c4:	85 8d       	ldd	r24, Z+29	; 0x1d
    28c6:	8a 83       	std	Y+2, r24	; 0x02
    28c8:	14 c0       	rjmp	.+40     	; 0x28f2 <prvUnlockQueue+0x98>
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	fc 01       	movw	r30, r24
    28d0:	80 85       	ldd	r24, Z+8	; 0x08
    28d2:	88 23       	and	r24, r24
    28d4:	69 f0       	breq	.+26     	; 0x28f0 <prvUnlockQueue+0x96>
    28d6:	8b 81       	ldd	r24, Y+3	; 0x03
    28d8:	9c 81       	ldd	r25, Y+4	; 0x04
    28da:	08 96       	adiw	r24, 0x08	; 8
    28dc:	0e 94 c0 19 	call	0x3380	; 0x3380 <xTaskRemoveFromEventList>
    28e0:	88 23       	and	r24, r24
    28e2:	11 f0       	breq	.+4      	; 0x28e8 <prvUnlockQueue+0x8e>
    28e4:	0e 94 b0 1a 	call	0x3560	; 0x3560 <vTaskMissedYield>
    28e8:	8a 81       	ldd	r24, Y+2	; 0x02
    28ea:	81 50       	subi	r24, 0x01	; 1
    28ec:	8a 83       	std	Y+2, r24	; 0x02
    28ee:	01 c0       	rjmp	.+2      	; 0x28f2 <prvUnlockQueue+0x98>
    28f0:	03 c0       	rjmp	.+6      	; 0x28f8 <prvUnlockQueue+0x9e>
    28f2:	8a 81       	ldd	r24, Y+2	; 0x02
    28f4:	18 16       	cp	r1, r24
    28f6:	4c f3       	brlt	.-46     	; 0x28ca <prvUnlockQueue+0x70>
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	2f ef       	ldi	r18, 0xFF	; 255
    28fe:	fc 01       	movw	r30, r24
    2900:	25 8f       	std	Z+29, r18	; 0x1d
    2902:	0f 90       	pop	r0
    2904:	0f be       	out	0x3f, r0	; 63
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	0f 90       	pop	r0
    290c:	0f 90       	pop	r0
    290e:	df 91       	pop	r29
    2910:	cf 91       	pop	r28
    2912:	08 95       	ret

00002914 <prvIsQueueEmpty>:
    2914:	cf 93       	push	r28
    2916:	df 93       	push	r29
    2918:	00 d0       	rcall	.+0      	; 0x291a <prvIsQueueEmpty+0x6>
    291a:	1f 92       	push	r1
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	9b 83       	std	Y+3, r25	; 0x03
    2922:	8a 83       	std	Y+2, r24	; 0x02
    2924:	0f b6       	in	r0, 0x3f	; 63
    2926:	f8 94       	cli
    2928:	0f 92       	push	r0
    292a:	8a 81       	ldd	r24, Y+2	; 0x02
    292c:	9b 81       	ldd	r25, Y+3	; 0x03
    292e:	fc 01       	movw	r30, r24
    2930:	82 8d       	ldd	r24, Z+26	; 0x1a
    2932:	88 23       	and	r24, r24
    2934:	19 f4       	brne	.+6      	; 0x293c <prvIsQueueEmpty+0x28>
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	89 83       	std	Y+1, r24	; 0x01
    293a:	01 c0       	rjmp	.+2      	; 0x293e <prvIsQueueEmpty+0x2a>
    293c:	19 82       	std	Y+1, r1	; 0x01
    293e:	0f 90       	pop	r0
    2940:	0f be       	out	0x3f, r0	; 63
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	0f 90       	pop	r0
    2946:	0f 90       	pop	r0
    2948:	0f 90       	pop	r0
    294a:	df 91       	pop	r29
    294c:	cf 91       	pop	r28
    294e:	08 95       	ret

00002950 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	00 d0       	rcall	.+0      	; 0x2956 <prvIsQueueFull+0x6>
    2956:	1f 92       	push	r1
    2958:	cd b7       	in	r28, 0x3d	; 61
    295a:	de b7       	in	r29, 0x3e	; 62
    295c:	9b 83       	std	Y+3, r25	; 0x03
    295e:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2960:	0f b6       	in	r0, 0x3f	; 63
    2962:	f8 94       	cli
    2964:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2966:	8a 81       	ldd	r24, Y+2	; 0x02
    2968:	9b 81       	ldd	r25, Y+3	; 0x03
    296a:	fc 01       	movw	r30, r24
    296c:	22 8d       	ldd	r18, Z+26	; 0x1a
    296e:	8a 81       	ldd	r24, Y+2	; 0x02
    2970:	9b 81       	ldd	r25, Y+3	; 0x03
    2972:	fc 01       	movw	r30, r24
    2974:	83 8d       	ldd	r24, Z+27	; 0x1b
    2976:	28 17       	cp	r18, r24
    2978:	19 f4       	brne	.+6      	; 0x2980 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	89 83       	std	Y+1, r24	; 0x01
    297e:	01 c0       	rjmp	.+2      	; 0x2982 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2980:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2982:	0f 90       	pop	r0
    2984:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
}
    2988:	0f 90       	pop	r0
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	08 95       	ret

00002994 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2994:	8f 92       	push	r8
    2996:	9f 92       	push	r9
    2998:	af 92       	push	r10
    299a:	bf 92       	push	r11
    299c:	cf 92       	push	r12
    299e:	df 92       	push	r13
    29a0:	ef 92       	push	r14
    29a2:	ff 92       	push	r15
    29a4:	0f 93       	push	r16
    29a6:	1f 93       	push	r17
    29a8:	cf 93       	push	r28
    29aa:	df 93       	push	r29
    29ac:	cd b7       	in	r28, 0x3d	; 61
    29ae:	de b7       	in	r29, 0x3e	; 62
    29b0:	60 97       	sbiw	r28, 0x10	; 16
    29b2:	0f b6       	in	r0, 0x3f	; 63
    29b4:	f8 94       	cli
    29b6:	de bf       	out	0x3e, r29	; 62
    29b8:	0f be       	out	0x3f, r0	; 63
    29ba:	cd bf       	out	0x3d, r28	; 61
    29bc:	9f 83       	std	Y+7, r25	; 0x07
    29be:	8e 83       	std	Y+6, r24	; 0x06
    29c0:	79 87       	std	Y+9, r23	; 0x09
    29c2:	68 87       	std	Y+8, r22	; 0x08
    29c4:	5b 87       	std	Y+11, r21	; 0x0b
    29c6:	4a 87       	std	Y+10, r20	; 0x0a
    29c8:	3d 87       	std	Y+13, r19	; 0x0d
    29ca:	2c 87       	std	Y+12, r18	; 0x0c
    29cc:	0e 87       	std	Y+14, r16	; 0x0e
    29ce:	f8 8a       	std	Y+16, r15	; 0x10
    29d0:	ef 86       	std	Y+15, r14	; 0x0f
    29d2:	8a 85       	ldd	r24, Y+10	; 0x0a
    29d4:	9b 85       	ldd	r25, Y+11	; 0x0b
    29d6:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <pvPortMalloc>
    29da:	9d 83       	std	Y+5, r25	; 0x05
    29dc:	8c 83       	std	Y+4, r24	; 0x04
    29de:	8c 81       	ldd	r24, Y+4	; 0x04
    29e0:	9d 81       	ldd	r25, Y+5	; 0x05
    29e2:	89 2b       	or	r24, r25
    29e4:	b9 f0       	breq	.+46     	; 0x2a14 <xTaskCreate+0x80>
    29e6:	8c e2       	ldi	r24, 0x2C	; 44
    29e8:	90 e0       	ldi	r25, 0x00	; 0
    29ea:	0e 94 15 0d 	call	0x1a2a	; 0x1a2a <pvPortMalloc>
    29ee:	9a 83       	std	Y+2, r25	; 0x02
    29f0:	89 83       	std	Y+1, r24	; 0x01
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	89 2b       	or	r24, r25
    29f8:	41 f0       	breq	.+16     	; 0x2a0a <xTaskCreate+0x76>
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2a00:	3d 81       	ldd	r19, Y+5	; 0x05
    2a02:	fc 01       	movw	r30, r24
    2a04:	30 8f       	std	Z+24, r19	; 0x18
    2a06:	27 8b       	std	Z+23, r18	; 0x17
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <xTaskCreate+0x84>
    2a0a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a0c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a0e:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <vPortFree>
    2a12:	02 c0       	rjmp	.+4      	; 0x2a18 <xTaskCreate+0x84>
    2a14:	1a 82       	std	Y+2, r1	; 0x02
    2a16:	19 82       	std	Y+1, r1	; 0x01
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1c:	89 2b       	or	r24, r25
    2a1e:	09 f1       	breq	.+66     	; 0x2a62 <xTaskCreate+0xce>
    2a20:	8a 85       	ldd	r24, Y+10	; 0x0a
    2a22:	9b 85       	ldd	r25, Y+11	; 0x0b
    2a24:	cc 01       	movw	r24, r24
    2a26:	a0 e0       	ldi	r26, 0x00	; 0
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	09 81       	ldd	r16, Y+1	; 0x01
    2a2c:	1a 81       	ldd	r17, Y+2	; 0x02
    2a2e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2a30:	58 89       	ldd	r21, Y+16	; 0x10
    2a32:	2c 85       	ldd	r18, Y+12	; 0x0c
    2a34:	3d 85       	ldd	r19, Y+13	; 0x0d
    2a36:	68 85       	ldd	r22, Y+8	; 0x08
    2a38:	79 85       	ldd	r23, Y+9	; 0x09
    2a3a:	ee 81       	ldd	r30, Y+6	; 0x06
    2a3c:	ff 81       	ldd	r31, Y+7	; 0x07
    2a3e:	81 2c       	mov	r8, r1
    2a40:	91 2c       	mov	r9, r1
    2a42:	58 01       	movw	r10, r16
    2a44:	6a 01       	movw	r12, r20
    2a46:	ee 84       	ldd	r14, Y+14	; 0x0e
    2a48:	89 01       	movw	r16, r18
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	ad 01       	movw	r20, r26
    2a4e:	cf 01       	movw	r24, r30
    2a50:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <prvInitialiseNewTask>
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	0e 94 21 16 	call	0x2c42	; 0x2c42 <prvAddNewTaskToReadyList>
    2a5c:	81 e0       	ldi	r24, 0x01	; 1
    2a5e:	8b 83       	std	Y+3, r24	; 0x03
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <xTaskCreate+0xd2>
    2a62:	8f ef       	ldi	r24, 0xFF	; 255
    2a64:	8b 83       	std	Y+3, r24	; 0x03
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	60 96       	adiw	r28, 0x10	; 16
    2a6a:	0f b6       	in	r0, 0x3f	; 63
    2a6c:	f8 94       	cli
    2a6e:	de bf       	out	0x3e, r29	; 62
    2a70:	0f be       	out	0x3f, r0	; 63
    2a72:	cd bf       	out	0x3d, r28	; 61
    2a74:	df 91       	pop	r29
    2a76:	cf 91       	pop	r28
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	bf 90       	pop	r11
    2a86:	af 90       	pop	r10
    2a88:	9f 90       	pop	r9
    2a8a:	8f 90       	pop	r8
    2a8c:	08 95       	ret

00002a8e <prvInitialiseNewTask>:
    2a8e:	8f 92       	push	r8
    2a90:	9f 92       	push	r9
    2a92:	af 92       	push	r10
    2a94:	bf 92       	push	r11
    2a96:	cf 92       	push	r12
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	0f 93       	push	r16
    2a9e:	1f 93       	push	r17
    2aa0:	cf 93       	push	r28
    2aa2:	df 93       	push	r29
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	64 97       	sbiw	r28, 0x14	; 20
    2aaa:	0f b6       	in	r0, 0x3f	; 63
    2aac:	f8 94       	cli
    2aae:	de bf       	out	0x3e, r29	; 62
    2ab0:	0f be       	out	0x3f, r0	; 63
    2ab2:	cd bf       	out	0x3d, r28	; 61
    2ab4:	9d 83       	std	Y+5, r25	; 0x05
    2ab6:	8c 83       	std	Y+4, r24	; 0x04
    2ab8:	7f 83       	std	Y+7, r23	; 0x07
    2aba:	6e 83       	std	Y+6, r22	; 0x06
    2abc:	28 87       	std	Y+8, r18	; 0x08
    2abe:	39 87       	std	Y+9, r19	; 0x09
    2ac0:	4a 87       	std	Y+10, r20	; 0x0a
    2ac2:	5b 87       	std	Y+11, r21	; 0x0b
    2ac4:	1d 87       	std	Y+13, r17	; 0x0d
    2ac6:	0c 87       	std	Y+12, r16	; 0x0c
    2ac8:	ee 86       	std	Y+14, r14	; 0x0e
    2aca:	d8 8a       	std	Y+16, r13	; 0x10
    2acc:	cf 86       	std	Y+15, r12	; 0x0f
    2ace:	ba 8a       	std	Y+18, r11	; 0x12
    2ad0:	a9 8a       	std	Y+17, r10	; 0x11
    2ad2:	9c 8a       	std	Y+20, r9	; 0x14
    2ad4:	8b 8a       	std	Y+19, r8	; 0x13
    2ad6:	28 85       	ldd	r18, Y+8	; 0x08
    2ad8:	39 85       	ldd	r19, Y+9	; 0x09
    2ada:	89 89       	ldd	r24, Y+17	; 0x11
    2adc:	9a 89       	ldd	r25, Y+18	; 0x12
    2ade:	fc 01       	movw	r30, r24
    2ae0:	87 89       	ldd	r24, Z+23	; 0x17
    2ae2:	90 8d       	ldd	r25, Z+24	; 0x18
    2ae4:	a9 01       	movw	r20, r18
    2ae6:	65 ea       	ldi	r22, 0xA5	; 165
    2ae8:	70 e0       	ldi	r23, 0x00	; 0
    2aea:	0e 94 05 1f 	call	0x3e0a	; 0x3e0a <memset>
    2aee:	89 89       	ldd	r24, Y+17	; 0x11
    2af0:	9a 89       	ldd	r25, Y+18	; 0x12
    2af2:	fc 01       	movw	r30, r24
    2af4:	27 89       	ldd	r18, Z+23	; 0x17
    2af6:	30 8d       	ldd	r19, Z+24	; 0x18
    2af8:	88 85       	ldd	r24, Y+8	; 0x08
    2afa:	99 85       	ldd	r25, Y+9	; 0x09
    2afc:	01 97       	sbiw	r24, 0x01	; 1
    2afe:	82 0f       	add	r24, r18
    2b00:	93 1f       	adc	r25, r19
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	8a 83       	std	Y+2, r24	; 0x02
    2b06:	19 82       	std	Y+1, r1	; 0x01
    2b08:	22 c0       	rjmp	.+68     	; 0x2b4e <prvInitialiseNewTask+0xc0>
    2b0a:	89 81       	ldd	r24, Y+1	; 0x01
    2b0c:	88 2f       	mov	r24, r24
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	29 81       	ldd	r18, Y+1	; 0x01
    2b12:	22 2f       	mov	r18, r18
    2b14:	30 e0       	ldi	r19, 0x00	; 0
    2b16:	4e 81       	ldd	r20, Y+6	; 0x06
    2b18:	5f 81       	ldd	r21, Y+7	; 0x07
    2b1a:	24 0f       	add	r18, r20
    2b1c:	35 1f       	adc	r19, r21
    2b1e:	f9 01       	movw	r30, r18
    2b20:	40 81       	ld	r20, Z
    2b22:	29 89       	ldd	r18, Y+17	; 0x11
    2b24:	3a 89       	ldd	r19, Y+18	; 0x12
    2b26:	82 0f       	add	r24, r18
    2b28:	93 1f       	adc	r25, r19
    2b2a:	49 96       	adiw	r24, 0x19	; 25
    2b2c:	fc 01       	movw	r30, r24
    2b2e:	40 83       	st	Z, r20
    2b30:	89 81       	ldd	r24, Y+1	; 0x01
    2b32:	88 2f       	mov	r24, r24
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	2e 81       	ldd	r18, Y+6	; 0x06
    2b38:	3f 81       	ldd	r19, Y+7	; 0x07
    2b3a:	82 0f       	add	r24, r18
    2b3c:	93 1f       	adc	r25, r19
    2b3e:	fc 01       	movw	r30, r24
    2b40:	80 81       	ld	r24, Z
    2b42:	88 23       	and	r24, r24
    2b44:	09 f4       	brne	.+2      	; 0x2b48 <prvInitialiseNewTask+0xba>
    2b46:	06 c0       	rjmp	.+12     	; 0x2b54 <prvInitialiseNewTask+0xc6>
    2b48:	89 81       	ldd	r24, Y+1	; 0x01
    2b4a:	8f 5f       	subi	r24, 0xFF	; 255
    2b4c:	89 83       	std	Y+1, r24	; 0x01
    2b4e:	89 81       	ldd	r24, Y+1	; 0x01
    2b50:	88 30       	cpi	r24, 0x08	; 8
    2b52:	d8 f2       	brcs	.-74     	; 0x2b0a <prvInitialiseNewTask+0x7c>
    2b54:	89 89       	ldd	r24, Y+17	; 0x11
    2b56:	9a 89       	ldd	r25, Y+18	; 0x12
    2b58:	fc 01       	movw	r30, r24
    2b5a:	10 a2       	std	Z+32, r1	; 0x20
    2b5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b5e:	84 30       	cpi	r24, 0x04	; 4
    2b60:	10 f0       	brcs	.+4      	; 0x2b66 <prvInitialiseNewTask+0xd8>
    2b62:	83 e0       	ldi	r24, 0x03	; 3
    2b64:	8e 87       	std	Y+14, r24	; 0x0e
    2b66:	89 89       	ldd	r24, Y+17	; 0x11
    2b68:	9a 89       	ldd	r25, Y+18	; 0x12
    2b6a:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	26 8b       	std	Z+22, r18	; 0x16
    2b70:	89 89       	ldd	r24, Y+17	; 0x11
    2b72:	9a 89       	ldd	r25, Y+18	; 0x12
    2b74:	2e 85       	ldd	r18, Y+14	; 0x0e
    2b76:	fc 01       	movw	r30, r24
    2b78:	23 a3       	std	Z+35, r18	; 0x23
    2b7a:	89 89       	ldd	r24, Y+17	; 0x11
    2b7c:	9a 89       	ldd	r25, Y+18	; 0x12
    2b7e:	fc 01       	movw	r30, r24
    2b80:	14 a2       	std	Z+36, r1	; 0x24
    2b82:	89 89       	ldd	r24, Y+17	; 0x11
    2b84:	9a 89       	ldd	r25, Y+18	; 0x12
    2b86:	02 96       	adiw	r24, 0x02	; 2
    2b88:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <vListInitialiseItem>
    2b8c:	89 89       	ldd	r24, Y+17	; 0x11
    2b8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b90:	0c 96       	adiw	r24, 0x0c	; 12
    2b92:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <vListInitialiseItem>
    2b96:	89 89       	ldd	r24, Y+17	; 0x11
    2b98:	9a 89       	ldd	r25, Y+18	; 0x12
    2b9a:	29 89       	ldd	r18, Y+17	; 0x11
    2b9c:	3a 89       	ldd	r19, Y+18	; 0x12
    2b9e:	fc 01       	movw	r30, r24
    2ba0:	31 87       	std	Z+9, r19	; 0x09
    2ba2:	20 87       	std	Z+8, r18	; 0x08
    2ba4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ba6:	88 2f       	mov	r24, r24
    2ba8:	90 e0       	ldi	r25, 0x00	; 0
    2baa:	24 e0       	ldi	r18, 0x04	; 4
    2bac:	30 e0       	ldi	r19, 0x00	; 0
    2bae:	28 1b       	sub	r18, r24
    2bb0:	39 0b       	sbc	r19, r25
    2bb2:	89 89       	ldd	r24, Y+17	; 0x11
    2bb4:	9a 89       	ldd	r25, Y+18	; 0x12
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	35 87       	std	Z+13, r19	; 0x0d
    2bba:	24 87       	std	Z+12, r18	; 0x0c
    2bbc:	89 89       	ldd	r24, Y+17	; 0x11
    2bbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2bc0:	29 89       	ldd	r18, Y+17	; 0x11
    2bc2:	3a 89       	ldd	r19, Y+18	; 0x12
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	33 8b       	std	Z+19, r19	; 0x13
    2bc8:	22 8b       	std	Z+18, r18	; 0x12
    2bca:	89 89       	ldd	r24, Y+17	; 0x11
    2bcc:	9a 89       	ldd	r25, Y+18	; 0x12
    2bce:	fc 01       	movw	r30, r24
    2bd0:	16 a2       	std	Z+38, r1	; 0x26
    2bd2:	15 a2       	std	Z+37, r1	; 0x25
    2bd4:	89 89       	ldd	r24, Y+17	; 0x11
    2bd6:	9a 89       	ldd	r25, Y+18	; 0x12
    2bd8:	fc 01       	movw	r30, r24
    2bda:	17 a2       	std	Z+39, r1	; 0x27
    2bdc:	10 a6       	std	Z+40, r1	; 0x28
    2bde:	11 a6       	std	Z+41, r1	; 0x29
    2be0:	12 a6       	std	Z+42, r1	; 0x2a
    2be2:	89 89       	ldd	r24, Y+17	; 0x11
    2be4:	9a 89       	ldd	r25, Y+18	; 0x12
    2be6:	fc 01       	movw	r30, r24
    2be8:	13 a6       	std	Z+43, r1	; 0x2b
    2bea:	4c 85       	ldd	r20, Y+12	; 0x0c
    2bec:	5d 85       	ldd	r21, Y+13	; 0x0d
    2bee:	2c 81       	ldd	r18, Y+4	; 0x04
    2bf0:	3d 81       	ldd	r19, Y+5	; 0x05
    2bf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf6:	b9 01       	movw	r22, r18
    2bf8:	0e 94 1d 0a 	call	0x143a	; 0x143a <pxPortInitialiseStack>
    2bfc:	9c 01       	movw	r18, r24
    2bfe:	89 89       	ldd	r24, Y+17	; 0x11
    2c00:	9a 89       	ldd	r25, Y+18	; 0x12
    2c02:	fc 01       	movw	r30, r24
    2c04:	31 83       	std	Z+1, r19	; 0x01
    2c06:	20 83       	st	Z, r18
    2c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c0a:	98 89       	ldd	r25, Y+16	; 0x10
    2c0c:	89 2b       	or	r24, r25
    2c0e:	39 f0       	breq	.+14     	; 0x2c1e <prvInitialiseNewTask+0x190>
    2c10:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c12:	98 89       	ldd	r25, Y+16	; 0x10
    2c14:	29 89       	ldd	r18, Y+17	; 0x11
    2c16:	3a 89       	ldd	r19, Y+18	; 0x12
    2c18:	fc 01       	movw	r30, r24
    2c1a:	31 83       	std	Z+1, r19	; 0x01
    2c1c:	20 83       	st	Z, r18
    2c1e:	64 96       	adiw	r28, 0x14	; 20
    2c20:	0f b6       	in	r0, 0x3f	; 63
    2c22:	f8 94       	cli
    2c24:	de bf       	out	0x3e, r29	; 62
    2c26:	0f be       	out	0x3f, r0	; 63
    2c28:	cd bf       	out	0x3d, r28	; 61
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	9f 90       	pop	r9
    2c3e:	8f 90       	pop	r8
    2c40:	08 95       	ret

00002c42 <prvAddNewTaskToReadyList>:
    2c42:	cf 93       	push	r28
    2c44:	df 93       	push	r29
    2c46:	00 d0       	rcall	.+0      	; 0x2c48 <prvAddNewTaskToReadyList+0x6>
    2c48:	cd b7       	in	r28, 0x3d	; 61
    2c4a:	de b7       	in	r29, 0x3e	; 62
    2c4c:	9a 83       	std	Y+2, r25	; 0x02
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	0f b6       	in	r0, 0x3f	; 63
    2c52:	f8 94       	cli
    2c54:	0f 92       	push	r0
    2c56:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <uxCurrentNumberOfTasks>
    2c5a:	8f 5f       	subi	r24, 0xFF	; 255
    2c5c:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <uxCurrentNumberOfTasks>
    2c60:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    2c64:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    2c68:	89 2b       	or	r24, r25
    2c6a:	69 f4       	brne	.+26     	; 0x2c86 <prvAddNewTaskToReadyList+0x44>
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2c70:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pxCurrentTCB+0x1>
    2c74:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pxCurrentTCB>
    2c78:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <uxCurrentNumberOfTasks>
    2c7c:	81 30       	cpi	r24, 0x01	; 1
    2c7e:	c9 f4       	brne	.+50     	; 0x2cb2 <prvAddNewTaskToReadyList+0x70>
    2c80:	0e 94 cc 1a 	call	0x3598	; 0x3598 <prvInitialiseTaskLists>
    2c84:	16 c0       	rjmp	.+44     	; 0x2cb2 <prvAddNewTaskToReadyList+0x70>
    2c86:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <xSchedulerRunning>
    2c8a:	88 23       	and	r24, r24
    2c8c:	91 f4       	brne	.+36     	; 0x2cb2 <prvAddNewTaskToReadyList+0x70>
    2c8e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    2c92:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    2c96:	fc 01       	movw	r30, r24
    2c98:	26 89       	ldd	r18, Z+22	; 0x16
    2c9a:	89 81       	ldd	r24, Y+1	; 0x01
    2c9c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c9e:	fc 01       	movw	r30, r24
    2ca0:	86 89       	ldd	r24, Z+22	; 0x16
    2ca2:	82 17       	cp	r24, r18
    2ca4:	30 f0       	brcs	.+12     	; 0x2cb2 <prvAddNewTaskToReadyList+0x70>
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    2caa:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pxCurrentTCB+0x1>
    2cae:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pxCurrentTCB>
    2cb2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <uxTaskNumber>
    2cb6:	8f 5f       	subi	r24, 0xFF	; 255
    2cb8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <uxTaskNumber>
    2cbc:	20 91 df 05 	lds	r18, 0x05DF	; 0x8005df <uxTaskNumber>
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc4:	fc 01       	movw	r30, r24
    2cc6:	21 a3       	std	Z+33, r18	; 0x21
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	9a 81       	ldd	r25, Y+2	; 0x02
    2ccc:	fc 01       	movw	r30, r24
    2cce:	96 89       	ldd	r25, Z+22	; 0x16
    2cd0:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    2cd4:	89 17       	cp	r24, r25
    2cd6:	30 f4       	brcc	.+12     	; 0x2ce4 <prvAddNewTaskToReadyList+0xa2>
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	fc 01       	movw	r30, r24
    2cde:	86 89       	ldd	r24, Z+22	; 0x16
    2ce0:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    2ce4:	89 81       	ldd	r24, Y+1	; 0x01
    2ce6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce8:	ac 01       	movw	r20, r24
    2cea:	4e 5f       	subi	r20, 0xFE	; 254
    2cec:	5f 4f       	sbci	r21, 0xFF	; 255
    2cee:	89 81       	ldd	r24, Y+1	; 0x01
    2cf0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	86 89       	ldd	r24, Z+22	; 0x16
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	30 e0       	ldi	r19, 0x00	; 0
    2cfa:	c9 01       	movw	r24, r18
    2cfc:	88 0f       	add	r24, r24
    2cfe:	99 1f       	adc	r25, r25
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	88 0f       	add	r24, r24
    2d06:	99 1f       	adc	r25, r25
    2d08:	82 0f       	add	r24, r18
    2d0a:	93 1f       	adc	r25, r19
    2d0c:	86 57       	subi	r24, 0x76	; 118
    2d0e:	9a 4f       	sbci	r25, 0xFA	; 250
    2d10:	ba 01       	movw	r22, r20
    2d12:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    2d16:	0f 90       	pop	r0
    2d18:	0f be       	out	0x3f, r0	; 63
    2d1a:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <xSchedulerRunning>
    2d1e:	88 23       	and	r24, r24
    2d20:	71 f0       	breq	.+28     	; 0x2d3e <prvAddNewTaskToReadyList+0xfc>
    2d22:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    2d26:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	26 89       	ldd	r18, Z+22	; 0x16
    2d2e:	89 81       	ldd	r24, Y+1	; 0x01
    2d30:	9a 81       	ldd	r25, Y+2	; 0x02
    2d32:	fc 01       	movw	r30, r24
    2d34:	86 89       	ldd	r24, Z+22	; 0x16
    2d36:	28 17       	cp	r18, r24
    2d38:	10 f4       	brcc	.+4      	; 0x2d3e <prvAddNewTaskToReadyList+0xfc>
    2d3a:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	df 91       	pop	r29
    2d44:	cf 91       	pop	r28
    2d46:	08 95       	ret

00002d48 <vTaskDelayUntil>:
    2d48:	cf 93       	push	r28
    2d4a:	df 93       	push	r29
    2d4c:	cd b7       	in	r28, 0x3d	; 61
    2d4e:	de b7       	in	r29, 0x3e	; 62
    2d50:	2a 97       	sbiw	r28, 0x0a	; 10
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	98 87       	std	Y+8, r25	; 0x08
    2d5e:	8f 83       	std	Y+7, r24	; 0x07
    2d60:	7a 87       	std	Y+10, r23	; 0x0a
    2d62:	69 87       	std	Y+9, r22	; 0x09
    2d64:	19 82       	std	Y+1, r1	; 0x01
    2d66:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
    2d6a:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <xTickCount>
    2d6e:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
    2d76:	8f 81       	ldd	r24, Y+7	; 0x07
    2d78:	98 85       	ldd	r25, Y+8	; 0x08
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	20 81       	ld	r18, Z
    2d7e:	31 81       	ldd	r19, Z+1	; 0x01
    2d80:	89 85       	ldd	r24, Y+9	; 0x09
    2d82:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d84:	82 0f       	add	r24, r18
    2d86:	93 1f       	adc	r25, r19
    2d88:	9d 83       	std	Y+5, r25	; 0x05
    2d8a:	8c 83       	std	Y+4, r24	; 0x04
    2d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2d8e:	98 85       	ldd	r25, Y+8	; 0x08
    2d90:	fc 01       	movw	r30, r24
    2d92:	20 81       	ld	r18, Z
    2d94:	31 81       	ldd	r19, Z+1	; 0x01
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	82 17       	cp	r24, r18
    2d9c:	93 07       	cpc	r25, r19
    2d9e:	a0 f4       	brcc	.+40     	; 0x2dc8 <vTaskDelayUntil+0x80>
    2da0:	8f 81       	ldd	r24, Y+7	; 0x07
    2da2:	98 85       	ldd	r25, Y+8	; 0x08
    2da4:	fc 01       	movw	r30, r24
    2da6:	20 81       	ld	r18, Z
    2da8:	31 81       	ldd	r19, Z+1	; 0x01
    2daa:	8c 81       	ldd	r24, Y+4	; 0x04
    2dac:	9d 81       	ldd	r25, Y+5	; 0x05
    2dae:	82 17       	cp	r24, r18
    2db0:	93 07       	cpc	r25, r19
    2db2:	e8 f4       	brcc	.+58     	; 0x2dee <vTaskDelayUntil+0xa6>
    2db4:	2c 81       	ldd	r18, Y+4	; 0x04
    2db6:	3d 81       	ldd	r19, Y+5	; 0x05
    2db8:	8a 81       	ldd	r24, Y+2	; 0x02
    2dba:	9b 81       	ldd	r25, Y+3	; 0x03
    2dbc:	82 17       	cp	r24, r18
    2dbe:	93 07       	cpc	r25, r19
    2dc0:	b0 f4       	brcc	.+44     	; 0x2dee <vTaskDelayUntil+0xa6>
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	89 83       	std	Y+1, r24	; 0x01
    2dc6:	13 c0       	rjmp	.+38     	; 0x2dee <vTaskDelayUntil+0xa6>
    2dc8:	8f 81       	ldd	r24, Y+7	; 0x07
    2dca:	98 85       	ldd	r25, Y+8	; 0x08
    2dcc:	fc 01       	movw	r30, r24
    2dce:	20 81       	ld	r18, Z
    2dd0:	31 81       	ldd	r19, Z+1	; 0x01
    2dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    2dd4:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd6:	82 17       	cp	r24, r18
    2dd8:	93 07       	cpc	r25, r19
    2dda:	38 f0       	brcs	.+14     	; 0x2dea <vTaskDelayUntil+0xa2>
    2ddc:	2c 81       	ldd	r18, Y+4	; 0x04
    2dde:	3d 81       	ldd	r19, Y+5	; 0x05
    2de0:	8a 81       	ldd	r24, Y+2	; 0x02
    2de2:	9b 81       	ldd	r25, Y+3	; 0x03
    2de4:	82 17       	cp	r24, r18
    2de6:	93 07       	cpc	r25, r19
    2de8:	10 f4       	brcc	.+4      	; 0x2dee <vTaskDelayUntil+0xa6>
    2dea:	81 e0       	ldi	r24, 0x01	; 1
    2dec:	89 83       	std	Y+1, r24	; 0x01
    2dee:	8f 81       	ldd	r24, Y+7	; 0x07
    2df0:	98 85       	ldd	r25, Y+8	; 0x08
    2df2:	2c 81       	ldd	r18, Y+4	; 0x04
    2df4:	3d 81       	ldd	r19, Y+5	; 0x05
    2df6:	fc 01       	movw	r30, r24
    2df8:	31 83       	std	Z+1, r19	; 0x01
    2dfa:	20 83       	st	Z, r18
    2dfc:	89 81       	ldd	r24, Y+1	; 0x01
    2dfe:	88 23       	and	r24, r24
    2e00:	59 f0       	breq	.+22     	; 0x2e18 <vTaskDelayUntil+0xd0>
    2e02:	2c 81       	ldd	r18, Y+4	; 0x04
    2e04:	3d 81       	ldd	r19, Y+5	; 0x05
    2e06:	8a 81       	ldd	r24, Y+2	; 0x02
    2e08:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0a:	a9 01       	movw	r20, r18
    2e0c:	48 1b       	sub	r20, r24
    2e0e:	59 0b       	sbc	r21, r25
    2e10:	ca 01       	movw	r24, r20
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 bc 1c 	call	0x3978	; 0x3978 <prvAddCurrentTaskToDelayedList>
    2e18:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    2e1c:	8e 83       	std	Y+6, r24	; 0x06
    2e1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e20:	88 23       	and	r24, r24
    2e22:	11 f4       	brne	.+4      	; 0x2e28 <vTaskDelayUntil+0xe0>
    2e24:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2e28:	2a 96       	adiw	r28, 0x0a	; 10
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	df 91       	pop	r29
    2e36:	cf 91       	pop	r28
    2e38:	08 95       	ret

00002e3a <vTaskDelay>:
    2e3a:	cf 93       	push	r28
    2e3c:	df 93       	push	r29
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <vTaskDelay+0x6>
    2e40:	1f 92       	push	r1
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	9b 83       	std	Y+3, r25	; 0x03
    2e48:	8a 83       	std	Y+2, r24	; 0x02
    2e4a:	19 82       	std	Y+1, r1	; 0x01
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e50:	89 2b       	or	r24, r25
    2e52:	51 f0       	breq	.+20     	; 0x2e68 <vTaskDelay+0x2e>
    2e54:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e5c:	60 e0       	ldi	r22, 0x00	; 0
    2e5e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <prvAddCurrentTaskToDelayedList>
    2e62:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    2e66:	89 83       	std	Y+1, r24	; 0x01
    2e68:	89 81       	ldd	r24, Y+1	; 0x01
    2e6a:	88 23       	and	r24, r24
    2e6c:	11 f4       	brne	.+4      	; 0x2e72 <vTaskDelay+0x38>
    2e6e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	df 91       	pop	r29
    2e7a:	cf 91       	pop	r28
    2e7c:	08 95       	ret

00002e7e <vTaskStartScheduler>:
    2e7e:	ef 92       	push	r14
    2e80:	ff 92       	push	r15
    2e82:	0f 93       	push	r16
    2e84:	cf 93       	push	r28
    2e86:	df 93       	push	r29
    2e88:	1f 92       	push	r1
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	0f 2e       	mov	r0, r31
    2e90:	f2 ee       	ldi	r31, 0xE2	; 226
    2e92:	ef 2e       	mov	r14, r31
    2e94:	f5 e0       	ldi	r31, 0x05	; 5
    2e96:	ff 2e       	mov	r15, r31
    2e98:	f0 2d       	mov	r31, r0
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
    2e9c:	20 e0       	ldi	r18, 0x00	; 0
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	45 e5       	ldi	r20, 0x55	; 85
    2ea2:	50 e0       	ldi	r21, 0x00	; 0
    2ea4:	68 e5       	ldi	r22, 0x58	; 88
    2ea6:	71 e0       	ldi	r23, 0x01	; 1
    2ea8:	8a eb       	ldi	r24, 0xBA	; 186
    2eaa:	9a e1       	ldi	r25, 0x1A	; 26
    2eac:	0e 94 ca 14 	call	0x2994	; 0x2994 <xTaskCreate>
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	81 30       	cpi	r24, 0x01	; 1
    2eb6:	81 f4       	brne	.+32     	; 0x2ed8 <vTaskStartScheduler+0x5a>
    2eb8:	f8 94       	cli
    2eba:	8f ef       	ldi	r24, 0xFF	; 255
    2ebc:	9f ef       	ldi	r25, 0xFF	; 255
    2ebe:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    2ec2:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xSchedulerRunning>
    2ecc:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <xTickCount+0x1>
    2ed0:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <xTickCount>
    2ed4:	0e 94 c6 0b 	call	0x178c	; 0x178c <xPortStartScheduler>
    2ed8:	0f 90       	pop	r0
    2eda:	df 91       	pop	r29
    2edc:	cf 91       	pop	r28
    2ede:	0f 91       	pop	r16
    2ee0:	ff 90       	pop	r15
    2ee2:	ef 90       	pop	r14
    2ee4:	08 95       	ret

00002ee6 <vTaskSuspendAll>:
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    2ef2:	8f 5f       	subi	r24, 0xFF	; 255
    2ef4:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <uxSchedulerSuspended>
    2ef8:	df 91       	pop	r29
    2efa:	cf 91       	pop	r28
    2efc:	08 95       	ret

00002efe <xTaskResumeAll>:
    2efe:	cf 93       	push	r28
    2f00:	df 93       	push	r29
    2f02:	00 d0       	rcall	.+0      	; 0x2f04 <xTaskResumeAll+0x6>
    2f04:	00 d0       	rcall	.+0      	; 0x2f06 <xTaskResumeAll+0x8>
    2f06:	cd b7       	in	r28, 0x3d	; 61
    2f08:	de b7       	in	r29, 0x3e	; 62
    2f0a:	1a 82       	std	Y+2, r1	; 0x02
    2f0c:	19 82       	std	Y+1, r1	; 0x01
    2f0e:	1b 82       	std	Y+3, r1	; 0x03
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
    2f16:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    2f1a:	81 50       	subi	r24, 0x01	; 1
    2f1c:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <uxSchedulerSuspended>
    2f20:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    2f24:	88 23       	and	r24, r24
    2f26:	09 f0       	breq	.+2      	; 0x2f2a <xTaskResumeAll+0x2c>
    2f28:	77 c0       	rjmp	.+238    	; 0x3018 <xTaskResumeAll+0x11a>
    2f2a:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <uxCurrentNumberOfTasks>
    2f2e:	88 23       	and	r24, r24
    2f30:	09 f4       	brne	.+2      	; 0x2f34 <xTaskResumeAll+0x36>
    2f32:	72 c0       	rjmp	.+228    	; 0x3018 <xTaskResumeAll+0x11a>
    2f34:	49 c0       	rjmp	.+146    	; 0x2fc8 <xTaskResumeAll+0xca>
    2f36:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <xPendingReadyList+0x5>
    2f3a:	90 91 ca 05 	lds	r25, 0x05CA	; 0x8005ca <xPendingReadyList+0x6>
    2f3e:	fc 01       	movw	r30, r24
    2f40:	86 81       	ldd	r24, Z+6	; 0x06
    2f42:	97 81       	ldd	r25, Z+7	; 0x07
    2f44:	9a 83       	std	Y+2, r25	; 0x02
    2f46:	89 83       	std	Y+1, r24	; 0x01
    2f48:	89 81       	ldd	r24, Y+1	; 0x01
    2f4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f4c:	0c 96       	adiw	r24, 0x0c	; 12
    2f4e:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    2f52:	89 81       	ldd	r24, Y+1	; 0x01
    2f54:	9a 81       	ldd	r25, Y+2	; 0x02
    2f56:	02 96       	adiw	r24, 0x02	; 2
    2f58:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    2f5c:	89 81       	ldd	r24, Y+1	; 0x01
    2f5e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f60:	fc 01       	movw	r30, r24
    2f62:	96 89       	ldd	r25, Z+22	; 0x16
    2f64:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    2f68:	89 17       	cp	r24, r25
    2f6a:	30 f4       	brcc	.+12     	; 0x2f78 <xTaskResumeAll+0x7a>
    2f6c:	89 81       	ldd	r24, Y+1	; 0x01
    2f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f70:	fc 01       	movw	r30, r24
    2f72:	86 89       	ldd	r24, Z+22	; 0x16
    2f74:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    2f78:	89 81       	ldd	r24, Y+1	; 0x01
    2f7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2f7c:	ac 01       	movw	r20, r24
    2f7e:	4e 5f       	subi	r20, 0xFE	; 254
    2f80:	5f 4f       	sbci	r21, 0xFF	; 255
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	fc 01       	movw	r30, r24
    2f88:	86 89       	ldd	r24, Z+22	; 0x16
    2f8a:	28 2f       	mov	r18, r24
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	c9 01       	movw	r24, r18
    2f90:	88 0f       	add	r24, r24
    2f92:	99 1f       	adc	r25, r25
    2f94:	88 0f       	add	r24, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	88 0f       	add	r24, r24
    2f9a:	99 1f       	adc	r25, r25
    2f9c:	82 0f       	add	r24, r18
    2f9e:	93 1f       	adc	r25, r19
    2fa0:	86 57       	subi	r24, 0x76	; 118
    2fa2:	9a 4f       	sbci	r25, 0xFA	; 250
    2fa4:	ba 01       	movw	r22, r20
    2fa6:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    2faa:	89 81       	ldd	r24, Y+1	; 0x01
    2fac:	9a 81       	ldd	r25, Y+2	; 0x02
    2fae:	fc 01       	movw	r30, r24
    2fb0:	26 89       	ldd	r18, Z+22	; 0x16
    2fb2:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    2fb6:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    2fba:	fc 01       	movw	r30, r24
    2fbc:	86 89       	ldd	r24, Z+22	; 0x16
    2fbe:	28 17       	cp	r18, r24
    2fc0:	18 f0       	brcs	.+6      	; 0x2fc8 <xTaskResumeAll+0xca>
    2fc2:	81 e0       	ldi	r24, 0x01	; 1
    2fc4:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <xYieldPending>
    2fc8:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <xPendingReadyList>
    2fcc:	88 23       	and	r24, r24
    2fce:	09 f0       	breq	.+2      	; 0x2fd2 <xTaskResumeAll+0xd4>
    2fd0:	b2 cf       	rjmp	.-156    	; 0x2f36 <xTaskResumeAll+0x38>
    2fd2:	89 81       	ldd	r24, Y+1	; 0x01
    2fd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd6:	89 2b       	or	r24, r25
    2fd8:	11 f0       	breq	.+4      	; 0x2fde <xTaskResumeAll+0xe0>
    2fda:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <prvResetNextTaskUnblockTime>
    2fde:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <uxPendedTicks>
    2fe2:	8c 83       	std	Y+4, r24	; 0x04
    2fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe6:	88 23       	and	r24, r24
    2fe8:	79 f0       	breq	.+30     	; 0x3008 <xTaskResumeAll+0x10a>
    2fea:	0e 94 2d 18 	call	0x305a	; 0x305a <xTaskIncrementTick>
    2fee:	88 23       	and	r24, r24
    2ff0:	19 f0       	breq	.+6      	; 0x2ff8 <xTaskResumeAll+0xfa>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <xYieldPending>
    2ff8:	8c 81       	ldd	r24, Y+4	; 0x04
    2ffa:	81 50       	subi	r24, 0x01	; 1
    2ffc:	8c 83       	std	Y+4, r24	; 0x04
    2ffe:	8c 81       	ldd	r24, Y+4	; 0x04
    3000:	88 23       	and	r24, r24
    3002:	99 f7       	brne	.-26     	; 0x2fea <xTaskResumeAll+0xec>
    3004:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <uxPendedTicks>
    3008:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <xYieldPending>
    300c:	88 23       	and	r24, r24
    300e:	21 f0       	breq	.+8      	; 0x3018 <xTaskResumeAll+0x11a>
    3010:	81 e0       	ldi	r24, 0x01	; 1
    3012:	8b 83       	std	Y+3, r24	; 0x03
    3014:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    3018:	0f 90       	pop	r0
    301a:	0f be       	out	0x3f, r0	; 63
    301c:	8b 81       	ldd	r24, Y+3	; 0x03
    301e:	0f 90       	pop	r0
    3020:	0f 90       	pop	r0
    3022:	0f 90       	pop	r0
    3024:	0f 90       	pop	r0
    3026:	df 91       	pop	r29
    3028:	cf 91       	pop	r28
    302a:	08 95       	ret

0000302c <xTaskGetTickCount>:
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	00 d0       	rcall	.+0      	; 0x3032 <xTaskGetTickCount+0x6>
    3032:	cd b7       	in	r28, 0x3d	; 61
    3034:	de b7       	in	r29, 0x3e	; 62
    3036:	0f b6       	in	r0, 0x3f	; 63
    3038:	f8 94       	cli
    303a:	0f 92       	push	r0
    303c:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <xTickCount>
    3040:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    3044:	9a 83       	std	Y+2, r25	; 0x02
    3046:	89 83       	std	Y+1, r24	; 0x01
    3048:	0f 90       	pop	r0
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	89 81       	ldd	r24, Y+1	; 0x01
    304e:	9a 81       	ldd	r25, Y+2	; 0x02
    3050:	0f 90       	pop	r0
    3052:	0f 90       	pop	r0
    3054:	df 91       	pop	r29
    3056:	cf 91       	pop	r28
    3058:	08 95       	ret

0000305a <xTaskIncrementTick>:
    305a:	cf 93       	push	r28
    305c:	df 93       	push	r29
    305e:	cd b7       	in	r28, 0x3d	; 61
    3060:	de b7       	in	r29, 0x3e	; 62
    3062:	29 97       	sbiw	r28, 0x09	; 9
    3064:	0f b6       	in	r0, 0x3f	; 63
    3066:	f8 94       	cli
    3068:	de bf       	out	0x3e, r29	; 62
    306a:	0f be       	out	0x3f, r0	; 63
    306c:	cd bf       	out	0x3d, r28	; 61
    306e:	19 82       	std	Y+1, r1	; 0x01
    3070:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    3074:	88 23       	and	r24, r24
    3076:	09 f0       	breq	.+2      	; 0x307a <xTaskIncrementTick+0x20>
    3078:	c7 c0       	rjmp	.+398    	; 0x3208 <xTaskIncrementTick+0x1ae>
    307a:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <xTickCount>
    307e:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    3082:	01 96       	adiw	r24, 0x01	; 1
    3084:	9b 83       	std	Y+3, r25	; 0x03
    3086:	8a 83       	std	Y+2, r24	; 0x02
    3088:	8a 81       	ldd	r24, Y+2	; 0x02
    308a:	9b 81       	ldd	r25, Y+3	; 0x03
    308c:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <xTickCount+0x1>
    3090:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <xTickCount>
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	89 2b       	or	r24, r25
    309a:	d9 f4       	brne	.+54     	; 0x30d2 <xTaskIncrementTick+0x78>
    309c:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    30a0:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    30a4:	9d 83       	std	Y+5, r25	; 0x05
    30a6:	8c 83       	std	Y+4, r24	; 0x04
    30a8:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <pxOverflowDelayedTaskList>
    30ac:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <pxOverflowDelayedTaskList+0x1>
    30b0:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <pxDelayedTaskList+0x1>
    30b4:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <pxDelayedTaskList>
    30b8:	8c 81       	ldd	r24, Y+4	; 0x04
    30ba:	9d 81       	ldd	r25, Y+5	; 0x05
    30bc:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <pxOverflowDelayedTaskList+0x1>
    30c0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <pxOverflowDelayedTaskList>
    30c4:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <xNumOfOverflows>
    30c8:	8f 5f       	subi	r24, 0xFF	; 255
    30ca:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNumOfOverflows>
    30ce:	0e 94 60 1b 	call	0x36c0	; 0x36c0 <prvResetNextTaskUnblockTime>
    30d2:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <xNextTaskUnblockTime>
    30d6:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    30da:	2a 81       	ldd	r18, Y+2	; 0x02
    30dc:	3b 81       	ldd	r19, Y+3	; 0x03
    30de:	28 17       	cp	r18, r24
    30e0:	39 07       	cpc	r19, r25
    30e2:	08 f4       	brcc	.+2      	; 0x30e6 <xTaskIncrementTick+0x8c>
    30e4:	77 c0       	rjmp	.+238    	; 0x31d4 <xTaskIncrementTick+0x17a>
    30e6:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    30ea:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    30ee:	fc 01       	movw	r30, r24
    30f0:	80 81       	ld	r24, Z
    30f2:	88 23       	and	r24, r24
    30f4:	39 f4       	brne	.+14     	; 0x3104 <xTaskIncrementTick+0xaa>
    30f6:	8f ef       	ldi	r24, 0xFF	; 255
    30f8:	9f ef       	ldi	r25, 0xFF	; 255
    30fa:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    30fe:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>
    3102:	68 c0       	rjmp	.+208    	; 0x31d4 <xTaskIncrementTick+0x17a>
    3104:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    3108:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    310c:	fc 01       	movw	r30, r24
    310e:	85 81       	ldd	r24, Z+5	; 0x05
    3110:	96 81       	ldd	r25, Z+6	; 0x06
    3112:	fc 01       	movw	r30, r24
    3114:	86 81       	ldd	r24, Z+6	; 0x06
    3116:	97 81       	ldd	r25, Z+7	; 0x07
    3118:	9f 83       	std	Y+7, r25	; 0x07
    311a:	8e 83       	std	Y+6, r24	; 0x06
    311c:	8e 81       	ldd	r24, Y+6	; 0x06
    311e:	9f 81       	ldd	r25, Y+7	; 0x07
    3120:	fc 01       	movw	r30, r24
    3122:	82 81       	ldd	r24, Z+2	; 0x02
    3124:	93 81       	ldd	r25, Z+3	; 0x03
    3126:	99 87       	std	Y+9, r25	; 0x09
    3128:	88 87       	std	Y+8, r24	; 0x08
    312a:	2a 81       	ldd	r18, Y+2	; 0x02
    312c:	3b 81       	ldd	r19, Y+3	; 0x03
    312e:	88 85       	ldd	r24, Y+8	; 0x08
    3130:	99 85       	ldd	r25, Y+9	; 0x09
    3132:	28 17       	cp	r18, r24
    3134:	39 07       	cpc	r19, r25
    3136:	38 f4       	brcc	.+14     	; 0x3146 <xTaskIncrementTick+0xec>
    3138:	88 85       	ldd	r24, Y+8	; 0x08
    313a:	99 85       	ldd	r25, Y+9	; 0x09
    313c:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    3140:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>
    3144:	47 c0       	rjmp	.+142    	; 0x31d4 <xTaskIncrementTick+0x17a>
    3146:	8e 81       	ldd	r24, Y+6	; 0x06
    3148:	9f 81       	ldd	r25, Y+7	; 0x07
    314a:	02 96       	adiw	r24, 0x02	; 2
    314c:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    3150:	8e 81       	ldd	r24, Y+6	; 0x06
    3152:	9f 81       	ldd	r25, Y+7	; 0x07
    3154:	fc 01       	movw	r30, r24
    3156:	84 89       	ldd	r24, Z+20	; 0x14
    3158:	95 89       	ldd	r25, Z+21	; 0x15
    315a:	89 2b       	or	r24, r25
    315c:	29 f0       	breq	.+10     	; 0x3168 <xTaskIncrementTick+0x10e>
    315e:	8e 81       	ldd	r24, Y+6	; 0x06
    3160:	9f 81       	ldd	r25, Y+7	; 0x07
    3162:	0c 96       	adiw	r24, 0x0c	; 12
    3164:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    3168:	8e 81       	ldd	r24, Y+6	; 0x06
    316a:	9f 81       	ldd	r25, Y+7	; 0x07
    316c:	fc 01       	movw	r30, r24
    316e:	96 89       	ldd	r25, Z+22	; 0x16
    3170:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    3174:	89 17       	cp	r24, r25
    3176:	30 f4       	brcc	.+12     	; 0x3184 <xTaskIncrementTick+0x12a>
    3178:	8e 81       	ldd	r24, Y+6	; 0x06
    317a:	9f 81       	ldd	r25, Y+7	; 0x07
    317c:	fc 01       	movw	r30, r24
    317e:	86 89       	ldd	r24, Z+22	; 0x16
    3180:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    3184:	8e 81       	ldd	r24, Y+6	; 0x06
    3186:	9f 81       	ldd	r25, Y+7	; 0x07
    3188:	ac 01       	movw	r20, r24
    318a:	4e 5f       	subi	r20, 0xFE	; 254
    318c:	5f 4f       	sbci	r21, 0xFF	; 255
    318e:	8e 81       	ldd	r24, Y+6	; 0x06
    3190:	9f 81       	ldd	r25, Y+7	; 0x07
    3192:	fc 01       	movw	r30, r24
    3194:	86 89       	ldd	r24, Z+22	; 0x16
    3196:	28 2f       	mov	r18, r24
    3198:	30 e0       	ldi	r19, 0x00	; 0
    319a:	c9 01       	movw	r24, r18
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	88 0f       	add	r24, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	82 0f       	add	r24, r18
    31aa:	93 1f       	adc	r25, r19
    31ac:	86 57       	subi	r24, 0x76	; 118
    31ae:	9a 4f       	sbci	r25, 0xFA	; 250
    31b0:	ba 01       	movw	r22, r20
    31b2:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    31b6:	8e 81       	ldd	r24, Y+6	; 0x06
    31b8:	9f 81       	ldd	r25, Y+7	; 0x07
    31ba:	fc 01       	movw	r30, r24
    31bc:	26 89       	ldd	r18, Z+22	; 0x16
    31be:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    31c2:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    31c6:	fc 01       	movw	r30, r24
    31c8:	86 89       	ldd	r24, Z+22	; 0x16
    31ca:	28 17       	cp	r18, r24
    31cc:	10 f0       	brcs	.+4      	; 0x31d2 <xTaskIncrementTick+0x178>
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	89 83       	std	Y+1, r24	; 0x01
    31d2:	89 cf       	rjmp	.-238    	; 0x30e6 <xTaskIncrementTick+0x8c>
    31d4:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    31d8:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    31dc:	fc 01       	movw	r30, r24
    31de:	86 89       	ldd	r24, Z+22	; 0x16
    31e0:	28 2f       	mov	r18, r24
    31e2:	30 e0       	ldi	r19, 0x00	; 0
    31e4:	c9 01       	movw	r24, r18
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	88 0f       	add	r24, r24
    31f0:	99 1f       	adc	r25, r25
    31f2:	82 0f       	add	r24, r18
    31f4:	93 1f       	adc	r25, r19
    31f6:	86 57       	subi	r24, 0x76	; 118
    31f8:	9a 4f       	sbci	r25, 0xFA	; 250
    31fa:	fc 01       	movw	r30, r24
    31fc:	80 81       	ld	r24, Z
    31fe:	82 30       	cpi	r24, 0x02	; 2
    3200:	10 f0       	brcs	.+4      	; 0x3206 <xTaskIncrementTick+0x1ac>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	05 c0       	rjmp	.+10     	; 0x3212 <xTaskIncrementTick+0x1b8>
    3208:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <uxPendedTicks>
    320c:	8f 5f       	subi	r24, 0xFF	; 255
    320e:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <uxPendedTicks>
    3212:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <xYieldPending>
    3216:	88 23       	and	r24, r24
    3218:	11 f0       	breq	.+4      	; 0x321e <xTaskIncrementTick+0x1c4>
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	89 83       	std	Y+1, r24	; 0x01
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	29 96       	adiw	r28, 0x09	; 9
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	df 91       	pop	r29
    322e:	cf 91       	pop	r28
    3230:	08 95       	ret

00003232 <vTaskSwitchContext>:
    3232:	cf 93       	push	r28
    3234:	df 93       	push	r29
    3236:	00 d0       	rcall	.+0      	; 0x3238 <vTaskSwitchContext+0x6>
    3238:	1f 92       	push	r1
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    3242:	88 23       	and	r24, r24
    3244:	21 f0       	breq	.+8      	; 0x324e <vTaskSwitchContext+0x1c>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <xYieldPending>
    324c:	71 c0       	rjmp	.+226    	; 0x3330 <vTaskSwitchContext+0xfe>
    324e:	10 92 dd 05 	sts	0x05DD, r1	; 0x8005dd <xYieldPending>
    3252:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    3256:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    325a:	fc 01       	movw	r30, r24
    325c:	85 a1       	ldd	r24, Z+37	; 0x25
    325e:	96 a1       	ldd	r25, Z+38	; 0x26
    3260:	0e 94 0e 08 	call	0x101c	; 0x101c <switch_out>
    3264:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    3268:	89 83       	std	Y+1, r24	; 0x01
    326a:	03 c0       	rjmp	.+6      	; 0x3272 <vTaskSwitchContext+0x40>
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	81 50       	subi	r24, 0x01	; 1
    3270:	89 83       	std	Y+1, r24	; 0x01
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	c9 01       	movw	r24, r18
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	88 0f       	add	r24, r24
    3284:	99 1f       	adc	r25, r25
    3286:	82 0f       	add	r24, r18
    3288:	93 1f       	adc	r25, r19
    328a:	86 57       	subi	r24, 0x76	; 118
    328c:	9a 4f       	sbci	r25, 0xFA	; 250
    328e:	fc 01       	movw	r30, r24
    3290:	80 81       	ld	r24, Z
    3292:	88 23       	and	r24, r24
    3294:	59 f3       	breq	.-42     	; 0x326c <vTaskSwitchContext+0x3a>
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	c9 01       	movw	r24, r18
    329e:	88 0f       	add	r24, r24
    32a0:	99 1f       	adc	r25, r25
    32a2:	88 0f       	add	r24, r24
    32a4:	99 1f       	adc	r25, r25
    32a6:	88 0f       	add	r24, r24
    32a8:	99 1f       	adc	r25, r25
    32aa:	82 0f       	add	r24, r18
    32ac:	93 1f       	adc	r25, r19
    32ae:	86 57       	subi	r24, 0x76	; 118
    32b0:	9a 4f       	sbci	r25, 0xFA	; 250
    32b2:	9b 83       	std	Y+3, r25	; 0x03
    32b4:	8a 83       	std	Y+2, r24	; 0x02
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	fc 01       	movw	r30, r24
    32bc:	81 81       	ldd	r24, Z+1	; 0x01
    32be:	92 81       	ldd	r25, Z+2	; 0x02
    32c0:	fc 01       	movw	r30, r24
    32c2:	22 81       	ldd	r18, Z+2	; 0x02
    32c4:	33 81       	ldd	r19, Z+3	; 0x03
    32c6:	8a 81       	ldd	r24, Y+2	; 0x02
    32c8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ca:	fc 01       	movw	r30, r24
    32cc:	32 83       	std	Z+2, r19	; 0x02
    32ce:	21 83       	std	Z+1, r18	; 0x01
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	fc 01       	movw	r30, r24
    32d6:	21 81       	ldd	r18, Z+1	; 0x01
    32d8:	32 81       	ldd	r19, Z+2	; 0x02
    32da:	8a 81       	ldd	r24, Y+2	; 0x02
    32dc:	9b 81       	ldd	r25, Y+3	; 0x03
    32de:	03 96       	adiw	r24, 0x03	; 3
    32e0:	28 17       	cp	r18, r24
    32e2:	39 07       	cpc	r19, r25
    32e4:	69 f4       	brne	.+26     	; 0x3300 <vTaskSwitchContext+0xce>
    32e6:	8a 81       	ldd	r24, Y+2	; 0x02
    32e8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ea:	fc 01       	movw	r30, r24
    32ec:	81 81       	ldd	r24, Z+1	; 0x01
    32ee:	92 81       	ldd	r25, Z+2	; 0x02
    32f0:	fc 01       	movw	r30, r24
    32f2:	22 81       	ldd	r18, Z+2	; 0x02
    32f4:	33 81       	ldd	r19, Z+3	; 0x03
    32f6:	8a 81       	ldd	r24, Y+2	; 0x02
    32f8:	9b 81       	ldd	r25, Y+3	; 0x03
    32fa:	fc 01       	movw	r30, r24
    32fc:	32 83       	std	Z+2, r19	; 0x02
    32fe:	21 83       	std	Z+1, r18	; 0x01
    3300:	8a 81       	ldd	r24, Y+2	; 0x02
    3302:	9b 81       	ldd	r25, Y+3	; 0x03
    3304:	fc 01       	movw	r30, r24
    3306:	81 81       	ldd	r24, Z+1	; 0x01
    3308:	92 81       	ldd	r25, Z+2	; 0x02
    330a:	fc 01       	movw	r30, r24
    330c:	86 81       	ldd	r24, Z+6	; 0x06
    330e:	97 81       	ldd	r25, Z+7	; 0x07
    3310:	90 93 89 05 	sts	0x0589, r25	; 0x800589 <pxCurrentTCB+0x1>
    3314:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <pxCurrentTCB>
    3318:	89 81       	ldd	r24, Y+1	; 0x01
    331a:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    331e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    3322:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3326:	fc 01       	movw	r30, r24
    3328:	85 a1       	ldd	r24, Z+37	; 0x25
    332a:	96 a1       	ldd	r25, Z+38	; 0x26
    332c:	0e 94 04 08 	call	0x1008	; 0x1008 <switch_in>
    3330:	0f 90       	pop	r0
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	08 95       	ret

0000333c <vTaskPlaceOnEventList>:
    333c:	cf 93       	push	r28
    333e:	df 93       	push	r29
    3340:	00 d0       	rcall	.+0      	; 0x3342 <vTaskPlaceOnEventList+0x6>
    3342:	00 d0       	rcall	.+0      	; 0x3344 <vTaskPlaceOnEventList+0x8>
    3344:	cd b7       	in	r28, 0x3d	; 61
    3346:	de b7       	in	r29, 0x3e	; 62
    3348:	9a 83       	std	Y+2, r25	; 0x02
    334a:	89 83       	std	Y+1, r24	; 0x01
    334c:	7c 83       	std	Y+4, r23	; 0x04
    334e:	6b 83       	std	Y+3, r22	; 0x03
    3350:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    3354:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3358:	9c 01       	movw	r18, r24
    335a:	24 5f       	subi	r18, 0xF4	; 244
    335c:	3f 4f       	sbci	r19, 0xFF	; 255
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	b9 01       	movw	r22, r18
    3364:	0e 94 4f 09 	call	0x129e	; 0x129e <vListInsert>
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	61 e0       	ldi	r22, 0x01	; 1
    336e:	0e 94 bc 1c 	call	0x3978	; 0x3978 <prvAddCurrentTaskToDelayedList>
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	0f 90       	pop	r0
    3378:	0f 90       	pop	r0
    337a:	df 91       	pop	r29
    337c:	cf 91       	pop	r28
    337e:	08 95       	ret

00003380 <xTaskRemoveFromEventList>:
    3380:	cf 93       	push	r28
    3382:	df 93       	push	r29
    3384:	00 d0       	rcall	.+0      	; 0x3386 <xTaskRemoveFromEventList+0x6>
    3386:	00 d0       	rcall	.+0      	; 0x3388 <xTaskRemoveFromEventList+0x8>
    3388:	1f 92       	push	r1
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	9d 83       	std	Y+5, r25	; 0x05
    3390:	8c 83       	std	Y+4, r24	; 0x04
    3392:	8c 81       	ldd	r24, Y+4	; 0x04
    3394:	9d 81       	ldd	r25, Y+5	; 0x05
    3396:	fc 01       	movw	r30, r24
    3398:	85 81       	ldd	r24, Z+5	; 0x05
    339a:	96 81       	ldd	r25, Z+6	; 0x06
    339c:	fc 01       	movw	r30, r24
    339e:	86 81       	ldd	r24, Z+6	; 0x06
    33a0:	97 81       	ldd	r25, Z+7	; 0x07
    33a2:	9b 83       	std	Y+3, r25	; 0x03
    33a4:	8a 83       	std	Y+2, r24	; 0x02
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	0c 96       	adiw	r24, 0x0c	; 12
    33ac:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    33b0:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <uxSchedulerSuspended>
    33b4:	88 23       	and	r24, r24
    33b6:	69 f5       	brne	.+90     	; 0x3412 <xTaskRemoveFromEventList+0x92>
    33b8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ba:	9b 81       	ldd	r25, Y+3	; 0x03
    33bc:	02 96       	adiw	r24, 0x02	; 2
    33be:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    33c2:	8a 81       	ldd	r24, Y+2	; 0x02
    33c4:	9b 81       	ldd	r25, Y+3	; 0x03
    33c6:	fc 01       	movw	r30, r24
    33c8:	96 89       	ldd	r25, Z+22	; 0x16
    33ca:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    33ce:	89 17       	cp	r24, r25
    33d0:	30 f4       	brcc	.+12     	; 0x33de <xTaskRemoveFromEventList+0x5e>
    33d2:	8a 81       	ldd	r24, Y+2	; 0x02
    33d4:	9b 81       	ldd	r25, Y+3	; 0x03
    33d6:	fc 01       	movw	r30, r24
    33d8:	86 89       	ldd	r24, Z+22	; 0x16
    33da:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    33de:	8a 81       	ldd	r24, Y+2	; 0x02
    33e0:	9b 81       	ldd	r25, Y+3	; 0x03
    33e2:	ac 01       	movw	r20, r24
    33e4:	4e 5f       	subi	r20, 0xFE	; 254
    33e6:	5f 4f       	sbci	r21, 0xFF	; 255
    33e8:	8a 81       	ldd	r24, Y+2	; 0x02
    33ea:	9b 81       	ldd	r25, Y+3	; 0x03
    33ec:	fc 01       	movw	r30, r24
    33ee:	86 89       	ldd	r24, Z+22	; 0x16
    33f0:	28 2f       	mov	r18, r24
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	c9 01       	movw	r24, r18
    33f6:	88 0f       	add	r24, r24
    33f8:	99 1f       	adc	r25, r25
    33fa:	88 0f       	add	r24, r24
    33fc:	99 1f       	adc	r25, r25
    33fe:	88 0f       	add	r24, r24
    3400:	99 1f       	adc	r25, r25
    3402:	82 0f       	add	r24, r18
    3404:	93 1f       	adc	r25, r19
    3406:	86 57       	subi	r24, 0x76	; 118
    3408:	9a 4f       	sbci	r25, 0xFA	; 250
    340a:	ba 01       	movw	r22, r20
    340c:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    3410:	08 c0       	rjmp	.+16     	; 0x3422 <xTaskRemoveFromEventList+0xa2>
    3412:	8a 81       	ldd	r24, Y+2	; 0x02
    3414:	9b 81       	ldd	r25, Y+3	; 0x03
    3416:	0c 96       	adiw	r24, 0x0c	; 12
    3418:	bc 01       	movw	r22, r24
    341a:	84 ec       	ldi	r24, 0xC4	; 196
    341c:	95 e0       	ldi	r25, 0x05	; 5
    341e:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    3422:	8a 81       	ldd	r24, Y+2	; 0x02
    3424:	9b 81       	ldd	r25, Y+3	; 0x03
    3426:	fc 01       	movw	r30, r24
    3428:	26 89       	ldd	r18, Z+22	; 0x16
    342a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    342e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3432:	fc 01       	movw	r30, r24
    3434:	86 89       	ldd	r24, Z+22	; 0x16
    3436:	82 17       	cp	r24, r18
    3438:	30 f4       	brcc	.+12     	; 0x3446 <xTaskRemoveFromEventList+0xc6>
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <xYieldPending>
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <xTaskRemoveFromEventList+0xc8>
    3446:	19 82       	std	Y+1, r1	; 0x01
    3448:	89 81       	ldd	r24, Y+1	; 0x01
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	0f 90       	pop	r0
    3450:	0f 90       	pop	r0
    3452:	0f 90       	pop	r0
    3454:	df 91       	pop	r29
    3456:	cf 91       	pop	r28
    3458:	08 95       	ret

0000345a <vTaskSetTimeOutState>:
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	00 d0       	rcall	.+0      	; 0x3460 <vTaskSetTimeOutState+0x6>
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	9a 83       	std	Y+2, r25	; 0x02
    3466:	89 83       	std	Y+1, r24	; 0x01
    3468:	20 91 de 05 	lds	r18, 0x05DE	; 0x8005de <xNumOfOverflows>
    346c:	89 81       	ldd	r24, Y+1	; 0x01
    346e:	9a 81       	ldd	r25, Y+2	; 0x02
    3470:	fc 01       	movw	r30, r24
    3472:	20 83       	st	Z, r18
    3474:	20 91 d8 05 	lds	r18, 0x05D8	; 0x8005d8 <xTickCount>
    3478:	30 91 d9 05 	lds	r19, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    347c:	89 81       	ldd	r24, Y+1	; 0x01
    347e:	9a 81       	ldd	r25, Y+2	; 0x02
    3480:	fc 01       	movw	r30, r24
    3482:	32 83       	std	Z+2, r19	; 0x02
    3484:	21 83       	std	Z+1, r18	; 0x01
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
    348a:	df 91       	pop	r29
    348c:	cf 91       	pop	r28
    348e:	08 95       	ret

00003490 <xTaskCheckForTimeOut>:
    3490:	cf 93       	push	r28
    3492:	df 93       	push	r29
    3494:	cd b7       	in	r28, 0x3d	; 61
    3496:	de b7       	in	r29, 0x3e	; 62
    3498:	27 97       	sbiw	r28, 0x07	; 7
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	9d 83       	std	Y+5, r25	; 0x05
    34a6:	8c 83       	std	Y+4, r24	; 0x04
    34a8:	7f 83       	std	Y+7, r23	; 0x07
    34aa:	6e 83       	std	Y+6, r22	; 0x06
    34ac:	0f b6       	in	r0, 0x3f	; 63
    34ae:	f8 94       	cli
    34b0:	0f 92       	push	r0
    34b2:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <xTickCount>
    34b6:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    34ba:	9b 83       	std	Y+3, r25	; 0x03
    34bc:	8a 83       	std	Y+2, r24	; 0x02
    34be:	8c 81       	ldd	r24, Y+4	; 0x04
    34c0:	9d 81       	ldd	r25, Y+5	; 0x05
    34c2:	fc 01       	movw	r30, r24
    34c4:	90 81       	ld	r25, Z
    34c6:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <xNumOfOverflows>
    34ca:	98 17       	cp	r25, r24
    34cc:	69 f0       	breq	.+26     	; 0x34e8 <xTaskCheckForTimeOut+0x58>
    34ce:	8c 81       	ldd	r24, Y+4	; 0x04
    34d0:	9d 81       	ldd	r25, Y+5	; 0x05
    34d2:	fc 01       	movw	r30, r24
    34d4:	21 81       	ldd	r18, Z+1	; 0x01
    34d6:	32 81       	ldd	r19, Z+2	; 0x02
    34d8:	8a 81       	ldd	r24, Y+2	; 0x02
    34da:	9b 81       	ldd	r25, Y+3	; 0x03
    34dc:	82 17       	cp	r24, r18
    34de:	93 07       	cpc	r25, r19
    34e0:	18 f0       	brcs	.+6      	; 0x34e8 <xTaskCheckForTimeOut+0x58>
    34e2:	81 e0       	ldi	r24, 0x01	; 1
    34e4:	89 83       	std	Y+1, r24	; 0x01
    34e6:	30 c0       	rjmp	.+96     	; 0x3548 <xTaskCheckForTimeOut+0xb8>
    34e8:	8c 81       	ldd	r24, Y+4	; 0x04
    34ea:	9d 81       	ldd	r25, Y+5	; 0x05
    34ec:	fc 01       	movw	r30, r24
    34ee:	81 81       	ldd	r24, Z+1	; 0x01
    34f0:	92 81       	ldd	r25, Z+2	; 0x02
    34f2:	2a 81       	ldd	r18, Y+2	; 0x02
    34f4:	3b 81       	ldd	r19, Y+3	; 0x03
    34f6:	28 1b       	sub	r18, r24
    34f8:	39 0b       	sbc	r19, r25
    34fa:	8e 81       	ldd	r24, Y+6	; 0x06
    34fc:	9f 81       	ldd	r25, Y+7	; 0x07
    34fe:	fc 01       	movw	r30, r24
    3500:	80 81       	ld	r24, Z
    3502:	91 81       	ldd	r25, Z+1	; 0x01
    3504:	28 17       	cp	r18, r24
    3506:	39 07       	cpc	r19, r25
    3508:	e8 f4       	brcc	.+58     	; 0x3544 <xTaskCheckForTimeOut+0xb4>
    350a:	8e 81       	ldd	r24, Y+6	; 0x06
    350c:	9f 81       	ldd	r25, Y+7	; 0x07
    350e:	fc 01       	movw	r30, r24
    3510:	20 81       	ld	r18, Z
    3512:	31 81       	ldd	r19, Z+1	; 0x01
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
    3516:	9d 81       	ldd	r25, Y+5	; 0x05
    3518:	fc 01       	movw	r30, r24
    351a:	41 81       	ldd	r20, Z+1	; 0x01
    351c:	52 81       	ldd	r21, Z+2	; 0x02
    351e:	8a 81       	ldd	r24, Y+2	; 0x02
    3520:	9b 81       	ldd	r25, Y+3	; 0x03
    3522:	ba 01       	movw	r22, r20
    3524:	68 1b       	sub	r22, r24
    3526:	79 0b       	sbc	r23, r25
    3528:	cb 01       	movw	r24, r22
    352a:	28 0f       	add	r18, r24
    352c:	39 1f       	adc	r19, r25
    352e:	8e 81       	ldd	r24, Y+6	; 0x06
    3530:	9f 81       	ldd	r25, Y+7	; 0x07
    3532:	fc 01       	movw	r30, r24
    3534:	31 83       	std	Z+1, r19	; 0x01
    3536:	20 83       	st	Z, r18
    3538:	8c 81       	ldd	r24, Y+4	; 0x04
    353a:	9d 81       	ldd	r25, Y+5	; 0x05
    353c:	0e 94 2d 1a 	call	0x345a	; 0x345a <vTaskSetTimeOutState>
    3540:	19 82       	std	Y+1, r1	; 0x01
    3542:	02 c0       	rjmp	.+4      	; 0x3548 <xTaskCheckForTimeOut+0xb8>
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	89 83       	std	Y+1, r24	; 0x01
    3548:	0f 90       	pop	r0
    354a:	0f be       	out	0x3f, r0	; 63
    354c:	89 81       	ldd	r24, Y+1	; 0x01
    354e:	27 96       	adiw	r28, 0x07	; 7
    3550:	0f b6       	in	r0, 0x3f	; 63
    3552:	f8 94       	cli
    3554:	de bf       	out	0x3e, r29	; 62
    3556:	0f be       	out	0x3f, r0	; 63
    3558:	cd bf       	out	0x3d, r28	; 61
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <vTaskMissedYield>:
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <xYieldPending>
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	08 95       	ret

00003574 <prvIdleTask>:
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	00 d0       	rcall	.+0      	; 0x357a <prvIdleTask+0x6>
    357a:	cd b7       	in	r28, 0x3d	; 61
    357c:	de b7       	in	r29, 0x3e	; 62
    357e:	9a 83       	std	Y+2, r25	; 0x02
    3580:	89 83       	std	Y+1, r24	; 0x01
    3582:	0e 94 09 1b 	call	0x3612	; 0x3612 <prvCheckTasksWaitingTermination>
    3586:	80 91 8a 05 	lds	r24, 0x058A	; 0x80058a <pxReadyTasksLists>
    358a:	82 30       	cpi	r24, 0x02	; 2
    358c:	10 f0       	brcs	.+4      	; 0x3592 <prvIdleTask+0x1e>
    358e:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <vPortYield>
    3592:	0e 94 64 06 	call	0xcc8	; 0xcc8 <vApplicationIdleHook>
    3596:	f5 cf       	rjmp	.-22     	; 0x3582 <prvIdleTask+0xe>

00003598 <prvInitialiseTaskLists>:
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	1f 92       	push	r1
    359e:	cd b7       	in	r28, 0x3d	; 61
    35a0:	de b7       	in	r29, 0x3e	; 62
    35a2:	19 82       	std	Y+1, r1	; 0x01
    35a4:	13 c0       	rjmp	.+38     	; 0x35cc <prvInitialiseTaskLists+0x34>
    35a6:	89 81       	ldd	r24, Y+1	; 0x01
    35a8:	28 2f       	mov	r18, r24
    35aa:	30 e0       	ldi	r19, 0x00	; 0
    35ac:	c9 01       	movw	r24, r18
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	88 0f       	add	r24, r24
    35b8:	99 1f       	adc	r25, r25
    35ba:	82 0f       	add	r24, r18
    35bc:	93 1f       	adc	r25, r19
    35be:	86 57       	subi	r24, 0x76	; 118
    35c0:	9a 4f       	sbci	r25, 0xFA	; 250
    35c2:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    35c6:	89 81       	ldd	r24, Y+1	; 0x01
    35c8:	8f 5f       	subi	r24, 0xFF	; 255
    35ca:	89 83       	std	Y+1, r24	; 0x01
    35cc:	89 81       	ldd	r24, Y+1	; 0x01
    35ce:	84 30       	cpi	r24, 0x04	; 4
    35d0:	50 f3       	brcs	.-44     	; 0x35a6 <prvInitialiseTaskLists+0xe>
    35d2:	8e ea       	ldi	r24, 0xAE	; 174
    35d4:	95 e0       	ldi	r25, 0x05	; 5
    35d6:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    35da:	87 eb       	ldi	r24, 0xB7	; 183
    35dc:	95 e0       	ldi	r25, 0x05	; 5
    35de:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    35e2:	84 ec       	ldi	r24, 0xC4	; 196
    35e4:	95 e0       	ldi	r25, 0x05	; 5
    35e6:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    35ea:	8d ec       	ldi	r24, 0xCD	; 205
    35ec:	95 e0       	ldi	r25, 0x05	; 5
    35ee:	0e 94 bb 08 	call	0x1176	; 0x1176 <vListInitialise>
    35f2:	8e ea       	ldi	r24, 0xAE	; 174
    35f4:	95 e0       	ldi	r25, 0x05	; 5
    35f6:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <pxDelayedTaskList+0x1>
    35fa:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <pxDelayedTaskList>
    35fe:	87 eb       	ldi	r24, 0xB7	; 183
    3600:	95 e0       	ldi	r25, 0x05	; 5
    3602:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <pxOverflowDelayedTaskList+0x1>
    3606:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <pxOverflowDelayedTaskList>
    360a:	0f 90       	pop	r0
    360c:	df 91       	pop	r29
    360e:	cf 91       	pop	r28
    3610:	08 95       	ret

00003612 <prvCheckTasksWaitingTermination>:
    3612:	cf 93       	push	r28
    3614:	df 93       	push	r29
    3616:	00 d0       	rcall	.+0      	; 0x3618 <prvCheckTasksWaitingTermination+0x6>
    3618:	1f 92       	push	r1
    361a:	cd b7       	in	r28, 0x3d	; 61
    361c:	de b7       	in	r29, 0x3e	; 62
    361e:	2f c0       	rjmp	.+94     	; 0x367e <prvCheckTasksWaitingTermination+0x6c>
    3620:	0e 94 73 17 	call	0x2ee6	; 0x2ee6 <vTaskSuspendAll>
    3624:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <xTasksWaitingTermination>
    3628:	81 e0       	ldi	r24, 0x01	; 1
    362a:	99 23       	and	r25, r25
    362c:	09 f0       	breq	.+2      	; 0x3630 <prvCheckTasksWaitingTermination+0x1e>
    362e:	80 e0       	ldi	r24, 0x00	; 0
    3630:	89 83       	std	Y+1, r24	; 0x01
    3632:	0e 94 7f 17 	call	0x2efe	; 0x2efe <xTaskResumeAll>
    3636:	89 81       	ldd	r24, Y+1	; 0x01
    3638:	88 23       	and	r24, r24
    363a:	09 f5       	brne	.+66     	; 0x367e <prvCheckTasksWaitingTermination+0x6c>
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	0f 92       	push	r0
    3642:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <xTasksWaitingTermination+0x5>
    3646:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <xTasksWaitingTermination+0x6>
    364a:	fc 01       	movw	r30, r24
    364c:	86 81       	ldd	r24, Z+6	; 0x06
    364e:	97 81       	ldd	r25, Z+7	; 0x07
    3650:	9b 83       	std	Y+3, r25	; 0x03
    3652:	8a 83       	std	Y+2, r24	; 0x02
    3654:	8a 81       	ldd	r24, Y+2	; 0x02
    3656:	9b 81       	ldd	r25, Y+3	; 0x03
    3658:	02 96       	adiw	r24, 0x02	; 2
    365a:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    365e:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <uxCurrentNumberOfTasks>
    3662:	81 50       	subi	r24, 0x01	; 1
    3664:	80 93 d7 05 	sts	0x05D7, r24	; 0x8005d7 <uxCurrentNumberOfTasks>
    3668:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxDeletedTasksWaitingCleanUp>
    366c:	81 50       	subi	r24, 0x01	; 1
    366e:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <uxDeletedTasksWaitingCleanUp>
    3672:	0f 90       	pop	r0
    3674:	0f be       	out	0x3f, r0	; 63
    3676:	8a 81       	ldd	r24, Y+2	; 0x02
    3678:	9b 81       	ldd	r25, Y+3	; 0x03
    367a:	0e 94 49 1b 	call	0x3692	; 0x3692 <prvDeleteTCB>
    367e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxDeletedTasksWaitingCleanUp>
    3682:	88 23       	and	r24, r24
    3684:	69 f6       	brne	.-102    	; 0x3620 <prvCheckTasksWaitingTermination+0xe>
    3686:	0f 90       	pop	r0
    3688:	0f 90       	pop	r0
    368a:	0f 90       	pop	r0
    368c:	df 91       	pop	r29
    368e:	cf 91       	pop	r28
    3690:	08 95       	ret

00003692 <prvDeleteTCB>:
    3692:	cf 93       	push	r28
    3694:	df 93       	push	r29
    3696:	00 d0       	rcall	.+0      	; 0x3698 <prvDeleteTCB+0x6>
    3698:	cd b7       	in	r28, 0x3d	; 61
    369a:	de b7       	in	r29, 0x3e	; 62
    369c:	9a 83       	std	Y+2, r25	; 0x02
    369e:	89 83       	std	Y+1, r24	; 0x01
    36a0:	89 81       	ldd	r24, Y+1	; 0x01
    36a2:	9a 81       	ldd	r25, Y+2	; 0x02
    36a4:	fc 01       	movw	r30, r24
    36a6:	87 89       	ldd	r24, Z+23	; 0x17
    36a8:	90 8d       	ldd	r25, Z+24	; 0x18
    36aa:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <vPortFree>
    36ae:	89 81       	ldd	r24, Y+1	; 0x01
    36b0:	9a 81       	ldd	r25, Y+2	; 0x02
    36b2:	0e 94 6a 0d 	call	0x1ad4	; 0x1ad4 <vPortFree>
    36b6:	0f 90       	pop	r0
    36b8:	0f 90       	pop	r0
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	08 95       	ret

000036c0 <prvResetNextTaskUnblockTime>:
    36c0:	cf 93       	push	r28
    36c2:	df 93       	push	r29
    36c4:	00 d0       	rcall	.+0      	; 0x36c6 <prvResetNextTaskUnblockTime+0x6>
    36c6:	cd b7       	in	r28, 0x3d	; 61
    36c8:	de b7       	in	r29, 0x3e	; 62
    36ca:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    36ce:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    36d2:	fc 01       	movw	r30, r24
    36d4:	80 81       	ld	r24, Z
    36d6:	88 23       	and	r24, r24
    36d8:	39 f4       	brne	.+14     	; 0x36e8 <prvResetNextTaskUnblockTime+0x28>
    36da:	8f ef       	ldi	r24, 0xFF	; 255
    36dc:	9f ef       	ldi	r25, 0xFF	; 255
    36de:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    36e2:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>
    36e6:	15 c0       	rjmp	.+42     	; 0x3712 <prvResetNextTaskUnblockTime+0x52>
    36e8:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    36ec:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    36f0:	fc 01       	movw	r30, r24
    36f2:	85 81       	ldd	r24, Z+5	; 0x05
    36f4:	96 81       	ldd	r25, Z+6	; 0x06
    36f6:	fc 01       	movw	r30, r24
    36f8:	86 81       	ldd	r24, Z+6	; 0x06
    36fa:	97 81       	ldd	r25, Z+7	; 0x07
    36fc:	9a 83       	std	Y+2, r25	; 0x02
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	fc 01       	movw	r30, r24
    3706:	82 81       	ldd	r24, Z+2	; 0x02
    3708:	93 81       	ldd	r25, Z+3	; 0x03
    370a:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    370e:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>
    3712:	0f 90       	pop	r0
    3714:	0f 90       	pop	r0
    3716:	df 91       	pop	r29
    3718:	cf 91       	pop	r28
    371a:	08 95       	ret

0000371c <vTaskPriorityInherit>:
    371c:	cf 93       	push	r28
    371e:	df 93       	push	r29
    3720:	00 d0       	rcall	.+0      	; 0x3722 <vTaskPriorityInherit+0x6>
    3722:	00 d0       	rcall	.+0      	; 0x3724 <vTaskPriorityInherit+0x8>
    3724:	cd b7       	in	r28, 0x3d	; 61
    3726:	de b7       	in	r29, 0x3e	; 62
    3728:	9c 83       	std	Y+4, r25	; 0x04
    372a:	8b 83       	std	Y+3, r24	; 0x03
    372c:	8b 81       	ldd	r24, Y+3	; 0x03
    372e:	9c 81       	ldd	r25, Y+4	; 0x04
    3730:	9a 83       	std	Y+2, r25	; 0x02
    3732:	89 83       	std	Y+1, r24	; 0x01
    3734:	8b 81       	ldd	r24, Y+3	; 0x03
    3736:	9c 81       	ldd	r25, Y+4	; 0x04
    3738:	89 2b       	or	r24, r25
    373a:	09 f4       	brne	.+2      	; 0x373e <vTaskPriorityInherit+0x22>
    373c:	7f c0       	rjmp	.+254    	; 0x383c <vTaskPriorityInherit+0x120>
    373e:	89 81       	ldd	r24, Y+1	; 0x01
    3740:	9a 81       	ldd	r25, Y+2	; 0x02
    3742:	fc 01       	movw	r30, r24
    3744:	26 89       	ldd	r18, Z+22	; 0x16
    3746:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    374a:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    374e:	fc 01       	movw	r30, r24
    3750:	86 89       	ldd	r24, Z+22	; 0x16
    3752:	28 17       	cp	r18, r24
    3754:	08 f0       	brcs	.+2      	; 0x3758 <vTaskPriorityInherit+0x3c>
    3756:	72 c0       	rjmp	.+228    	; 0x383c <vTaskPriorityInherit+0x120>
    3758:	89 81       	ldd	r24, Y+1	; 0x01
    375a:	9a 81       	ldd	r25, Y+2	; 0x02
    375c:	fc 01       	movw	r30, r24
    375e:	84 85       	ldd	r24, Z+12	; 0x0c
    3760:	95 85       	ldd	r25, Z+13	; 0x0d
    3762:	99 23       	and	r25, r25
    3764:	8c f0       	brlt	.+34     	; 0x3788 <vTaskPriorityInherit+0x6c>
    3766:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    376a:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    376e:	fc 01       	movw	r30, r24
    3770:	86 89       	ldd	r24, Z+22	; 0x16
    3772:	88 2f       	mov	r24, r24
    3774:	90 e0       	ldi	r25, 0x00	; 0
    3776:	24 e0       	ldi	r18, 0x04	; 4
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	28 1b       	sub	r18, r24
    377c:	39 0b       	sbc	r19, r25
    377e:	89 81       	ldd	r24, Y+1	; 0x01
    3780:	9a 81       	ldd	r25, Y+2	; 0x02
    3782:	fc 01       	movw	r30, r24
    3784:	35 87       	std	Z+13, r19	; 0x0d
    3786:	24 87       	std	Z+12, r18	; 0x0c
    3788:	89 81       	ldd	r24, Y+1	; 0x01
    378a:	9a 81       	ldd	r25, Y+2	; 0x02
    378c:	fc 01       	movw	r30, r24
    378e:	42 85       	ldd	r20, Z+10	; 0x0a
    3790:	53 85       	ldd	r21, Z+11	; 0x0b
    3792:	89 81       	ldd	r24, Y+1	; 0x01
    3794:	9a 81       	ldd	r25, Y+2	; 0x02
    3796:	fc 01       	movw	r30, r24
    3798:	86 89       	ldd	r24, Z+22	; 0x16
    379a:	28 2f       	mov	r18, r24
    379c:	30 e0       	ldi	r19, 0x00	; 0
    379e:	c9 01       	movw	r24, r18
    37a0:	88 0f       	add	r24, r24
    37a2:	99 1f       	adc	r25, r25
    37a4:	88 0f       	add	r24, r24
    37a6:	99 1f       	adc	r25, r25
    37a8:	88 0f       	add	r24, r24
    37aa:	99 1f       	adc	r25, r25
    37ac:	82 0f       	add	r24, r18
    37ae:	93 1f       	adc	r25, r19
    37b0:	86 57       	subi	r24, 0x76	; 118
    37b2:	9a 4f       	sbci	r25, 0xFA	; 250
    37b4:	48 17       	cp	r20, r24
    37b6:	59 07       	cpc	r21, r25
    37b8:	b9 f5       	brne	.+110    	; 0x3828 <vTaskPriorityInherit+0x10c>
    37ba:	89 81       	ldd	r24, Y+1	; 0x01
    37bc:	9a 81       	ldd	r25, Y+2	; 0x02
    37be:	02 96       	adiw	r24, 0x02	; 2
    37c0:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    37c4:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    37c8:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    37cc:	fc 01       	movw	r30, r24
    37ce:	26 89       	ldd	r18, Z+22	; 0x16
    37d0:	89 81       	ldd	r24, Y+1	; 0x01
    37d2:	9a 81       	ldd	r25, Y+2	; 0x02
    37d4:	fc 01       	movw	r30, r24
    37d6:	26 8b       	std	Z+22, r18	; 0x16
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
    37dc:	fc 01       	movw	r30, r24
    37de:	96 89       	ldd	r25, Z+22	; 0x16
    37e0:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    37e4:	89 17       	cp	r24, r25
    37e6:	30 f4       	brcc	.+12     	; 0x37f4 <vTaskPriorityInherit+0xd8>
    37e8:	89 81       	ldd	r24, Y+1	; 0x01
    37ea:	9a 81       	ldd	r25, Y+2	; 0x02
    37ec:	fc 01       	movw	r30, r24
    37ee:	86 89       	ldd	r24, Z+22	; 0x16
    37f0:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    37f4:	89 81       	ldd	r24, Y+1	; 0x01
    37f6:	9a 81       	ldd	r25, Y+2	; 0x02
    37f8:	ac 01       	movw	r20, r24
    37fa:	4e 5f       	subi	r20, 0xFE	; 254
    37fc:	5f 4f       	sbci	r21, 0xFF	; 255
    37fe:	89 81       	ldd	r24, Y+1	; 0x01
    3800:	9a 81       	ldd	r25, Y+2	; 0x02
    3802:	fc 01       	movw	r30, r24
    3804:	86 89       	ldd	r24, Z+22	; 0x16
    3806:	28 2f       	mov	r18, r24
    3808:	30 e0       	ldi	r19, 0x00	; 0
    380a:	c9 01       	movw	r24, r18
    380c:	88 0f       	add	r24, r24
    380e:	99 1f       	adc	r25, r25
    3810:	88 0f       	add	r24, r24
    3812:	99 1f       	adc	r25, r25
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	82 0f       	add	r24, r18
    381a:	93 1f       	adc	r25, r19
    381c:	86 57       	subi	r24, 0x76	; 118
    381e:	9a 4f       	sbci	r25, 0xFA	; 250
    3820:	ba 01       	movw	r22, r20
    3822:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    3826:	0a c0       	rjmp	.+20     	; 0x383c <vTaskPriorityInherit+0x120>
    3828:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    382c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3830:	fc 01       	movw	r30, r24
    3832:	26 89       	ldd	r18, Z+22	; 0x16
    3834:	89 81       	ldd	r24, Y+1	; 0x01
    3836:	9a 81       	ldd	r25, Y+2	; 0x02
    3838:	fc 01       	movw	r30, r24
    383a:	26 8b       	std	Z+22, r18	; 0x16
    383c:	0f 90       	pop	r0
    383e:	0f 90       	pop	r0
    3840:	0f 90       	pop	r0
    3842:	0f 90       	pop	r0
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	08 95       	ret

0000384a <xTaskPriorityDisinherit>:
    384a:	cf 93       	push	r28
    384c:	df 93       	push	r29
    384e:	00 d0       	rcall	.+0      	; 0x3850 <xTaskPriorityDisinherit+0x6>
    3850:	00 d0       	rcall	.+0      	; 0x3852 <xTaskPriorityDisinherit+0x8>
    3852:	1f 92       	push	r1
    3854:	cd b7       	in	r28, 0x3d	; 61
    3856:	de b7       	in	r29, 0x3e	; 62
    3858:	9d 83       	std	Y+5, r25	; 0x05
    385a:	8c 83       	std	Y+4, r24	; 0x04
    385c:	8c 81       	ldd	r24, Y+4	; 0x04
    385e:	9d 81       	ldd	r25, Y+5	; 0x05
    3860:	9b 83       	std	Y+3, r25	; 0x03
    3862:	8a 83       	std	Y+2, r24	; 0x02
    3864:	19 82       	std	Y+1, r1	; 0x01
    3866:	8c 81       	ldd	r24, Y+4	; 0x04
    3868:	9d 81       	ldd	r25, Y+5	; 0x05
    386a:	89 2b       	or	r24, r25
    386c:	09 f4       	brne	.+2      	; 0x3870 <xTaskPriorityDisinherit+0x26>
    386e:	61 c0       	rjmp	.+194    	; 0x3932 <xTaskPriorityDisinherit+0xe8>
    3870:	8a 81       	ldd	r24, Y+2	; 0x02
    3872:	9b 81       	ldd	r25, Y+3	; 0x03
    3874:	fc 01       	movw	r30, r24
    3876:	84 a1       	ldd	r24, Z+36	; 0x24
    3878:	2f ef       	ldi	r18, 0xFF	; 255
    387a:	28 0f       	add	r18, r24
    387c:	8a 81       	ldd	r24, Y+2	; 0x02
    387e:	9b 81       	ldd	r25, Y+3	; 0x03
    3880:	fc 01       	movw	r30, r24
    3882:	24 a3       	std	Z+36, r18	; 0x24
    3884:	8a 81       	ldd	r24, Y+2	; 0x02
    3886:	9b 81       	ldd	r25, Y+3	; 0x03
    3888:	fc 01       	movw	r30, r24
    388a:	26 89       	ldd	r18, Z+22	; 0x16
    388c:	8a 81       	ldd	r24, Y+2	; 0x02
    388e:	9b 81       	ldd	r25, Y+3	; 0x03
    3890:	fc 01       	movw	r30, r24
    3892:	83 a1       	ldd	r24, Z+35	; 0x23
    3894:	28 17       	cp	r18, r24
    3896:	09 f4       	brne	.+2      	; 0x389a <xTaskPriorityDisinherit+0x50>
    3898:	4c c0       	rjmp	.+152    	; 0x3932 <xTaskPriorityDisinherit+0xe8>
    389a:	8a 81       	ldd	r24, Y+2	; 0x02
    389c:	9b 81       	ldd	r25, Y+3	; 0x03
    389e:	fc 01       	movw	r30, r24
    38a0:	84 a1       	ldd	r24, Z+36	; 0x24
    38a2:	88 23       	and	r24, r24
    38a4:	09 f0       	breq	.+2      	; 0x38a8 <xTaskPriorityDisinherit+0x5e>
    38a6:	45 c0       	rjmp	.+138    	; 0x3932 <xTaskPriorityDisinherit+0xe8>
    38a8:	8a 81       	ldd	r24, Y+2	; 0x02
    38aa:	9b 81       	ldd	r25, Y+3	; 0x03
    38ac:	02 96       	adiw	r24, 0x02	; 2
    38ae:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
    38b2:	8a 81       	ldd	r24, Y+2	; 0x02
    38b4:	9b 81       	ldd	r25, Y+3	; 0x03
    38b6:	fc 01       	movw	r30, r24
    38b8:	23 a1       	ldd	r18, Z+35	; 0x23
    38ba:	8a 81       	ldd	r24, Y+2	; 0x02
    38bc:	9b 81       	ldd	r25, Y+3	; 0x03
    38be:	fc 01       	movw	r30, r24
    38c0:	26 8b       	std	Z+22, r18	; 0x16
    38c2:	8a 81       	ldd	r24, Y+2	; 0x02
    38c4:	9b 81       	ldd	r25, Y+3	; 0x03
    38c6:	fc 01       	movw	r30, r24
    38c8:	86 89       	ldd	r24, Z+22	; 0x16
    38ca:	88 2f       	mov	r24, r24
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	24 e0       	ldi	r18, 0x04	; 4
    38d0:	30 e0       	ldi	r19, 0x00	; 0
    38d2:	28 1b       	sub	r18, r24
    38d4:	39 0b       	sbc	r19, r25
    38d6:	8a 81       	ldd	r24, Y+2	; 0x02
    38d8:	9b 81       	ldd	r25, Y+3	; 0x03
    38da:	fc 01       	movw	r30, r24
    38dc:	35 87       	std	Z+13, r19	; 0x0d
    38de:	24 87       	std	Z+12, r18	; 0x0c
    38e0:	8a 81       	ldd	r24, Y+2	; 0x02
    38e2:	9b 81       	ldd	r25, Y+3	; 0x03
    38e4:	fc 01       	movw	r30, r24
    38e6:	96 89       	ldd	r25, Z+22	; 0x16
    38e8:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxTopReadyPriority>
    38ec:	89 17       	cp	r24, r25
    38ee:	30 f4       	brcc	.+12     	; 0x38fc <xTaskPriorityDisinherit+0xb2>
    38f0:	8a 81       	ldd	r24, Y+2	; 0x02
    38f2:	9b 81       	ldd	r25, Y+3	; 0x03
    38f4:	fc 01       	movw	r30, r24
    38f6:	86 89       	ldd	r24, Z+22	; 0x16
    38f8:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxTopReadyPriority>
    38fc:	8a 81       	ldd	r24, Y+2	; 0x02
    38fe:	9b 81       	ldd	r25, Y+3	; 0x03
    3900:	ac 01       	movw	r20, r24
    3902:	4e 5f       	subi	r20, 0xFE	; 254
    3904:	5f 4f       	sbci	r21, 0xFF	; 255
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	9b 81       	ldd	r25, Y+3	; 0x03
    390a:	fc 01       	movw	r30, r24
    390c:	86 89       	ldd	r24, Z+22	; 0x16
    390e:	28 2f       	mov	r18, r24
    3910:	30 e0       	ldi	r19, 0x00	; 0
    3912:	c9 01       	movw	r24, r18
    3914:	88 0f       	add	r24, r24
    3916:	99 1f       	adc	r25, r25
    3918:	88 0f       	add	r24, r24
    391a:	99 1f       	adc	r25, r25
    391c:	88 0f       	add	r24, r24
    391e:	99 1f       	adc	r25, r25
    3920:	82 0f       	add	r24, r18
    3922:	93 1f       	adc	r25, r19
    3924:	86 57       	subi	r24, 0x76	; 118
    3926:	9a 4f       	sbci	r25, 0xFA	; 250
    3928:	ba 01       	movw	r22, r20
    392a:	0e 94 01 09 	call	0x1202	; 0x1202 <vListInsertEnd>
    392e:	81 e0       	ldi	r24, 0x01	; 1
    3930:	89 83       	std	Y+1, r24	; 0x01
    3932:	89 81       	ldd	r24, Y+1	; 0x01
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	0f 90       	pop	r0
    393c:	0f 90       	pop	r0
    393e:	df 91       	pop	r29
    3940:	cf 91       	pop	r28
    3942:	08 95       	ret

00003944 <pvTaskIncrementMutexHeldCount>:
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    394c:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    3950:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3954:	89 2b       	or	r24, r25
    3956:	49 f0       	breq	.+18     	; 0x396a <pvTaskIncrementMutexHeldCount+0x26>
    3958:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    395c:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3960:	fc 01       	movw	r30, r24
    3962:	24 a1       	ldd	r18, Z+36	; 0x24
    3964:	2f 5f       	subi	r18, 0xFF	; 255
    3966:	fc 01       	movw	r30, r24
    3968:	24 a3       	std	Z+36, r18	; 0x24
    396a:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    396e:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3972:	df 91       	pop	r29
    3974:	cf 91       	pop	r28
    3976:	08 95       	ret

00003978 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3978:	cf 93       	push	r28
    397a:	df 93       	push	r29
    397c:	cd b7       	in	r28, 0x3d	; 61
    397e:	de b7       	in	r29, 0x3e	; 62
    3980:	27 97       	sbiw	r28, 0x07	; 7
    3982:	0f b6       	in	r0, 0x3f	; 63
    3984:	f8 94       	cli
    3986:	de bf       	out	0x3e, r29	; 62
    3988:	0f be       	out	0x3f, r0	; 63
    398a:	cd bf       	out	0x3d, r28	; 61
    398c:	9e 83       	std	Y+6, r25	; 0x06
    398e:	8d 83       	std	Y+5, r24	; 0x05
    3990:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3992:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <xTickCount>
    3996:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <xTickCount+0x1>
    399a:	9a 83       	std	Y+2, r25	; 0x02
    399c:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    399e:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    39a2:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    39a6:	02 96       	adiw	r24, 0x02	; 2
    39a8:	0e 94 c6 09 	call	0x138c	; 0x138c <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    39ac:	29 81       	ldd	r18, Y+1	; 0x01
    39ae:	3a 81       	ldd	r19, Y+2	; 0x02
    39b0:	8d 81       	ldd	r24, Y+5	; 0x05
    39b2:	9e 81       	ldd	r25, Y+6	; 0x06
    39b4:	82 0f       	add	r24, r18
    39b6:	93 1f       	adc	r25, r19
    39b8:	9c 83       	std	Y+4, r25	; 0x04
    39ba:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    39bc:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    39c0:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    39c4:	2b 81       	ldd	r18, Y+3	; 0x03
    39c6:	3c 81       	ldd	r19, Y+4	; 0x04
    39c8:	fc 01       	movw	r30, r24
    39ca:	33 83       	std	Z+3, r19	; 0x03
    39cc:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    39ce:	2b 81       	ldd	r18, Y+3	; 0x03
    39d0:	3c 81       	ldd	r19, Y+4	; 0x04
    39d2:	89 81       	ldd	r24, Y+1	; 0x01
    39d4:	9a 81       	ldd	r25, Y+2	; 0x02
    39d6:	28 17       	cp	r18, r24
    39d8:	39 07       	cpc	r19, r25
    39da:	78 f4       	brcc	.+30     	; 0x39fa <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39dc:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    39e0:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    39e4:	9c 01       	movw	r18, r24
    39e6:	2e 5f       	subi	r18, 0xFE	; 254
    39e8:	3f 4f       	sbci	r19, 0xFF	; 255
    39ea:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <pxOverflowDelayedTaskList>
    39ee:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <pxOverflowDelayedTaskList+0x1>
    39f2:	b9 01       	movw	r22, r18
    39f4:	0e 94 4f 09 	call	0x129e	; 0x129e <vListInsert>
    39f8:	1d c0       	rjmp	.+58     	; 0x3a34 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    39fa:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxCurrentTCB>
    39fe:	90 91 89 05 	lds	r25, 0x0589	; 0x800589 <pxCurrentTCB+0x1>
    3a02:	9c 01       	movw	r18, r24
    3a04:	2e 5f       	subi	r18, 0xFE	; 254
    3a06:	3f 4f       	sbci	r19, 0xFF	; 255
    3a08:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxDelayedTaskList>
    3a0c:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxDelayedTaskList+0x1>
    3a10:	b9 01       	movw	r22, r18
    3a12:	0e 94 4f 09 	call	0x129e	; 0x129e <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    3a16:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <xNextTaskUnblockTime>
    3a1a:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    3a1e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a20:	3c 81       	ldd	r19, Y+4	; 0x04
    3a22:	28 17       	cp	r18, r24
    3a24:	39 07       	cpc	r19, r25
    3a26:	30 f4       	brcc	.+12     	; 0x3a34 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    3a28:	8b 81       	ldd	r24, Y+3	; 0x03
    3a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a2c:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <xNextTaskUnblockTime+0x1>
    3a30:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3a34:	27 96       	adiw	r28, 0x07	; 7
    3a36:	0f b6       	in	r0, 0x3f	; 63
    3a38:	f8 94       	cli
    3a3a:	de bf       	out	0x3e, r29	; 62
    3a3c:	0f be       	out	0x3f, r0	; 63
    3a3e:	cd bf       	out	0x3d, r28	; 61
    3a40:	df 91       	pop	r29
    3a42:	cf 91       	pop	r28
    3a44:	08 95       	ret

00003a46 <__divmodhi4>:
    3a46:	97 fb       	bst	r25, 7
    3a48:	07 2e       	mov	r0, r23
    3a4a:	16 f4       	brtc	.+4      	; 0x3a50 <__divmodhi4+0xa>
    3a4c:	00 94       	com	r0
    3a4e:	07 d0       	rcall	.+14     	; 0x3a5e <__divmodhi4_neg1>
    3a50:	77 fd       	sbrc	r23, 7
    3a52:	09 d0       	rcall	.+18     	; 0x3a66 <__divmodhi4_neg2>
    3a54:	0e 94 5f 1d 	call	0x3abe	; 0x3abe <__udivmodhi4>
    3a58:	07 fc       	sbrc	r0, 7
    3a5a:	05 d0       	rcall	.+10     	; 0x3a66 <__divmodhi4_neg2>
    3a5c:	3e f4       	brtc	.+14     	; 0x3a6c <__divmodhi4_exit>

00003a5e <__divmodhi4_neg1>:
    3a5e:	90 95       	com	r25
    3a60:	81 95       	neg	r24
    3a62:	9f 4f       	sbci	r25, 0xFF	; 255
    3a64:	08 95       	ret

00003a66 <__divmodhi4_neg2>:
    3a66:	70 95       	com	r23
    3a68:	61 95       	neg	r22
    3a6a:	7f 4f       	sbci	r23, 0xFF	; 255

00003a6c <__divmodhi4_exit>:
    3a6c:	08 95       	ret

00003a6e <__udivmodsi4>:
    3a6e:	a1 e2       	ldi	r26, 0x21	; 33
    3a70:	1a 2e       	mov	r1, r26
    3a72:	aa 1b       	sub	r26, r26
    3a74:	bb 1b       	sub	r27, r27
    3a76:	fd 01       	movw	r30, r26
    3a78:	0d c0       	rjmp	.+26     	; 0x3a94 <__udivmodsi4_ep>

00003a7a <__udivmodsi4_loop>:
    3a7a:	aa 1f       	adc	r26, r26
    3a7c:	bb 1f       	adc	r27, r27
    3a7e:	ee 1f       	adc	r30, r30
    3a80:	ff 1f       	adc	r31, r31
    3a82:	a2 17       	cp	r26, r18
    3a84:	b3 07       	cpc	r27, r19
    3a86:	e4 07       	cpc	r30, r20
    3a88:	f5 07       	cpc	r31, r21
    3a8a:	20 f0       	brcs	.+8      	; 0x3a94 <__udivmodsi4_ep>
    3a8c:	a2 1b       	sub	r26, r18
    3a8e:	b3 0b       	sbc	r27, r19
    3a90:	e4 0b       	sbc	r30, r20
    3a92:	f5 0b       	sbc	r31, r21

00003a94 <__udivmodsi4_ep>:
    3a94:	66 1f       	adc	r22, r22
    3a96:	77 1f       	adc	r23, r23
    3a98:	88 1f       	adc	r24, r24
    3a9a:	99 1f       	adc	r25, r25
    3a9c:	1a 94       	dec	r1
    3a9e:	69 f7       	brne	.-38     	; 0x3a7a <__udivmodsi4_loop>
    3aa0:	60 95       	com	r22
    3aa2:	70 95       	com	r23
    3aa4:	80 95       	com	r24
    3aa6:	90 95       	com	r25
    3aa8:	9b 01       	movw	r18, r22
    3aaa:	ac 01       	movw	r20, r24
    3aac:	bd 01       	movw	r22, r26
    3aae:	cf 01       	movw	r24, r30
    3ab0:	08 95       	ret

00003ab2 <__tablejump2__>:
    3ab2:	ee 0f       	add	r30, r30
    3ab4:	ff 1f       	adc	r31, r31
    3ab6:	05 90       	lpm	r0, Z+
    3ab8:	f4 91       	lpm	r31, Z
    3aba:	e0 2d       	mov	r30, r0
    3abc:	09 94       	ijmp

00003abe <__udivmodhi4>:
    3abe:	aa 1b       	sub	r26, r26
    3ac0:	bb 1b       	sub	r27, r27
    3ac2:	51 e1       	ldi	r21, 0x11	; 17
    3ac4:	07 c0       	rjmp	.+14     	; 0x3ad4 <__udivmodhi4_ep>

00003ac6 <__udivmodhi4_loop>:
    3ac6:	aa 1f       	adc	r26, r26
    3ac8:	bb 1f       	adc	r27, r27
    3aca:	a6 17       	cp	r26, r22
    3acc:	b7 07       	cpc	r27, r23
    3ace:	10 f0       	brcs	.+4      	; 0x3ad4 <__udivmodhi4_ep>
    3ad0:	a6 1b       	sub	r26, r22
    3ad2:	b7 0b       	sbc	r27, r23

00003ad4 <__udivmodhi4_ep>:
    3ad4:	88 1f       	adc	r24, r24
    3ad6:	99 1f       	adc	r25, r25
    3ad8:	5a 95       	dec	r21
    3ada:	a9 f7       	brne	.-22     	; 0x3ac6 <__udivmodhi4_loop>
    3adc:	80 95       	com	r24
    3ade:	90 95       	com	r25
    3ae0:	bc 01       	movw	r22, r24
    3ae2:	cd 01       	movw	r24, r26
    3ae4:	08 95       	ret

00003ae6 <malloc>:
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	82 30       	cpi	r24, 0x02	; 2
    3aec:	91 05       	cpc	r25, r1
    3aee:	10 f4       	brcc	.+4      	; 0x3af4 <malloc+0xe>
    3af0:	82 e0       	ldi	r24, 0x02	; 2
    3af2:	90 e0       	ldi	r25, 0x00	; 0
    3af4:	e0 91 e7 05 	lds	r30, 0x05E7	; 0x8005e7 <__flp>
    3af8:	f0 91 e8 05 	lds	r31, 0x05E8	; 0x8005e8 <__flp+0x1>
    3afc:	20 e0       	ldi	r18, 0x00	; 0
    3afe:	30 e0       	ldi	r19, 0x00	; 0
    3b00:	c0 e0       	ldi	r28, 0x00	; 0
    3b02:	d0 e0       	ldi	r29, 0x00	; 0
    3b04:	30 97       	sbiw	r30, 0x00	; 0
    3b06:	11 f1       	breq	.+68     	; 0x3b4c <malloc+0x66>
    3b08:	40 81       	ld	r20, Z
    3b0a:	51 81       	ldd	r21, Z+1	; 0x01
    3b0c:	48 17       	cp	r20, r24
    3b0e:	59 07       	cpc	r21, r25
    3b10:	c0 f0       	brcs	.+48     	; 0x3b42 <malloc+0x5c>
    3b12:	48 17       	cp	r20, r24
    3b14:	59 07       	cpc	r21, r25
    3b16:	61 f4       	brne	.+24     	; 0x3b30 <malloc+0x4a>
    3b18:	82 81       	ldd	r24, Z+2	; 0x02
    3b1a:	93 81       	ldd	r25, Z+3	; 0x03
    3b1c:	20 97       	sbiw	r28, 0x00	; 0
    3b1e:	19 f0       	breq	.+6      	; 0x3b26 <malloc+0x40>
    3b20:	9b 83       	std	Y+3, r25	; 0x03
    3b22:	8a 83       	std	Y+2, r24	; 0x02
    3b24:	2b c0       	rjmp	.+86     	; 0x3b7c <malloc+0x96>
    3b26:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <__flp+0x1>
    3b2a:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__flp>
    3b2e:	26 c0       	rjmp	.+76     	; 0x3b7c <malloc+0x96>
    3b30:	21 15       	cp	r18, r1
    3b32:	31 05       	cpc	r19, r1
    3b34:	19 f0       	breq	.+6      	; 0x3b3c <malloc+0x56>
    3b36:	42 17       	cp	r20, r18
    3b38:	53 07       	cpc	r21, r19
    3b3a:	18 f4       	brcc	.+6      	; 0x3b42 <malloc+0x5c>
    3b3c:	9a 01       	movw	r18, r20
    3b3e:	be 01       	movw	r22, r28
    3b40:	df 01       	movw	r26, r30
    3b42:	ef 01       	movw	r28, r30
    3b44:	02 80       	ldd	r0, Z+2	; 0x02
    3b46:	f3 81       	ldd	r31, Z+3	; 0x03
    3b48:	e0 2d       	mov	r30, r0
    3b4a:	dc cf       	rjmp	.-72     	; 0x3b04 <malloc+0x1e>
    3b4c:	21 15       	cp	r18, r1
    3b4e:	31 05       	cpc	r19, r1
    3b50:	09 f1       	breq	.+66     	; 0x3b94 <malloc+0xae>
    3b52:	28 1b       	sub	r18, r24
    3b54:	39 0b       	sbc	r19, r25
    3b56:	24 30       	cpi	r18, 0x04	; 4
    3b58:	31 05       	cpc	r19, r1
    3b5a:	90 f4       	brcc	.+36     	; 0x3b80 <malloc+0x9a>
    3b5c:	12 96       	adiw	r26, 0x02	; 2
    3b5e:	8d 91       	ld	r24, X+
    3b60:	9c 91       	ld	r25, X
    3b62:	13 97       	sbiw	r26, 0x03	; 3
    3b64:	61 15       	cp	r22, r1
    3b66:	71 05       	cpc	r23, r1
    3b68:	21 f0       	breq	.+8      	; 0x3b72 <malloc+0x8c>
    3b6a:	fb 01       	movw	r30, r22
    3b6c:	93 83       	std	Z+3, r25	; 0x03
    3b6e:	82 83       	std	Z+2, r24	; 0x02
    3b70:	04 c0       	rjmp	.+8      	; 0x3b7a <malloc+0x94>
    3b72:	90 93 e8 05 	sts	0x05E8, r25	; 0x8005e8 <__flp+0x1>
    3b76:	80 93 e7 05 	sts	0x05E7, r24	; 0x8005e7 <__flp>
    3b7a:	fd 01       	movw	r30, r26
    3b7c:	32 96       	adiw	r30, 0x02	; 2
    3b7e:	44 c0       	rjmp	.+136    	; 0x3c08 <malloc+0x122>
    3b80:	fd 01       	movw	r30, r26
    3b82:	e2 0f       	add	r30, r18
    3b84:	f3 1f       	adc	r31, r19
    3b86:	81 93       	st	Z+, r24
    3b88:	91 93       	st	Z+, r25
    3b8a:	22 50       	subi	r18, 0x02	; 2
    3b8c:	31 09       	sbc	r19, r1
    3b8e:	2d 93       	st	X+, r18
    3b90:	3c 93       	st	X, r19
    3b92:	3a c0       	rjmp	.+116    	; 0x3c08 <malloc+0x122>
    3b94:	20 91 e5 05 	lds	r18, 0x05E5	; 0x8005e5 <__brkval>
    3b98:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__brkval+0x1>
    3b9c:	23 2b       	or	r18, r19
    3b9e:	41 f4       	brne	.+16     	; 0x3bb0 <malloc+0xca>
    3ba0:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3ba4:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3ba8:	30 93 e6 05 	sts	0x05E6, r19	; 0x8005e6 <__brkval+0x1>
    3bac:	20 93 e5 05 	sts	0x05E5, r18	; 0x8005e5 <__brkval>
    3bb0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3bb4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3bb8:	21 15       	cp	r18, r1
    3bba:	31 05       	cpc	r19, r1
    3bbc:	41 f4       	brne	.+16     	; 0x3bce <malloc+0xe8>
    3bbe:	2d b7       	in	r18, 0x3d	; 61
    3bc0:	3e b7       	in	r19, 0x3e	; 62
    3bc2:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3bc6:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3bca:	24 1b       	sub	r18, r20
    3bcc:	35 0b       	sbc	r19, r21
    3bce:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <__brkval>
    3bd2:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <__brkval+0x1>
    3bd6:	e2 17       	cp	r30, r18
    3bd8:	f3 07       	cpc	r31, r19
    3bda:	a0 f4       	brcc	.+40     	; 0x3c04 <malloc+0x11e>
    3bdc:	2e 1b       	sub	r18, r30
    3bde:	3f 0b       	sbc	r19, r31
    3be0:	28 17       	cp	r18, r24
    3be2:	39 07       	cpc	r19, r25
    3be4:	78 f0       	brcs	.+30     	; 0x3c04 <malloc+0x11e>
    3be6:	ac 01       	movw	r20, r24
    3be8:	4e 5f       	subi	r20, 0xFE	; 254
    3bea:	5f 4f       	sbci	r21, 0xFF	; 255
    3bec:	24 17       	cp	r18, r20
    3bee:	35 07       	cpc	r19, r21
    3bf0:	48 f0       	brcs	.+18     	; 0x3c04 <malloc+0x11e>
    3bf2:	4e 0f       	add	r20, r30
    3bf4:	5f 1f       	adc	r21, r31
    3bf6:	50 93 e6 05 	sts	0x05E6, r21	; 0x8005e6 <__brkval+0x1>
    3bfa:	40 93 e5 05 	sts	0x05E5, r20	; 0x8005e5 <__brkval>
    3bfe:	81 93       	st	Z+, r24
    3c00:	91 93       	st	Z+, r25
    3c02:	02 c0       	rjmp	.+4      	; 0x3c08 <malloc+0x122>
    3c04:	e0 e0       	ldi	r30, 0x00	; 0
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	cf 01       	movw	r24, r30
    3c0a:	df 91       	pop	r29
    3c0c:	cf 91       	pop	r28
    3c0e:	08 95       	ret

00003c10 <free>:
    3c10:	0f 93       	push	r16
    3c12:	1f 93       	push	r17
    3c14:	cf 93       	push	r28
    3c16:	df 93       	push	r29
    3c18:	00 97       	sbiw	r24, 0x00	; 0
    3c1a:	09 f4       	brne	.+2      	; 0x3c1e <free+0xe>
    3c1c:	8c c0       	rjmp	.+280    	; 0x3d36 <free+0x126>
    3c1e:	fc 01       	movw	r30, r24
    3c20:	32 97       	sbiw	r30, 0x02	; 2
    3c22:	13 82       	std	Z+3, r1	; 0x03
    3c24:	12 82       	std	Z+2, r1	; 0x02
    3c26:	00 91 e7 05 	lds	r16, 0x05E7	; 0x8005e7 <__flp>
    3c2a:	10 91 e8 05 	lds	r17, 0x05E8	; 0x8005e8 <__flp+0x1>
    3c2e:	01 15       	cp	r16, r1
    3c30:	11 05       	cpc	r17, r1
    3c32:	81 f4       	brne	.+32     	; 0x3c54 <free+0x44>
    3c34:	20 81       	ld	r18, Z
    3c36:	31 81       	ldd	r19, Z+1	; 0x01
    3c38:	82 0f       	add	r24, r18
    3c3a:	93 1f       	adc	r25, r19
    3c3c:	20 91 e5 05 	lds	r18, 0x05E5	; 0x8005e5 <__brkval>
    3c40:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__brkval+0x1>
    3c44:	28 17       	cp	r18, r24
    3c46:	39 07       	cpc	r19, r25
    3c48:	79 f5       	brne	.+94     	; 0x3ca8 <free+0x98>
    3c4a:	f0 93 e6 05 	sts	0x05E6, r31	; 0x8005e6 <__brkval+0x1>
    3c4e:	e0 93 e5 05 	sts	0x05E5, r30	; 0x8005e5 <__brkval>
    3c52:	71 c0       	rjmp	.+226    	; 0x3d36 <free+0x126>
    3c54:	d8 01       	movw	r26, r16
    3c56:	40 e0       	ldi	r20, 0x00	; 0
    3c58:	50 e0       	ldi	r21, 0x00	; 0
    3c5a:	ae 17       	cp	r26, r30
    3c5c:	bf 07       	cpc	r27, r31
    3c5e:	50 f4       	brcc	.+20     	; 0x3c74 <free+0x64>
    3c60:	12 96       	adiw	r26, 0x02	; 2
    3c62:	2d 91       	ld	r18, X+
    3c64:	3c 91       	ld	r19, X
    3c66:	13 97       	sbiw	r26, 0x03	; 3
    3c68:	ad 01       	movw	r20, r26
    3c6a:	21 15       	cp	r18, r1
    3c6c:	31 05       	cpc	r19, r1
    3c6e:	09 f1       	breq	.+66     	; 0x3cb2 <free+0xa2>
    3c70:	d9 01       	movw	r26, r18
    3c72:	f3 cf       	rjmp	.-26     	; 0x3c5a <free+0x4a>
    3c74:	9d 01       	movw	r18, r26
    3c76:	da 01       	movw	r26, r20
    3c78:	33 83       	std	Z+3, r19	; 0x03
    3c7a:	22 83       	std	Z+2, r18	; 0x02
    3c7c:	60 81       	ld	r22, Z
    3c7e:	71 81       	ldd	r23, Z+1	; 0x01
    3c80:	86 0f       	add	r24, r22
    3c82:	97 1f       	adc	r25, r23
    3c84:	82 17       	cp	r24, r18
    3c86:	93 07       	cpc	r25, r19
    3c88:	69 f4       	brne	.+26     	; 0x3ca4 <free+0x94>
    3c8a:	ec 01       	movw	r28, r24
    3c8c:	28 81       	ld	r18, Y
    3c8e:	39 81       	ldd	r19, Y+1	; 0x01
    3c90:	26 0f       	add	r18, r22
    3c92:	37 1f       	adc	r19, r23
    3c94:	2e 5f       	subi	r18, 0xFE	; 254
    3c96:	3f 4f       	sbci	r19, 0xFF	; 255
    3c98:	31 83       	std	Z+1, r19	; 0x01
    3c9a:	20 83       	st	Z, r18
    3c9c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c9e:	9b 81       	ldd	r25, Y+3	; 0x03
    3ca0:	93 83       	std	Z+3, r25	; 0x03
    3ca2:	82 83       	std	Z+2, r24	; 0x02
    3ca4:	45 2b       	or	r20, r21
    3ca6:	29 f4       	brne	.+10     	; 0x3cb2 <free+0xa2>
    3ca8:	f0 93 e8 05 	sts	0x05E8, r31	; 0x8005e8 <__flp+0x1>
    3cac:	e0 93 e7 05 	sts	0x05E7, r30	; 0x8005e7 <__flp>
    3cb0:	42 c0       	rjmp	.+132    	; 0x3d36 <free+0x126>
    3cb2:	13 96       	adiw	r26, 0x03	; 3
    3cb4:	fc 93       	st	X, r31
    3cb6:	ee 93       	st	-X, r30
    3cb8:	12 97       	sbiw	r26, 0x02	; 2
    3cba:	ed 01       	movw	r28, r26
    3cbc:	49 91       	ld	r20, Y+
    3cbe:	59 91       	ld	r21, Y+
    3cc0:	9e 01       	movw	r18, r28
    3cc2:	24 0f       	add	r18, r20
    3cc4:	35 1f       	adc	r19, r21
    3cc6:	e2 17       	cp	r30, r18
    3cc8:	f3 07       	cpc	r31, r19
    3cca:	71 f4       	brne	.+28     	; 0x3ce8 <free+0xd8>
    3ccc:	80 81       	ld	r24, Z
    3cce:	91 81       	ldd	r25, Z+1	; 0x01
    3cd0:	84 0f       	add	r24, r20
    3cd2:	95 1f       	adc	r25, r21
    3cd4:	02 96       	adiw	r24, 0x02	; 2
    3cd6:	11 96       	adiw	r26, 0x01	; 1
    3cd8:	9c 93       	st	X, r25
    3cda:	8e 93       	st	-X, r24
    3cdc:	82 81       	ldd	r24, Z+2	; 0x02
    3cde:	93 81       	ldd	r25, Z+3	; 0x03
    3ce0:	13 96       	adiw	r26, 0x03	; 3
    3ce2:	9c 93       	st	X, r25
    3ce4:	8e 93       	st	-X, r24
    3ce6:	12 97       	sbiw	r26, 0x02	; 2
    3ce8:	e0 e0       	ldi	r30, 0x00	; 0
    3cea:	f0 e0       	ldi	r31, 0x00	; 0
    3cec:	d8 01       	movw	r26, r16
    3cee:	12 96       	adiw	r26, 0x02	; 2
    3cf0:	8d 91       	ld	r24, X+
    3cf2:	9c 91       	ld	r25, X
    3cf4:	13 97       	sbiw	r26, 0x03	; 3
    3cf6:	00 97       	sbiw	r24, 0x00	; 0
    3cf8:	19 f0       	breq	.+6      	; 0x3d00 <free+0xf0>
    3cfa:	f8 01       	movw	r30, r16
    3cfc:	8c 01       	movw	r16, r24
    3cfe:	f6 cf       	rjmp	.-20     	; 0x3cec <free+0xdc>
    3d00:	8d 91       	ld	r24, X+
    3d02:	9c 91       	ld	r25, X
    3d04:	98 01       	movw	r18, r16
    3d06:	2e 5f       	subi	r18, 0xFE	; 254
    3d08:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0a:	82 0f       	add	r24, r18
    3d0c:	93 1f       	adc	r25, r19
    3d0e:	20 91 e5 05 	lds	r18, 0x05E5	; 0x8005e5 <__brkval>
    3d12:	30 91 e6 05 	lds	r19, 0x05E6	; 0x8005e6 <__brkval+0x1>
    3d16:	28 17       	cp	r18, r24
    3d18:	39 07       	cpc	r19, r25
    3d1a:	69 f4       	brne	.+26     	; 0x3d36 <free+0x126>
    3d1c:	30 97       	sbiw	r30, 0x00	; 0
    3d1e:	29 f4       	brne	.+10     	; 0x3d2a <free+0x11a>
    3d20:	10 92 e8 05 	sts	0x05E8, r1	; 0x8005e8 <__flp+0x1>
    3d24:	10 92 e7 05 	sts	0x05E7, r1	; 0x8005e7 <__flp>
    3d28:	02 c0       	rjmp	.+4      	; 0x3d2e <free+0x11e>
    3d2a:	13 82       	std	Z+3, r1	; 0x03
    3d2c:	12 82       	std	Z+2, r1	; 0x02
    3d2e:	10 93 e6 05 	sts	0x05E6, r17	; 0x8005e6 <__brkval+0x1>
    3d32:	00 93 e5 05 	sts	0x05E5, r16	; 0x8005e5 <__brkval>
    3d36:	df 91       	pop	r29
    3d38:	cf 91       	pop	r28
    3d3a:	1f 91       	pop	r17
    3d3c:	0f 91       	pop	r16
    3d3e:	08 95       	ret

00003d40 <do_rand>:
    3d40:	8f 92       	push	r8
    3d42:	9f 92       	push	r9
    3d44:	af 92       	push	r10
    3d46:	bf 92       	push	r11
    3d48:	cf 92       	push	r12
    3d4a:	df 92       	push	r13
    3d4c:	ef 92       	push	r14
    3d4e:	ff 92       	push	r15
    3d50:	cf 93       	push	r28
    3d52:	df 93       	push	r29
    3d54:	ec 01       	movw	r28, r24
    3d56:	68 81       	ld	r22, Y
    3d58:	79 81       	ldd	r23, Y+1	; 0x01
    3d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    3d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    3d5e:	61 15       	cp	r22, r1
    3d60:	71 05       	cpc	r23, r1
    3d62:	81 05       	cpc	r24, r1
    3d64:	91 05       	cpc	r25, r1
    3d66:	21 f4       	brne	.+8      	; 0x3d70 <do_rand+0x30>
    3d68:	64 e2       	ldi	r22, 0x24	; 36
    3d6a:	79 ed       	ldi	r23, 0xD9	; 217
    3d6c:	8b e5       	ldi	r24, 0x5B	; 91
    3d6e:	97 e0       	ldi	r25, 0x07	; 7
    3d70:	2d e1       	ldi	r18, 0x1D	; 29
    3d72:	33 ef       	ldi	r19, 0xF3	; 243
    3d74:	41 e0       	ldi	r20, 0x01	; 1
    3d76:	50 e0       	ldi	r21, 0x00	; 0
    3d78:	0e 94 0c 1f 	call	0x3e18	; 0x3e18 <__divmodsi4>
    3d7c:	49 01       	movw	r8, r18
    3d7e:	5a 01       	movw	r10, r20
    3d80:	9b 01       	movw	r18, r22
    3d82:	ac 01       	movw	r20, r24
    3d84:	a7 ea       	ldi	r26, 0xA7	; 167
    3d86:	b1 e4       	ldi	r27, 0x41	; 65
    3d88:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__muluhisi3>
    3d8c:	6b 01       	movw	r12, r22
    3d8e:	7c 01       	movw	r14, r24
    3d90:	ac ee       	ldi	r26, 0xEC	; 236
    3d92:	b4 ef       	ldi	r27, 0xF4	; 244
    3d94:	a5 01       	movw	r20, r10
    3d96:	94 01       	movw	r18, r8
    3d98:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <__mulohisi3>
    3d9c:	dc 01       	movw	r26, r24
    3d9e:	cb 01       	movw	r24, r22
    3da0:	8c 0d       	add	r24, r12
    3da2:	9d 1d       	adc	r25, r13
    3da4:	ae 1d       	adc	r26, r14
    3da6:	bf 1d       	adc	r27, r15
    3da8:	b7 ff       	sbrs	r27, 7
    3daa:	03 c0       	rjmp	.+6      	; 0x3db2 <do_rand+0x72>
    3dac:	01 97       	sbiw	r24, 0x01	; 1
    3dae:	a1 09       	sbc	r26, r1
    3db0:	b0 48       	sbci	r27, 0x80	; 128
    3db2:	88 83       	st	Y, r24
    3db4:	99 83       	std	Y+1, r25	; 0x01
    3db6:	aa 83       	std	Y+2, r26	; 0x02
    3db8:	bb 83       	std	Y+3, r27	; 0x03
    3dba:	9f 77       	andi	r25, 0x7F	; 127
    3dbc:	df 91       	pop	r29
    3dbe:	cf 91       	pop	r28
    3dc0:	ff 90       	pop	r15
    3dc2:	ef 90       	pop	r14
    3dc4:	df 90       	pop	r13
    3dc6:	cf 90       	pop	r12
    3dc8:	bf 90       	pop	r11
    3dca:	af 90       	pop	r10
    3dcc:	9f 90       	pop	r9
    3dce:	8f 90       	pop	r8
    3dd0:	08 95       	ret

00003dd2 <rand_r>:
    3dd2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <do_rand>
    3dd6:	08 95       	ret

00003dd8 <rand>:
    3dd8:	86 e0       	ldi	r24, 0x06	; 6
    3dda:	91 e0       	ldi	r25, 0x01	; 1
    3ddc:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <do_rand>
    3de0:	08 95       	ret

00003de2 <srand>:
    3de2:	a0 e0       	ldi	r26, 0x00	; 0
    3de4:	b0 e0       	ldi	r27, 0x00	; 0
    3de6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3dea:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3dee:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3df2:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3df6:	08 95       	ret

00003df8 <memcpy>:
    3df8:	fb 01       	movw	r30, r22
    3dfa:	dc 01       	movw	r26, r24
    3dfc:	02 c0       	rjmp	.+4      	; 0x3e02 <memcpy+0xa>
    3dfe:	01 90       	ld	r0, Z+
    3e00:	0d 92       	st	X+, r0
    3e02:	41 50       	subi	r20, 0x01	; 1
    3e04:	50 40       	sbci	r21, 0x00	; 0
    3e06:	d8 f7       	brcc	.-10     	; 0x3dfe <memcpy+0x6>
    3e08:	08 95       	ret

00003e0a <memset>:
    3e0a:	dc 01       	movw	r26, r24
    3e0c:	01 c0       	rjmp	.+2      	; 0x3e10 <memset+0x6>
    3e0e:	6d 93       	st	X+, r22
    3e10:	41 50       	subi	r20, 0x01	; 1
    3e12:	50 40       	sbci	r21, 0x00	; 0
    3e14:	e0 f7       	brcc	.-8      	; 0x3e0e <memset+0x4>
    3e16:	08 95       	ret

00003e18 <__divmodsi4>:
    3e18:	05 2e       	mov	r0, r21
    3e1a:	97 fb       	bst	r25, 7
    3e1c:	1e f4       	brtc	.+6      	; 0x3e24 <__divmodsi4+0xc>
    3e1e:	00 94       	com	r0
    3e20:	0e 94 23 1f 	call	0x3e46	; 0x3e46 <__negsi2>
    3e24:	57 fd       	sbrc	r21, 7
    3e26:	07 d0       	rcall	.+14     	; 0x3e36 <__divmodsi4_neg2>
    3e28:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <__udivmodsi4>
    3e2c:	07 fc       	sbrc	r0, 7
    3e2e:	03 d0       	rcall	.+6      	; 0x3e36 <__divmodsi4_neg2>
    3e30:	4e f4       	brtc	.+18     	; 0x3e44 <__divmodsi4_exit>
    3e32:	0c 94 23 1f 	jmp	0x3e46	; 0x3e46 <__negsi2>

00003e36 <__divmodsi4_neg2>:
    3e36:	50 95       	com	r21
    3e38:	40 95       	com	r20
    3e3a:	30 95       	com	r19
    3e3c:	21 95       	neg	r18
    3e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3e40:	4f 4f       	sbci	r20, 0xFF	; 255
    3e42:	5f 4f       	sbci	r21, 0xFF	; 255

00003e44 <__divmodsi4_exit>:
    3e44:	08 95       	ret

00003e46 <__negsi2>:
    3e46:	90 95       	com	r25
    3e48:	80 95       	com	r24
    3e4a:	70 95       	com	r23
    3e4c:	61 95       	neg	r22
    3e4e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e50:	8f 4f       	sbci	r24, 0xFF	; 255
    3e52:	9f 4f       	sbci	r25, 0xFF	; 255
    3e54:	08 95       	ret

00003e56 <__muluhisi3>:
    3e56:	0e 94 3e 1f 	call	0x3e7c	; 0x3e7c <__umulhisi3>
    3e5a:	a5 9f       	mul	r26, r21
    3e5c:	90 0d       	add	r25, r0
    3e5e:	b4 9f       	mul	r27, r20
    3e60:	90 0d       	add	r25, r0
    3e62:	a4 9f       	mul	r26, r20
    3e64:	80 0d       	add	r24, r0
    3e66:	91 1d       	adc	r25, r1
    3e68:	11 24       	eor	r1, r1
    3e6a:	08 95       	ret

00003e6c <__mulshisi3>:
    3e6c:	b7 ff       	sbrs	r27, 7
    3e6e:	0c 94 2b 1f 	jmp	0x3e56	; 0x3e56 <__muluhisi3>

00003e72 <__mulohisi3>:
    3e72:	0e 94 2b 1f 	call	0x3e56	; 0x3e56 <__muluhisi3>
    3e76:	82 1b       	sub	r24, r18
    3e78:	93 0b       	sbc	r25, r19
    3e7a:	08 95       	ret

00003e7c <__umulhisi3>:
    3e7c:	a2 9f       	mul	r26, r18
    3e7e:	b0 01       	movw	r22, r0
    3e80:	b3 9f       	mul	r27, r19
    3e82:	c0 01       	movw	r24, r0
    3e84:	a3 9f       	mul	r26, r19
    3e86:	70 0d       	add	r23, r0
    3e88:	81 1d       	adc	r24, r1
    3e8a:	11 24       	eor	r1, r1
    3e8c:	91 1d       	adc	r25, r1
    3e8e:	b2 9f       	mul	r27, r18
    3e90:	70 0d       	add	r23, r0
    3e92:	81 1d       	adc	r24, r1
    3e94:	11 24       	eor	r1, r1
    3e96:	91 1d       	adc	r25, r1
    3e98:	08 95       	ret

00003e9a <_exit>:
    3e9a:	f8 94       	cli

00003e9c <__stop_program>:
    3e9c:	ff cf       	rjmp	.-2      	; 0x3e9c <__stop_program>
