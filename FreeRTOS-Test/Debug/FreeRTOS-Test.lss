
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00003822  000038b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003822  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  0080014c  0080014c  00003902  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003902  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003934  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003752  00000000  00000000  00003e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b1a  00000000  00000000  0000759e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000033f5  00000000  00000000  000080b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0000b4b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018cc  00000000  00000000  0000c7bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b6  00000000  00000000  0000e088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  0001093e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 a2 04 	jmp	0x944	; 0x944 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 89 0b 	jmp	0x1712	; 0x1712 <__vector_20>
      54:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 3b 0c 	jmp	0x1876	; 0x1876 <__vector_28>
      74:	0c 94 93 0c 	jmp	0x1926	; 0x1926 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	86 02       	muls	r24, r22
      7e:	8f 02       	muls	r24, r31
      80:	a2 02       	muls	r26, r18
      82:	ad 02       	muls	r26, r29
      84:	c0 02       	muls	r28, r16
      86:	c9 02       	muls	r28, r25
      88:	dc 02       	muls	r29, r28
      8a:	e7 02       	muls	r30, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e2       	ldi	r30, 0x22	; 34
      a0:	f8 e3       	ldi	r31, 0x38	; 56
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ac e4       	ldi	r26, 0x4C	; 76
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 3d       	cpi	r26, 0xD1	; 209
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 e5 03 	call	0x7ca	; 0x7ca <main>
      c2:	0c 94 0f 1c 	jmp	0x381e	; 0x381e <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <move_player>:
		}	
	}
	
}

void move_player(uint8_t *position, uint8_t direction){
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <move_player+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <move_player+0x8>
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9c 83       	std	Y+4, r25	; 0x04
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	81 f4       	brne	.+32     	; 0x10c <move_player+0x42>
		mask <<= *position;
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	02 c0       	rjmp	.+4      	; 0x102 <move_player+0x38>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	2a 95       	dec	r18
     104:	e2 f7       	brpl	.-8      	; 0xfe <move_player+0x34>
     106:	9a 83       	std	Y+2, r25	; 0x02
     108:	89 83       	std	Y+1, r24	; 0x01
     10a:	12 c0       	rjmp	.+36     	; 0x130 <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	31 09       	sbc	r19, r1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	02 c0       	rjmp	.+4      	; 0x128 <move_player+0x5e>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	2a 95       	dec	r18
     12a:	e2 f7       	brpl	.-8      	; 0x124 <move_player+0x5a>
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	4a e0       	ldi	r20, 0x0A	; 10
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xQueueGenericReceive>
	col_value[0] ^= mask;
     146:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     14a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	82 27       	eor	r24, r18
     154:	93 27       	eor	r25, r19
     156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     15e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     162:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
}
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <game_task>:

void game_task(void *pvParameters)
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	00 d0       	rcall	.+0      	; 0x18a <game_task+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;

	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     192:	86 e2       	ldi	r24, 0x26	; 38
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	80 74       	andi	r24, 0x40	; 64
     1a0:	99 27       	eor	r25, r25
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f5       	brne	.+88     	; 0x1fe <game_task+0x7a>
     1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1ae:	18 16       	cp	r1, r24
     1b0:	19 06       	cpc	r1, r25
     1b2:	2c f5       	brge	.+74     	; 0x1fe <game_task+0x7a>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     1b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	4a e0       	ldi	r20, 0x0A	; 10
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xQueueGenericReceive>
			--player_position;
     1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     1dc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1e0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
			move_player(&player_position, 0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8a e0       	ldi	r24, 0x0A	; 10
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     1fc:	34 c0       	rjmp	.+104    	; 0x266 <game_task+0xe2>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     1fe:	86 e2       	ldi	r24, 0x26	; 38
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	51 f5       	brne	.+84     	; 0x266 <game_task+0xe2>
     212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     21a:	08 97       	sbiw	r24, 0x08	; 8
     21c:	24 f5       	brge	.+72     	; 0x266 <game_task+0xe2>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     21e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     222:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xQueueGenericReceive>
			++player_position;
     234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
			move_player(&player_position, 1);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 65 00 	call	0xca	; 0xca <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelay(50);
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 f6 13 	call	0x27ec	; 0x27ec <vTaskDelay>
	}	
     26e:	91 cf       	rjmp	.-222    	; 0x192 <game_task+0xe>

00000270 <bounce>:
	
}

void bounce(uint8_t *direction){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <bounce+0x6>
     276:	00 d0       	rcall	.+0      	; 0x278 <bounce+0x8>
     278:	1f 92       	push	r1
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t r = rand()%3;
     282:	0e 94 ae 1b 	call	0x375c	; 0x375c <rand>
     286:	23 e0       	ldi	r18, 0x03	; 3
     288:	30 e0       	ldi	r19, 0x00	; 0
     28a:	b9 01       	movw	r22, r18
     28c:	0e 94 e5 19 	call	0x33ca	; 0x33ca <__divmodhi4>
     290:	89 83       	std	Y+1, r24	; 0x01
	
	r += 3;
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	8d 5f       	subi	r24, 0xFD	; 253
     296:	89 83       	std	Y+1, r24	; 0x01
	r += *direction;
     298:	8a 81       	ldd	r24, Y+2	; 0x02
     29a:	9b 81       	ldd	r25, Y+3	; 0x03
     29c:	fc 01       	movw	r30, r24
     29e:	80 81       	ld	r24, Z
     2a0:	99 81       	ldd	r25, Y+1	; 0x01
     2a2:	89 0f       	add	r24, r25
     2a4:	89 83       	std	Y+1, r24	; 0x01
	r %= 8;
     2a6:	89 81       	ldd	r24, Y+1	; 0x01
     2a8:	87 70       	andi	r24, 0x07	; 7
     2aa:	89 83       	std	Y+1, r24	; 0x01
	*direction = r;
     2ac:	8a 81       	ldd	r24, Y+2	; 0x02
     2ae:	9b 81       	ldd	r25, Y+3	; 0x03
     2b0:	29 81       	ldd	r18, Y+1	; 0x01
     2b2:	fc 01       	movw	r30, r24
     2b4:	20 83       	st	Z, r18
}
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	0f 90       	pop	r0
     2be:	0f 90       	pop	r0
     2c0:	df 91       	pop	r29
     2c2:	cf 91       	pop	r28
     2c4:	08 95       	ret

000002c6 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     2c6:	cf 93       	push	r28
     2c8:	df 93       	push	r29
     2ca:	00 d0       	rcall	.+0      	; 0x2cc <move_ball+0x6>
     2cc:	00 d0       	rcall	.+0      	; 0x2ce <move_ball+0x8>
     2ce:	00 d0       	rcall	.+0      	; 0x2d0 <move_ball+0xa>
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	9c 83       	std	Y+4, r25	; 0x04
     2d6:	8b 83       	std	Y+3, r24	; 0x03
     2d8:	7e 83       	std	Y+6, r23	; 0x06
     2da:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     2dc:	8b 81       	ldd	r24, Y+3	; 0x03
     2de:	9c 81       	ldd	r25, Y+4	; 0x04
     2e0:	01 96       	adiw	r24, 0x01	; 1
     2e2:	fc 01       	movw	r30, r24
     2e4:	80 81       	ld	r24, Z
     2e6:	28 2f       	mov	r18, r24
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	02 c0       	rjmp	.+4      	; 0x2f4 <move_ball+0x2e>
     2f0:	88 0f       	add	r24, r24
     2f2:	99 1f       	adc	r25, r25
     2f4:	2a 95       	dec	r18
     2f6:	e2 f7       	brpl	.-8      	; 0x2f0 <move_ball+0x2a>
     2f8:	9a 83       	std	Y+2, r25	; 0x02
     2fa:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     2fc:	89 81       	ldd	r24, Y+1	; 0x01
     2fe:	9a 81       	ldd	r25, Y+2	; 0x02
     300:	80 95       	com	r24
     302:	90 95       	com	r25
     304:	9a 83       	std	Y+2, r25	; 0x02
     306:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     308:	8b 81       	ldd	r24, Y+3	; 0x03
     30a:	9c 81       	ldd	r25, Y+4	; 0x04
     30c:	fc 01       	movw	r30, r24
     30e:	80 81       	ld	r24, Z
     310:	88 23       	and	r24, r24
     312:	a9 f5       	brne	.+106    	; 0x37e <move_ball+0xb8>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     314:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     318:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	4a e0       	ldi	r20, 0x0A	; 10
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	60 e0       	ldi	r22, 0x00	; 0
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     32a:	8b 81       	ldd	r24, Y+3	; 0x03
     32c:	9c 81       	ldd	r25, Y+4	; 0x04
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	2b 81       	ldd	r18, Y+3	; 0x03
     338:	3c 81       	ldd	r19, Y+4	; 0x04
     33a:	f9 01       	movw	r30, r18
     33c:	20 81       	ld	r18, Z
     33e:	22 2f       	mov	r18, r18
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	22 0f       	add	r18, r18
     344:	33 1f       	adc	r19, r19
     346:	24 5f       	subi	r18, 0xF4	; 244
     348:	3e 4f       	sbci	r19, 0xFE	; 254
     34a:	f9 01       	movw	r30, r18
     34c:	40 81       	ld	r20, Z
     34e:	51 81       	ldd	r21, Z+1	; 0x01
     350:	29 81       	ldd	r18, Y+1	; 0x01
     352:	3a 81       	ldd	r19, Y+2	; 0x02
     354:	24 23       	and	r18, r20
     356:	35 23       	and	r19, r21
     358:	88 0f       	add	r24, r24
     35a:	99 1f       	adc	r25, r25
     35c:	84 5f       	subi	r24, 0xF4	; 244
     35e:	9e 4f       	sbci	r25, 0xFE	; 254
     360:	fc 01       	movw	r30, r24
     362:	31 83       	std	Z+1, r19	; 0x01
     364:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     366:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     36a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     36e:	20 e0       	ldi	r18, 0x00	; 0
     370:	40 e0       	ldi	r20, 0x00	; 0
     372:	50 e0       	ldi	r21, 0x00	; 0
     374:	60 e0       	ldi	r22, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
     37c:	1e c0       	rjmp	.+60     	; 0x3ba <move_ball+0xf4>
	}
	else{
		col_value[current[0]] &= mask;
     37e:	8b 81       	ldd	r24, Y+3	; 0x03
     380:	9c 81       	ldd	r25, Y+4	; 0x04
     382:	fc 01       	movw	r30, r24
     384:	80 81       	ld	r24, Z
     386:	88 2f       	mov	r24, r24
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	2b 81       	ldd	r18, Y+3	; 0x03
     38c:	3c 81       	ldd	r19, Y+4	; 0x04
     38e:	f9 01       	movw	r30, r18
     390:	20 81       	ld	r18, Z
     392:	22 2f       	mov	r18, r18
     394:	30 e0       	ldi	r19, 0x00	; 0
     396:	22 0f       	add	r18, r18
     398:	33 1f       	adc	r19, r19
     39a:	24 5f       	subi	r18, 0xF4	; 244
     39c:	3e 4f       	sbci	r19, 0xFE	; 254
     39e:	f9 01       	movw	r30, r18
     3a0:	40 81       	ld	r20, Z
     3a2:	51 81       	ldd	r21, Z+1	; 0x01
     3a4:	29 81       	ldd	r18, Y+1	; 0x01
     3a6:	3a 81       	ldd	r19, Y+2	; 0x02
     3a8:	24 23       	and	r18, r20
     3aa:	35 23       	and	r19, r21
     3ac:	88 0f       	add	r24, r24
     3ae:	99 1f       	adc	r25, r25
     3b0:	84 5f       	subi	r24, 0xF4	; 244
     3b2:	9e 4f       	sbci	r25, 0xFE	; 254
     3b4:	fc 01       	movw	r30, r24
     3b6:	31 83       	std	Z+1, r19	; 0x01
     3b8:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     3ba:	8d 81       	ldd	r24, Y+5	; 0x05
     3bc:	9e 81       	ldd	r25, Y+6	; 0x06
     3be:	fc 01       	movw	r30, r24
     3c0:	20 81       	ld	r18, Z
     3c2:	8b 81       	ldd	r24, Y+3	; 0x03
     3c4:	9c 81       	ldd	r25, Y+4	; 0x04
     3c6:	fc 01       	movw	r30, r24
     3c8:	20 83       	st	Z, r18
	current[1] = next[1];
     3ca:	8b 81       	ldd	r24, Y+3	; 0x03
     3cc:	9c 81       	ldd	r25, Y+4	; 0x04
     3ce:	01 96       	adiw	r24, 0x01	; 1
     3d0:	2d 81       	ldd	r18, Y+5	; 0x05
     3d2:	3e 81       	ldd	r19, Y+6	; 0x06
     3d4:	f9 01       	movw	r30, r18
     3d6:	21 81       	ldd	r18, Z+1	; 0x01
     3d8:	fc 01       	movw	r30, r24
     3da:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     3dc:	8b 81       	ldd	r24, Y+3	; 0x03
     3de:	9c 81       	ldd	r25, Y+4	; 0x04
     3e0:	01 96       	adiw	r24, 0x01	; 1
     3e2:	fc 01       	movw	r30, r24
     3e4:	80 81       	ld	r24, Z
     3e6:	28 2f       	mov	r18, r24
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	81 e0       	ldi	r24, 0x01	; 1
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <move_ball+0x12e>
     3f0:	88 0f       	add	r24, r24
     3f2:	99 1f       	adc	r25, r25
     3f4:	2a 95       	dec	r18
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <move_ball+0x12a>
     3f8:	9a 83       	std	Y+2, r25	; 0x02
     3fa:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     3fc:	8b 81       	ldd	r24, Y+3	; 0x03
     3fe:	9c 81       	ldd	r25, Y+4	; 0x04
     400:	fc 01       	movw	r30, r24
     402:	80 81       	ld	r24, Z
     404:	88 23       	and	r24, r24
     406:	a9 f5       	brne	.+106    	; 0x472 <__FUSE_REGION_LENGTH__+0x72>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     408:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     40c:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     410:	20 e0       	ldi	r18, 0x00	; 0
     412:	4a e0       	ldi	r20, 0x0A	; 10
     414:	50 e0       	ldi	r21, 0x00	; 0
     416:	60 e0       	ldi	r22, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     41e:	8b 81       	ldd	r24, Y+3	; 0x03
     420:	9c 81       	ldd	r25, Y+4	; 0x04
     422:	fc 01       	movw	r30, r24
     424:	80 81       	ld	r24, Z
     426:	88 2f       	mov	r24, r24
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	2b 81       	ldd	r18, Y+3	; 0x03
     42c:	3c 81       	ldd	r19, Y+4	; 0x04
     42e:	f9 01       	movw	r30, r18
     430:	20 81       	ld	r18, Z
     432:	22 2f       	mov	r18, r18
     434:	30 e0       	ldi	r19, 0x00	; 0
     436:	22 0f       	add	r18, r18
     438:	33 1f       	adc	r19, r19
     43a:	24 5f       	subi	r18, 0xF4	; 244
     43c:	3e 4f       	sbci	r19, 0xFE	; 254
     43e:	f9 01       	movw	r30, r18
     440:	40 81       	ld	r20, Z
     442:	51 81       	ldd	r21, Z+1	; 0x01
     444:	29 81       	ldd	r18, Y+1	; 0x01
     446:	3a 81       	ldd	r19, Y+2	; 0x02
     448:	24 2b       	or	r18, r20
     44a:	35 2b       	or	r19, r21
     44c:	88 0f       	add	r24, r24
     44e:	99 1f       	adc	r25, r25
     450:	84 5f       	subi	r24, 0xF4	; 244
     452:	9e 4f       	sbci	r25, 0xFE	; 254
     454:	fc 01       	movw	r30, r24
     456:	31 83       	std	Z+1, r19	; 0x01
     458:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     45a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     45e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     462:	20 e0       	ldi	r18, 0x00	; 0
     464:	40 e0       	ldi	r20, 0x00	; 0
     466:	50 e0       	ldi	r21, 0x00	; 0
     468:	60 e0       	ldi	r22, 0x00	; 0
     46a:	70 e0       	ldi	r23, 0x00	; 0
     46c:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
     470:	1e c0       	rjmp	.+60     	; 0x4ae <__FUSE_REGION_LENGTH__+0xae>
	}
	else{
		col_value[current[0]] |= mask;
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	fc 01       	movw	r30, r24
     478:	80 81       	ld	r24, Z
     47a:	88 2f       	mov	r24, r24
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	2b 81       	ldd	r18, Y+3	; 0x03
     480:	3c 81       	ldd	r19, Y+4	; 0x04
     482:	f9 01       	movw	r30, r18
     484:	20 81       	ld	r18, Z
     486:	22 2f       	mov	r18, r18
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	22 0f       	add	r18, r18
     48c:	33 1f       	adc	r19, r19
     48e:	24 5f       	subi	r18, 0xF4	; 244
     490:	3e 4f       	sbci	r19, 0xFE	; 254
     492:	f9 01       	movw	r30, r18
     494:	40 81       	ld	r20, Z
     496:	51 81       	ldd	r21, Z+1	; 0x01
     498:	29 81       	ldd	r18, Y+1	; 0x01
     49a:	3a 81       	ldd	r19, Y+2	; 0x02
     49c:	24 2b       	or	r18, r20
     49e:	35 2b       	or	r19, r21
     4a0:	88 0f       	add	r24, r24
     4a2:	99 1f       	adc	r25, r25
     4a4:	84 5f       	subi	r24, 0xF4	; 244
     4a6:	9e 4f       	sbci	r25, 0xFE	; 254
     4a8:	fc 01       	movw	r30, r24
     4aa:	31 83       	std	Z+1, r19	; 0x01
     4ac:	20 83       	st	Z, r18
	}

	
}
     4ae:	26 96       	adiw	r28, 0x06	; 6
     4b0:	0f b6       	in	r0, 0x3f	; 63
     4b2:	f8 94       	cli
     4b4:	de bf       	out	0x3e, r29	; 62
     4b6:	0f be       	out	0x3f, r0	; 63
     4b8:	cd bf       	out	0x3d, r28	; 61
     4ba:	df 91       	pop	r29
     4bc:	cf 91       	pop	r28
     4be:	08 95       	ret

000004c0 <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     4c0:	cf 93       	push	r28
     4c2:	df 93       	push	r29
     4c4:	00 d0       	rcall	.+0      	; 0x4c6 <calc_next+0x6>
     4c6:	00 d0       	rcall	.+0      	; 0x4c8 <calc_next+0x8>
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <calc_next+0xa>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
     4d2:	7c 83       	std	Y+4, r23	; 0x04
     4d4:	6b 83       	std	Y+3, r22	; 0x03
     4d6:	5e 83       	std	Y+6, r21	; 0x06
     4d8:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     4da:	8d 81       	ldd	r24, Y+5	; 0x05
     4dc:	9e 81       	ldd	r25, Y+6	; 0x06
     4de:	fc 01       	movw	r30, r24
     4e0:	80 81       	ld	r24, Z
     4e2:	88 2f       	mov	r24, r24
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	09 2e       	mov	r0, r25
     4e8:	00 0c       	add	r0, r0
     4ea:	aa 0b       	sbc	r26, r26
     4ec:	bb 0b       	sbc	r27, r27
     4ee:	40 e0       	ldi	r20, 0x00	; 0
     4f0:	50 e0       	ldi	r21, 0x00	; 0
     4f2:	27 e0       	ldi	r18, 0x07	; 7
     4f4:	30 e0       	ldi	r19, 0x00	; 0
     4f6:	84 1b       	sub	r24, r20
     4f8:	95 0b       	sbc	r25, r21
     4fa:	28 17       	cp	r18, r24
     4fc:	39 07       	cpc	r19, r25
     4fe:	08 f4       	brcc	.+2      	; 0x502 <calc_next+0x42>
     500:	79 c0       	rjmp	.+242    	; 0x5f4 <calc_next+0x134>
     502:	82 5c       	subi	r24, 0xC2	; 194
     504:	9f 4f       	sbci	r25, 0xFF	; 255
     506:	fc 01       	movw	r30, r24
     508:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <__tablejump2__>
	{
		case 0:
			--next[1];
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	9c 81       	ldd	r25, Y+4	; 0x04
     510:	01 96       	adiw	r24, 0x01	; 1
     512:	fc 01       	movw	r30, r24
     514:	20 81       	ld	r18, Z
     516:	21 50       	subi	r18, 0x01	; 1
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
			break;
     51c:	6b c0       	rjmp	.+214    	; 0x5f4 <calc_next+0x134>
		case 1:
		++next[0];
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	fc 01       	movw	r30, r24
     524:	80 81       	ld	r24, Z
     526:	21 e0       	ldi	r18, 0x01	; 1
     528:	28 0f       	add	r18, r24
     52a:	8b 81       	ldd	r24, Y+3	; 0x03
     52c:	9c 81       	ldd	r25, Y+4	; 0x04
     52e:	fc 01       	movw	r30, r24
     530:	20 83       	st	Z, r18
		--next[1];
     532:	8b 81       	ldd	r24, Y+3	; 0x03
     534:	9c 81       	ldd	r25, Y+4	; 0x04
     536:	01 96       	adiw	r24, 0x01	; 1
     538:	fc 01       	movw	r30, r24
     53a:	20 81       	ld	r18, Z
     53c:	21 50       	subi	r18, 0x01	; 1
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
		break;
     542:	58 c0       	rjmp	.+176    	; 0x5f4 <calc_next+0x134>
		case 2:
		++next[0];
     544:	8b 81       	ldd	r24, Y+3	; 0x03
     546:	9c 81       	ldd	r25, Y+4	; 0x04
     548:	fc 01       	movw	r30, r24
     54a:	80 81       	ld	r24, Z
     54c:	21 e0       	ldi	r18, 0x01	; 1
     54e:	28 0f       	add	r18, r24
     550:	8b 81       	ldd	r24, Y+3	; 0x03
     552:	9c 81       	ldd	r25, Y+4	; 0x04
     554:	fc 01       	movw	r30, r24
     556:	20 83       	st	Z, r18
		break;
     558:	4d c0       	rjmp	.+154    	; 0x5f4 <calc_next+0x134>
		case 3:
		++next[0];
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	fc 01       	movw	r30, r24
     560:	80 81       	ld	r24, Z
     562:	21 e0       	ldi	r18, 0x01	; 1
     564:	28 0f       	add	r18, r24
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	fc 01       	movw	r30, r24
     56c:	20 83       	st	Z, r18
		++next[1];
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	fc 01       	movw	r30, r24
     576:	20 81       	ld	r18, Z
     578:	2f 5f       	subi	r18, 0xFF	; 255
     57a:	fc 01       	movw	r30, r24
     57c:	20 83       	st	Z, r18
		break;
     57e:	3a c0       	rjmp	.+116    	; 0x5f4 <calc_next+0x134>
		case 4:
		++next[1];
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	01 96       	adiw	r24, 0x01	; 1
     586:	fc 01       	movw	r30, r24
     588:	20 81       	ld	r18, Z
     58a:	2f 5f       	subi	r18, 0xFF	; 255
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
		break;
     590:	31 c0       	rjmp	.+98     	; 0x5f4 <calc_next+0x134>
		case 5:
		--next[0];
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	9c 81       	ldd	r25, Y+4	; 0x04
     596:	fc 01       	movw	r30, r24
     598:	80 81       	ld	r24, Z
     59a:	2f ef       	ldi	r18, 0xFF	; 255
     59c:	28 0f       	add	r18, r24
     59e:	8b 81       	ldd	r24, Y+3	; 0x03
     5a0:	9c 81       	ldd	r25, Y+4	; 0x04
     5a2:	fc 01       	movw	r30, r24
     5a4:	20 83       	st	Z, r18
		++next[1];
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	fc 01       	movw	r30, r24
     5ae:	20 81       	ld	r18, Z
     5b0:	2f 5f       	subi	r18, 0xFF	; 255
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
		break;
     5b6:	1e c0       	rjmp	.+60     	; 0x5f4 <calc_next+0x134>
		case 6:
		--next[0];
     5b8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ba:	9c 81       	ldd	r25, Y+4	; 0x04
     5bc:	fc 01       	movw	r30, r24
     5be:	80 81       	ld	r24, Z
     5c0:	2f ef       	ldi	r18, 0xFF	; 255
     5c2:	28 0f       	add	r18, r24
     5c4:	8b 81       	ldd	r24, Y+3	; 0x03
     5c6:	9c 81       	ldd	r25, Y+4	; 0x04
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
		break;
     5cc:	13 c0       	rjmp	.+38     	; 0x5f4 <calc_next+0x134>
		case 7:
		--next[0];
     5ce:	8b 81       	ldd	r24, Y+3	; 0x03
     5d0:	9c 81       	ldd	r25, Y+4	; 0x04
     5d2:	fc 01       	movw	r30, r24
     5d4:	80 81       	ld	r24, Z
     5d6:	2f ef       	ldi	r18, 0xFF	; 255
     5d8:	28 0f       	add	r18, r24
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	9c 81       	ldd	r25, Y+4	; 0x04
     5de:	fc 01       	movw	r30, r24
     5e0:	20 83       	st	Z, r18
		--next[1];
     5e2:	8b 81       	ldd	r24, Y+3	; 0x03
     5e4:	9c 81       	ldd	r25, Y+4	; 0x04
     5e6:	01 96       	adiw	r24, 0x01	; 1
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 81       	ld	r18, Z
     5ec:	21 50       	subi	r18, 0x01	; 1
     5ee:	fc 01       	movw	r30, r24
     5f0:	20 83       	st	Z, r18
		break;
     5f2:	00 00       	nop
	}
	
}
     5f4:	26 96       	adiw	r28, 0x06	; 6
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	df 91       	pop	r29
     602:	cf 91       	pop	r28
     604:	08 95       	ret

00000606 <ball_task>:

void ball_task(void *pvParameters)
{
     606:	cf 93       	push	r28
     608:	df 93       	push	r29
     60a:	cd b7       	in	r28, 0x3d	; 61
     60c:	de b7       	in	r29, 0x3e	; 62
     60e:	27 97       	sbiw	r28, 0x07	; 7
     610:	0f b6       	in	r0, 0x3f	; 63
     612:	f8 94       	cli
     614:	de bf       	out	0x3e, r29	; 62
     616:	0f be       	out	0x3f, r0	; 63
     618:	cd bf       	out	0x3d, r28	; 61
     61a:	9f 83       	std	Y+7, r25	; 0x07
     61c:	8e 83       	std	Y+6, r24	; 0x06
	(void) pvParameters;

	uint8_t pos[2] = {7, 5};
     61e:	87 e0       	ldi	r24, 0x07	; 7
     620:	89 83       	std	Y+1, r24	; 0x01
     622:	85 e0       	ldi	r24, 0x05	; 5
     624:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t direction = 0;
     626:	1b 82       	std	Y+3, r1	; 0x03
		uint8_t *next;
		next = (uint8_t *)malloc(sizeof(uint8_t)*2);
		next =  calc_next(pos, &direction);
		*/

		uint8_t next[2] = {pos[0],pos[1]};
     628:	89 81       	ldd	r24, Y+1	; 0x01
     62a:	8c 83       	std	Y+4, r24	; 0x04
     62c:	8a 81       	ldd	r24, Y+2	; 0x02
     62e:	8d 83       	std	Y+5, r24	; 0x05
		calc_next( &pos, &next, &direction);
     630:	9e 01       	movw	r18, r28
     632:	2d 5f       	subi	r18, 0xFD	; 253
     634:	3f 4f       	sbci	r19, 0xFF	; 255
     636:	ce 01       	movw	r24, r28
     638:	04 96       	adiw	r24, 0x04	; 4
     63a:	a9 01       	movw	r20, r18
     63c:	bc 01       	movw	r22, r24
     63e:	ce 01       	movw	r24, r28
     640:	01 96       	adiw	r24, 0x01	; 1
     642:	0e 94 60 02 	call	0x4c0	; 0x4c0 <calc_next>
			--next[0];
			--next[1];
			break;
		}*/
		
		if (next[0] > 12 || next[1] > 9){
     646:	8c 81       	ldd	r24, Y+4	; 0x04
     648:	8d 30       	cpi	r24, 0x0D	; 13
     64a:	18 f4       	brcc	.+6      	; 0x652 <ball_task+0x4c>
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	8a 30       	cpi	r24, 0x0A	; 10
     650:	28 f0       	brcs	.+10     	; 0x65c <ball_task+0x56>
			bounce(&direction);
     652:	ce 01       	movw	r24, r28
     654:	03 96       	adiw	r24, 0x03	; 3
     656:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     65a:	24 c0       	rjmp	.+72     	; 0x6a4 <ball_task+0x9e>
		}
		else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     65c:	8c 81       	ldd	r24, Y+4	; 0x04
     65e:	88 23       	and	r24, r24
     660:	d1 f4       	brne	.+52     	; 0x696 <ball_task+0x90>
     662:	8d 81       	ldd	r24, Y+5	; 0x05
     664:	28 2f       	mov	r18, r24
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     66c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     670:	28 17       	cp	r18, r24
     672:	39 07       	cpc	r19, r25
     674:	59 f0       	breq	.+22     	; 0x68c <ball_task+0x86>
     676:	8d 81       	ldd	r24, Y+5	; 0x05
     678:	28 2f       	mov	r18, r24
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     680:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     684:	01 96       	adiw	r24, 0x01	; 1
     686:	28 17       	cp	r18, r24
     688:	39 07       	cpc	r19, r25
     68a:	29 f4       	brne	.+10     	; 0x696 <ball_task+0x90>
			bounce(&direction);
     68c:	ce 01       	movw	r24, r28
     68e:	03 96       	adiw	r24, 0x03	; 3
     690:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     694:	07 c0       	rjmp	.+14     	; 0x6a4 <ball_task+0x9e>
		}
		else{
			move_ball(pos, next);
     696:	ce 01       	movw	r24, r28
     698:	04 96       	adiw	r24, 0x04	; 4
     69a:	bc 01       	movw	r22, r24
     69c:	ce 01       	movw	r24, r28
     69e:	01 96       	adiw	r24, 0x01	; 1
     6a0:	0e 94 63 01 	call	0x2c6	; 0x2c6 <move_ball>
		}
		vTaskDelay(60);
     6a4:	8c e3       	ldi	r24, 0x3C	; 60
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 f6 13 	call	0x27ec	; 0x27ec <vTaskDelay>
	}
     6ac:	bd cf       	rjmp	.-134    	; 0x628 <ball_task+0x22>

000006ae <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     6ae:	cf 93       	push	r28
     6b0:	df 93       	push	r29
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     6b6:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     6ba:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     6be:	89 2b       	or	r24, r25
     6c0:	49 f4       	brne	.+18     	; 0x6d4 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     6c2:	8b e2       	ldi	r24, 0x2B	; 43
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	2b e2       	ldi	r18, 0x2B	; 43
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	f9 01       	movw	r30, r18
     6cc:	20 81       	ld	r18, Z
     6ce:	24 60       	ori	r18, 0x04	; 4
     6d0:	fc 01       	movw	r30, r24
     6d2:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     6d4:	8b e2       	ldi	r24, 0x2B	; 43
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	2b e2       	ldi	r18, 0x2B	; 43
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	20 62       	ori	r18, 0x20	; 32
     6e2:	fc 01       	movw	r30, r24
     6e4:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     6e6:	8b e2       	ldi	r24, 0x2B	; 43
     6e8:	90 e0       	ldi	r25, 0x00	; 0
     6ea:	2b e2       	ldi	r18, 0x2B	; 43
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	2f 7d       	andi	r18, 0xDF	; 223
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     6f8:	8b e2       	ldi	r24, 0x2B	; 43
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	2b e2       	ldi	r18, 0x2B	; 43
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	f9 01       	movw	r30, r18
     702:	20 81       	ld	r18, Z
     704:	20 61       	ori	r18, 0x10	; 16
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     70a:	8b e2       	ldi	r24, 0x2B	; 43
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	2b e2       	ldi	r18, 0x2B	; 43
     710:	30 e0       	ldi	r19, 0x00	; 0
     712:	f9 01       	movw	r30, r18
     714:	20 81       	ld	r18, Z
     716:	2f 7e       	andi	r18, 0xEF	; 239
     718:	fc 01       	movw	r30, r24
     71a:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     71c:	82 e2       	ldi	r24, 0x22	; 34
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     724:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     728:	22 0f       	add	r18, r18
     72a:	33 1f       	adc	r19, r19
     72c:	24 5f       	subi	r18, 0xF4	; 244
     72e:	3e 4f       	sbci	r19, 0xFE	; 254
     730:	f9 01       	movw	r30, r18
     732:	20 81       	ld	r18, Z
     734:	31 81       	ldd	r19, Z+1	; 0x01
     736:	20 95       	com	r18
     738:	fc 01       	movw	r30, r24
     73a:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     73c:	85 e2       	ldi	r24, 0x25	; 37
     73e:	90 e0       	ldi	r25, 0x00	; 0
     740:	25 e2       	ldi	r18, 0x25	; 37
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	f9 01       	movw	r30, r18
     746:	20 81       	ld	r18, Z
     748:	23 60       	ori	r18, 0x03	; 3
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     74e:	85 e2       	ldi	r24, 0x25	; 37
     750:	90 e0       	ldi	r25, 0x00	; 0
     752:	25 e2       	ldi	r18, 0x25	; 37
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	f9 01       	movw	r30, r18
     758:	40 81       	ld	r20, Z
     75a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     75e:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     762:	22 0f       	add	r18, r18
     764:	33 1f       	adc	r19, r19
     766:	24 5f       	subi	r18, 0xF4	; 244
     768:	3e 4f       	sbci	r19, 0xFE	; 254
     76a:	f9 01       	movw	r30, r18
     76c:	20 81       	ld	r18, Z
     76e:	31 81       	ldd	r19, Z+1	; 0x01
     770:	23 2f       	mov	r18, r19
     772:	33 27       	eor	r19, r19
     774:	23 70       	andi	r18, 0x03	; 3
     776:	20 95       	com	r18
     778:	24 23       	and	r18, r20
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     77e:	8b e2       	ldi	r24, 0x2B	; 43
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	2b e2       	ldi	r18, 0x2B	; 43
     784:	30 e0       	ldi	r19, 0x00	; 0
     786:	f9 01       	movw	r30, r18
     788:	20 81       	ld	r18, Z
     78a:	2b 7f       	andi	r18, 0xFB	; 251
     78c:	fc 01       	movw	r30, r24
     78e:	20 83       	st	Z, r18

	++col_index;
     790:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     794:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     798:	01 96       	adiw	r24, 0x01	; 1
     79a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <col_index+0x1>
     79e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <col_index>
	if (col_index > 13){
     7a2:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     7a6:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     7aa:	0e 97       	sbiw	r24, 0x0e	; 14
     7ac:	24 f0       	brlt	.+8      	; 0x7b6 <handle_display+0x108>
		col_index = 0;
     7ae:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <col_index+0x1>
     7b2:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <col_index>
	}

}
     7b6:	df 91       	pop	r29
     7b8:	cf 91       	pop	r28
     7ba:	08 95       	ret

000007bc <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	cd b7       	in	r28, 0x3d	; 61
     7c2:	de b7       	in	r29, 0x3e	; 62
	//
}
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	08 95       	ret

000007ca <main>:

//-----------------------------------------
int main(void)
{
     7ca:	ef 92       	push	r14
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	cf 93       	push	r28
     7d2:	df 93       	push	r29
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     7d8:	0e 94 d8 04 	call	0x9b0	; 0x9b0 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     7dc:	8b e2       	ldi	r24, 0x2B	; 43
     7de:	90 e0       	ldi	r25, 0x00	; 0
     7e0:	2b e2       	ldi	r18, 0x2B	; 43
     7e2:	30 e0       	ldi	r19, 0x00	; 0
     7e4:	f9 01       	movw	r30, r18
     7e6:	20 81       	ld	r18, Z
     7e8:	2f 7b       	andi	r18, 0xBF	; 191
     7ea:	fc 01       	movw	r30, r24
     7ec:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     7ee:	8e e1       	ldi	r24, 0x1E	; 30
     7f0:	40 e0       	ldi	r20, 0x00	; 0
     7f2:	61 e0       	ldi	r22, 0x01	; 1
     7f4:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <xQueueGenericCreate>
     7f8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     7fc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xQueueCreateMutex>
     806:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_col_0_mutex+0x1>
     80a:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     80e:	81 e0       	ldi	r24, 0x01	; 1
     810:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <xQueueCreateMutex>
     814:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_player_position_mutex+0x1>
     818:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     81c:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     820:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     824:	0e 94 5e 04 	call	0x8bc	; 0x8bc <init_com>
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     828:	e1 2c       	mov	r14, r1
     82a:	f1 2c       	mov	r15, r1
     82c:	03 e0       	ldi	r16, 0x03	; 3
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	30 e0       	ldi	r19, 0x00	; 0
     832:	45 e5       	ldi	r20, 0x55	; 85
     834:	50 e0       	ldi	r21, 0x00	; 0
     836:	6c e3       	ldi	r22, 0x3C	; 60
     838:	71 e0       	ldi	r23, 0x01	; 1
     83a:	82 ec       	ldi	r24, 0xC2	; 194
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     842:	e1 2c       	mov	r14, r1
     844:	f1 2c       	mov	r15, r1
     846:	04 e0       	ldi	r16, 0x04	; 4
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	45 e5       	ldi	r20, 0x55	; 85
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	61 e4       	ldi	r22, 0x41	; 65
     852:	71 e0       	ldi	r23, 0x01	; 1
     854:	83 e0       	ldi	r24, 0x03	; 3
     856:	93 e0       	ldi	r25, 0x03	; 3
     858:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     85c:	87 e5       	ldi	r24, 0x57	; 87
     85e:	93 e0       	ldi	r25, 0x03	; 3
     860:	0e 94 70 04 	call	0x8e0	; 0x8e0 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     864:	0e 94 18 14 	call	0x2830	; 0x2830 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     868:	ff cf       	rjmp	.-2      	; 0x868 <main+0x9e>

0000086a <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	00 d0       	rcall	.+0      	; 0x870 <_com_call_back+0x6>
     870:	00 d0       	rcall	.+0      	; 0x872 <_com_call_back+0x8>
     872:	cd b7       	in	r28, 0x3d	; 61
     874:	de b7       	in	r29, 0x3e	; 62
     876:	9b 83       	std	Y+3, r25	; 0x03
     878:	8a 83       	std	Y+2, r24	; 0x02
     87a:	6c 83       	std	Y+4, r22	; 0x04
     87c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     880:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     884:	89 2b       	or	r24, r25
     886:	99 f0       	breq	.+38     	; 0x8ae <_com_call_back+0x44>
     888:	19 82       	std	Y+1, r1	; 0x01
     88a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     88e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     892:	be 01       	movw	r22, r28
     894:	6c 5f       	subi	r22, 0xFC	; 252
     896:	7f 4f       	sbci	r23, 0xFF	; 255
     898:	20 e0       	ldi	r18, 0x00	; 0
     89a:	ae 01       	movw	r20, r28
     89c:	4f 5f       	subi	r20, 0xFF	; 255
     89e:	5f 4f       	sbci	r21, 0xFF	; 255
     8a0:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <xQueueGenericSendFromISR>
     8a4:	89 81       	ldd	r24, Y+1	; 0x01
     8a6:	88 23       	and	r24, r24
     8a8:	11 f0       	breq	.+4      	; 0x8ae <_com_call_back+0x44>
     8aa:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
     8ae:	0f 90       	pop	r0
     8b0:	0f 90       	pop	r0
     8b2:	0f 90       	pop	r0
     8b4:	0f 90       	pop	r0
     8b6:	df 91       	pop	r29
     8b8:	cf 91       	pop	r28
     8ba:	08 95       	ret

000008bc <init_com>:
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <init_com+0x6>
     8c2:	cd b7       	in	r28, 0x3d	; 61
     8c4:	de b7       	in	r29, 0x3e	; 62
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	89 81       	ldd	r24, Y+1	; 0x01
     8cc:	9a 81       	ldd	r25, Y+2	; 0x02
     8ce:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_x_rx_com_queue+0x1>
     8d2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_x_rx_com_queue>
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
     8da:	df 91       	pop	r29
     8dc:	cf 91       	pop	r28
     8de:	08 95       	ret

000008e0 <init_display_timer>:
     8e0:	cf 93       	push	r28
     8e2:	df 93       	push	r29
     8e4:	00 d0       	rcall	.+0      	; 0x8e6 <init_display_timer+0x6>
     8e6:	cd b7       	in	r28, 0x3d	; 61
     8e8:	de b7       	in	r29, 0x3e	; 62
     8ea:	9a 83       	std	Y+2, r25	; 0x02
     8ec:	89 83       	std	Y+1, r24	; 0x01
     8ee:	89 81       	ldd	r24, Y+1	; 0x01
     8f0:	9a 81       	ldd	r25, Y+2	; 0x02
     8f2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <cb_ptr+0x1>
     8f6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cb_ptr>
     8fa:	87 e4       	ldi	r24, 0x47	; 71
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	2a e0       	ldi	r18, 0x0A	; 10
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	84 e4       	ldi	r24, 0x44	; 68
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	24 e4       	ldi	r18, 0x44	; 68
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	22 60       	ori	r18, 0x02	; 2
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
     916:	8e e6       	ldi	r24, 0x6E	; 110
     918:	90 e0       	ldi	r25, 0x00	; 0
     91a:	2e e6       	ldi	r18, 0x6E	; 110
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	f9 01       	movw	r30, r18
     920:	20 81       	ld	r18, Z
     922:	22 60       	ori	r18, 0x02	; 2
     924:	fc 01       	movw	r30, r24
     926:	20 83       	st	Z, r18
     928:	85 e4       	ldi	r24, 0x45	; 69
     92a:	90 e0       	ldi	r25, 0x00	; 0
     92c:	25 e4       	ldi	r18, 0x45	; 69
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	f9 01       	movw	r30, r18
     932:	20 81       	ld	r18, Z
     934:	25 60       	ori	r18, 0x05	; 5
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	df 91       	pop	r29
     940:	cf 91       	pop	r28
     942:	08 95       	ret

00000944 <__vector_16>:
     944:	1f 92       	push	r1
     946:	0f 92       	push	r0
     948:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     94c:	0f 92       	push	r0
     94e:	11 24       	eor	r1, r1
     950:	2f 93       	push	r18
     952:	3f 93       	push	r19
     954:	4f 93       	push	r20
     956:	5f 93       	push	r21
     958:	6f 93       	push	r22
     95a:	7f 93       	push	r23
     95c:	8f 93       	push	r24
     95e:	9f 93       	push	r25
     960:	af 93       	push	r26
     962:	bf 93       	push	r27
     964:	ef 93       	push	r30
     966:	ff 93       	push	r31
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     974:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     978:	89 2b       	or	r24, r25
     97a:	31 f0       	breq	.+12     	; 0x988 <__vector_16+0x44>
     97c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     980:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     984:	fc 01       	movw	r30, r24
     986:	09 95       	icall
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     9aa:	0f 90       	pop	r0
     9ac:	1f 90       	pop	r1
     9ae:	18 95       	reti

000009b0 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     9b0:	8f 92       	push	r8
     9b2:	9f 92       	push	r9
     9b4:	af 92       	push	r10
     9b6:	bf 92       	push	r11
     9b8:	cf 92       	push	r12
     9ba:	df 92       	push	r13
     9bc:	ef 92       	push	r14
     9be:	0f 93       	push	r16
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	cd b7       	in	r28, 0x3d	; 61
     9c6:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     9c8:	8a e5       	ldi	r24, 0x5A	; 90
     9ca:	91 e0       	ldi	r25, 0x01	; 1
     9cc:	0e 94 6a 05 	call	0xad4	; 0xad4 <buffer_init>
	buffer_init(&_com_tx_buffer);
     9d0:	8d e6       	ldi	r24, 0x6D	; 109
     9d2:	91 e0       	ldi	r25, 0x01	; 1
     9d4:	0e 94 6a 05 	call	0xad4	; 0xad4 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     9d8:	0f 2e       	mov	r0, r31
     9da:	f5 e3       	ldi	r31, 0x35	; 53
     9dc:	8f 2e       	mov	r8, r31
     9de:	f4 e0       	ldi	r31, 0x04	; 4
     9e0:	9f 2e       	mov	r9, r31
     9e2:	f0 2d       	mov	r31, r0
     9e4:	0f 2e       	mov	r0, r31
     9e6:	fd e6       	ldi	r31, 0x6D	; 109
     9e8:	af 2e       	mov	r10, r31
     9ea:	f1 e0       	ldi	r31, 0x01	; 1
     9ec:	bf 2e       	mov	r11, r31
     9ee:	f0 2d       	mov	r31, r0
     9f0:	0f 2e       	mov	r0, r31
     9f2:	fa e5       	ldi	r31, 0x5A	; 90
     9f4:	cf 2e       	mov	r12, r31
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	df 2e       	mov	r13, r31
     9fa:	f0 2d       	mov	r31, r0
     9fc:	e1 2c       	mov	r14, r1
     9fe:	00 e0       	ldi	r16, 0x00	; 0
     a00:	23 e0       	ldi	r18, 0x03	; 3
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	52 ec       	ldi	r21, 0xC2	; 194
     a06:	61 e0       	ldi	r22, 0x01	; 1
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	0e 94 c8 0a 	call	0x1590	; 0x1590 <serial_new_instance>
     a10:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_com_serial_instance+0x1>
     a14:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     a18:	88 e2       	ldi	r24, 0x28	; 40
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	28 e2       	ldi	r18, 0x28	; 40
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	f9 01       	movw	r30, r18
     a22:	20 81       	ld	r18, Z
     a24:	23 6c       	ori	r18, 0xC3	; 195
     a26:	fc 01       	movw	r30, r24
     a28:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     a2a:	8b e2       	ldi	r24, 0x2B	; 43
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	2b e2       	ldi	r18, 0x2B	; 43
     a30:	30 e0       	ldi	r19, 0x00	; 0
     a32:	f9 01       	movw	r30, r18
     a34:	20 81       	ld	r18, Z
     a36:	28 60       	ori	r18, 0x08	; 8
     a38:	fc 01       	movw	r30, r24
     a3a:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     a3c:	8a e2       	ldi	r24, 0x2A	; 42
     a3e:	90 e0       	ldi	r25, 0x00	; 0
     a40:	2a e2       	ldi	r18, 0x2A	; 42
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	f9 01       	movw	r30, r18
     a46:	20 81       	ld	r18, Z
     a48:	24 67       	ori	r18, 0x74	; 116
     a4a:	fc 01       	movw	r30, r24
     a4c:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     a4e:	8b e2       	ldi	r24, 0x2B	; 43
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	2b e2       	ldi	r18, 0x2B	; 43
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	f9 01       	movw	r30, r18
     a58:	20 81       	ld	r18, Z
     a5a:	20 64       	ori	r18, 0x40	; 64
     a5c:	fc 01       	movw	r30, r24
     a5e:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     a60:	81 e2       	ldi	r24, 0x21	; 33
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	fc 01       	movw	r30, r24
     a66:	80 81       	ld	r24, Z
     a68:	81 e2       	ldi	r24, 0x21	; 33
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2f ef       	ldi	r18, 0xFF	; 255
     a6e:	fc 01       	movw	r30, r24
     a70:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     a72:	84 e2       	ldi	r24, 0x24	; 36
     a74:	90 e0       	ldi	r25, 0x00	; 0
     a76:	24 e2       	ldi	r18, 0x24	; 36
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	f9 01       	movw	r30, r18
     a7c:	20 81       	ld	r18, Z
     a7e:	23 60       	ori	r18, 0x03	; 3
     a80:	fc 01       	movw	r30, r24
     a82:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     a84:	84 e2       	ldi	r24, 0x24	; 36
     a86:	90 e0       	ldi	r25, 0x00	; 0
     a88:	24 e2       	ldi	r18, 0x24	; 36
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	f9 01       	movw	r30, r18
     a8e:	20 81       	ld	r18, Z
     a90:	2c 63       	ori	r18, 0x3C	; 60
     a92:	fc 01       	movw	r30, r24
     a94:	20 83       	st	Z, r18
}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	0f 91       	pop	r16
     a9c:	ef 90       	pop	r14
     a9e:	df 90       	pop	r13
     aa0:	cf 90       	pop	r12
     aa2:	bf 90       	pop	r11
     aa4:	af 90       	pop	r10
     aa6:	9f 90       	pop	r9
     aa8:	8f 90       	pop	r8
     aaa:	08 95       	ret

00000aac <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	1f 92       	push	r1
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     ab8:	0f 90       	pop	r0
     aba:	df 91       	pop	r29
     abc:	cf 91       	pop	r28
     abe:	08 95       	ret

00000ac0 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
     ac4:	1f 92       	push	r1
     ac6:	cd b7       	in	r28, 0x3d	; 61
     ac8:	de b7       	in	r29, 0x3e	; 62
     aca:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     acc:	0f 90       	pop	r0
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	08 95       	ret

00000ad4 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     ad4:	cf 93       	push	r28
     ad6:	df 93       	push	r29
     ad8:	00 d0       	rcall	.+0      	; 0xada <buffer_init+0x6>
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
     ade:	9a 83       	std	Y+2, r25	; 0x02
     ae0:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     ae2:	89 81       	ldd	r24, Y+1	; 0x01
     ae4:	9a 81       	ldd	r25, Y+2	; 0x02
     ae6:	fc 01       	movw	r30, r24
     ae8:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     aea:	89 81       	ldd	r24, Y+1	; 0x01
     aec:	9a 81       	ldd	r25, Y+2	; 0x02
     aee:	fc 01       	movw	r30, r24
     af0:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     af2:	89 81       	ldd	r24, Y+1	; 0x01
     af4:	9a 81       	ldd	r25, Y+2	; 0x02
     af6:	fc 01       	movw	r30, r24
     af8:	12 8a       	std	Z+18, r1	; 0x12
}
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	08 95       	ret

00000b04 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
     b08:	00 d0       	rcall	.+0      	; 0xb0a <buffer_get_item+0x6>
     b0a:	00 d0       	rcall	.+0      	; 0xb0c <buffer_get_item+0x8>
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	9a 83       	std	Y+2, r25	; 0x02
     b12:	89 83       	std	Y+1, r24	; 0x01
     b14:	7c 83       	std	Y+4, r23	; 0x04
     b16:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     b18:	89 81       	ldd	r24, Y+1	; 0x01
     b1a:	9a 81       	ldd	r25, Y+2	; 0x02
     b1c:	fc 01       	movw	r30, r24
     b1e:	82 89       	ldd	r24, Z+18	; 0x12
     b20:	88 23       	and	r24, r24
     b22:	81 f1       	breq	.+96     	; 0xb84 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     b24:	89 81       	ldd	r24, Y+1	; 0x01
     b26:	9a 81       	ldd	r25, Y+2	; 0x02
     b28:	fc 01       	movw	r30, r24
     b2a:	81 89       	ldd	r24, Z+17	; 0x11
     b2c:	88 2f       	mov	r24, r24
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	29 81       	ldd	r18, Y+1	; 0x01
     b32:	3a 81       	ldd	r19, Y+2	; 0x02
     b34:	82 0f       	add	r24, r18
     b36:	93 1f       	adc	r25, r19
     b38:	fc 01       	movw	r30, r24
     b3a:	20 81       	ld	r18, Z
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     b44:	89 81       	ldd	r24, Y+1	; 0x01
     b46:	9a 81       	ldd	r25, Y+2	; 0x02
     b48:	fc 01       	movw	r30, r24
     b4a:	81 89       	ldd	r24, Z+17	; 0x11
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	01 96       	adiw	r24, 0x01	; 1
     b52:	8f 70       	andi	r24, 0x0F	; 15
     b54:	90 78       	andi	r25, 0x80	; 128
     b56:	99 23       	and	r25, r25
     b58:	24 f4       	brge	.+8      	; 0xb62 <buffer_get_item+0x5e>
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	80 6f       	ori	r24, 0xF0	; 240
     b5e:	9f 6f       	ori	r25, 0xFF	; 255
     b60:	01 96       	adiw	r24, 0x01	; 1
     b62:	28 2f       	mov	r18, r24
     b64:	89 81       	ldd	r24, Y+1	; 0x01
     b66:	9a 81       	ldd	r25, Y+2	; 0x02
     b68:	fc 01       	movw	r30, r24
     b6a:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     b6c:	89 81       	ldd	r24, Y+1	; 0x01
     b6e:	9a 81       	ldd	r25, Y+2	; 0x02
     b70:	fc 01       	movw	r30, r24
     b72:	82 89       	ldd	r24, Z+18	; 0x12
     b74:	2f ef       	ldi	r18, 0xFF	; 255
     b76:	28 0f       	add	r18, r24
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	9a 81       	ldd	r25, Y+2	; 0x02
     b7c:	fc 01       	movw	r30, r24
     b7e:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	01 c0       	rjmp	.+2      	; 0xb86 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     b84:	81 e0       	ldi	r24, 0x01	; 1
}
     b86:	0f 90       	pop	r0
     b88:	0f 90       	pop	r0
     b8a:	0f 90       	pop	r0
     b8c:	0f 90       	pop	r0
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	08 95       	ret

00000b94 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	00 d0       	rcall	.+0      	; 0xb9a <buffer_put_item+0x6>
     b9a:	1f 92       	push	r1
     b9c:	cd b7       	in	r28, 0x3d	; 61
     b9e:	de b7       	in	r29, 0x3e	; 62
     ba0:	9a 83       	std	Y+2, r25	; 0x02
     ba2:	89 83       	std	Y+1, r24	; 0x01
     ba4:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     ba6:	89 81       	ldd	r24, Y+1	; 0x01
     ba8:	9a 81       	ldd	r25, Y+2	; 0x02
     baa:	fc 01       	movw	r30, r24
     bac:	82 89       	ldd	r24, Z+18	; 0x12
     bae:	80 31       	cpi	r24, 0x10	; 16
     bb0:	68 f5       	brcc	.+90     	; 0xc0c <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	9a 81       	ldd	r25, Y+2	; 0x02
     bb6:	fc 01       	movw	r30, r24
     bb8:	80 89       	ldd	r24, Z+16	; 0x10
     bba:	88 2f       	mov	r24, r24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	29 81       	ldd	r18, Y+1	; 0x01
     bc0:	3a 81       	ldd	r19, Y+2	; 0x02
     bc2:	82 0f       	add	r24, r18
     bc4:	93 1f       	adc	r25, r19
     bc6:	2b 81       	ldd	r18, Y+3	; 0x03
     bc8:	fc 01       	movw	r30, r24
     bca:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     bcc:	89 81       	ldd	r24, Y+1	; 0x01
     bce:	9a 81       	ldd	r25, Y+2	; 0x02
     bd0:	fc 01       	movw	r30, r24
     bd2:	80 89       	ldd	r24, Z+16	; 0x10
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	01 96       	adiw	r24, 0x01	; 1
     bda:	8f 70       	andi	r24, 0x0F	; 15
     bdc:	90 78       	andi	r25, 0x80	; 128
     bde:	99 23       	and	r25, r25
     be0:	24 f4       	brge	.+8      	; 0xbea <buffer_put_item+0x56>
     be2:	01 97       	sbiw	r24, 0x01	; 1
     be4:	80 6f       	ori	r24, 0xF0	; 240
     be6:	9f 6f       	ori	r25, 0xFF	; 255
     be8:	01 96       	adiw	r24, 0x01	; 1
     bea:	28 2f       	mov	r18, r24
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	9a 81       	ldd	r25, Y+2	; 0x02
     bf0:	fc 01       	movw	r30, r24
     bf2:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	9a 81       	ldd	r25, Y+2	; 0x02
     bf8:	fc 01       	movw	r30, r24
     bfa:	82 89       	ldd	r24, Z+18	; 0x12
     bfc:	21 e0       	ldi	r18, 0x01	; 1
     bfe:	28 0f       	add	r18, r24
     c00:	89 81       	ldd	r24, Y+1	; 0x01
     c02:	9a 81       	ldd	r25, Y+2	; 0x02
     c04:	fc 01       	movw	r30, r24
     c06:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	01 c0       	rjmp	.+2      	; 0xc0e <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     c0c:	82 e0       	ldi	r24, 0x02	; 2
}
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	0f 90       	pop	r0
     c14:	df 91       	pop	r29
     c16:	cf 91       	pop	r28
     c18:	08 95       	ret

00000c1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     c1a:	cf 93       	push	r28
     c1c:	df 93       	push	r29
     c1e:	00 d0       	rcall	.+0      	; 0xc20 <vListInitialise+0x6>
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	9a 83       	std	Y+2, r25	; 0x02
     c26:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	9a 81       	ldd	r25, Y+2	; 0x02
     c2c:	9c 01       	movw	r18, r24
     c2e:	2d 5f       	subi	r18, 0xFD	; 253
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	89 81       	ldd	r24, Y+1	; 0x01
     c34:	9a 81       	ldd	r25, Y+2	; 0x02
     c36:	fc 01       	movw	r30, r24
     c38:	32 83       	std	Z+2, r19	; 0x02
     c3a:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	2f ef       	ldi	r18, 0xFF	; 255
     c42:	3f ef       	ldi	r19, 0xFF	; 255
     c44:	fc 01       	movw	r30, r24
     c46:	34 83       	std	Z+4, r19	; 0x04
     c48:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	9a 81       	ldd	r25, Y+2	; 0x02
     c4e:	9c 01       	movw	r18, r24
     c50:	2d 5f       	subi	r18, 0xFD	; 253
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	89 81       	ldd	r24, Y+1	; 0x01
     c56:	9a 81       	ldd	r25, Y+2	; 0x02
     c58:	fc 01       	movw	r30, r24
     c5a:	36 83       	std	Z+6, r19	; 0x06
     c5c:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     c5e:	89 81       	ldd	r24, Y+1	; 0x01
     c60:	9a 81       	ldd	r25, Y+2	; 0x02
     c62:	9c 01       	movw	r18, r24
     c64:	2d 5f       	subi	r18, 0xFD	; 253
     c66:	3f 4f       	sbci	r19, 0xFF	; 255
     c68:	89 81       	ldd	r24, Y+1	; 0x01
     c6a:	9a 81       	ldd	r25, Y+2	; 0x02
     c6c:	fc 01       	movw	r30, r24
     c6e:	30 87       	std	Z+8, r19	; 0x08
     c70:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     c72:	89 81       	ldd	r24, Y+1	; 0x01
     c74:	9a 81       	ldd	r25, Y+2	; 0x02
     c76:	fc 01       	movw	r30, r24
     c78:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     c7a:	0f 90       	pop	r0
     c7c:	0f 90       	pop	r0
     c7e:	df 91       	pop	r29
     c80:	cf 91       	pop	r28
     c82:	08 95       	ret

00000c84 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     c84:	cf 93       	push	r28
     c86:	df 93       	push	r29
     c88:	00 d0       	rcall	.+0      	; 0xc8a <vListInitialiseItem+0x6>
     c8a:	cd b7       	in	r28, 0x3d	; 61
     c8c:	de b7       	in	r29, 0x3e	; 62
     c8e:	9a 83       	std	Y+2, r25	; 0x02
     c90:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	11 86       	std	Z+9, r1	; 0x09
     c9a:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     c9c:	0f 90       	pop	r0
     c9e:	0f 90       	pop	r0
     ca0:	df 91       	pop	r29
     ca2:	cf 91       	pop	r28
     ca4:	08 95       	ret

00000ca6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	00 d0       	rcall	.+0      	; 0xcac <vListInsertEnd+0x6>
     cac:	00 d0       	rcall	.+0      	; 0xcae <vListInsertEnd+0x8>
     cae:	00 d0       	rcall	.+0      	; 0xcb0 <vListInsertEnd+0xa>
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	9c 83       	std	Y+4, r25	; 0x04
     cb6:	8b 83       	std	Y+3, r24	; 0x03
     cb8:	7e 83       	std	Y+6, r23	; 0x06
     cba:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     cbc:	8b 81       	ldd	r24, Y+3	; 0x03
     cbe:	9c 81       	ldd	r25, Y+4	; 0x04
     cc0:	fc 01       	movw	r30, r24
     cc2:	81 81       	ldd	r24, Z+1	; 0x01
     cc4:	92 81       	ldd	r25, Z+2	; 0x02
     cc6:	9a 83       	std	Y+2, r25	; 0x02
     cc8:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     cca:	8d 81       	ldd	r24, Y+5	; 0x05
     ccc:	9e 81       	ldd	r25, Y+6	; 0x06
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	3a 81       	ldd	r19, Y+2	; 0x02
     cd2:	fc 01       	movw	r30, r24
     cd4:	33 83       	std	Z+3, r19	; 0x03
     cd6:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     cd8:	89 81       	ldd	r24, Y+1	; 0x01
     cda:	9a 81       	ldd	r25, Y+2	; 0x02
     cdc:	fc 01       	movw	r30, r24
     cde:	24 81       	ldd	r18, Z+4	; 0x04
     ce0:	35 81       	ldd	r19, Z+5	; 0x05
     ce2:	8d 81       	ldd	r24, Y+5	; 0x05
     ce4:	9e 81       	ldd	r25, Y+6	; 0x06
     ce6:	fc 01       	movw	r30, r24
     ce8:	35 83       	std	Z+5, r19	; 0x05
     cea:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	fc 01       	movw	r30, r24
     cf2:	84 81       	ldd	r24, Z+4	; 0x04
     cf4:	95 81       	ldd	r25, Z+5	; 0x05
     cf6:	2d 81       	ldd	r18, Y+5	; 0x05
     cf8:	3e 81       	ldd	r19, Y+6	; 0x06
     cfa:	fc 01       	movw	r30, r24
     cfc:	33 83       	std	Z+3, r19	; 0x03
     cfe:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	2d 81       	ldd	r18, Y+5	; 0x05
     d06:	3e 81       	ldd	r19, Y+6	; 0x06
     d08:	fc 01       	movw	r30, r24
     d0a:	35 83       	std	Z+5, r19	; 0x05
     d0c:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     d0e:	8d 81       	ldd	r24, Y+5	; 0x05
     d10:	9e 81       	ldd	r25, Y+6	; 0x06
     d12:	2b 81       	ldd	r18, Y+3	; 0x03
     d14:	3c 81       	ldd	r19, Y+4	; 0x04
     d16:	fc 01       	movw	r30, r24
     d18:	31 87       	std	Z+9, r19	; 0x09
     d1a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	fc 01       	movw	r30, r24
     d22:	80 81       	ld	r24, Z
     d24:	21 e0       	ldi	r18, 0x01	; 1
     d26:	28 0f       	add	r18, r24
     d28:	8b 81       	ldd	r24, Y+3	; 0x03
     d2a:	9c 81       	ldd	r25, Y+4	; 0x04
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
}
     d30:	26 96       	adiw	r28, 0x06	; 6
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
     d3c:	df 91       	pop	r29
     d3e:	cf 91       	pop	r28
     d40:	08 95       	ret

00000d42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d42:	cf 93       	push	r28
     d44:	df 93       	push	r29
     d46:	cd b7       	in	r28, 0x3d	; 61
     d48:	de b7       	in	r29, 0x3e	; 62
     d4a:	28 97       	sbiw	r28, 0x08	; 8
     d4c:	0f b6       	in	r0, 0x3f	; 63
     d4e:	f8 94       	cli
     d50:	de bf       	out	0x3e, r29	; 62
     d52:	0f be       	out	0x3f, r0	; 63
     d54:	cd bf       	out	0x3d, r28	; 61
     d56:	9e 83       	std	Y+6, r25	; 0x06
     d58:	8d 83       	std	Y+5, r24	; 0x05
     d5a:	78 87       	std	Y+8, r23	; 0x08
     d5c:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     d5e:	8f 81       	ldd	r24, Y+7	; 0x07
     d60:	98 85       	ldd	r25, Y+8	; 0x08
     d62:	fc 01       	movw	r30, r24
     d64:	80 81       	ld	r24, Z
     d66:	91 81       	ldd	r25, Z+1	; 0x01
     d68:	9c 83       	std	Y+4, r25	; 0x04
     d6a:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	01 96       	adiw	r24, 0x01	; 1
     d72:	41 f4       	brne	.+16     	; 0xd84 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     d74:	8d 81       	ldd	r24, Y+5	; 0x05
     d76:	9e 81       	ldd	r25, Y+6	; 0x06
     d78:	fc 01       	movw	r30, r24
     d7a:	87 81       	ldd	r24, Z+7	; 0x07
     d7c:	90 85       	ldd	r25, Z+8	; 0x08
     d7e:	9a 83       	std	Y+2, r25	; 0x02
     d80:	89 83       	std	Y+1, r24	; 0x01
     d82:	1a c0       	rjmp	.+52     	; 0xdb8 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d84:	8d 81       	ldd	r24, Y+5	; 0x05
     d86:	9e 81       	ldd	r25, Y+6	; 0x06
     d88:	03 96       	adiw	r24, 0x03	; 3
     d8a:	9a 83       	std	Y+2, r25	; 0x02
     d8c:	89 83       	std	Y+1, r24	; 0x01
     d8e:	07 c0       	rjmp	.+14     	; 0xd9e <vListInsert+0x5c>
     d90:	89 81       	ldd	r24, Y+1	; 0x01
     d92:	9a 81       	ldd	r25, Y+2	; 0x02
     d94:	fc 01       	movw	r30, r24
     d96:	82 81       	ldd	r24, Z+2	; 0x02
     d98:	93 81       	ldd	r25, Z+3	; 0x03
     d9a:	9a 83       	std	Y+2, r25	; 0x02
     d9c:	89 83       	std	Y+1, r24	; 0x01
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	9a 81       	ldd	r25, Y+2	; 0x02
     da2:	fc 01       	movw	r30, r24
     da4:	82 81       	ldd	r24, Z+2	; 0x02
     da6:	93 81       	ldd	r25, Z+3	; 0x03
     da8:	fc 01       	movw	r30, r24
     daa:	20 81       	ld	r18, Z
     dac:	31 81       	ldd	r19, Z+1	; 0x01
     dae:	8b 81       	ldd	r24, Y+3	; 0x03
     db0:	9c 81       	ldd	r25, Y+4	; 0x04
     db2:	82 17       	cp	r24, r18
     db4:	93 07       	cpc	r25, r19
     db6:	60 f7       	brcc	.-40     	; 0xd90 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	fc 01       	movw	r30, r24
     dbe:	22 81       	ldd	r18, Z+2	; 0x02
     dc0:	33 81       	ldd	r19, Z+3	; 0x03
     dc2:	8f 81       	ldd	r24, Y+7	; 0x07
     dc4:	98 85       	ldd	r25, Y+8	; 0x08
     dc6:	fc 01       	movw	r30, r24
     dc8:	33 83       	std	Z+3, r19	; 0x03
     dca:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     dcc:	8f 81       	ldd	r24, Y+7	; 0x07
     dce:	98 85       	ldd	r25, Y+8	; 0x08
     dd0:	fc 01       	movw	r30, r24
     dd2:	82 81       	ldd	r24, Z+2	; 0x02
     dd4:	93 81       	ldd	r25, Z+3	; 0x03
     dd6:	2f 81       	ldd	r18, Y+7	; 0x07
     dd8:	38 85       	ldd	r19, Y+8	; 0x08
     dda:	fc 01       	movw	r30, r24
     ddc:	35 83       	std	Z+5, r19	; 0x05
     dde:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     de0:	8f 81       	ldd	r24, Y+7	; 0x07
     de2:	98 85       	ldd	r25, Y+8	; 0x08
     de4:	29 81       	ldd	r18, Y+1	; 0x01
     de6:	3a 81       	ldd	r19, Y+2	; 0x02
     de8:	fc 01       	movw	r30, r24
     dea:	35 83       	std	Z+5, r19	; 0x05
     dec:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     dee:	89 81       	ldd	r24, Y+1	; 0x01
     df0:	9a 81       	ldd	r25, Y+2	; 0x02
     df2:	2f 81       	ldd	r18, Y+7	; 0x07
     df4:	38 85       	ldd	r19, Y+8	; 0x08
     df6:	fc 01       	movw	r30, r24
     df8:	33 83       	std	Z+3, r19	; 0x03
     dfa:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     dfc:	8f 81       	ldd	r24, Y+7	; 0x07
     dfe:	98 85       	ldd	r25, Y+8	; 0x08
     e00:	2d 81       	ldd	r18, Y+5	; 0x05
     e02:	3e 81       	ldd	r19, Y+6	; 0x06
     e04:	fc 01       	movw	r30, r24
     e06:	31 87       	std	Z+9, r19	; 0x09
     e08:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	fc 01       	movw	r30, r24
     e10:	80 81       	ld	r24, Z
     e12:	21 e0       	ldi	r18, 0x01	; 1
     e14:	28 0f       	add	r18, r24
     e16:	8d 81       	ldd	r24, Y+5	; 0x05
     e18:	9e 81       	ldd	r25, Y+6	; 0x06
     e1a:	fc 01       	movw	r30, r24
     e1c:	20 83       	st	Z, r18
}
     e1e:	28 96       	adiw	r28, 0x08	; 8
     e20:	0f b6       	in	r0, 0x3f	; 63
     e22:	f8 94       	cli
     e24:	de bf       	out	0x3e, r29	; 62
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	cd bf       	out	0x3d, r28	; 61
     e2a:	df 91       	pop	r29
     e2c:	cf 91       	pop	r28
     e2e:	08 95       	ret

00000e30 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	00 d0       	rcall	.+0      	; 0xe36 <uxListRemove+0x6>
     e36:	00 d0       	rcall	.+0      	; 0xe38 <uxListRemove+0x8>
     e38:	cd b7       	in	r28, 0x3d	; 61
     e3a:	de b7       	in	r29, 0x3e	; 62
     e3c:	9c 83       	std	Y+4, r25	; 0x04
     e3e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     e40:	8b 81       	ldd	r24, Y+3	; 0x03
     e42:	9c 81       	ldd	r25, Y+4	; 0x04
     e44:	fc 01       	movw	r30, r24
     e46:	80 85       	ldd	r24, Z+8	; 0x08
     e48:	91 85       	ldd	r25, Z+9	; 0x09
     e4a:	9a 83       	std	Y+2, r25	; 0x02
     e4c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     e4e:	8b 81       	ldd	r24, Y+3	; 0x03
     e50:	9c 81       	ldd	r25, Y+4	; 0x04
     e52:	fc 01       	movw	r30, r24
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	2b 81       	ldd	r18, Y+3	; 0x03
     e5a:	3c 81       	ldd	r19, Y+4	; 0x04
     e5c:	f9 01       	movw	r30, r18
     e5e:	24 81       	ldd	r18, Z+4	; 0x04
     e60:	35 81       	ldd	r19, Z+5	; 0x05
     e62:	fc 01       	movw	r30, r24
     e64:	35 83       	std	Z+5, r19	; 0x05
     e66:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     e68:	8b 81       	ldd	r24, Y+3	; 0x03
     e6a:	9c 81       	ldd	r25, Y+4	; 0x04
     e6c:	fc 01       	movw	r30, r24
     e6e:	84 81       	ldd	r24, Z+4	; 0x04
     e70:	95 81       	ldd	r25, Z+5	; 0x05
     e72:	2b 81       	ldd	r18, Y+3	; 0x03
     e74:	3c 81       	ldd	r19, Y+4	; 0x04
     e76:	f9 01       	movw	r30, r18
     e78:	22 81       	ldd	r18, Z+2	; 0x02
     e7a:	33 81       	ldd	r19, Z+3	; 0x03
     e7c:	fc 01       	movw	r30, r24
     e7e:	33 83       	std	Z+3, r19	; 0x03
     e80:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     e82:	89 81       	ldd	r24, Y+1	; 0x01
     e84:	9a 81       	ldd	r25, Y+2	; 0x02
     e86:	fc 01       	movw	r30, r24
     e88:	21 81       	ldd	r18, Z+1	; 0x01
     e8a:	32 81       	ldd	r19, Z+2	; 0x02
     e8c:	8b 81       	ldd	r24, Y+3	; 0x03
     e8e:	9c 81       	ldd	r25, Y+4	; 0x04
     e90:	28 17       	cp	r18, r24
     e92:	39 07       	cpc	r19, r25
     e94:	51 f4       	brne	.+20     	; 0xeaa <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     e96:	8b 81       	ldd	r24, Y+3	; 0x03
     e98:	9c 81       	ldd	r25, Y+4	; 0x04
     e9a:	fc 01       	movw	r30, r24
     e9c:	24 81       	ldd	r18, Z+4	; 0x04
     e9e:	35 81       	ldd	r19, Z+5	; 0x05
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	fc 01       	movw	r30, r24
     ea6:	32 83       	std	Z+2, r19	; 0x02
     ea8:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     eaa:	8b 81       	ldd	r24, Y+3	; 0x03
     eac:	9c 81       	ldd	r25, Y+4	; 0x04
     eae:	fc 01       	movw	r30, r24
     eb0:	11 86       	std	Z+9, r1	; 0x09
     eb2:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	9a 81       	ldd	r25, Y+2	; 0x02
     eb8:	fc 01       	movw	r30, r24
     eba:	80 81       	ld	r24, Z
     ebc:	2f ef       	ldi	r18, 0xFF	; 255
     ebe:	28 0f       	add	r18, r24
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     ec8:	89 81       	ldd	r24, Y+1	; 0x01
     eca:	9a 81       	ldd	r25, Y+2	; 0x02
     ecc:	fc 01       	movw	r30, r24
     ece:	80 81       	ld	r24, Z
}
     ed0:	0f 90       	pop	r0
     ed2:	0f 90       	pop	r0
     ed4:	0f 90       	pop	r0
     ed6:	0f 90       	pop	r0
     ed8:	df 91       	pop	r29
     eda:	cf 91       	pop	r28
     edc:	08 95       	ret

00000ede <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	cd b7       	in	r28, 0x3d	; 61
     ee4:	de b7       	in	r29, 0x3e	; 62
     ee6:	28 97       	sbiw	r28, 0x08	; 8
     ee8:	0f b6       	in	r0, 0x3f	; 63
     eea:	f8 94       	cli
     eec:	de bf       	out	0x3e, r29	; 62
     eee:	0f be       	out	0x3f, r0	; 63
     ef0:	cd bf       	out	0x3d, r28	; 61
     ef2:	9c 83       	std	Y+4, r25	; 0x04
     ef4:	8b 83       	std	Y+3, r24	; 0x03
     ef6:	7e 83       	std	Y+6, r23	; 0x06
     ef8:	6d 83       	std	Y+5, r22	; 0x05
     efa:	58 87       	std	Y+8, r21	; 0x08
     efc:	4f 83       	std	Y+7, r20	; 0x07
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	9c 81       	ldd	r25, Y+4	; 0x04
     f02:	21 e1       	ldi	r18, 0x11	; 17
     f04:	fc 01       	movw	r30, r24
     f06:	20 83       	st	Z, r18
     f08:	8b 81       	ldd	r24, Y+3	; 0x03
     f0a:	9c 81       	ldd	r25, Y+4	; 0x04
     f0c:	01 97       	sbiw	r24, 0x01	; 1
     f0e:	9c 83       	std	Y+4, r25	; 0x04
     f10:	8b 83       	std	Y+3, r24	; 0x03
     f12:	8b 81       	ldd	r24, Y+3	; 0x03
     f14:	9c 81       	ldd	r25, Y+4	; 0x04
     f16:	22 e2       	ldi	r18, 0x22	; 34
     f18:	fc 01       	movw	r30, r24
     f1a:	20 83       	st	Z, r18
     f1c:	8b 81       	ldd	r24, Y+3	; 0x03
     f1e:	9c 81       	ldd	r25, Y+4	; 0x04
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	23 e3       	ldi	r18, 0x33	; 51
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	9c 83       	std	Y+4, r25	; 0x04
     f38:	8b 83       	std	Y+3, r24	; 0x03
     f3a:	8d 81       	ldd	r24, Y+5	; 0x05
     f3c:	9e 81       	ldd	r25, Y+6	; 0x06
     f3e:	9a 83       	std	Y+2, r25	; 0x02
     f40:	89 83       	std	Y+1, r24	; 0x01
     f42:	29 81       	ldd	r18, Y+1	; 0x01
     f44:	8b 81       	ldd	r24, Y+3	; 0x03
     f46:	9c 81       	ldd	r25, Y+4	; 0x04
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
     f4c:	8b 81       	ldd	r24, Y+3	; 0x03
     f4e:	9c 81       	ldd	r25, Y+4	; 0x04
     f50:	01 97       	sbiw	r24, 0x01	; 1
     f52:	9c 83       	std	Y+4, r25	; 0x04
     f54:	8b 83       	std	Y+3, r24	; 0x03
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	89 2f       	mov	r24, r25
     f5c:	99 27       	eor	r25, r25
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	29 81       	ldd	r18, Y+1	; 0x01
     f64:	8b 81       	ldd	r24, Y+3	; 0x03
     f66:	9c 81       	ldd	r25, Y+4	; 0x04
     f68:	fc 01       	movw	r30, r24
     f6a:	20 83       	st	Z, r18
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	9c 83       	std	Y+4, r25	; 0x04
     f74:	8b 83       	std	Y+3, r24	; 0x03
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	fc 01       	movw	r30, r24
     f7c:	10 82       	st	Z, r1
     f7e:	8b 81       	ldd	r24, Y+3	; 0x03
     f80:	9c 81       	ldd	r25, Y+4	; 0x04
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9c 83       	std	Y+4, r25	; 0x04
     f86:	8b 83       	std	Y+3, r24	; 0x03
     f88:	8b 81       	ldd	r24, Y+3	; 0x03
     f8a:	9c 81       	ldd	r25, Y+4	; 0x04
     f8c:	20 e8       	ldi	r18, 0x80	; 128
     f8e:	fc 01       	movw	r30, r24
     f90:	20 83       	st	Z, r18
     f92:	8b 81       	ldd	r24, Y+3	; 0x03
     f94:	9c 81       	ldd	r25, Y+4	; 0x04
     f96:	01 97       	sbiw	r24, 0x01	; 1
     f98:	9c 83       	std	Y+4, r25	; 0x04
     f9a:	8b 83       	std	Y+3, r24	; 0x03
     f9c:	8b 81       	ldd	r24, Y+3	; 0x03
     f9e:	9c 81       	ldd	r25, Y+4	; 0x04
     fa0:	fc 01       	movw	r30, r24
     fa2:	10 82       	st	Z, r1
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	9c 81       	ldd	r25, Y+4	; 0x04
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	22 e0       	ldi	r18, 0x02	; 2
     fb4:	fc 01       	movw	r30, r24
     fb6:	20 83       	st	Z, r18
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	01 97       	sbiw	r24, 0x01	; 1
     fbe:	9c 83       	std	Y+4, r25	; 0x04
     fc0:	8b 83       	std	Y+3, r24	; 0x03
     fc2:	8b 81       	ldd	r24, Y+3	; 0x03
     fc4:	9c 81       	ldd	r25, Y+4	; 0x04
     fc6:	23 e0       	ldi	r18, 0x03	; 3
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
     fcc:	8b 81       	ldd	r24, Y+3	; 0x03
     fce:	9c 81       	ldd	r25, Y+4	; 0x04
     fd0:	01 97       	sbiw	r24, 0x01	; 1
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	8b 81       	ldd	r24, Y+3	; 0x03
     fd8:	9c 81       	ldd	r25, Y+4	; 0x04
     fda:	24 e0       	ldi	r18, 0x04	; 4
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
     fe0:	8b 81       	ldd	r24, Y+3	; 0x03
     fe2:	9c 81       	ldd	r25, Y+4	; 0x04
     fe4:	01 97       	sbiw	r24, 0x01	; 1
     fe6:	9c 83       	std	Y+4, r25	; 0x04
     fe8:	8b 83       	std	Y+3, r24	; 0x03
     fea:	8b 81       	ldd	r24, Y+3	; 0x03
     fec:	9c 81       	ldd	r25, Y+4	; 0x04
     fee:	25 e0       	ldi	r18, 0x05	; 5
     ff0:	fc 01       	movw	r30, r24
     ff2:	20 83       	st	Z, r18
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	9c 81       	ldd	r25, Y+4	; 0x04
     ff8:	01 97       	sbiw	r24, 0x01	; 1
     ffa:	9c 83       	std	Y+4, r25	; 0x04
     ffc:	8b 83       	std	Y+3, r24	; 0x03
     ffe:	8b 81       	ldd	r24, Y+3	; 0x03
    1000:	9c 81       	ldd	r25, Y+4	; 0x04
    1002:	26 e0       	ldi	r18, 0x06	; 6
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
    1008:	8b 81       	ldd	r24, Y+3	; 0x03
    100a:	9c 81       	ldd	r25, Y+4	; 0x04
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	9c 83       	std	Y+4, r25	; 0x04
    1010:	8b 83       	std	Y+3, r24	; 0x03
    1012:	8b 81       	ldd	r24, Y+3	; 0x03
    1014:	9c 81       	ldd	r25, Y+4	; 0x04
    1016:	27 e0       	ldi	r18, 0x07	; 7
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
    101c:	8b 81       	ldd	r24, Y+3	; 0x03
    101e:	9c 81       	ldd	r25, Y+4	; 0x04
    1020:	01 97       	sbiw	r24, 0x01	; 1
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
    1026:	8b 81       	ldd	r24, Y+3	; 0x03
    1028:	9c 81       	ldd	r25, Y+4	; 0x04
    102a:	28 e0       	ldi	r18, 0x08	; 8
    102c:	fc 01       	movw	r30, r24
    102e:	20 83       	st	Z, r18
    1030:	8b 81       	ldd	r24, Y+3	; 0x03
    1032:	9c 81       	ldd	r25, Y+4	; 0x04
    1034:	01 97       	sbiw	r24, 0x01	; 1
    1036:	9c 83       	std	Y+4, r25	; 0x04
    1038:	8b 83       	std	Y+3, r24	; 0x03
    103a:	8b 81       	ldd	r24, Y+3	; 0x03
    103c:	9c 81       	ldd	r25, Y+4	; 0x04
    103e:	29 e0       	ldi	r18, 0x09	; 9
    1040:	fc 01       	movw	r30, r24
    1042:	20 83       	st	Z, r18
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	01 97       	sbiw	r24, 0x01	; 1
    104a:	9c 83       	std	Y+4, r25	; 0x04
    104c:	8b 83       	std	Y+3, r24	; 0x03
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	20 e1       	ldi	r18, 0x10	; 16
    1054:	fc 01       	movw	r30, r24
    1056:	20 83       	st	Z, r18
    1058:	8b 81       	ldd	r24, Y+3	; 0x03
    105a:	9c 81       	ldd	r25, Y+4	; 0x04
    105c:	01 97       	sbiw	r24, 0x01	; 1
    105e:	9c 83       	std	Y+4, r25	; 0x04
    1060:	8b 83       	std	Y+3, r24	; 0x03
    1062:	8b 81       	ldd	r24, Y+3	; 0x03
    1064:	9c 81       	ldd	r25, Y+4	; 0x04
    1066:	21 e1       	ldi	r18, 0x11	; 17
    1068:	fc 01       	movw	r30, r24
    106a:	20 83       	st	Z, r18
    106c:	8b 81       	ldd	r24, Y+3	; 0x03
    106e:	9c 81       	ldd	r25, Y+4	; 0x04
    1070:	01 97       	sbiw	r24, 0x01	; 1
    1072:	9c 83       	std	Y+4, r25	; 0x04
    1074:	8b 83       	std	Y+3, r24	; 0x03
    1076:	8b 81       	ldd	r24, Y+3	; 0x03
    1078:	9c 81       	ldd	r25, Y+4	; 0x04
    107a:	22 e1       	ldi	r18, 0x12	; 18
    107c:	fc 01       	movw	r30, r24
    107e:	20 83       	st	Z, r18
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	9c 81       	ldd	r25, Y+4	; 0x04
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9c 83       	std	Y+4, r25	; 0x04
    1088:	8b 83       	std	Y+3, r24	; 0x03
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	23 e1       	ldi	r18, 0x13	; 19
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	01 97       	sbiw	r24, 0x01	; 1
    109a:	9c 83       	std	Y+4, r25	; 0x04
    109c:	8b 83       	std	Y+3, r24	; 0x03
    109e:	8b 81       	ldd	r24, Y+3	; 0x03
    10a0:	9c 81       	ldd	r25, Y+4	; 0x04
    10a2:	24 e1       	ldi	r18, 0x14	; 20
    10a4:	fc 01       	movw	r30, r24
    10a6:	20 83       	st	Z, r18
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	01 97       	sbiw	r24, 0x01	; 1
    10ae:	9c 83       	std	Y+4, r25	; 0x04
    10b0:	8b 83       	std	Y+3, r24	; 0x03
    10b2:	8b 81       	ldd	r24, Y+3	; 0x03
    10b4:	9c 81       	ldd	r25, Y+4	; 0x04
    10b6:	25 e1       	ldi	r18, 0x15	; 21
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
    10bc:	8b 81       	ldd	r24, Y+3	; 0x03
    10be:	9c 81       	ldd	r25, Y+4	; 0x04
    10c0:	01 97       	sbiw	r24, 0x01	; 1
    10c2:	9c 83       	std	Y+4, r25	; 0x04
    10c4:	8b 83       	std	Y+3, r24	; 0x03
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ca:	26 e1       	ldi	r18, 0x16	; 22
    10cc:	fc 01       	movw	r30, r24
    10ce:	20 83       	st	Z, r18
    10d0:	8b 81       	ldd	r24, Y+3	; 0x03
    10d2:	9c 81       	ldd	r25, Y+4	; 0x04
    10d4:	01 97       	sbiw	r24, 0x01	; 1
    10d6:	9c 83       	std	Y+4, r25	; 0x04
    10d8:	8b 83       	std	Y+3, r24	; 0x03
    10da:	8b 81       	ldd	r24, Y+3	; 0x03
    10dc:	9c 81       	ldd	r25, Y+4	; 0x04
    10de:	27 e1       	ldi	r18, 0x17	; 23
    10e0:	fc 01       	movw	r30, r24
    10e2:	20 83       	st	Z, r18
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	9c 81       	ldd	r25, Y+4	; 0x04
    10e8:	01 97       	sbiw	r24, 0x01	; 1
    10ea:	9c 83       	std	Y+4, r25	; 0x04
    10ec:	8b 83       	std	Y+3, r24	; 0x03
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	28 e1       	ldi	r18, 0x18	; 24
    10f4:	fc 01       	movw	r30, r24
    10f6:	20 83       	st	Z, r18
    10f8:	8b 81       	ldd	r24, Y+3	; 0x03
    10fa:	9c 81       	ldd	r25, Y+4	; 0x04
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9c 83       	std	Y+4, r25	; 0x04
    1100:	8b 83       	std	Y+3, r24	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	29 e1       	ldi	r18, 0x19	; 25
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
    110c:	8b 81       	ldd	r24, Y+3	; 0x03
    110e:	9c 81       	ldd	r25, Y+4	; 0x04
    1110:	01 97       	sbiw	r24, 0x01	; 1
    1112:	9c 83       	std	Y+4, r25	; 0x04
    1114:	8b 83       	std	Y+3, r24	; 0x03
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	20 e2       	ldi	r18, 0x20	; 32
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9c 83       	std	Y+4, r25	; 0x04
    1128:	8b 83       	std	Y+3, r24	; 0x03
    112a:	8b 81       	ldd	r24, Y+3	; 0x03
    112c:	9c 81       	ldd	r25, Y+4	; 0x04
    112e:	21 e2       	ldi	r18, 0x21	; 33
    1130:	fc 01       	movw	r30, r24
    1132:	20 83       	st	Z, r18
    1134:	8b 81       	ldd	r24, Y+3	; 0x03
    1136:	9c 81       	ldd	r25, Y+4	; 0x04
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	9c 83       	std	Y+4, r25	; 0x04
    113c:	8b 83       	std	Y+3, r24	; 0x03
    113e:	8b 81       	ldd	r24, Y+3	; 0x03
    1140:	9c 81       	ldd	r25, Y+4	; 0x04
    1142:	22 e2       	ldi	r18, 0x22	; 34
    1144:	fc 01       	movw	r30, r24
    1146:	20 83       	st	Z, r18
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	01 97       	sbiw	r24, 0x01	; 1
    114e:	9c 83       	std	Y+4, r25	; 0x04
    1150:	8b 83       	std	Y+3, r24	; 0x03
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	23 e2       	ldi	r18, 0x23	; 35
    1158:	fc 01       	movw	r30, r24
    115a:	20 83       	st	Z, r18
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	9c 83       	std	Y+4, r25	; 0x04
    1164:	8b 83       	std	Y+3, r24	; 0x03
    1166:	8f 81       	ldd	r24, Y+7	; 0x07
    1168:	98 85       	ldd	r25, Y+8	; 0x08
    116a:	9a 83       	std	Y+2, r25	; 0x02
    116c:	89 83       	std	Y+1, r24	; 0x01
    116e:	29 81       	ldd	r18, Y+1	; 0x01
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	fc 01       	movw	r30, r24
    1176:	20 83       	st	Z, r18
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	89 2f       	mov	r24, r25
    1188:	99 27       	eor	r25, r25
    118a:	9a 83       	std	Y+2, r25	; 0x02
    118c:	89 83       	std	Y+1, r24	; 0x01
    118e:	29 81       	ldd	r18, Y+1	; 0x01
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	fc 01       	movw	r30, r24
    1196:	20 83       	st	Z, r18
    1198:	8b 81       	ldd	r24, Y+3	; 0x03
    119a:	9c 81       	ldd	r25, Y+4	; 0x04
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	9c 83       	std	Y+4, r25	; 0x04
    11a0:	8b 83       	std	Y+3, r24	; 0x03
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	26 e2       	ldi	r18, 0x26	; 38
    11a8:	fc 01       	movw	r30, r24
    11aa:	20 83       	st	Z, r18
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	01 97       	sbiw	r24, 0x01	; 1
    11b2:	9c 83       	std	Y+4, r25	; 0x04
    11b4:	8b 83       	std	Y+3, r24	; 0x03
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	27 e2       	ldi	r18, 0x27	; 39
    11bc:	fc 01       	movw	r30, r24
    11be:	20 83       	st	Z, r18
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	9c 83       	std	Y+4, r25	; 0x04
    11c8:	8b 83       	std	Y+3, r24	; 0x03
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	28 e2       	ldi	r18, 0x28	; 40
    11d0:	fc 01       	movw	r30, r24
    11d2:	20 83       	st	Z, r18
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	01 97       	sbiw	r24, 0x01	; 1
    11da:	9c 83       	std	Y+4, r25	; 0x04
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	29 e2       	ldi	r18, 0x29	; 41
    11e4:	fc 01       	movw	r30, r24
    11e6:	20 83       	st	Z, r18
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	9c 83       	std	Y+4, r25	; 0x04
    11f0:	8b 83       	std	Y+3, r24	; 0x03
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	20 e3       	ldi	r18, 0x30	; 48
    11f8:	fc 01       	movw	r30, r24
    11fa:	20 83       	st	Z, r18
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	01 97       	sbiw	r24, 0x01	; 1
    1202:	9c 83       	std	Y+4, r25	; 0x04
    1204:	8b 83       	std	Y+3, r24	; 0x03
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	21 e3       	ldi	r18, 0x31	; 49
    120c:	fc 01       	movw	r30, r24
    120e:	20 83       	st	Z, r18
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	01 97       	sbiw	r24, 0x01	; 1
    1216:	9c 83       	std	Y+4, r25	; 0x04
    1218:	8b 83       	std	Y+3, r24	; 0x03
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	28 96       	adiw	r28, 0x08	; 8
    1220:	0f b6       	in	r0, 0x3f	; 63
    1222:	f8 94       	cli
    1224:	de bf       	out	0x3e, r29	; 62
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	cd bf       	out	0x3d, r28	; 61
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	08 95       	ret

00001230 <xPortStartScheduler>:
    1230:	cf 93       	push	r28
    1232:	df 93       	push	r29
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	0e 94 03 0a 	call	0x1406	; 0x1406 <prvSetupTimerInterrupt>
    123c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1240:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1244:	cd 91       	ld	r28, X+
    1246:	cd bf       	out	0x3d, r28	; 61
    1248:	dd 91       	ld	r29, X+
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	ff 91       	pop	r31
    124e:	ef 91       	pop	r30
    1250:	df 91       	pop	r29
    1252:	cf 91       	pop	r28
    1254:	bf 91       	pop	r27
    1256:	af 91       	pop	r26
    1258:	9f 91       	pop	r25
    125a:	8f 91       	pop	r24
    125c:	7f 91       	pop	r23
    125e:	6f 91       	pop	r22
    1260:	5f 91       	pop	r21
    1262:	4f 91       	pop	r20
    1264:	3f 91       	pop	r19
    1266:	2f 91       	pop	r18
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	ff 90       	pop	r15
    126e:	ef 90       	pop	r14
    1270:	df 90       	pop	r13
    1272:	cf 90       	pop	r12
    1274:	bf 90       	pop	r11
    1276:	af 90       	pop	r10
    1278:	9f 90       	pop	r9
    127a:	8f 90       	pop	r8
    127c:	7f 90       	pop	r7
    127e:	6f 90       	pop	r6
    1280:	5f 90       	pop	r5
    1282:	4f 90       	pop	r4
    1284:	3f 90       	pop	r3
    1286:	2f 90       	pop	r2
    1288:	1f 90       	pop	r1
    128a:	0f 90       	pop	r0
    128c:	0f be       	out	0x3f, r0	; 63
    128e:	0f 90       	pop	r0
    1290:	08 95       	ret
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	08 95       	ret

0000129a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    129a:	0f 92       	push	r0
    129c:	0f b6       	in	r0, 0x3f	; 63
    129e:	f8 94       	cli
    12a0:	0f 92       	push	r0
    12a2:	1f 92       	push	r1
    12a4:	11 24       	eor	r1, r1
    12a6:	2f 92       	push	r2
    12a8:	3f 92       	push	r3
    12aa:	4f 92       	push	r4
    12ac:	5f 92       	push	r5
    12ae:	6f 92       	push	r6
    12b0:	7f 92       	push	r7
    12b2:	8f 92       	push	r8
    12b4:	9f 92       	push	r9
    12b6:	af 92       	push	r10
    12b8:	bf 92       	push	r11
    12ba:	cf 92       	push	r12
    12bc:	df 92       	push	r13
    12be:	ef 92       	push	r14
    12c0:	ff 92       	push	r15
    12c2:	0f 93       	push	r16
    12c4:	1f 93       	push	r17
    12c6:	2f 93       	push	r18
    12c8:	3f 93       	push	r19
    12ca:	4f 93       	push	r20
    12cc:	5f 93       	push	r21
    12ce:	6f 93       	push	r22
    12d0:	7f 93       	push	r23
    12d2:	8f 93       	push	r24
    12d4:	9f 93       	push	r25
    12d6:	af 93       	push	r26
    12d8:	bf 93       	push	r27
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	ef 93       	push	r30
    12e0:	ff 93       	push	r31
    12e2:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    12e6:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    12ea:	0d b6       	in	r0, 0x3d	; 61
    12ec:	0d 92       	st	X+, r0
    12ee:	0e b6       	in	r0, 0x3e	; 62
    12f0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    12f2:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    12f6:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    12fa:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    12fe:	cd 91       	ld	r28, X+
    1300:	cd bf       	out	0x3d, r28	; 61
    1302:	dd 91       	ld	r29, X+
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	ff 91       	pop	r31
    1308:	ef 91       	pop	r30
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	bf 91       	pop	r27
    1310:	af 91       	pop	r26
    1312:	9f 91       	pop	r25
    1314:	8f 91       	pop	r24
    1316:	7f 91       	pop	r23
    1318:	6f 91       	pop	r22
    131a:	5f 91       	pop	r21
    131c:	4f 91       	pop	r20
    131e:	3f 91       	pop	r19
    1320:	2f 91       	pop	r18
    1322:	1f 91       	pop	r17
    1324:	0f 91       	pop	r16
    1326:	ff 90       	pop	r15
    1328:	ef 90       	pop	r14
    132a:	df 90       	pop	r13
    132c:	cf 90       	pop	r12
    132e:	bf 90       	pop	r11
    1330:	af 90       	pop	r10
    1332:	9f 90       	pop	r9
    1334:	8f 90       	pop	r8
    1336:	7f 90       	pop	r7
    1338:	6f 90       	pop	r6
    133a:	5f 90       	pop	r5
    133c:	4f 90       	pop	r4
    133e:	3f 90       	pop	r3
    1340:	2f 90       	pop	r2
    1342:	1f 90       	pop	r1
    1344:	0f 90       	pop	r0
    1346:	0f be       	out	0x3f, r0	; 63
    1348:	0f 90       	pop	r0

	asm volatile ( "ret" );
    134a:	08 95       	ret

0000134c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    134c:	0f 92       	push	r0
    134e:	0f b6       	in	r0, 0x3f	; 63
    1350:	f8 94       	cli
    1352:	0f 92       	push	r0
    1354:	1f 92       	push	r1
    1356:	11 24       	eor	r1, r1
    1358:	2f 92       	push	r2
    135a:	3f 92       	push	r3
    135c:	4f 92       	push	r4
    135e:	5f 92       	push	r5
    1360:	6f 92       	push	r6
    1362:	7f 92       	push	r7
    1364:	8f 92       	push	r8
    1366:	9f 92       	push	r9
    1368:	af 92       	push	r10
    136a:	bf 92       	push	r11
    136c:	cf 92       	push	r12
    136e:	df 92       	push	r13
    1370:	ef 92       	push	r14
    1372:	ff 92       	push	r15
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	2f 93       	push	r18
    137a:	3f 93       	push	r19
    137c:	4f 93       	push	r20
    137e:	5f 93       	push	r21
    1380:	6f 93       	push	r22
    1382:	7f 93       	push	r23
    1384:	8f 93       	push	r24
    1386:	9f 93       	push	r25
    1388:	af 93       	push	r26
    138a:	bf 93       	push	r27
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	ef 93       	push	r30
    1392:	ff 93       	push	r31
    1394:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1398:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    139c:	0d b6       	in	r0, 0x3d	; 61
    139e:	0d 92       	st	X+, r0
    13a0:	0e b6       	in	r0, 0x3e	; 62
    13a2:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    13a4:	0e 94 ef 14 	call	0x29de	; 0x29de <xTaskIncrementTick>
    13a8:	88 23       	and	r24, r24
    13aa:	11 f0       	breq	.+4      	; 0x13b0 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    13ac:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    13b0:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    13b4:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    13b8:	cd 91       	ld	r28, X+
    13ba:	cd bf       	out	0x3d, r28	; 61
    13bc:	dd 91       	ld	r29, X+
    13be:	de bf       	out	0x3e, r29	; 62
    13c0:	ff 91       	pop	r31
    13c2:	ef 91       	pop	r30
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	bf 91       	pop	r27
    13ca:	af 91       	pop	r26
    13cc:	9f 91       	pop	r25
    13ce:	8f 91       	pop	r24
    13d0:	7f 91       	pop	r23
    13d2:	6f 91       	pop	r22
    13d4:	5f 91       	pop	r21
    13d6:	4f 91       	pop	r20
    13d8:	3f 91       	pop	r19
    13da:	2f 91       	pop	r18
    13dc:	1f 91       	pop	r17
    13de:	0f 91       	pop	r16
    13e0:	ff 90       	pop	r15
    13e2:	ef 90       	pop	r14
    13e4:	df 90       	pop	r13
    13e6:	cf 90       	pop	r12
    13e8:	bf 90       	pop	r11
    13ea:	af 90       	pop	r10
    13ec:	9f 90       	pop	r9
    13ee:	8f 90       	pop	r8
    13f0:	7f 90       	pop	r7
    13f2:	6f 90       	pop	r6
    13f4:	5f 90       	pop	r5
    13f6:	4f 90       	pop	r4
    13f8:	3f 90       	pop	r3
    13fa:	2f 90       	pop	r2
    13fc:	1f 90       	pop	r1
    13fe:	0f 90       	pop	r0
    1400:	0f be       	out	0x3f, r0	; 63
    1402:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1404:	08 95       	ret

00001406 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	00 d0       	rcall	.+0      	; 0x140c <prvSetupTimerInterrupt+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <prvSetupTimerInterrupt+0x8>
    140e:	00 d0       	rcall	.+0      	; 0x1410 <prvSetupTimerInterrupt+0xa>
    1410:	cd b7       	in	r28, 0x3d	; 61
    1412:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1414:	89 e9       	ldi	r24, 0x99	; 153
    1416:	99 e3       	ldi	r25, 0x39	; 57
    1418:	a0 e0       	ldi	r26, 0x00	; 0
    141a:	b0 e0       	ldi	r27, 0x00	; 0
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	9a 83       	std	Y+2, r25	; 0x02
    1420:	ab 83       	std	Y+3, r26	; 0x03
    1422:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	ab 81       	ldd	r26, Y+3	; 0x03
    142a:	bc 81       	ldd	r27, Y+4	; 0x04
    142c:	68 94       	set
    142e:	15 f8       	bld	r1, 5
    1430:	b6 95       	lsr	r27
    1432:	a7 95       	ror	r26
    1434:	97 95       	ror	r25
    1436:	87 95       	ror	r24
    1438:	16 94       	lsr	r1
    143a:	d1 f7       	brne	.-12     	; 0x1430 <prvSetupTimerInterrupt+0x2a>
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	9a 83       	std	Y+2, r25	; 0x02
    1440:	ab 83       	std	Y+3, r26	; 0x03
    1442:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1444:	89 81       	ldd	r24, Y+1	; 0x01
    1446:	9a 81       	ldd	r25, Y+2	; 0x02
    1448:	ab 81       	ldd	r26, Y+3	; 0x03
    144a:	bc 81       	ldd	r27, Y+4	; 0x04
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	a1 09       	sbc	r26, r1
    1450:	b1 09       	sbc	r27, r1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	ab 83       	std	Y+3, r26	; 0x03
    1458:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    145a:	89 81       	ldd	r24, Y+1	; 0x01
    145c:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	9a 81       	ldd	r25, Y+2	; 0x02
    1462:	ab 81       	ldd	r26, Y+3	; 0x03
    1464:	bc 81       	ldd	r27, Y+4	; 0x04
    1466:	89 2f       	mov	r24, r25
    1468:	9a 2f       	mov	r25, r26
    146a:	ab 2f       	mov	r26, r27
    146c:	bb 27       	eor	r27, r27
    146e:	89 83       	std	Y+1, r24	; 0x01
    1470:	9a 83       	std	Y+2, r25	; 0x02
    1472:	ab 83       	std	Y+3, r26	; 0x03
    1474:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1476:	89 81       	ldd	r24, Y+1	; 0x01
    1478:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    147a:	89 e8       	ldi	r24, 0x89	; 137
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	2e 81       	ldd	r18, Y+6	; 0x06
    1480:	fc 01       	movw	r30, r24
    1482:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1484:	88 e8       	ldi	r24, 0x88	; 136
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	2d 81       	ldd	r18, Y+5	; 0x05
    148a:	fc 01       	movw	r30, r24
    148c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    148e:	8b e0       	ldi	r24, 0x0B	; 11
    1490:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1492:	81 e8       	ldi	r24, 0x81	; 129
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	2d 81       	ldd	r18, Y+5	; 0x05
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    149c:	8f e6       	ldi	r24, 0x6F	; 111
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	fc 01       	movw	r30, r24
    14a2:	80 81       	ld	r24, Z
    14a4:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    14a6:	8d 81       	ldd	r24, Y+5	; 0x05
    14a8:	82 60       	ori	r24, 0x02	; 2
    14aa:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    14ac:	8f e6       	ldi	r24, 0x6F	; 111
    14ae:	90 e0       	ldi	r25, 0x00	; 0
    14b0:	2d 81       	ldd	r18, Y+5	; 0x05
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
}
    14b6:	26 96       	adiw	r28, 0x06	; 6
    14b8:	0f b6       	in	r0, 0x3f	; 63
    14ba:	f8 94       	cli
    14bc:	de bf       	out	0x3e, r29	; 62
    14be:	0f be       	out	0x3f, r0	; 63
    14c0:	cd bf       	out	0x3d, r28	; 61
    14c2:	df 91       	pop	r29
    14c4:	cf 91       	pop	r28
    14c6:	08 95       	ret

000014c8 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    14c8:	0e 94 a6 09 	call	0x134c	; 0x134c <vPortYieldFromTick>
		asm volatile ( "reti" );
    14cc:	18 95       	reti

000014ce <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    14ce:	cf 93       	push	r28
    14d0:	df 93       	push	r29
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <pvPortMalloc+0x6>
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <pvPortMalloc+0x8>
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
    14da:	9c 83       	std	Y+4, r25	; 0x04
    14dc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    14de:	1a 82       	std	Y+2, r1	; 0x02
    14e0:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    14e2:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    14e6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    14ea:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    14ee:	89 2b       	or	r24, r25
    14f0:	31 f4       	brne	.+12     	; 0x14fe <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    14f2:	81 e8       	ldi	r24, 0x81	; 129
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <pucAlignedHeap.1965+0x1>
    14fa:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    14fe:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    1502:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1506:	8b 81       	ldd	r24, Y+3	; 0x03
    1508:	9c 81       	ldd	r25, Y+4	; 0x04
    150a:	82 0f       	add	r24, r18
    150c:	93 1f       	adc	r25, r19
    150e:	87 3e       	cpi	r24, 0xE7	; 231
    1510:	93 40       	sbci	r25, 0x03	; 3
    1512:	38 f5       	brcc	.+78     	; 0x1562 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1514:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    1518:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    151c:	8b 81       	ldd	r24, Y+3	; 0x03
    151e:	9c 81       	ldd	r25, Y+4	; 0x04
    1520:	28 0f       	add	r18, r24
    1522:	39 1f       	adc	r19, r25
    1524:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    1528:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    152c:	82 17       	cp	r24, r18
    152e:	93 07       	cpc	r25, r19
    1530:	c0 f4       	brcc	.+48     	; 0x1562 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1532:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    1536:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    153a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    153e:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1542:	82 0f       	add	r24, r18
    1544:	93 1f       	adc	r25, r19
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    154a:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    154e:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1552:	8b 81       	ldd	r24, Y+3	; 0x03
    1554:	9c 81       	ldd	r25, Y+4	; 0x04
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <xNextFreeByte+0x1>
    155e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1562:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	9a 81       	ldd	r25, Y+2	; 0x02
}
    156a:	0f 90       	pop	r0
    156c:	0f 90       	pop	r0
    156e:	0f 90       	pop	r0
    1570:	0f 90       	pop	r0
    1572:	df 91       	pop	r29
    1574:	cf 91       	pop	r28
    1576:	08 95       	ret

00001578 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1578:	cf 93       	push	r28
    157a:	df 93       	push	r29
    157c:	00 d0       	rcall	.+0      	; 0x157e <vPortFree+0x6>
    157e:	cd b7       	in	r28, 0x3d	; 61
    1580:	de b7       	in	r29, 0x3e	; 62
    1582:	9a 83       	std	Y+2, r25	; 0x02
    1584:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	df 91       	pop	r29
    158c:	cf 91       	pop	r28
    158e:	08 95       	ret

00001590 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1590:	8f 92       	push	r8
    1592:	9f 92       	push	r9
    1594:	af 92       	push	r10
    1596:	bf 92       	push	r11
    1598:	cf 92       	push	r12
    159a:	df 92       	push	r13
    159c:	ef 92       	push	r14
    159e:	0f 93       	push	r16
    15a0:	1f 93       	push	r17
    15a2:	cf 93       	push	r28
    15a4:	df 93       	push	r29
    15a6:	cd b7       	in	r28, 0x3d	; 61
    15a8:	de b7       	in	r29, 0x3e	; 62
    15aa:	65 97       	sbiw	r28, 0x15	; 21
    15ac:	0f b6       	in	r0, 0x3f	; 63
    15ae:	f8 94       	cli
    15b0:	de bf       	out	0x3e, r29	; 62
    15b2:	0f be       	out	0x3f, r0	; 63
    15b4:	cd bf       	out	0x3d, r28	; 61
    15b6:	8c 83       	std	Y+4, r24	; 0x04
    15b8:	4d 83       	std	Y+5, r20	; 0x05
    15ba:	5e 83       	std	Y+6, r21	; 0x06
    15bc:	6f 83       	std	Y+7, r22	; 0x07
    15be:	78 87       	std	Y+8, r23	; 0x08
    15c0:	29 87       	std	Y+9, r18	; 0x09
    15c2:	0a 87       	std	Y+10, r16	; 0x0a
    15c4:	eb 86       	std	Y+11, r14	; 0x0b
    15c6:	dd 86       	std	Y+13, r13	; 0x0d
    15c8:	cc 86       	std	Y+12, r12	; 0x0c
    15ca:	bf 86       	std	Y+15, r11	; 0x0f
    15cc:	ae 86       	std	Y+14, r10	; 0x0e
    15ce:	99 8a       	std	Y+17, r9	; 0x11
    15d0:	88 8a       	std	Y+16, r8	; 0x10
    15d2:	88 e0       	ldi	r24, 0x08	; 8
    15d4:	90 e0       	ldi	r25, 0x00	; 0
    15d6:	0e 94 35 1a 	call	0x346a	; 0x346a <malloc>
    15da:	9a 83       	std	Y+2, r25	; 0x02
    15dc:	89 83       	std	Y+1, r24	; 0x01
    15de:	8c 81       	ldd	r24, Y+4	; 0x04
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	84 59       	subi	r24, 0x94	; 148
    15ea:	9a 4f       	sbci	r25, 0xFA	; 250
    15ec:	29 81       	ldd	r18, Y+1	; 0x01
    15ee:	3a 81       	ldd	r19, Y+2	; 0x02
    15f0:	fc 01       	movw	r30, r24
    15f2:	31 83       	std	Z+1, r19	; 0x01
    15f4:	20 83       	st	Z, r18
    15f6:	8c 81       	ldd	r24, Y+4	; 0x04
    15f8:	88 2f       	mov	r24, r24
    15fa:	90 e0       	ldi	r25, 0x00	; 0
    15fc:	88 0f       	add	r24, r24
    15fe:	99 1f       	adc	r25, r25
    1600:	88 5d       	subi	r24, 0xD8	; 216
    1602:	9e 4f       	sbci	r25, 0xFE	; 254
    1604:	fc 01       	movw	r30, r24
    1606:	20 81       	ld	r18, Z
    1608:	31 81       	ldd	r19, Z+1	; 0x01
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	9a 81       	ldd	r25, Y+2	; 0x02
    160e:	fc 01       	movw	r30, r24
    1610:	31 83       	std	Z+1, r19	; 0x01
    1612:	20 83       	st	Z, r18
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	9a 81       	ldd	r25, Y+2	; 0x02
    1618:	2e 85       	ldd	r18, Y+14	; 0x0e
    161a:	3f 85       	ldd	r19, Y+15	; 0x0f
    161c:	fc 01       	movw	r30, r24
    161e:	33 83       	std	Z+3, r19	; 0x03
    1620:	22 83       	std	Z+2, r18	; 0x02
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	2c 85       	ldd	r18, Y+12	; 0x0c
    1628:	3d 85       	ldd	r19, Y+13	; 0x0d
    162a:	fc 01       	movw	r30, r24
    162c:	35 83       	std	Z+5, r19	; 0x05
    162e:	24 83       	std	Z+4, r18	; 0x04
    1630:	89 81       	ldd	r24, Y+1	; 0x01
    1632:	9a 81       	ldd	r25, Y+2	; 0x02
    1634:	28 89       	ldd	r18, Y+16	; 0x10
    1636:	39 89       	ldd	r19, Y+17	; 0x11
    1638:	fc 01       	movw	r30, r24
    163a:	37 83       	std	Z+7, r19	; 0x07
    163c:	26 83       	std	Z+6, r18	; 0x06
    163e:	8f e5       	ldi	r24, 0x5F	; 95
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	8b 83       	std	Y+3, r24	; 0x03
    1648:	f8 94       	cli
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	9a 81       	ldd	r25, Y+2	; 0x02
    164e:	fc 01       	movw	r30, r24
    1650:	80 81       	ld	r24, Z
    1652:	91 81       	ldd	r25, Z+1	; 0x01
    1654:	06 97       	sbiw	r24, 0x06	; 6
    1656:	29 81       	ldd	r18, Y+1	; 0x01
    1658:	3a 81       	ldd	r19, Y+2	; 0x02
    165a:	f9 01       	movw	r30, r18
    165c:	20 81       	ld	r18, Z
    165e:	31 81       	ldd	r19, Z+1	; 0x01
    1660:	26 50       	subi	r18, 0x06	; 6
    1662:	31 09       	sbc	r19, r1
    1664:	f9 01       	movw	r30, r18
    1666:	20 81       	ld	r18, Z
    1668:	22 60       	ori	r18, 0x02	; 2
    166a:	fc 01       	movw	r30, r24
    166c:	20 83       	st	Z, r18
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	fc 01       	movw	r30, r24
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	8c 01       	movw	r16, r24
    167a:	02 50       	subi	r16, 0x02	; 2
    167c:	11 09       	sbc	r17, r1
    167e:	8d 81       	ldd	r24, Y+5	; 0x05
    1680:	9e 81       	ldd	r25, Y+6	; 0x06
    1682:	af 81       	ldd	r26, Y+7	; 0x07
    1684:	b8 85       	ldd	r27, Y+8	; 0x08
    1686:	88 0f       	add	r24, r24
    1688:	99 1f       	adc	r25, r25
    168a:	aa 1f       	adc	r26, r26
    168c:	bb 1f       	adc	r27, r27
    168e:	88 0f       	add	r24, r24
    1690:	99 1f       	adc	r25, r25
    1692:	aa 1f       	adc	r26, r26
    1694:	bb 1f       	adc	r27, r27
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	aa 1f       	adc	r26, r26
    169c:	bb 1f       	adc	r27, r27
    169e:	9c 01       	movw	r18, r24
    16a0:	ad 01       	movw	r20, r26
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	a1 ee       	ldi	r26, 0xE1	; 225
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	bc 01       	movw	r22, r24
    16ac:	cd 01       	movw	r24, r26
    16ae:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__udivmodsi4>
    16b2:	da 01       	movw	r26, r20
    16b4:	c9 01       	movw	r24, r18
    16b6:	81 50       	subi	r24, 0x01	; 1
    16b8:	f8 01       	movw	r30, r16
    16ba:	80 83       	st	Z, r24
    16bc:	89 81       	ldd	r24, Y+1	; 0x01
    16be:	9a 81       	ldd	r25, Y+2	; 0x02
    16c0:	fc 01       	movw	r30, r24
    16c2:	80 81       	ld	r24, Z
    16c4:	91 81       	ldd	r25, Z+1	; 0x01
    16c6:	05 97       	sbiw	r24, 0x05	; 5
    16c8:	28 e9       	ldi	r18, 0x98	; 152
    16ca:	fc 01       	movw	r30, r24
    16cc:	20 83       	st	Z, r18
    16ce:	89 81       	ldd	r24, Y+1	; 0x01
    16d0:	9a 81       	ldd	r25, Y+2	; 0x02
    16d2:	fc 01       	movw	r30, r24
    16d4:	80 81       	ld	r24, Z
    16d6:	91 81       	ldd	r25, Z+1	; 0x01
    16d8:	04 97       	sbiw	r24, 0x04	; 4
    16da:	26 e0       	ldi	r18, 0x06	; 6
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
    16e0:	8f e5       	ldi	r24, 0x5F	; 95
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	2b 81       	ldd	r18, Y+3	; 0x03
    16e6:	fc 01       	movw	r30, r24
    16e8:	20 83       	st	Z, r18
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	65 96       	adiw	r28, 0x15	; 21
    16f0:	0f b6       	in	r0, 0x3f	; 63
    16f2:	f8 94       	cli
    16f4:	de bf       	out	0x3e, r29	; 62
    16f6:	0f be       	out	0x3f, r0	; 63
    16f8:	cd bf       	out	0x3d, r28	; 61
    16fa:	df 91       	pop	r29
    16fc:	cf 91       	pop	r28
    16fe:	1f 91       	pop	r17
    1700:	0f 91       	pop	r16
    1702:	ef 90       	pop	r14
    1704:	df 90       	pop	r13
    1706:	cf 90       	pop	r12
    1708:	bf 90       	pop	r11
    170a:	af 90       	pop	r10
    170c:	9f 90       	pop	r9
    170e:	8f 90       	pop	r8
    1710:	08 95       	ret

00001712 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1712:	1f 92       	push	r1
    1714:	0f 92       	push	r0
    1716:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    171a:	0f 92       	push	r0
    171c:	11 24       	eor	r1, r1
    171e:	2f 93       	push	r18
    1720:	3f 93       	push	r19
    1722:	4f 93       	push	r20
    1724:	5f 93       	push	r21
    1726:	6f 93       	push	r22
    1728:	7f 93       	push	r23
    172a:	8f 93       	push	r24
    172c:	9f 93       	push	r25
    172e:	af 93       	push	r26
    1730:	bf 93       	push	r27
    1732:	ef 93       	push	r30
    1734:	ff 93       	push	r31
    1736:	cf 93       	push	r28
    1738:	df 93       	push	r29
    173a:	1f 92       	push	r1
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1740:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1744:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1748:	89 2b       	or	r24, r25
    174a:	31 f1       	breq	.+76     	; 0x1798 <__vector_20+0x86>
		item = UDR0;
    174c:	86 ec       	ldi	r24, 0xC6	; 198
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	80 81       	ld	r24, Z
    1754:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1756:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    175a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    175e:	fc 01       	movw	r30, r24
    1760:	84 81       	ldd	r24, Z+4	; 0x04
    1762:	95 81       	ldd	r25, Z+5	; 0x05
    1764:	69 81       	ldd	r22, Y+1	; 0x01
    1766:	0e 94 ca 05 	call	0xb94	; 0xb94 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    176a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    176e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1772:	fc 01       	movw	r30, r24
    1774:	86 81       	ldd	r24, Z+6	; 0x06
    1776:	97 81       	ldd	r25, Z+7	; 0x07
    1778:	89 2b       	or	r24, r25
    177a:	71 f0       	breq	.+28     	; 0x1798 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    177c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1780:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1784:	fc 01       	movw	r30, r24
    1786:	26 81       	ldd	r18, Z+6	; 0x06
    1788:	37 81       	ldd	r19, Z+7	; 0x07
    178a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    178e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1792:	69 81       	ldd	r22, Y+1	; 0x01
    1794:	f9 01       	movw	r30, r18
    1796:	09 95       	icall
		}
	}
}
    1798:	0f 90       	pop	r0
    179a:	df 91       	pop	r29
    179c:	cf 91       	pop	r28
    179e:	ff 91       	pop	r31
    17a0:	ef 91       	pop	r30
    17a2:	bf 91       	pop	r27
    17a4:	af 91       	pop	r26
    17a6:	9f 91       	pop	r25
    17a8:	8f 91       	pop	r24
    17aa:	7f 91       	pop	r23
    17ac:	6f 91       	pop	r22
    17ae:	5f 91       	pop	r21
    17b0:	4f 91       	pop	r20
    17b2:	3f 91       	pop	r19
    17b4:	2f 91       	pop	r18
    17b6:	0f 90       	pop	r0
    17b8:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17bc:	0f 90       	pop	r0
    17be:	1f 90       	pop	r1
    17c0:	18 95       	reti

000017c2 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    17c2:	1f 92       	push	r1
    17c4:	0f 92       	push	r0
    17c6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17ca:	0f 92       	push	r0
    17cc:	11 24       	eor	r1, r1
    17ce:	2f 93       	push	r18
    17d0:	3f 93       	push	r19
    17d2:	4f 93       	push	r20
    17d4:	5f 93       	push	r21
    17d6:	6f 93       	push	r22
    17d8:	7f 93       	push	r23
    17da:	8f 93       	push	r24
    17dc:	9f 93       	push	r25
    17de:	af 93       	push	r26
    17e0:	bf 93       	push	r27
    17e2:	ef 93       	push	r30
    17e4:	ff 93       	push	r31
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    17f0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    17f4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    17f8:	89 2b       	or	r24, r25
    17fa:	f9 f0       	breq	.+62     	; 0x183a <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    17fc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1800:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1804:	fc 01       	movw	r30, r24
    1806:	82 81       	ldd	r24, Z+2	; 0x02
    1808:	93 81       	ldd	r25, Z+3	; 0x03
    180a:	9e 01       	movw	r18, r28
    180c:	2f 5f       	subi	r18, 0xFF	; 255
    180e:	3f 4f       	sbci	r19, 0xFF	; 255
    1810:	b9 01       	movw	r22, r18
    1812:	0e 94 82 05 	call	0xb04	; 0xb04 <buffer_get_item>
    1816:	88 23       	and	r24, r24
    1818:	31 f4       	brne	.+12     	; 0x1826 <__vector_21+0x64>
			UDR0 = item;
    181a:	86 ec       	ldi	r24, 0xC6	; 198
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	29 81       	ldd	r18, Y+1	; 0x01
    1820:	fc 01       	movw	r30, r24
    1822:	20 83       	st	Z, r18
    1824:	13 c0       	rjmp	.+38     	; 0x184c <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1826:	81 ec       	ldi	r24, 0xC1	; 193
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	21 ec       	ldi	r18, 0xC1	; 193
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	2f 7d       	andi	r18, 0xDF	; 223
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
    1838:	09 c0       	rjmp	.+18     	; 0x184c <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    183a:	81 ec       	ldi	r24, 0xC1	; 193
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	21 ec       	ldi	r18, 0xC1	; 193
    1840:	30 e0       	ldi	r19, 0x00	; 0
    1842:	f9 01       	movw	r30, r18
    1844:	20 81       	ld	r18, Z
    1846:	2f 7d       	andi	r18, 0xDF	; 223
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
	}
}
    184c:	0f 90       	pop	r0
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	ff 91       	pop	r31
    1854:	ef 91       	pop	r30
    1856:	bf 91       	pop	r27
    1858:	af 91       	pop	r26
    185a:	9f 91       	pop	r25
    185c:	8f 91       	pop	r24
    185e:	7f 91       	pop	r23
    1860:	6f 91       	pop	r22
    1862:	5f 91       	pop	r21
    1864:	4f 91       	pop	r20
    1866:	3f 91       	pop	r19
    1868:	2f 91       	pop	r18
    186a:	0f 90       	pop	r0
    186c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1876:	1f 92       	push	r1
    1878:	0f 92       	push	r0
    187a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    187e:	0f 92       	push	r0
    1880:	11 24       	eor	r1, r1
    1882:	2f 93       	push	r18
    1884:	3f 93       	push	r19
    1886:	4f 93       	push	r20
    1888:	5f 93       	push	r21
    188a:	6f 93       	push	r22
    188c:	7f 93       	push	r23
    188e:	8f 93       	push	r24
    1890:	9f 93       	push	r25
    1892:	af 93       	push	r26
    1894:	bf 93       	push	r27
    1896:	ef 93       	push	r30
    1898:	ff 93       	push	r31
    189a:	cf 93       	push	r28
    189c:	df 93       	push	r29
    189e:	1f 92       	push	r1
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    18a4:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    18a8:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    18ac:	89 2b       	or	r24, r25
    18ae:	31 f1       	breq	.+76     	; 0x18fc <__vector_28+0x86>
		item = UDR1;
    18b0:	8e ec       	ldi	r24, 0xCE	; 206
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	fc 01       	movw	r30, r24
    18b6:	80 81       	ld	r24, Z
    18b8:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    18ba:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    18be:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    18c2:	fc 01       	movw	r30, r24
    18c4:	84 81       	ldd	r24, Z+4	; 0x04
    18c6:	95 81       	ldd	r25, Z+5	; 0x05
    18c8:	69 81       	ldd	r22, Y+1	; 0x01
    18ca:	0e 94 ca 05 	call	0xb94	; 0xb94 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    18ce:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    18d2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    18d6:	fc 01       	movw	r30, r24
    18d8:	86 81       	ldd	r24, Z+6	; 0x06
    18da:	97 81       	ldd	r25, Z+7	; 0x07
    18dc:	89 2b       	or	r24, r25
    18de:	71 f0       	breq	.+28     	; 0x18fc <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    18e0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    18e4:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    18e8:	fc 01       	movw	r30, r24
    18ea:	26 81       	ldd	r18, Z+6	; 0x06
    18ec:	37 81       	ldd	r19, Z+7	; 0x07
    18ee:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    18f2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    18f6:	69 81       	ldd	r22, Y+1	; 0x01
    18f8:	f9 01       	movw	r30, r18
    18fa:	09 95       	icall
		}
	}
}
    18fc:	0f 90       	pop	r0
    18fe:	df 91       	pop	r29
    1900:	cf 91       	pop	r28
    1902:	ff 91       	pop	r31
    1904:	ef 91       	pop	r30
    1906:	bf 91       	pop	r27
    1908:	af 91       	pop	r26
    190a:	9f 91       	pop	r25
    190c:	8f 91       	pop	r24
    190e:	7f 91       	pop	r23
    1910:	6f 91       	pop	r22
    1912:	5f 91       	pop	r21
    1914:	4f 91       	pop	r20
    1916:	3f 91       	pop	r19
    1918:	2f 91       	pop	r18
    191a:	0f 90       	pop	r0
    191c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1920:	0f 90       	pop	r0
    1922:	1f 90       	pop	r1
    1924:	18 95       	reti

00001926 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1926:	1f 92       	push	r1
    1928:	0f 92       	push	r0
    192a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    192e:	0f 92       	push	r0
    1930:	11 24       	eor	r1, r1
    1932:	2f 93       	push	r18
    1934:	3f 93       	push	r19
    1936:	4f 93       	push	r20
    1938:	5f 93       	push	r21
    193a:	6f 93       	push	r22
    193c:	7f 93       	push	r23
    193e:	8f 93       	push	r24
    1940:	9f 93       	push	r25
    1942:	af 93       	push	r26
    1944:	bf 93       	push	r27
    1946:	ef 93       	push	r30
    1948:	ff 93       	push	r31
    194a:	cf 93       	push	r28
    194c:	df 93       	push	r29
    194e:	1f 92       	push	r1
    1950:	cd b7       	in	r28, 0x3d	; 61
    1952:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1954:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1958:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    195c:	89 2b       	or	r24, r25
    195e:	f9 f0       	breq	.+62     	; 0x199e <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1960:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1964:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1968:	fc 01       	movw	r30, r24
    196a:	82 81       	ldd	r24, Z+2	; 0x02
    196c:	93 81       	ldd	r25, Z+3	; 0x03
    196e:	9e 01       	movw	r18, r28
    1970:	2f 5f       	subi	r18, 0xFF	; 255
    1972:	3f 4f       	sbci	r19, 0xFF	; 255
    1974:	b9 01       	movw	r22, r18
    1976:	0e 94 82 05 	call	0xb04	; 0xb04 <buffer_get_item>
    197a:	88 23       	and	r24, r24
    197c:	31 f4       	brne	.+12     	; 0x198a <__vector_29+0x64>
			UDR1 = item;
    197e:	8e ec       	ldi	r24, 0xCE	; 206
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	29 81       	ldd	r18, Y+1	; 0x01
    1984:	fc 01       	movw	r30, r24
    1986:	20 83       	st	Z, r18
    1988:	13 c0       	rjmp	.+38     	; 0x19b0 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    198a:	89 ec       	ldi	r24, 0xC9	; 201
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	29 ec       	ldi	r18, 0xC9	; 201
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	f9 01       	movw	r30, r18
    1994:	20 81       	ld	r18, Z
    1996:	2f 7d       	andi	r18, 0xDF	; 223
    1998:	fc 01       	movw	r30, r24
    199a:	20 83       	st	Z, r18
    199c:	09 c0       	rjmp	.+18     	; 0x19b0 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    199e:	89 ec       	ldi	r24, 0xC9	; 201
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	29 ec       	ldi	r18, 0xC9	; 201
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	f9 01       	movw	r30, r18
    19a8:	20 81       	ld	r18, Z
    19aa:	2f 7d       	andi	r18, 0xDF	; 223
    19ac:	fc 01       	movw	r30, r24
    19ae:	20 83       	st	Z, r18
	}
}
    19b0:	0f 90       	pop	r0
    19b2:	df 91       	pop	r29
    19b4:	cf 91       	pop	r28
    19b6:	ff 91       	pop	r31
    19b8:	ef 91       	pop	r30
    19ba:	bf 91       	pop	r27
    19bc:	af 91       	pop	r26
    19be:	9f 91       	pop	r25
    19c0:	8f 91       	pop	r24
    19c2:	7f 91       	pop	r23
    19c4:	6f 91       	pop	r22
    19c6:	5f 91       	pop	r21
    19c8:	4f 91       	pop	r20
    19ca:	3f 91       	pop	r19
    19cc:	2f 91       	pop	r18
    19ce:	0f 90       	pop	r0
    19d0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    19d4:	0f 90       	pop	r0
    19d6:	1f 90       	pop	r1
    19d8:	18 95       	reti

000019da <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    19da:	cf 93       	push	r28
    19dc:	df 93       	push	r29
    19de:	00 d0       	rcall	.+0      	; 0x19e0 <xQueueGenericReset+0x6>
    19e0:	00 d0       	rcall	.+0      	; 0x19e2 <xQueueGenericReset+0x8>
    19e2:	1f 92       	push	r1
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62
    19e8:	9c 83       	std	Y+4, r25	; 0x04
    19ea:	8b 83       	std	Y+3, r24	; 0x03
    19ec:	6d 83       	std	Y+5, r22	; 0x05
    19ee:	8b 81       	ldd	r24, Y+3	; 0x03
    19f0:	9c 81       	ldd	r25, Y+4	; 0x04
    19f2:	9a 83       	std	Y+2, r25	; 0x02
    19f4:	89 83       	std	Y+1, r24	; 0x01
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	0f 92       	push	r0
    19fc:	89 81       	ldd	r24, Y+1	; 0x01
    19fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1a00:	fc 01       	movw	r30, r24
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	29 81       	ldd	r18, Y+1	; 0x01
    1a08:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1a0e:	42 2f       	mov	r20, r18
    1a10:	50 e0       	ldi	r21, 0x00	; 0
    1a12:	29 81       	ldd	r18, Y+1	; 0x01
    1a14:	3a 81       	ldd	r19, Y+2	; 0x02
    1a16:	f9 01       	movw	r30, r18
    1a18:	24 8d       	ldd	r18, Z+28	; 0x1c
    1a1a:	22 2f       	mov	r18, r18
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	42 9f       	mul	r20, r18
    1a20:	b0 01       	movw	r22, r0
    1a22:	43 9f       	mul	r20, r19
    1a24:	70 0d       	add	r23, r0
    1a26:	52 9f       	mul	r21, r18
    1a28:	70 0d       	add	r23, r0
    1a2a:	11 24       	eor	r1, r1
    1a2c:	9b 01       	movw	r18, r22
    1a2e:	28 0f       	add	r18, r24
    1a30:	39 1f       	adc	r19, r25
    1a32:	89 81       	ldd	r24, Y+1	; 0x01
    1a34:	9a 81       	ldd	r25, Y+2	; 0x02
    1a36:	fc 01       	movw	r30, r24
    1a38:	33 83       	std	Z+3, r19	; 0x03
    1a3a:	22 83       	std	Z+2, r18	; 0x02
    1a3c:	89 81       	ldd	r24, Y+1	; 0x01
    1a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a40:	fc 01       	movw	r30, r24
    1a42:	12 8e       	std	Z+26, r1	; 0x1a
    1a44:	89 81       	ldd	r24, Y+1	; 0x01
    1a46:	9a 81       	ldd	r25, Y+2	; 0x02
    1a48:	fc 01       	movw	r30, r24
    1a4a:	20 81       	ld	r18, Z
    1a4c:	31 81       	ldd	r19, Z+1	; 0x01
    1a4e:	89 81       	ldd	r24, Y+1	; 0x01
    1a50:	9a 81       	ldd	r25, Y+2	; 0x02
    1a52:	fc 01       	movw	r30, r24
    1a54:	35 83       	std	Z+5, r19	; 0x05
    1a56:	24 83       	std	Z+4, r18	; 0x04
    1a58:	89 81       	ldd	r24, Y+1	; 0x01
    1a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a5c:	fc 01       	movw	r30, r24
    1a5e:	80 81       	ld	r24, Z
    1a60:	91 81       	ldd	r25, Z+1	; 0x01
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	3a 81       	ldd	r19, Y+2	; 0x02
    1a66:	f9 01       	movw	r30, r18
    1a68:	23 8d       	ldd	r18, Z+27	; 0x1b
    1a6a:	22 2f       	mov	r18, r18
    1a6c:	30 e0       	ldi	r19, 0x00	; 0
    1a6e:	a9 01       	movw	r20, r18
    1a70:	41 50       	subi	r20, 0x01	; 1
    1a72:	51 09       	sbc	r21, r1
    1a74:	29 81       	ldd	r18, Y+1	; 0x01
    1a76:	3a 81       	ldd	r19, Y+2	; 0x02
    1a78:	f9 01       	movw	r30, r18
    1a7a:	24 8d       	ldd	r18, Z+28	; 0x1c
    1a7c:	22 2f       	mov	r18, r18
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	42 9f       	mul	r20, r18
    1a82:	b0 01       	movw	r22, r0
    1a84:	43 9f       	mul	r20, r19
    1a86:	70 0d       	add	r23, r0
    1a88:	52 9f       	mul	r21, r18
    1a8a:	70 0d       	add	r23, r0
    1a8c:	11 24       	eor	r1, r1
    1a8e:	9b 01       	movw	r18, r22
    1a90:	28 0f       	add	r18, r24
    1a92:	39 1f       	adc	r19, r25
    1a94:	89 81       	ldd	r24, Y+1	; 0x01
    1a96:	9a 81       	ldd	r25, Y+2	; 0x02
    1a98:	fc 01       	movw	r30, r24
    1a9a:	37 83       	std	Z+7, r19	; 0x07
    1a9c:	26 83       	std	Z+6, r18	; 0x06
    1a9e:	89 81       	ldd	r24, Y+1	; 0x01
    1aa0:	9a 81       	ldd	r25, Y+2	; 0x02
    1aa2:	2f ef       	ldi	r18, 0xFF	; 255
    1aa4:	fc 01       	movw	r30, r24
    1aa6:	25 8f       	std	Z+29, r18	; 0x1d
    1aa8:	89 81       	ldd	r24, Y+1	; 0x01
    1aaa:	9a 81       	ldd	r25, Y+2	; 0x02
    1aac:	2f ef       	ldi	r18, 0xFF	; 255
    1aae:	fc 01       	movw	r30, r24
    1ab0:	26 8f       	std	Z+30, r18	; 0x1e
    1ab2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ab4:	88 23       	and	r24, r24
    1ab6:	81 f4       	brne	.+32     	; 0x1ad8 <xQueueGenericReset+0xfe>
    1ab8:	89 81       	ldd	r24, Y+1	; 0x01
    1aba:	9a 81       	ldd	r25, Y+2	; 0x02
    1abc:	fc 01       	movw	r30, r24
    1abe:	80 85       	ldd	r24, Z+8	; 0x08
    1ac0:	88 23       	and	r24, r24
    1ac2:	a1 f0       	breq	.+40     	; 0x1aec <xQueueGenericReset+0x112>
    1ac4:	89 81       	ldd	r24, Y+1	; 0x01
    1ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac8:	08 96       	adiw	r24, 0x08	; 8
    1aca:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    1ace:	88 23       	and	r24, r24
    1ad0:	69 f0       	breq	.+26     	; 0x1aec <xQueueGenericReset+0x112>
    1ad2:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1ad6:	0a c0       	rjmp	.+20     	; 0x1aec <xQueueGenericReset+0x112>
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	9a 81       	ldd	r25, Y+2	; 0x02
    1adc:	08 96       	adiw	r24, 0x08	; 8
    1ade:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    1ae2:	89 81       	ldd	r24, Y+1	; 0x01
    1ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae6:	41 96       	adiw	r24, 0x11	; 17
    1ae8:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    1aec:	0f 90       	pop	r0
    1aee:	0f be       	out	0x3f, r0	; 63
    1af0:	81 e0       	ldi	r24, 0x01	; 1
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	0f 90       	pop	r0
    1afc:	df 91       	pop	r29
    1afe:	cf 91       	pop	r28
    1b00:	08 95       	ret

00001b02 <xQueueGenericCreate>:
    1b02:	0f 93       	push	r16
    1b04:	1f 93       	push	r17
    1b06:	cf 93       	push	r28
    1b08:	df 93       	push	r29
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	29 97       	sbiw	r28, 0x09	; 9
    1b10:	0f b6       	in	r0, 0x3f	; 63
    1b12:	f8 94       	cli
    1b14:	de bf       	out	0x3e, r29	; 62
    1b16:	0f be       	out	0x3f, r0	; 63
    1b18:	cd bf       	out	0x3d, r28	; 61
    1b1a:	8f 83       	std	Y+7, r24	; 0x07
    1b1c:	68 87       	std	Y+8, r22	; 0x08
    1b1e:	49 87       	std	Y+9, r20	; 0x09
    1b20:	88 85       	ldd	r24, Y+8	; 0x08
    1b22:	88 23       	and	r24, r24
    1b24:	19 f4       	brne	.+6      	; 0x1b2c <xQueueGenericCreate+0x2a>
    1b26:	1a 82       	std	Y+2, r1	; 0x02
    1b28:	19 82       	std	Y+1, r1	; 0x01
    1b2a:	0f c0       	rjmp	.+30     	; 0x1b4a <xQueueGenericCreate+0x48>
    1b2c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b2e:	48 2f       	mov	r20, r24
    1b30:	50 e0       	ldi	r21, 0x00	; 0
    1b32:	88 85       	ldd	r24, Y+8	; 0x08
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	42 9f       	mul	r20, r18
    1b3a:	c0 01       	movw	r24, r0
    1b3c:	43 9f       	mul	r20, r19
    1b3e:	90 0d       	add	r25, r0
    1b40:	52 9f       	mul	r21, r18
    1b42:	90 0d       	add	r25, r0
    1b44:	11 24       	eor	r1, r1
    1b46:	9a 83       	std	Y+2, r25	; 0x02
    1b48:	89 83       	std	Y+1, r24	; 0x01
    1b4a:	89 81       	ldd	r24, Y+1	; 0x01
    1b4c:	9a 81       	ldd	r25, Y+2	; 0x02
    1b4e:	81 96       	adiw	r24, 0x21	; 33
    1b50:	0e 94 67 0a 	call	0x14ce	; 0x14ce <pvPortMalloc>
    1b54:	9c 83       	std	Y+4, r25	; 0x04
    1b56:	8b 83       	std	Y+3, r24	; 0x03
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	89 2b       	or	r24, r25
    1b5e:	81 f0       	breq	.+32     	; 0x1b80 <xQueueGenericCreate+0x7e>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	81 96       	adiw	r24, 0x21	; 33
    1b66:	9e 83       	std	Y+6, r25	; 0x06
    1b68:	8d 83       	std	Y+5, r24	; 0x05
    1b6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b70:	9e 81       	ldd	r25, Y+6	; 0x06
    1b72:	89 01       	movw	r16, r18
    1b74:	29 85       	ldd	r18, Y+9	; 0x09
    1b76:	ac 01       	movw	r20, r24
    1b78:	68 85       	ldd	r22, Y+8	; 0x08
    1b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b7c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <prvInitialiseNewQueue>
    1b80:	8b 81       	ldd	r24, Y+3	; 0x03
    1b82:	9c 81       	ldd	r25, Y+4	; 0x04
    1b84:	29 96       	adiw	r28, 0x09	; 9
    1b86:	0f b6       	in	r0, 0x3f	; 63
    1b88:	f8 94       	cli
    1b8a:	de bf       	out	0x3e, r29	; 62
    1b8c:	0f be       	out	0x3f, r0	; 63
    1b8e:	cd bf       	out	0x3d, r28	; 61
    1b90:	df 91       	pop	r29
    1b92:	cf 91       	pop	r28
    1b94:	1f 91       	pop	r17
    1b96:	0f 91       	pop	r16
    1b98:	08 95       	ret

00001b9a <prvInitialiseNewQueue>:
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	cf 93       	push	r28
    1ba0:	df 93       	push	r29
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	27 97       	sbiw	r28, 0x07	; 7
    1ba8:	0f b6       	in	r0, 0x3f	; 63
    1baa:	f8 94       	cli
    1bac:	de bf       	out	0x3e, r29	; 62
    1bae:	0f be       	out	0x3f, r0	; 63
    1bb0:	cd bf       	out	0x3d, r28	; 61
    1bb2:	89 83       	std	Y+1, r24	; 0x01
    1bb4:	6a 83       	std	Y+2, r22	; 0x02
    1bb6:	5c 83       	std	Y+4, r21	; 0x04
    1bb8:	4b 83       	std	Y+3, r20	; 0x03
    1bba:	2d 83       	std	Y+5, r18	; 0x05
    1bbc:	1f 83       	std	Y+7, r17	; 0x07
    1bbe:	0e 83       	std	Y+6, r16	; 0x06
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	88 23       	and	r24, r24
    1bc4:	41 f4       	brne	.+16     	; 0x1bd6 <prvInitialiseNewQueue+0x3c>
    1bc6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bc8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bca:	2e 81       	ldd	r18, Y+6	; 0x06
    1bcc:	3f 81       	ldd	r19, Y+7	; 0x07
    1bce:	fc 01       	movw	r30, r24
    1bd0:	31 83       	std	Z+1, r19	; 0x01
    1bd2:	20 83       	st	Z, r18
    1bd4:	07 c0       	rjmp	.+14     	; 0x1be4 <prvInitialiseNewQueue+0x4a>
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	2b 81       	ldd	r18, Y+3	; 0x03
    1bdc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bde:	fc 01       	movw	r30, r24
    1be0:	31 83       	std	Z+1, r19	; 0x01
    1be2:	20 83       	st	Z, r18
    1be4:	8e 81       	ldd	r24, Y+6	; 0x06
    1be6:	9f 81       	ldd	r25, Y+7	; 0x07
    1be8:	29 81       	ldd	r18, Y+1	; 0x01
    1bea:	fc 01       	movw	r30, r24
    1bec:	23 8f       	std	Z+27, r18	; 0x1b
    1bee:	8e 81       	ldd	r24, Y+6	; 0x06
    1bf0:	9f 81       	ldd	r25, Y+7	; 0x07
    1bf2:	2a 81       	ldd	r18, Y+2	; 0x02
    1bf4:	fc 01       	movw	r30, r24
    1bf6:	24 8f       	std	Z+28, r18	; 0x1c
    1bf8:	8e 81       	ldd	r24, Y+6	; 0x06
    1bfa:	9f 81       	ldd	r25, Y+7	; 0x07
    1bfc:	61 e0       	ldi	r22, 0x01	; 1
    1bfe:	0e 94 ed 0c 	call	0x19da	; 0x19da <xQueueGenericReset>
    1c02:	8e 81       	ldd	r24, Y+6	; 0x06
    1c04:	9f 81       	ldd	r25, Y+7	; 0x07
    1c06:	2d 81       	ldd	r18, Y+5	; 0x05
    1c08:	fc 01       	movw	r30, r24
    1c0a:	20 a3       	std	Z+32, r18	; 0x20
    1c0c:	27 96       	adiw	r28, 0x07	; 7
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	de bf       	out	0x3e, r29	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	cd bf       	out	0x3d, r28	; 61
    1c18:	df 91       	pop	r29
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	08 95       	ret

00001c22 <prvInitialiseMutex>:
    1c22:	cf 93       	push	r28
    1c24:	df 93       	push	r29
    1c26:	00 d0       	rcall	.+0      	; 0x1c28 <prvInitialiseMutex+0x6>
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	89 2b       	or	r24, r25
    1c36:	b9 f0       	breq	.+46     	; 0x1c66 <prvInitialiseMutex+0x44>
    1c38:	89 81       	ldd	r24, Y+1	; 0x01
    1c3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	13 82       	std	Z+3, r1	; 0x03
    1c40:	12 82       	std	Z+2, r1	; 0x02
    1c42:	89 81       	ldd	r24, Y+1	; 0x01
    1c44:	9a 81       	ldd	r25, Y+2	; 0x02
    1c46:	fc 01       	movw	r30, r24
    1c48:	11 82       	std	Z+1, r1	; 0x01
    1c4a:	10 82       	st	Z, r1
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c50:	fc 01       	movw	r30, r24
    1c52:	16 82       	std	Z+6, r1	; 0x06
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	50 e0       	ldi	r21, 0x00	; 0
    1c5e:	60 e0       	ldi	r22, 0x00	; 0
    1c60:	70 e0       	ldi	r23, 0x00	; 0
    1c62:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xQueueGenericSend>
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <xQueueCreateMutex>:
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <xQueueCreateMutex+0x6>
    1c76:	00 d0       	rcall	.+0      	; 0x1c78 <xQueueCreateMutex+0x8>
    1c78:	1f 92       	push	r1
    1c7a:	cd b7       	in	r28, 0x3d	; 61
    1c7c:	de b7       	in	r29, 0x3e	; 62
    1c7e:	8d 83       	std	Y+5, r24	; 0x05
    1c80:	81 e0       	ldi	r24, 0x01	; 1
    1c82:	89 83       	std	Y+1, r24	; 0x01
    1c84:	1a 82       	std	Y+2, r1	; 0x02
    1c86:	4d 81       	ldd	r20, Y+5	; 0x05
    1c88:	6a 81       	ldd	r22, Y+2	; 0x02
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	0e 94 81 0d 	call	0x1b02	; 0x1b02 <xQueueGenericCreate>
    1c90:	9c 83       	std	Y+4, r25	; 0x04
    1c92:	8b 83       	std	Y+3, r24	; 0x03
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <prvInitialiseMutex>
    1c9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	08 95       	ret

00001cb0 <xQueueGenericSend>:
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	cd b7       	in	r28, 0x3d	; 61
    1cb6:	de b7       	in	r29, 0x3e	; 62
    1cb8:	2e 97       	sbiw	r28, 0x0e	; 14
    1cba:	0f b6       	in	r0, 0x3f	; 63
    1cbc:	f8 94       	cli
    1cbe:	de bf       	out	0x3e, r29	; 62
    1cc0:	0f be       	out	0x3f, r0	; 63
    1cc2:	cd bf       	out	0x3d, r28	; 61
    1cc4:	99 87       	std	Y+9, r25	; 0x09
    1cc6:	88 87       	std	Y+8, r24	; 0x08
    1cc8:	7b 87       	std	Y+11, r23	; 0x0b
    1cca:	6a 87       	std	Y+10, r22	; 0x0a
    1ccc:	5d 87       	std	Y+13, r21	; 0x0d
    1cce:	4c 87       	std	Y+12, r20	; 0x0c
    1cd0:	2e 87       	std	Y+14, r18	; 0x0e
    1cd2:	19 82       	std	Y+1, r1	; 0x01
    1cd4:	88 85       	ldd	r24, Y+8	; 0x08
    1cd6:	99 85       	ldd	r25, Y+9	; 0x09
    1cd8:	9b 83       	std	Y+3, r25	; 0x03
    1cda:	8a 83       	std	Y+2, r24	; 0x02
    1cdc:	0f b6       	in	r0, 0x3f	; 63
    1cde:	f8 94       	cli
    1ce0:	0f 92       	push	r0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ce6:	fc 01       	movw	r30, r24
    1ce8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1cea:	8a 81       	ldd	r24, Y+2	; 0x02
    1cec:	9b 81       	ldd	r25, Y+3	; 0x03
    1cee:	fc 01       	movw	r30, r24
    1cf0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1cf2:	28 17       	cp	r18, r24
    1cf4:	18 f0       	brcs	.+6      	; 0x1cfc <xQueueGenericSend+0x4c>
    1cf6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1cf8:	82 30       	cpi	r24, 0x02	; 2
    1cfa:	11 f5       	brne	.+68     	; 0x1d40 <xQueueGenericSend+0x90>
    1cfc:	2a 85       	ldd	r18, Y+10	; 0x0a
    1cfe:	3b 85       	ldd	r19, Y+11	; 0x0b
    1d00:	8a 81       	ldd	r24, Y+2	; 0x02
    1d02:	9b 81       	ldd	r25, Y+3	; 0x03
    1d04:	4e 85       	ldd	r20, Y+14	; 0x0e
    1d06:	b9 01       	movw	r22, r18
    1d08:	0e 94 5f 10 	call	0x20be	; 0x20be <prvCopyDataToQueue>
    1d0c:	8c 83       	std	Y+4, r24	; 0x04
    1d0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d10:	9b 81       	ldd	r25, Y+3	; 0x03
    1d12:	fc 01       	movw	r30, r24
    1d14:	81 89       	ldd	r24, Z+17	; 0x11
    1d16:	88 23       	and	r24, r24
    1d18:	51 f0       	breq	.+20     	; 0x1d2e <xQueueGenericSend+0x7e>
    1d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1d1e:	41 96       	adiw	r24, 0x11	; 17
    1d20:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    1d24:	88 23       	and	r24, r24
    1d26:	41 f0       	breq	.+16     	; 0x1d38 <xQueueGenericSend+0x88>
    1d28:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <xQueueGenericSend+0x88>
    1d2e:	8c 81       	ldd	r24, Y+4	; 0x04
    1d30:	88 23       	and	r24, r24
    1d32:	11 f0       	breq	.+4      	; 0x1d38 <xQueueGenericSend+0x88>
    1d34:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1d38:	0f 90       	pop	r0
    1d3a:	0f be       	out	0x3f, r0	; 63
    1d3c:	81 e0       	ldi	r24, 0x01	; 1
    1d3e:	61 c0       	rjmp	.+194    	; 0x1e02 <xQueueGenericSend+0x152>
    1d40:	8c 85       	ldd	r24, Y+12	; 0x0c
    1d42:	9d 85       	ldd	r25, Y+13	; 0x0d
    1d44:	89 2b       	or	r24, r25
    1d46:	21 f4       	brne	.+8      	; 0x1d50 <xQueueGenericSend+0xa0>
    1d48:	0f 90       	pop	r0
    1d4a:	0f be       	out	0x3f, r0	; 63
    1d4c:	80 e0       	ldi	r24, 0x00	; 0
    1d4e:	59 c0       	rjmp	.+178    	; 0x1e02 <xQueueGenericSend+0x152>
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
    1d52:	88 23       	and	r24, r24
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <xQueueGenericSend+0xb2>
    1d56:	ce 01       	movw	r24, r28
    1d58:	05 96       	adiw	r24, 0x05	; 5
    1d5a:	0e 94 ef 16 	call	0x2dde	; 0x2dde <vTaskSetTimeOutState>
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	89 83       	std	Y+1, r24	; 0x01
    1d62:	0f 90       	pop	r0
    1d64:	0f be       	out	0x3f, r0	; 63
    1d66:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    1d6a:	0f b6       	in	r0, 0x3f	; 63
    1d6c:	f8 94       	cli
    1d6e:	0f 92       	push	r0
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	9b 81       	ldd	r25, Y+3	; 0x03
    1d74:	fc 01       	movw	r30, r24
    1d76:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d78:	8f 3f       	cpi	r24, 0xFF	; 255
    1d7a:	21 f4       	brne	.+8      	; 0x1d84 <xQueueGenericSend+0xd4>
    1d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    1d80:	fc 01       	movw	r30, r24
    1d82:	15 8e       	std	Z+29, r1	; 0x1d
    1d84:	8a 81       	ldd	r24, Y+2	; 0x02
    1d86:	9b 81       	ldd	r25, Y+3	; 0x03
    1d88:	fc 01       	movw	r30, r24
    1d8a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1d8c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d8e:	21 f4       	brne	.+8      	; 0x1d98 <xQueueGenericSend+0xe8>
    1d90:	8a 81       	ldd	r24, Y+2	; 0x02
    1d92:	9b 81       	ldd	r25, Y+3	; 0x03
    1d94:	fc 01       	movw	r30, r24
    1d96:	16 8e       	std	Z+30, r1	; 0x1e
    1d98:	0f 90       	pop	r0
    1d9a:	0f be       	out	0x3f, r0	; 63
    1d9c:	9e 01       	movw	r18, r28
    1d9e:	24 5f       	subi	r18, 0xF4	; 244
    1da0:	3f 4f       	sbci	r19, 0xFF	; 255
    1da2:	ce 01       	movw	r24, r28
    1da4:	05 96       	adiw	r24, 0x05	; 5
    1da6:	b9 01       	movw	r22, r18
    1da8:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <xTaskCheckForTimeOut>
    1dac:	88 23       	and	r24, r24
    1dae:	01 f5       	brne	.+64     	; 0x1df0 <xQueueGenericSend+0x140>
    1db0:	8a 81       	ldd	r24, Y+2	; 0x02
    1db2:	9b 81       	ldd	r25, Y+3	; 0x03
    1db4:	0e 94 fa 11 	call	0x23f4	; 0x23f4 <prvIsQueueFull>
    1db8:	88 23       	and	r24, r24
    1dba:	99 f0       	breq	.+38     	; 0x1de2 <xQueueGenericSend+0x132>
    1dbc:	2c 85       	ldd	r18, Y+12	; 0x0c
    1dbe:	3d 85       	ldd	r19, Y+13	; 0x0d
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc4:	08 96       	adiw	r24, 0x08	; 8
    1dc6:	b9 01       	movw	r22, r18
    1dc8:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskPlaceOnEventList>
    1dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dce:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd0:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    1dd4:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    1dd8:	88 23       	and	r24, r24
    1dda:	91 f4       	brne	.+36     	; 0x1e00 <xQueueGenericSend+0x150>
    1ddc:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1de0:	0f c0       	rjmp	.+30     	; 0x1e00 <xQueueGenericSend+0x150>
    1de2:	8a 81       	ldd	r24, Y+2	; 0x02
    1de4:	9b 81       	ldd	r25, Y+3	; 0x03
    1de6:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    1dea:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    1dee:	76 cf       	rjmp	.-276    	; 0x1cdc <xQueueGenericSend+0x2c>
    1df0:	8a 81       	ldd	r24, Y+2	; 0x02
    1df2:	9b 81       	ldd	r25, Y+3	; 0x03
    1df4:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    1df8:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    1dfc:	80 e0       	ldi	r24, 0x00	; 0
    1dfe:	01 c0       	rjmp	.+2      	; 0x1e02 <xQueueGenericSend+0x152>
    1e00:	6d cf       	rjmp	.-294    	; 0x1cdc <xQueueGenericSend+0x2c>
    1e02:	2e 96       	adiw	r28, 0x0e	; 14
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	df 91       	pop	r29
    1e10:	cf 91       	pop	r28
    1e12:	08 95       	ret

00001e14 <xQueueGenericSendFromISR>:
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	2c 97       	sbiw	r28, 0x0c	; 12
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	9f 83       	std	Y+7, r25	; 0x07
    1e2a:	8e 83       	std	Y+6, r24	; 0x06
    1e2c:	79 87       	std	Y+9, r23	; 0x09
    1e2e:	68 87       	std	Y+8, r22	; 0x08
    1e30:	5b 87       	std	Y+11, r21	; 0x0b
    1e32:	4a 87       	std	Y+10, r20	; 0x0a
    1e34:	2c 87       	std	Y+12, r18	; 0x0c
    1e36:	8e 81       	ldd	r24, Y+6	; 0x06
    1e38:	9f 81       	ldd	r25, Y+7	; 0x07
    1e3a:	9b 83       	std	Y+3, r25	; 0x03
    1e3c:	8a 83       	std	Y+2, r24	; 0x02
    1e3e:	1c 82       	std	Y+4, r1	; 0x04
    1e40:	8a 81       	ldd	r24, Y+2	; 0x02
    1e42:	9b 81       	ldd	r25, Y+3	; 0x03
    1e44:	fc 01       	movw	r30, r24
    1e46:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e48:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e4c:	fc 01       	movw	r30, r24
    1e4e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1e50:	28 17       	cp	r18, r24
    1e52:	18 f0       	brcs	.+6      	; 0x1e5a <xQueueGenericSendFromISR+0x46>
    1e54:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e56:	82 30       	cpi	r24, 0x02	; 2
    1e58:	89 f5       	brne	.+98     	; 0x1ebc <xQueueGenericSendFromISR+0xa8>
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5e:	fc 01       	movw	r30, r24
    1e60:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	28 85       	ldd	r18, Y+8	; 0x08
    1e66:	39 85       	ldd	r19, Y+9	; 0x09
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1e6e:	b9 01       	movw	r22, r18
    1e70:	0e 94 5f 10 	call	0x20be	; 0x20be <prvCopyDataToQueue>
    1e74:	8d 81       	ldd	r24, Y+5	; 0x05
    1e76:	8f 3f       	cpi	r24, 0xFF	; 255
    1e78:	b9 f4       	brne	.+46     	; 0x1ea8 <xQueueGenericSendFromISR+0x94>
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7e:	fc 01       	movw	r30, r24
    1e80:	81 89       	ldd	r24, Z+17	; 0x11
    1e82:	88 23       	and	r24, r24
    1e84:	c1 f0       	breq	.+48     	; 0x1eb6 <xQueueGenericSendFromISR+0xa2>
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	9b 81       	ldd	r25, Y+3	; 0x03
    1e8a:	41 96       	adiw	r24, 0x11	; 17
    1e8c:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    1e90:	88 23       	and	r24, r24
    1e92:	89 f0       	breq	.+34     	; 0x1eb6 <xQueueGenericSendFromISR+0xa2>
    1e94:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e96:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e98:	89 2b       	or	r24, r25
    1e9a:	69 f0       	breq	.+26     	; 0x1eb6 <xQueueGenericSendFromISR+0xa2>
    1e9c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e9e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea0:	21 e0       	ldi	r18, 0x01	; 1
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	20 83       	st	Z, r18
    1ea6:	07 c0       	rjmp	.+14     	; 0x1eb6 <xQueueGenericSendFromISR+0xa2>
    1ea8:	8d 81       	ldd	r24, Y+5	; 0x05
    1eaa:	8f 5f       	subi	r24, 0xFF	; 255
    1eac:	28 2f       	mov	r18, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb2:	fc 01       	movw	r30, r24
    1eb4:	26 8f       	std	Z+30, r18	; 0x1e
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	89 83       	std	Y+1, r24	; 0x01
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <xQueueGenericSendFromISR+0xaa>
    1ebc:	19 82       	std	Y+1, r1	; 0x01
    1ebe:	89 81       	ldd	r24, Y+1	; 0x01
    1ec0:	2c 96       	adiw	r28, 0x0c	; 12
    1ec2:	0f b6       	in	r0, 0x3f	; 63
    1ec4:	f8 94       	cli
    1ec6:	de bf       	out	0x3e, r29	; 62
    1ec8:	0f be       	out	0x3f, r0	; 63
    1eca:	cd bf       	out	0x3d, r28	; 61
    1ecc:	df 91       	pop	r29
    1ece:	cf 91       	pop	r28
    1ed0:	08 95       	ret

00001ed2 <xQueueGenericReceive>:
    1ed2:	cf 93       	push	r28
    1ed4:	df 93       	push	r29
    1ed6:	cd b7       	in	r28, 0x3d	; 61
    1ed8:	de b7       	in	r29, 0x3e	; 62
    1eda:	60 97       	sbiw	r28, 0x10	; 16
    1edc:	0f b6       	in	r0, 0x3f	; 63
    1ede:	f8 94       	cli
    1ee0:	de bf       	out	0x3e, r29	; 62
    1ee2:	0f be       	out	0x3f, r0	; 63
    1ee4:	cd bf       	out	0x3d, r28	; 61
    1ee6:	9b 87       	std	Y+11, r25	; 0x0b
    1ee8:	8a 87       	std	Y+10, r24	; 0x0a
    1eea:	7d 87       	std	Y+13, r23	; 0x0d
    1eec:	6c 87       	std	Y+12, r22	; 0x0c
    1eee:	5f 87       	std	Y+15, r21	; 0x0f
    1ef0:	4e 87       	std	Y+14, r20	; 0x0e
    1ef2:	28 8b       	std	Y+16, r18	; 0x10
    1ef4:	19 82       	std	Y+1, r1	; 0x01
    1ef6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ef8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1efa:	9b 83       	std	Y+3, r25	; 0x03
    1efc:	8a 83       	std	Y+2, r24	; 0x02
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	0f 92       	push	r0
    1f04:	8a 81       	ldd	r24, Y+2	; 0x02
    1f06:	9b 81       	ldd	r25, Y+3	; 0x03
    1f08:	fc 01       	movw	r30, r24
    1f0a:	82 8d       	ldd	r24, Z+26	; 0x1a
    1f0c:	8c 83       	std	Y+4, r24	; 0x04
    1f0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f10:	88 23       	and	r24, r24
    1f12:	09 f4       	brne	.+2      	; 0x1f16 <xQueueGenericReceive+0x44>
    1f14:	51 c0       	rjmp	.+162    	; 0x1fb8 <xQueueGenericReceive+0xe6>
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	fc 01       	movw	r30, r24
    1f1c:	86 81       	ldd	r24, Z+6	; 0x06
    1f1e:	97 81       	ldd	r25, Z+7	; 0x07
    1f20:	9e 83       	std	Y+6, r25	; 0x06
    1f22:	8d 83       	std	Y+5, r24	; 0x05
    1f24:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f26:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	b9 01       	movw	r22, r18
    1f2e:	0e 94 2f 11 	call	0x225e	; 0x225e <prvCopyDataFromQueue>
    1f32:	88 89       	ldd	r24, Y+16	; 0x10
    1f34:	88 23       	and	r24, r24
    1f36:	31 f5       	brne	.+76     	; 0x1f84 <xQueueGenericReceive+0xb2>
    1f38:	8c 81       	ldd	r24, Y+4	; 0x04
    1f3a:	2f ef       	ldi	r18, 0xFF	; 255
    1f3c:	28 0f       	add	r18, r24
    1f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f40:	9b 81       	ldd	r25, Y+3	; 0x03
    1f42:	fc 01       	movw	r30, r24
    1f44:	22 8f       	std	Z+26, r18	; 0x1a
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	80 81       	ld	r24, Z
    1f4e:	91 81       	ldd	r25, Z+1	; 0x01
    1f50:	89 2b       	or	r24, r25
    1f52:	41 f4       	brne	.+16     	; 0x1f64 <xQueueGenericReceive+0x92>
    1f54:	0e 94 64 19 	call	0x32c8	; 0x32c8 <pvTaskIncrementMutexHeldCount>
    1f58:	9c 01       	movw	r18, r24
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	fc 01       	movw	r30, r24
    1f60:	33 83       	std	Z+3, r19	; 0x03
    1f62:	22 83       	std	Z+2, r18	; 0x02
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	fc 01       	movw	r30, r24
    1f6a:	80 85       	ldd	r24, Z+8	; 0x08
    1f6c:	88 23       	and	r24, r24
    1f6e:	01 f1       	breq	.+64     	; 0x1fb0 <xQueueGenericReceive+0xde>
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	9b 81       	ldd	r25, Y+3	; 0x03
    1f74:	08 96       	adiw	r24, 0x08	; 8
    1f76:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    1f7a:	88 23       	and	r24, r24
    1f7c:	c9 f0       	breq	.+50     	; 0x1fb0 <xQueueGenericReceive+0xde>
    1f7e:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1f82:	16 c0       	rjmp	.+44     	; 0x1fb0 <xQueueGenericReceive+0xde>
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	2d 81       	ldd	r18, Y+5	; 0x05
    1f8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	37 83       	std	Z+7, r19	; 0x07
    1f90:	26 83       	std	Z+6, r18	; 0x06
    1f92:	8a 81       	ldd	r24, Y+2	; 0x02
    1f94:	9b 81       	ldd	r25, Y+3	; 0x03
    1f96:	fc 01       	movw	r30, r24
    1f98:	81 89       	ldd	r24, Z+17	; 0x11
    1f9a:	88 23       	and	r24, r24
    1f9c:	49 f0       	breq	.+18     	; 0x1fb0 <xQueueGenericReceive+0xde>
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	41 96       	adiw	r24, 0x11	; 17
    1fa4:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    1fa8:	88 23       	and	r24, r24
    1faa:	11 f0       	breq	.+4      	; 0x1fb0 <xQueueGenericReceive+0xde>
    1fac:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    1fb0:	0f 90       	pop	r0
    1fb2:	0f be       	out	0x3f, r0	; 63
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	7a c0       	rjmp	.+244    	; 0x20ac <xQueueGenericReceive+0x1da>
    1fb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fba:	9f 85       	ldd	r25, Y+15	; 0x0f
    1fbc:	89 2b       	or	r24, r25
    1fbe:	21 f4       	brne	.+8      	; 0x1fc8 <xQueueGenericReceive+0xf6>
    1fc0:	0f 90       	pop	r0
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	72 c0       	rjmp	.+228    	; 0x20ac <xQueueGenericReceive+0x1da>
    1fc8:	89 81       	ldd	r24, Y+1	; 0x01
    1fca:	88 23       	and	r24, r24
    1fcc:	31 f4       	brne	.+12     	; 0x1fda <xQueueGenericReceive+0x108>
    1fce:	ce 01       	movw	r24, r28
    1fd0:	07 96       	adiw	r24, 0x07	; 7
    1fd2:	0e 94 ef 16 	call	0x2dde	; 0x2dde <vTaskSetTimeOutState>
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	0f 90       	pop	r0
    1fdc:	0f be       	out	0x3f, r0	; 63
    1fde:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    1fe2:	0f b6       	in	r0, 0x3f	; 63
    1fe4:	f8 94       	cli
    1fe6:	0f 92       	push	r0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	fc 01       	movw	r30, r24
    1fee:	85 8d       	ldd	r24, Z+29	; 0x1d
    1ff0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff2:	21 f4       	brne	.+8      	; 0x1ffc <xQueueGenericReceive+0x12a>
    1ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff8:	fc 01       	movw	r30, r24
    1ffa:	15 8e       	std	Z+29, r1	; 0x1d
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    2000:	fc 01       	movw	r30, r24
    2002:	86 8d       	ldd	r24, Z+30	; 0x1e
    2004:	8f 3f       	cpi	r24, 0xFF	; 255
    2006:	21 f4       	brne	.+8      	; 0x2010 <xQueueGenericReceive+0x13e>
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	fc 01       	movw	r30, r24
    200e:	16 8e       	std	Z+30, r1	; 0x1e
    2010:	0f 90       	pop	r0
    2012:	0f be       	out	0x3f, r0	; 63
    2014:	9e 01       	movw	r18, r28
    2016:	22 5f       	subi	r18, 0xF2	; 242
    2018:	3f 4f       	sbci	r19, 0xFF	; 255
    201a:	ce 01       	movw	r24, r28
    201c:	07 96       	adiw	r24, 0x07	; 7
    201e:	b9 01       	movw	r22, r18
    2020:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <xTaskCheckForTimeOut>
    2024:	88 23       	and	r24, r24
    2026:	99 f5       	brne	.+102    	; 0x208e <xQueueGenericReceive+0x1bc>
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	9b 81       	ldd	r25, Y+3	; 0x03
    202c:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvIsQueueEmpty>
    2030:	88 23       	and	r24, r24
    2032:	31 f1       	breq	.+76     	; 0x2080 <xQueueGenericReceive+0x1ae>
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	fc 01       	movw	r30, r24
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	89 2b       	or	r24, r25
    2040:	61 f4       	brne	.+24     	; 0x205a <xQueueGenericReceive+0x188>
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	0f 92       	push	r0
    2048:	8a 81       	ldd	r24, Y+2	; 0x02
    204a:	9b 81       	ldd	r25, Y+3	; 0x03
    204c:	fc 01       	movw	r30, r24
    204e:	82 81       	ldd	r24, Z+2	; 0x02
    2050:	93 81       	ldd	r25, Z+3	; 0x03
    2052:	0e 94 50 18 	call	0x30a0	; 0x30a0 <vTaskPriorityInherit>
    2056:	0f 90       	pop	r0
    2058:	0f be       	out	0x3f, r0	; 63
    205a:	2e 85       	ldd	r18, Y+14	; 0x0e
    205c:	3f 85       	ldd	r19, Y+15	; 0x0f
    205e:	8a 81       	ldd	r24, Y+2	; 0x02
    2060:	9b 81       	ldd	r25, Y+3	; 0x03
    2062:	41 96       	adiw	r24, 0x11	; 17
    2064:	b9 01       	movw	r22, r18
    2066:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <vTaskPlaceOnEventList>
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    2072:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    2076:	88 23       	and	r24, r24
    2078:	c1 f4       	brne	.+48     	; 0x20aa <xQueueGenericReceive+0x1d8>
    207a:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    207e:	15 c0       	rjmp	.+42     	; 0x20aa <xQueueGenericReceive+0x1d8>
    2080:	8a 81       	ldd	r24, Y+2	; 0x02
    2082:	9b 81       	ldd	r25, Y+3	; 0x03
    2084:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    2088:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    208c:	38 cf       	rjmp	.-400    	; 0x1efe <xQueueGenericReceive+0x2c>
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	9b 81       	ldd	r25, Y+3	; 0x03
    2092:	0e 94 7f 11 	call	0x22fe	; 0x22fe <prvUnlockQueue>
    2096:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    209a:	8a 81       	ldd	r24, Y+2	; 0x02
    209c:	9b 81       	ldd	r25, Y+3	; 0x03
    209e:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvIsQueueEmpty>
    20a2:	88 23       	and	r24, r24
    20a4:	11 f0       	breq	.+4      	; 0x20aa <xQueueGenericReceive+0x1d8>
    20a6:	80 e0       	ldi	r24, 0x00	; 0
    20a8:	01 c0       	rjmp	.+2      	; 0x20ac <xQueueGenericReceive+0x1da>
    20aa:	29 cf       	rjmp	.-430    	; 0x1efe <xQueueGenericReceive+0x2c>
    20ac:	60 96       	adiw	r28, 0x10	; 16
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <prvCopyDataToQueue>:
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	27 97       	sbiw	r28, 0x07	; 7
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	9c 83       	std	Y+4, r25	; 0x04
    20d4:	8b 83       	std	Y+3, r24	; 0x03
    20d6:	7e 83       	std	Y+6, r23	; 0x06
    20d8:	6d 83       	std	Y+5, r22	; 0x05
    20da:	4f 83       	std	Y+7, r20	; 0x07
    20dc:	19 82       	std	Y+1, r1	; 0x01
    20de:	8b 81       	ldd	r24, Y+3	; 0x03
    20e0:	9c 81       	ldd	r25, Y+4	; 0x04
    20e2:	fc 01       	movw	r30, r24
    20e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	8b 81       	ldd	r24, Y+3	; 0x03
    20ea:	9c 81       	ldd	r25, Y+4	; 0x04
    20ec:	fc 01       	movw	r30, r24
    20ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    20f0:	88 23       	and	r24, r24
    20f2:	b1 f4       	brne	.+44     	; 0x2120 <prvCopyDataToQueue+0x62>
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	9c 81       	ldd	r25, Y+4	; 0x04
    20f8:	fc 01       	movw	r30, r24
    20fa:	80 81       	ld	r24, Z
    20fc:	91 81       	ldd	r25, Z+1	; 0x01
    20fe:	89 2b       	or	r24, r25
    2100:	09 f0       	breq	.+2      	; 0x2104 <prvCopyDataToQueue+0x46>
    2102:	9c c0       	rjmp	.+312    	; 0x223c <prvCopyDataToQueue+0x17e>
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	9c 81       	ldd	r25, Y+4	; 0x04
    2108:	fc 01       	movw	r30, r24
    210a:	82 81       	ldd	r24, Z+2	; 0x02
    210c:	93 81       	ldd	r25, Z+3	; 0x03
    210e:	0e 94 e7 18 	call	0x31ce	; 0x31ce <xTaskPriorityDisinherit>
    2112:	89 83       	std	Y+1, r24	; 0x01
    2114:	8b 81       	ldd	r24, Y+3	; 0x03
    2116:	9c 81       	ldd	r25, Y+4	; 0x04
    2118:	fc 01       	movw	r30, r24
    211a:	13 82       	std	Z+3, r1	; 0x03
    211c:	12 82       	std	Z+2, r1	; 0x02
    211e:	8e c0       	rjmp	.+284    	; 0x223c <prvCopyDataToQueue+0x17e>
    2120:	8f 81       	ldd	r24, Y+7	; 0x07
    2122:	88 23       	and	r24, r24
    2124:	d9 f5       	brne	.+118    	; 0x219c <prvCopyDataToQueue+0xde>
    2126:	8b 81       	ldd	r24, Y+3	; 0x03
    2128:	9c 81       	ldd	r25, Y+4	; 0x04
    212a:	fc 01       	movw	r30, r24
    212c:	84 8d       	ldd	r24, Z+28	; 0x1c
    212e:	48 2f       	mov	r20, r24
    2130:	50 e0       	ldi	r21, 0x00	; 0
    2132:	8b 81       	ldd	r24, Y+3	; 0x03
    2134:	9c 81       	ldd	r25, Y+4	; 0x04
    2136:	fc 01       	movw	r30, r24
    2138:	84 81       	ldd	r24, Z+4	; 0x04
    213a:	95 81       	ldd	r25, Z+5	; 0x05
    213c:	2d 81       	ldd	r18, Y+5	; 0x05
    213e:	3e 81       	ldd	r19, Y+6	; 0x06
    2140:	b9 01       	movw	r22, r18
    2142:	0e 94 be 1b 	call	0x377c	; 0x377c <memcpy>
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	9c 81       	ldd	r25, Y+4	; 0x04
    214a:	fc 01       	movw	r30, r24
    214c:	24 81       	ldd	r18, Z+4	; 0x04
    214e:	35 81       	ldd	r19, Z+5	; 0x05
    2150:	8b 81       	ldd	r24, Y+3	; 0x03
    2152:	9c 81       	ldd	r25, Y+4	; 0x04
    2154:	fc 01       	movw	r30, r24
    2156:	84 8d       	ldd	r24, Z+28	; 0x1c
    2158:	88 2f       	mov	r24, r24
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	28 0f       	add	r18, r24
    215e:	39 1f       	adc	r19, r25
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	fc 01       	movw	r30, r24
    2166:	35 83       	std	Z+5, r19	; 0x05
    2168:	24 83       	std	Z+4, r18	; 0x04
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	9c 81       	ldd	r25, Y+4	; 0x04
    216e:	fc 01       	movw	r30, r24
    2170:	24 81       	ldd	r18, Z+4	; 0x04
    2172:	35 81       	ldd	r19, Z+5	; 0x05
    2174:	8b 81       	ldd	r24, Y+3	; 0x03
    2176:	9c 81       	ldd	r25, Y+4	; 0x04
    2178:	fc 01       	movw	r30, r24
    217a:	82 81       	ldd	r24, Z+2	; 0x02
    217c:	93 81       	ldd	r25, Z+3	; 0x03
    217e:	28 17       	cp	r18, r24
    2180:	39 07       	cpc	r19, r25
    2182:	08 f4       	brcc	.+2      	; 0x2186 <prvCopyDataToQueue+0xc8>
    2184:	5b c0       	rjmp	.+182    	; 0x223c <prvCopyDataToQueue+0x17e>
    2186:	8b 81       	ldd	r24, Y+3	; 0x03
    2188:	9c 81       	ldd	r25, Y+4	; 0x04
    218a:	fc 01       	movw	r30, r24
    218c:	20 81       	ld	r18, Z
    218e:	31 81       	ldd	r19, Z+1	; 0x01
    2190:	8b 81       	ldd	r24, Y+3	; 0x03
    2192:	9c 81       	ldd	r25, Y+4	; 0x04
    2194:	fc 01       	movw	r30, r24
    2196:	35 83       	std	Z+5, r19	; 0x05
    2198:	24 83       	std	Z+4, r18	; 0x04
    219a:	50 c0       	rjmp	.+160    	; 0x223c <prvCopyDataToQueue+0x17e>
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	fc 01       	movw	r30, r24
    21a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    21a4:	48 2f       	mov	r20, r24
    21a6:	50 e0       	ldi	r21, 0x00	; 0
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	9c 81       	ldd	r25, Y+4	; 0x04
    21ac:	fc 01       	movw	r30, r24
    21ae:	86 81       	ldd	r24, Z+6	; 0x06
    21b0:	97 81       	ldd	r25, Z+7	; 0x07
    21b2:	2d 81       	ldd	r18, Y+5	; 0x05
    21b4:	3e 81       	ldd	r19, Y+6	; 0x06
    21b6:	b9 01       	movw	r22, r18
    21b8:	0e 94 be 1b 	call	0x377c	; 0x377c <memcpy>
    21bc:	8b 81       	ldd	r24, Y+3	; 0x03
    21be:	9c 81       	ldd	r25, Y+4	; 0x04
    21c0:	fc 01       	movw	r30, r24
    21c2:	26 81       	ldd	r18, Z+6	; 0x06
    21c4:	37 81       	ldd	r19, Z+7	; 0x07
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	fc 01       	movw	r30, r24
    21cc:	84 8d       	ldd	r24, Z+28	; 0x1c
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	91 95       	neg	r25
    21d4:	81 95       	neg	r24
    21d6:	91 09       	sbc	r25, r1
    21d8:	28 0f       	add	r18, r24
    21da:	39 1f       	adc	r19, r25
    21dc:	8b 81       	ldd	r24, Y+3	; 0x03
    21de:	9c 81       	ldd	r25, Y+4	; 0x04
    21e0:	fc 01       	movw	r30, r24
    21e2:	37 83       	std	Z+7, r19	; 0x07
    21e4:	26 83       	std	Z+6, r18	; 0x06
    21e6:	8b 81       	ldd	r24, Y+3	; 0x03
    21e8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ea:	fc 01       	movw	r30, r24
    21ec:	26 81       	ldd	r18, Z+6	; 0x06
    21ee:	37 81       	ldd	r19, Z+7	; 0x07
    21f0:	8b 81       	ldd	r24, Y+3	; 0x03
    21f2:	9c 81       	ldd	r25, Y+4	; 0x04
    21f4:	fc 01       	movw	r30, r24
    21f6:	80 81       	ld	r24, Z
    21f8:	91 81       	ldd	r25, Z+1	; 0x01
    21fa:	28 17       	cp	r18, r24
    21fc:	39 07       	cpc	r19, r25
    21fe:	a8 f4       	brcc	.+42     	; 0x222a <prvCopyDataToQueue+0x16c>
    2200:	8b 81       	ldd	r24, Y+3	; 0x03
    2202:	9c 81       	ldd	r25, Y+4	; 0x04
    2204:	fc 01       	movw	r30, r24
    2206:	22 81       	ldd	r18, Z+2	; 0x02
    2208:	33 81       	ldd	r19, Z+3	; 0x03
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	fc 01       	movw	r30, r24
    2210:	84 8d       	ldd	r24, Z+28	; 0x1c
    2212:	88 2f       	mov	r24, r24
    2214:	90 e0       	ldi	r25, 0x00	; 0
    2216:	91 95       	neg	r25
    2218:	81 95       	neg	r24
    221a:	91 09       	sbc	r25, r1
    221c:	28 0f       	add	r18, r24
    221e:	39 1f       	adc	r19, r25
    2220:	8b 81       	ldd	r24, Y+3	; 0x03
    2222:	9c 81       	ldd	r25, Y+4	; 0x04
    2224:	fc 01       	movw	r30, r24
    2226:	37 83       	std	Z+7, r19	; 0x07
    2228:	26 83       	std	Z+6, r18	; 0x06
    222a:	8f 81       	ldd	r24, Y+7	; 0x07
    222c:	82 30       	cpi	r24, 0x02	; 2
    222e:	31 f4       	brne	.+12     	; 0x223c <prvCopyDataToQueue+0x17e>
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	88 23       	and	r24, r24
    2234:	19 f0       	breq	.+6      	; 0x223c <prvCopyDataToQueue+0x17e>
    2236:	8a 81       	ldd	r24, Y+2	; 0x02
    2238:	81 50       	subi	r24, 0x01	; 1
    223a:	8a 83       	std	Y+2, r24	; 0x02
    223c:	8a 81       	ldd	r24, Y+2	; 0x02
    223e:	21 e0       	ldi	r18, 0x01	; 1
    2240:	28 0f       	add	r18, r24
    2242:	8b 81       	ldd	r24, Y+3	; 0x03
    2244:	9c 81       	ldd	r25, Y+4	; 0x04
    2246:	fc 01       	movw	r30, r24
    2248:	22 8f       	std	Z+26, r18	; 0x1a
    224a:	89 81       	ldd	r24, Y+1	; 0x01
    224c:	27 96       	adiw	r28, 0x07	; 7
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	08 95       	ret

0000225e <prvCopyDataFromQueue>:
    225e:	cf 93       	push	r28
    2260:	df 93       	push	r29
    2262:	00 d0       	rcall	.+0      	; 0x2264 <prvCopyDataFromQueue+0x6>
    2264:	00 d0       	rcall	.+0      	; 0x2266 <prvCopyDataFromQueue+0x8>
    2266:	cd b7       	in	r28, 0x3d	; 61
    2268:	de b7       	in	r29, 0x3e	; 62
    226a:	9a 83       	std	Y+2, r25	; 0x02
    226c:	89 83       	std	Y+1, r24	; 0x01
    226e:	7c 83       	std	Y+4, r23	; 0x04
    2270:	6b 83       	std	Y+3, r22	; 0x03
    2272:	89 81       	ldd	r24, Y+1	; 0x01
    2274:	9a 81       	ldd	r25, Y+2	; 0x02
    2276:	fc 01       	movw	r30, r24
    2278:	84 8d       	ldd	r24, Z+28	; 0x1c
    227a:	88 23       	and	r24, r24
    227c:	c9 f1       	breq	.+114    	; 0x22f0 <prvCopyDataFromQueue+0x92>
    227e:	89 81       	ldd	r24, Y+1	; 0x01
    2280:	9a 81       	ldd	r25, Y+2	; 0x02
    2282:	fc 01       	movw	r30, r24
    2284:	26 81       	ldd	r18, Z+6	; 0x06
    2286:	37 81       	ldd	r19, Z+7	; 0x07
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	fc 01       	movw	r30, r24
    228e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	28 0f       	add	r18, r24
    2296:	39 1f       	adc	r19, r25
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	9a 81       	ldd	r25, Y+2	; 0x02
    229c:	fc 01       	movw	r30, r24
    229e:	37 83       	std	Z+7, r19	; 0x07
    22a0:	26 83       	std	Z+6, r18	; 0x06
    22a2:	89 81       	ldd	r24, Y+1	; 0x01
    22a4:	9a 81       	ldd	r25, Y+2	; 0x02
    22a6:	fc 01       	movw	r30, r24
    22a8:	26 81       	ldd	r18, Z+6	; 0x06
    22aa:	37 81       	ldd	r19, Z+7	; 0x07
    22ac:	89 81       	ldd	r24, Y+1	; 0x01
    22ae:	9a 81       	ldd	r25, Y+2	; 0x02
    22b0:	fc 01       	movw	r30, r24
    22b2:	82 81       	ldd	r24, Z+2	; 0x02
    22b4:	93 81       	ldd	r25, Z+3	; 0x03
    22b6:	28 17       	cp	r18, r24
    22b8:	39 07       	cpc	r19, r25
    22ba:	50 f0       	brcs	.+20     	; 0x22d0 <prvCopyDataFromQueue+0x72>
    22bc:	89 81       	ldd	r24, Y+1	; 0x01
    22be:	9a 81       	ldd	r25, Y+2	; 0x02
    22c0:	fc 01       	movw	r30, r24
    22c2:	20 81       	ld	r18, Z
    22c4:	31 81       	ldd	r19, Z+1	; 0x01
    22c6:	89 81       	ldd	r24, Y+1	; 0x01
    22c8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ca:	fc 01       	movw	r30, r24
    22cc:	37 83       	std	Z+7, r19	; 0x07
    22ce:	26 83       	std	Z+6, r18	; 0x06
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	9a 81       	ldd	r25, Y+2	; 0x02
    22d4:	fc 01       	movw	r30, r24
    22d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    22d8:	48 2f       	mov	r20, r24
    22da:	50 e0       	ldi	r21, 0x00	; 0
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	fc 01       	movw	r30, r24
    22e2:	26 81       	ldd	r18, Z+6	; 0x06
    22e4:	37 81       	ldd	r19, Z+7	; 0x07
    22e6:	8b 81       	ldd	r24, Y+3	; 0x03
    22e8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ea:	b9 01       	movw	r22, r18
    22ec:	0e 94 be 1b 	call	0x377c	; 0x377c <memcpy>
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	08 95       	ret

000022fe <prvUnlockQueue>:
    22fe:	cf 93       	push	r28
    2300:	df 93       	push	r29
    2302:	00 d0       	rcall	.+0      	; 0x2304 <prvUnlockQueue+0x6>
    2304:	00 d0       	rcall	.+0      	; 0x2306 <prvUnlockQueue+0x8>
    2306:	cd b7       	in	r28, 0x3d	; 61
    2308:	de b7       	in	r29, 0x3e	; 62
    230a:	9c 83       	std	Y+4, r25	; 0x04
    230c:	8b 83       	std	Y+3, r24	; 0x03
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	0f 92       	push	r0
    2314:	8b 81       	ldd	r24, Y+3	; 0x03
    2316:	9c 81       	ldd	r25, Y+4	; 0x04
    2318:	fc 01       	movw	r30, r24
    231a:	86 8d       	ldd	r24, Z+30	; 0x1e
    231c:	89 83       	std	Y+1, r24	; 0x01
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <prvUnlockQueue+0x4a>
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	fc 01       	movw	r30, r24
    2326:	81 89       	ldd	r24, Z+17	; 0x11
    2328:	88 23       	and	r24, r24
    232a:	51 f0       	breq	.+20     	; 0x2340 <prvUnlockQueue+0x42>
    232c:	8b 81       	ldd	r24, Y+3	; 0x03
    232e:	9c 81       	ldd	r25, Y+4	; 0x04
    2330:	41 96       	adiw	r24, 0x11	; 17
    2332:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    2336:	88 23       	and	r24, r24
    2338:	21 f0       	breq	.+8      	; 0x2342 <prvUnlockQueue+0x44>
    233a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <vTaskMissedYield>
    233e:	01 c0       	rjmp	.+2      	; 0x2342 <prvUnlockQueue+0x44>
    2340:	06 c0       	rjmp	.+12     	; 0x234e <prvUnlockQueue+0x50>
    2342:	89 81       	ldd	r24, Y+1	; 0x01
    2344:	81 50       	subi	r24, 0x01	; 1
    2346:	89 83       	std	Y+1, r24	; 0x01
    2348:	89 81       	ldd	r24, Y+1	; 0x01
    234a:	18 16       	cp	r1, r24
    234c:	4c f3       	brlt	.-46     	; 0x2320 <prvUnlockQueue+0x22>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	2f ef       	ldi	r18, 0xFF	; 255
    2354:	fc 01       	movw	r30, r24
    2356:	26 8f       	std	Z+30, r18	; 0x1e
    2358:	0f 90       	pop	r0
    235a:	0f be       	out	0x3f, r0	; 63
    235c:	0f b6       	in	r0, 0x3f	; 63
    235e:	f8 94       	cli
    2360:	0f 92       	push	r0
    2362:	8b 81       	ldd	r24, Y+3	; 0x03
    2364:	9c 81       	ldd	r25, Y+4	; 0x04
    2366:	fc 01       	movw	r30, r24
    2368:	85 8d       	ldd	r24, Z+29	; 0x1d
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	14 c0       	rjmp	.+40     	; 0x2396 <prvUnlockQueue+0x98>
    236e:	8b 81       	ldd	r24, Y+3	; 0x03
    2370:	9c 81       	ldd	r25, Y+4	; 0x04
    2372:	fc 01       	movw	r30, r24
    2374:	80 85       	ldd	r24, Z+8	; 0x08
    2376:	88 23       	and	r24, r24
    2378:	69 f0       	breq	.+26     	; 0x2394 <prvUnlockQueue+0x96>
    237a:	8b 81       	ldd	r24, Y+3	; 0x03
    237c:	9c 81       	ldd	r25, Y+4	; 0x04
    237e:	08 96       	adiw	r24, 0x08	; 8
    2380:	0e 94 82 16 	call	0x2d04	; 0x2d04 <xTaskRemoveFromEventList>
    2384:	88 23       	and	r24, r24
    2386:	11 f0       	breq	.+4      	; 0x238c <prvUnlockQueue+0x8e>
    2388:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <vTaskMissedYield>
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	81 50       	subi	r24, 0x01	; 1
    2390:	8a 83       	std	Y+2, r24	; 0x02
    2392:	01 c0       	rjmp	.+2      	; 0x2396 <prvUnlockQueue+0x98>
    2394:	03 c0       	rjmp	.+6      	; 0x239c <prvUnlockQueue+0x9e>
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	18 16       	cp	r1, r24
    239a:	4c f3       	brlt	.-46     	; 0x236e <prvUnlockQueue+0x70>
    239c:	8b 81       	ldd	r24, Y+3	; 0x03
    239e:	9c 81       	ldd	r25, Y+4	; 0x04
    23a0:	2f ef       	ldi	r18, 0xFF	; 255
    23a2:	fc 01       	movw	r30, r24
    23a4:	25 8f       	std	Z+29, r18	; 0x1d
    23a6:	0f 90       	pop	r0
    23a8:	0f be       	out	0x3f, r0	; 63
    23aa:	0f 90       	pop	r0
    23ac:	0f 90       	pop	r0
    23ae:	0f 90       	pop	r0
    23b0:	0f 90       	pop	r0
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <prvIsQueueEmpty>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	00 d0       	rcall	.+0      	; 0x23be <prvIsQueueEmpty+0x6>
    23be:	1f 92       	push	r1
    23c0:	cd b7       	in	r28, 0x3d	; 61
    23c2:	de b7       	in	r29, 0x3e	; 62
    23c4:	9b 83       	std	Y+3, r25	; 0x03
    23c6:	8a 83       	std	Y+2, r24	; 0x02
    23c8:	0f b6       	in	r0, 0x3f	; 63
    23ca:	f8 94       	cli
    23cc:	0f 92       	push	r0
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	fc 01       	movw	r30, r24
    23d4:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d6:	88 23       	and	r24, r24
    23d8:	19 f4       	brne	.+6      	; 0x23e0 <prvIsQueueEmpty+0x28>
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	89 83       	std	Y+1, r24	; 0x01
    23de:	01 c0       	rjmp	.+2      	; 0x23e2 <prvIsQueueEmpty+0x2a>
    23e0:	19 82       	std	Y+1, r1	; 0x01
    23e2:	0f 90       	pop	r0
    23e4:	0f be       	out	0x3f, r0	; 63
    23e6:	89 81       	ldd	r24, Y+1	; 0x01
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    23f4:	cf 93       	push	r28
    23f6:	df 93       	push	r29
    23f8:	00 d0       	rcall	.+0      	; 0x23fa <prvIsQueueFull+0x6>
    23fa:	1f 92       	push	r1
    23fc:	cd b7       	in	r28, 0x3d	; 61
    23fe:	de b7       	in	r29, 0x3e	; 62
    2400:	9b 83       	std	Y+3, r25	; 0x03
    2402:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2404:	0f b6       	in	r0, 0x3f	; 63
    2406:	f8 94       	cli
    2408:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	9b 81       	ldd	r25, Y+3	; 0x03
    240e:	fc 01       	movw	r30, r24
    2410:	22 8d       	ldd	r18, Z+26	; 0x1a
    2412:	8a 81       	ldd	r24, Y+2	; 0x02
    2414:	9b 81       	ldd	r25, Y+3	; 0x03
    2416:	fc 01       	movw	r30, r24
    2418:	83 8d       	ldd	r24, Z+27	; 0x1b
    241a:	28 17       	cp	r18, r24
    241c:	19 f4       	brne	.+6      	; 0x2424 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	01 c0       	rjmp	.+2      	; 0x2426 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2424:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2426:	0f 90       	pop	r0
    2428:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    242a:	89 81       	ldd	r24, Y+1	; 0x01
}
    242c:	0f 90       	pop	r0
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	df 91       	pop	r29
    2434:	cf 91       	pop	r28
    2436:	08 95       	ret

00002438 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2438:	8f 92       	push	r8
    243a:	9f 92       	push	r9
    243c:	af 92       	push	r10
    243e:	bf 92       	push	r11
    2440:	cf 92       	push	r12
    2442:	df 92       	push	r13
    2444:	ef 92       	push	r14
    2446:	ff 92       	push	r15
    2448:	0f 93       	push	r16
    244a:	1f 93       	push	r17
    244c:	cf 93       	push	r28
    244e:	df 93       	push	r29
    2450:	cd b7       	in	r28, 0x3d	; 61
    2452:	de b7       	in	r29, 0x3e	; 62
    2454:	60 97       	sbiw	r28, 0x10	; 16
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	9f 83       	std	Y+7, r25	; 0x07
    2462:	8e 83       	std	Y+6, r24	; 0x06
    2464:	79 87       	std	Y+9, r23	; 0x09
    2466:	68 87       	std	Y+8, r22	; 0x08
    2468:	5b 87       	std	Y+11, r21	; 0x0b
    246a:	4a 87       	std	Y+10, r20	; 0x0a
    246c:	3d 87       	std	Y+13, r19	; 0x0d
    246e:	2c 87       	std	Y+12, r18	; 0x0c
    2470:	0e 87       	std	Y+14, r16	; 0x0e
    2472:	f8 8a       	std	Y+16, r15	; 0x10
    2474:	ef 86       	std	Y+15, r14	; 0x0f
    2476:	8a 85       	ldd	r24, Y+10	; 0x0a
    2478:	9b 85       	ldd	r25, Y+11	; 0x0b
    247a:	0e 94 67 0a 	call	0x14ce	; 0x14ce <pvPortMalloc>
    247e:	9d 83       	std	Y+5, r25	; 0x05
    2480:	8c 83       	std	Y+4, r24	; 0x04
    2482:	8c 81       	ldd	r24, Y+4	; 0x04
    2484:	9d 81       	ldd	r25, Y+5	; 0x05
    2486:	89 2b       	or	r24, r25
    2488:	b9 f0       	breq	.+46     	; 0x24b8 <xTaskCreate+0x80>
    248a:	8c e2       	ldi	r24, 0x2C	; 44
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 67 0a 	call	0x14ce	; 0x14ce <pvPortMalloc>
    2492:	9a 83       	std	Y+2, r25	; 0x02
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	89 81       	ldd	r24, Y+1	; 0x01
    2498:	9a 81       	ldd	r25, Y+2	; 0x02
    249a:	89 2b       	or	r24, r25
    249c:	41 f0       	breq	.+16     	; 0x24ae <xTaskCreate+0x76>
    249e:	89 81       	ldd	r24, Y+1	; 0x01
    24a0:	9a 81       	ldd	r25, Y+2	; 0x02
    24a2:	2c 81       	ldd	r18, Y+4	; 0x04
    24a4:	3d 81       	ldd	r19, Y+5	; 0x05
    24a6:	fc 01       	movw	r30, r24
    24a8:	30 8f       	std	Z+24, r19	; 0x18
    24aa:	27 8b       	std	Z+23, r18	; 0x17
    24ac:	07 c0       	rjmp	.+14     	; 0x24bc <xTaskCreate+0x84>
    24ae:	8c 81       	ldd	r24, Y+4	; 0x04
    24b0:	9d 81       	ldd	r25, Y+5	; 0x05
    24b2:	0e 94 bc 0a 	call	0x1578	; 0x1578 <vPortFree>
    24b6:	02 c0       	rjmp	.+4      	; 0x24bc <xTaskCreate+0x84>
    24b8:	1a 82       	std	Y+2, r1	; 0x02
    24ba:	19 82       	std	Y+1, r1	; 0x01
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	9a 81       	ldd	r25, Y+2	; 0x02
    24c0:	89 2b       	or	r24, r25
    24c2:	09 f1       	breq	.+66     	; 0x2506 <xTaskCreate+0xce>
    24c4:	8a 85       	ldd	r24, Y+10	; 0x0a
    24c6:	9b 85       	ldd	r25, Y+11	; 0x0b
    24c8:	cc 01       	movw	r24, r24
    24ca:	a0 e0       	ldi	r26, 0x00	; 0
    24cc:	b0 e0       	ldi	r27, 0x00	; 0
    24ce:	09 81       	ldd	r16, Y+1	; 0x01
    24d0:	1a 81       	ldd	r17, Y+2	; 0x02
    24d2:	4f 85       	ldd	r20, Y+15	; 0x0f
    24d4:	58 89       	ldd	r21, Y+16	; 0x10
    24d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    24d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    24da:	68 85       	ldd	r22, Y+8	; 0x08
    24dc:	79 85       	ldd	r23, Y+9	; 0x09
    24de:	ee 81       	ldd	r30, Y+6	; 0x06
    24e0:	ff 81       	ldd	r31, Y+7	; 0x07
    24e2:	81 2c       	mov	r8, r1
    24e4:	91 2c       	mov	r9, r1
    24e6:	58 01       	movw	r10, r16
    24e8:	6a 01       	movw	r12, r20
    24ea:	ee 84       	ldd	r14, Y+14	; 0x0e
    24ec:	89 01       	movw	r16, r18
    24ee:	9c 01       	movw	r18, r24
    24f0:	ad 01       	movw	r20, r26
    24f2:	cf 01       	movw	r24, r30
    24f4:	0e 94 99 12 	call	0x2532	; 0x2532 <prvInitialiseNewTask>
    24f8:	89 81       	ldd	r24, Y+1	; 0x01
    24fa:	9a 81       	ldd	r25, Y+2	; 0x02
    24fc:	0e 94 73 13 	call	0x26e6	; 0x26e6 <prvAddNewTaskToReadyList>
    2500:	81 e0       	ldi	r24, 0x01	; 1
    2502:	8b 83       	std	Y+3, r24	; 0x03
    2504:	02 c0       	rjmp	.+4      	; 0x250a <xTaskCreate+0xd2>
    2506:	8f ef       	ldi	r24, 0xFF	; 255
    2508:	8b 83       	std	Y+3, r24	; 0x03
    250a:	8b 81       	ldd	r24, Y+3	; 0x03
    250c:	60 96       	adiw	r28, 0x10	; 16
    250e:	0f b6       	in	r0, 0x3f	; 63
    2510:	f8 94       	cli
    2512:	de bf       	out	0x3e, r29	; 62
    2514:	0f be       	out	0x3f, r0	; 63
    2516:	cd bf       	out	0x3d, r28	; 61
    2518:	df 91       	pop	r29
    251a:	cf 91       	pop	r28
    251c:	1f 91       	pop	r17
    251e:	0f 91       	pop	r16
    2520:	ff 90       	pop	r15
    2522:	ef 90       	pop	r14
    2524:	df 90       	pop	r13
    2526:	cf 90       	pop	r12
    2528:	bf 90       	pop	r11
    252a:	af 90       	pop	r10
    252c:	9f 90       	pop	r9
    252e:	8f 90       	pop	r8
    2530:	08 95       	ret

00002532 <prvInitialiseNewTask>:
    2532:	8f 92       	push	r8
    2534:	9f 92       	push	r9
    2536:	af 92       	push	r10
    2538:	bf 92       	push	r11
    253a:	cf 92       	push	r12
    253c:	df 92       	push	r13
    253e:	ef 92       	push	r14
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
    2544:	cf 93       	push	r28
    2546:	df 93       	push	r29
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	64 97       	sbiw	r28, 0x14	; 20
    254e:	0f b6       	in	r0, 0x3f	; 63
    2550:	f8 94       	cli
    2552:	de bf       	out	0x3e, r29	; 62
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	cd bf       	out	0x3d, r28	; 61
    2558:	9d 83       	std	Y+5, r25	; 0x05
    255a:	8c 83       	std	Y+4, r24	; 0x04
    255c:	7f 83       	std	Y+7, r23	; 0x07
    255e:	6e 83       	std	Y+6, r22	; 0x06
    2560:	28 87       	std	Y+8, r18	; 0x08
    2562:	39 87       	std	Y+9, r19	; 0x09
    2564:	4a 87       	std	Y+10, r20	; 0x0a
    2566:	5b 87       	std	Y+11, r21	; 0x0b
    2568:	1d 87       	std	Y+13, r17	; 0x0d
    256a:	0c 87       	std	Y+12, r16	; 0x0c
    256c:	ee 86       	std	Y+14, r14	; 0x0e
    256e:	d8 8a       	std	Y+16, r13	; 0x10
    2570:	cf 86       	std	Y+15, r12	; 0x0f
    2572:	ba 8a       	std	Y+18, r11	; 0x12
    2574:	a9 8a       	std	Y+17, r10	; 0x11
    2576:	9c 8a       	std	Y+20, r9	; 0x14
    2578:	8b 8a       	std	Y+19, r8	; 0x13
    257a:	28 85       	ldd	r18, Y+8	; 0x08
    257c:	39 85       	ldd	r19, Y+9	; 0x09
    257e:	89 89       	ldd	r24, Y+17	; 0x11
    2580:	9a 89       	ldd	r25, Y+18	; 0x12
    2582:	fc 01       	movw	r30, r24
    2584:	87 89       	ldd	r24, Z+23	; 0x17
    2586:	90 8d       	ldd	r25, Z+24	; 0x18
    2588:	a9 01       	movw	r20, r18
    258a:	65 ea       	ldi	r22, 0xA5	; 165
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	0e 94 c7 1b 	call	0x378e	; 0x378e <memset>
    2592:	89 89       	ldd	r24, Y+17	; 0x11
    2594:	9a 89       	ldd	r25, Y+18	; 0x12
    2596:	fc 01       	movw	r30, r24
    2598:	27 89       	ldd	r18, Z+23	; 0x17
    259a:	30 8d       	ldd	r19, Z+24	; 0x18
    259c:	88 85       	ldd	r24, Y+8	; 0x08
    259e:	99 85       	ldd	r25, Y+9	; 0x09
    25a0:	01 97       	sbiw	r24, 0x01	; 1
    25a2:	82 0f       	add	r24, r18
    25a4:	93 1f       	adc	r25, r19
    25a6:	9b 83       	std	Y+3, r25	; 0x03
    25a8:	8a 83       	std	Y+2, r24	; 0x02
    25aa:	19 82       	std	Y+1, r1	; 0x01
    25ac:	22 c0       	rjmp	.+68     	; 0x25f2 <prvInitialiseNewTask+0xc0>
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
    25b0:	88 2f       	mov	r24, r24
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	29 81       	ldd	r18, Y+1	; 0x01
    25b6:	22 2f       	mov	r18, r18
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	4e 81       	ldd	r20, Y+6	; 0x06
    25bc:	5f 81       	ldd	r21, Y+7	; 0x07
    25be:	24 0f       	add	r18, r20
    25c0:	35 1f       	adc	r19, r21
    25c2:	f9 01       	movw	r30, r18
    25c4:	40 81       	ld	r20, Z
    25c6:	29 89       	ldd	r18, Y+17	; 0x11
    25c8:	3a 89       	ldd	r19, Y+18	; 0x12
    25ca:	82 0f       	add	r24, r18
    25cc:	93 1f       	adc	r25, r19
    25ce:	49 96       	adiw	r24, 0x19	; 25
    25d0:	fc 01       	movw	r30, r24
    25d2:	40 83       	st	Z, r20
    25d4:	89 81       	ldd	r24, Y+1	; 0x01
    25d6:	88 2f       	mov	r24, r24
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	2e 81       	ldd	r18, Y+6	; 0x06
    25dc:	3f 81       	ldd	r19, Y+7	; 0x07
    25de:	82 0f       	add	r24, r18
    25e0:	93 1f       	adc	r25, r19
    25e2:	fc 01       	movw	r30, r24
    25e4:	80 81       	ld	r24, Z
    25e6:	88 23       	and	r24, r24
    25e8:	09 f4       	brne	.+2      	; 0x25ec <prvInitialiseNewTask+0xba>
    25ea:	06 c0       	rjmp	.+12     	; 0x25f8 <prvInitialiseNewTask+0xc6>
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	8f 5f       	subi	r24, 0xFF	; 255
    25f0:	89 83       	std	Y+1, r24	; 0x01
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	88 30       	cpi	r24, 0x08	; 8
    25f6:	d8 f2       	brcs	.-74     	; 0x25ae <prvInitialiseNewTask+0x7c>
    25f8:	89 89       	ldd	r24, Y+17	; 0x11
    25fa:	9a 89       	ldd	r25, Y+18	; 0x12
    25fc:	fc 01       	movw	r30, r24
    25fe:	10 a2       	std	Z+32, r1	; 0x20
    2600:	8e 85       	ldd	r24, Y+14	; 0x0e
    2602:	84 30       	cpi	r24, 0x04	; 4
    2604:	10 f0       	brcs	.+4      	; 0x260a <prvInitialiseNewTask+0xd8>
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	8e 87       	std	Y+14, r24	; 0x0e
    260a:	89 89       	ldd	r24, Y+17	; 0x11
    260c:	9a 89       	ldd	r25, Y+18	; 0x12
    260e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2610:	fc 01       	movw	r30, r24
    2612:	26 8b       	std	Z+22, r18	; 0x16
    2614:	89 89       	ldd	r24, Y+17	; 0x11
    2616:	9a 89       	ldd	r25, Y+18	; 0x12
    2618:	2e 85       	ldd	r18, Y+14	; 0x0e
    261a:	fc 01       	movw	r30, r24
    261c:	23 a3       	std	Z+35, r18	; 0x23
    261e:	89 89       	ldd	r24, Y+17	; 0x11
    2620:	9a 89       	ldd	r25, Y+18	; 0x12
    2622:	fc 01       	movw	r30, r24
    2624:	14 a2       	std	Z+36, r1	; 0x24
    2626:	89 89       	ldd	r24, Y+17	; 0x11
    2628:	9a 89       	ldd	r25, Y+18	; 0x12
    262a:	02 96       	adiw	r24, 0x02	; 2
    262c:	0e 94 42 06 	call	0xc84	; 0xc84 <vListInitialiseItem>
    2630:	89 89       	ldd	r24, Y+17	; 0x11
    2632:	9a 89       	ldd	r25, Y+18	; 0x12
    2634:	0c 96       	adiw	r24, 0x0c	; 12
    2636:	0e 94 42 06 	call	0xc84	; 0xc84 <vListInitialiseItem>
    263a:	89 89       	ldd	r24, Y+17	; 0x11
    263c:	9a 89       	ldd	r25, Y+18	; 0x12
    263e:	29 89       	ldd	r18, Y+17	; 0x11
    2640:	3a 89       	ldd	r19, Y+18	; 0x12
    2642:	fc 01       	movw	r30, r24
    2644:	31 87       	std	Z+9, r19	; 0x09
    2646:	20 87       	std	Z+8, r18	; 0x08
    2648:	8e 85       	ldd	r24, Y+14	; 0x0e
    264a:	88 2f       	mov	r24, r24
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	24 e0       	ldi	r18, 0x04	; 4
    2650:	30 e0       	ldi	r19, 0x00	; 0
    2652:	28 1b       	sub	r18, r24
    2654:	39 0b       	sbc	r19, r25
    2656:	89 89       	ldd	r24, Y+17	; 0x11
    2658:	9a 89       	ldd	r25, Y+18	; 0x12
    265a:	fc 01       	movw	r30, r24
    265c:	35 87       	std	Z+13, r19	; 0x0d
    265e:	24 87       	std	Z+12, r18	; 0x0c
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	9a 89       	ldd	r25, Y+18	; 0x12
    2664:	29 89       	ldd	r18, Y+17	; 0x11
    2666:	3a 89       	ldd	r19, Y+18	; 0x12
    2668:	fc 01       	movw	r30, r24
    266a:	33 8b       	std	Z+19, r19	; 0x13
    266c:	22 8b       	std	Z+18, r18	; 0x12
    266e:	89 89       	ldd	r24, Y+17	; 0x11
    2670:	9a 89       	ldd	r25, Y+18	; 0x12
    2672:	fc 01       	movw	r30, r24
    2674:	16 a2       	std	Z+38, r1	; 0x26
    2676:	15 a2       	std	Z+37, r1	; 0x25
    2678:	89 89       	ldd	r24, Y+17	; 0x11
    267a:	9a 89       	ldd	r25, Y+18	; 0x12
    267c:	fc 01       	movw	r30, r24
    267e:	17 a2       	std	Z+39, r1	; 0x27
    2680:	10 a6       	std	Z+40, r1	; 0x28
    2682:	11 a6       	std	Z+41, r1	; 0x29
    2684:	12 a6       	std	Z+42, r1	; 0x2a
    2686:	89 89       	ldd	r24, Y+17	; 0x11
    2688:	9a 89       	ldd	r25, Y+18	; 0x12
    268a:	fc 01       	movw	r30, r24
    268c:	13 a6       	std	Z+43, r1	; 0x2b
    268e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2690:	5d 85       	ldd	r21, Y+13	; 0x0d
    2692:	2c 81       	ldd	r18, Y+4	; 0x04
    2694:	3d 81       	ldd	r19, Y+5	; 0x05
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	9b 81       	ldd	r25, Y+3	; 0x03
    269a:	b9 01       	movw	r22, r18
    269c:	0e 94 6f 07 	call	0xede	; 0xede <pxPortInitialiseStack>
    26a0:	9c 01       	movw	r18, r24
    26a2:	89 89       	ldd	r24, Y+17	; 0x11
    26a4:	9a 89       	ldd	r25, Y+18	; 0x12
    26a6:	fc 01       	movw	r30, r24
    26a8:	31 83       	std	Z+1, r19	; 0x01
    26aa:	20 83       	st	Z, r18
    26ac:	8f 85       	ldd	r24, Y+15	; 0x0f
    26ae:	98 89       	ldd	r25, Y+16	; 0x10
    26b0:	89 2b       	or	r24, r25
    26b2:	39 f0       	breq	.+14     	; 0x26c2 <prvInitialiseNewTask+0x190>
    26b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b6:	98 89       	ldd	r25, Y+16	; 0x10
    26b8:	29 89       	ldd	r18, Y+17	; 0x11
    26ba:	3a 89       	ldd	r19, Y+18	; 0x12
    26bc:	fc 01       	movw	r30, r24
    26be:	31 83       	std	Z+1, r19	; 0x01
    26c0:	20 83       	st	Z, r18
    26c2:	64 96       	adiw	r28, 0x14	; 20
    26c4:	0f b6       	in	r0, 0x3f	; 63
    26c6:	f8 94       	cli
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	cd bf       	out	0x3d, r28	; 61
    26ce:	df 91       	pop	r29
    26d0:	cf 91       	pop	r28
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ef 90       	pop	r14
    26d8:	df 90       	pop	r13
    26da:	cf 90       	pop	r12
    26dc:	bf 90       	pop	r11
    26de:	af 90       	pop	r10
    26e0:	9f 90       	pop	r9
    26e2:	8f 90       	pop	r8
    26e4:	08 95       	ret

000026e6 <prvAddNewTaskToReadyList>:
    26e6:	cf 93       	push	r28
    26e8:	df 93       	push	r29
    26ea:	00 d0       	rcall	.+0      	; 0x26ec <prvAddNewTaskToReadyList+0x6>
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9a 83       	std	Y+2, r25	; 0x02
    26f2:	89 83       	std	Y+1, r24	; 0x01
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	0f 92       	push	r0
    26fa:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    26fe:	8f 5f       	subi	r24, 0xFF	; 255
    2700:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    2704:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2708:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    270c:	89 2b       	or	r24, r25
    270e:	69 f4       	brne	.+26     	; 0x272a <prvAddNewTaskToReadyList+0x44>
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2718:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    271c:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2720:	81 30       	cpi	r24, 0x01	; 1
    2722:	c9 f4       	brne	.+50     	; 0x2756 <prvAddNewTaskToReadyList+0x70>
    2724:	0e 94 8e 17 	call	0x2f1c	; 0x2f1c <prvInitialiseTaskLists>
    2728:	16 c0       	rjmp	.+44     	; 0x2756 <prvAddNewTaskToReadyList+0x70>
    272a:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    272e:	88 23       	and	r24, r24
    2730:	91 f4       	brne	.+36     	; 0x2756 <prvAddNewTaskToReadyList+0x70>
    2732:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2736:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    273a:	fc 01       	movw	r30, r24
    273c:	26 89       	ldd	r18, Z+22	; 0x16
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	fc 01       	movw	r30, r24
    2744:	86 89       	ldd	r24, Z+22	; 0x16
    2746:	82 17       	cp	r24, r18
    2748:	30 f0       	brcs	.+12     	; 0x2756 <prvAddNewTaskToReadyList+0x70>
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2752:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2756:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxTaskNumber>
    275a:	8f 5f       	subi	r24, 0xFF	; 255
    275c:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxTaskNumber>
    2760:	20 91 c7 05 	lds	r18, 0x05C7	; 0x8005c7 <uxTaskNumber>
    2764:	89 81       	ldd	r24, Y+1	; 0x01
    2766:	9a 81       	ldd	r25, Y+2	; 0x02
    2768:	fc 01       	movw	r30, r24
    276a:	21 a3       	std	Z+33, r18	; 0x21
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	9a 81       	ldd	r25, Y+2	; 0x02
    2770:	fc 01       	movw	r30, r24
    2772:	96 89       	ldd	r25, Z+22	; 0x16
    2774:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2778:	89 17       	cp	r24, r25
    277a:	30 f4       	brcc	.+12     	; 0x2788 <prvAddNewTaskToReadyList+0xa2>
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	9a 81       	ldd	r25, Y+2	; 0x02
    2780:	fc 01       	movw	r30, r24
    2782:	86 89       	ldd	r24, Z+22	; 0x16
    2784:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2788:	89 81       	ldd	r24, Y+1	; 0x01
    278a:	9a 81       	ldd	r25, Y+2	; 0x02
    278c:	ac 01       	movw	r20, r24
    278e:	4e 5f       	subi	r20, 0xFE	; 254
    2790:	5f 4f       	sbci	r21, 0xFF	; 255
    2792:	89 81       	ldd	r24, Y+1	; 0x01
    2794:	9a 81       	ldd	r25, Y+2	; 0x02
    2796:	fc 01       	movw	r30, r24
    2798:	86 89       	ldd	r24, Z+22	; 0x16
    279a:	28 2f       	mov	r18, r24
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	c9 01       	movw	r24, r18
    27a0:	88 0f       	add	r24, r24
    27a2:	99 1f       	adc	r25, r25
    27a4:	88 0f       	add	r24, r24
    27a6:	99 1f       	adc	r25, r25
    27a8:	88 0f       	add	r24, r24
    27aa:	99 1f       	adc	r25, r25
    27ac:	82 0f       	add	r24, r18
    27ae:	93 1f       	adc	r25, r19
    27b0:	8e 58       	subi	r24, 0x8E	; 142
    27b2:	9a 4f       	sbci	r25, 0xFA	; 250
    27b4:	ba 01       	movw	r22, r20
    27b6:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    27ba:	0f 90       	pop	r0
    27bc:	0f be       	out	0x3f, r0	; 63
    27be:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    27c2:	88 23       	and	r24, r24
    27c4:	71 f0       	breq	.+28     	; 0x27e2 <prvAddNewTaskToReadyList+0xfc>
    27c6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    27ca:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    27ce:	fc 01       	movw	r30, r24
    27d0:	26 89       	ldd	r18, Z+22	; 0x16
    27d2:	89 81       	ldd	r24, Y+1	; 0x01
    27d4:	9a 81       	ldd	r25, Y+2	; 0x02
    27d6:	fc 01       	movw	r30, r24
    27d8:	86 89       	ldd	r24, Z+22	; 0x16
    27da:	28 17       	cp	r18, r24
    27dc:	10 f4       	brcc	.+4      	; 0x27e2 <prvAddNewTaskToReadyList+0xfc>
    27de:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    27e2:	0f 90       	pop	r0
    27e4:	0f 90       	pop	r0
    27e6:	df 91       	pop	r29
    27e8:	cf 91       	pop	r28
    27ea:	08 95       	ret

000027ec <vTaskDelay>:
    27ec:	cf 93       	push	r28
    27ee:	df 93       	push	r29
    27f0:	00 d0       	rcall	.+0      	; 0x27f2 <vTaskDelay+0x6>
    27f2:	1f 92       	push	r1
    27f4:	cd b7       	in	r28, 0x3d	; 61
    27f6:	de b7       	in	r29, 0x3e	; 62
    27f8:	9b 83       	std	Y+3, r25	; 0x03
    27fa:	8a 83       	std	Y+2, r24	; 0x02
    27fc:	19 82       	std	Y+1, r1	; 0x01
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	9b 81       	ldd	r25, Y+3	; 0x03
    2802:	89 2b       	or	r24, r25
    2804:	51 f0       	breq	.+20     	; 0x281a <vTaskDelay+0x2e>
    2806:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    280a:	8a 81       	ldd	r24, Y+2	; 0x02
    280c:	9b 81       	ldd	r25, Y+3	; 0x03
    280e:	60 e0       	ldi	r22, 0x00	; 0
    2810:	0e 94 7e 19 	call	0x32fc	; 0x32fc <prvAddCurrentTaskToDelayedList>
    2814:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    2818:	89 83       	std	Y+1, r24	; 0x01
    281a:	89 81       	ldd	r24, Y+1	; 0x01
    281c:	88 23       	and	r24, r24
    281e:	11 f4       	brne	.+4      	; 0x2824 <vTaskDelay+0x38>
    2820:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	08 95       	ret

00002830 <vTaskStartScheduler>:
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	cf 93       	push	r28
    2838:	df 93       	push	r29
    283a:	1f 92       	push	r1
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	0f 2e       	mov	r0, r31
    2842:	fa ec       	ldi	r31, 0xCA	; 202
    2844:	ef 2e       	mov	r14, r31
    2846:	f5 e0       	ldi	r31, 0x05	; 5
    2848:	ff 2e       	mov	r15, r31
    284a:	f0 2d       	mov	r31, r0
    284c:	00 e0       	ldi	r16, 0x00	; 0
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	45 e5       	ldi	r20, 0x55	; 85
    2854:	50 e0       	ldi	r21, 0x00	; 0
    2856:	66 e4       	ldi	r22, 0x46	; 70
    2858:	71 e0       	ldi	r23, 0x01	; 1
    285a:	8c e7       	ldi	r24, 0x7C	; 124
    285c:	97 e1       	ldi	r25, 0x17	; 23
    285e:	0e 94 1c 12 	call	0x2438	; 0x2438 <xTaskCreate>
    2862:	89 83       	std	Y+1, r24	; 0x01
    2864:	89 81       	ldd	r24, Y+1	; 0x01
    2866:	81 30       	cpi	r24, 0x01	; 1
    2868:	81 f4       	brne	.+32     	; 0x288a <vTaskStartScheduler+0x5a>
    286a:	f8 94       	cli
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	9f ef       	ldi	r25, 0xFF	; 255
    2870:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2874:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2878:	81 e0       	ldi	r24, 0x01	; 1
    287a:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <xSchedulerRunning>
    287e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <xTickCount+0x1>
    2882:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <xTickCount>
    2886:	0e 94 18 09 	call	0x1230	; 0x1230 <xPortStartScheduler>
    288a:	0f 90       	pop	r0
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	0f 91       	pop	r16
    2892:	ff 90       	pop	r15
    2894:	ef 90       	pop	r14
    2896:	08 95       	ret

00002898 <vTaskSuspendAll>:
    2898:	cf 93       	push	r28
    289a:	df 93       	push	r29
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    28aa:	df 91       	pop	r29
    28ac:	cf 91       	pop	r28
    28ae:	08 95       	ret

000028b0 <xTaskResumeAll>:
    28b0:	cf 93       	push	r28
    28b2:	df 93       	push	r29
    28b4:	00 d0       	rcall	.+0      	; 0x28b6 <xTaskResumeAll+0x6>
    28b6:	00 d0       	rcall	.+0      	; 0x28b8 <xTaskResumeAll+0x8>
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
    28bc:	1a 82       	std	Y+2, r1	; 0x02
    28be:	19 82       	std	Y+1, r1	; 0x01
    28c0:	1b 82       	std	Y+3, r1	; 0x03
    28c2:	0f b6       	in	r0, 0x3f	; 63
    28c4:	f8 94       	cli
    28c6:	0f 92       	push	r0
    28c8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    28cc:	81 50       	subi	r24, 0x01	; 1
    28ce:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    28d2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    28d6:	88 23       	and	r24, r24
    28d8:	09 f0       	breq	.+2      	; 0x28dc <xTaskResumeAll+0x2c>
    28da:	77 c0       	rjmp	.+238    	; 0x29ca <xTaskResumeAll+0x11a>
    28dc:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    28e0:	88 23       	and	r24, r24
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <xTaskResumeAll+0x36>
    28e4:	72 c0       	rjmp	.+228    	; 0x29ca <xTaskResumeAll+0x11a>
    28e6:	49 c0       	rjmp	.+146    	; 0x297a <xTaskResumeAll+0xca>
    28e8:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <xPendingReadyList+0x5>
    28ec:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <xPendingReadyList+0x6>
    28f0:	fc 01       	movw	r30, r24
    28f2:	86 81       	ldd	r24, Z+6	; 0x06
    28f4:	97 81       	ldd	r25, Z+7	; 0x07
    28f6:	9a 83       	std	Y+2, r25	; 0x02
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	9a 81       	ldd	r25, Y+2	; 0x02
    28fe:	0c 96       	adiw	r24, 0x0c	; 12
    2900:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	02 96       	adiw	r24, 0x02	; 2
    290a:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	9a 81       	ldd	r25, Y+2	; 0x02
    2912:	fc 01       	movw	r30, r24
    2914:	96 89       	ldd	r25, Z+22	; 0x16
    2916:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    291a:	89 17       	cp	r24, r25
    291c:	30 f4       	brcc	.+12     	; 0x292a <xTaskResumeAll+0x7a>
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	fc 01       	movw	r30, r24
    2924:	86 89       	ldd	r24, Z+22	; 0x16
    2926:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	ac 01       	movw	r20, r24
    2930:	4e 5f       	subi	r20, 0xFE	; 254
    2932:	5f 4f       	sbci	r21, 0xFF	; 255
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	9a 81       	ldd	r25, Y+2	; 0x02
    2938:	fc 01       	movw	r30, r24
    293a:	86 89       	ldd	r24, Z+22	; 0x16
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	c9 01       	movw	r24, r18
    2942:	88 0f       	add	r24, r24
    2944:	99 1f       	adc	r25, r25
    2946:	88 0f       	add	r24, r24
    2948:	99 1f       	adc	r25, r25
    294a:	88 0f       	add	r24, r24
    294c:	99 1f       	adc	r25, r25
    294e:	82 0f       	add	r24, r18
    2950:	93 1f       	adc	r25, r19
    2952:	8e 58       	subi	r24, 0x8E	; 142
    2954:	9a 4f       	sbci	r25, 0xFA	; 250
    2956:	ba 01       	movw	r22, r20
    2958:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	fc 01       	movw	r30, r24
    2962:	26 89       	ldd	r18, Z+22	; 0x16
    2964:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2968:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    296c:	fc 01       	movw	r30, r24
    296e:	86 89       	ldd	r24, Z+22	; 0x16
    2970:	28 17       	cp	r18, r24
    2972:	18 f0       	brcs	.+6      	; 0x297a <xTaskResumeAll+0xca>
    2974:	81 e0       	ldi	r24, 0x01	; 1
    2976:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    297a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <xPendingReadyList>
    297e:	88 23       	and	r24, r24
    2980:	09 f0       	breq	.+2      	; 0x2984 <xTaskResumeAll+0xd4>
    2982:	b2 cf       	rjmp	.-156    	; 0x28e8 <xTaskResumeAll+0x38>
    2984:	89 81       	ldd	r24, Y+1	; 0x01
    2986:	9a 81       	ldd	r25, Y+2	; 0x02
    2988:	89 2b       	or	r24, r25
    298a:	11 f0       	breq	.+4      	; 0x2990 <xTaskResumeAll+0xe0>
    298c:	0e 94 22 18 	call	0x3044	; 0x3044 <prvResetNextTaskUnblockTime>
    2990:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2994:	8c 83       	std	Y+4, r24	; 0x04
    2996:	8c 81       	ldd	r24, Y+4	; 0x04
    2998:	88 23       	and	r24, r24
    299a:	79 f0       	breq	.+30     	; 0x29ba <xTaskResumeAll+0x10a>
    299c:	0e 94 ef 14 	call	0x29de	; 0x29de <xTaskIncrementTick>
    29a0:	88 23       	and	r24, r24
    29a2:	19 f0       	breq	.+6      	; 0x29aa <xTaskResumeAll+0xfa>
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    29aa:	8c 81       	ldd	r24, Y+4	; 0x04
    29ac:	81 50       	subi	r24, 0x01	; 1
    29ae:	8c 83       	std	Y+4, r24	; 0x04
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	88 23       	and	r24, r24
    29b4:	99 f7       	brne	.-26     	; 0x299c <xTaskResumeAll+0xec>
    29b6:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <uxPendedTicks>
    29ba:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    29be:	88 23       	and	r24, r24
    29c0:	21 f0       	breq	.+8      	; 0x29ca <xTaskResumeAll+0x11a>
    29c2:	81 e0       	ldi	r24, 0x01	; 1
    29c4:	8b 83       	std	Y+3, r24	; 0x03
    29c6:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    29ca:	0f 90       	pop	r0
    29cc:	0f be       	out	0x3f, r0	; 63
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	0f 90       	pop	r0
    29d6:	0f 90       	pop	r0
    29d8:	df 91       	pop	r29
    29da:	cf 91       	pop	r28
    29dc:	08 95       	ret

000029de <xTaskIncrementTick>:
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	29 97       	sbiw	r28, 0x09	; 9
    29e8:	0f b6       	in	r0, 0x3f	; 63
    29ea:	f8 94       	cli
    29ec:	de bf       	out	0x3e, r29	; 62
    29ee:	0f be       	out	0x3f, r0	; 63
    29f0:	cd bf       	out	0x3d, r28	; 61
    29f2:	19 82       	std	Y+1, r1	; 0x01
    29f4:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    29f8:	88 23       	and	r24, r24
    29fa:	09 f0       	breq	.+2      	; 0x29fe <xTaskIncrementTick+0x20>
    29fc:	c7 c0       	rjmp	.+398    	; 0x2b8c <xTaskIncrementTick+0x1ae>
    29fe:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2a02:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2a06:	01 96       	adiw	r24, 0x01	; 1
    2a08:	9b 83       	std	Y+3, r25	; 0x03
    2a0a:	8a 83       	std	Y+2, r24	; 0x02
    2a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a0e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a10:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <xTickCount+0x1>
    2a14:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <xTickCount>
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	89 2b       	or	r24, r25
    2a1e:	d9 f4       	brne	.+54     	; 0x2a56 <xTaskIncrementTick+0x78>
    2a20:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2a24:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2a28:	9d 83       	std	Y+5, r25	; 0x05
    2a2a:	8c 83       	std	Y+4, r24	; 0x04
    2a2c:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    2a30:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2a34:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    2a38:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    2a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    2a40:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2a44:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    2a48:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2a4c:	8f 5f       	subi	r24, 0xFF	; 255
    2a4e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <xNumOfOverflows>
    2a52:	0e 94 22 18 	call	0x3044	; 0x3044 <prvResetNextTaskUnblockTime>
    2a56:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    2a5a:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2a5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2a60:	3b 81       	ldd	r19, Y+3	; 0x03
    2a62:	28 17       	cp	r18, r24
    2a64:	39 07       	cpc	r19, r25
    2a66:	08 f4       	brcc	.+2      	; 0x2a6a <xTaskIncrementTick+0x8c>
    2a68:	77 c0       	rjmp	.+238    	; 0x2b58 <xTaskIncrementTick+0x17a>
    2a6a:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2a6e:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2a72:	fc 01       	movw	r30, r24
    2a74:	80 81       	ld	r24, Z
    2a76:	88 23       	and	r24, r24
    2a78:	39 f4       	brne	.+14     	; 0x2a88 <xTaskIncrementTick+0xaa>
    2a7a:	8f ef       	ldi	r24, 0xFF	; 255
    2a7c:	9f ef       	ldi	r25, 0xFF	; 255
    2a7e:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2a82:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2a86:	68 c0       	rjmp	.+208    	; 0x2b58 <xTaskIncrementTick+0x17a>
    2a88:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2a8c:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2a90:	fc 01       	movw	r30, r24
    2a92:	85 81       	ldd	r24, Z+5	; 0x05
    2a94:	96 81       	ldd	r25, Z+6	; 0x06
    2a96:	fc 01       	movw	r30, r24
    2a98:	86 81       	ldd	r24, Z+6	; 0x06
    2a9a:	97 81       	ldd	r25, Z+7	; 0x07
    2a9c:	9f 83       	std	Y+7, r25	; 0x07
    2a9e:	8e 83       	std	Y+6, r24	; 0x06
    2aa0:	8e 81       	ldd	r24, Y+6	; 0x06
    2aa2:	9f 81       	ldd	r25, Y+7	; 0x07
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	82 81       	ldd	r24, Z+2	; 0x02
    2aa8:	93 81       	ldd	r25, Z+3	; 0x03
    2aaa:	99 87       	std	Y+9, r25	; 0x09
    2aac:	88 87       	std	Y+8, r24	; 0x08
    2aae:	2a 81       	ldd	r18, Y+2	; 0x02
    2ab0:	3b 81       	ldd	r19, Y+3	; 0x03
    2ab2:	88 85       	ldd	r24, Y+8	; 0x08
    2ab4:	99 85       	ldd	r25, Y+9	; 0x09
    2ab6:	28 17       	cp	r18, r24
    2ab8:	39 07       	cpc	r19, r25
    2aba:	38 f4       	brcc	.+14     	; 0x2aca <xTaskIncrementTick+0xec>
    2abc:	88 85       	ldd	r24, Y+8	; 0x08
    2abe:	99 85       	ldd	r25, Y+9	; 0x09
    2ac0:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2ac4:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2ac8:	47 c0       	rjmp	.+142    	; 0x2b58 <xTaskIncrementTick+0x17a>
    2aca:	8e 81       	ldd	r24, Y+6	; 0x06
    2acc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ace:	02 96       	adiw	r24, 0x02	; 2
    2ad0:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2ad4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ad6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ad8:	fc 01       	movw	r30, r24
    2ada:	84 89       	ldd	r24, Z+20	; 0x14
    2adc:	95 89       	ldd	r25, Z+21	; 0x15
    2ade:	89 2b       	or	r24, r25
    2ae0:	29 f0       	breq	.+10     	; 0x2aec <xTaskIncrementTick+0x10e>
    2ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae6:	0c 96       	adiw	r24, 0x0c	; 12
    2ae8:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2aec:	8e 81       	ldd	r24, Y+6	; 0x06
    2aee:	9f 81       	ldd	r25, Y+7	; 0x07
    2af0:	fc 01       	movw	r30, r24
    2af2:	96 89       	ldd	r25, Z+22	; 0x16
    2af4:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2af8:	89 17       	cp	r24, r25
    2afa:	30 f4       	brcc	.+12     	; 0x2b08 <xTaskIncrementTick+0x12a>
    2afc:	8e 81       	ldd	r24, Y+6	; 0x06
    2afe:	9f 81       	ldd	r25, Y+7	; 0x07
    2b00:	fc 01       	movw	r30, r24
    2b02:	86 89       	ldd	r24, Z+22	; 0x16
    2b04:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2b08:	8e 81       	ldd	r24, Y+6	; 0x06
    2b0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2b0c:	ac 01       	movw	r20, r24
    2b0e:	4e 5f       	subi	r20, 0xFE	; 254
    2b10:	5f 4f       	sbci	r21, 0xFF	; 255
    2b12:	8e 81       	ldd	r24, Y+6	; 0x06
    2b14:	9f 81       	ldd	r25, Y+7	; 0x07
    2b16:	fc 01       	movw	r30, r24
    2b18:	86 89       	ldd	r24, Z+22	; 0x16
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	c9 01       	movw	r24, r18
    2b20:	88 0f       	add	r24, r24
    2b22:	99 1f       	adc	r25, r25
    2b24:	88 0f       	add	r24, r24
    2b26:	99 1f       	adc	r25, r25
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	82 0f       	add	r24, r18
    2b2e:	93 1f       	adc	r25, r19
    2b30:	8e 58       	subi	r24, 0x8E	; 142
    2b32:	9a 4f       	sbci	r25, 0xFA	; 250
    2b34:	ba 01       	movw	r22, r20
    2b36:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    2b3a:	8e 81       	ldd	r24, Y+6	; 0x06
    2b3c:	9f 81       	ldd	r25, Y+7	; 0x07
    2b3e:	fc 01       	movw	r30, r24
    2b40:	26 89       	ldd	r18, Z+22	; 0x16
    2b42:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2b46:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2b4a:	fc 01       	movw	r30, r24
    2b4c:	86 89       	ldd	r24, Z+22	; 0x16
    2b4e:	28 17       	cp	r18, r24
    2b50:	10 f0       	brcs	.+4      	; 0x2b56 <xTaskIncrementTick+0x178>
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	89 cf       	rjmp	.-238    	; 0x2a6a <xTaskIncrementTick+0x8c>
    2b58:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2b5c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2b60:	fc 01       	movw	r30, r24
    2b62:	86 89       	ldd	r24, Z+22	; 0x16
    2b64:	28 2f       	mov	r18, r24
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	c9 01       	movw	r24, r18
    2b6a:	88 0f       	add	r24, r24
    2b6c:	99 1f       	adc	r25, r25
    2b6e:	88 0f       	add	r24, r24
    2b70:	99 1f       	adc	r25, r25
    2b72:	88 0f       	add	r24, r24
    2b74:	99 1f       	adc	r25, r25
    2b76:	82 0f       	add	r24, r18
    2b78:	93 1f       	adc	r25, r19
    2b7a:	8e 58       	subi	r24, 0x8E	; 142
    2b7c:	9a 4f       	sbci	r25, 0xFA	; 250
    2b7e:	fc 01       	movw	r30, r24
    2b80:	80 81       	ld	r24, Z
    2b82:	82 30       	cpi	r24, 0x02	; 2
    2b84:	10 f0       	brcs	.+4      	; 0x2b8a <xTaskIncrementTick+0x1ac>
    2b86:	81 e0       	ldi	r24, 0x01	; 1
    2b88:	89 83       	std	Y+1, r24	; 0x01
    2b8a:	05 c0       	rjmp	.+10     	; 0x2b96 <xTaskIncrementTick+0x1b8>
    2b8c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2b90:	8f 5f       	subi	r24, 0xFF	; 255
    2b92:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxPendedTicks>
    2b96:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2b9a:	88 23       	and	r24, r24
    2b9c:	11 f0       	breq	.+4      	; 0x2ba2 <xTaskIncrementTick+0x1c4>
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	89 83       	std	Y+1, r24	; 0x01
    2ba2:	89 81       	ldd	r24, Y+1	; 0x01
    2ba4:	29 96       	adiw	r28, 0x09	; 9
    2ba6:	0f b6       	in	r0, 0x3f	; 63
    2ba8:	f8 94       	cli
    2baa:	de bf       	out	0x3e, r29	; 62
    2bac:	0f be       	out	0x3f, r0	; 63
    2bae:	cd bf       	out	0x3d, r28	; 61
    2bb0:	df 91       	pop	r29
    2bb2:	cf 91       	pop	r28
    2bb4:	08 95       	ret

00002bb6 <vTaskSwitchContext>:
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	00 d0       	rcall	.+0      	; 0x2bbc <vTaskSwitchContext+0x6>
    2bbc:	1f 92       	push	r1
    2bbe:	cd b7       	in	r28, 0x3d	; 61
    2bc0:	de b7       	in	r29, 0x3e	; 62
    2bc2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2bc6:	88 23       	and	r24, r24
    2bc8:	21 f0       	breq	.+8      	; 0x2bd2 <vTaskSwitchContext+0x1c>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2bd0:	71 c0       	rjmp	.+226    	; 0x2cb4 <vTaskSwitchContext+0xfe>
    2bd2:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <xYieldPending>
    2bd6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2bda:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2bde:	fc 01       	movw	r30, r24
    2be0:	85 a1       	ldd	r24, Z+37	; 0x25
    2be2:	96 a1       	ldd	r25, Z+38	; 0x26
    2be4:	0e 94 60 05 	call	0xac0	; 0xac0 <switch_out>
    2be8:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2bec:	89 83       	std	Y+1, r24	; 0x01
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <vTaskSwitchContext+0x40>
    2bf0:	89 81       	ldd	r24, Y+1	; 0x01
    2bf2:	81 50       	subi	r24, 0x01	; 1
    2bf4:	89 83       	std	Y+1, r24	; 0x01
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	30 e0       	ldi	r19, 0x00	; 0
    2bfc:	c9 01       	movw	r24, r18
    2bfe:	88 0f       	add	r24, r24
    2c00:	99 1f       	adc	r25, r25
    2c02:	88 0f       	add	r24, r24
    2c04:	99 1f       	adc	r25, r25
    2c06:	88 0f       	add	r24, r24
    2c08:	99 1f       	adc	r25, r25
    2c0a:	82 0f       	add	r24, r18
    2c0c:	93 1f       	adc	r25, r19
    2c0e:	8e 58       	subi	r24, 0x8E	; 142
    2c10:	9a 4f       	sbci	r25, 0xFA	; 250
    2c12:	fc 01       	movw	r30, r24
    2c14:	80 81       	ld	r24, Z
    2c16:	88 23       	and	r24, r24
    2c18:	59 f3       	breq	.-42     	; 0x2bf0 <vTaskSwitchContext+0x3a>
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	c9 01       	movw	r24, r18
    2c22:	88 0f       	add	r24, r24
    2c24:	99 1f       	adc	r25, r25
    2c26:	88 0f       	add	r24, r24
    2c28:	99 1f       	adc	r25, r25
    2c2a:	88 0f       	add	r24, r24
    2c2c:	99 1f       	adc	r25, r25
    2c2e:	82 0f       	add	r24, r18
    2c30:	93 1f       	adc	r25, r19
    2c32:	8e 58       	subi	r24, 0x8E	; 142
    2c34:	9a 4f       	sbci	r25, 0xFA	; 250
    2c36:	9b 83       	std	Y+3, r25	; 0x03
    2c38:	8a 83       	std	Y+2, r24	; 0x02
    2c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3e:	fc 01       	movw	r30, r24
    2c40:	81 81       	ldd	r24, Z+1	; 0x01
    2c42:	92 81       	ldd	r25, Z+2	; 0x02
    2c44:	fc 01       	movw	r30, r24
    2c46:	22 81       	ldd	r18, Z+2	; 0x02
    2c48:	33 81       	ldd	r19, Z+3	; 0x03
    2c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4e:	fc 01       	movw	r30, r24
    2c50:	32 83       	std	Z+2, r19	; 0x02
    2c52:	21 83       	std	Z+1, r18	; 0x01
    2c54:	8a 81       	ldd	r24, Y+2	; 0x02
    2c56:	9b 81       	ldd	r25, Y+3	; 0x03
    2c58:	fc 01       	movw	r30, r24
    2c5a:	21 81       	ldd	r18, Z+1	; 0x01
    2c5c:	32 81       	ldd	r19, Z+2	; 0x02
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	9b 81       	ldd	r25, Y+3	; 0x03
    2c62:	03 96       	adiw	r24, 0x03	; 3
    2c64:	28 17       	cp	r18, r24
    2c66:	39 07       	cpc	r19, r25
    2c68:	69 f4       	brne	.+26     	; 0x2c84 <vTaskSwitchContext+0xce>
    2c6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c6c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c6e:	fc 01       	movw	r30, r24
    2c70:	81 81       	ldd	r24, Z+1	; 0x01
    2c72:	92 81       	ldd	r25, Z+2	; 0x02
    2c74:	fc 01       	movw	r30, r24
    2c76:	22 81       	ldd	r18, Z+2	; 0x02
    2c78:	33 81       	ldd	r19, Z+3	; 0x03
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	fc 01       	movw	r30, r24
    2c80:	32 83       	std	Z+2, r19	; 0x02
    2c82:	21 83       	std	Z+1, r18	; 0x01
    2c84:	8a 81       	ldd	r24, Y+2	; 0x02
    2c86:	9b 81       	ldd	r25, Y+3	; 0x03
    2c88:	fc 01       	movw	r30, r24
    2c8a:	81 81       	ldd	r24, Z+1	; 0x01
    2c8c:	92 81       	ldd	r25, Z+2	; 0x02
    2c8e:	fc 01       	movw	r30, r24
    2c90:	86 81       	ldd	r24, Z+6	; 0x06
    2c92:	97 81       	ldd	r25, Z+7	; 0x07
    2c94:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2c98:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2ca2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2ca6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2caa:	fc 01       	movw	r30, r24
    2cac:	85 a1       	ldd	r24, Z+37	; 0x25
    2cae:	96 a1       	ldd	r25, Z+38	; 0x26
    2cb0:	0e 94 56 05 	call	0xaac	; 0xaac <switch_in>
    2cb4:	0f 90       	pop	r0
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	df 91       	pop	r29
    2cbc:	cf 91       	pop	r28
    2cbe:	08 95       	ret

00002cc0 <vTaskPlaceOnEventList>:
    2cc0:	cf 93       	push	r28
    2cc2:	df 93       	push	r29
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <vTaskPlaceOnEventList+0x6>
    2cc6:	00 d0       	rcall	.+0      	; 0x2cc8 <vTaskPlaceOnEventList+0x8>
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
    2cd0:	7c 83       	std	Y+4, r23	; 0x04
    2cd2:	6b 83       	std	Y+3, r22	; 0x03
    2cd4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2cd8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2cdc:	9c 01       	movw	r18, r24
    2cde:	24 5f       	subi	r18, 0xF4	; 244
    2ce0:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce6:	b9 01       	movw	r22, r18
    2ce8:	0e 94 a1 06 	call	0xd42	; 0xd42 <vListInsert>
    2cec:	8b 81       	ldd	r24, Y+3	; 0x03
    2cee:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf0:	61 e0       	ldi	r22, 0x01	; 1
    2cf2:	0e 94 7e 19 	call	0x32fc	; 0x32fc <prvAddCurrentTaskToDelayedList>
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	0f 90       	pop	r0
    2cfc:	0f 90       	pop	r0
    2cfe:	df 91       	pop	r29
    2d00:	cf 91       	pop	r28
    2d02:	08 95       	ret

00002d04 <xTaskRemoveFromEventList>:
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	00 d0       	rcall	.+0      	; 0x2d0a <xTaskRemoveFromEventList+0x6>
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <xTaskRemoveFromEventList+0x8>
    2d0c:	1f 92       	push	r1
    2d0e:	cd b7       	in	r28, 0x3d	; 61
    2d10:	de b7       	in	r29, 0x3e	; 62
    2d12:	9d 83       	std	Y+5, r25	; 0x05
    2d14:	8c 83       	std	Y+4, r24	; 0x04
    2d16:	8c 81       	ldd	r24, Y+4	; 0x04
    2d18:	9d 81       	ldd	r25, Y+5	; 0x05
    2d1a:	fc 01       	movw	r30, r24
    2d1c:	85 81       	ldd	r24, Z+5	; 0x05
    2d1e:	96 81       	ldd	r25, Z+6	; 0x06
    2d20:	fc 01       	movw	r30, r24
    2d22:	86 81       	ldd	r24, Z+6	; 0x06
    2d24:	97 81       	ldd	r25, Z+7	; 0x07
    2d26:	9b 83       	std	Y+3, r25	; 0x03
    2d28:	8a 83       	std	Y+2, r24	; 0x02
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	0c 96       	adiw	r24, 0x0c	; 12
    2d30:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2d34:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2d38:	88 23       	and	r24, r24
    2d3a:	69 f5       	brne	.+90     	; 0x2d96 <xTaskRemoveFromEventList+0x92>
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	02 96       	adiw	r24, 0x02	; 2
    2d42:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2d46:	8a 81       	ldd	r24, Y+2	; 0x02
    2d48:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	96 89       	ldd	r25, Z+22	; 0x16
    2d4e:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2d52:	89 17       	cp	r24, r25
    2d54:	30 f4       	brcc	.+12     	; 0x2d62 <xTaskRemoveFromEventList+0x5e>
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	86 89       	ldd	r24, Z+22	; 0x16
    2d5e:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2d62:	8a 81       	ldd	r24, Y+2	; 0x02
    2d64:	9b 81       	ldd	r25, Y+3	; 0x03
    2d66:	ac 01       	movw	r20, r24
    2d68:	4e 5f       	subi	r20, 0xFE	; 254
    2d6a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d70:	fc 01       	movw	r30, r24
    2d72:	86 89       	ldd	r24, Z+22	; 0x16
    2d74:	28 2f       	mov	r18, r24
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	c9 01       	movw	r24, r18
    2d7a:	88 0f       	add	r24, r24
    2d7c:	99 1f       	adc	r25, r25
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	88 0f       	add	r24, r24
    2d84:	99 1f       	adc	r25, r25
    2d86:	82 0f       	add	r24, r18
    2d88:	93 1f       	adc	r25, r19
    2d8a:	8e 58       	subi	r24, 0x8E	; 142
    2d8c:	9a 4f       	sbci	r25, 0xFA	; 250
    2d8e:	ba 01       	movw	r22, r20
    2d90:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    2d94:	08 c0       	rjmp	.+16     	; 0x2da6 <xTaskRemoveFromEventList+0xa2>
    2d96:	8a 81       	ldd	r24, Y+2	; 0x02
    2d98:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9a:	0c 96       	adiw	r24, 0x0c	; 12
    2d9c:	bc 01       	movw	r22, r24
    2d9e:	8c ea       	ldi	r24, 0xAC	; 172
    2da0:	95 e0       	ldi	r25, 0x05	; 5
    2da2:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    2da6:	8a 81       	ldd	r24, Y+2	; 0x02
    2da8:	9b 81       	ldd	r25, Y+3	; 0x03
    2daa:	fc 01       	movw	r30, r24
    2dac:	26 89       	ldd	r18, Z+22	; 0x16
    2dae:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2db2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2db6:	fc 01       	movw	r30, r24
    2db8:	86 89       	ldd	r24, Z+22	; 0x16
    2dba:	82 17       	cp	r24, r18
    2dbc:	30 f4       	brcc	.+12     	; 0x2dca <xTaskRemoveFromEventList+0xc6>
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	89 83       	std	Y+1, r24	; 0x01
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2dc8:	01 c0       	rjmp	.+2      	; 0x2dcc <xTaskRemoveFromEventList+0xc8>
    2dca:	19 82       	std	Y+1, r1	; 0x01
    2dcc:	89 81       	ldd	r24, Y+1	; 0x01
    2dce:	0f 90       	pop	r0
    2dd0:	0f 90       	pop	r0
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	0f 90       	pop	r0
    2dd8:	df 91       	pop	r29
    2dda:	cf 91       	pop	r28
    2ddc:	08 95       	ret

00002dde <vTaskSetTimeOutState>:
    2dde:	cf 93       	push	r28
    2de0:	df 93       	push	r29
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <vTaskSetTimeOutState+0x6>
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	9a 83       	std	Y+2, r25	; 0x02
    2dea:	89 83       	std	Y+1, r24	; 0x01
    2dec:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2df0:	89 81       	ldd	r24, Y+1	; 0x01
    2df2:	9a 81       	ldd	r25, Y+2	; 0x02
    2df4:	fc 01       	movw	r30, r24
    2df6:	20 83       	st	Z, r18
    2df8:	20 91 c0 05 	lds	r18, 0x05C0	; 0x8005c0 <xTickCount>
    2dfc:	30 91 c1 05 	lds	r19, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2e00:	89 81       	ldd	r24, Y+1	; 0x01
    2e02:	9a 81       	ldd	r25, Y+2	; 0x02
    2e04:	fc 01       	movw	r30, r24
    2e06:	32 83       	std	Z+2, r19	; 0x02
    2e08:	21 83       	std	Z+1, r18	; 0x01
    2e0a:	0f 90       	pop	r0
    2e0c:	0f 90       	pop	r0
    2e0e:	df 91       	pop	r29
    2e10:	cf 91       	pop	r28
    2e12:	08 95       	ret

00002e14 <xTaskCheckForTimeOut>:
    2e14:	cf 93       	push	r28
    2e16:	df 93       	push	r29
    2e18:	cd b7       	in	r28, 0x3d	; 61
    2e1a:	de b7       	in	r29, 0x3e	; 62
    2e1c:	27 97       	sbiw	r28, 0x07	; 7
    2e1e:	0f b6       	in	r0, 0x3f	; 63
    2e20:	f8 94       	cli
    2e22:	de bf       	out	0x3e, r29	; 62
    2e24:	0f be       	out	0x3f, r0	; 63
    2e26:	cd bf       	out	0x3d, r28	; 61
    2e28:	9d 83       	std	Y+5, r25	; 0x05
    2e2a:	8c 83       	std	Y+4, r24	; 0x04
    2e2c:	7f 83       	std	Y+7, r23	; 0x07
    2e2e:	6e 83       	std	Y+6, r22	; 0x06
    2e30:	0f b6       	in	r0, 0x3f	; 63
    2e32:	f8 94       	cli
    2e34:	0f 92       	push	r0
    2e36:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2e3a:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2e3e:	9b 83       	std	Y+3, r25	; 0x03
    2e40:	8a 83       	std	Y+2, r24	; 0x02
    2e42:	8c 81       	ldd	r24, Y+4	; 0x04
    2e44:	9d 81       	ldd	r25, Y+5	; 0x05
    2e46:	fc 01       	movw	r30, r24
    2e48:	90 81       	ld	r25, Z
    2e4a:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2e4e:	98 17       	cp	r25, r24
    2e50:	69 f0       	breq	.+26     	; 0x2e6c <xTaskCheckForTimeOut+0x58>
    2e52:	8c 81       	ldd	r24, Y+4	; 0x04
    2e54:	9d 81       	ldd	r25, Y+5	; 0x05
    2e56:	fc 01       	movw	r30, r24
    2e58:	21 81       	ldd	r18, Z+1	; 0x01
    2e5a:	32 81       	ldd	r19, Z+2	; 0x02
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e60:	82 17       	cp	r24, r18
    2e62:	93 07       	cpc	r25, r19
    2e64:	18 f0       	brcs	.+6      	; 0x2e6c <xTaskCheckForTimeOut+0x58>
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	89 83       	std	Y+1, r24	; 0x01
    2e6a:	30 c0       	rjmp	.+96     	; 0x2ecc <xTaskCheckForTimeOut+0xb8>
    2e6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e6e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e70:	fc 01       	movw	r30, r24
    2e72:	81 81       	ldd	r24, Z+1	; 0x01
    2e74:	92 81       	ldd	r25, Z+2	; 0x02
    2e76:	2a 81       	ldd	r18, Y+2	; 0x02
    2e78:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7a:	28 1b       	sub	r18, r24
    2e7c:	39 0b       	sbc	r19, r25
    2e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e80:	9f 81       	ldd	r25, Y+7	; 0x07
    2e82:	fc 01       	movw	r30, r24
    2e84:	80 81       	ld	r24, Z
    2e86:	91 81       	ldd	r25, Z+1	; 0x01
    2e88:	28 17       	cp	r18, r24
    2e8a:	39 07       	cpc	r19, r25
    2e8c:	e8 f4       	brcc	.+58     	; 0x2ec8 <xTaskCheckForTimeOut+0xb4>
    2e8e:	8e 81       	ldd	r24, Y+6	; 0x06
    2e90:	9f 81       	ldd	r25, Y+7	; 0x07
    2e92:	fc 01       	movw	r30, r24
    2e94:	20 81       	ld	r18, Z
    2e96:	31 81       	ldd	r19, Z+1	; 0x01
    2e98:	8c 81       	ldd	r24, Y+4	; 0x04
    2e9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	41 81       	ldd	r20, Z+1	; 0x01
    2ea0:	52 81       	ldd	r21, Z+2	; 0x02
    2ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea6:	ba 01       	movw	r22, r20
    2ea8:	68 1b       	sub	r22, r24
    2eaa:	79 0b       	sbc	r23, r25
    2eac:	cb 01       	movw	r24, r22
    2eae:	28 0f       	add	r18, r24
    2eb0:	39 1f       	adc	r19, r25
    2eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb6:	fc 01       	movw	r30, r24
    2eb8:	31 83       	std	Z+1, r19	; 0x01
    2eba:	20 83       	st	Z, r18
    2ebc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebe:	9d 81       	ldd	r25, Y+5	; 0x05
    2ec0:	0e 94 ef 16 	call	0x2dde	; 0x2dde <vTaskSetTimeOutState>
    2ec4:	19 82       	std	Y+1, r1	; 0x01
    2ec6:	02 c0       	rjmp	.+4      	; 0x2ecc <xTaskCheckForTimeOut+0xb8>
    2ec8:	81 e0       	ldi	r24, 0x01	; 1
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	0f 90       	pop	r0
    2ece:	0f be       	out	0x3f, r0	; 63
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	27 96       	adiw	r28, 0x07	; 7
    2ed4:	0f b6       	in	r0, 0x3f	; 63
    2ed6:	f8 94       	cli
    2ed8:	de bf       	out	0x3e, r29	; 62
    2eda:	0f be       	out	0x3f, r0	; 63
    2edc:	cd bf       	out	0x3d, r28	; 61
    2ede:	df 91       	pop	r29
    2ee0:	cf 91       	pop	r28
    2ee2:	08 95       	ret

00002ee4 <vTaskMissedYield>:
    2ee4:	cf 93       	push	r28
    2ee6:	df 93       	push	r29
    2ee8:	cd b7       	in	r28, 0x3d	; 61
    2eea:	de b7       	in	r29, 0x3e	; 62
    2eec:	81 e0       	ldi	r24, 0x01	; 1
    2eee:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2ef2:	df 91       	pop	r29
    2ef4:	cf 91       	pop	r28
    2ef6:	08 95       	ret

00002ef8 <prvIdleTask>:
    2ef8:	cf 93       	push	r28
    2efa:	df 93       	push	r29
    2efc:	00 d0       	rcall	.+0      	; 0x2efe <prvIdleTask+0x6>
    2efe:	cd b7       	in	r28, 0x3d	; 61
    2f00:	de b7       	in	r29, 0x3e	; 62
    2f02:	9a 83       	std	Y+2, r25	; 0x02
    2f04:	89 83       	std	Y+1, r24	; 0x01
    2f06:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <prvCheckTasksWaitingTermination>
    2f0a:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxReadyTasksLists>
    2f0e:	82 30       	cpi	r24, 0x02	; 2
    2f10:	10 f0       	brcs	.+4      	; 0x2f16 <prvIdleTask+0x1e>
    2f12:	0e 94 4d 09 	call	0x129a	; 0x129a <vPortYield>
    2f16:	0e 94 de 03 	call	0x7bc	; 0x7bc <vApplicationIdleHook>
    2f1a:	f5 cf       	rjmp	.-22     	; 0x2f06 <prvIdleTask+0xe>

00002f1c <prvInitialiseTaskLists>:
    2f1c:	cf 93       	push	r28
    2f1e:	df 93       	push	r29
    2f20:	1f 92       	push	r1
    2f22:	cd b7       	in	r28, 0x3d	; 61
    2f24:	de b7       	in	r29, 0x3e	; 62
    2f26:	19 82       	std	Y+1, r1	; 0x01
    2f28:	13 c0       	rjmp	.+38     	; 0x2f50 <prvInitialiseTaskLists+0x34>
    2f2a:	89 81       	ldd	r24, Y+1	; 0x01
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	c9 01       	movw	r24, r18
    2f32:	88 0f       	add	r24, r24
    2f34:	99 1f       	adc	r25, r25
    2f36:	88 0f       	add	r24, r24
    2f38:	99 1f       	adc	r25, r25
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	82 0f       	add	r24, r18
    2f40:	93 1f       	adc	r25, r19
    2f42:	8e 58       	subi	r24, 0x8E	; 142
    2f44:	9a 4f       	sbci	r25, 0xFA	; 250
    2f46:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    2f4a:	89 81       	ldd	r24, Y+1	; 0x01
    2f4c:	8f 5f       	subi	r24, 0xFF	; 255
    2f4e:	89 83       	std	Y+1, r24	; 0x01
    2f50:	89 81       	ldd	r24, Y+1	; 0x01
    2f52:	84 30       	cpi	r24, 0x04	; 4
    2f54:	50 f3       	brcs	.-44     	; 0x2f2a <prvInitialiseTaskLists+0xe>
    2f56:	86 e9       	ldi	r24, 0x96	; 150
    2f58:	95 e0       	ldi	r25, 0x05	; 5
    2f5a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    2f5e:	8f e9       	ldi	r24, 0x9F	; 159
    2f60:	95 e0       	ldi	r25, 0x05	; 5
    2f62:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    2f66:	8c ea       	ldi	r24, 0xAC	; 172
    2f68:	95 e0       	ldi	r25, 0x05	; 5
    2f6a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    2f6e:	85 eb       	ldi	r24, 0xB5	; 181
    2f70:	95 e0       	ldi	r25, 0x05	; 5
    2f72:	0e 94 0d 06 	call	0xc1a	; 0xc1a <vListInitialise>
    2f76:	86 e9       	ldi	r24, 0x96	; 150
    2f78:	95 e0       	ldi	r25, 0x05	; 5
    2f7a:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    2f7e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2f82:	8f e9       	ldi	r24, 0x9F	; 159
    2f84:	95 e0       	ldi	r25, 0x05	; 5
    2f86:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2f8a:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    2f8e:	0f 90       	pop	r0
    2f90:	df 91       	pop	r29
    2f92:	cf 91       	pop	r28
    2f94:	08 95       	ret

00002f96 <prvCheckTasksWaitingTermination>:
    2f96:	cf 93       	push	r28
    2f98:	df 93       	push	r29
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <prvCheckTasksWaitingTermination+0x6>
    2f9c:	1f 92       	push	r1
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	2f c0       	rjmp	.+94     	; 0x3002 <prvCheckTasksWaitingTermination+0x6c>
    2fa4:	0e 94 4c 14 	call	0x2898	; 0x2898 <vTaskSuspendAll>
    2fa8:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <xTasksWaitingTermination>
    2fac:	81 e0       	ldi	r24, 0x01	; 1
    2fae:	99 23       	and	r25, r25
    2fb0:	09 f0       	breq	.+2      	; 0x2fb4 <prvCheckTasksWaitingTermination+0x1e>
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	89 83       	std	Y+1, r24	; 0x01
    2fb6:	0e 94 58 14 	call	0x28b0	; 0x28b0 <xTaskResumeAll>
    2fba:	89 81       	ldd	r24, Y+1	; 0x01
    2fbc:	88 23       	and	r24, r24
    2fbe:	09 f5       	brne	.+66     	; 0x3002 <prvCheckTasksWaitingTermination+0x6c>
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	0f 92       	push	r0
    2fc6:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <xTasksWaitingTermination+0x5>
    2fca:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <xTasksWaitingTermination+0x6>
    2fce:	fc 01       	movw	r30, r24
    2fd0:	86 81       	ldd	r24, Z+6	; 0x06
    2fd2:	97 81       	ldd	r25, Z+7	; 0x07
    2fd4:	9b 83       	std	Y+3, r25	; 0x03
    2fd6:	8a 83       	std	Y+2, r24	; 0x02
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	9b 81       	ldd	r25, Y+3	; 0x03
    2fdc:	02 96       	adiw	r24, 0x02	; 2
    2fde:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    2fe2:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2fe6:	81 50       	subi	r24, 0x01	; 1
    2fe8:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    2fec:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    2ff0:	81 50       	subi	r24, 0x01	; 1
    2ff2:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    2ff6:	0f 90       	pop	r0
    2ff8:	0f be       	out	0x3f, r0	; 63
    2ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffe:	0e 94 0b 18 	call	0x3016	; 0x3016 <prvDeleteTCB>
    3002:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    3006:	88 23       	and	r24, r24
    3008:	69 f6       	brne	.-102    	; 0x2fa4 <prvCheckTasksWaitingTermination+0xe>
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	df 91       	pop	r29
    3012:	cf 91       	pop	r28
    3014:	08 95       	ret

00003016 <prvDeleteTCB>:
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	00 d0       	rcall	.+0      	; 0x301c <prvDeleteTCB+0x6>
    301c:	cd b7       	in	r28, 0x3d	; 61
    301e:	de b7       	in	r29, 0x3e	; 62
    3020:	9a 83       	std	Y+2, r25	; 0x02
    3022:	89 83       	std	Y+1, r24	; 0x01
    3024:	89 81       	ldd	r24, Y+1	; 0x01
    3026:	9a 81       	ldd	r25, Y+2	; 0x02
    3028:	fc 01       	movw	r30, r24
    302a:	87 89       	ldd	r24, Z+23	; 0x17
    302c:	90 8d       	ldd	r25, Z+24	; 0x18
    302e:	0e 94 bc 0a 	call	0x1578	; 0x1578 <vPortFree>
    3032:	89 81       	ldd	r24, Y+1	; 0x01
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	0e 94 bc 0a 	call	0x1578	; 0x1578 <vPortFree>
    303a:	0f 90       	pop	r0
    303c:	0f 90       	pop	r0
    303e:	df 91       	pop	r29
    3040:	cf 91       	pop	r28
    3042:	08 95       	ret

00003044 <prvResetNextTaskUnblockTime>:
    3044:	cf 93       	push	r28
    3046:	df 93       	push	r29
    3048:	00 d0       	rcall	.+0      	; 0x304a <prvResetNextTaskUnblockTime+0x6>
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3052:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3056:	fc 01       	movw	r30, r24
    3058:	80 81       	ld	r24, Z
    305a:	88 23       	and	r24, r24
    305c:	39 f4       	brne	.+14     	; 0x306c <prvResetNextTaskUnblockTime+0x28>
    305e:	8f ef       	ldi	r24, 0xFF	; 255
    3060:	9f ef       	ldi	r25, 0xFF	; 255
    3062:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3066:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    306a:	15 c0       	rjmp	.+42     	; 0x3096 <prvResetNextTaskUnblockTime+0x52>
    306c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3070:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3074:	fc 01       	movw	r30, r24
    3076:	85 81       	ldd	r24, Z+5	; 0x05
    3078:	96 81       	ldd	r25, Z+6	; 0x06
    307a:	fc 01       	movw	r30, r24
    307c:	86 81       	ldd	r24, Z+6	; 0x06
    307e:	97 81       	ldd	r25, Z+7	; 0x07
    3080:	9a 83       	std	Y+2, r25	; 0x02
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	89 81       	ldd	r24, Y+1	; 0x01
    3086:	9a 81       	ldd	r25, Y+2	; 0x02
    3088:	fc 01       	movw	r30, r24
    308a:	82 81       	ldd	r24, Z+2	; 0x02
    308c:	93 81       	ldd	r25, Z+3	; 0x03
    308e:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3092:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    3096:	0f 90       	pop	r0
    3098:	0f 90       	pop	r0
    309a:	df 91       	pop	r29
    309c:	cf 91       	pop	r28
    309e:	08 95       	ret

000030a0 <vTaskPriorityInherit>:
    30a0:	cf 93       	push	r28
    30a2:	df 93       	push	r29
    30a4:	00 d0       	rcall	.+0      	; 0x30a6 <vTaskPriorityInherit+0x6>
    30a6:	00 d0       	rcall	.+0      	; 0x30a8 <vTaskPriorityInherit+0x8>
    30a8:	cd b7       	in	r28, 0x3d	; 61
    30aa:	de b7       	in	r29, 0x3e	; 62
    30ac:	9c 83       	std	Y+4, r25	; 0x04
    30ae:	8b 83       	std	Y+3, r24	; 0x03
    30b0:	8b 81       	ldd	r24, Y+3	; 0x03
    30b2:	9c 81       	ldd	r25, Y+4	; 0x04
    30b4:	9a 83       	std	Y+2, r25	; 0x02
    30b6:	89 83       	std	Y+1, r24	; 0x01
    30b8:	8b 81       	ldd	r24, Y+3	; 0x03
    30ba:	9c 81       	ldd	r25, Y+4	; 0x04
    30bc:	89 2b       	or	r24, r25
    30be:	09 f4       	brne	.+2      	; 0x30c2 <vTaskPriorityInherit+0x22>
    30c0:	7f c0       	rjmp	.+254    	; 0x31c0 <vTaskPriorityInherit+0x120>
    30c2:	89 81       	ldd	r24, Y+1	; 0x01
    30c4:	9a 81       	ldd	r25, Y+2	; 0x02
    30c6:	fc 01       	movw	r30, r24
    30c8:	26 89       	ldd	r18, Z+22	; 0x16
    30ca:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    30ce:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    30d2:	fc 01       	movw	r30, r24
    30d4:	86 89       	ldd	r24, Z+22	; 0x16
    30d6:	28 17       	cp	r18, r24
    30d8:	08 f0       	brcs	.+2      	; 0x30dc <vTaskPriorityInherit+0x3c>
    30da:	72 c0       	rjmp	.+228    	; 0x31c0 <vTaskPriorityInherit+0x120>
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	9a 81       	ldd	r25, Y+2	; 0x02
    30e0:	fc 01       	movw	r30, r24
    30e2:	84 85       	ldd	r24, Z+12	; 0x0c
    30e4:	95 85       	ldd	r25, Z+13	; 0x0d
    30e6:	99 23       	and	r25, r25
    30e8:	8c f0       	brlt	.+34     	; 0x310c <vTaskPriorityInherit+0x6c>
    30ea:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    30ee:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    30f2:	fc 01       	movw	r30, r24
    30f4:	86 89       	ldd	r24, Z+22	; 0x16
    30f6:	88 2f       	mov	r24, r24
    30f8:	90 e0       	ldi	r25, 0x00	; 0
    30fa:	24 e0       	ldi	r18, 0x04	; 4
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	28 1b       	sub	r18, r24
    3100:	39 0b       	sbc	r19, r25
    3102:	89 81       	ldd	r24, Y+1	; 0x01
    3104:	9a 81       	ldd	r25, Y+2	; 0x02
    3106:	fc 01       	movw	r30, r24
    3108:	35 87       	std	Z+13, r19	; 0x0d
    310a:	24 87       	std	Z+12, r18	; 0x0c
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	9a 81       	ldd	r25, Y+2	; 0x02
    3110:	fc 01       	movw	r30, r24
    3112:	42 85       	ldd	r20, Z+10	; 0x0a
    3114:	53 85       	ldd	r21, Z+11	; 0x0b
    3116:	89 81       	ldd	r24, Y+1	; 0x01
    3118:	9a 81       	ldd	r25, Y+2	; 0x02
    311a:	fc 01       	movw	r30, r24
    311c:	86 89       	ldd	r24, Z+22	; 0x16
    311e:	28 2f       	mov	r18, r24
    3120:	30 e0       	ldi	r19, 0x00	; 0
    3122:	c9 01       	movw	r24, r18
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	82 0f       	add	r24, r18
    3132:	93 1f       	adc	r25, r19
    3134:	8e 58       	subi	r24, 0x8E	; 142
    3136:	9a 4f       	sbci	r25, 0xFA	; 250
    3138:	48 17       	cp	r20, r24
    313a:	59 07       	cpc	r21, r25
    313c:	b9 f5       	brne	.+110    	; 0x31ac <vTaskPriorityInherit+0x10c>
    313e:	89 81       	ldd	r24, Y+1	; 0x01
    3140:	9a 81       	ldd	r25, Y+2	; 0x02
    3142:	02 96       	adiw	r24, 0x02	; 2
    3144:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    3148:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    314c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3150:	fc 01       	movw	r30, r24
    3152:	26 89       	ldd	r18, Z+22	; 0x16
    3154:	89 81       	ldd	r24, Y+1	; 0x01
    3156:	9a 81       	ldd	r25, Y+2	; 0x02
    3158:	fc 01       	movw	r30, r24
    315a:	26 8b       	std	Z+22, r18	; 0x16
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	fc 01       	movw	r30, r24
    3162:	96 89       	ldd	r25, Z+22	; 0x16
    3164:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3168:	89 17       	cp	r24, r25
    316a:	30 f4       	brcc	.+12     	; 0x3178 <vTaskPriorityInherit+0xd8>
    316c:	89 81       	ldd	r24, Y+1	; 0x01
    316e:	9a 81       	ldd	r25, Y+2	; 0x02
    3170:	fc 01       	movw	r30, r24
    3172:	86 89       	ldd	r24, Z+22	; 0x16
    3174:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    3178:	89 81       	ldd	r24, Y+1	; 0x01
    317a:	9a 81       	ldd	r25, Y+2	; 0x02
    317c:	ac 01       	movw	r20, r24
    317e:	4e 5f       	subi	r20, 0xFE	; 254
    3180:	5f 4f       	sbci	r21, 0xFF	; 255
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	9a 81       	ldd	r25, Y+2	; 0x02
    3186:	fc 01       	movw	r30, r24
    3188:	86 89       	ldd	r24, Z+22	; 0x16
    318a:	28 2f       	mov	r18, r24
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	c9 01       	movw	r24, r18
    3190:	88 0f       	add	r24, r24
    3192:	99 1f       	adc	r25, r25
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	82 0f       	add	r24, r18
    319e:	93 1f       	adc	r25, r19
    31a0:	8e 58       	subi	r24, 0x8E	; 142
    31a2:	9a 4f       	sbci	r25, 0xFA	; 250
    31a4:	ba 01       	movw	r22, r20
    31a6:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    31aa:	0a c0       	rjmp	.+20     	; 0x31c0 <vTaskPriorityInherit+0x120>
    31ac:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31b0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31b4:	fc 01       	movw	r30, r24
    31b6:	26 89       	ldd	r18, Z+22	; 0x16
    31b8:	89 81       	ldd	r24, Y+1	; 0x01
    31ba:	9a 81       	ldd	r25, Y+2	; 0x02
    31bc:	fc 01       	movw	r30, r24
    31be:	26 8b       	std	Z+22, r18	; 0x16
    31c0:	0f 90       	pop	r0
    31c2:	0f 90       	pop	r0
    31c4:	0f 90       	pop	r0
    31c6:	0f 90       	pop	r0
    31c8:	df 91       	pop	r29
    31ca:	cf 91       	pop	r28
    31cc:	08 95       	ret

000031ce <xTaskPriorityDisinherit>:
    31ce:	cf 93       	push	r28
    31d0:	df 93       	push	r29
    31d2:	00 d0       	rcall	.+0      	; 0x31d4 <xTaskPriorityDisinherit+0x6>
    31d4:	00 d0       	rcall	.+0      	; 0x31d6 <xTaskPriorityDisinherit+0x8>
    31d6:	1f 92       	push	r1
    31d8:	cd b7       	in	r28, 0x3d	; 61
    31da:	de b7       	in	r29, 0x3e	; 62
    31dc:	9d 83       	std	Y+5, r25	; 0x05
    31de:	8c 83       	std	Y+4, r24	; 0x04
    31e0:	8c 81       	ldd	r24, Y+4	; 0x04
    31e2:	9d 81       	ldd	r25, Y+5	; 0x05
    31e4:	9b 83       	std	Y+3, r25	; 0x03
    31e6:	8a 83       	std	Y+2, r24	; 0x02
    31e8:	19 82       	std	Y+1, r1	; 0x01
    31ea:	8c 81       	ldd	r24, Y+4	; 0x04
    31ec:	9d 81       	ldd	r25, Y+5	; 0x05
    31ee:	89 2b       	or	r24, r25
    31f0:	09 f4       	brne	.+2      	; 0x31f4 <xTaskPriorityDisinherit+0x26>
    31f2:	61 c0       	rjmp	.+194    	; 0x32b6 <xTaskPriorityDisinherit+0xe8>
    31f4:	8a 81       	ldd	r24, Y+2	; 0x02
    31f6:	9b 81       	ldd	r25, Y+3	; 0x03
    31f8:	fc 01       	movw	r30, r24
    31fa:	84 a1       	ldd	r24, Z+36	; 0x24
    31fc:	2f ef       	ldi	r18, 0xFF	; 255
    31fe:	28 0f       	add	r18, r24
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	fc 01       	movw	r30, r24
    3206:	24 a3       	std	Z+36, r18	; 0x24
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	9b 81       	ldd	r25, Y+3	; 0x03
    320c:	fc 01       	movw	r30, r24
    320e:	26 89       	ldd	r18, Z+22	; 0x16
    3210:	8a 81       	ldd	r24, Y+2	; 0x02
    3212:	9b 81       	ldd	r25, Y+3	; 0x03
    3214:	fc 01       	movw	r30, r24
    3216:	83 a1       	ldd	r24, Z+35	; 0x23
    3218:	28 17       	cp	r18, r24
    321a:	09 f4       	brne	.+2      	; 0x321e <xTaskPriorityDisinherit+0x50>
    321c:	4c c0       	rjmp	.+152    	; 0x32b6 <xTaskPriorityDisinherit+0xe8>
    321e:	8a 81       	ldd	r24, Y+2	; 0x02
    3220:	9b 81       	ldd	r25, Y+3	; 0x03
    3222:	fc 01       	movw	r30, r24
    3224:	84 a1       	ldd	r24, Z+36	; 0x24
    3226:	88 23       	and	r24, r24
    3228:	09 f0       	breq	.+2      	; 0x322c <xTaskPriorityDisinherit+0x5e>
    322a:	45 c0       	rjmp	.+138    	; 0x32b6 <xTaskPriorityDisinherit+0xe8>
    322c:	8a 81       	ldd	r24, Y+2	; 0x02
    322e:	9b 81       	ldd	r25, Y+3	; 0x03
    3230:	02 96       	adiw	r24, 0x02	; 2
    3232:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
    3236:	8a 81       	ldd	r24, Y+2	; 0x02
    3238:	9b 81       	ldd	r25, Y+3	; 0x03
    323a:	fc 01       	movw	r30, r24
    323c:	23 a1       	ldd	r18, Z+35	; 0x23
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	9b 81       	ldd	r25, Y+3	; 0x03
    3242:	fc 01       	movw	r30, r24
    3244:	26 8b       	std	Z+22, r18	; 0x16
    3246:	8a 81       	ldd	r24, Y+2	; 0x02
    3248:	9b 81       	ldd	r25, Y+3	; 0x03
    324a:	fc 01       	movw	r30, r24
    324c:	86 89       	ldd	r24, Z+22	; 0x16
    324e:	88 2f       	mov	r24, r24
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	24 e0       	ldi	r18, 0x04	; 4
    3254:	30 e0       	ldi	r19, 0x00	; 0
    3256:	28 1b       	sub	r18, r24
    3258:	39 0b       	sbc	r19, r25
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	fc 01       	movw	r30, r24
    3260:	35 87       	std	Z+13, r19	; 0x0d
    3262:	24 87       	std	Z+12, r18	; 0x0c
    3264:	8a 81       	ldd	r24, Y+2	; 0x02
    3266:	9b 81       	ldd	r25, Y+3	; 0x03
    3268:	fc 01       	movw	r30, r24
    326a:	96 89       	ldd	r25, Z+22	; 0x16
    326c:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3270:	89 17       	cp	r24, r25
    3272:	30 f4       	brcc	.+12     	; 0x3280 <xTaskPriorityDisinherit+0xb2>
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	fc 01       	movw	r30, r24
    327a:	86 89       	ldd	r24, Z+22	; 0x16
    327c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    3280:	8a 81       	ldd	r24, Y+2	; 0x02
    3282:	9b 81       	ldd	r25, Y+3	; 0x03
    3284:	ac 01       	movw	r20, r24
    3286:	4e 5f       	subi	r20, 0xFE	; 254
    3288:	5f 4f       	sbci	r21, 0xFF	; 255
    328a:	8a 81       	ldd	r24, Y+2	; 0x02
    328c:	9b 81       	ldd	r25, Y+3	; 0x03
    328e:	fc 01       	movw	r30, r24
    3290:	86 89       	ldd	r24, Z+22	; 0x16
    3292:	28 2f       	mov	r18, r24
    3294:	30 e0       	ldi	r19, 0x00	; 0
    3296:	c9 01       	movw	r24, r18
    3298:	88 0f       	add	r24, r24
    329a:	99 1f       	adc	r25, r25
    329c:	88 0f       	add	r24, r24
    329e:	99 1f       	adc	r25, r25
    32a0:	88 0f       	add	r24, r24
    32a2:	99 1f       	adc	r25, r25
    32a4:	82 0f       	add	r24, r18
    32a6:	93 1f       	adc	r25, r19
    32a8:	8e 58       	subi	r24, 0x8E	; 142
    32aa:	9a 4f       	sbci	r25, 0xFA	; 250
    32ac:	ba 01       	movw	r22, r20
    32ae:	0e 94 53 06 	call	0xca6	; 0xca6 <vListInsertEnd>
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	89 83       	std	Y+1, r24	; 0x01
    32b6:	89 81       	ldd	r24, Y+1	; 0x01
    32b8:	0f 90       	pop	r0
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	df 91       	pop	r29
    32c4:	cf 91       	pop	r28
    32c6:	08 95       	ret

000032c8 <pvTaskIncrementMutexHeldCount>:
    32c8:	cf 93       	push	r28
    32ca:	df 93       	push	r29
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    32d4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    32d8:	89 2b       	or	r24, r25
    32da:	49 f0       	breq	.+18     	; 0x32ee <pvTaskIncrementMutexHeldCount+0x26>
    32dc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    32e0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    32e4:	fc 01       	movw	r30, r24
    32e6:	24 a1       	ldd	r18, Z+36	; 0x24
    32e8:	2f 5f       	subi	r18, 0xFF	; 255
    32ea:	fc 01       	movw	r30, r24
    32ec:	24 a3       	std	Z+36, r18	; 0x24
    32ee:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    32f2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    32f6:	df 91       	pop	r29
    32f8:	cf 91       	pop	r28
    32fa:	08 95       	ret

000032fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    32fc:	cf 93       	push	r28
    32fe:	df 93       	push	r29
    3300:	cd b7       	in	r28, 0x3d	; 61
    3302:	de b7       	in	r29, 0x3e	; 62
    3304:	27 97       	sbiw	r28, 0x07	; 7
    3306:	0f b6       	in	r0, 0x3f	; 63
    3308:	f8 94       	cli
    330a:	de bf       	out	0x3e, r29	; 62
    330c:	0f be       	out	0x3f, r0	; 63
    330e:	cd bf       	out	0x3d, r28	; 61
    3310:	9e 83       	std	Y+6, r25	; 0x06
    3312:	8d 83       	std	Y+5, r24	; 0x05
    3314:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3316:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    331a:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    331e:	9a 83       	std	Y+2, r25	; 0x02
    3320:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3322:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3326:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    332a:	02 96       	adiw	r24, 0x02	; 2
    332c:	0e 94 18 07 	call	0xe30	; 0xe30 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3330:	29 81       	ldd	r18, Y+1	; 0x01
    3332:	3a 81       	ldd	r19, Y+2	; 0x02
    3334:	8d 81       	ldd	r24, Y+5	; 0x05
    3336:	9e 81       	ldd	r25, Y+6	; 0x06
    3338:	82 0f       	add	r24, r18
    333a:	93 1f       	adc	r25, r19
    333c:	9c 83       	std	Y+4, r25	; 0x04
    333e:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3340:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3344:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3348:	2b 81       	ldd	r18, Y+3	; 0x03
    334a:	3c 81       	ldd	r19, Y+4	; 0x04
    334c:	fc 01       	movw	r30, r24
    334e:	33 83       	std	Z+3, r19	; 0x03
    3350:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3352:	2b 81       	ldd	r18, Y+3	; 0x03
    3354:	3c 81       	ldd	r19, Y+4	; 0x04
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	9a 81       	ldd	r25, Y+2	; 0x02
    335a:	28 17       	cp	r18, r24
    335c:	39 07       	cpc	r19, r25
    335e:	78 f4       	brcc	.+30     	; 0x337e <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3360:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3364:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3368:	9c 01       	movw	r18, r24
    336a:	2e 5f       	subi	r18, 0xFE	; 254
    336c:	3f 4f       	sbci	r19, 0xFF	; 255
    336e:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    3372:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    3376:	b9 01       	movw	r22, r18
    3378:	0e 94 a1 06 	call	0xd42	; 0xd42 <vListInsert>
    337c:	1d c0       	rjmp	.+58     	; 0x33b8 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    337e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3382:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3386:	9c 01       	movw	r18, r24
    3388:	2e 5f       	subi	r18, 0xFE	; 254
    338a:	3f 4f       	sbci	r19, 0xFF	; 255
    338c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3390:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3394:	b9 01       	movw	r22, r18
    3396:	0e 94 a1 06 	call	0xd42	; 0xd42 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    339a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    339e:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    33a2:	2b 81       	ldd	r18, Y+3	; 0x03
    33a4:	3c 81       	ldd	r19, Y+4	; 0x04
    33a6:	28 17       	cp	r18, r24
    33a8:	39 07       	cpc	r19, r25
    33aa:	30 f4       	brcc	.+12     	; 0x33b8 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    33ac:	8b 81       	ldd	r24, Y+3	; 0x03
    33ae:	9c 81       	ldd	r25, Y+4	; 0x04
    33b0:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    33b4:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    33b8:	27 96       	adiw	r28, 0x07	; 7
    33ba:	0f b6       	in	r0, 0x3f	; 63
    33bc:	f8 94       	cli
    33be:	de bf       	out	0x3e, r29	; 62
    33c0:	0f be       	out	0x3f, r0	; 63
    33c2:	cd bf       	out	0x3d, r28	; 61
    33c4:	df 91       	pop	r29
    33c6:	cf 91       	pop	r28
    33c8:	08 95       	ret

000033ca <__divmodhi4>:
    33ca:	97 fb       	bst	r25, 7
    33cc:	07 2e       	mov	r0, r23
    33ce:	16 f4       	brtc	.+4      	; 0x33d4 <__divmodhi4+0xa>
    33d0:	00 94       	com	r0
    33d2:	07 d0       	rcall	.+14     	; 0x33e2 <__divmodhi4_neg1>
    33d4:	77 fd       	sbrc	r23, 7
    33d6:	09 d0       	rcall	.+18     	; 0x33ea <__divmodhi4_neg2>
    33d8:	0e 94 21 1a 	call	0x3442	; 0x3442 <__udivmodhi4>
    33dc:	07 fc       	sbrc	r0, 7
    33de:	05 d0       	rcall	.+10     	; 0x33ea <__divmodhi4_neg2>
    33e0:	3e f4       	brtc	.+14     	; 0x33f0 <__divmodhi4_exit>

000033e2 <__divmodhi4_neg1>:
    33e2:	90 95       	com	r25
    33e4:	81 95       	neg	r24
    33e6:	9f 4f       	sbci	r25, 0xFF	; 255
    33e8:	08 95       	ret

000033ea <__divmodhi4_neg2>:
    33ea:	70 95       	com	r23
    33ec:	61 95       	neg	r22
    33ee:	7f 4f       	sbci	r23, 0xFF	; 255

000033f0 <__divmodhi4_exit>:
    33f0:	08 95       	ret

000033f2 <__udivmodsi4>:
    33f2:	a1 e2       	ldi	r26, 0x21	; 33
    33f4:	1a 2e       	mov	r1, r26
    33f6:	aa 1b       	sub	r26, r26
    33f8:	bb 1b       	sub	r27, r27
    33fa:	fd 01       	movw	r30, r26
    33fc:	0d c0       	rjmp	.+26     	; 0x3418 <__udivmodsi4_ep>

000033fe <__udivmodsi4_loop>:
    33fe:	aa 1f       	adc	r26, r26
    3400:	bb 1f       	adc	r27, r27
    3402:	ee 1f       	adc	r30, r30
    3404:	ff 1f       	adc	r31, r31
    3406:	a2 17       	cp	r26, r18
    3408:	b3 07       	cpc	r27, r19
    340a:	e4 07       	cpc	r30, r20
    340c:	f5 07       	cpc	r31, r21
    340e:	20 f0       	brcs	.+8      	; 0x3418 <__udivmodsi4_ep>
    3410:	a2 1b       	sub	r26, r18
    3412:	b3 0b       	sbc	r27, r19
    3414:	e4 0b       	sbc	r30, r20
    3416:	f5 0b       	sbc	r31, r21

00003418 <__udivmodsi4_ep>:
    3418:	66 1f       	adc	r22, r22
    341a:	77 1f       	adc	r23, r23
    341c:	88 1f       	adc	r24, r24
    341e:	99 1f       	adc	r25, r25
    3420:	1a 94       	dec	r1
    3422:	69 f7       	brne	.-38     	; 0x33fe <__udivmodsi4_loop>
    3424:	60 95       	com	r22
    3426:	70 95       	com	r23
    3428:	80 95       	com	r24
    342a:	90 95       	com	r25
    342c:	9b 01       	movw	r18, r22
    342e:	ac 01       	movw	r20, r24
    3430:	bd 01       	movw	r22, r26
    3432:	cf 01       	movw	r24, r30
    3434:	08 95       	ret

00003436 <__tablejump2__>:
    3436:	ee 0f       	add	r30, r30
    3438:	ff 1f       	adc	r31, r31
    343a:	05 90       	lpm	r0, Z+
    343c:	f4 91       	lpm	r31, Z
    343e:	e0 2d       	mov	r30, r0
    3440:	09 94       	ijmp

00003442 <__udivmodhi4>:
    3442:	aa 1b       	sub	r26, r26
    3444:	bb 1b       	sub	r27, r27
    3446:	51 e1       	ldi	r21, 0x11	; 17
    3448:	07 c0       	rjmp	.+14     	; 0x3458 <__udivmodhi4_ep>

0000344a <__udivmodhi4_loop>:
    344a:	aa 1f       	adc	r26, r26
    344c:	bb 1f       	adc	r27, r27
    344e:	a6 17       	cp	r26, r22
    3450:	b7 07       	cpc	r27, r23
    3452:	10 f0       	brcs	.+4      	; 0x3458 <__udivmodhi4_ep>
    3454:	a6 1b       	sub	r26, r22
    3456:	b7 0b       	sbc	r27, r23

00003458 <__udivmodhi4_ep>:
    3458:	88 1f       	adc	r24, r24
    345a:	99 1f       	adc	r25, r25
    345c:	5a 95       	dec	r21
    345e:	a9 f7       	brne	.-22     	; 0x344a <__udivmodhi4_loop>
    3460:	80 95       	com	r24
    3462:	90 95       	com	r25
    3464:	bc 01       	movw	r22, r24
    3466:	cd 01       	movw	r24, r26
    3468:	08 95       	ret

0000346a <malloc>:
    346a:	cf 93       	push	r28
    346c:	df 93       	push	r29
    346e:	82 30       	cpi	r24, 0x02	; 2
    3470:	91 05       	cpc	r25, r1
    3472:	10 f4       	brcc	.+4      	; 0x3478 <malloc+0xe>
    3474:	82 e0       	ldi	r24, 0x02	; 2
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <__flp>
    347c:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <__flp+0x1>
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	30 e0       	ldi	r19, 0x00	; 0
    3484:	c0 e0       	ldi	r28, 0x00	; 0
    3486:	d0 e0       	ldi	r29, 0x00	; 0
    3488:	30 97       	sbiw	r30, 0x00	; 0
    348a:	11 f1       	breq	.+68     	; 0x34d0 <malloc+0x66>
    348c:	40 81       	ld	r20, Z
    348e:	51 81       	ldd	r21, Z+1	; 0x01
    3490:	48 17       	cp	r20, r24
    3492:	59 07       	cpc	r21, r25
    3494:	c0 f0       	brcs	.+48     	; 0x34c6 <malloc+0x5c>
    3496:	48 17       	cp	r20, r24
    3498:	59 07       	cpc	r21, r25
    349a:	61 f4       	brne	.+24     	; 0x34b4 <malloc+0x4a>
    349c:	82 81       	ldd	r24, Z+2	; 0x02
    349e:	93 81       	ldd	r25, Z+3	; 0x03
    34a0:	20 97       	sbiw	r28, 0x00	; 0
    34a2:	19 f0       	breq	.+6      	; 0x34aa <malloc+0x40>
    34a4:	9b 83       	std	Y+3, r25	; 0x03
    34a6:	8a 83       	std	Y+2, r24	; 0x02
    34a8:	2b c0       	rjmp	.+86     	; 0x3500 <malloc+0x96>
    34aa:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    34ae:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    34b2:	26 c0       	rjmp	.+76     	; 0x3500 <malloc+0x96>
    34b4:	21 15       	cp	r18, r1
    34b6:	31 05       	cpc	r19, r1
    34b8:	19 f0       	breq	.+6      	; 0x34c0 <malloc+0x56>
    34ba:	42 17       	cp	r20, r18
    34bc:	53 07       	cpc	r21, r19
    34be:	18 f4       	brcc	.+6      	; 0x34c6 <malloc+0x5c>
    34c0:	9a 01       	movw	r18, r20
    34c2:	be 01       	movw	r22, r28
    34c4:	df 01       	movw	r26, r30
    34c6:	ef 01       	movw	r28, r30
    34c8:	02 80       	ldd	r0, Z+2	; 0x02
    34ca:	f3 81       	ldd	r31, Z+3	; 0x03
    34cc:	e0 2d       	mov	r30, r0
    34ce:	dc cf       	rjmp	.-72     	; 0x3488 <malloc+0x1e>
    34d0:	21 15       	cp	r18, r1
    34d2:	31 05       	cpc	r19, r1
    34d4:	09 f1       	breq	.+66     	; 0x3518 <malloc+0xae>
    34d6:	28 1b       	sub	r18, r24
    34d8:	39 0b       	sbc	r19, r25
    34da:	24 30       	cpi	r18, 0x04	; 4
    34dc:	31 05       	cpc	r19, r1
    34de:	90 f4       	brcc	.+36     	; 0x3504 <malloc+0x9a>
    34e0:	12 96       	adiw	r26, 0x02	; 2
    34e2:	8d 91       	ld	r24, X+
    34e4:	9c 91       	ld	r25, X
    34e6:	13 97       	sbiw	r26, 0x03	; 3
    34e8:	61 15       	cp	r22, r1
    34ea:	71 05       	cpc	r23, r1
    34ec:	21 f0       	breq	.+8      	; 0x34f6 <malloc+0x8c>
    34ee:	fb 01       	movw	r30, r22
    34f0:	93 83       	std	Z+3, r25	; 0x03
    34f2:	82 83       	std	Z+2, r24	; 0x02
    34f4:	04 c0       	rjmp	.+8      	; 0x34fe <malloc+0x94>
    34f6:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    34fa:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    34fe:	fd 01       	movw	r30, r26
    3500:	32 96       	adiw	r30, 0x02	; 2
    3502:	44 c0       	rjmp	.+136    	; 0x358c <malloc+0x122>
    3504:	fd 01       	movw	r30, r26
    3506:	e2 0f       	add	r30, r18
    3508:	f3 1f       	adc	r31, r19
    350a:	81 93       	st	Z+, r24
    350c:	91 93       	st	Z+, r25
    350e:	22 50       	subi	r18, 0x02	; 2
    3510:	31 09       	sbc	r19, r1
    3512:	2d 93       	st	X+, r18
    3514:	3c 93       	st	X, r19
    3516:	3a c0       	rjmp	.+116    	; 0x358c <malloc+0x122>
    3518:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    351c:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    3520:	23 2b       	or	r18, r19
    3522:	41 f4       	brne	.+16     	; 0x3534 <malloc+0xca>
    3524:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3528:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    352c:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <__brkval+0x1>
    3530:	20 93 cd 05 	sts	0x05CD, r18	; 0x8005cd <__brkval>
    3534:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3538:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    353c:	21 15       	cp	r18, r1
    353e:	31 05       	cpc	r19, r1
    3540:	41 f4       	brne	.+16     	; 0x3552 <malloc+0xe8>
    3542:	2d b7       	in	r18, 0x3d	; 61
    3544:	3e b7       	in	r19, 0x3e	; 62
    3546:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    354a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    354e:	24 1b       	sub	r18, r20
    3550:	35 0b       	sbc	r19, r21
    3552:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <__brkval>
    3556:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <__brkval+0x1>
    355a:	e2 17       	cp	r30, r18
    355c:	f3 07       	cpc	r31, r19
    355e:	a0 f4       	brcc	.+40     	; 0x3588 <malloc+0x11e>
    3560:	2e 1b       	sub	r18, r30
    3562:	3f 0b       	sbc	r19, r31
    3564:	28 17       	cp	r18, r24
    3566:	39 07       	cpc	r19, r25
    3568:	78 f0       	brcs	.+30     	; 0x3588 <malloc+0x11e>
    356a:	ac 01       	movw	r20, r24
    356c:	4e 5f       	subi	r20, 0xFE	; 254
    356e:	5f 4f       	sbci	r21, 0xFF	; 255
    3570:	24 17       	cp	r18, r20
    3572:	35 07       	cpc	r19, r21
    3574:	48 f0       	brcs	.+18     	; 0x3588 <malloc+0x11e>
    3576:	4e 0f       	add	r20, r30
    3578:	5f 1f       	adc	r21, r31
    357a:	50 93 ce 05 	sts	0x05CE, r21	; 0x8005ce <__brkval+0x1>
    357e:	40 93 cd 05 	sts	0x05CD, r20	; 0x8005cd <__brkval>
    3582:	81 93       	st	Z+, r24
    3584:	91 93       	st	Z+, r25
    3586:	02 c0       	rjmp	.+4      	; 0x358c <malloc+0x122>
    3588:	e0 e0       	ldi	r30, 0x00	; 0
    358a:	f0 e0       	ldi	r31, 0x00	; 0
    358c:	cf 01       	movw	r24, r30
    358e:	df 91       	pop	r29
    3590:	cf 91       	pop	r28
    3592:	08 95       	ret

00003594 <free>:
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	cf 93       	push	r28
    359a:	df 93       	push	r29
    359c:	00 97       	sbiw	r24, 0x00	; 0
    359e:	09 f4       	brne	.+2      	; 0x35a2 <free+0xe>
    35a0:	8c c0       	rjmp	.+280    	; 0x36ba <free+0x126>
    35a2:	fc 01       	movw	r30, r24
    35a4:	32 97       	sbiw	r30, 0x02	; 2
    35a6:	13 82       	std	Z+3, r1	; 0x03
    35a8:	12 82       	std	Z+2, r1	; 0x02
    35aa:	00 91 cf 05 	lds	r16, 0x05CF	; 0x8005cf <__flp>
    35ae:	10 91 d0 05 	lds	r17, 0x05D0	; 0x8005d0 <__flp+0x1>
    35b2:	01 15       	cp	r16, r1
    35b4:	11 05       	cpc	r17, r1
    35b6:	81 f4       	brne	.+32     	; 0x35d8 <free+0x44>
    35b8:	20 81       	ld	r18, Z
    35ba:	31 81       	ldd	r19, Z+1	; 0x01
    35bc:	82 0f       	add	r24, r18
    35be:	93 1f       	adc	r25, r19
    35c0:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    35c4:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    35c8:	28 17       	cp	r18, r24
    35ca:	39 07       	cpc	r19, r25
    35cc:	79 f5       	brne	.+94     	; 0x362c <free+0x98>
    35ce:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <__brkval+0x1>
    35d2:	e0 93 cd 05 	sts	0x05CD, r30	; 0x8005cd <__brkval>
    35d6:	71 c0       	rjmp	.+226    	; 0x36ba <free+0x126>
    35d8:	d8 01       	movw	r26, r16
    35da:	40 e0       	ldi	r20, 0x00	; 0
    35dc:	50 e0       	ldi	r21, 0x00	; 0
    35de:	ae 17       	cp	r26, r30
    35e0:	bf 07       	cpc	r27, r31
    35e2:	50 f4       	brcc	.+20     	; 0x35f8 <free+0x64>
    35e4:	12 96       	adiw	r26, 0x02	; 2
    35e6:	2d 91       	ld	r18, X+
    35e8:	3c 91       	ld	r19, X
    35ea:	13 97       	sbiw	r26, 0x03	; 3
    35ec:	ad 01       	movw	r20, r26
    35ee:	21 15       	cp	r18, r1
    35f0:	31 05       	cpc	r19, r1
    35f2:	09 f1       	breq	.+66     	; 0x3636 <free+0xa2>
    35f4:	d9 01       	movw	r26, r18
    35f6:	f3 cf       	rjmp	.-26     	; 0x35de <free+0x4a>
    35f8:	9d 01       	movw	r18, r26
    35fa:	da 01       	movw	r26, r20
    35fc:	33 83       	std	Z+3, r19	; 0x03
    35fe:	22 83       	std	Z+2, r18	; 0x02
    3600:	60 81       	ld	r22, Z
    3602:	71 81       	ldd	r23, Z+1	; 0x01
    3604:	86 0f       	add	r24, r22
    3606:	97 1f       	adc	r25, r23
    3608:	82 17       	cp	r24, r18
    360a:	93 07       	cpc	r25, r19
    360c:	69 f4       	brne	.+26     	; 0x3628 <free+0x94>
    360e:	ec 01       	movw	r28, r24
    3610:	28 81       	ld	r18, Y
    3612:	39 81       	ldd	r19, Y+1	; 0x01
    3614:	26 0f       	add	r18, r22
    3616:	37 1f       	adc	r19, r23
    3618:	2e 5f       	subi	r18, 0xFE	; 254
    361a:	3f 4f       	sbci	r19, 0xFF	; 255
    361c:	31 83       	std	Z+1, r19	; 0x01
    361e:	20 83       	st	Z, r18
    3620:	8a 81       	ldd	r24, Y+2	; 0x02
    3622:	9b 81       	ldd	r25, Y+3	; 0x03
    3624:	93 83       	std	Z+3, r25	; 0x03
    3626:	82 83       	std	Z+2, r24	; 0x02
    3628:	45 2b       	or	r20, r21
    362a:	29 f4       	brne	.+10     	; 0x3636 <free+0xa2>
    362c:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <__flp+0x1>
    3630:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <__flp>
    3634:	42 c0       	rjmp	.+132    	; 0x36ba <free+0x126>
    3636:	13 96       	adiw	r26, 0x03	; 3
    3638:	fc 93       	st	X, r31
    363a:	ee 93       	st	-X, r30
    363c:	12 97       	sbiw	r26, 0x02	; 2
    363e:	ed 01       	movw	r28, r26
    3640:	49 91       	ld	r20, Y+
    3642:	59 91       	ld	r21, Y+
    3644:	9e 01       	movw	r18, r28
    3646:	24 0f       	add	r18, r20
    3648:	35 1f       	adc	r19, r21
    364a:	e2 17       	cp	r30, r18
    364c:	f3 07       	cpc	r31, r19
    364e:	71 f4       	brne	.+28     	; 0x366c <free+0xd8>
    3650:	80 81       	ld	r24, Z
    3652:	91 81       	ldd	r25, Z+1	; 0x01
    3654:	84 0f       	add	r24, r20
    3656:	95 1f       	adc	r25, r21
    3658:	02 96       	adiw	r24, 0x02	; 2
    365a:	11 96       	adiw	r26, 0x01	; 1
    365c:	9c 93       	st	X, r25
    365e:	8e 93       	st	-X, r24
    3660:	82 81       	ldd	r24, Z+2	; 0x02
    3662:	93 81       	ldd	r25, Z+3	; 0x03
    3664:	13 96       	adiw	r26, 0x03	; 3
    3666:	9c 93       	st	X, r25
    3668:	8e 93       	st	-X, r24
    366a:	12 97       	sbiw	r26, 0x02	; 2
    366c:	e0 e0       	ldi	r30, 0x00	; 0
    366e:	f0 e0       	ldi	r31, 0x00	; 0
    3670:	d8 01       	movw	r26, r16
    3672:	12 96       	adiw	r26, 0x02	; 2
    3674:	8d 91       	ld	r24, X+
    3676:	9c 91       	ld	r25, X
    3678:	13 97       	sbiw	r26, 0x03	; 3
    367a:	00 97       	sbiw	r24, 0x00	; 0
    367c:	19 f0       	breq	.+6      	; 0x3684 <free+0xf0>
    367e:	f8 01       	movw	r30, r16
    3680:	8c 01       	movw	r16, r24
    3682:	f6 cf       	rjmp	.-20     	; 0x3670 <free+0xdc>
    3684:	8d 91       	ld	r24, X+
    3686:	9c 91       	ld	r25, X
    3688:	98 01       	movw	r18, r16
    368a:	2e 5f       	subi	r18, 0xFE	; 254
    368c:	3f 4f       	sbci	r19, 0xFF	; 255
    368e:	82 0f       	add	r24, r18
    3690:	93 1f       	adc	r25, r19
    3692:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    3696:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    369a:	28 17       	cp	r18, r24
    369c:	39 07       	cpc	r19, r25
    369e:	69 f4       	brne	.+26     	; 0x36ba <free+0x126>
    36a0:	30 97       	sbiw	r30, 0x00	; 0
    36a2:	29 f4       	brne	.+10     	; 0x36ae <free+0x11a>
    36a4:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp+0x1>
    36a8:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <__flp>
    36ac:	02 c0       	rjmp	.+4      	; 0x36b2 <free+0x11e>
    36ae:	13 82       	std	Z+3, r1	; 0x03
    36b0:	12 82       	std	Z+2, r1	; 0x02
    36b2:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <__brkval+0x1>
    36b6:	00 93 cd 05 	sts	0x05CD, r16	; 0x8005cd <__brkval>
    36ba:	df 91       	pop	r29
    36bc:	cf 91       	pop	r28
    36be:	1f 91       	pop	r17
    36c0:	0f 91       	pop	r16
    36c2:	08 95       	ret

000036c4 <do_rand>:
    36c4:	8f 92       	push	r8
    36c6:	9f 92       	push	r9
    36c8:	af 92       	push	r10
    36ca:	bf 92       	push	r11
    36cc:	cf 92       	push	r12
    36ce:	df 92       	push	r13
    36d0:	ef 92       	push	r14
    36d2:	ff 92       	push	r15
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	ec 01       	movw	r28, r24
    36da:	68 81       	ld	r22, Y
    36dc:	79 81       	ldd	r23, Y+1	; 0x01
    36de:	8a 81       	ldd	r24, Y+2	; 0x02
    36e0:	9b 81       	ldd	r25, Y+3	; 0x03
    36e2:	61 15       	cp	r22, r1
    36e4:	71 05       	cpc	r23, r1
    36e6:	81 05       	cpc	r24, r1
    36e8:	91 05       	cpc	r25, r1
    36ea:	21 f4       	brne	.+8      	; 0x36f4 <do_rand+0x30>
    36ec:	64 e2       	ldi	r22, 0x24	; 36
    36ee:	79 ed       	ldi	r23, 0xD9	; 217
    36f0:	8b e5       	ldi	r24, 0x5B	; 91
    36f2:	97 e0       	ldi	r25, 0x07	; 7
    36f4:	2d e1       	ldi	r18, 0x1D	; 29
    36f6:	33 ef       	ldi	r19, 0xF3	; 243
    36f8:	41 e0       	ldi	r20, 0x01	; 1
    36fa:	50 e0       	ldi	r21, 0x00	; 0
    36fc:	0e 94 ce 1b 	call	0x379c	; 0x379c <__divmodsi4>
    3700:	49 01       	movw	r8, r18
    3702:	5a 01       	movw	r10, r20
    3704:	9b 01       	movw	r18, r22
    3706:	ac 01       	movw	r20, r24
    3708:	a7 ea       	ldi	r26, 0xA7	; 167
    370a:	b1 e4       	ldi	r27, 0x41	; 65
    370c:	0e 94 ed 1b 	call	0x37da	; 0x37da <__muluhisi3>
    3710:	6b 01       	movw	r12, r22
    3712:	7c 01       	movw	r14, r24
    3714:	ac ee       	ldi	r26, 0xEC	; 236
    3716:	b4 ef       	ldi	r27, 0xF4	; 244
    3718:	a5 01       	movw	r20, r10
    371a:	94 01       	movw	r18, r8
    371c:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <__mulohisi3>
    3720:	dc 01       	movw	r26, r24
    3722:	cb 01       	movw	r24, r22
    3724:	8c 0d       	add	r24, r12
    3726:	9d 1d       	adc	r25, r13
    3728:	ae 1d       	adc	r26, r14
    372a:	bf 1d       	adc	r27, r15
    372c:	b7 ff       	sbrs	r27, 7
    372e:	03 c0       	rjmp	.+6      	; 0x3736 <do_rand+0x72>
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	a1 09       	sbc	r26, r1
    3734:	b0 48       	sbci	r27, 0x80	; 128
    3736:	88 83       	st	Y, r24
    3738:	99 83       	std	Y+1, r25	; 0x01
    373a:	aa 83       	std	Y+2, r26	; 0x02
    373c:	bb 83       	std	Y+3, r27	; 0x03
    373e:	9f 77       	andi	r25, 0x7F	; 127
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	ff 90       	pop	r15
    3746:	ef 90       	pop	r14
    3748:	df 90       	pop	r13
    374a:	cf 90       	pop	r12
    374c:	bf 90       	pop	r11
    374e:	af 90       	pop	r10
    3750:	9f 90       	pop	r9
    3752:	8f 90       	pop	r8
    3754:	08 95       	ret

00003756 <rand_r>:
    3756:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <do_rand>
    375a:	08 95       	ret

0000375c <rand>:
    375c:	86 e0       	ldi	r24, 0x06	; 6
    375e:	91 e0       	ldi	r25, 0x01	; 1
    3760:	0e 94 62 1b 	call	0x36c4	; 0x36c4 <do_rand>
    3764:	08 95       	ret

00003766 <srand>:
    3766:	a0 e0       	ldi	r26, 0x00	; 0
    3768:	b0 e0       	ldi	r27, 0x00	; 0
    376a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    376e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3772:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3776:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    377a:	08 95       	ret

0000377c <memcpy>:
    377c:	fb 01       	movw	r30, r22
    377e:	dc 01       	movw	r26, r24
    3780:	02 c0       	rjmp	.+4      	; 0x3786 <memcpy+0xa>
    3782:	01 90       	ld	r0, Z+
    3784:	0d 92       	st	X+, r0
    3786:	41 50       	subi	r20, 0x01	; 1
    3788:	50 40       	sbci	r21, 0x00	; 0
    378a:	d8 f7       	brcc	.-10     	; 0x3782 <memcpy+0x6>
    378c:	08 95       	ret

0000378e <memset>:
    378e:	dc 01       	movw	r26, r24
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <memset+0x6>
    3792:	6d 93       	st	X+, r22
    3794:	41 50       	subi	r20, 0x01	; 1
    3796:	50 40       	sbci	r21, 0x00	; 0
    3798:	e0 f7       	brcc	.-8      	; 0x3792 <memset+0x4>
    379a:	08 95       	ret

0000379c <__divmodsi4>:
    379c:	05 2e       	mov	r0, r21
    379e:	97 fb       	bst	r25, 7
    37a0:	1e f4       	brtc	.+6      	; 0x37a8 <__divmodsi4+0xc>
    37a2:	00 94       	com	r0
    37a4:	0e 94 e5 1b 	call	0x37ca	; 0x37ca <__negsi2>
    37a8:	57 fd       	sbrc	r21, 7
    37aa:	07 d0       	rcall	.+14     	; 0x37ba <__divmodsi4_neg2>
    37ac:	0e 94 f9 19 	call	0x33f2	; 0x33f2 <__udivmodsi4>
    37b0:	07 fc       	sbrc	r0, 7
    37b2:	03 d0       	rcall	.+6      	; 0x37ba <__divmodsi4_neg2>
    37b4:	4e f4       	brtc	.+18     	; 0x37c8 <__divmodsi4_exit>
    37b6:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <__negsi2>

000037ba <__divmodsi4_neg2>:
    37ba:	50 95       	com	r21
    37bc:	40 95       	com	r20
    37be:	30 95       	com	r19
    37c0:	21 95       	neg	r18
    37c2:	3f 4f       	sbci	r19, 0xFF	; 255
    37c4:	4f 4f       	sbci	r20, 0xFF	; 255
    37c6:	5f 4f       	sbci	r21, 0xFF	; 255

000037c8 <__divmodsi4_exit>:
    37c8:	08 95       	ret

000037ca <__negsi2>:
    37ca:	90 95       	com	r25
    37cc:	80 95       	com	r24
    37ce:	70 95       	com	r23
    37d0:	61 95       	neg	r22
    37d2:	7f 4f       	sbci	r23, 0xFF	; 255
    37d4:	8f 4f       	sbci	r24, 0xFF	; 255
    37d6:	9f 4f       	sbci	r25, 0xFF	; 255
    37d8:	08 95       	ret

000037da <__muluhisi3>:
    37da:	0e 94 00 1c 	call	0x3800	; 0x3800 <__umulhisi3>
    37de:	a5 9f       	mul	r26, r21
    37e0:	90 0d       	add	r25, r0
    37e2:	b4 9f       	mul	r27, r20
    37e4:	90 0d       	add	r25, r0
    37e6:	a4 9f       	mul	r26, r20
    37e8:	80 0d       	add	r24, r0
    37ea:	91 1d       	adc	r25, r1
    37ec:	11 24       	eor	r1, r1
    37ee:	08 95       	ret

000037f0 <__mulshisi3>:
    37f0:	b7 ff       	sbrs	r27, 7
    37f2:	0c 94 ed 1b 	jmp	0x37da	; 0x37da <__muluhisi3>

000037f6 <__mulohisi3>:
    37f6:	0e 94 ed 1b 	call	0x37da	; 0x37da <__muluhisi3>
    37fa:	82 1b       	sub	r24, r18
    37fc:	93 0b       	sbc	r25, r19
    37fe:	08 95       	ret

00003800 <__umulhisi3>:
    3800:	a2 9f       	mul	r26, r18
    3802:	b0 01       	movw	r22, r0
    3804:	b3 9f       	mul	r27, r19
    3806:	c0 01       	movw	r24, r0
    3808:	a3 9f       	mul	r26, r19
    380a:	70 0d       	add	r23, r0
    380c:	81 1d       	adc	r24, r1
    380e:	11 24       	eor	r1, r1
    3810:	91 1d       	adc	r25, r1
    3812:	b2 9f       	mul	r27, r18
    3814:	70 0d       	add	r23, r0
    3816:	81 1d       	adc	r24, r1
    3818:	11 24       	eor	r1, r1
    381a:	91 1d       	adc	r25, r1
    381c:	08 95       	ret

0000381e <_exit>:
    381e:	f8 94       	cli

00003820 <__stop_program>:
    3820:	ff cf       	rjmp	.-2      	; 0x3820 <__stop_program>
