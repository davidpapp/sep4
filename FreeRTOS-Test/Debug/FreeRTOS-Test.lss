
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  00003c2e  00003cc2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c2e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000685  00800142  00800142  00003d04  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003d04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d34  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000588  00000000  00000000  00003d74  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003ce5  00000000  00000000  000042fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000de6  00000000  00000000  00007fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000038c2  00000000  00000000  00008dc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001534  00000000  00000000  0000c68c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001aa0  00000000  00000000  0000dbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002ca5  00000000  00000000  0000f660  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004d8  00000000  00000000  00012305  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 63 0b 	jmp	0x16c6	; 0x16c6 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 88 05 	jmp	0xb10	; 0xb10 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 ff 0c 	jmp	0x19fe	; 0x19fe <__vector_20>
      54:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 b1 0d 	jmp	0x1b62	; 0x1b62 <__vector_28>
      74:	0c 94 09 0e 	jmp	0x1c12	; 0x1c12 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	e9 01       	movw	r28, r18
      7e:	ef 01       	movw	r28, r30
      80:	fa 01       	movw	r30, r20
      82:	00 02       	muls	r16, r16
      84:	0b 02       	muls	r16, r27
      86:	11 02       	muls	r17, r17
      88:	1c 02       	muls	r17, r28
      8a:	22 02       	muls	r18, r18

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ee e2       	ldi	r30, 0x2E	; 46
      a0:	fc e3       	ldi	r31, 0x3C	; 60
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a2 34       	cpi	r26, 0x42	; 66
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	27 e0       	ldi	r18, 0x07	; 7
      b0:	a2 e4       	ldi	r26, 0x42	; 66
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a7 3c       	cpi	r26, 0xC7	; 199
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 1b 04 	call	0x836	; 0x836 <main>
      c2:	0c 94 15 1e 	jmp	0x3c2a	; 0x3c2a <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <game_idle>:
		 return game_idle_entry;
	 }
	 else{
		 return game_score;
	 }
 }
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	89 e2       	ldi	r24, 0x29	; 41
      d4:	90 e0       	ldi	r25, 0x00	; 0
      d6:	fc 01       	movw	r30, r24
      d8:	80 81       	ld	r24, Z
      da:	88 2f       	mov	r24, r24
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	88 70       	andi	r24, 0x08	; 8
      e0:	99 27       	eor	r25, r25
      e2:	89 2b       	or	r24, r25
      e4:	19 f4       	brne	.+6      	; 0xec <game_idle+0x22>
      e6:	86 e8       	ldi	r24, 0x86	; 134
      e8:	90 e0       	ldi	r25, 0x00	; 0
      ea:	02 c0       	rjmp	.+4      	; 0xf0 <game_idle+0x26>
      ec:	85 e6       	ldi	r24, 0x65	; 101
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	df 91       	pop	r29
      f2:	cf 91       	pop	r28
      f4:	08 95       	ret

000000f6 <game_idle_entry>:
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62
      fe:	0e 94 50 01 	call	0x2a0	; 0x2a0 <clr_scr>
     102:	85 e6       	ldi	r24, 0x65	; 101
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	df 91       	pop	r29
     108:	cf 91       	pop	r28
     10a:	08 95       	ret

0000010c <game_run>:
     10c:	cf 93       	push	r28
     10e:	df 93       	push	r29
     110:	1f 92       	push	r1
     112:	cd b7       	in	r28, 0x3d	; 61
     114:	de b7       	in	r29, 0x3e	; 62
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	89 83       	std	Y+1, r24	; 0x01
     11a:	0f c0       	rjmp	.+30     	; 0x13a <game_run+0x2e>
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	0e 94 c6 01 	call	0x38c	; 0x38c <calc_next>
     122:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     126:	8e 30       	cpi	r24, 0x0E	; 14
     128:	20 f4       	brcc	.+8      	; 0x132 <game_run+0x26>
     12a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     12e:	8a 30       	cpi	r24, 0x0A	; 10
     130:	20 f0       	brcs	.+8      	; 0x13a <game_run+0x2e>
     132:	0e 94 30 02 	call	0x460	; 0x460 <bounce>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	89 83       	std	Y+1, r24	; 0x01
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	88 23       	and	r24, r24
     13e:	71 f7       	brne	.-36     	; 0x11c <game_run+0x10>
     140:	0e 94 a3 02 	call	0x546	; 0x546 <refresh_ball>
     144:	86 e8       	ldi	r24, 0x86	; 134
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	0f 90       	pop	r0
     14a:	df 91       	pop	r29
     14c:	cf 91       	pop	r28
     14e:	08 95       	ret

00000150 <init_game>:

 void *init_game(uint8_t *p){
     150:	cf 93       	push	r28
     152:	df 93       	push	r29
     154:	00 d0       	rcall	.+0      	; 0x156 <init_game+0x6>
     156:	cd b7       	in	r28, 0x3d	; 61
     158:	de b7       	in	r29, 0x3e	; 62
     15a:	9a 83       	std	Y+2, r25	; 0x02
     15c:	89 83       	std	Y+1, r24	; 0x01
	 screen_buffer = p;
     15e:	89 81       	ldd	r24, Y+1	; 0x01
     160:	9a 81       	ldd	r25, Y+2	; 0x02
     162:	90 93 43 01 	sts	0x0143, r25	; 0x800143 <__data_end+0x1>
     166:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <__data_end>
	 display_title();
     16a:	0e 94 c2 00 	call	0x184	; 0x184 <display_title>
	 vTaskDelay(2000);
     16e:	80 ed       	ldi	r24, 0xD0	; 208
     170:	97 e0       	ldi	r25, 0x07	; 7
     172:	0e 94 e5 15 	call	0x2bca	; 0x2bca <vTaskDelay>
	 return game_idle_entry;
     176:	8b e7       	ldi	r24, 0x7B	; 123
     178:	90 e0       	ldi	r25, 0x00	; 0
 }
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <display_title>:

 void display_title(){
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	cd b7       	in	r28, 0x3d	; 61
     18a:	de b7       	in	r29, 0x3e	; 62
	screen_buffer[13] = 240;
     18c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     190:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     194:	4a 96       	adiw	r24, 0x1a	; 26
     196:	20 ef       	ldi	r18, 0xF0	; 240
     198:	30 e0       	ldi	r19, 0x00	; 0
     19a:	fc 01       	movw	r30, r24
     19c:	31 83       	std	Z+1, r19	; 0x01
     19e:	20 83       	st	Z, r18
	screen_buffer[12] = 336;
     1a0:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1a4:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     1a8:	48 96       	adiw	r24, 0x18	; 24
     1aa:	20 e5       	ldi	r18, 0x50	; 80
     1ac:	31 e0       	ldi	r19, 0x01	; 1
     1ae:	fc 01       	movw	r30, r24
     1b0:	31 83       	std	Z+1, r19	; 0x01
     1b2:	20 83       	st	Z, r18
	screen_buffer[11] = 288;
     1b4:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1b8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     1bc:	46 96       	adiw	r24, 0x16	; 22
     1be:	20 e2       	ldi	r18, 0x20	; 32
     1c0:	31 e0       	ldi	r19, 0x01	; 1
     1c2:	fc 01       	movw	r30, r24
     1c4:	31 83       	std	Z+1, r19	; 0x01
     1c6:	20 83       	st	Z, r18
	screen_buffer[10] = 0;
     1c8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1cc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     1d0:	44 96       	adiw	r24, 0x14	; 20
     1d2:	fc 01       	movw	r30, r24
     1d4:	11 82       	std	Z+1, r1	; 0x01
     1d6:	10 82       	st	Z, r1
	screen_buffer[9] = 224;
     1d8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1dc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     1e0:	42 96       	adiw	r24, 0x12	; 18
     1e2:	20 ee       	ldi	r18, 0xE0	; 224
     1e4:	30 e0       	ldi	r19, 0x00	; 0
     1e6:	fc 01       	movw	r30, r24
     1e8:	31 83       	std	Z+1, r19	; 0x01
     1ea:	20 83       	st	Z, r18
	screen_buffer[8] = 16;
     1ec:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     1f0:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     1f4:	40 96       	adiw	r24, 0x10	; 16
     1f6:	20 e1       	ldi	r18, 0x10	; 16
     1f8:	30 e0       	ldi	r19, 0x00	; 0
     1fa:	fc 01       	movw	r30, r24
     1fc:	31 83       	std	Z+1, r19	; 0x01
     1fe:	20 83       	st	Z, r18
	screen_buffer[7] = 240;
     200:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     204:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     208:	0e 96       	adiw	r24, 0x0e	; 14
     20a:	20 ef       	ldi	r18, 0xF0	; 240
     20c:	30 e0       	ldi	r19, 0x00	; 0
     20e:	fc 01       	movw	r30, r24
     210:	31 83       	std	Z+1, r19	; 0x01
     212:	20 83       	st	Z, r18
	screen_buffer[6] = 0;
     214:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     218:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     21c:	0c 96       	adiw	r24, 0x0c	; 12
     21e:	fc 01       	movw	r30, r24
     220:	11 82       	std	Z+1, r1	; 0x01
     222:	10 82       	st	Z, r1
	screen_buffer[5] = 96;
     224:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     228:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     22c:	0a 96       	adiw	r24, 0x0a	; 10
     22e:	20 e6       	ldi	r18, 0x60	; 96
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	fc 01       	movw	r30, r24
     234:	31 83       	std	Z+1, r19	; 0x01
     236:	20 83       	st	Z, r18
	screen_buffer[4] = 144;
     238:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     23c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     240:	08 96       	adiw	r24, 0x08	; 8
     242:	20 e9       	ldi	r18, 0x90	; 144
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	fc 01       	movw	r30, r24
     248:	31 83       	std	Z+1, r19	; 0x01
     24a:	20 83       	st	Z, r18
	screen_buffer[3] = 96;
     24c:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     250:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     254:	06 96       	adiw	r24, 0x06	; 6
     256:	20 e6       	ldi	r18, 0x60	; 96
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	fc 01       	movw	r30, r24
     25c:	31 83       	std	Z+1, r19	; 0x01
     25e:	20 83       	st	Z, r18
	screen_buffer[2] = 12;
     260:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     264:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     268:	04 96       	adiw	r24, 0x04	; 4
     26a:	2c e0       	ldi	r18, 0x0C	; 12
     26c:	30 e0       	ldi	r19, 0x00	; 0
     26e:	fc 01       	movw	r30, r24
     270:	31 83       	std	Z+1, r19	; 0x01
     272:	20 83       	st	Z, r18
	screen_buffer[1] = 18;
     274:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     278:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     27c:	02 96       	adiw	r24, 0x02	; 2
     27e:	22 e1       	ldi	r18, 0x12	; 18
     280:	30 e0       	ldi	r19, 0x00	; 0
     282:	fc 01       	movw	r30, r24
     284:	31 83       	std	Z+1, r19	; 0x01
     286:	20 83       	st	Z, r18
	screen_buffer[0] = 254;
     288:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     28c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     290:	2e ef       	ldi	r18, 0xFE	; 254
     292:	30 e0       	ldi	r19, 0x00	; 0
     294:	fc 01       	movw	r30, r24
     296:	31 83       	std	Z+1, r19	; 0x01
     298:	20 83       	st	Z, r18
 }
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	08 95       	ret

000002a0 <clr_scr>:

 void clr_scr(){
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
	 screen_buffer[13] = 0;
     2a8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2ac:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2b0:	4a 96       	adiw	r24, 0x1a	; 26
     2b2:	fc 01       	movw	r30, r24
     2b4:	11 82       	std	Z+1, r1	; 0x01
     2b6:	10 82       	st	Z, r1
	 screen_buffer[12] = 0;
     2b8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2bc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2c0:	48 96       	adiw	r24, 0x18	; 24
     2c2:	fc 01       	movw	r30, r24
     2c4:	11 82       	std	Z+1, r1	; 0x01
     2c6:	10 82       	st	Z, r1
	 screen_buffer[11] = 0;
     2c8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2cc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2d0:	46 96       	adiw	r24, 0x16	; 22
     2d2:	fc 01       	movw	r30, r24
     2d4:	11 82       	std	Z+1, r1	; 0x01
     2d6:	10 82       	st	Z, r1
	 screen_buffer[10] = 0;
     2d8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2dc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2e0:	44 96       	adiw	r24, 0x14	; 20
     2e2:	fc 01       	movw	r30, r24
     2e4:	11 82       	std	Z+1, r1	; 0x01
     2e6:	10 82       	st	Z, r1
	 screen_buffer[9] = 0;
     2e8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2ec:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     2f0:	42 96       	adiw	r24, 0x12	; 18
     2f2:	fc 01       	movw	r30, r24
     2f4:	11 82       	std	Z+1, r1	; 0x01
     2f6:	10 82       	st	Z, r1
	 screen_buffer[8] = 0;
     2f8:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     2fc:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     300:	40 96       	adiw	r24, 0x10	; 16
     302:	fc 01       	movw	r30, r24
     304:	11 82       	std	Z+1, r1	; 0x01
     306:	10 82       	st	Z, r1
	 screen_buffer[7] = 0;
     308:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     30c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     310:	0e 96       	adiw	r24, 0x0e	; 14
     312:	fc 01       	movw	r30, r24
     314:	11 82       	std	Z+1, r1	; 0x01
     316:	10 82       	st	Z, r1
	 screen_buffer[6] = 0;
     318:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     31c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     320:	0c 96       	adiw	r24, 0x0c	; 12
     322:	fc 01       	movw	r30, r24
     324:	11 82       	std	Z+1, r1	; 0x01
     326:	10 82       	st	Z, r1
	 screen_buffer[5] = 0;
     328:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     32c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     330:	0a 96       	adiw	r24, 0x0a	; 10
     332:	fc 01       	movw	r30, r24
     334:	11 82       	std	Z+1, r1	; 0x01
     336:	10 82       	st	Z, r1
	 screen_buffer[4] = 0;
     338:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     33c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     340:	08 96       	adiw	r24, 0x08	; 8
     342:	fc 01       	movw	r30, r24
     344:	11 82       	std	Z+1, r1	; 0x01
     346:	10 82       	st	Z, r1
	 screen_buffer[3] = 0;
     348:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     34c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     350:	06 96       	adiw	r24, 0x06	; 6
     352:	fc 01       	movw	r30, r24
     354:	11 82       	std	Z+1, r1	; 0x01
     356:	10 82       	st	Z, r1
	 screen_buffer[2] = 0;
     358:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     35c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     360:	04 96       	adiw	r24, 0x04	; 4
     362:	fc 01       	movw	r30, r24
     364:	11 82       	std	Z+1, r1	; 0x01
     366:	10 82       	st	Z, r1
	 screen_buffer[1] = 0;
     368:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     36c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     370:	02 96       	adiw	r24, 0x02	; 2
     372:	fc 01       	movw	r30, r24
     374:	11 82       	std	Z+1, r1	; 0x01
     376:	10 82       	st	Z, r1
	 screen_buffer[0] = 0;
     378:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
     37c:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
     380:	fc 01       	movw	r30, r24
     382:	11 82       	std	Z+1, r1	; 0x01
     384:	10 82       	st	Z, r1
 }
     386:	df 91       	pop	r29
     388:	cf 91       	pop	r28
     38a:	08 95       	ret

0000038c <calc_next>:

 void calc_next(){
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	cd b7       	in	r28, 0x3d	; 61
     392:	de b7       	in	r29, 0x3e	; 62
	ball_next_pos[0] = ball_curr_pos[0];
     394:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ball_curr_pos>
     398:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
	ball_next_pos[1] = ball_curr_pos[1];
     39c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <ball_curr_pos+0x1>
     3a0:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>

	switch (direction)
     3a4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <direction>
     3a8:	88 2f       	mov	r24, r24
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	09 2e       	mov	r0, r25
     3ae:	00 0c       	add	r0, r0
     3b0:	aa 0b       	sbc	r26, r26
     3b2:	bb 0b       	sbc	r27, r27
     3b4:	40 e0       	ldi	r20, 0x00	; 0
     3b6:	50 e0       	ldi	r21, 0x00	; 0
     3b8:	27 e0       	ldi	r18, 0x07	; 7
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	84 1b       	sub	r24, r20
     3be:	95 0b       	sbc	r25, r21
     3c0:	28 17       	cp	r18, r24
     3c2:	39 07       	cpc	r19, r25
     3c4:	08 f4       	brcc	.+2      	; 0x3c8 <calc_next+0x3c>
     3c6:	49 c0       	rjmp	.+146    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
     3c8:	82 5c       	subi	r24, 0xC2	; 194
     3ca:	9f 4f       	sbci	r25, 0xFF	; 255
     3cc:	fc 01       	movw	r30, r24
     3ce:	0c 94 21 1c 	jmp	0x3842	; 0x3842 <__tablejump2__>
	{
		case 0:
		--ball_next_pos[1];
     3d2:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     3d6:	81 50       	subi	r24, 0x01	; 1
     3d8:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     3dc:	3e c0       	rjmp	.+124    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 1:
		++ball_next_pos[0];
     3de:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     3e2:	8f 5f       	subi	r24, 0xFF	; 255
     3e4:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		--ball_next_pos[1];
     3e8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     3ec:	81 50       	subi	r24, 0x01	; 1
     3ee:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     3f2:	33 c0       	rjmp	.+102    	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 2:
		++ball_next_pos[0];
     3f4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     3f8:	8f 5f       	subi	r24, 0xFF	; 255
     3fa:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		break;
     3fe:	2d c0       	rjmp	.+90     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 3:
		++ball_next_pos[0];
     400:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		++ball_next_pos[1];
     40a:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     40e:	8f 5f       	subi	r24, 0xFF	; 255
     410:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     414:	22 c0       	rjmp	.+68     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 4:
		++ball_next_pos[1];
     416:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     41a:	8f 5f       	subi	r24, 0xFF	; 255
     41c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     420:	1c c0       	rjmp	.+56     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 5:
		--ball_next_pos[0];
     422:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     426:	81 50       	subi	r24, 0x01	; 1
     428:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		++ball_next_pos[1];
     42c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     436:	11 c0       	rjmp	.+34     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 6:
		--ball_next_pos[0];
     438:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     43c:	81 50       	subi	r24, 0x01	; 1
     43e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		break;
     442:	0b c0       	rjmp	.+22     	; 0x45a <__FUSE_REGION_LENGTH__+0x5a>
		case 7:
		--ball_next_pos[0];
     444:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     448:	81 50       	subi	r24, 0x01	; 1
     44a:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ball_next_pos>
		--ball_next_pos[1];
     44e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     452:	81 50       	subi	r24, 0x01	; 1
     454:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ball_next_pos+0x1>
		break;
     458:	00 00       	nop
	}
 }
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <bounce>:

 void bounce(){
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	00 d0       	rcall	.+0      	; 0x466 <bounce+0x6>
     466:	1f 92       	push	r1
     468:	cd b7       	in	r28, 0x3d	; 61
     46a:	de b7       	in	r29, 0x3e	; 62
	
	if ( (direction%2)==0){
     46c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <direction>
     470:	81 70       	andi	r24, 0x01	; 1
     472:	88 23       	and	r24, r24
     474:	b9 f4       	brne	.+46     	; 0x4a4 <bounce+0x44>
		uint8_t r = rand()%3;
     476:	0e 94 b4 1d 	call	0x3b68	; 0x3b68 <rand>
     47a:	23 e0       	ldi	r18, 0x03	; 3
     47c:	30 e0       	ldi	r19, 0x00	; 0
     47e:	b9 01       	movw	r22, r18
     480:	0e 94 eb 1b 	call	0x37d6	; 0x37d6 <__divmodhi4>
     484:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	8d 5f       	subi	r24, 0xFD	; 253
     48a:	89 83       	std	Y+1, r24	; 0x01
		r += direction;
     48c:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <direction>
     490:	99 81       	ldd	r25, Y+1	; 0x01
     492:	89 0f       	add	r24, r25
     494:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     496:	89 81       	ldd	r24, Y+1	; 0x01
     498:	87 70       	andi	r24, 0x07	; 7
     49a:	89 83       	std	Y+1, r24	; 0x01
		direction = r;
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
     4a2:	4b c0       	rjmp	.+150    	; 0x53a <bounce+0xda>
	}
	else{
		if (ball_next_pos[1] > 9){
     4a4:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     4a8:	8a 30       	cpi	r24, 0x0A	; 10
     4aa:	20 f1       	brcs	.+72     	; 0x4f4 <bounce+0x94>
			switch (direction){
     4ac:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <direction>
     4b0:	88 2f       	mov	r24, r24
     4b2:	90 e0       	ldi	r25, 0x00	; 0
     4b4:	83 30       	cpi	r24, 0x03	; 3
     4b6:	91 05       	cpc	r25, r1
     4b8:	81 f0       	breq	.+32     	; 0x4da <bounce+0x7a>
     4ba:	84 30       	cpi	r24, 0x04	; 4
     4bc:	91 05       	cpc	r25, r1
     4be:	1c f4       	brge	.+6      	; 0x4c6 <bounce+0x66>
     4c0:	01 97       	sbiw	r24, 0x01	; 1
     4c2:	39 f0       	breq	.+14     	; 0x4d2 <bounce+0x72>
     4c4:	3a c0       	rjmp	.+116    	; 0x53a <bounce+0xda>
     4c6:	85 30       	cpi	r24, 0x05	; 5
     4c8:	91 05       	cpc	r25, r1
     4ca:	59 f0       	breq	.+22     	; 0x4e2 <bounce+0x82>
     4cc:	07 97       	sbiw	r24, 0x07	; 7
     4ce:	69 f0       	breq	.+26     	; 0x4ea <bounce+0x8a>
     4d0:	34 c0       	rjmp	.+104    	; 0x53a <bounce+0xda>
				case 1:
				direction = 3;
     4d2:	83 e0       	ldi	r24, 0x03	; 3
     4d4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     4d8:	0c c0       	rjmp	.+24     	; 0x4f2 <bounce+0x92>
				case 3:
				direction = 1;
     4da:	81 e0       	ldi	r24, 0x01	; 1
     4dc:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     4e0:	08 c0       	rjmp	.+16     	; 0x4f2 <bounce+0x92>
				case 5:
				direction = 7;
     4e2:	87 e0       	ldi	r24, 0x07	; 7
     4e4:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     4e8:	04 c0       	rjmp	.+8      	; 0x4f2 <bounce+0x92>
				case 7:
				direction = 5;
     4ea:	85 e0       	ldi	r24, 0x05	; 5
     4ec:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     4f0:	00 00       	nop
     4f2:	23 c0       	rjmp	.+70     	; 0x53a <bounce+0xda>
			}
		}
		else{
			switch (direction){
     4f4:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <direction>
     4f8:	88 2f       	mov	r24, r24
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	83 30       	cpi	r24, 0x03	; 3
     4fe:	91 05       	cpc	r25, r1
     500:	81 f0       	breq	.+32     	; 0x522 <bounce+0xc2>
     502:	84 30       	cpi	r24, 0x04	; 4
     504:	91 05       	cpc	r25, r1
     506:	1c f4       	brge	.+6      	; 0x50e <bounce+0xae>
     508:	01 97       	sbiw	r24, 0x01	; 1
     50a:	39 f0       	breq	.+14     	; 0x51a <bounce+0xba>
     50c:	16 c0       	rjmp	.+44     	; 0x53a <bounce+0xda>
     50e:	85 30       	cpi	r24, 0x05	; 5
     510:	91 05       	cpc	r25, r1
     512:	59 f0       	breq	.+22     	; 0x52a <bounce+0xca>
     514:	07 97       	sbiw	r24, 0x07	; 7
     516:	69 f0       	breq	.+26     	; 0x532 <bounce+0xd2>
     518:	10 c0       	rjmp	.+32     	; 0x53a <bounce+0xda>
				case 1:
				direction = 7;
     51a:	87 e0       	ldi	r24, 0x07	; 7
     51c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     520:	0c c0       	rjmp	.+24     	; 0x53a <bounce+0xda>
				case 3:
				direction = 5;
     522:	85 e0       	ldi	r24, 0x05	; 5
     524:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     528:	08 c0       	rjmp	.+16     	; 0x53a <bounce+0xda>
				case 5:
				direction = 3;
     52a:	83 e0       	ldi	r24, 0x03	; 3
     52c:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     530:	04 c0       	rjmp	.+8      	; 0x53a <bounce+0xda>
				case 7:
				direction = 1;
     532:	81 e0       	ldi	r24, 0x01	; 1
     534:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <direction>
				break;
     538:	00 00       	nop
			}
		}
	}
 }
     53a:	0f 90       	pop	r0
     53c:	0f 90       	pop	r0
     53e:	0f 90       	pop	r0
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	08 95       	ret

00000546 <refresh_ball>:

 void refresh_ball(){
     546:	cf 93       	push	r28
     548:	df 93       	push	r29
     54a:	cd b7       	in	r28, 0x3d	; 61
     54c:	de b7       	in	r29, 0x3e	; 62
	screen_buffer[ball_curr_pos[0]] &= !(1 << ball_curr_pos[1]);
     54e:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
     552:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
     556:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ball_curr_pos>
     55a:	88 2f       	mov	r24, r24
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <__data_end>
     56a:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <__data_end+0x1>
     56e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <ball_curr_pos>
     572:	22 2f       	mov	r18, r18
     574:	30 e0       	ldi	r19, 0x00	; 0
     576:	22 0f       	add	r18, r18
     578:	33 1f       	adc	r19, r19
     57a:	24 0f       	add	r18, r20
     57c:	35 1f       	adc	r19, r21
     57e:	f9 01       	movw	r30, r18
     580:	40 81       	ld	r20, Z
     582:	51 81       	ldd	r21, Z+1	; 0x01
     584:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <ball_curr_pos+0x1>
     588:	62 2f       	mov	r22, r18
     58a:	70 e0       	ldi	r23, 0x00	; 0
     58c:	21 e0       	ldi	r18, 0x01	; 1
     58e:	30 e0       	ldi	r19, 0x00	; 0
     590:	02 c0       	rjmp	.+4      	; 0x596 <refresh_ball+0x50>
     592:	22 0f       	add	r18, r18
     594:	33 1f       	adc	r19, r19
     596:	6a 95       	dec	r22
     598:	e2 f7       	brpl	.-8      	; 0x592 <refresh_ball+0x4c>
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	23 2b       	or	r18, r19
     59e:	09 f0       	breq	.+2      	; 0x5a2 <refresh_ball+0x5c>
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	26 2f       	mov	r18, r22
     5a4:	30 e0       	ldi	r19, 0x00	; 0
     5a6:	24 23       	and	r18, r20
     5a8:	35 23       	and	r19, r21
     5aa:	fc 01       	movw	r30, r24
     5ac:	31 83       	std	Z+1, r19	; 0x01
     5ae:	20 83       	st	Z, r18
	//screen_buffer[ball_curr_pos[0]] = 0;
	ball_curr_pos[0] = ball_next_pos[0];
     5b0:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ball_next_pos>
     5b4:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <ball_curr_pos>
	ball_curr_pos[1] = ball_next_pos[1];
     5b8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ball_next_pos+0x1>
     5bc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <ball_curr_pos+0x1>

	screen_buffer[ball_curr_pos[0]] |= (1 << ball_curr_pos[1]);
     5c0:	20 91 42 01 	lds	r18, 0x0142	; 0x800142 <__data_end>
     5c4:	30 91 43 01 	lds	r19, 0x0143	; 0x800143 <__data_end+0x1>
     5c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <ball_curr_pos>
     5cc:	88 2f       	mov	r24, r24
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	88 0f       	add	r24, r24
     5d2:	99 1f       	adc	r25, r25
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
     5d8:	40 91 42 01 	lds	r20, 0x0142	; 0x800142 <__data_end>
     5dc:	50 91 43 01 	lds	r21, 0x0143	; 0x800143 <__data_end+0x1>
     5e0:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <ball_curr_pos>
     5e4:	22 2f       	mov	r18, r18
     5e6:	30 e0       	ldi	r19, 0x00	; 0
     5e8:	22 0f       	add	r18, r18
     5ea:	33 1f       	adc	r19, r19
     5ec:	24 0f       	add	r18, r20
     5ee:	35 1f       	adc	r19, r21
     5f0:	f9 01       	movw	r30, r18
     5f2:	20 81       	ld	r18, Z
     5f4:	31 81       	ldd	r19, Z+1	; 0x01
     5f6:	40 91 0b 01 	lds	r20, 0x010B	; 0x80010b <ball_curr_pos+0x1>
     5fa:	64 2f       	mov	r22, r20
     5fc:	70 e0       	ldi	r23, 0x00	; 0
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	02 c0       	rjmp	.+4      	; 0x608 <refresh_ball+0xc2>
     604:	44 0f       	add	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	6a 95       	dec	r22
     60a:	e2 f7       	brpl	.-8      	; 0x604 <refresh_ball+0xbe>
     60c:	24 2b       	or	r18, r20
     60e:	35 2b       	or	r19, r21
     610:	fc 01       	movw	r30, r24
     612:	31 83       	std	Z+1, r19	; 0x01
     614:	20 83       	st	Z, r18
	//screen_buffer[ball_curr_pos[0]] = 1023;
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <serial_task>:
				move_player2(&position, 1);
			}
		}

		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
	}
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	cd b7       	in	r28, 0x3d	; 61
     622:	de b7       	in	r29, 0x3e	; 62
     624:	27 97       	sbiw	r28, 0x07	; 7
     626:	0f b6       	in	r0, 0x3f	; 63
     628:	f8 94       	cli
     62a:	de bf       	out	0x3e, r29	; 62
     62c:	0f be       	out	0x3f, r0	; 63
     62e:	cd bf       	out	0x3d, r28	; 61
     630:	9f 83       	std	Y+7, r25	; 0x07
     632:	8e 83       	std	Y+6, r24	; 0x06
     634:	1d 82       	std	Y+5, r1	; 0x05
     636:	8d e4       	ldi	r24, 0x4D	; 77
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	0e 94 fd 04 	call	0x9fa	; 0x9fa <init_protocol>
     63e:	9a 83       	std	Y+2, r25	; 0x02
     640:	89 83       	std	Y+1, r24	; 0x01
     642:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <xTaskGetTickCount>
     646:	9c 83       	std	Y+4, r25	; 0x04
     648:	8b 83       	std	Y+3, r24	; 0x03
     64a:	07 c0       	rjmp	.+14     	; 0x65a <serial_task+0x3e>
     64c:	8d 81       	ldd	r24, Y+5	; 0x05
     64e:	29 81       	ldd	r18, Y+1	; 0x01
     650:	3a 81       	ldd	r19, Y+2	; 0x02
     652:	f9 01       	movw	r30, r18
     654:	09 95       	icall
     656:	9a 83       	std	Y+2, r25	; 0x02
     658:	89 83       	std	Y+1, r24	; 0x01
     65a:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_x_com_received_chars_queue>
     65e:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_x_com_received_chars_queue+0x1>
     662:	be 01       	movw	r22, r28
     664:	6b 5f       	subi	r22, 0xFB	; 251
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	20 e0       	ldi	r18, 0x00	; 0
     66a:	40 e0       	ldi	r20, 0x00	; 0
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueGenericReceive>
     672:	88 23       	and	r24, r24
     674:	59 f7       	brne	.-42     	; 0x64c <serial_task+0x30>
     676:	ce 01       	movw	r24, r28
     678:	03 96       	adiw	r24, 0x03	; 3
     67a:	64 e1       	ldi	r22, 0x14	; 20
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelayUntil>
     682:	e3 cf       	rjmp	.-58     	; 0x64a <serial_task+0x2e>

00000684 <echo_task>:
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	cd b7       	in	r28, 0x3d	; 61
     68a:	de b7       	in	r29, 0x3e	; 62
     68c:	29 97       	sbiw	r28, 0x09	; 9
     68e:	0f b6       	in	r0, 0x3f	; 63
     690:	f8 94       	cli
     692:	de bf       	out	0x3e, r29	; 62
     694:	0f be       	out	0x3f, r0	; 63
     696:	cd bf       	out	0x3d, r28	; 61
     698:	99 87       	std	Y+9, r25	; 0x09
     69a:	88 87       	std	Y+8, r24	; 0x08
     69c:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <xTaskGetTickCount>
     6a0:	9f 83       	std	Y+7, r25	; 0x07
     6a2:	8e 83       	std	Y+6, r24	; 0x06
     6a4:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <_frames_received>
     6a8:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <_frames_received+0x1>
     6ac:	20 e0       	ldi	r18, 0x00	; 0
     6ae:	40 e0       	ldi	r20, 0x00	; 0
     6b0:	50 e0       	ldi	r21, 0x00	; 0
     6b2:	be 01       	movw	r22, r28
     6b4:	6f 5f       	subi	r22, 0xFF	; 255
     6b6:	7f 4f       	sbci	r23, 0xFF	; 255
     6b8:	0e 94 df 10 	call	0x21be	; 0x21be <xQueueGenericReceive>
     6bc:	88 23       	and	r24, r24
     6be:	31 f0       	breq	.+12     	; 0x6cc <echo_task+0x48>
     6c0:	8d 81       	ldd	r24, Y+5	; 0x05
     6c2:	68 2f       	mov	r22, r24
     6c4:	ce 01       	movw	r24, r28
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	0e 94 be 05 	call	0xb7c	; 0xb7c <com_send_bytes>
     6cc:	ce 01       	movw	r24, r28
     6ce:	06 96       	adiw	r24, 0x06	; 6
     6d0:	68 e2       	ldi	r22, 0x28	; 40
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelayUntil>
     6d8:	e5 cf       	rjmp	.-54     	; 0x6a4 <echo_task+0x20>

000006da <game_task>:
	
}
*/

void game_task(void *pvParameters)
{
     6da:	cf 93       	push	r28
     6dc:	df 93       	push	r29
     6de:	00 d0       	rcall	.+0      	; 0x6e0 <game_task+0x6>
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <game_task+0x8>
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <game_task+0xa>
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	9e 83       	std	Y+6, r25	; 0x06
     6ea:	8d 83       	std	Y+5, r24	; 0x05
	(void) pvParameters;
	TickType_t lastWakeTime;
	game_stateFunc state = init_game(&col_value);
     6ec:	8c e0       	ldi	r24, 0x0C	; 12
     6ee:	91 e0       	ldi	r25, 0x01	; 1
     6f0:	0e 94 a8 00 	call	0x150	; 0x150 <init_game>
     6f4:	9a 83       	std	Y+2, r25	; 0x02
     6f6:	89 83       	std	Y+1, r24	; 0x01

	lastWakeTime = xTaskGetTickCount();
     6f8:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <xTaskGetTickCount>
     6fc:	9c 83       	std	Y+4, r25	; 0x04
     6fe:	8b 83       	std	Y+3, r24	; 0x03

	while(1){
		state = (game_stateFunc)(*state)();
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	fc 01       	movw	r30, r24
     706:	09 95       	icall
     708:	9a 83       	std	Y+2, r25	; 0x02
     70a:	89 83       	std	Y+1, r24	; 0x01
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 80);
     70c:	ce 01       	movw	r24, r28
     70e:	03 96       	adiw	r24, 0x03	; 3
     710:	60 e5       	ldi	r22, 0x50	; 80
     712:	70 e0       	ldi	r23, 0x00	; 0
     714:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <vTaskDelayUntil>
	}
     718:	f3 cf       	rjmp	.-26     	; 0x700 <game_task+0x26>

0000071a <handle_display>:
}

//-----------------------------------------
void handle_display(void)
{
     71a:	cf 93       	push	r28
     71c:	df 93       	push	r29
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     722:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <col_index>
     726:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <col_index+0x1>
     72a:	89 2b       	or	r24, r25
     72c:	49 f4       	brne	.+18     	; 0x740 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     72e:	8b e2       	ldi	r24, 0x2B	; 43
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	2b e2       	ldi	r18, 0x2B	; 43
     734:	30 e0       	ldi	r19, 0x00	; 0
     736:	f9 01       	movw	r30, r18
     738:	20 81       	ld	r18, Z
     73a:	24 60       	ori	r18, 0x04	; 4
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     740:	8b e2       	ldi	r24, 0x2B	; 43
     742:	90 e0       	ldi	r25, 0x00	; 0
     744:	2b e2       	ldi	r18, 0x2B	; 43
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	f9 01       	movw	r30, r18
     74a:	20 81       	ld	r18, Z
     74c:	20 62       	ori	r18, 0x20	; 32
     74e:	fc 01       	movw	r30, r24
     750:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     752:	8b e2       	ldi	r24, 0x2B	; 43
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	2b e2       	ldi	r18, 0x2B	; 43
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	f9 01       	movw	r30, r18
     75c:	20 81       	ld	r18, Z
     75e:	2f 7d       	andi	r18, 0xDF	; 223
     760:	fc 01       	movw	r30, r24
     762:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     764:	8b e2       	ldi	r24, 0x2B	; 43
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	2b e2       	ldi	r18, 0x2B	; 43
     76a:	30 e0       	ldi	r19, 0x00	; 0
     76c:	f9 01       	movw	r30, r18
     76e:	20 81       	ld	r18, Z
     770:	20 61       	ori	r18, 0x10	; 16
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     776:	8b e2       	ldi	r24, 0x2B	; 43
     778:	90 e0       	ldi	r25, 0x00	; 0
     77a:	2b e2       	ldi	r18, 0x2B	; 43
     77c:	30 e0       	ldi	r19, 0x00	; 0
     77e:	f9 01       	movw	r30, r18
     780:	20 81       	ld	r18, Z
     782:	2f 7e       	andi	r18, 0xEF	; 239
     784:	fc 01       	movw	r30, r24
     786:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     788:	82 e2       	ldi	r24, 0x22	; 34
     78a:	90 e0       	ldi	r25, 0x00	; 0
     78c:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <col_index>
     790:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <col_index+0x1>
     794:	22 0f       	add	r18, r18
     796:	33 1f       	adc	r19, r19
     798:	24 5f       	subi	r18, 0xF4	; 244
     79a:	3e 4f       	sbci	r19, 0xFE	; 254
     79c:	f9 01       	movw	r30, r18
     79e:	20 81       	ld	r18, Z
     7a0:	31 81       	ldd	r19, Z+1	; 0x01
     7a2:	20 95       	com	r18
     7a4:	fc 01       	movw	r30, r24
     7a6:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     7a8:	85 e2       	ldi	r24, 0x25	; 37
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	25 e2       	ldi	r18, 0x25	; 37
     7ae:	30 e0       	ldi	r19, 0x00	; 0
     7b0:	f9 01       	movw	r30, r18
     7b2:	20 81       	ld	r18, Z
     7b4:	23 60       	ori	r18, 0x03	; 3
     7b6:	fc 01       	movw	r30, r24
     7b8:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     7ba:	85 e2       	ldi	r24, 0x25	; 37
     7bc:	90 e0       	ldi	r25, 0x00	; 0
     7be:	25 e2       	ldi	r18, 0x25	; 37
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	f9 01       	movw	r30, r18
     7c4:	40 81       	ld	r20, Z
     7c6:	20 91 4b 01 	lds	r18, 0x014B	; 0x80014b <col_index>
     7ca:	30 91 4c 01 	lds	r19, 0x014C	; 0x80014c <col_index+0x1>
     7ce:	22 0f       	add	r18, r18
     7d0:	33 1f       	adc	r19, r19
     7d2:	24 5f       	subi	r18, 0xF4	; 244
     7d4:	3e 4f       	sbci	r19, 0xFE	; 254
     7d6:	f9 01       	movw	r30, r18
     7d8:	20 81       	ld	r18, Z
     7da:	31 81       	ldd	r19, Z+1	; 0x01
     7dc:	23 2f       	mov	r18, r19
     7de:	33 27       	eor	r19, r19
     7e0:	23 70       	andi	r18, 0x03	; 3
     7e2:	20 95       	com	r18
     7e4:	24 23       	and	r18, r20
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     7ea:	8b e2       	ldi	r24, 0x2B	; 43
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2b e2       	ldi	r18, 0x2B	; 43
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	2b 7f       	andi	r18, 0xFB	; 251
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18

	++col_index;
     7fc:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <col_index>
     800:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <col_index+0x1>
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <col_index+0x1>
     80a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <col_index>
	if (col_index > 13){
     80e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <col_index>
     812:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <col_index+0x1>
     816:	0e 97       	sbiw	r24, 0x0e	; 14
     818:	24 f0       	brlt	.+8      	; 0x822 <handle_display+0x108>
		col_index = 0;
     81a:	10 92 4c 01 	sts	0x014C, r1	; 0x80014c <col_index+0x1>
     81e:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <col_index>
	}

}
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	08 95       	ret

00000828 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     828:	cf 93       	push	r28
     82a:	df 93       	push	r29
     82c:	cd b7       	in	r28, 0x3d	; 61
     82e:	de b7       	in	r29, 0x3e	; 62
	//
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	08 95       	ret

00000836 <main>:

//-----------------------------------------
int main(void)
{
     836:	ef 92       	push	r14
     838:	ff 92       	push	r15
     83a:	0f 93       	push	r16
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	cd b7       	in	r28, 0x3d	; 61
     842:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     844:	0e 94 d7 05 	call	0xbae	; 0xbae <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     848:	8b e2       	ldi	r24, 0x2B	; 43
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	2b e2       	ldi	r18, 0x2B	; 43
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	f9 01       	movw	r30, r18
     852:	20 81       	ld	r18, Z
     854:	2f 7b       	andi	r18, 0xBF	; 191
     856:	fc 01       	movw	r30, r24
     858:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     85a:	8e e1       	ldi	r24, 0x1E	; 30
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	61 e0       	ldi	r22, 0x01	; 1
     860:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <xQueueGenericCreate>
     864:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <_x_com_received_chars_queue+0x1>
     868:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <_x_com_received_chars_queue>
	_frames_received = xQueueCreate( 2, ( unsigned portBASE_TYPE ) sizeof( frame_t ) );
     86c:	40 e0       	ldi	r20, 0x00	; 0
     86e:	65 e0       	ldi	r22, 0x05	; 5
     870:	82 e0       	ldi	r24, 0x02	; 2
     872:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <xQueueGenericCreate>
     876:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <_frames_received+0x1>
     87a:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <_frames_received>
	//_isBallAtLeft = xSemaphoreCreateBinary();

	//_col_0_mutex = xSemaphoreCreateMutex();
	//_col_13_mutex = xSemaphoreCreateMutex();
	_player_position_mutex = xSemaphoreCreateMutex();
     87e:	81 e0       	ldi	r24, 0x01	; 1
     880:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <xQueueCreateMutex>
     884:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_player_position_mutex+0x1>
     888:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_player_position_mutex>
	//_ball_position_mutex = xSemaphoreCreateMutex();
	init_com(_x_com_received_chars_queue);
     88c:	80 91 47 01 	lds	r24, 0x0147	; 0x800147 <_x_com_received_chars_queue>
     890:	90 91 48 01 	lds	r25, 0x0148	; 0x800148 <_x_com_received_chars_queue+0x1>
     894:	0e 94 44 05 	call	0xa88	; 0xa88 <init_com>
	
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(serial_task,(const char *)"serial", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     898:	e1 2c       	mov	r14, r1
     89a:	f1 2c       	mov	r15, r1
     89c:	04 e0       	ldi	r16, 0x04	; 4
     89e:	20 e0       	ldi	r18, 0x00	; 0
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	45 e5       	ldi	r20, 0x55	; 85
     8a4:	50 e0       	ldi	r21, 0x00	; 0
     8a6:	6c e2       	ldi	r22, 0x2C	; 44
     8a8:	71 e0       	ldi	r23, 0x01	; 1
     8aa:	8e e0       	ldi	r24, 0x0E	; 14
     8ac:	93 e0       	ldi	r25, 0x03	; 3
     8ae:	0e 94 92 13 	call	0x2724	; 0x2724 <xTaskCreate>
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     8b2:	e1 2c       	mov	r14, r1
     8b4:	f1 2c       	mov	r15, r1
     8b6:	03 e0       	ldi	r16, 0x03	; 3
     8b8:	20 e0       	ldi	r18, 0x00	; 0
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	45 e5       	ldi	r20, 0x55	; 85
     8be:	50 e0       	ldi	r21, 0x00	; 0
     8c0:	63 e3       	ldi	r22, 0x33	; 51
     8c2:	71 e0       	ldi	r23, 0x01	; 1
     8c4:	8d e6       	ldi	r24, 0x6D	; 109
     8c6:	93 e0       	ldi	r25, 0x03	; 3
     8c8:	0e 94 92 13 	call	0x2724	; 0x2724 <xTaskCreate>
	//xTaskCreate(local_player_task,(const char *)"lplayer", configMINIMAL_STACK_SIZE, (void *)NULL, task3_prio, NULL);
	//xTaskCreate(external_player_task,(const char *)"eplayer", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     8cc:	e1 2c       	mov	r14, r1
     8ce:	f1 2c       	mov	r15, r1
     8d0:	00 e0       	ldi	r16, 0x00	; 0
     8d2:	20 e0       	ldi	r18, 0x00	; 0
     8d4:	30 e0       	ldi	r19, 0x00	; 0
     8d6:	45 e5       	ldi	r20, 0x55	; 85
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	68 e3       	ldi	r22, 0x38	; 56
     8dc:	71 e0       	ldi	r23, 0x01	; 1
     8de:	82 e4       	ldi	r24, 0x42	; 66
     8e0:	93 e0       	ldi	r25, 0x03	; 3
     8e2:	0e 94 92 13 	call	0x2724	; 0x2724 <xTaskCreate>
	
	
	// Start the display handler timer
	init_display_timer(handle_display);
     8e6:	8d e8       	ldi	r24, 0x8D	; 141
     8e8:	93 e0       	ldi	r25, 0x03	; 3
     8ea:	0e 94 56 05 	call	0xaac	; 0xaac <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     8ee:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     8f2:	ff cf       	rjmp	.-2      	; 0x8f2 <main+0xbc>

000008f4 <prot_idle>:
  #define prot_FLAG 0x61

  static frame_t _frame;
  static QueueHandle_t *frames;

  void *prot_idle(uint8_t byte){
     8f4:	cf 93       	push	r28
     8f6:	df 93       	push	r29
     8f8:	1f 92       	push	r1
     8fa:	cd b7       	in	r28, 0x3d	; 61
     8fc:	de b7       	in	r29, 0x3e	; 62
     8fe:	89 83       	std	Y+1, r24	; 0x01
	  if (byte == prot_FLAG ){
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	81 36       	cpi	r24, 0x61	; 97
     904:	19 f4       	brne	.+6      	; 0x90c <__stack+0xd>
		  return prot_data;
     906:	87 e9       	ldi	r24, 0x97	; 151
     908:	94 e0       	ldi	r25, 0x04	; 4
     90a:	02 c0       	rjmp	.+4      	; 0x910 <__stack+0x11>
	  }
	  else{
		  return prot_idle;
     90c:	8a e7       	ldi	r24, 0x7A	; 122
     90e:	94 e0       	ldi	r25, 0x04	; 4
	  }
  }
     910:	0f 90       	pop	r0
     912:	df 91       	pop	r29
     914:	cf 91       	pop	r28
     916:	08 95       	ret

00000918 <prot_idle_entry>:

  void *prot_idle_entry(){
     918:	cf 93       	push	r28
     91a:	df 93       	push	r29
     91c:	cd b7       	in	r28, 0x3d	; 61
     91e:	de b7       	in	r29, 0x3e	; 62
	clr_frm_buff();
     920:	0e 94 c7 04 	call	0x98e	; 0x98e <clr_frm_buff>
	return prot_idle;
     924:	8a e7       	ldi	r24, 0x7A	; 122
     926:	94 e0       	ldi	r25, 0x04	; 4
  }
     928:	df 91       	pop	r29
     92a:	cf 91       	pop	r28
     92c:	08 95       	ret

0000092e <prot_data>:


  void *prot_data(uint8_t byte){
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	1f 92       	push	r1
     934:	cd b7       	in	r28, 0x3d	; 61
     936:	de b7       	in	r29, 0x3e	; 62
     938:	89 83       	std	Y+1, r24	; 0x01
	if (byte == prot_ESC)
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	8f 3f       	cpi	r24, 0xFF	; 255
     93e:	19 f4       	brne	.+6      	; 0x946 <prot_data+0x18>
	{
		return prot_esc;
     940:	86 eb       	ldi	r24, 0xB6	; 182
     942:	94 e0       	ldi	r25, 0x04	; 4
     944:	0f c0       	rjmp	.+30     	; 0x964 <prot_data+0x36>
	}
	else if (byte == prot_FLAG)
     946:	89 81       	ldd	r24, Y+1	; 0x01
     948:	81 36       	cpi	r24, 0x61	; 97
     94a:	29 f4       	brne	.+10     	; 0x956 <prot_data+0x28>
	{
		finish_frame();
     94c:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <finish_frame>
		return prot_idle_entry;
     950:	8c e8       	ldi	r24, 0x8C	; 140
     952:	94 e0       	ldi	r25, 0x04	; 4
     954:	07 c0       	rjmp	.+14     	; 0x964 <prot_data+0x36>
	}
	else
	{
		add_byte_to_frame(byte);
     956:	89 81       	ldd	r24, Y+1	; 0x01
     958:	88 2f       	mov	r24, r24
     95a:	90 e0       	ldi	r25, 0x00	; 0
     95c:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <add_byte_to_frame>
		return prot_data;
     960:	87 e9       	ldi	r24, 0x97	; 151
     962:	94 e0       	ldi	r25, 0x04	; 4
	}
  }
     964:	0f 90       	pop	r0
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	08 95       	ret

0000096c <prot_esc>:

  void *prot_esc(uint8_t byte) {
     96c:	cf 93       	push	r28
     96e:	df 93       	push	r29
     970:	1f 92       	push	r1
     972:	cd b7       	in	r28, 0x3d	; 61
     974:	de b7       	in	r29, 0x3e	; 62
     976:	89 83       	std	Y+1, r24	; 0x01
	  if (0)
	  {
		  return prot_idle_entry;
	  }
	  else{
		  add_byte_to_frame(byte);
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	88 2f       	mov	r24, r24
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <add_byte_to_frame>
		  return prot_data;
     982:	87 e9       	ldi	r24, 0x97	; 151
     984:	94 e0       	ldi	r25, 0x04	; 4
	  }
  }
     986:	0f 90       	pop	r0
     988:	df 91       	pop	r29
     98a:	cf 91       	pop	r28
     98c:	08 95       	ret

0000098e <clr_frm_buff>:

  void clr_frm_buff(){
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
	_frame.size = 0;
     996:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_frame+0x4>
  }
     99a:	df 91       	pop	r29
     99c:	cf 91       	pop	r28
     99e:	08 95       	ret

000009a0 <add_byte_to_frame>:

 void add_byte_to_frame(uint8_t byte){
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29
     9a4:	1f 92       	push	r1
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
     9aa:	89 83       	std	Y+1, r24	; 0x01
	_frame.bytes[_frame.size] = byte;
     9ac:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_frame+0x4>
     9b0:	88 2f       	mov	r24, r24
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	81 5b       	subi	r24, 0xB1	; 177
     9b6:	9e 4f       	sbci	r25, 0xFE	; 254
     9b8:	29 81       	ldd	r18, Y+1	; 0x01
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
	++(_frame.size);
     9be:	80 91 53 01 	lds	r24, 0x0153	; 0x800153 <_frame+0x4>
     9c2:	8f 5f       	subi	r24, 0xFF	; 255
     9c4:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <_frame+0x4>
}
     9c8:	0f 90       	pop	r0
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <finish_frame>:

void finish_frame(){
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
	xQueueSend(*frames, &_frame, (TickType_t) 1);
     9d8:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <frames>
     9dc:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <frames+0x1>
     9e0:	fc 01       	movw	r30, r24
     9e2:	80 81       	ld	r24, Z
     9e4:	91 81       	ldd	r25, Z+1	; 0x01
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	6f e4       	ldi	r22, 0x4F	; 79
     9ee:	71 e0       	ldi	r23, 0x01	; 1
     9f0:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <xQueueGenericSend>
}
     9f4:	df 91       	pop	r29
     9f6:	cf 91       	pop	r28
     9f8:	08 95       	ret

000009fa <init_protocol>:

void *init_protocol(QueueHandle_t *q){
     9fa:	cf 93       	push	r28
     9fc:	df 93       	push	r29
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <init_protocol+0x6>
     a00:	cd b7       	in	r28, 0x3d	; 61
     a02:	de b7       	in	r29, 0x3e	; 62
     a04:	9a 83       	std	Y+2, r25	; 0x02
     a06:	89 83       	std	Y+1, r24	; 0x01
	frames = q;
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <frames+0x1>
     a10:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <frames>
	_frame.bytes[0] = 0;
     a14:	10 92 4f 01 	sts	0x014F, r1	; 0x80014f <_frame>
	_frame.bytes[1] = 0;
     a18:	10 92 50 01 	sts	0x0150, r1	; 0x800150 <_frame+0x1>
	_frame.bytes[2] = 0;
     a1c:	10 92 51 01 	sts	0x0151, r1	; 0x800151 <_frame+0x2>
	_frame.bytes[3] = 0;
     a20:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <_frame+0x3>
	_frame.size = 0;
     a24:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <_frame+0x4>
	return prot_idle;
     a28:	8a e7       	ldi	r24, 0x7A	; 122
     a2a:	94 e0       	ldi	r25, 0x04	; 4
}
     a2c:	0f 90       	pop	r0
     a2e:	0f 90       	pop	r0
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	08 95       	ret

00000a36 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
     a36:	cf 93       	push	r28
     a38:	df 93       	push	r29
     a3a:	00 d0       	rcall	.+0      	; 0xa3c <_com_call_back+0x6>
     a3c:	00 d0       	rcall	.+0      	; 0xa3e <_com_call_back+0x8>
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	9b 83       	std	Y+3, r25	; 0x03
     a44:	8a 83       	std	Y+2, r24	; 0x02
     a46:	6c 83       	std	Y+4, r22	; 0x04
	if (_x_rx_com_queue) {
     a48:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_x_rx_com_queue>
     a4c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_x_rx_com_queue+0x1>
     a50:	89 2b       	or	r24, r25
     a52:	99 f0       	breq	.+38     	; 0xa7a <_com_call_back+0x44>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     a54:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
     a56:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_x_rx_com_queue>
     a5a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_x_rx_com_queue+0x1>
     a5e:	be 01       	movw	r22, r28
     a60:	6c 5f       	subi	r22, 0xFC	; 252
     a62:	7f 4f       	sbci	r23, 0xFF	; 255
     a64:	20 e0       	ldi	r18, 0x00	; 0
     a66:	ae 01       	movw	r20, r28
     a68:	4f 5f       	subi	r20, 0xFF	; 255
     a6a:	5f 4f       	sbci	r21, 0xFF	; 255
     a6c:	0e 94 80 10 	call	0x2100	; 0x2100 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
     a70:	89 81       	ldd	r24, Y+1	; 0x01
     a72:	88 23       	and	r24, r24
     a74:	11 f0       	breq	.+4      	; 0xa7a <_com_call_back+0x44>
		{
			taskYIELD();
     a76:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
		}
	}
}
     a7a:	0f 90       	pop	r0
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	df 91       	pop	r29
     a84:	cf 91       	pop	r28
     a86:	08 95       	ret

00000a88 <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
     a88:	cf 93       	push	r28
     a8a:	df 93       	push	r29
     a8c:	00 d0       	rcall	.+0      	; 0xa8e <init_com+0x6>
     a8e:	cd b7       	in	r28, 0x3d	; 61
     a90:	de b7       	in	r29, 0x3e	; 62
     a92:	9a 83       	std	Y+2, r25	; 0x02
     a94:	89 83       	std	Y+1, r24	; 0x01
	_x_rx_com_queue = x_rx_queue;
     a96:	89 81       	ldd	r24, Y+1	; 0x01
     a98:	9a 81       	ldd	r25, Y+2	; 0x02
     a9a:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_x_rx_com_queue+0x1>
     a9e:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_x_rx_com_queue>
}
     aa2:	0f 90       	pop	r0
     aa4:	0f 90       	pop	r0
     aa6:	df 91       	pop	r29
     aa8:	cf 91       	pop	r28
     aaa:	08 95       	ret

00000aac <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	00 d0       	rcall	.+0      	; 0xab2 <init_display_timer+0x6>
     ab2:	cd b7       	in	r28, 0x3d	; 61
     ab4:	de b7       	in	r29, 0x3e	; 62
     ab6:	9a 83       	std	Y+2, r25	; 0x02
     ab8:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     aba:	89 81       	ldd	r24, Y+1	; 0x01
     abc:	9a 81       	ldd	r25, Y+2	; 0x02
     abe:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <cb_ptr+0x1>
     ac2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     ac6:	87 e4       	ldi	r24, 0x47	; 71
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	2a e0       	ldi	r18, 0x0A	; 10
     acc:	fc 01       	movw	r30, r24
     ace:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     ad0:	84 e4       	ldi	r24, 0x44	; 68
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	24 e4       	ldi	r18, 0x44	; 68
     ad6:	30 e0       	ldi	r19, 0x00	; 0
     ad8:	f9 01       	movw	r30, r18
     ada:	20 81       	ld	r18, Z
     adc:	22 60       	ori	r18, 0x02	; 2
     ade:	fc 01       	movw	r30, r24
     ae0:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     ae2:	8e e6       	ldi	r24, 0x6E	; 110
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	2e e6       	ldi	r18, 0x6E	; 110
     ae8:	30 e0       	ldi	r19, 0x00	; 0
     aea:	f9 01       	movw	r30, r18
     aec:	20 81       	ld	r18, Z
     aee:	22 60       	ori	r18, 0x02	; 2
     af0:	fc 01       	movw	r30, r24
     af2:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     af4:	85 e4       	ldi	r24, 0x45	; 69
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	25 e4       	ldi	r18, 0x45	; 69
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	25 60       	ori	r18, 0x05	; 5
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
}
     b06:	0f 90       	pop	r0
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     b10:	1f 92       	push	r1
     b12:	0f 92       	push	r0
     b14:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b18:	0f 92       	push	r0
     b1a:	11 24       	eor	r1, r1
     b1c:	2f 93       	push	r18
     b1e:	3f 93       	push	r19
     b20:	4f 93       	push	r20
     b22:	5f 93       	push	r21
     b24:	6f 93       	push	r22
     b26:	7f 93       	push	r23
     b28:	8f 93       	push	r24
     b2a:	9f 93       	push	r25
     b2c:	af 93       	push	r26
     b2e:	bf 93       	push	r27
     b30:	ef 93       	push	r30
     b32:	ff 93       	push	r31
     b34:	cf 93       	push	r28
     b36:	df 93       	push	r29
     b38:	cd b7       	in	r28, 0x3d	; 61
     b3a:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     b3c:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cb_ptr>
     b40:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cb_ptr+0x1>
     b44:	89 2b       	or	r24, r25
     b46:	31 f0       	breq	.+12     	; 0xb54 <__vector_16+0x44>
	{
		cb_ptr();
     b48:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cb_ptr>
     b4c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <cb_ptr+0x1>
     b50:	fc 01       	movw	r30, r24
     b52:	09 95       	icall
	}
}
     b54:	df 91       	pop	r29
     b56:	cf 91       	pop	r28
     b58:	ff 91       	pop	r31
     b5a:	ef 91       	pop	r30
     b5c:	bf 91       	pop	r27
     b5e:	af 91       	pop	r26
     b60:	9f 91       	pop	r25
     b62:	8f 91       	pop	r24
     b64:	7f 91       	pop	r23
     b66:	6f 91       	pop	r22
     b68:	5f 91       	pop	r21
     b6a:	4f 91       	pop	r20
     b6c:	3f 91       	pop	r19
     b6e:	2f 91       	pop	r18
     b70:	0f 90       	pop	r0
     b72:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     b7c:	cf 93       	push	r28
     b7e:	df 93       	push	r29
     b80:	00 d0       	rcall	.+0      	; 0xb82 <com_send_bytes+0x6>
     b82:	1f 92       	push	r1
     b84:	cd b7       	in	r28, 0x3d	; 61
     b86:	de b7       	in	r29, 0x3e	; 62
     b88:	9a 83       	std	Y+2, r25	; 0x02
     b8a:	89 83       	std	Y+1, r24	; 0x01
     b8c:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     b8e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_com_serial_instance>
     b92:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_com_serial_instance+0x1>
     b96:	29 81       	ldd	r18, Y+1	; 0x01
     b98:	3a 81       	ldd	r19, Y+2	; 0x02
     b9a:	4b 81       	ldd	r20, Y+3	; 0x03
     b9c:	b9 01       	movw	r22, r18
     b9e:	0e 94 a0 0c 	call	0x1940	; 0x1940 <serial_send_bytes>
}
     ba2:	0f 90       	pop	r0
     ba4:	0f 90       	pop	r0
     ba6:	0f 90       	pop	r0
     ba8:	df 91       	pop	r29
     baa:	cf 91       	pop	r28
     bac:	08 95       	ret

00000bae <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     bae:	8f 92       	push	r8
     bb0:	9f 92       	push	r9
     bb2:	af 92       	push	r10
     bb4:	bf 92       	push	r11
     bb6:	cf 92       	push	r12
     bb8:	df 92       	push	r13
     bba:	ef 92       	push	r14
     bbc:	0f 93       	push	r16
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     bc6:	8c e5       	ldi	r24, 0x5C	; 92
     bc8:	91 e0       	ldi	r25, 0x01	; 1
     bca:	0e 94 69 06 	call	0xcd2	; 0xcd2 <buffer_init>
	buffer_init(&_com_tx_buffer);
     bce:	8f e6       	ldi	r24, 0x6F	; 111
     bd0:	91 e0       	ldi	r25, 0x01	; 1
     bd2:	0e 94 69 06 	call	0xcd2	; 0xcd2 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     bd6:	0f 2e       	mov	r0, r31
     bd8:	fb e1       	ldi	r31, 0x1B	; 27
     bda:	8f 2e       	mov	r8, r31
     bdc:	f5 e0       	ldi	r31, 0x05	; 5
     bde:	9f 2e       	mov	r9, r31
     be0:	f0 2d       	mov	r31, r0
     be2:	0f 2e       	mov	r0, r31
     be4:	ff e6       	ldi	r31, 0x6F	; 111
     be6:	af 2e       	mov	r10, r31
     be8:	f1 e0       	ldi	r31, 0x01	; 1
     bea:	bf 2e       	mov	r11, r31
     bec:	f0 2d       	mov	r31, r0
     bee:	0f 2e       	mov	r0, r31
     bf0:	fc e5       	ldi	r31, 0x5C	; 92
     bf2:	cf 2e       	mov	r12, r31
     bf4:	f1 e0       	ldi	r31, 0x01	; 1
     bf6:	df 2e       	mov	r13, r31
     bf8:	f0 2d       	mov	r31, r0
     bfa:	e1 2c       	mov	r14, r1
     bfc:	00 e0       	ldi	r16, 0x00	; 0
     bfe:	23 e0       	ldi	r18, 0x03	; 3
     c00:	40 e0       	ldi	r20, 0x00	; 0
     c02:	52 ec       	ldi	r21, 0xC2	; 194
     c04:	61 e0       	ldi	r22, 0x01	; 1
     c06:	70 e0       	ldi	r23, 0x00	; 0
     c08:	80 e0       	ldi	r24, 0x00	; 0
     c0a:	0e 94 df 0b 	call	0x17be	; 0x17be <serial_new_instance>
     c0e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_com_serial_instance+0x1>
     c12:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     c16:	88 e2       	ldi	r24, 0x28	; 40
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	28 e2       	ldi	r18, 0x28	; 40
     c1c:	30 e0       	ldi	r19, 0x00	; 0
     c1e:	f9 01       	movw	r30, r18
     c20:	20 81       	ld	r18, Z
     c22:	23 6c       	ori	r18, 0xC3	; 195
     c24:	fc 01       	movw	r30, r24
     c26:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     c28:	8b e2       	ldi	r24, 0x2B	; 43
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	2b e2       	ldi	r18, 0x2B	; 43
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	f9 01       	movw	r30, r18
     c32:	20 81       	ld	r18, Z
     c34:	28 60       	ori	r18, 0x08	; 8
     c36:	fc 01       	movw	r30, r24
     c38:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     c3a:	8a e2       	ldi	r24, 0x2A	; 42
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	2a e2       	ldi	r18, 0x2A	; 42
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	24 67       	ori	r18, 0x74	; 116
     c48:	fc 01       	movw	r30, r24
     c4a:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     c4c:	8b e2       	ldi	r24, 0x2B	; 43
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	2b e2       	ldi	r18, 0x2B	; 43
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	20 64       	ori	r18, 0x40	; 64
     c5a:	fc 01       	movw	r30, r24
     c5c:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     c5e:	81 e2       	ldi	r24, 0x21	; 33
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	fc 01       	movw	r30, r24
     c64:	80 81       	ld	r24, Z
     c66:	81 e2       	ldi	r24, 0x21	; 33
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	2f ef       	ldi	r18, 0xFF	; 255
     c6c:	fc 01       	movw	r30, r24
     c6e:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     c70:	84 e2       	ldi	r24, 0x24	; 36
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	24 e2       	ldi	r18, 0x24	; 36
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	f9 01       	movw	r30, r18
     c7a:	20 81       	ld	r18, Z
     c7c:	23 60       	ori	r18, 0x03	; 3
     c7e:	fc 01       	movw	r30, r24
     c80:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     c82:	84 e2       	ldi	r24, 0x24	; 36
     c84:	90 e0       	ldi	r25, 0x00	; 0
     c86:	24 e2       	ldi	r18, 0x24	; 36
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	f9 01       	movw	r30, r18
     c8c:	20 81       	ld	r18, Z
     c8e:	2c 63       	ori	r18, 0x3C	; 60
     c90:	fc 01       	movw	r30, r24
     c92:	20 83       	st	Z, r18
}
     c94:	df 91       	pop	r29
     c96:	cf 91       	pop	r28
     c98:	0f 91       	pop	r16
     c9a:	ef 90       	pop	r14
     c9c:	df 90       	pop	r13
     c9e:	cf 90       	pop	r12
     ca0:	bf 90       	pop	r11
     ca2:	af 90       	pop	r10
     ca4:	9f 90       	pop	r9
     ca6:	8f 90       	pop	r8
     ca8:	08 95       	ret

00000caa <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     caa:	cf 93       	push	r28
     cac:	df 93       	push	r29
     cae:	1f 92       	push	r1
     cb0:	cd b7       	in	r28, 0x3d	; 61
     cb2:	de b7       	in	r29, 0x3e	; 62
     cb4:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     cb6:	0f 90       	pop	r0
     cb8:	df 91       	pop	r29
     cba:	cf 91       	pop	r28
     cbc:	08 95       	ret

00000cbe <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     cbe:	cf 93       	push	r28
     cc0:	df 93       	push	r29
     cc2:	1f 92       	push	r1
     cc4:	cd b7       	in	r28, 0x3d	; 61
     cc6:	de b7       	in	r29, 0x3e	; 62
     cc8:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     cca:	0f 90       	pop	r0
     ccc:	df 91       	pop	r29
     cce:	cf 91       	pop	r28
     cd0:	08 95       	ret

00000cd2 <buffer_init>:
     cd2:	cf 93       	push	r28
     cd4:	df 93       	push	r29
     cd6:	00 d0       	rcall	.+0      	; 0xcd8 <buffer_init+0x6>
     cd8:	cd b7       	in	r28, 0x3d	; 61
     cda:	de b7       	in	r29, 0x3e	; 62
     cdc:	9a 83       	std	Y+2, r25	; 0x02
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	fc 01       	movw	r30, r24
     ce6:	10 8a       	std	Z+16, r1	; 0x10
     ce8:	89 81       	ldd	r24, Y+1	; 0x01
     cea:	9a 81       	ldd	r25, Y+2	; 0x02
     cec:	fc 01       	movw	r30, r24
     cee:	11 8a       	std	Z+17, r1	; 0x11
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	9a 81       	ldd	r25, Y+2	; 0x02
     cf4:	fc 01       	movw	r30, r24
     cf6:	12 8a       	std	Z+18, r1	; 0x12
     cf8:	0f 90       	pop	r0
     cfa:	0f 90       	pop	r0
     cfc:	df 91       	pop	r29
     cfe:	cf 91       	pop	r28
     d00:	08 95       	ret

00000d02 <buffer_get_item>:
     d02:	cf 93       	push	r28
     d04:	df 93       	push	r29
     d06:	00 d0       	rcall	.+0      	; 0xd08 <buffer_get_item+0x6>
     d08:	00 d0       	rcall	.+0      	; 0xd0a <buffer_get_item+0x8>
     d0a:	cd b7       	in	r28, 0x3d	; 61
     d0c:	de b7       	in	r29, 0x3e	; 62
     d0e:	9a 83       	std	Y+2, r25	; 0x02
     d10:	89 83       	std	Y+1, r24	; 0x01
     d12:	7c 83       	std	Y+4, r23	; 0x04
     d14:	6b 83       	std	Y+3, r22	; 0x03
     d16:	89 81       	ldd	r24, Y+1	; 0x01
     d18:	9a 81       	ldd	r25, Y+2	; 0x02
     d1a:	fc 01       	movw	r30, r24
     d1c:	82 89       	ldd	r24, Z+18	; 0x12
     d1e:	88 23       	and	r24, r24
     d20:	81 f1       	breq	.+96     	; 0xd82 <buffer_get_item+0x80>
     d22:	89 81       	ldd	r24, Y+1	; 0x01
     d24:	9a 81       	ldd	r25, Y+2	; 0x02
     d26:	fc 01       	movw	r30, r24
     d28:	81 89       	ldd	r24, Z+17	; 0x11
     d2a:	88 2f       	mov	r24, r24
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	29 81       	ldd	r18, Y+1	; 0x01
     d30:	3a 81       	ldd	r19, Y+2	; 0x02
     d32:	82 0f       	add	r24, r18
     d34:	93 1f       	adc	r25, r19
     d36:	fc 01       	movw	r30, r24
     d38:	20 81       	ld	r18, Z
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	fc 01       	movw	r30, r24
     d40:	20 83       	st	Z, r18
     d42:	89 81       	ldd	r24, Y+1	; 0x01
     d44:	9a 81       	ldd	r25, Y+2	; 0x02
     d46:	fc 01       	movw	r30, r24
     d48:	81 89       	ldd	r24, Z+17	; 0x11
     d4a:	88 2f       	mov	r24, r24
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	01 96       	adiw	r24, 0x01	; 1
     d50:	8f 70       	andi	r24, 0x0F	; 15
     d52:	90 78       	andi	r25, 0x80	; 128
     d54:	99 23       	and	r25, r25
     d56:	24 f4       	brge	.+8      	; 0xd60 <buffer_get_item+0x5e>
     d58:	01 97       	sbiw	r24, 0x01	; 1
     d5a:	80 6f       	ori	r24, 0xF0	; 240
     d5c:	9f 6f       	ori	r25, 0xFF	; 255
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	28 2f       	mov	r18, r24
     d62:	89 81       	ldd	r24, Y+1	; 0x01
     d64:	9a 81       	ldd	r25, Y+2	; 0x02
     d66:	fc 01       	movw	r30, r24
     d68:	21 8b       	std	Z+17, r18	; 0x11
     d6a:	89 81       	ldd	r24, Y+1	; 0x01
     d6c:	9a 81       	ldd	r25, Y+2	; 0x02
     d6e:	fc 01       	movw	r30, r24
     d70:	82 89       	ldd	r24, Z+18	; 0x12
     d72:	2f ef       	ldi	r18, 0xFF	; 255
     d74:	28 0f       	add	r18, r24
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	9a 81       	ldd	r25, Y+2	; 0x02
     d7a:	fc 01       	movw	r30, r24
     d7c:	22 8b       	std	Z+18, r18	; 0x12
     d7e:	80 e0       	ldi	r24, 0x00	; 0
     d80:	01 c0       	rjmp	.+2      	; 0xd84 <buffer_get_item+0x82>
     d82:	81 e0       	ldi	r24, 0x01	; 1
     d84:	0f 90       	pop	r0
     d86:	0f 90       	pop	r0
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <buffer_put_item>:
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	00 d0       	rcall	.+0      	; 0xd98 <buffer_put_item+0x6>
     d98:	1f 92       	push	r1
     d9a:	cd b7       	in	r28, 0x3d	; 61
     d9c:	de b7       	in	r29, 0x3e	; 62
     d9e:	9a 83       	std	Y+2, r25	; 0x02
     da0:	89 83       	std	Y+1, r24	; 0x01
     da2:	6b 83       	std	Y+3, r22	; 0x03
     da4:	89 81       	ldd	r24, Y+1	; 0x01
     da6:	9a 81       	ldd	r25, Y+2	; 0x02
     da8:	fc 01       	movw	r30, r24
     daa:	82 89       	ldd	r24, Z+18	; 0x12
     dac:	80 31       	cpi	r24, 0x10	; 16
     dae:	68 f5       	brcc	.+90     	; 0xe0a <buffer_put_item+0x78>
     db0:	89 81       	ldd	r24, Y+1	; 0x01
     db2:	9a 81       	ldd	r25, Y+2	; 0x02
     db4:	fc 01       	movw	r30, r24
     db6:	80 89       	ldd	r24, Z+16	; 0x10
     db8:	88 2f       	mov	r24, r24
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	29 81       	ldd	r18, Y+1	; 0x01
     dbe:	3a 81       	ldd	r19, Y+2	; 0x02
     dc0:	82 0f       	add	r24, r18
     dc2:	93 1f       	adc	r25, r19
     dc4:	2b 81       	ldd	r18, Y+3	; 0x03
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
     dca:	89 81       	ldd	r24, Y+1	; 0x01
     dcc:	9a 81       	ldd	r25, Y+2	; 0x02
     dce:	fc 01       	movw	r30, r24
     dd0:	80 89       	ldd	r24, Z+16	; 0x10
     dd2:	88 2f       	mov	r24, r24
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	8f 70       	andi	r24, 0x0F	; 15
     dda:	90 78       	andi	r25, 0x80	; 128
     ddc:	99 23       	and	r25, r25
     dde:	24 f4       	brge	.+8      	; 0xde8 <buffer_put_item+0x56>
     de0:	01 97       	sbiw	r24, 0x01	; 1
     de2:	80 6f       	ori	r24, 0xF0	; 240
     de4:	9f 6f       	ori	r25, 0xFF	; 255
     de6:	01 96       	adiw	r24, 0x01	; 1
     de8:	28 2f       	mov	r18, r24
     dea:	89 81       	ldd	r24, Y+1	; 0x01
     dec:	9a 81       	ldd	r25, Y+2	; 0x02
     dee:	fc 01       	movw	r30, r24
     df0:	20 8b       	std	Z+16, r18	; 0x10
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	fc 01       	movw	r30, r24
     df8:	82 89       	ldd	r24, Z+18	; 0x12
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	28 0f       	add	r18, r24
     dfe:	89 81       	ldd	r24, Y+1	; 0x01
     e00:	9a 81       	ldd	r25, Y+2	; 0x02
     e02:	fc 01       	movw	r30, r24
     e04:	22 8b       	std	Z+18, r18	; 0x12
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <buffer_put_item+0x7a>
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	df 91       	pop	r29
     e14:	cf 91       	pop	r28
     e16:	08 95       	ret

00000e18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	00 d0       	rcall	.+0      	; 0xe1e <vListInitialise+0x6>
     e1e:	cd b7       	in	r28, 0x3d	; 61
     e20:	de b7       	in	r29, 0x3e	; 62
     e22:	9a 83       	std	Y+2, r25	; 0x02
     e24:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e26:	89 81       	ldd	r24, Y+1	; 0x01
     e28:	9a 81       	ldd	r25, Y+2	; 0x02
     e2a:	9c 01       	movw	r18, r24
     e2c:	2d 5f       	subi	r18, 0xFD	; 253
     e2e:	3f 4f       	sbci	r19, 0xFF	; 255
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	fc 01       	movw	r30, r24
     e36:	32 83       	std	Z+2, r19	; 0x02
     e38:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	2f ef       	ldi	r18, 0xFF	; 255
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	fc 01       	movw	r30, r24
     e44:	34 83       	std	Z+4, r19	; 0x04
     e46:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e48:	89 81       	ldd	r24, Y+1	; 0x01
     e4a:	9a 81       	ldd	r25, Y+2	; 0x02
     e4c:	9c 01       	movw	r18, r24
     e4e:	2d 5f       	subi	r18, 0xFD	; 253
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	89 81       	ldd	r24, Y+1	; 0x01
     e54:	9a 81       	ldd	r25, Y+2	; 0x02
     e56:	fc 01       	movw	r30, r24
     e58:	36 83       	std	Z+6, r19	; 0x06
     e5a:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e5c:	89 81       	ldd	r24, Y+1	; 0x01
     e5e:	9a 81       	ldd	r25, Y+2	; 0x02
     e60:	9c 01       	movw	r18, r24
     e62:	2d 5f       	subi	r18, 0xFD	; 253
     e64:	3f 4f       	sbci	r19, 0xFF	; 255
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	30 87       	std	Z+8, r19	; 0x08
     e6e:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	08 95       	ret

00000e82 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	00 d0       	rcall	.+0      	; 0xe88 <vListInitialiseItem+0x6>
     e88:	cd b7       	in	r28, 0x3d	; 61
     e8a:	de b7       	in	r29, 0x3e	; 62
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     e90:	89 81       	ldd	r24, Y+1	; 0x01
     e92:	9a 81       	ldd	r25, Y+2	; 0x02
     e94:	fc 01       	movw	r30, r24
     e96:	11 86       	std	Z+9, r1	; 0x09
     e98:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
     e9e:	df 91       	pop	r29
     ea0:	cf 91       	pop	r28
     ea2:	08 95       	ret

00000ea4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     ea4:	cf 93       	push	r28
     ea6:	df 93       	push	r29
     ea8:	00 d0       	rcall	.+0      	; 0xeaa <vListInsertEnd+0x6>
     eaa:	00 d0       	rcall	.+0      	; 0xeac <vListInsertEnd+0x8>
     eac:	00 d0       	rcall	.+0      	; 0xeae <vListInsertEnd+0xa>
     eae:	cd b7       	in	r28, 0x3d	; 61
     eb0:	de b7       	in	r29, 0x3e	; 62
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	7e 83       	std	Y+6, r23	; 0x06
     eb8:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     eba:	8b 81       	ldd	r24, Y+3	; 0x03
     ebc:	9c 81       	ldd	r25, Y+4	; 0x04
     ebe:	fc 01       	movw	r30, r24
     ec0:	81 81       	ldd	r24, Z+1	; 0x01
     ec2:	92 81       	ldd	r25, Z+2	; 0x02
     ec4:	9a 83       	std	Y+2, r25	; 0x02
     ec6:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     ec8:	8d 81       	ldd	r24, Y+5	; 0x05
     eca:	9e 81       	ldd	r25, Y+6	; 0x06
     ecc:	29 81       	ldd	r18, Y+1	; 0x01
     ece:	3a 81       	ldd	r19, Y+2	; 0x02
     ed0:	fc 01       	movw	r30, r24
     ed2:	33 83       	std	Z+3, r19	; 0x03
     ed4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	9a 81       	ldd	r25, Y+2	; 0x02
     eda:	fc 01       	movw	r30, r24
     edc:	24 81       	ldd	r18, Z+4	; 0x04
     ede:	35 81       	ldd	r19, Z+5	; 0x05
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	9e 81       	ldd	r25, Y+6	; 0x06
     ee4:	fc 01       	movw	r30, r24
     ee6:	35 83       	std	Z+5, r19	; 0x05
     ee8:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     eea:	89 81       	ldd	r24, Y+1	; 0x01
     eec:	9a 81       	ldd	r25, Y+2	; 0x02
     eee:	fc 01       	movw	r30, r24
     ef0:	84 81       	ldd	r24, Z+4	; 0x04
     ef2:	95 81       	ldd	r25, Z+5	; 0x05
     ef4:	2d 81       	ldd	r18, Y+5	; 0x05
     ef6:	3e 81       	ldd	r19, Y+6	; 0x06
     ef8:	fc 01       	movw	r30, r24
     efa:	33 83       	std	Z+3, r19	; 0x03
     efc:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	9a 81       	ldd	r25, Y+2	; 0x02
     f02:	2d 81       	ldd	r18, Y+5	; 0x05
     f04:	3e 81       	ldd	r19, Y+6	; 0x06
     f06:	fc 01       	movw	r30, r24
     f08:	35 83       	std	Z+5, r19	; 0x05
     f0a:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     f0c:	8d 81       	ldd	r24, Y+5	; 0x05
     f0e:	9e 81       	ldd	r25, Y+6	; 0x06
     f10:	2b 81       	ldd	r18, Y+3	; 0x03
     f12:	3c 81       	ldd	r19, Y+4	; 0x04
     f14:	fc 01       	movw	r30, r24
     f16:	31 87       	std	Z+9, r19	; 0x09
     f18:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	fc 01       	movw	r30, r24
     f20:	80 81       	ld	r24, Z
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	28 0f       	add	r18, r24
     f26:	8b 81       	ldd	r24, Y+3	; 0x03
     f28:	9c 81       	ldd	r25, Y+4	; 0x04
     f2a:	fc 01       	movw	r30, r24
     f2c:	20 83       	st	Z, r18
}
     f2e:	26 96       	adiw	r28, 0x06	; 6
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	de bf       	out	0x3e, r29	; 62
     f36:	0f be       	out	0x3f, r0	; 63
     f38:	cd bf       	out	0x3d, r28	; 61
     f3a:	df 91       	pop	r29
     f3c:	cf 91       	pop	r28
     f3e:	08 95       	ret

00000f40 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f40:	cf 93       	push	r28
     f42:	df 93       	push	r29
     f44:	cd b7       	in	r28, 0x3d	; 61
     f46:	de b7       	in	r29, 0x3e	; 62
     f48:	28 97       	sbiw	r28, 0x08	; 8
     f4a:	0f b6       	in	r0, 0x3f	; 63
     f4c:	f8 94       	cli
     f4e:	de bf       	out	0x3e, r29	; 62
     f50:	0f be       	out	0x3f, r0	; 63
     f52:	cd bf       	out	0x3d, r28	; 61
     f54:	9e 83       	std	Y+6, r25	; 0x06
     f56:	8d 83       	std	Y+5, r24	; 0x05
     f58:	78 87       	std	Y+8, r23	; 0x08
     f5a:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f5c:	8f 81       	ldd	r24, Y+7	; 0x07
     f5e:	98 85       	ldd	r25, Y+8	; 0x08
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	9c 83       	std	Y+4, r25	; 0x04
     f68:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	9c 81       	ldd	r25, Y+4	; 0x04
     f6e:	01 96       	adiw	r24, 0x01	; 1
     f70:	41 f4       	brne	.+16     	; 0xf82 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	fc 01       	movw	r30, r24
     f78:	87 81       	ldd	r24, Z+7	; 0x07
     f7a:	90 85       	ldd	r25, Z+8	; 0x08
     f7c:	9a 83       	std	Y+2, r25	; 0x02
     f7e:	89 83       	std	Y+1, r24	; 0x01
     f80:	1a c0       	rjmp	.+52     	; 0xfb6 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f82:	8d 81       	ldd	r24, Y+5	; 0x05
     f84:	9e 81       	ldd	r25, Y+6	; 0x06
     f86:	03 96       	adiw	r24, 0x03	; 3
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
     f8c:	07 c0       	rjmp	.+14     	; 0xf9c <vListInsert+0x5c>
     f8e:	89 81       	ldd	r24, Y+1	; 0x01
     f90:	9a 81       	ldd	r25, Y+2	; 0x02
     f92:	fc 01       	movw	r30, r24
     f94:	82 81       	ldd	r24, Z+2	; 0x02
     f96:	93 81       	ldd	r25, Z+3	; 0x03
     f98:	9a 83       	std	Y+2, r25	; 0x02
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	89 81       	ldd	r24, Y+1	; 0x01
     f9e:	9a 81       	ldd	r25, Y+2	; 0x02
     fa0:	fc 01       	movw	r30, r24
     fa2:	82 81       	ldd	r24, Z+2	; 0x02
     fa4:	93 81       	ldd	r25, Z+3	; 0x03
     fa6:	fc 01       	movw	r30, r24
     fa8:	20 81       	ld	r18, Z
     faa:	31 81       	ldd	r19, Z+1	; 0x01
     fac:	8b 81       	ldd	r24, Y+3	; 0x03
     fae:	9c 81       	ldd	r25, Y+4	; 0x04
     fb0:	82 17       	cp	r24, r18
     fb2:	93 07       	cpc	r25, r19
     fb4:	60 f7       	brcc	.-40     	; 0xf8e <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	9a 81       	ldd	r25, Y+2	; 0x02
     fba:	fc 01       	movw	r30, r24
     fbc:	22 81       	ldd	r18, Z+2	; 0x02
     fbe:	33 81       	ldd	r19, Z+3	; 0x03
     fc0:	8f 81       	ldd	r24, Y+7	; 0x07
     fc2:	98 85       	ldd	r25, Y+8	; 0x08
     fc4:	fc 01       	movw	r30, r24
     fc6:	33 83       	std	Z+3, r19	; 0x03
     fc8:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     fca:	8f 81       	ldd	r24, Y+7	; 0x07
     fcc:	98 85       	ldd	r25, Y+8	; 0x08
     fce:	fc 01       	movw	r30, r24
     fd0:	82 81       	ldd	r24, Z+2	; 0x02
     fd2:	93 81       	ldd	r25, Z+3	; 0x03
     fd4:	2f 81       	ldd	r18, Y+7	; 0x07
     fd6:	38 85       	ldd	r19, Y+8	; 0x08
     fd8:	fc 01       	movw	r30, r24
     fda:	35 83       	std	Z+5, r19	; 0x05
     fdc:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     fde:	8f 81       	ldd	r24, Y+7	; 0x07
     fe0:	98 85       	ldd	r25, Y+8	; 0x08
     fe2:	29 81       	ldd	r18, Y+1	; 0x01
     fe4:	3a 81       	ldd	r19, Y+2	; 0x02
     fe6:	fc 01       	movw	r30, r24
     fe8:	35 83       	std	Z+5, r19	; 0x05
     fea:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     fec:	89 81       	ldd	r24, Y+1	; 0x01
     fee:	9a 81       	ldd	r25, Y+2	; 0x02
     ff0:	2f 81       	ldd	r18, Y+7	; 0x07
     ff2:	38 85       	ldd	r19, Y+8	; 0x08
     ff4:	fc 01       	movw	r30, r24
     ff6:	33 83       	std	Z+3, r19	; 0x03
     ff8:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ffa:	8f 81       	ldd	r24, Y+7	; 0x07
     ffc:	98 85       	ldd	r25, Y+8	; 0x08
     ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    1000:	3e 81       	ldd	r19, Y+6	; 0x06
    1002:	fc 01       	movw	r30, r24
    1004:	31 87       	std	Z+9, r19	; 0x09
    1006:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	fc 01       	movw	r30, r24
    100e:	80 81       	ld	r24, Z
    1010:	21 e0       	ldi	r18, 0x01	; 1
    1012:	28 0f       	add	r18, r24
    1014:	8d 81       	ldd	r24, Y+5	; 0x05
    1016:	9e 81       	ldd	r25, Y+6	; 0x06
    1018:	fc 01       	movw	r30, r24
    101a:	20 83       	st	Z, r18
}
    101c:	28 96       	adiw	r28, 0x08	; 8
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	df 91       	pop	r29
    102a:	cf 91       	pop	r28
    102c:	08 95       	ret

0000102e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	00 d0       	rcall	.+0      	; 0x1034 <uxListRemove+0x6>
    1034:	00 d0       	rcall	.+0      	; 0x1036 <uxListRemove+0x8>
    1036:	cd b7       	in	r28, 0x3d	; 61
    1038:	de b7       	in	r29, 0x3e	; 62
    103a:	9c 83       	std	Y+4, r25	; 0x04
    103c:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    103e:	8b 81       	ldd	r24, Y+3	; 0x03
    1040:	9c 81       	ldd	r25, Y+4	; 0x04
    1042:	fc 01       	movw	r30, r24
    1044:	80 85       	ldd	r24, Z+8	; 0x08
    1046:	91 85       	ldd	r25, Z+9	; 0x09
    1048:	9a 83       	std	Y+2, r25	; 0x02
    104a:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	fc 01       	movw	r30, r24
    1052:	82 81       	ldd	r24, Z+2	; 0x02
    1054:	93 81       	ldd	r25, Z+3	; 0x03
    1056:	2b 81       	ldd	r18, Y+3	; 0x03
    1058:	3c 81       	ldd	r19, Y+4	; 0x04
    105a:	f9 01       	movw	r30, r18
    105c:	24 81       	ldd	r18, Z+4	; 0x04
    105e:	35 81       	ldd	r19, Z+5	; 0x05
    1060:	fc 01       	movw	r30, r24
    1062:	35 83       	std	Z+5, r19	; 0x05
    1064:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	fc 01       	movw	r30, r24
    106c:	84 81       	ldd	r24, Z+4	; 0x04
    106e:	95 81       	ldd	r25, Z+5	; 0x05
    1070:	2b 81       	ldd	r18, Y+3	; 0x03
    1072:	3c 81       	ldd	r19, Y+4	; 0x04
    1074:	f9 01       	movw	r30, r18
    1076:	22 81       	ldd	r18, Z+2	; 0x02
    1078:	33 81       	ldd	r19, Z+3	; 0x03
    107a:	fc 01       	movw	r30, r24
    107c:	33 83       	std	Z+3, r19	; 0x03
    107e:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	fc 01       	movw	r30, r24
    1086:	21 81       	ldd	r18, Z+1	; 0x01
    1088:	32 81       	ldd	r19, Z+2	; 0x02
    108a:	8b 81       	ldd	r24, Y+3	; 0x03
    108c:	9c 81       	ldd	r25, Y+4	; 0x04
    108e:	28 17       	cp	r18, r24
    1090:	39 07       	cpc	r19, r25
    1092:	51 f4       	brne	.+20     	; 0x10a8 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	fc 01       	movw	r30, r24
    109a:	24 81       	ldd	r18, Z+4	; 0x04
    109c:	35 81       	ldd	r19, Z+5	; 0x05
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	9a 81       	ldd	r25, Y+2	; 0x02
    10a2:	fc 01       	movw	r30, r24
    10a4:	32 83       	std	Z+2, r19	; 0x02
    10a6:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	fc 01       	movw	r30, r24
    10ae:	11 86       	std	Z+9, r1	; 0x09
    10b0:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	fc 01       	movw	r30, r24
    10b8:	80 81       	ld	r24, Z
    10ba:	2f ef       	ldi	r18, 0xFF	; 255
    10bc:	28 0f       	add	r18, r24
    10be:	89 81       	ldd	r24, Y+1	; 0x01
    10c0:	9a 81       	ldd	r25, Y+2	; 0x02
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ca:	fc 01       	movw	r30, r24
    10cc:	80 81       	ld	r24, Z
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	0f 90       	pop	r0
    10d4:	0f 90       	pop	r0
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28
    10da:	08 95       	ret

000010dc <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    10dc:	cf 93       	push	r28
    10de:	df 93       	push	r29
    10e0:	cd b7       	in	r28, 0x3d	; 61
    10e2:	de b7       	in	r29, 0x3e	; 62
    10e4:	28 97       	sbiw	r28, 0x08	; 8
    10e6:	0f b6       	in	r0, 0x3f	; 63
    10e8:	f8 94       	cli
    10ea:	de bf       	out	0x3e, r29	; 62
    10ec:	0f be       	out	0x3f, r0	; 63
    10ee:	cd bf       	out	0x3d, r28	; 61
    10f0:	9c 83       	std	Y+4, r25	; 0x04
    10f2:	8b 83       	std	Y+3, r24	; 0x03
    10f4:	7e 83       	std	Y+6, r23	; 0x06
    10f6:	6d 83       	std	Y+5, r22	; 0x05
    10f8:	58 87       	std	Y+8, r21	; 0x08
    10fa:	4f 83       	std	Y+7, r20	; 0x07
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	21 e1       	ldi	r18, 0x11	; 17
    1102:	fc 01       	movw	r30, r24
    1104:	20 83       	st	Z, r18
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	9c 83       	std	Y+4, r25	; 0x04
    110e:	8b 83       	std	Y+3, r24	; 0x03
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	22 e2       	ldi	r18, 0x22	; 34
    1116:	fc 01       	movw	r30, r24
    1118:	20 83       	st	Z, r18
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	01 97       	sbiw	r24, 0x01	; 1
    1120:	9c 83       	std	Y+4, r25	; 0x04
    1122:	8b 83       	std	Y+3, r24	; 0x03
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	23 e3       	ldi	r18, 0x33	; 51
    112a:	fc 01       	movw	r30, r24
    112c:	20 83       	st	Z, r18
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	01 97       	sbiw	r24, 0x01	; 1
    1134:	9c 83       	std	Y+4, r25	; 0x04
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	8d 81       	ldd	r24, Y+5	; 0x05
    113a:	9e 81       	ldd	r25, Y+6	; 0x06
    113c:	9a 83       	std	Y+2, r25	; 0x02
    113e:	89 83       	std	Y+1, r24	; 0x01
    1140:	29 81       	ldd	r18, Y+1	; 0x01
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	fc 01       	movw	r30, r24
    1148:	20 83       	st	Z, r18
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	9c 83       	std	Y+4, r25	; 0x04
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	89 81       	ldd	r24, Y+1	; 0x01
    1156:	9a 81       	ldd	r25, Y+2	; 0x02
    1158:	89 2f       	mov	r24, r25
    115a:	99 27       	eor	r25, r25
    115c:	9a 83       	std	Y+2, r25	; 0x02
    115e:	89 83       	std	Y+1, r24	; 0x01
    1160:	29 81       	ldd	r18, Y+1	; 0x01
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	01 97       	sbiw	r24, 0x01	; 1
    1170:	9c 83       	std	Y+4, r25	; 0x04
    1172:	8b 83       	std	Y+3, r24	; 0x03
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	fc 01       	movw	r30, r24
    117a:	10 82       	st	Z, r1
    117c:	8b 81       	ldd	r24, Y+3	; 0x03
    117e:	9c 81       	ldd	r25, Y+4	; 0x04
    1180:	01 97       	sbiw	r24, 0x01	; 1
    1182:	9c 83       	std	Y+4, r25	; 0x04
    1184:	8b 83       	std	Y+3, r24	; 0x03
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	20 e8       	ldi	r18, 0x80	; 128
    118c:	fc 01       	movw	r30, r24
    118e:	20 83       	st	Z, r18
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	01 97       	sbiw	r24, 0x01	; 1
    1196:	9c 83       	std	Y+4, r25	; 0x04
    1198:	8b 83       	std	Y+3, r24	; 0x03
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	9c 81       	ldd	r25, Y+4	; 0x04
    119e:	fc 01       	movw	r30, r24
    11a0:	10 82       	st	Z, r1
    11a2:	8b 81       	ldd	r24, Y+3	; 0x03
    11a4:	9c 81       	ldd	r25, Y+4	; 0x04
    11a6:	01 97       	sbiw	r24, 0x01	; 1
    11a8:	9c 83       	std	Y+4, r25	; 0x04
    11aa:	8b 83       	std	Y+3, r24	; 0x03
    11ac:	8b 81       	ldd	r24, Y+3	; 0x03
    11ae:	9c 81       	ldd	r25, Y+4	; 0x04
    11b0:	22 e0       	ldi	r18, 0x02	; 2
    11b2:	fc 01       	movw	r30, r24
    11b4:	20 83       	st	Z, r18
    11b6:	8b 81       	ldd	r24, Y+3	; 0x03
    11b8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ba:	01 97       	sbiw	r24, 0x01	; 1
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	23 e0       	ldi	r18, 0x03	; 3
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
    11ca:	8b 81       	ldd	r24, Y+3	; 0x03
    11cc:	9c 81       	ldd	r25, Y+4	; 0x04
    11ce:	01 97       	sbiw	r24, 0x01	; 1
    11d0:	9c 83       	std	Y+4, r25	; 0x04
    11d2:	8b 83       	std	Y+3, r24	; 0x03
    11d4:	8b 81       	ldd	r24, Y+3	; 0x03
    11d6:	9c 81       	ldd	r25, Y+4	; 0x04
    11d8:	24 e0       	ldi	r18, 0x04	; 4
    11da:	fc 01       	movw	r30, r24
    11dc:	20 83       	st	Z, r18
    11de:	8b 81       	ldd	r24, Y+3	; 0x03
    11e0:	9c 81       	ldd	r25, Y+4	; 0x04
    11e2:	01 97       	sbiw	r24, 0x01	; 1
    11e4:	9c 83       	std	Y+4, r25	; 0x04
    11e6:	8b 83       	std	Y+3, r24	; 0x03
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	25 e0       	ldi	r18, 0x05	; 5
    11ee:	fc 01       	movw	r30, r24
    11f0:	20 83       	st	Z, r18
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	01 97       	sbiw	r24, 0x01	; 1
    11f8:	9c 83       	std	Y+4, r25	; 0x04
    11fa:	8b 83       	std	Y+3, r24	; 0x03
    11fc:	8b 81       	ldd	r24, Y+3	; 0x03
    11fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1200:	26 e0       	ldi	r18, 0x06	; 6
    1202:	fc 01       	movw	r30, r24
    1204:	20 83       	st	Z, r18
    1206:	8b 81       	ldd	r24, Y+3	; 0x03
    1208:	9c 81       	ldd	r25, Y+4	; 0x04
    120a:	01 97       	sbiw	r24, 0x01	; 1
    120c:	9c 83       	std	Y+4, r25	; 0x04
    120e:	8b 83       	std	Y+3, r24	; 0x03
    1210:	8b 81       	ldd	r24, Y+3	; 0x03
    1212:	9c 81       	ldd	r25, Y+4	; 0x04
    1214:	27 e0       	ldi	r18, 0x07	; 7
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	9c 81       	ldd	r25, Y+4	; 0x04
    121e:	01 97       	sbiw	r24, 0x01	; 1
    1220:	9c 83       	std	Y+4, r25	; 0x04
    1222:	8b 83       	std	Y+3, r24	; 0x03
    1224:	8b 81       	ldd	r24, Y+3	; 0x03
    1226:	9c 81       	ldd	r25, Y+4	; 0x04
    1228:	28 e0       	ldi	r18, 0x08	; 8
    122a:	fc 01       	movw	r30, r24
    122c:	20 83       	st	Z, r18
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	9c 81       	ldd	r25, Y+4	; 0x04
    1232:	01 97       	sbiw	r24, 0x01	; 1
    1234:	9c 83       	std	Y+4, r25	; 0x04
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	8b 81       	ldd	r24, Y+3	; 0x03
    123a:	9c 81       	ldd	r25, Y+4	; 0x04
    123c:	29 e0       	ldi	r18, 0x09	; 9
    123e:	fc 01       	movw	r30, r24
    1240:	20 83       	st	Z, r18
    1242:	8b 81       	ldd	r24, Y+3	; 0x03
    1244:	9c 81       	ldd	r25, Y+4	; 0x04
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	9c 83       	std	Y+4, r25	; 0x04
    124a:	8b 83       	std	Y+3, r24	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	20 e1       	ldi	r18, 0x10	; 16
    1252:	fc 01       	movw	r30, r24
    1254:	20 83       	st	Z, r18
    1256:	8b 81       	ldd	r24, Y+3	; 0x03
    1258:	9c 81       	ldd	r25, Y+4	; 0x04
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	9c 83       	std	Y+4, r25	; 0x04
    125e:	8b 83       	std	Y+3, r24	; 0x03
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	21 e1       	ldi	r18, 0x11	; 17
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
    126a:	8b 81       	ldd	r24, Y+3	; 0x03
    126c:	9c 81       	ldd	r25, Y+4	; 0x04
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	22 e1       	ldi	r18, 0x12	; 18
    127a:	fc 01       	movw	r30, r24
    127c:	20 83       	st	Z, r18
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	01 97       	sbiw	r24, 0x01	; 1
    1284:	9c 83       	std	Y+4, r25	; 0x04
    1286:	8b 83       	std	Y+3, r24	; 0x03
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	23 e1       	ldi	r18, 0x13	; 19
    128e:	fc 01       	movw	r30, r24
    1290:	20 83       	st	Z, r18
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	01 97       	sbiw	r24, 0x01	; 1
    1298:	9c 83       	std	Y+4, r25	; 0x04
    129a:	8b 83       	std	Y+3, r24	; 0x03
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	24 e1       	ldi	r18, 0x14	; 20
    12a2:	fc 01       	movw	r30, r24
    12a4:	20 83       	st	Z, r18
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	01 97       	sbiw	r24, 0x01	; 1
    12ac:	9c 83       	std	Y+4, r25	; 0x04
    12ae:	8b 83       	std	Y+3, r24	; 0x03
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	25 e1       	ldi	r18, 0x15	; 21
    12b6:	fc 01       	movw	r30, r24
    12b8:	20 83       	st	Z, r18
    12ba:	8b 81       	ldd	r24, Y+3	; 0x03
    12bc:	9c 81       	ldd	r25, Y+4	; 0x04
    12be:	01 97       	sbiw	r24, 0x01	; 1
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	26 e1       	ldi	r18, 0x16	; 22
    12ca:	fc 01       	movw	r30, r24
    12cc:	20 83       	st	Z, r18
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	9c 81       	ldd	r25, Y+4	; 0x04
    12d2:	01 97       	sbiw	r24, 0x01	; 1
    12d4:	9c 83       	std	Y+4, r25	; 0x04
    12d6:	8b 83       	std	Y+3, r24	; 0x03
    12d8:	8b 81       	ldd	r24, Y+3	; 0x03
    12da:	9c 81       	ldd	r25, Y+4	; 0x04
    12dc:	27 e1       	ldi	r18, 0x17	; 23
    12de:	fc 01       	movw	r30, r24
    12e0:	20 83       	st	Z, r18
    12e2:	8b 81       	ldd	r24, Y+3	; 0x03
    12e4:	9c 81       	ldd	r25, Y+4	; 0x04
    12e6:	01 97       	sbiw	r24, 0x01	; 1
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	28 e1       	ldi	r18, 0x18	; 24
    12f2:	fc 01       	movw	r30, r24
    12f4:	20 83       	st	Z, r18
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9c 83       	std	Y+4, r25	; 0x04
    12fe:	8b 83       	std	Y+3, r24	; 0x03
    1300:	8b 81       	ldd	r24, Y+3	; 0x03
    1302:	9c 81       	ldd	r25, Y+4	; 0x04
    1304:	29 e1       	ldi	r18, 0x19	; 25
    1306:	fc 01       	movw	r30, r24
    1308:	20 83       	st	Z, r18
    130a:	8b 81       	ldd	r24, Y+3	; 0x03
    130c:	9c 81       	ldd	r25, Y+4	; 0x04
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	9c 83       	std	Y+4, r25	; 0x04
    1312:	8b 83       	std	Y+3, r24	; 0x03
    1314:	8b 81       	ldd	r24, Y+3	; 0x03
    1316:	9c 81       	ldd	r25, Y+4	; 0x04
    1318:	20 e2       	ldi	r18, 0x20	; 32
    131a:	fc 01       	movw	r30, r24
    131c:	20 83       	st	Z, r18
    131e:	8b 81       	ldd	r24, Y+3	; 0x03
    1320:	9c 81       	ldd	r25, Y+4	; 0x04
    1322:	01 97       	sbiw	r24, 0x01	; 1
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	9c 81       	ldd	r25, Y+4	; 0x04
    132c:	21 e2       	ldi	r18, 0x21	; 33
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18
    1332:	8b 81       	ldd	r24, Y+3	; 0x03
    1334:	9c 81       	ldd	r25, Y+4	; 0x04
    1336:	01 97       	sbiw	r24, 0x01	; 1
    1338:	9c 83       	std	Y+4, r25	; 0x04
    133a:	8b 83       	std	Y+3, r24	; 0x03
    133c:	8b 81       	ldd	r24, Y+3	; 0x03
    133e:	9c 81       	ldd	r25, Y+4	; 0x04
    1340:	22 e2       	ldi	r18, 0x22	; 34
    1342:	fc 01       	movw	r30, r24
    1344:	20 83       	st	Z, r18
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	23 e2       	ldi	r18, 0x23	; 35
    1356:	fc 01       	movw	r30, r24
    1358:	20 83       	st	Z, r18
    135a:	8b 81       	ldd	r24, Y+3	; 0x03
    135c:	9c 81       	ldd	r25, Y+4	; 0x04
    135e:	01 97       	sbiw	r24, 0x01	; 1
    1360:	9c 83       	std	Y+4, r25	; 0x04
    1362:	8b 83       	std	Y+3, r24	; 0x03
    1364:	8f 81       	ldd	r24, Y+7	; 0x07
    1366:	98 85       	ldd	r25, Y+8	; 0x08
    1368:	9a 83       	std	Y+2, r25	; 0x02
    136a:	89 83       	std	Y+1, r24	; 0x01
    136c:	29 81       	ldd	r18, Y+1	; 0x01
    136e:	8b 81       	ldd	r24, Y+3	; 0x03
    1370:	9c 81       	ldd	r25, Y+4	; 0x04
    1372:	fc 01       	movw	r30, r24
    1374:	20 83       	st	Z, r18
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	01 97       	sbiw	r24, 0x01	; 1
    137c:	9c 83       	std	Y+4, r25	; 0x04
    137e:	8b 83       	std	Y+3, r24	; 0x03
    1380:	89 81       	ldd	r24, Y+1	; 0x01
    1382:	9a 81       	ldd	r25, Y+2	; 0x02
    1384:	89 2f       	mov	r24, r25
    1386:	99 27       	eor	r25, r25
    1388:	9a 83       	std	Y+2, r25	; 0x02
    138a:	89 83       	std	Y+1, r24	; 0x01
    138c:	29 81       	ldd	r18, Y+1	; 0x01
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	fc 01       	movw	r30, r24
    1394:	20 83       	st	Z, r18
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	01 97       	sbiw	r24, 0x01	; 1
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
    13a0:	8b 81       	ldd	r24, Y+3	; 0x03
    13a2:	9c 81       	ldd	r25, Y+4	; 0x04
    13a4:	26 e2       	ldi	r18, 0x26	; 38
    13a6:	fc 01       	movw	r30, r24
    13a8:	20 83       	st	Z, r18
    13aa:	8b 81       	ldd	r24, Y+3	; 0x03
    13ac:	9c 81       	ldd	r25, Y+4	; 0x04
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	9c 83       	std	Y+4, r25	; 0x04
    13b2:	8b 83       	std	Y+3, r24	; 0x03
    13b4:	8b 81       	ldd	r24, Y+3	; 0x03
    13b6:	9c 81       	ldd	r25, Y+4	; 0x04
    13b8:	27 e2       	ldi	r18, 0x27	; 39
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 83       	st	Z, r18
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	01 97       	sbiw	r24, 0x01	; 1
    13c4:	9c 83       	std	Y+4, r25	; 0x04
    13c6:	8b 83       	std	Y+3, r24	; 0x03
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	28 e2       	ldi	r18, 0x28	; 40
    13ce:	fc 01       	movw	r30, r24
    13d0:	20 83       	st	Z, r18
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	9c 83       	std	Y+4, r25	; 0x04
    13da:	8b 83       	std	Y+3, r24	; 0x03
    13dc:	8b 81       	ldd	r24, Y+3	; 0x03
    13de:	9c 81       	ldd	r25, Y+4	; 0x04
    13e0:	29 e2       	ldi	r18, 0x29	; 41
    13e2:	fc 01       	movw	r30, r24
    13e4:	20 83       	st	Z, r18
    13e6:	8b 81       	ldd	r24, Y+3	; 0x03
    13e8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ea:	01 97       	sbiw	r24, 0x01	; 1
    13ec:	9c 83       	std	Y+4, r25	; 0x04
    13ee:	8b 83       	std	Y+3, r24	; 0x03
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	9c 81       	ldd	r25, Y+4	; 0x04
    13f4:	20 e3       	ldi	r18, 0x30	; 48
    13f6:	fc 01       	movw	r30, r24
    13f8:	20 83       	st	Z, r18
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	9c 81       	ldd	r25, Y+4	; 0x04
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	9c 81       	ldd	r25, Y+4	; 0x04
    1408:	21 e3       	ldi	r18, 0x31	; 49
    140a:	fc 01       	movw	r30, r24
    140c:	20 83       	st	Z, r18
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	01 97       	sbiw	r24, 0x01	; 1
    1414:	9c 83       	std	Y+4, r25	; 0x04
    1416:	8b 83       	std	Y+3, r24	; 0x03
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	9c 81       	ldd	r25, Y+4	; 0x04
    141c:	28 96       	adiw	r28, 0x08	; 8
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	de bf       	out	0x3e, r29	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	cd bf       	out	0x3d, r28	; 61
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	08 95       	ret

0000142e <xPortStartScheduler>:
    142e:	cf 93       	push	r28
    1430:	df 93       	push	r29
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	0e 94 02 0b 	call	0x1604	; 0x1604 <prvSetupTimerInterrupt>
    143a:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
    143e:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    1442:	cd 91       	ld	r28, X+
    1444:	cd bf       	out	0x3d, r28	; 61
    1446:	dd 91       	ld	r29, X+
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	df 91       	pop	r29
    1450:	cf 91       	pop	r28
    1452:	bf 91       	pop	r27
    1454:	af 91       	pop	r26
    1456:	9f 91       	pop	r25
    1458:	8f 91       	pop	r24
    145a:	7f 91       	pop	r23
    145c:	6f 91       	pop	r22
    145e:	5f 91       	pop	r21
    1460:	4f 91       	pop	r20
    1462:	3f 91       	pop	r19
    1464:	2f 91       	pop	r18
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	df 90       	pop	r13
    1470:	cf 90       	pop	r12
    1472:	bf 90       	pop	r11
    1474:	af 90       	pop	r10
    1476:	9f 90       	pop	r9
    1478:	8f 90       	pop	r8
    147a:	7f 90       	pop	r7
    147c:	6f 90       	pop	r6
    147e:	5f 90       	pop	r5
    1480:	4f 90       	pop	r4
    1482:	3f 90       	pop	r3
    1484:	2f 90       	pop	r2
    1486:	1f 90       	pop	r1
    1488:	0f 90       	pop	r0
    148a:	0f be       	out	0x3f, r0	; 63
    148c:	0f 90       	pop	r0
    148e:	08 95       	ret
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	df 91       	pop	r29
    1494:	cf 91       	pop	r28
    1496:	08 95       	ret

00001498 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1498:	0f 92       	push	r0
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	0f 92       	push	r0
    14a0:	1f 92       	push	r1
    14a2:	11 24       	eor	r1, r1
    14a4:	2f 92       	push	r2
    14a6:	3f 92       	push	r3
    14a8:	4f 92       	push	r4
    14aa:	5f 92       	push	r5
    14ac:	6f 92       	push	r6
    14ae:	7f 92       	push	r7
    14b0:	8f 92       	push	r8
    14b2:	9f 92       	push	r9
    14b4:	af 92       	push	r10
    14b6:	bf 92       	push	r11
    14b8:	cf 92       	push	r12
    14ba:	df 92       	push	r13
    14bc:	ef 92       	push	r14
    14be:	ff 92       	push	r15
    14c0:	0f 93       	push	r16
    14c2:	1f 93       	push	r17
    14c4:	2f 93       	push	r18
    14c6:	3f 93       	push	r19
    14c8:	4f 93       	push	r20
    14ca:	5f 93       	push	r21
    14cc:	6f 93       	push	r22
    14ce:	7f 93       	push	r23
    14d0:	8f 93       	push	r24
    14d2:	9f 93       	push	r25
    14d4:	af 93       	push	r26
    14d6:	bf 93       	push	r27
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
    14e0:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
    14e4:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    14e8:	0d b6       	in	r0, 0x3d	; 61
    14ea:	0d 92       	st	X+, r0
    14ec:	0e b6       	in	r0, 0x3e	; 62
    14ee:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14f0:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14f4:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
    14f8:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    14fc:	cd 91       	ld	r28, X+
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	dd 91       	ld	r29, X+
    1502:	de bf       	out	0x3e, r29	; 62
    1504:	ff 91       	pop	r31
    1506:	ef 91       	pop	r30
    1508:	df 91       	pop	r29
    150a:	cf 91       	pop	r28
    150c:	bf 91       	pop	r27
    150e:	af 91       	pop	r26
    1510:	9f 91       	pop	r25
    1512:	8f 91       	pop	r24
    1514:	7f 91       	pop	r23
    1516:	6f 91       	pop	r22
    1518:	5f 91       	pop	r21
    151a:	4f 91       	pop	r20
    151c:	3f 91       	pop	r19
    151e:	2f 91       	pop	r18
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	df 90       	pop	r13
    152a:	cf 90       	pop	r12
    152c:	bf 90       	pop	r11
    152e:	af 90       	pop	r10
    1530:	9f 90       	pop	r9
    1532:	8f 90       	pop	r8
    1534:	7f 90       	pop	r7
    1536:	6f 90       	pop	r6
    1538:	5f 90       	pop	r5
    153a:	4f 90       	pop	r4
    153c:	3f 90       	pop	r3
    153e:	2f 90       	pop	r2
    1540:	1f 90       	pop	r1
    1542:	0f 90       	pop	r0
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1548:	08 95       	ret

0000154a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	f8 94       	cli
    1550:	0f 92       	push	r0
    1552:	1f 92       	push	r1
    1554:	11 24       	eor	r1, r1
    1556:	2f 92       	push	r2
    1558:	3f 92       	push	r3
    155a:	4f 92       	push	r4
    155c:	5f 92       	push	r5
    155e:	6f 92       	push	r6
    1560:	7f 92       	push	r7
    1562:	8f 92       	push	r8
    1564:	9f 92       	push	r9
    1566:	af 92       	push	r10
    1568:	bf 92       	push	r11
    156a:	cf 92       	push	r12
    156c:	df 92       	push	r13
    156e:	ef 92       	push	r14
    1570:	ff 92       	push	r15
    1572:	0f 93       	push	r16
    1574:	1f 93       	push	r17
    1576:	2f 93       	push	r18
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	5f 93       	push	r21
    157e:	6f 93       	push	r22
    1580:	7f 93       	push	r23
    1582:	8f 93       	push	r24
    1584:	9f 93       	push	r25
    1586:	af 93       	push	r26
    1588:	bf 93       	push	r27
    158a:	cf 93       	push	r28
    158c:	df 93       	push	r29
    158e:	ef 93       	push	r30
    1590:	ff 93       	push	r31
    1592:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
    1596:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    159a:	0d b6       	in	r0, 0x3d	; 61
    159c:	0d 92       	st	X+, r0
    159e:	0e b6       	in	r0, 0x3e	; 62
    15a0:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    15a2:	0e 94 f5 16 	call	0x2dea	; 0x2dea <xTaskIncrementTick>
    15a6:	88 23       	and	r24, r24
    15a8:	11 f0       	breq	.+4      	; 0x15ae <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    15aa:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    15ae:	a0 91 66 07 	lds	r26, 0x0766	; 0x800766 <pxCurrentTCB>
    15b2:	b0 91 67 07 	lds	r27, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    15b6:	cd 91       	ld	r28, X+
    15b8:	cd bf       	out	0x3d, r28	; 61
    15ba:	dd 91       	ld	r29, X+
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	ff 91       	pop	r31
    15c0:	ef 91       	pop	r30
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	bf 91       	pop	r27
    15c8:	af 91       	pop	r26
    15ca:	9f 91       	pop	r25
    15cc:	8f 91       	pop	r24
    15ce:	7f 91       	pop	r23
    15d0:	6f 91       	pop	r22
    15d2:	5f 91       	pop	r21
    15d4:	4f 91       	pop	r20
    15d6:	3f 91       	pop	r19
    15d8:	2f 91       	pop	r18
    15da:	1f 91       	pop	r17
    15dc:	0f 91       	pop	r16
    15de:	ff 90       	pop	r15
    15e0:	ef 90       	pop	r14
    15e2:	df 90       	pop	r13
    15e4:	cf 90       	pop	r12
    15e6:	bf 90       	pop	r11
    15e8:	af 90       	pop	r10
    15ea:	9f 90       	pop	r9
    15ec:	8f 90       	pop	r8
    15ee:	7f 90       	pop	r7
    15f0:	6f 90       	pop	r6
    15f2:	5f 90       	pop	r5
    15f4:	4f 90       	pop	r4
    15f6:	3f 90       	pop	r3
    15f8:	2f 90       	pop	r2
    15fa:	1f 90       	pop	r1
    15fc:	0f 90       	pop	r0
    15fe:	0f be       	out	0x3f, r0	; 63
    1600:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1602:	08 95       	ret

00001604 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1604:	cf 93       	push	r28
    1606:	df 93       	push	r29
    1608:	00 d0       	rcall	.+0      	; 0x160a <prvSetupTimerInterrupt+0x6>
    160a:	00 d0       	rcall	.+0      	; 0x160c <prvSetupTimerInterrupt+0x8>
    160c:	00 d0       	rcall	.+0      	; 0x160e <prvSetupTimerInterrupt+0xa>
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1612:	89 e9       	ldi	r24, 0x99	; 153
    1614:	99 e3       	ldi	r25, 0x39	; 57
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	9a 83       	std	Y+2, r25	; 0x02
    161e:	ab 83       	std	Y+3, r26	; 0x03
    1620:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	ab 81       	ldd	r26, Y+3	; 0x03
    1628:	bc 81       	ldd	r27, Y+4	; 0x04
    162a:	68 94       	set
    162c:	15 f8       	bld	r1, 5
    162e:	b6 95       	lsr	r27
    1630:	a7 95       	ror	r26
    1632:	97 95       	ror	r25
    1634:	87 95       	ror	r24
    1636:	16 94       	lsr	r1
    1638:	d1 f7       	brne	.-12     	; 0x162e <prvSetupTimerInterrupt+0x2a>
    163a:	89 83       	std	Y+1, r24	; 0x01
    163c:	9a 83       	std	Y+2, r25	; 0x02
    163e:	ab 83       	std	Y+3, r26	; 0x03
    1640:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	9a 81       	ldd	r25, Y+2	; 0x02
    1646:	ab 81       	ldd	r26, Y+3	; 0x03
    1648:	bc 81       	ldd	r27, Y+4	; 0x04
    164a:	01 97       	sbiw	r24, 0x01	; 1
    164c:	a1 09       	sbc	r26, r1
    164e:	b1 09       	sbc	r27, r1
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	9a 83       	std	Y+2, r25	; 0x02
    1654:	ab 83       	std	Y+3, r26	; 0x03
    1656:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1658:	89 81       	ldd	r24, Y+1	; 0x01
    165a:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    165c:	89 81       	ldd	r24, Y+1	; 0x01
    165e:	9a 81       	ldd	r25, Y+2	; 0x02
    1660:	ab 81       	ldd	r26, Y+3	; 0x03
    1662:	bc 81       	ldd	r27, Y+4	; 0x04
    1664:	89 2f       	mov	r24, r25
    1666:	9a 2f       	mov	r25, r26
    1668:	ab 2f       	mov	r26, r27
    166a:	bb 27       	eor	r27, r27
    166c:	89 83       	std	Y+1, r24	; 0x01
    166e:	9a 83       	std	Y+2, r25	; 0x02
    1670:	ab 83       	std	Y+3, r26	; 0x03
    1672:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1674:	89 81       	ldd	r24, Y+1	; 0x01
    1676:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1678:	89 e8       	ldi	r24, 0x89	; 137
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	2e 81       	ldd	r18, Y+6	; 0x06
    167e:	fc 01       	movw	r30, r24
    1680:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1682:	88 e8       	ldi	r24, 0x88	; 136
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	2d 81       	ldd	r18, Y+5	; 0x05
    1688:	fc 01       	movw	r30, r24
    168a:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    168c:	8b e0       	ldi	r24, 0x0B	; 11
    168e:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1690:	81 e8       	ldi	r24, 0x81	; 129
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	2d 81       	ldd	r18, Y+5	; 0x05
    1696:	fc 01       	movw	r30, r24
    1698:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    169a:	8f e6       	ldi	r24, 0x6F	; 111
    169c:	90 e0       	ldi	r25, 0x00	; 0
    169e:	fc 01       	movw	r30, r24
    16a0:	80 81       	ld	r24, Z
    16a2:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    16a4:	8d 81       	ldd	r24, Y+5	; 0x05
    16a6:	82 60       	ori	r24, 0x02	; 2
    16a8:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    16aa:	8f e6       	ldi	r24, 0x6F	; 111
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	2d 81       	ldd	r18, Y+5	; 0x05
    16b0:	fc 01       	movw	r30, r24
    16b2:	20 83       	st	Z, r18
}
    16b4:	26 96       	adiw	r28, 0x06	; 6
    16b6:	0f b6       	in	r0, 0x3f	; 63
    16b8:	f8 94       	cli
    16ba:	de bf       	out	0x3e, r29	; 62
    16bc:	0f be       	out	0x3f, r0	; 63
    16be:	cd bf       	out	0x3d, r28	; 61
    16c0:	df 91       	pop	r29
    16c2:	cf 91       	pop	r28
    16c4:	08 95       	ret

000016c6 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    16c6:	0e 94 a5 0a 	call	0x154a	; 0x154a <vPortYieldFromTick>
		asm volatile ( "reti" );
    16ca:	18 95       	reti

000016cc <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    16cc:	cf 93       	push	r28
    16ce:	df 93       	push	r29
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <pvPortMalloc+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <pvPortMalloc+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	9c 83       	std	Y+4, r25	; 0x04
    16da:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    16dc:	1a 82       	std	Y+2, r1	; 0x02
    16de:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    16e0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    16e4:	80 91 60 07 	lds	r24, 0x0760	; 0x800760 <pucAlignedHeap.1965>
    16e8:	90 91 61 07 	lds	r25, 0x0761	; 0x800761 <pucAlignedHeap.1965+0x1>
    16ec:	89 2b       	or	r24, r25
    16ee:	31 f4       	brne	.+12     	; 0x16fc <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    16f0:	83 e8       	ldi	r24, 0x83	; 131
    16f2:	91 e0       	ldi	r25, 0x01	; 1
    16f4:	90 93 61 07 	sts	0x0761, r25	; 0x800761 <pucAlignedHeap.1965+0x1>
    16f8:	80 93 60 07 	sts	0x0760, r24	; 0x800760 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    16fc:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xNextFreeByte>
    1700:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xNextFreeByte+0x1>
    1704:	8b 81       	ldd	r24, Y+3	; 0x03
    1706:	9c 81       	ldd	r25, Y+4	; 0x04
    1708:	82 0f       	add	r24, r18
    170a:	93 1f       	adc	r25, r19
    170c:	8b 3d       	cpi	r24, 0xDB	; 219
    170e:	95 40       	sbci	r25, 0x05	; 5
    1710:	38 f5       	brcc	.+78     	; 0x1760 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1712:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xNextFreeByte>
    1716:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xNextFreeByte+0x1>
    171a:	8b 81       	ldd	r24, Y+3	; 0x03
    171c:	9c 81       	ldd	r25, Y+4	; 0x04
    171e:	28 0f       	add	r18, r24
    1720:	39 1f       	adc	r19, r25
    1722:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xNextFreeByte>
    1726:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    172a:	82 17       	cp	r24, r18
    172c:	93 07       	cpc	r25, r19
    172e:	c0 f4       	brcc	.+48     	; 0x1760 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1730:	20 91 60 07 	lds	r18, 0x0760	; 0x800760 <pucAlignedHeap.1965>
    1734:	30 91 61 07 	lds	r19, 0x0761	; 0x800761 <pucAlignedHeap.1965+0x1>
    1738:	80 91 5e 07 	lds	r24, 0x075E	; 0x80075e <xNextFreeByte>
    173c:	90 91 5f 07 	lds	r25, 0x075F	; 0x80075f <xNextFreeByte+0x1>
    1740:	82 0f       	add	r24, r18
    1742:	93 1f       	adc	r25, r19
    1744:	9a 83       	std	Y+2, r25	; 0x02
    1746:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1748:	20 91 5e 07 	lds	r18, 0x075E	; 0x80075e <xNextFreeByte>
    174c:	30 91 5f 07 	lds	r19, 0x075F	; 0x80075f <xNextFreeByte+0x1>
    1750:	8b 81       	ldd	r24, Y+3	; 0x03
    1752:	9c 81       	ldd	r25, Y+4	; 0x04
    1754:	82 0f       	add	r24, r18
    1756:	93 1f       	adc	r25, r19
    1758:	90 93 5f 07 	sts	0x075F, r25	; 0x80075f <xNextFreeByte+0x1>
    175c:	80 93 5e 07 	sts	0x075E, r24	; 0x80075e <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1760:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1764:	89 81       	ldd	r24, Y+1	; 0x01
    1766:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1768:	0f 90       	pop	r0
    176a:	0f 90       	pop	r0
    176c:	0f 90       	pop	r0
    176e:	0f 90       	pop	r0
    1770:	df 91       	pop	r29
    1772:	cf 91       	pop	r28
    1774:	08 95       	ret

00001776 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	00 d0       	rcall	.+0      	; 0x177c <vPortFree+0x6>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
    1780:	9a 83       	std	Y+2, r25	; 0x02
    1782:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1784:	0f 90       	pop	r0
    1786:	0f 90       	pop	r0
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	08 95       	ret

0000178e <_serial_tx_int_on>:
    178e:	cf 93       	push	r28
    1790:	df 93       	push	r29
    1792:	00 d0       	rcall	.+0      	; 0x1794 <_serial_tx_int_on+0x6>
    1794:	cd b7       	in	r28, 0x3d	; 61
    1796:	de b7       	in	r29, 0x3e	; 62
    1798:	9a 83       	std	Y+2, r25	; 0x02
    179a:	89 83       	std	Y+1, r24	; 0x01
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	05 97       	sbiw	r24, 0x05	; 5
    17a2:	29 81       	ldd	r18, Y+1	; 0x01
    17a4:	3a 81       	ldd	r19, Y+2	; 0x02
    17a6:	25 50       	subi	r18, 0x05	; 5
    17a8:	31 09       	sbc	r19, r1
    17aa:	f9 01       	movw	r30, r18
    17ac:	20 81       	ld	r18, Z
    17ae:	20 62       	ori	r18, 0x20	; 32
    17b0:	fc 01       	movw	r30, r24
    17b2:	20 83       	st	Z, r18
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	df 91       	pop	r29
    17ba:	cf 91       	pop	r28
    17bc:	08 95       	ret

000017be <serial_new_instance>:
    17be:	8f 92       	push	r8
    17c0:	9f 92       	push	r9
    17c2:	af 92       	push	r10
    17c4:	bf 92       	push	r11
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
    17d0:	cf 93       	push	r28
    17d2:	df 93       	push	r29
    17d4:	cd b7       	in	r28, 0x3d	; 61
    17d6:	de b7       	in	r29, 0x3e	; 62
    17d8:	65 97       	sbiw	r28, 0x15	; 21
    17da:	0f b6       	in	r0, 0x3f	; 63
    17dc:	f8 94       	cli
    17de:	de bf       	out	0x3e, r29	; 62
    17e0:	0f be       	out	0x3f, r0	; 63
    17e2:	cd bf       	out	0x3d, r28	; 61
    17e4:	8c 83       	std	Y+4, r24	; 0x04
    17e6:	4d 83       	std	Y+5, r20	; 0x05
    17e8:	5e 83       	std	Y+6, r21	; 0x06
    17ea:	6f 83       	std	Y+7, r22	; 0x07
    17ec:	78 87       	std	Y+8, r23	; 0x08
    17ee:	29 87       	std	Y+9, r18	; 0x09
    17f0:	0a 87       	std	Y+10, r16	; 0x0a
    17f2:	eb 86       	std	Y+11, r14	; 0x0b
    17f4:	dd 86       	std	Y+13, r13	; 0x0d
    17f6:	cc 86       	std	Y+12, r12	; 0x0c
    17f8:	bf 86       	std	Y+15, r11	; 0x0f
    17fa:	ae 86       	std	Y+14, r10	; 0x0e
    17fc:	99 8a       	std	Y+17, r9	; 0x11
    17fe:	88 8a       	std	Y+16, r8	; 0x10
    1800:	88 e0       	ldi	r24, 0x08	; 8
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	0e 94 3b 1c 	call	0x3876	; 0x3876 <malloc>
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	88 2f       	mov	r24, r24
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	8e 59       	subi	r24, 0x9E	; 158
    1818:	98 4f       	sbci	r25, 0xF8	; 248
    181a:	29 81       	ldd	r18, Y+1	; 0x01
    181c:	3a 81       	ldd	r19, Y+2	; 0x02
    181e:	fc 01       	movw	r30, r24
    1820:	31 83       	std	Z+1, r19	; 0x01
    1822:	20 83       	st	Z, r18
    1824:	8c 81       	ldd	r24, Y+4	; 0x04
    1826:	88 2f       	mov	r24, r24
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	88 5d       	subi	r24, 0xD8	; 216
    1830:	9e 4f       	sbci	r25, 0xFE	; 254
    1832:	fc 01       	movw	r30, r24
    1834:	20 81       	ld	r18, Z
    1836:	31 81       	ldd	r19, Z+1	; 0x01
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	9a 81       	ldd	r25, Y+2	; 0x02
    183c:	fc 01       	movw	r30, r24
    183e:	31 83       	std	Z+1, r19	; 0x01
    1840:	20 83       	st	Z, r18
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	2e 85       	ldd	r18, Y+14	; 0x0e
    1848:	3f 85       	ldd	r19, Y+15	; 0x0f
    184a:	fc 01       	movw	r30, r24
    184c:	33 83       	std	Z+3, r19	; 0x03
    184e:	22 83       	std	Z+2, r18	; 0x02
    1850:	89 81       	ldd	r24, Y+1	; 0x01
    1852:	9a 81       	ldd	r25, Y+2	; 0x02
    1854:	2c 85       	ldd	r18, Y+12	; 0x0c
    1856:	3d 85       	ldd	r19, Y+13	; 0x0d
    1858:	fc 01       	movw	r30, r24
    185a:	35 83       	std	Z+5, r19	; 0x05
    185c:	24 83       	std	Z+4, r18	; 0x04
    185e:	89 81       	ldd	r24, Y+1	; 0x01
    1860:	9a 81       	ldd	r25, Y+2	; 0x02
    1862:	28 89       	ldd	r18, Y+16	; 0x10
    1864:	39 89       	ldd	r19, Y+17	; 0x11
    1866:	fc 01       	movw	r30, r24
    1868:	37 83       	std	Z+7, r19	; 0x07
    186a:	26 83       	std	Z+6, r18	; 0x06
    186c:	8f e5       	ldi	r24, 0x5F	; 95
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	fc 01       	movw	r30, r24
    1872:	80 81       	ld	r24, Z
    1874:	8b 83       	std	Y+3, r24	; 0x03
    1876:	f8 94       	cli
    1878:	89 81       	ldd	r24, Y+1	; 0x01
    187a:	9a 81       	ldd	r25, Y+2	; 0x02
    187c:	fc 01       	movw	r30, r24
    187e:	80 81       	ld	r24, Z
    1880:	91 81       	ldd	r25, Z+1	; 0x01
    1882:	06 97       	sbiw	r24, 0x06	; 6
    1884:	29 81       	ldd	r18, Y+1	; 0x01
    1886:	3a 81       	ldd	r19, Y+2	; 0x02
    1888:	f9 01       	movw	r30, r18
    188a:	20 81       	ld	r18, Z
    188c:	31 81       	ldd	r19, Z+1	; 0x01
    188e:	26 50       	subi	r18, 0x06	; 6
    1890:	31 09       	sbc	r19, r1
    1892:	f9 01       	movw	r30, r18
    1894:	20 81       	ld	r18, Z
    1896:	22 60       	ori	r18, 0x02	; 2
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	9a 81       	ldd	r25, Y+2	; 0x02
    18a0:	fc 01       	movw	r30, r24
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	8c 01       	movw	r16, r24
    18a8:	02 50       	subi	r16, 0x02	; 2
    18aa:	11 09       	sbc	r17, r1
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	9e 81       	ldd	r25, Y+6	; 0x06
    18b0:	af 81       	ldd	r26, Y+7	; 0x07
    18b2:	b8 85       	ldd	r27, Y+8	; 0x08
    18b4:	88 0f       	add	r24, r24
    18b6:	99 1f       	adc	r25, r25
    18b8:	aa 1f       	adc	r26, r26
    18ba:	bb 1f       	adc	r27, r27
    18bc:	88 0f       	add	r24, r24
    18be:	99 1f       	adc	r25, r25
    18c0:	aa 1f       	adc	r26, r26
    18c2:	bb 1f       	adc	r27, r27
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	aa 1f       	adc	r26, r26
    18ca:	bb 1f       	adc	r27, r27
    18cc:	9c 01       	movw	r18, r24
    18ce:	ad 01       	movw	r20, r26
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a1 ee       	ldi	r26, 0xE1	; 225
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	bc 01       	movw	r22, r24
    18da:	cd 01       	movw	r24, r26
    18dc:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__udivmodsi4>
    18e0:	da 01       	movw	r26, r20
    18e2:	c9 01       	movw	r24, r18
    18e4:	81 50       	subi	r24, 0x01	; 1
    18e6:	f8 01       	movw	r30, r16
    18e8:	80 83       	st	Z, r24
    18ea:	89 81       	ldd	r24, Y+1	; 0x01
    18ec:	9a 81       	ldd	r25, Y+2	; 0x02
    18ee:	fc 01       	movw	r30, r24
    18f0:	80 81       	ld	r24, Z
    18f2:	91 81       	ldd	r25, Z+1	; 0x01
    18f4:	05 97       	sbiw	r24, 0x05	; 5
    18f6:	28 e9       	ldi	r18, 0x98	; 152
    18f8:	fc 01       	movw	r30, r24
    18fa:	20 83       	st	Z, r18
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1900:	fc 01       	movw	r30, r24
    1902:	80 81       	ld	r24, Z
    1904:	91 81       	ldd	r25, Z+1	; 0x01
    1906:	04 97       	sbiw	r24, 0x04	; 4
    1908:	26 e0       	ldi	r18, 0x06	; 6
    190a:	fc 01       	movw	r30, r24
    190c:	20 83       	st	Z, r18
    190e:	8f e5       	ldi	r24, 0x5F	; 95
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	2b 81       	ldd	r18, Y+3	; 0x03
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18
    1918:	89 81       	ldd	r24, Y+1	; 0x01
    191a:	9a 81       	ldd	r25, Y+2	; 0x02
    191c:	65 96       	adiw	r28, 0x15	; 21
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
    1928:	df 91       	pop	r29
    192a:	cf 91       	pop	r28
    192c:	1f 91       	pop	r17
    192e:	0f 91       	pop	r16
    1930:	ef 90       	pop	r14
    1932:	df 90       	pop	r13
    1934:	cf 90       	pop	r12
    1936:	bf 90       	pop	r11
    1938:	af 90       	pop	r10
    193a:	9f 90       	pop	r9
    193c:	8f 90       	pop	r8
    193e:	08 95       	ret

00001940 <serial_send_bytes>:
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	00 d0       	rcall	.+0      	; 0x1946 <serial_send_bytes+0x6>
    1946:	00 d0       	rcall	.+0      	; 0x1948 <serial_send_bytes+0x8>
    1948:	00 d0       	rcall	.+0      	; 0x194a <serial_send_bytes+0xa>
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	9b 83       	std	Y+3, r25	; 0x03
    1950:	8a 83       	std	Y+2, r24	; 0x02
    1952:	7d 83       	std	Y+5, r23	; 0x05
    1954:	6c 83       	std	Y+4, r22	; 0x04
    1956:	4e 83       	std	Y+6, r20	; 0x06
    1958:	8a 81       	ldd	r24, Y+2	; 0x02
    195a:	9b 81       	ldd	r25, Y+3	; 0x03
    195c:	fc 01       	movw	r30, r24
    195e:	82 81       	ldd	r24, Z+2	; 0x02
    1960:	93 81       	ldd	r25, Z+3	; 0x03
    1962:	89 2b       	or	r24, r25
    1964:	a9 f0       	breq	.+42     	; 0x1990 <serial_send_bytes+0x50>
    1966:	8e 81       	ldd	r24, Y+6	; 0x06
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	fc 01       	movw	r30, r24
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	93 81       	ldd	r25, Z+3	; 0x03
    1976:	fc 01       	movw	r30, r24
    1978:	82 89       	ldd	r24, Z+18	; 0x12
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	40 e1       	ldi	r20, 0x10	; 16
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	ba 01       	movw	r22, r20
    1984:	68 1b       	sub	r22, r24
    1986:	79 0b       	sbc	r23, r25
    1988:	cb 01       	movw	r24, r22
    198a:	82 17       	cp	r24, r18
    198c:	93 07       	cpc	r25, r19
    198e:	54 f0       	brlt	.+20     	; 0x19a4 <serial_send_bytes+0x64>
    1990:	8a 81       	ldd	r24, Y+2	; 0x02
    1992:	9b 81       	ldd	r25, Y+3	; 0x03
    1994:	fc 01       	movw	r30, r24
    1996:	82 81       	ldd	r24, Z+2	; 0x02
    1998:	93 81       	ldd	r25, Z+3	; 0x03
    199a:	89 2b       	or	r24, r25
    199c:	29 f4       	brne	.+10     	; 0x19a8 <serial_send_bytes+0x68>
    199e:	8e 81       	ldd	r24, Y+6	; 0x06
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	10 f0       	brcs	.+4      	; 0x19a8 <serial_send_bytes+0x68>
    19a4:	82 e0       	ldi	r24, 0x02	; 2
    19a6:	22 c0       	rjmp	.+68     	; 0x19ec <serial_send_bytes+0xac>
    19a8:	19 82       	std	Y+1, r1	; 0x01
    19aa:	14 c0       	rjmp	.+40     	; 0x19d4 <serial_send_bytes+0x94>
    19ac:	89 81       	ldd	r24, Y+1	; 0x01
    19ae:	88 2f       	mov	r24, r24
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	82 0f       	add	r24, r18
    19b8:	93 1f       	adc	r25, r19
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 81       	ld	r18, Z
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	9b 81       	ldd	r25, Y+3	; 0x03
    19c2:	fc 01       	movw	r30, r24
    19c4:	82 81       	ldd	r24, Z+2	; 0x02
    19c6:	93 81       	ldd	r25, Z+3	; 0x03
    19c8:	62 2f       	mov	r22, r18
    19ca:	0e 94 c9 06 	call	0xd92	; 0xd92 <buffer_put_item>
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	8f 5f       	subi	r24, 0xFF	; 255
    19d2:	89 83       	std	Y+1, r24	; 0x01
    19d4:	99 81       	ldd	r25, Y+1	; 0x01
    19d6:	8e 81       	ldd	r24, Y+6	; 0x06
    19d8:	98 17       	cp	r25, r24
    19da:	40 f3       	brcs	.-48     	; 0x19ac <serial_send_bytes+0x6c>
    19dc:	8a 81       	ldd	r24, Y+2	; 0x02
    19de:	9b 81       	ldd	r25, Y+3	; 0x03
    19e0:	fc 01       	movw	r30, r24
    19e2:	80 81       	ld	r24, Z
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	0e 94 c7 0b 	call	0x178e	; 0x178e <_serial_tx_int_on>
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	26 96       	adiw	r28, 0x06	; 6
    19ee:	0f b6       	in	r0, 0x3f	; 63
    19f0:	f8 94       	cli
    19f2:	de bf       	out	0x3e, r29	; 62
    19f4:	0f be       	out	0x3f, r0	; 63
    19f6:	cd bf       	out	0x3d, r28	; 61
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	08 95       	ret

000019fe <__vector_20>:
    19fe:	1f 92       	push	r1
    1a00:	0f 92       	push	r0
    1a02:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a06:	0f 92       	push	r0
    1a08:	11 24       	eor	r1, r1
    1a0a:	2f 93       	push	r18
    1a0c:	3f 93       	push	r19
    1a0e:	4f 93       	push	r20
    1a10:	5f 93       	push	r21
    1a12:	6f 93       	push	r22
    1a14:	7f 93       	push	r23
    1a16:	8f 93       	push	r24
    1a18:	9f 93       	push	r25
    1a1a:	af 93       	push	r26
    1a1c:	bf 93       	push	r27
    1a1e:	ef 93       	push	r30
    1a20:	ff 93       	push	r31
    1a22:	cf 93       	push	r28
    1a24:	df 93       	push	r29
    1a26:	1f 92       	push	r1
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62
    1a2c:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1a30:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1a34:	89 2b       	or	r24, r25
    1a36:	31 f1       	breq	.+76     	; 0x1a84 <__vector_20+0x86>
    1a38:	86 ec       	ldi	r24, 0xC6	; 198
    1a3a:	90 e0       	ldi	r25, 0x00	; 0
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1a46:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	84 81       	ldd	r24, Z+4	; 0x04
    1a4e:	95 81       	ldd	r25, Z+5	; 0x05
    1a50:	69 81       	ldd	r22, Y+1	; 0x01
    1a52:	0e 94 c9 06 	call	0xd92	; 0xd92 <buffer_put_item>
    1a56:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1a5a:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1a5e:	fc 01       	movw	r30, r24
    1a60:	86 81       	ldd	r24, Z+6	; 0x06
    1a62:	97 81       	ldd	r25, Z+7	; 0x07
    1a64:	89 2b       	or	r24, r25
    1a66:	71 f0       	breq	.+28     	; 0x1a84 <__vector_20+0x86>
    1a68:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1a6c:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1a70:	fc 01       	movw	r30, r24
    1a72:	26 81       	ldd	r18, Z+6	; 0x06
    1a74:	37 81       	ldd	r19, Z+7	; 0x07
    1a76:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1a7a:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1a7e:	69 81       	ldd	r22, Y+1	; 0x01
    1a80:	f9 01       	movw	r30, r18
    1a82:	09 95       	icall
    1a84:	0f 90       	pop	r0
    1a86:	df 91       	pop	r29
    1a88:	cf 91       	pop	r28
    1a8a:	ff 91       	pop	r31
    1a8c:	ef 91       	pop	r30
    1a8e:	bf 91       	pop	r27
    1a90:	af 91       	pop	r26
    1a92:	9f 91       	pop	r25
    1a94:	8f 91       	pop	r24
    1a96:	7f 91       	pop	r23
    1a98:	6f 91       	pop	r22
    1a9a:	5f 91       	pop	r21
    1a9c:	4f 91       	pop	r20
    1a9e:	3f 91       	pop	r19
    1aa0:	2f 91       	pop	r18
    1aa2:	0f 90       	pop	r0
    1aa4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1aa8:	0f 90       	pop	r0
    1aaa:	1f 90       	pop	r1
    1aac:	18 95       	reti

00001aae <__vector_21>:
    1aae:	1f 92       	push	r1
    1ab0:	0f 92       	push	r0
    1ab2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ab6:	0f 92       	push	r0
    1ab8:	11 24       	eor	r1, r1
    1aba:	2f 93       	push	r18
    1abc:	3f 93       	push	r19
    1abe:	4f 93       	push	r20
    1ac0:	5f 93       	push	r21
    1ac2:	6f 93       	push	r22
    1ac4:	7f 93       	push	r23
    1ac6:	8f 93       	push	r24
    1ac8:	9f 93       	push	r25
    1aca:	af 93       	push	r26
    1acc:	bf 93       	push	r27
    1ace:	ef 93       	push	r30
    1ad0:	ff 93       	push	r31
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	1f 92       	push	r1
    1ad8:	cd b7       	in	r28, 0x3d	; 61
    1ada:	de b7       	in	r29, 0x3e	; 62
    1adc:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1ae0:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1ae4:	89 2b       	or	r24, r25
    1ae6:	f9 f0       	breq	.+62     	; 0x1b26 <__vector_21+0x78>
    1ae8:	80 91 62 07 	lds	r24, 0x0762	; 0x800762 <_ser_handle>
    1aec:	90 91 63 07 	lds	r25, 0x0763	; 0x800763 <_ser_handle+0x1>
    1af0:	fc 01       	movw	r30, r24
    1af2:	82 81       	ldd	r24, Z+2	; 0x02
    1af4:	93 81       	ldd	r25, Z+3	; 0x03
    1af6:	9e 01       	movw	r18, r28
    1af8:	2f 5f       	subi	r18, 0xFF	; 255
    1afa:	3f 4f       	sbci	r19, 0xFF	; 255
    1afc:	b9 01       	movw	r22, r18
    1afe:	0e 94 81 06 	call	0xd02	; 0xd02 <buffer_get_item>
    1b02:	88 23       	and	r24, r24
    1b04:	31 f4       	brne	.+12     	; 0x1b12 <__vector_21+0x64>
    1b06:	86 ec       	ldi	r24, 0xC6	; 198
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	29 81       	ldd	r18, Y+1	; 0x01
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	20 83       	st	Z, r18
    1b10:	13 c0       	rjmp	.+38     	; 0x1b38 <__vector_21+0x8a>
    1b12:	81 ec       	ldi	r24, 0xC1	; 193
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	21 ec       	ldi	r18, 0xC1	; 193
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	f9 01       	movw	r30, r18
    1b1c:	20 81       	ld	r18, Z
    1b1e:	2f 7d       	andi	r18, 0xDF	; 223
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
    1b24:	09 c0       	rjmp	.+18     	; 0x1b38 <__vector_21+0x8a>
    1b26:	81 ec       	ldi	r24, 0xC1	; 193
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	21 ec       	ldi	r18, 0xC1	; 193
    1b2c:	30 e0       	ldi	r19, 0x00	; 0
    1b2e:	f9 01       	movw	r30, r18
    1b30:	20 81       	ld	r18, Z
    1b32:	2f 7d       	andi	r18, 0xDF	; 223
    1b34:	fc 01       	movw	r30, r24
    1b36:	20 83       	st	Z, r18
    1b38:	0f 90       	pop	r0
    1b3a:	df 91       	pop	r29
    1b3c:	cf 91       	pop	r28
    1b3e:	ff 91       	pop	r31
    1b40:	ef 91       	pop	r30
    1b42:	bf 91       	pop	r27
    1b44:	af 91       	pop	r26
    1b46:	9f 91       	pop	r25
    1b48:	8f 91       	pop	r24
    1b4a:	7f 91       	pop	r23
    1b4c:	6f 91       	pop	r22
    1b4e:	5f 91       	pop	r21
    1b50:	4f 91       	pop	r20
    1b52:	3f 91       	pop	r19
    1b54:	2f 91       	pop	r18
    1b56:	0f 90       	pop	r0
    1b58:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <__vector_28>:
    1b62:	1f 92       	push	r1
    1b64:	0f 92       	push	r0
    1b66:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b6a:	0f 92       	push	r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	2f 93       	push	r18
    1b70:	3f 93       	push	r19
    1b72:	4f 93       	push	r20
    1b74:	5f 93       	push	r21
    1b76:	6f 93       	push	r22
    1b78:	7f 93       	push	r23
    1b7a:	8f 93       	push	r24
    1b7c:	9f 93       	push	r25
    1b7e:	af 93       	push	r26
    1b80:	bf 93       	push	r27
    1b82:	ef 93       	push	r30
    1b84:	ff 93       	push	r31
    1b86:	cf 93       	push	r28
    1b88:	df 93       	push	r29
    1b8a:	1f 92       	push	r1
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1b94:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1b98:	89 2b       	or	r24, r25
    1b9a:	31 f1       	breq	.+76     	; 0x1be8 <__vector_28+0x86>
    1b9c:	8e ec       	ldi	r24, 0xCE	; 206
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	80 81       	ld	r24, Z
    1ba4:	89 83       	std	Y+1, r24	; 0x01
    1ba6:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1baa:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1bae:	fc 01       	movw	r30, r24
    1bb0:	84 81       	ldd	r24, Z+4	; 0x04
    1bb2:	95 81       	ldd	r25, Z+5	; 0x05
    1bb4:	69 81       	ldd	r22, Y+1	; 0x01
    1bb6:	0e 94 c9 06 	call	0xd92	; 0xd92 <buffer_put_item>
    1bba:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1bbe:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	86 81       	ldd	r24, Z+6	; 0x06
    1bc6:	97 81       	ldd	r25, Z+7	; 0x07
    1bc8:	89 2b       	or	r24, r25
    1bca:	71 f0       	breq	.+28     	; 0x1be8 <__vector_28+0x86>
    1bcc:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1bd0:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	26 81       	ldd	r18, Z+6	; 0x06
    1bd8:	37 81       	ldd	r19, Z+7	; 0x07
    1bda:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1bde:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1be2:	69 81       	ldd	r22, Y+1	; 0x01
    1be4:	f9 01       	movw	r30, r18
    1be6:	09 95       	icall
    1be8:	0f 90       	pop	r0
    1bea:	df 91       	pop	r29
    1bec:	cf 91       	pop	r28
    1bee:	ff 91       	pop	r31
    1bf0:	ef 91       	pop	r30
    1bf2:	bf 91       	pop	r27
    1bf4:	af 91       	pop	r26
    1bf6:	9f 91       	pop	r25
    1bf8:	8f 91       	pop	r24
    1bfa:	7f 91       	pop	r23
    1bfc:	6f 91       	pop	r22
    1bfe:	5f 91       	pop	r21
    1c00:	4f 91       	pop	r20
    1c02:	3f 91       	pop	r19
    1c04:	2f 91       	pop	r18
    1c06:	0f 90       	pop	r0
    1c08:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c0c:	0f 90       	pop	r0
    1c0e:	1f 90       	pop	r1
    1c10:	18 95       	reti

00001c12 <__vector_29>:
    1c12:	1f 92       	push	r1
    1c14:	0f 92       	push	r0
    1c16:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	1f 92       	push	r1
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1c44:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1c48:	89 2b       	or	r24, r25
    1c4a:	f9 f0       	breq	.+62     	; 0x1c8a <__vector_29+0x78>
    1c4c:	80 91 64 07 	lds	r24, 0x0764	; 0x800764 <_ser_handle+0x2>
    1c50:	90 91 65 07 	lds	r25, 0x0765	; 0x800765 <_ser_handle+0x3>
    1c54:	fc 01       	movw	r30, r24
    1c56:	82 81       	ldd	r24, Z+2	; 0x02
    1c58:	93 81       	ldd	r25, Z+3	; 0x03
    1c5a:	9e 01       	movw	r18, r28
    1c5c:	2f 5f       	subi	r18, 0xFF	; 255
    1c5e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c60:	b9 01       	movw	r22, r18
    1c62:	0e 94 81 06 	call	0xd02	; 0xd02 <buffer_get_item>
    1c66:	88 23       	and	r24, r24
    1c68:	31 f4       	brne	.+12     	; 0x1c76 <__vector_29+0x64>
    1c6a:	8e ec       	ldi	r24, 0xCE	; 206
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	29 81       	ldd	r18, Y+1	; 0x01
    1c70:	fc 01       	movw	r30, r24
    1c72:	20 83       	st	Z, r18
    1c74:	13 c0       	rjmp	.+38     	; 0x1c9c <__vector_29+0x8a>
    1c76:	89 ec       	ldi	r24, 0xC9	; 201
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	29 ec       	ldi	r18, 0xC9	; 201
    1c7c:	30 e0       	ldi	r19, 0x00	; 0
    1c7e:	f9 01       	movw	r30, r18
    1c80:	20 81       	ld	r18, Z
    1c82:	2f 7d       	andi	r18, 0xDF	; 223
    1c84:	fc 01       	movw	r30, r24
    1c86:	20 83       	st	Z, r18
    1c88:	09 c0       	rjmp	.+18     	; 0x1c9c <__vector_29+0x8a>
    1c8a:	89 ec       	ldi	r24, 0xC9	; 201
    1c8c:	90 e0       	ldi	r25, 0x00	; 0
    1c8e:	29 ec       	ldi	r18, 0xC9	; 201
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	f9 01       	movw	r30, r18
    1c94:	20 81       	ld	r18, Z
    1c96:	2f 7d       	andi	r18, 0xDF	; 223
    1c98:	fc 01       	movw	r30, r24
    1c9a:	20 83       	st	Z, r18
    1c9c:	0f 90       	pop	r0
    1c9e:	df 91       	pop	r29
    1ca0:	cf 91       	pop	r28
    1ca2:	ff 91       	pop	r31
    1ca4:	ef 91       	pop	r30
    1ca6:	bf 91       	pop	r27
    1ca8:	af 91       	pop	r26
    1caa:	9f 91       	pop	r25
    1cac:	8f 91       	pop	r24
    1cae:	7f 91       	pop	r23
    1cb0:	6f 91       	pop	r22
    1cb2:	5f 91       	pop	r21
    1cb4:	4f 91       	pop	r20
    1cb6:	3f 91       	pop	r19
    1cb8:	2f 91       	pop	r18
    1cba:	0f 90       	pop	r0
    1cbc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1cc0:	0f 90       	pop	r0
    1cc2:	1f 90       	pop	r1
    1cc4:	18 95       	reti

00001cc6 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1cc6:	cf 93       	push	r28
    1cc8:	df 93       	push	r29
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <xQueueGenericReset+0x6>
    1ccc:	00 d0       	rcall	.+0      	; 0x1cce <xQueueGenericReset+0x8>
    1cce:	1f 92       	push	r1
    1cd0:	cd b7       	in	r28, 0x3d	; 61
    1cd2:	de b7       	in	r29, 0x3e	; 62
    1cd4:	9c 83       	std	Y+4, r25	; 0x04
    1cd6:	8b 83       	std	Y+3, r24	; 0x03
    1cd8:	6d 83       	std	Y+5, r22	; 0x05
    1cda:	8b 81       	ldd	r24, Y+3	; 0x03
    1cdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1cde:	9a 83       	std	Y+2, r25	; 0x02
    1ce0:	89 83       	std	Y+1, r24	; 0x01
    1ce2:	0f b6       	in	r0, 0x3f	; 63
    1ce4:	f8 94       	cli
    1ce6:	0f 92       	push	r0
    1ce8:	89 81       	ldd	r24, Y+1	; 0x01
    1cea:	9a 81       	ldd	r25, Y+2	; 0x02
    1cec:	fc 01       	movw	r30, r24
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	29 81       	ldd	r18, Y+1	; 0x01
    1cf4:	3a 81       	ldd	r19, Y+2	; 0x02
    1cf6:	f9 01       	movw	r30, r18
    1cf8:	23 8d       	ldd	r18, Z+27	; 0x1b
    1cfa:	42 2f       	mov	r20, r18
    1cfc:	50 e0       	ldi	r21, 0x00	; 0
    1cfe:	29 81       	ldd	r18, Y+1	; 0x01
    1d00:	3a 81       	ldd	r19, Y+2	; 0x02
    1d02:	f9 01       	movw	r30, r18
    1d04:	24 8d       	ldd	r18, Z+28	; 0x1c
    1d06:	22 2f       	mov	r18, r18
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	42 9f       	mul	r20, r18
    1d0c:	b0 01       	movw	r22, r0
    1d0e:	43 9f       	mul	r20, r19
    1d10:	70 0d       	add	r23, r0
    1d12:	52 9f       	mul	r21, r18
    1d14:	70 0d       	add	r23, r0
    1d16:	11 24       	eor	r1, r1
    1d18:	9b 01       	movw	r18, r22
    1d1a:	28 0f       	add	r18, r24
    1d1c:	39 1f       	adc	r19, r25
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	fc 01       	movw	r30, r24
    1d24:	33 83       	std	Z+3, r19	; 0x03
    1d26:	22 83       	std	Z+2, r18	; 0x02
    1d28:	89 81       	ldd	r24, Y+1	; 0x01
    1d2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d2c:	fc 01       	movw	r30, r24
    1d2e:	12 8e       	std	Z+26, r1	; 0x1a
    1d30:	89 81       	ldd	r24, Y+1	; 0x01
    1d32:	9a 81       	ldd	r25, Y+2	; 0x02
    1d34:	fc 01       	movw	r30, r24
    1d36:	20 81       	ld	r18, Z
    1d38:	31 81       	ldd	r19, Z+1	; 0x01
    1d3a:	89 81       	ldd	r24, Y+1	; 0x01
    1d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3e:	fc 01       	movw	r30, r24
    1d40:	35 83       	std	Z+5, r19	; 0x05
    1d42:	24 83       	std	Z+4, r18	; 0x04
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	fc 01       	movw	r30, r24
    1d4a:	80 81       	ld	r24, Z
    1d4c:	91 81       	ldd	r25, Z+1	; 0x01
    1d4e:	29 81       	ldd	r18, Y+1	; 0x01
    1d50:	3a 81       	ldd	r19, Y+2	; 0x02
    1d52:	f9 01       	movw	r30, r18
    1d54:	23 8d       	ldd	r18, Z+27	; 0x1b
    1d56:	22 2f       	mov	r18, r18
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	a9 01       	movw	r20, r18
    1d5c:	41 50       	subi	r20, 0x01	; 1
    1d5e:	51 09       	sbc	r21, r1
    1d60:	29 81       	ldd	r18, Y+1	; 0x01
    1d62:	3a 81       	ldd	r19, Y+2	; 0x02
    1d64:	f9 01       	movw	r30, r18
    1d66:	24 8d       	ldd	r18, Z+28	; 0x1c
    1d68:	22 2f       	mov	r18, r18
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	42 9f       	mul	r20, r18
    1d6e:	b0 01       	movw	r22, r0
    1d70:	43 9f       	mul	r20, r19
    1d72:	70 0d       	add	r23, r0
    1d74:	52 9f       	mul	r21, r18
    1d76:	70 0d       	add	r23, r0
    1d78:	11 24       	eor	r1, r1
    1d7a:	9b 01       	movw	r18, r22
    1d7c:	28 0f       	add	r18, r24
    1d7e:	39 1f       	adc	r19, r25
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	9a 81       	ldd	r25, Y+2	; 0x02
    1d84:	fc 01       	movw	r30, r24
    1d86:	37 83       	std	Z+7, r19	; 0x07
    1d88:	26 83       	std	Z+6, r18	; 0x06
    1d8a:	89 81       	ldd	r24, Y+1	; 0x01
    1d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d8e:	2f ef       	ldi	r18, 0xFF	; 255
    1d90:	fc 01       	movw	r30, r24
    1d92:	25 8f       	std	Z+29, r18	; 0x1d
    1d94:	89 81       	ldd	r24, Y+1	; 0x01
    1d96:	9a 81       	ldd	r25, Y+2	; 0x02
    1d98:	2f ef       	ldi	r18, 0xFF	; 255
    1d9a:	fc 01       	movw	r30, r24
    1d9c:	26 8f       	std	Z+30, r18	; 0x1e
    1d9e:	8d 81       	ldd	r24, Y+5	; 0x05
    1da0:	88 23       	and	r24, r24
    1da2:	81 f4       	brne	.+32     	; 0x1dc4 <xQueueGenericReset+0xfe>
    1da4:	89 81       	ldd	r24, Y+1	; 0x01
    1da6:	9a 81       	ldd	r25, Y+2	; 0x02
    1da8:	fc 01       	movw	r30, r24
    1daa:	80 85       	ldd	r24, Z+8	; 0x08
    1dac:	88 23       	and	r24, r24
    1dae:	a1 f0       	breq	.+40     	; 0x1dd8 <xQueueGenericReset+0x112>
    1db0:	89 81       	ldd	r24, Y+1	; 0x01
    1db2:	9a 81       	ldd	r25, Y+2	; 0x02
    1db4:	08 96       	adiw	r24, 0x08	; 8
    1db6:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    1dba:	88 23       	and	r24, r24
    1dbc:	69 f0       	breq	.+26     	; 0x1dd8 <xQueueGenericReset+0x112>
    1dbe:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    1dc2:	0a c0       	rjmp	.+20     	; 0x1dd8 <xQueueGenericReset+0x112>
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc8:	08 96       	adiw	r24, 0x08	; 8
    1dca:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    1dce:	89 81       	ldd	r24, Y+1	; 0x01
    1dd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd2:	41 96       	adiw	r24, 0x11	; 17
    1dd4:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    1dd8:	0f 90       	pop	r0
    1dda:	0f be       	out	0x3f, r0	; 63
    1ddc:	81 e0       	ldi	r24, 0x01	; 1
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	0f 90       	pop	r0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	df 91       	pop	r29
    1dea:	cf 91       	pop	r28
    1dec:	08 95       	ret

00001dee <xQueueGenericCreate>:
    1dee:	0f 93       	push	r16
    1df0:	1f 93       	push	r17
    1df2:	cf 93       	push	r28
    1df4:	df 93       	push	r29
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	29 97       	sbiw	r28, 0x09	; 9
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	8f 83       	std	Y+7, r24	; 0x07
    1e08:	68 87       	std	Y+8, r22	; 0x08
    1e0a:	49 87       	std	Y+9, r20	; 0x09
    1e0c:	88 85       	ldd	r24, Y+8	; 0x08
    1e0e:	88 23       	and	r24, r24
    1e10:	19 f4       	brne	.+6      	; 0x1e18 <xQueueGenericCreate+0x2a>
    1e12:	1a 82       	std	Y+2, r1	; 0x02
    1e14:	19 82       	std	Y+1, r1	; 0x01
    1e16:	0f c0       	rjmp	.+30     	; 0x1e36 <xQueueGenericCreate+0x48>
    1e18:	8f 81       	ldd	r24, Y+7	; 0x07
    1e1a:	48 2f       	mov	r20, r24
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	88 85       	ldd	r24, Y+8	; 0x08
    1e20:	28 2f       	mov	r18, r24
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	42 9f       	mul	r20, r18
    1e26:	c0 01       	movw	r24, r0
    1e28:	43 9f       	mul	r20, r19
    1e2a:	90 0d       	add	r25, r0
    1e2c:	52 9f       	mul	r21, r18
    1e2e:	90 0d       	add	r25, r0
    1e30:	11 24       	eor	r1, r1
    1e32:	9a 83       	std	Y+2, r25	; 0x02
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	89 81       	ldd	r24, Y+1	; 0x01
    1e38:	9a 81       	ldd	r25, Y+2	; 0x02
    1e3a:	81 96       	adiw	r24, 0x21	; 33
    1e3c:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pvPortMalloc>
    1e40:	9c 83       	std	Y+4, r25	; 0x04
    1e42:	8b 83       	std	Y+3, r24	; 0x03
    1e44:	8b 81       	ldd	r24, Y+3	; 0x03
    1e46:	9c 81       	ldd	r25, Y+4	; 0x04
    1e48:	89 2b       	or	r24, r25
    1e4a:	81 f0       	breq	.+32     	; 0x1e6c <xQueueGenericCreate+0x7e>
    1e4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e50:	81 96       	adiw	r24, 0x21	; 33
    1e52:	9e 83       	std	Y+6, r25	; 0x06
    1e54:	8d 83       	std	Y+5, r24	; 0x05
    1e56:	2b 81       	ldd	r18, Y+3	; 0x03
    1e58:	3c 81       	ldd	r19, Y+4	; 0x04
    1e5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5e:	89 01       	movw	r16, r18
    1e60:	29 85       	ldd	r18, Y+9	; 0x09
    1e62:	ac 01       	movw	r20, r24
    1e64:	68 85       	ldd	r22, Y+8	; 0x08
    1e66:	8f 81       	ldd	r24, Y+7	; 0x07
    1e68:	0e 94 43 0f 	call	0x1e86	; 0x1e86 <prvInitialiseNewQueue>
    1e6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e70:	29 96       	adiw	r28, 0x09	; 9
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
    1e7c:	df 91       	pop	r29
    1e7e:	cf 91       	pop	r28
    1e80:	1f 91       	pop	r17
    1e82:	0f 91       	pop	r16
    1e84:	08 95       	ret

00001e86 <prvInitialiseNewQueue>:
    1e86:	0f 93       	push	r16
    1e88:	1f 93       	push	r17
    1e8a:	cf 93       	push	r28
    1e8c:	df 93       	push	r29
    1e8e:	cd b7       	in	r28, 0x3d	; 61
    1e90:	de b7       	in	r29, 0x3e	; 62
    1e92:	27 97       	sbiw	r28, 0x07	; 7
    1e94:	0f b6       	in	r0, 0x3f	; 63
    1e96:	f8 94       	cli
    1e98:	de bf       	out	0x3e, r29	; 62
    1e9a:	0f be       	out	0x3f, r0	; 63
    1e9c:	cd bf       	out	0x3d, r28	; 61
    1e9e:	89 83       	std	Y+1, r24	; 0x01
    1ea0:	6a 83       	std	Y+2, r22	; 0x02
    1ea2:	5c 83       	std	Y+4, r21	; 0x04
    1ea4:	4b 83       	std	Y+3, r20	; 0x03
    1ea6:	2d 83       	std	Y+5, r18	; 0x05
    1ea8:	1f 83       	std	Y+7, r17	; 0x07
    1eaa:	0e 83       	std	Y+6, r16	; 0x06
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	88 23       	and	r24, r24
    1eb0:	41 f4       	brne	.+16     	; 0x1ec2 <prvInitialiseNewQueue+0x3c>
    1eb2:	8e 81       	ldd	r24, Y+6	; 0x06
    1eb4:	9f 81       	ldd	r25, Y+7	; 0x07
    1eb6:	2e 81       	ldd	r18, Y+6	; 0x06
    1eb8:	3f 81       	ldd	r19, Y+7	; 0x07
    1eba:	fc 01       	movw	r30, r24
    1ebc:	31 83       	std	Z+1, r19	; 0x01
    1ebe:	20 83       	st	Z, r18
    1ec0:	07 c0       	rjmp	.+14     	; 0x1ed0 <prvInitialiseNewQueue+0x4a>
    1ec2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec6:	2b 81       	ldd	r18, Y+3	; 0x03
    1ec8:	3c 81       	ldd	r19, Y+4	; 0x04
    1eca:	fc 01       	movw	r30, r24
    1ecc:	31 83       	std	Z+1, r19	; 0x01
    1ece:	20 83       	st	Z, r18
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	29 81       	ldd	r18, Y+1	; 0x01
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	23 8f       	std	Z+27, r18	; 0x1b
    1eda:	8e 81       	ldd	r24, Y+6	; 0x06
    1edc:	9f 81       	ldd	r25, Y+7	; 0x07
    1ede:	2a 81       	ldd	r18, Y+2	; 0x02
    1ee0:	fc 01       	movw	r30, r24
    1ee2:	24 8f       	std	Z+28, r18	; 0x1c
    1ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee6:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee8:	61 e0       	ldi	r22, 0x01	; 1
    1eea:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <xQueueGenericReset>
    1eee:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef2:	2d 81       	ldd	r18, Y+5	; 0x05
    1ef4:	fc 01       	movw	r30, r24
    1ef6:	20 a3       	std	Z+32, r18	; 0x20
    1ef8:	27 96       	adiw	r28, 0x07	; 7
    1efa:	0f b6       	in	r0, 0x3f	; 63
    1efc:	f8 94       	cli
    1efe:	de bf       	out	0x3e, r29	; 62
    1f00:	0f be       	out	0x3f, r0	; 63
    1f02:	cd bf       	out	0x3d, r28	; 61
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	1f 91       	pop	r17
    1f0a:	0f 91       	pop	r16
    1f0c:	08 95       	ret

00001f0e <prvInitialiseMutex>:
    1f0e:	cf 93       	push	r28
    1f10:	df 93       	push	r29
    1f12:	00 d0       	rcall	.+0      	; 0x1f14 <prvInitialiseMutex+0x6>
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	9a 83       	std	Y+2, r25	; 0x02
    1f1a:	89 83       	std	Y+1, r24	; 0x01
    1f1c:	89 81       	ldd	r24, Y+1	; 0x01
    1f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f20:	89 2b       	or	r24, r25
    1f22:	b9 f0       	breq	.+46     	; 0x1f52 <prvInitialiseMutex+0x44>
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	9a 81       	ldd	r25, Y+2	; 0x02
    1f28:	fc 01       	movw	r30, r24
    1f2a:	13 82       	std	Z+3, r1	; 0x03
    1f2c:	12 82       	std	Z+2, r1	; 0x02
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	fc 01       	movw	r30, r24
    1f34:	11 82       	std	Z+1, r1	; 0x01
    1f36:	10 82       	st	Z, r1
    1f38:	89 81       	ldd	r24, Y+1	; 0x01
    1f3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1f3c:	fc 01       	movw	r30, r24
    1f3e:	16 82       	std	Z+6, r1	; 0x06
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	9a 81       	ldd	r25, Y+2	; 0x02
    1f44:	20 e0       	ldi	r18, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <xQueueGenericSend>
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <xQueueCreateMutex>:
    1f5c:	cf 93       	push	r28
    1f5e:	df 93       	push	r29
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <xQueueCreateMutex+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <xQueueCreateMutex+0x8>
    1f64:	1f 92       	push	r1
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
    1f6c:	81 e0       	ldi	r24, 0x01	; 1
    1f6e:	89 83       	std	Y+1, r24	; 0x01
    1f70:	1a 82       	std	Y+2, r1	; 0x02
    1f72:	4d 81       	ldd	r20, Y+5	; 0x05
    1f74:	6a 81       	ldd	r22, Y+2	; 0x02
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	0e 94 f7 0e 	call	0x1dee	; 0x1dee <xQueueGenericCreate>
    1f7c:	9c 83       	std	Y+4, r25	; 0x04
    1f7e:	8b 83       	std	Y+3, r24	; 0x03
    1f80:	8b 81       	ldd	r24, Y+3	; 0x03
    1f82:	9c 81       	ldd	r25, Y+4	; 0x04
    1f84:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <prvInitialiseMutex>
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f8c:	0f 90       	pop	r0
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	df 91       	pop	r29
    1f98:	cf 91       	pop	r28
    1f9a:	08 95       	ret

00001f9c <xQueueGenericSend>:
    1f9c:	cf 93       	push	r28
    1f9e:	df 93       	push	r29
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	2e 97       	sbiw	r28, 0x0e	; 14
    1fa6:	0f b6       	in	r0, 0x3f	; 63
    1fa8:	f8 94       	cli
    1faa:	de bf       	out	0x3e, r29	; 62
    1fac:	0f be       	out	0x3f, r0	; 63
    1fae:	cd bf       	out	0x3d, r28	; 61
    1fb0:	99 87       	std	Y+9, r25	; 0x09
    1fb2:	88 87       	std	Y+8, r24	; 0x08
    1fb4:	7b 87       	std	Y+11, r23	; 0x0b
    1fb6:	6a 87       	std	Y+10, r22	; 0x0a
    1fb8:	5d 87       	std	Y+13, r21	; 0x0d
    1fba:	4c 87       	std	Y+12, r20	; 0x0c
    1fbc:	2e 87       	std	Y+14, r18	; 0x0e
    1fbe:	19 82       	std	Y+1, r1	; 0x01
    1fc0:	88 85       	ldd	r24, Y+8	; 0x08
    1fc2:	99 85       	ldd	r25, Y+9	; 0x09
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    1fc8:	0f b6       	in	r0, 0x3f	; 63
    1fca:	f8 94       	cli
    1fcc:	0f 92       	push	r0
    1fce:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd2:	fc 01       	movw	r30, r24
    1fd4:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fda:	fc 01       	movw	r30, r24
    1fdc:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fde:	28 17       	cp	r18, r24
    1fe0:	18 f0       	brcs	.+6      	; 0x1fe8 <xQueueGenericSend+0x4c>
    1fe2:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fe4:	82 30       	cpi	r24, 0x02	; 2
    1fe6:	11 f5       	brne	.+68     	; 0x202c <xQueueGenericSend+0x90>
    1fe8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fea:	3b 85       	ldd	r19, Y+11	; 0x0b
    1fec:	8a 81       	ldd	r24, Y+2	; 0x02
    1fee:	9b 81       	ldd	r25, Y+3	; 0x03
    1ff0:	4e 85       	ldd	r20, Y+14	; 0x0e
    1ff2:	b9 01       	movw	r22, r18
    1ff4:	0e 94 d5 11 	call	0x23aa	; 0x23aa <prvCopyDataToQueue>
    1ff8:	8c 83       	std	Y+4, r24	; 0x04
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	fc 01       	movw	r30, r24
    2000:	81 89       	ldd	r24, Z+17	; 0x11
    2002:	88 23       	and	r24, r24
    2004:	51 f0       	breq	.+20     	; 0x201a <xQueueGenericSend+0x7e>
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	41 96       	adiw	r24, 0x11	; 17
    200c:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    2010:	88 23       	and	r24, r24
    2012:	41 f0       	breq	.+16     	; 0x2024 <xQueueGenericSend+0x88>
    2014:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2018:	05 c0       	rjmp	.+10     	; 0x2024 <xQueueGenericSend+0x88>
    201a:	8c 81       	ldd	r24, Y+4	; 0x04
    201c:	88 23       	and	r24, r24
    201e:	11 f0       	breq	.+4      	; 0x2024 <xQueueGenericSend+0x88>
    2020:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2024:	0f 90       	pop	r0
    2026:	0f be       	out	0x3f, r0	; 63
    2028:	81 e0       	ldi	r24, 0x01	; 1
    202a:	61 c0       	rjmp	.+194    	; 0x20ee <xQueueGenericSend+0x152>
    202c:	8c 85       	ldd	r24, Y+12	; 0x0c
    202e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2030:	89 2b       	or	r24, r25
    2032:	21 f4       	brne	.+8      	; 0x203c <xQueueGenericSend+0xa0>
    2034:	0f 90       	pop	r0
    2036:	0f be       	out	0x3f, r0	; 63
    2038:	80 e0       	ldi	r24, 0x00	; 0
    203a:	59 c0       	rjmp	.+178    	; 0x20ee <xQueueGenericSend+0x152>
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	88 23       	and	r24, r24
    2040:	31 f4       	brne	.+12     	; 0x204e <xQueueGenericSend+0xb2>
    2042:	ce 01       	movw	r24, r28
    2044:	05 96       	adiw	r24, 0x05	; 5
    2046:	0e 94 f5 18 	call	0x31ea	; 0x31ea <vTaskSetTimeOutState>
    204a:	81 e0       	ldi	r24, 0x01	; 1
    204c:	89 83       	std	Y+1, r24	; 0x01
    204e:	0f 90       	pop	r0
    2050:	0f be       	out	0x3f, r0	; 63
    2052:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	0f 92       	push	r0
    205c:	8a 81       	ldd	r24, Y+2	; 0x02
    205e:	9b 81       	ldd	r25, Y+3	; 0x03
    2060:	fc 01       	movw	r30, r24
    2062:	85 8d       	ldd	r24, Z+29	; 0x1d
    2064:	8f 3f       	cpi	r24, 0xFF	; 255
    2066:	21 f4       	brne	.+8      	; 0x2070 <xQueueGenericSend+0xd4>
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	fc 01       	movw	r30, r24
    206e:	15 8e       	std	Z+29, r1	; 0x1d
    2070:	8a 81       	ldd	r24, Y+2	; 0x02
    2072:	9b 81       	ldd	r25, Y+3	; 0x03
    2074:	fc 01       	movw	r30, r24
    2076:	86 8d       	ldd	r24, Z+30	; 0x1e
    2078:	8f 3f       	cpi	r24, 0xFF	; 255
    207a:	21 f4       	brne	.+8      	; 0x2084 <xQueueGenericSend+0xe8>
    207c:	8a 81       	ldd	r24, Y+2	; 0x02
    207e:	9b 81       	ldd	r25, Y+3	; 0x03
    2080:	fc 01       	movw	r30, r24
    2082:	16 8e       	std	Z+30, r1	; 0x1e
    2084:	0f 90       	pop	r0
    2086:	0f be       	out	0x3f, r0	; 63
    2088:	9e 01       	movw	r18, r28
    208a:	24 5f       	subi	r18, 0xF4	; 244
    208c:	3f 4f       	sbci	r19, 0xFF	; 255
    208e:	ce 01       	movw	r24, r28
    2090:	05 96       	adiw	r24, 0x05	; 5
    2092:	b9 01       	movw	r22, r18
    2094:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskCheckForTimeOut>
    2098:	88 23       	and	r24, r24
    209a:	01 f5       	brne	.+64     	; 0x20dc <xQueueGenericSend+0x140>
    209c:	8a 81       	ldd	r24, Y+2	; 0x02
    209e:	9b 81       	ldd	r25, Y+3	; 0x03
    20a0:	0e 94 70 13 	call	0x26e0	; 0x26e0 <prvIsQueueFull>
    20a4:	88 23       	and	r24, r24
    20a6:	99 f0       	breq	.+38     	; 0x20ce <xQueueGenericSend+0x132>
    20a8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20aa:	3d 85       	ldd	r19, Y+13	; 0x0d
    20ac:	8a 81       	ldd	r24, Y+2	; 0x02
    20ae:	9b 81       	ldd	r25, Y+3	; 0x03
    20b0:	08 96       	adiw	r24, 0x08	; 8
    20b2:	b9 01       	movw	r22, r18
    20b4:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskPlaceOnEventList>
    20b8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ba:	9b 81       	ldd	r25, Y+3	; 0x03
    20bc:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    20c0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    20c4:	88 23       	and	r24, r24
    20c6:	91 f4       	brne	.+36     	; 0x20ec <xQueueGenericSend+0x150>
    20c8:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    20cc:	0f c0       	rjmp	.+30     	; 0x20ec <xQueueGenericSend+0x150>
    20ce:	8a 81       	ldd	r24, Y+2	; 0x02
    20d0:	9b 81       	ldd	r25, Y+3	; 0x03
    20d2:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    20d6:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    20da:	76 cf       	rjmp	.-276    	; 0x1fc8 <xQueueGenericSend+0x2c>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    20e4:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	01 c0       	rjmp	.+2      	; 0x20ee <xQueueGenericSend+0x152>
    20ec:	6d cf       	rjmp	.-294    	; 0x1fc8 <xQueueGenericSend+0x2c>
    20ee:	2e 96       	adiw	r28, 0x0e	; 14
    20f0:	0f b6       	in	r0, 0x3f	; 63
    20f2:	f8 94       	cli
    20f4:	de bf       	out	0x3e, r29	; 62
    20f6:	0f be       	out	0x3f, r0	; 63
    20f8:	cd bf       	out	0x3d, r28	; 61
    20fa:	df 91       	pop	r29
    20fc:	cf 91       	pop	r28
    20fe:	08 95       	ret

00002100 <xQueueGenericSendFromISR>:
    2100:	cf 93       	push	r28
    2102:	df 93       	push	r29
    2104:	cd b7       	in	r28, 0x3d	; 61
    2106:	de b7       	in	r29, 0x3e	; 62
    2108:	2c 97       	sbiw	r28, 0x0c	; 12
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	9f 83       	std	Y+7, r25	; 0x07
    2116:	8e 83       	std	Y+6, r24	; 0x06
    2118:	79 87       	std	Y+9, r23	; 0x09
    211a:	68 87       	std	Y+8, r22	; 0x08
    211c:	5b 87       	std	Y+11, r21	; 0x0b
    211e:	4a 87       	std	Y+10, r20	; 0x0a
    2120:	2c 87       	std	Y+12, r18	; 0x0c
    2122:	8e 81       	ldd	r24, Y+6	; 0x06
    2124:	9f 81       	ldd	r25, Y+7	; 0x07
    2126:	9b 83       	std	Y+3, r25	; 0x03
    2128:	8a 83       	std	Y+2, r24	; 0x02
    212a:	1c 82       	std	Y+4, r1	; 0x04
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	fc 01       	movw	r30, r24
    2132:	22 8d       	ldd	r18, Z+26	; 0x1a
    2134:	8a 81       	ldd	r24, Y+2	; 0x02
    2136:	9b 81       	ldd	r25, Y+3	; 0x03
    2138:	fc 01       	movw	r30, r24
    213a:	83 8d       	ldd	r24, Z+27	; 0x1b
    213c:	28 17       	cp	r18, r24
    213e:	18 f0       	brcs	.+6      	; 0x2146 <xQueueGenericSendFromISR+0x46>
    2140:	8c 85       	ldd	r24, Y+12	; 0x0c
    2142:	82 30       	cpi	r24, 0x02	; 2
    2144:	89 f5       	brne	.+98     	; 0x21a8 <xQueueGenericSendFromISR+0xa8>
    2146:	8a 81       	ldd	r24, Y+2	; 0x02
    2148:	9b 81       	ldd	r25, Y+3	; 0x03
    214a:	fc 01       	movw	r30, r24
    214c:	86 8d       	ldd	r24, Z+30	; 0x1e
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	28 85       	ldd	r18, Y+8	; 0x08
    2152:	39 85       	ldd	r19, Y+9	; 0x09
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	4c 85       	ldd	r20, Y+12	; 0x0c
    215a:	b9 01       	movw	r22, r18
    215c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <prvCopyDataToQueue>
    2160:	8d 81       	ldd	r24, Y+5	; 0x05
    2162:	8f 3f       	cpi	r24, 0xFF	; 255
    2164:	b9 f4       	brne	.+46     	; 0x2194 <xQueueGenericSendFromISR+0x94>
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	fc 01       	movw	r30, r24
    216c:	81 89       	ldd	r24, Z+17	; 0x11
    216e:	88 23       	and	r24, r24
    2170:	c1 f0       	breq	.+48     	; 0x21a2 <xQueueGenericSendFromISR+0xa2>
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	41 96       	adiw	r24, 0x11	; 17
    2178:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    217c:	88 23       	and	r24, r24
    217e:	89 f0       	breq	.+34     	; 0x21a2 <xQueueGenericSendFromISR+0xa2>
    2180:	8a 85       	ldd	r24, Y+10	; 0x0a
    2182:	9b 85       	ldd	r25, Y+11	; 0x0b
    2184:	89 2b       	or	r24, r25
    2186:	69 f0       	breq	.+26     	; 0x21a2 <xQueueGenericSendFromISR+0xa2>
    2188:	8a 85       	ldd	r24, Y+10	; 0x0a
    218a:	9b 85       	ldd	r25, Y+11	; 0x0b
    218c:	21 e0       	ldi	r18, 0x01	; 1
    218e:	fc 01       	movw	r30, r24
    2190:	20 83       	st	Z, r18
    2192:	07 c0       	rjmp	.+14     	; 0x21a2 <xQueueGenericSendFromISR+0xa2>
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	8f 5f       	subi	r24, 0xFF	; 255
    2198:	28 2f       	mov	r18, r24
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	fc 01       	movw	r30, r24
    21a0:	26 8f       	std	Z+30, r18	; 0x1e
    21a2:	81 e0       	ldi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	01 c0       	rjmp	.+2      	; 0x21aa <xQueueGenericSendFromISR+0xaa>
    21a8:	19 82       	std	Y+1, r1	; 0x01
    21aa:	89 81       	ldd	r24, Y+1	; 0x01
    21ac:	2c 96       	adiw	r28, 0x0c	; 12
    21ae:	0f b6       	in	r0, 0x3f	; 63
    21b0:	f8 94       	cli
    21b2:	de bf       	out	0x3e, r29	; 62
    21b4:	0f be       	out	0x3f, r0	; 63
    21b6:	cd bf       	out	0x3d, r28	; 61
    21b8:	df 91       	pop	r29
    21ba:	cf 91       	pop	r28
    21bc:	08 95       	ret

000021be <xQueueGenericReceive>:
    21be:	cf 93       	push	r28
    21c0:	df 93       	push	r29
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	60 97       	sbiw	r28, 0x10	; 16
    21c8:	0f b6       	in	r0, 0x3f	; 63
    21ca:	f8 94       	cli
    21cc:	de bf       	out	0x3e, r29	; 62
    21ce:	0f be       	out	0x3f, r0	; 63
    21d0:	cd bf       	out	0x3d, r28	; 61
    21d2:	9b 87       	std	Y+11, r25	; 0x0b
    21d4:	8a 87       	std	Y+10, r24	; 0x0a
    21d6:	7d 87       	std	Y+13, r23	; 0x0d
    21d8:	6c 87       	std	Y+12, r22	; 0x0c
    21da:	5f 87       	std	Y+15, r21	; 0x0f
    21dc:	4e 87       	std	Y+14, r20	; 0x0e
    21de:	28 8b       	std	Y+16, r18	; 0x10
    21e0:	19 82       	std	Y+1, r1	; 0x01
    21e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    21e4:	9b 85       	ldd	r25, Y+11	; 0x0b
    21e6:	9b 83       	std	Y+3, r25	; 0x03
    21e8:	8a 83       	std	Y+2, r24	; 0x02
    21ea:	0f b6       	in	r0, 0x3f	; 63
    21ec:	f8 94       	cli
    21ee:	0f 92       	push	r0
    21f0:	8a 81       	ldd	r24, Y+2	; 0x02
    21f2:	9b 81       	ldd	r25, Y+3	; 0x03
    21f4:	fc 01       	movw	r30, r24
    21f6:	82 8d       	ldd	r24, Z+26	; 0x1a
    21f8:	8c 83       	std	Y+4, r24	; 0x04
    21fa:	8c 81       	ldd	r24, Y+4	; 0x04
    21fc:	88 23       	and	r24, r24
    21fe:	09 f4       	brne	.+2      	; 0x2202 <xQueueGenericReceive+0x44>
    2200:	51 c0       	rjmp	.+162    	; 0x22a4 <xQueueGenericReceive+0xe6>
    2202:	8a 81       	ldd	r24, Y+2	; 0x02
    2204:	9b 81       	ldd	r25, Y+3	; 0x03
    2206:	fc 01       	movw	r30, r24
    2208:	86 81       	ldd	r24, Z+6	; 0x06
    220a:	97 81       	ldd	r25, Z+7	; 0x07
    220c:	9e 83       	std	Y+6, r25	; 0x06
    220e:	8d 83       	std	Y+5, r24	; 0x05
    2210:	2c 85       	ldd	r18, Y+12	; 0x0c
    2212:	3d 85       	ldd	r19, Y+13	; 0x0d
    2214:	8a 81       	ldd	r24, Y+2	; 0x02
    2216:	9b 81       	ldd	r25, Y+3	; 0x03
    2218:	b9 01       	movw	r22, r18
    221a:	0e 94 a5 12 	call	0x254a	; 0x254a <prvCopyDataFromQueue>
    221e:	88 89       	ldd	r24, Y+16	; 0x10
    2220:	88 23       	and	r24, r24
    2222:	31 f5       	brne	.+76     	; 0x2270 <xQueueGenericReceive+0xb2>
    2224:	8c 81       	ldd	r24, Y+4	; 0x04
    2226:	2f ef       	ldi	r18, 0xFF	; 255
    2228:	28 0f       	add	r18, r24
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	9b 81       	ldd	r25, Y+3	; 0x03
    222e:	fc 01       	movw	r30, r24
    2230:	22 8f       	std	Z+26, r18	; 0x1a
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	fc 01       	movw	r30, r24
    2238:	80 81       	ld	r24, Z
    223a:	91 81       	ldd	r25, Z+1	; 0x01
    223c:	89 2b       	or	r24, r25
    223e:	41 f4       	brne	.+16     	; 0x2250 <xQueueGenericReceive+0x92>
    2240:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <pvTaskIncrementMutexHeldCount>
    2244:	9c 01       	movw	r18, r24
    2246:	8a 81       	ldd	r24, Y+2	; 0x02
    2248:	9b 81       	ldd	r25, Y+3	; 0x03
    224a:	fc 01       	movw	r30, r24
    224c:	33 83       	std	Z+3, r19	; 0x03
    224e:	22 83       	std	Z+2, r18	; 0x02
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	fc 01       	movw	r30, r24
    2256:	80 85       	ldd	r24, Z+8	; 0x08
    2258:	88 23       	and	r24, r24
    225a:	01 f1       	breq	.+64     	; 0x229c <xQueueGenericReceive+0xde>
    225c:	8a 81       	ldd	r24, Y+2	; 0x02
    225e:	9b 81       	ldd	r25, Y+3	; 0x03
    2260:	08 96       	adiw	r24, 0x08	; 8
    2262:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    2266:	88 23       	and	r24, r24
    2268:	c9 f0       	breq	.+50     	; 0x229c <xQueueGenericReceive+0xde>
    226a:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    226e:	16 c0       	rjmp	.+44     	; 0x229c <xQueueGenericReceive+0xde>
    2270:	8a 81       	ldd	r24, Y+2	; 0x02
    2272:	9b 81       	ldd	r25, Y+3	; 0x03
    2274:	2d 81       	ldd	r18, Y+5	; 0x05
    2276:	3e 81       	ldd	r19, Y+6	; 0x06
    2278:	fc 01       	movw	r30, r24
    227a:	37 83       	std	Z+7, r19	; 0x07
    227c:	26 83       	std	Z+6, r18	; 0x06
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	fc 01       	movw	r30, r24
    2284:	81 89       	ldd	r24, Z+17	; 0x11
    2286:	88 23       	and	r24, r24
    2288:	49 f0       	breq	.+18     	; 0x229c <xQueueGenericReceive+0xde>
    228a:	8a 81       	ldd	r24, Y+2	; 0x02
    228c:	9b 81       	ldd	r25, Y+3	; 0x03
    228e:	41 96       	adiw	r24, 0x11	; 17
    2290:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    2294:	88 23       	and	r24, r24
    2296:	11 f0       	breq	.+4      	; 0x229c <xQueueGenericReceive+0xde>
    2298:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    229c:	0f 90       	pop	r0
    229e:	0f be       	out	0x3f, r0	; 63
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	7a c0       	rjmp	.+244    	; 0x2398 <xQueueGenericReceive+0x1da>
    22a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    22a6:	9f 85       	ldd	r25, Y+15	; 0x0f
    22a8:	89 2b       	or	r24, r25
    22aa:	21 f4       	brne	.+8      	; 0x22b4 <xQueueGenericReceive+0xf6>
    22ac:	0f 90       	pop	r0
    22ae:	0f be       	out	0x3f, r0	; 63
    22b0:	80 e0       	ldi	r24, 0x00	; 0
    22b2:	72 c0       	rjmp	.+228    	; 0x2398 <xQueueGenericReceive+0x1da>
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	88 23       	and	r24, r24
    22b8:	31 f4       	brne	.+12     	; 0x22c6 <xQueueGenericReceive+0x108>
    22ba:	ce 01       	movw	r24, r28
    22bc:	07 96       	adiw	r24, 0x07	; 7
    22be:	0e 94 f5 18 	call	0x31ea	; 0x31ea <vTaskSetTimeOutState>
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	89 83       	std	Y+1, r24	; 0x01
    22c6:	0f 90       	pop	r0
    22c8:	0f be       	out	0x3f, r0	; 63
    22ca:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	0f 92       	push	r0
    22d4:	8a 81       	ldd	r24, Y+2	; 0x02
    22d6:	9b 81       	ldd	r25, Y+3	; 0x03
    22d8:	fc 01       	movw	r30, r24
    22da:	85 8d       	ldd	r24, Z+29	; 0x1d
    22dc:	8f 3f       	cpi	r24, 0xFF	; 255
    22de:	21 f4       	brne	.+8      	; 0x22e8 <xQueueGenericReceive+0x12a>
    22e0:	8a 81       	ldd	r24, Y+2	; 0x02
    22e2:	9b 81       	ldd	r25, Y+3	; 0x03
    22e4:	fc 01       	movw	r30, r24
    22e6:	15 8e       	std	Z+29, r1	; 0x1d
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	fc 01       	movw	r30, r24
    22ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    22f0:	8f 3f       	cpi	r24, 0xFF	; 255
    22f2:	21 f4       	brne	.+8      	; 0x22fc <xQueueGenericReceive+0x13e>
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	fc 01       	movw	r30, r24
    22fa:	16 8e       	std	Z+30, r1	; 0x1e
    22fc:	0f 90       	pop	r0
    22fe:	0f be       	out	0x3f, r0	; 63
    2300:	9e 01       	movw	r18, r28
    2302:	22 5f       	subi	r18, 0xF2	; 242
    2304:	3f 4f       	sbci	r19, 0xFF	; 255
    2306:	ce 01       	movw	r24, r28
    2308:	07 96       	adiw	r24, 0x07	; 7
    230a:	b9 01       	movw	r22, r18
    230c:	0e 94 10 19 	call	0x3220	; 0x3220 <xTaskCheckForTimeOut>
    2310:	88 23       	and	r24, r24
    2312:	99 f5       	brne	.+102    	; 0x237a <xQueueGenericReceive+0x1bc>
    2314:	8a 81       	ldd	r24, Y+2	; 0x02
    2316:	9b 81       	ldd	r25, Y+3	; 0x03
    2318:	0e 94 52 13 	call	0x26a4	; 0x26a4 <prvIsQueueEmpty>
    231c:	88 23       	and	r24, r24
    231e:	31 f1       	breq	.+76     	; 0x236c <xQueueGenericReceive+0x1ae>
    2320:	8a 81       	ldd	r24, Y+2	; 0x02
    2322:	9b 81       	ldd	r25, Y+3	; 0x03
    2324:	fc 01       	movw	r30, r24
    2326:	80 81       	ld	r24, Z
    2328:	91 81       	ldd	r25, Z+1	; 0x01
    232a:	89 2b       	or	r24, r25
    232c:	61 f4       	brne	.+24     	; 0x2346 <xQueueGenericReceive+0x188>
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	0f 92       	push	r0
    2334:	8a 81       	ldd	r24, Y+2	; 0x02
    2336:	9b 81       	ldd	r25, Y+3	; 0x03
    2338:	fc 01       	movw	r30, r24
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	0e 94 56 1a 	call	0x34ac	; 0x34ac <vTaskPriorityInherit>
    2342:	0f 90       	pop	r0
    2344:	0f be       	out	0x3f, r0	; 63
    2346:	2e 85       	ldd	r18, Y+14	; 0x0e
    2348:	3f 85       	ldd	r19, Y+15	; 0x0f
    234a:	8a 81       	ldd	r24, Y+2	; 0x02
    234c:	9b 81       	ldd	r25, Y+3	; 0x03
    234e:	41 96       	adiw	r24, 0x11	; 17
    2350:	b9 01       	movw	r22, r18
    2352:	0e 94 66 18 	call	0x30cc	; 0x30cc <vTaskPlaceOnEventList>
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    235e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    2362:	88 23       	and	r24, r24
    2364:	c1 f4       	brne	.+48     	; 0x2396 <xQueueGenericReceive+0x1d8>
    2366:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    236a:	15 c0       	rjmp	.+42     	; 0x2396 <xQueueGenericReceive+0x1d8>
    236c:	8a 81       	ldd	r24, Y+2	; 0x02
    236e:	9b 81       	ldd	r25, Y+3	; 0x03
    2370:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    2374:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    2378:	38 cf       	rjmp	.-400    	; 0x21ea <xQueueGenericReceive+0x2c>
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	0e 94 f5 12 	call	0x25ea	; 0x25ea <prvUnlockQueue>
    2382:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    2386:	8a 81       	ldd	r24, Y+2	; 0x02
    2388:	9b 81       	ldd	r25, Y+3	; 0x03
    238a:	0e 94 52 13 	call	0x26a4	; 0x26a4 <prvIsQueueEmpty>
    238e:	88 23       	and	r24, r24
    2390:	11 f0       	breq	.+4      	; 0x2396 <xQueueGenericReceive+0x1d8>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	01 c0       	rjmp	.+2      	; 0x2398 <xQueueGenericReceive+0x1da>
    2396:	29 cf       	rjmp	.-430    	; 0x21ea <xQueueGenericReceive+0x2c>
    2398:	60 96       	adiw	r28, 0x10	; 16
    239a:	0f b6       	in	r0, 0x3f	; 63
    239c:	f8 94       	cli
    239e:	de bf       	out	0x3e, r29	; 62
    23a0:	0f be       	out	0x3f, r0	; 63
    23a2:	cd bf       	out	0x3d, r28	; 61
    23a4:	df 91       	pop	r29
    23a6:	cf 91       	pop	r28
    23a8:	08 95       	ret

000023aa <prvCopyDataToQueue>:
    23aa:	cf 93       	push	r28
    23ac:	df 93       	push	r29
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	27 97       	sbiw	r28, 0x07	; 7
    23b4:	0f b6       	in	r0, 0x3f	; 63
    23b6:	f8 94       	cli
    23b8:	de bf       	out	0x3e, r29	; 62
    23ba:	0f be       	out	0x3f, r0	; 63
    23bc:	cd bf       	out	0x3d, r28	; 61
    23be:	9c 83       	std	Y+4, r25	; 0x04
    23c0:	8b 83       	std	Y+3, r24	; 0x03
    23c2:	7e 83       	std	Y+6, r23	; 0x06
    23c4:	6d 83       	std	Y+5, r22	; 0x05
    23c6:	4f 83       	std	Y+7, r20	; 0x07
    23c8:	19 82       	std	Y+1, r1	; 0x01
    23ca:	8b 81       	ldd	r24, Y+3	; 0x03
    23cc:	9c 81       	ldd	r25, Y+4	; 0x04
    23ce:	fc 01       	movw	r30, r24
    23d0:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d2:	8a 83       	std	Y+2, r24	; 0x02
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	fc 01       	movw	r30, r24
    23da:	84 8d       	ldd	r24, Z+28	; 0x1c
    23dc:	88 23       	and	r24, r24
    23de:	b1 f4       	brne	.+44     	; 0x240c <prvCopyDataToQueue+0x62>
    23e0:	8b 81       	ldd	r24, Y+3	; 0x03
    23e2:	9c 81       	ldd	r25, Y+4	; 0x04
    23e4:	fc 01       	movw	r30, r24
    23e6:	80 81       	ld	r24, Z
    23e8:	91 81       	ldd	r25, Z+1	; 0x01
    23ea:	89 2b       	or	r24, r25
    23ec:	09 f0       	breq	.+2      	; 0x23f0 <prvCopyDataToQueue+0x46>
    23ee:	9c c0       	rjmp	.+312    	; 0x2528 <prvCopyDataToQueue+0x17e>
    23f0:	8b 81       	ldd	r24, Y+3	; 0x03
    23f2:	9c 81       	ldd	r25, Y+4	; 0x04
    23f4:	fc 01       	movw	r30, r24
    23f6:	82 81       	ldd	r24, Z+2	; 0x02
    23f8:	93 81       	ldd	r25, Z+3	; 0x03
    23fa:	0e 94 ed 1a 	call	0x35da	; 0x35da <xTaskPriorityDisinherit>
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	fc 01       	movw	r30, r24
    2406:	13 82       	std	Z+3, r1	; 0x03
    2408:	12 82       	std	Z+2, r1	; 0x02
    240a:	8e c0       	rjmp	.+284    	; 0x2528 <prvCopyDataToQueue+0x17e>
    240c:	8f 81       	ldd	r24, Y+7	; 0x07
    240e:	88 23       	and	r24, r24
    2410:	d9 f5       	brne	.+118    	; 0x2488 <prvCopyDataToQueue+0xde>
    2412:	8b 81       	ldd	r24, Y+3	; 0x03
    2414:	9c 81       	ldd	r25, Y+4	; 0x04
    2416:	fc 01       	movw	r30, r24
    2418:	84 8d       	ldd	r24, Z+28	; 0x1c
    241a:	48 2f       	mov	r20, r24
    241c:	50 e0       	ldi	r21, 0x00	; 0
    241e:	8b 81       	ldd	r24, Y+3	; 0x03
    2420:	9c 81       	ldd	r25, Y+4	; 0x04
    2422:	fc 01       	movw	r30, r24
    2424:	84 81       	ldd	r24, Z+4	; 0x04
    2426:	95 81       	ldd	r25, Z+5	; 0x05
    2428:	2d 81       	ldd	r18, Y+5	; 0x05
    242a:	3e 81       	ldd	r19, Y+6	; 0x06
    242c:	b9 01       	movw	r22, r18
    242e:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <memcpy>
    2432:	8b 81       	ldd	r24, Y+3	; 0x03
    2434:	9c 81       	ldd	r25, Y+4	; 0x04
    2436:	fc 01       	movw	r30, r24
    2438:	24 81       	ldd	r18, Z+4	; 0x04
    243a:	35 81       	ldd	r19, Z+5	; 0x05
    243c:	8b 81       	ldd	r24, Y+3	; 0x03
    243e:	9c 81       	ldd	r25, Y+4	; 0x04
    2440:	fc 01       	movw	r30, r24
    2442:	84 8d       	ldd	r24, Z+28	; 0x1c
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	28 0f       	add	r18, r24
    244a:	39 1f       	adc	r19, r25
    244c:	8b 81       	ldd	r24, Y+3	; 0x03
    244e:	9c 81       	ldd	r25, Y+4	; 0x04
    2450:	fc 01       	movw	r30, r24
    2452:	35 83       	std	Z+5, r19	; 0x05
    2454:	24 83       	std	Z+4, r18	; 0x04
    2456:	8b 81       	ldd	r24, Y+3	; 0x03
    2458:	9c 81       	ldd	r25, Y+4	; 0x04
    245a:	fc 01       	movw	r30, r24
    245c:	24 81       	ldd	r18, Z+4	; 0x04
    245e:	35 81       	ldd	r19, Z+5	; 0x05
    2460:	8b 81       	ldd	r24, Y+3	; 0x03
    2462:	9c 81       	ldd	r25, Y+4	; 0x04
    2464:	fc 01       	movw	r30, r24
    2466:	82 81       	ldd	r24, Z+2	; 0x02
    2468:	93 81       	ldd	r25, Z+3	; 0x03
    246a:	28 17       	cp	r18, r24
    246c:	39 07       	cpc	r19, r25
    246e:	08 f4       	brcc	.+2      	; 0x2472 <prvCopyDataToQueue+0xc8>
    2470:	5b c0       	rjmp	.+182    	; 0x2528 <prvCopyDataToQueue+0x17e>
    2472:	8b 81       	ldd	r24, Y+3	; 0x03
    2474:	9c 81       	ldd	r25, Y+4	; 0x04
    2476:	fc 01       	movw	r30, r24
    2478:	20 81       	ld	r18, Z
    247a:	31 81       	ldd	r19, Z+1	; 0x01
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	fc 01       	movw	r30, r24
    2482:	35 83       	std	Z+5, r19	; 0x05
    2484:	24 83       	std	Z+4, r18	; 0x04
    2486:	50 c0       	rjmp	.+160    	; 0x2528 <prvCopyDataToQueue+0x17e>
    2488:	8b 81       	ldd	r24, Y+3	; 0x03
    248a:	9c 81       	ldd	r25, Y+4	; 0x04
    248c:	fc 01       	movw	r30, r24
    248e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2490:	48 2f       	mov	r20, r24
    2492:	50 e0       	ldi	r21, 0x00	; 0
    2494:	8b 81       	ldd	r24, Y+3	; 0x03
    2496:	9c 81       	ldd	r25, Y+4	; 0x04
    2498:	fc 01       	movw	r30, r24
    249a:	86 81       	ldd	r24, Z+6	; 0x06
    249c:	97 81       	ldd	r25, Z+7	; 0x07
    249e:	2d 81       	ldd	r18, Y+5	; 0x05
    24a0:	3e 81       	ldd	r19, Y+6	; 0x06
    24a2:	b9 01       	movw	r22, r18
    24a4:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <memcpy>
    24a8:	8b 81       	ldd	r24, Y+3	; 0x03
    24aa:	9c 81       	ldd	r25, Y+4	; 0x04
    24ac:	fc 01       	movw	r30, r24
    24ae:	26 81       	ldd	r18, Z+6	; 0x06
    24b0:	37 81       	ldd	r19, Z+7	; 0x07
    24b2:	8b 81       	ldd	r24, Y+3	; 0x03
    24b4:	9c 81       	ldd	r25, Y+4	; 0x04
    24b6:	fc 01       	movw	r30, r24
    24b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    24ba:	88 2f       	mov	r24, r24
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	91 95       	neg	r25
    24c0:	81 95       	neg	r24
    24c2:	91 09       	sbc	r25, r1
    24c4:	28 0f       	add	r18, r24
    24c6:	39 1f       	adc	r19, r25
    24c8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ca:	9c 81       	ldd	r25, Y+4	; 0x04
    24cc:	fc 01       	movw	r30, r24
    24ce:	37 83       	std	Z+7, r19	; 0x07
    24d0:	26 83       	std	Z+6, r18	; 0x06
    24d2:	8b 81       	ldd	r24, Y+3	; 0x03
    24d4:	9c 81       	ldd	r25, Y+4	; 0x04
    24d6:	fc 01       	movw	r30, r24
    24d8:	26 81       	ldd	r18, Z+6	; 0x06
    24da:	37 81       	ldd	r19, Z+7	; 0x07
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	9c 81       	ldd	r25, Y+4	; 0x04
    24e0:	fc 01       	movw	r30, r24
    24e2:	80 81       	ld	r24, Z
    24e4:	91 81       	ldd	r25, Z+1	; 0x01
    24e6:	28 17       	cp	r18, r24
    24e8:	39 07       	cpc	r19, r25
    24ea:	a8 f4       	brcc	.+42     	; 0x2516 <prvCopyDataToQueue+0x16c>
    24ec:	8b 81       	ldd	r24, Y+3	; 0x03
    24ee:	9c 81       	ldd	r25, Y+4	; 0x04
    24f0:	fc 01       	movw	r30, r24
    24f2:	22 81       	ldd	r18, Z+2	; 0x02
    24f4:	33 81       	ldd	r19, Z+3	; 0x03
    24f6:	8b 81       	ldd	r24, Y+3	; 0x03
    24f8:	9c 81       	ldd	r25, Y+4	; 0x04
    24fa:	fc 01       	movw	r30, r24
    24fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    24fe:	88 2f       	mov	r24, r24
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	91 95       	neg	r25
    2504:	81 95       	neg	r24
    2506:	91 09       	sbc	r25, r1
    2508:	28 0f       	add	r18, r24
    250a:	39 1f       	adc	r19, r25
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	fc 01       	movw	r30, r24
    2512:	37 83       	std	Z+7, r19	; 0x07
    2514:	26 83       	std	Z+6, r18	; 0x06
    2516:	8f 81       	ldd	r24, Y+7	; 0x07
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	31 f4       	brne	.+12     	; 0x2528 <prvCopyDataToQueue+0x17e>
    251c:	8a 81       	ldd	r24, Y+2	; 0x02
    251e:	88 23       	and	r24, r24
    2520:	19 f0       	breq	.+6      	; 0x2528 <prvCopyDataToQueue+0x17e>
    2522:	8a 81       	ldd	r24, Y+2	; 0x02
    2524:	81 50       	subi	r24, 0x01	; 1
    2526:	8a 83       	std	Y+2, r24	; 0x02
    2528:	8a 81       	ldd	r24, Y+2	; 0x02
    252a:	21 e0       	ldi	r18, 0x01	; 1
    252c:	28 0f       	add	r18, r24
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	fc 01       	movw	r30, r24
    2534:	22 8f       	std	Z+26, r18	; 0x1a
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	27 96       	adiw	r28, 0x07	; 7
    253a:	0f b6       	in	r0, 0x3f	; 63
    253c:	f8 94       	cli
    253e:	de bf       	out	0x3e, r29	; 62
    2540:	0f be       	out	0x3f, r0	; 63
    2542:	cd bf       	out	0x3d, r28	; 61
    2544:	df 91       	pop	r29
    2546:	cf 91       	pop	r28
    2548:	08 95       	ret

0000254a <prvCopyDataFromQueue>:
    254a:	cf 93       	push	r28
    254c:	df 93       	push	r29
    254e:	00 d0       	rcall	.+0      	; 0x2550 <prvCopyDataFromQueue+0x6>
    2550:	00 d0       	rcall	.+0      	; 0x2552 <prvCopyDataFromQueue+0x8>
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	9a 83       	std	Y+2, r25	; 0x02
    2558:	89 83       	std	Y+1, r24	; 0x01
    255a:	7c 83       	std	Y+4, r23	; 0x04
    255c:	6b 83       	std	Y+3, r22	; 0x03
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	9a 81       	ldd	r25, Y+2	; 0x02
    2562:	fc 01       	movw	r30, r24
    2564:	84 8d       	ldd	r24, Z+28	; 0x1c
    2566:	88 23       	and	r24, r24
    2568:	c9 f1       	breq	.+114    	; 0x25dc <prvCopyDataFromQueue+0x92>
    256a:	89 81       	ldd	r24, Y+1	; 0x01
    256c:	9a 81       	ldd	r25, Y+2	; 0x02
    256e:	fc 01       	movw	r30, r24
    2570:	26 81       	ldd	r18, Z+6	; 0x06
    2572:	37 81       	ldd	r19, Z+7	; 0x07
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	fc 01       	movw	r30, r24
    257a:	84 8d       	ldd	r24, Z+28	; 0x1c
    257c:	88 2f       	mov	r24, r24
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	28 0f       	add	r18, r24
    2582:	39 1f       	adc	r19, r25
    2584:	89 81       	ldd	r24, Y+1	; 0x01
    2586:	9a 81       	ldd	r25, Y+2	; 0x02
    2588:	fc 01       	movw	r30, r24
    258a:	37 83       	std	Z+7, r19	; 0x07
    258c:	26 83       	std	Z+6, r18	; 0x06
    258e:	89 81       	ldd	r24, Y+1	; 0x01
    2590:	9a 81       	ldd	r25, Y+2	; 0x02
    2592:	fc 01       	movw	r30, r24
    2594:	26 81       	ldd	r18, Z+6	; 0x06
    2596:	37 81       	ldd	r19, Z+7	; 0x07
    2598:	89 81       	ldd	r24, Y+1	; 0x01
    259a:	9a 81       	ldd	r25, Y+2	; 0x02
    259c:	fc 01       	movw	r30, r24
    259e:	82 81       	ldd	r24, Z+2	; 0x02
    25a0:	93 81       	ldd	r25, Z+3	; 0x03
    25a2:	28 17       	cp	r18, r24
    25a4:	39 07       	cpc	r19, r25
    25a6:	50 f0       	brcs	.+20     	; 0x25bc <prvCopyDataFromQueue+0x72>
    25a8:	89 81       	ldd	r24, Y+1	; 0x01
    25aa:	9a 81       	ldd	r25, Y+2	; 0x02
    25ac:	fc 01       	movw	r30, r24
    25ae:	20 81       	ld	r18, Z
    25b0:	31 81       	ldd	r19, Z+1	; 0x01
    25b2:	89 81       	ldd	r24, Y+1	; 0x01
    25b4:	9a 81       	ldd	r25, Y+2	; 0x02
    25b6:	fc 01       	movw	r30, r24
    25b8:	37 83       	std	Z+7, r19	; 0x07
    25ba:	26 83       	std	Z+6, r18	; 0x06
    25bc:	89 81       	ldd	r24, Y+1	; 0x01
    25be:	9a 81       	ldd	r25, Y+2	; 0x02
    25c0:	fc 01       	movw	r30, r24
    25c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    25c4:	48 2f       	mov	r20, r24
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	89 81       	ldd	r24, Y+1	; 0x01
    25ca:	9a 81       	ldd	r25, Y+2	; 0x02
    25cc:	fc 01       	movw	r30, r24
    25ce:	26 81       	ldd	r18, Z+6	; 0x06
    25d0:	37 81       	ldd	r19, Z+7	; 0x07
    25d2:	8b 81       	ldd	r24, Y+3	; 0x03
    25d4:	9c 81       	ldd	r25, Y+4	; 0x04
    25d6:	b9 01       	movw	r22, r18
    25d8:	0e 94 c4 1d 	call	0x3b88	; 0x3b88 <memcpy>
    25dc:	0f 90       	pop	r0
    25de:	0f 90       	pop	r0
    25e0:	0f 90       	pop	r0
    25e2:	0f 90       	pop	r0
    25e4:	df 91       	pop	r29
    25e6:	cf 91       	pop	r28
    25e8:	08 95       	ret

000025ea <prvUnlockQueue>:
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	00 d0       	rcall	.+0      	; 0x25f0 <prvUnlockQueue+0x6>
    25f0:	00 d0       	rcall	.+0      	; 0x25f2 <prvUnlockQueue+0x8>
    25f2:	cd b7       	in	r28, 0x3d	; 61
    25f4:	de b7       	in	r29, 0x3e	; 62
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
    25fa:	0f b6       	in	r0, 0x3f	; 63
    25fc:	f8 94       	cli
    25fe:	0f 92       	push	r0
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	9c 81       	ldd	r25, Y+4	; 0x04
    2604:	fc 01       	movw	r30, r24
    2606:	86 8d       	ldd	r24, Z+30	; 0x1e
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	14 c0       	rjmp	.+40     	; 0x2634 <prvUnlockQueue+0x4a>
    260c:	8b 81       	ldd	r24, Y+3	; 0x03
    260e:	9c 81       	ldd	r25, Y+4	; 0x04
    2610:	fc 01       	movw	r30, r24
    2612:	81 89       	ldd	r24, Z+17	; 0x11
    2614:	88 23       	and	r24, r24
    2616:	51 f0       	breq	.+20     	; 0x262c <prvUnlockQueue+0x42>
    2618:	8b 81       	ldd	r24, Y+3	; 0x03
    261a:	9c 81       	ldd	r25, Y+4	; 0x04
    261c:	41 96       	adiw	r24, 0x11	; 17
    261e:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    2622:	88 23       	and	r24, r24
    2624:	21 f0       	breq	.+8      	; 0x262e <prvUnlockQueue+0x44>
    2626:	0e 94 78 19 	call	0x32f0	; 0x32f0 <vTaskMissedYield>
    262a:	01 c0       	rjmp	.+2      	; 0x262e <prvUnlockQueue+0x44>
    262c:	06 c0       	rjmp	.+12     	; 0x263a <prvUnlockQueue+0x50>
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	81 50       	subi	r24, 0x01	; 1
    2632:	89 83       	std	Y+1, r24	; 0x01
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	18 16       	cp	r1, r24
    2638:	4c f3       	brlt	.-46     	; 0x260c <prvUnlockQueue+0x22>
    263a:	8b 81       	ldd	r24, Y+3	; 0x03
    263c:	9c 81       	ldd	r25, Y+4	; 0x04
    263e:	2f ef       	ldi	r18, 0xFF	; 255
    2640:	fc 01       	movw	r30, r24
    2642:	26 8f       	std	Z+30, r18	; 0x1e
    2644:	0f 90       	pop	r0
    2646:	0f be       	out	0x3f, r0	; 63
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	0f 92       	push	r0
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	fc 01       	movw	r30, r24
    2654:	85 8d       	ldd	r24, Z+29	; 0x1d
    2656:	8a 83       	std	Y+2, r24	; 0x02
    2658:	14 c0       	rjmp	.+40     	; 0x2682 <prvUnlockQueue+0x98>
    265a:	8b 81       	ldd	r24, Y+3	; 0x03
    265c:	9c 81       	ldd	r25, Y+4	; 0x04
    265e:	fc 01       	movw	r30, r24
    2660:	80 85       	ldd	r24, Z+8	; 0x08
    2662:	88 23       	and	r24, r24
    2664:	69 f0       	breq	.+26     	; 0x2680 <prvUnlockQueue+0x96>
    2666:	8b 81       	ldd	r24, Y+3	; 0x03
    2668:	9c 81       	ldd	r25, Y+4	; 0x04
    266a:	08 96       	adiw	r24, 0x08	; 8
    266c:	0e 94 88 18 	call	0x3110	; 0x3110 <xTaskRemoveFromEventList>
    2670:	88 23       	and	r24, r24
    2672:	11 f0       	breq	.+4      	; 0x2678 <prvUnlockQueue+0x8e>
    2674:	0e 94 78 19 	call	0x32f0	; 0x32f0 <vTaskMissedYield>
    2678:	8a 81       	ldd	r24, Y+2	; 0x02
    267a:	81 50       	subi	r24, 0x01	; 1
    267c:	8a 83       	std	Y+2, r24	; 0x02
    267e:	01 c0       	rjmp	.+2      	; 0x2682 <prvUnlockQueue+0x98>
    2680:	03 c0       	rjmp	.+6      	; 0x2688 <prvUnlockQueue+0x9e>
    2682:	8a 81       	ldd	r24, Y+2	; 0x02
    2684:	18 16       	cp	r1, r24
    2686:	4c f3       	brlt	.-46     	; 0x265a <prvUnlockQueue+0x70>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	2f ef       	ldi	r18, 0xFF	; 255
    268e:	fc 01       	movw	r30, r24
    2690:	25 8f       	std	Z+29, r18	; 0x1d
    2692:	0f 90       	pop	r0
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	0f 90       	pop	r0
    2698:	0f 90       	pop	r0
    269a:	0f 90       	pop	r0
    269c:	0f 90       	pop	r0
    269e:	df 91       	pop	r29
    26a0:	cf 91       	pop	r28
    26a2:	08 95       	ret

000026a4 <prvIsQueueEmpty>:
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	00 d0       	rcall	.+0      	; 0x26aa <prvIsQueueEmpty+0x6>
    26aa:	1f 92       	push	r1
    26ac:	cd b7       	in	r28, 0x3d	; 61
    26ae:	de b7       	in	r29, 0x3e	; 62
    26b0:	9b 83       	std	Y+3, r25	; 0x03
    26b2:	8a 83       	std	Y+2, r24	; 0x02
    26b4:	0f b6       	in	r0, 0x3f	; 63
    26b6:	f8 94       	cli
    26b8:	0f 92       	push	r0
    26ba:	8a 81       	ldd	r24, Y+2	; 0x02
    26bc:	9b 81       	ldd	r25, Y+3	; 0x03
    26be:	fc 01       	movw	r30, r24
    26c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    26c2:	88 23       	and	r24, r24
    26c4:	19 f4       	brne	.+6      	; 0x26cc <prvIsQueueEmpty+0x28>
    26c6:	81 e0       	ldi	r24, 0x01	; 1
    26c8:	89 83       	std	Y+1, r24	; 0x01
    26ca:	01 c0       	rjmp	.+2      	; 0x26ce <prvIsQueueEmpty+0x2a>
    26cc:	19 82       	std	Y+1, r1	; 0x01
    26ce:	0f 90       	pop	r0
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	0f 90       	pop	r0
    26d6:	0f 90       	pop	r0
    26d8:	0f 90       	pop	r0
    26da:	df 91       	pop	r29
    26dc:	cf 91       	pop	r28
    26de:	08 95       	ret

000026e0 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    26e0:	cf 93       	push	r28
    26e2:	df 93       	push	r29
    26e4:	00 d0       	rcall	.+0      	; 0x26e6 <prvIsQueueFull+0x6>
    26e6:	1f 92       	push	r1
    26e8:	cd b7       	in	r28, 0x3d	; 61
    26ea:	de b7       	in	r29, 0x3e	; 62
    26ec:	9b 83       	std	Y+3, r25	; 0x03
    26ee:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    26f0:	0f b6       	in	r0, 0x3f	; 63
    26f2:	f8 94       	cli
    26f4:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    26f6:	8a 81       	ldd	r24, Y+2	; 0x02
    26f8:	9b 81       	ldd	r25, Y+3	; 0x03
    26fa:	fc 01       	movw	r30, r24
    26fc:	22 8d       	ldd	r18, Z+26	; 0x1a
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	fc 01       	movw	r30, r24
    2704:	83 8d       	ldd	r24, Z+27	; 0x1b
    2706:	28 17       	cp	r18, r24
    2708:	19 f4       	brne	.+6      	; 0x2710 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    270a:	81 e0       	ldi	r24, 0x01	; 1
    270c:	89 83       	std	Y+1, r24	; 0x01
    270e:	01 c0       	rjmp	.+2      	; 0x2712 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2710:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2712:	0f 90       	pop	r0
    2714:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2716:	89 81       	ldd	r24, Y+1	; 0x01
}
    2718:	0f 90       	pop	r0
    271a:	0f 90       	pop	r0
    271c:	0f 90       	pop	r0
    271e:	df 91       	pop	r29
    2720:	cf 91       	pop	r28
    2722:	08 95       	ret

00002724 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2724:	8f 92       	push	r8
    2726:	9f 92       	push	r9
    2728:	af 92       	push	r10
    272a:	bf 92       	push	r11
    272c:	cf 92       	push	r12
    272e:	df 92       	push	r13
    2730:	ef 92       	push	r14
    2732:	ff 92       	push	r15
    2734:	0f 93       	push	r16
    2736:	1f 93       	push	r17
    2738:	cf 93       	push	r28
    273a:	df 93       	push	r29
    273c:	cd b7       	in	r28, 0x3d	; 61
    273e:	de b7       	in	r29, 0x3e	; 62
    2740:	60 97       	sbiw	r28, 0x10	; 16
    2742:	0f b6       	in	r0, 0x3f	; 63
    2744:	f8 94       	cli
    2746:	de bf       	out	0x3e, r29	; 62
    2748:	0f be       	out	0x3f, r0	; 63
    274a:	cd bf       	out	0x3d, r28	; 61
    274c:	9f 83       	std	Y+7, r25	; 0x07
    274e:	8e 83       	std	Y+6, r24	; 0x06
    2750:	79 87       	std	Y+9, r23	; 0x09
    2752:	68 87       	std	Y+8, r22	; 0x08
    2754:	5b 87       	std	Y+11, r21	; 0x0b
    2756:	4a 87       	std	Y+10, r20	; 0x0a
    2758:	3d 87       	std	Y+13, r19	; 0x0d
    275a:	2c 87       	std	Y+12, r18	; 0x0c
    275c:	0e 87       	std	Y+14, r16	; 0x0e
    275e:	f8 8a       	std	Y+16, r15	; 0x10
    2760:	ef 86       	std	Y+15, r14	; 0x0f
    2762:	8a 85       	ldd	r24, Y+10	; 0x0a
    2764:	9b 85       	ldd	r25, Y+11	; 0x0b
    2766:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pvPortMalloc>
    276a:	9d 83       	std	Y+5, r25	; 0x05
    276c:	8c 83       	std	Y+4, r24	; 0x04
    276e:	8c 81       	ldd	r24, Y+4	; 0x04
    2770:	9d 81       	ldd	r25, Y+5	; 0x05
    2772:	89 2b       	or	r24, r25
    2774:	b9 f0       	breq	.+46     	; 0x27a4 <xTaskCreate+0x80>
    2776:	8c e2       	ldi	r24, 0x2C	; 44
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <pvPortMalloc>
    277e:	9a 83       	std	Y+2, r25	; 0x02
    2780:	89 83       	std	Y+1, r24	; 0x01
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	9a 81       	ldd	r25, Y+2	; 0x02
    2786:	89 2b       	or	r24, r25
    2788:	41 f0       	breq	.+16     	; 0x279a <xTaskCreate+0x76>
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	9a 81       	ldd	r25, Y+2	; 0x02
    278e:	2c 81       	ldd	r18, Y+4	; 0x04
    2790:	3d 81       	ldd	r19, Y+5	; 0x05
    2792:	fc 01       	movw	r30, r24
    2794:	30 8f       	std	Z+24, r19	; 0x18
    2796:	27 8b       	std	Z+23, r18	; 0x17
    2798:	07 c0       	rjmp	.+14     	; 0x27a8 <xTaskCreate+0x84>
    279a:	8c 81       	ldd	r24, Y+4	; 0x04
    279c:	9d 81       	ldd	r25, Y+5	; 0x05
    279e:	0e 94 bb 0b 	call	0x1776	; 0x1776 <vPortFree>
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <xTaskCreate+0x84>
    27a4:	1a 82       	std	Y+2, r1	; 0x02
    27a6:	19 82       	std	Y+1, r1	; 0x01
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	9a 81       	ldd	r25, Y+2	; 0x02
    27ac:	89 2b       	or	r24, r25
    27ae:	09 f1       	breq	.+66     	; 0x27f2 <xTaskCreate+0xce>
    27b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    27b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    27b4:	cc 01       	movw	r24, r24
    27b6:	a0 e0       	ldi	r26, 0x00	; 0
    27b8:	b0 e0       	ldi	r27, 0x00	; 0
    27ba:	09 81       	ldd	r16, Y+1	; 0x01
    27bc:	1a 81       	ldd	r17, Y+2	; 0x02
    27be:	4f 85       	ldd	r20, Y+15	; 0x0f
    27c0:	58 89       	ldd	r21, Y+16	; 0x10
    27c2:	2c 85       	ldd	r18, Y+12	; 0x0c
    27c4:	3d 85       	ldd	r19, Y+13	; 0x0d
    27c6:	68 85       	ldd	r22, Y+8	; 0x08
    27c8:	79 85       	ldd	r23, Y+9	; 0x09
    27ca:	ee 81       	ldd	r30, Y+6	; 0x06
    27cc:	ff 81       	ldd	r31, Y+7	; 0x07
    27ce:	81 2c       	mov	r8, r1
    27d0:	91 2c       	mov	r9, r1
    27d2:	58 01       	movw	r10, r16
    27d4:	6a 01       	movw	r12, r20
    27d6:	ee 84       	ldd	r14, Y+14	; 0x0e
    27d8:	89 01       	movw	r16, r18
    27da:	9c 01       	movw	r18, r24
    27dc:	ad 01       	movw	r20, r26
    27de:	cf 01       	movw	r24, r30
    27e0:	0e 94 0f 14 	call	0x281e	; 0x281e <prvInitialiseNewTask>
    27e4:	89 81       	ldd	r24, Y+1	; 0x01
    27e6:	9a 81       	ldd	r25, Y+2	; 0x02
    27e8:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <prvAddNewTaskToReadyList>
    27ec:	81 e0       	ldi	r24, 0x01	; 1
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    27f0:	02 c0       	rjmp	.+4      	; 0x27f6 <xTaskCreate+0xd2>
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	8b 83       	std	Y+3, r24	; 0x03
    27f6:	8b 81       	ldd	r24, Y+3	; 0x03
    27f8:	60 96       	adiw	r28, 0x10	; 16
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	de bf       	out	0x3e, r29	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	cd bf       	out	0x3d, r28	; 61
    2804:	df 91       	pop	r29
    2806:	cf 91       	pop	r28
    2808:	1f 91       	pop	r17
    280a:	0f 91       	pop	r16
    280c:	ff 90       	pop	r15
    280e:	ef 90       	pop	r14
    2810:	df 90       	pop	r13
    2812:	cf 90       	pop	r12
    2814:	bf 90       	pop	r11
    2816:	af 90       	pop	r10
    2818:	9f 90       	pop	r9
    281a:	8f 90       	pop	r8
    281c:	08 95       	ret

0000281e <prvInitialiseNewTask>:
    281e:	8f 92       	push	r8
    2820:	9f 92       	push	r9
    2822:	af 92       	push	r10
    2824:	bf 92       	push	r11
    2826:	cf 92       	push	r12
    2828:	df 92       	push	r13
    282a:	ef 92       	push	r14
    282c:	0f 93       	push	r16
    282e:	1f 93       	push	r17
    2830:	cf 93       	push	r28
    2832:	df 93       	push	r29
    2834:	cd b7       	in	r28, 0x3d	; 61
    2836:	de b7       	in	r29, 0x3e	; 62
    2838:	64 97       	sbiw	r28, 0x14	; 20
    283a:	0f b6       	in	r0, 0x3f	; 63
    283c:	f8 94       	cli
    283e:	de bf       	out	0x3e, r29	; 62
    2840:	0f be       	out	0x3f, r0	; 63
    2842:	cd bf       	out	0x3d, r28	; 61
    2844:	9d 83       	std	Y+5, r25	; 0x05
    2846:	8c 83       	std	Y+4, r24	; 0x04
    2848:	7f 83       	std	Y+7, r23	; 0x07
    284a:	6e 83       	std	Y+6, r22	; 0x06
    284c:	28 87       	std	Y+8, r18	; 0x08
    284e:	39 87       	std	Y+9, r19	; 0x09
    2850:	4a 87       	std	Y+10, r20	; 0x0a
    2852:	5b 87       	std	Y+11, r21	; 0x0b
    2854:	1d 87       	std	Y+13, r17	; 0x0d
    2856:	0c 87       	std	Y+12, r16	; 0x0c
    2858:	ee 86       	std	Y+14, r14	; 0x0e
    285a:	d8 8a       	std	Y+16, r13	; 0x10
    285c:	cf 86       	std	Y+15, r12	; 0x0f
    285e:	ba 8a       	std	Y+18, r11	; 0x12
    2860:	a9 8a       	std	Y+17, r10	; 0x11
    2862:	9c 8a       	std	Y+20, r9	; 0x14
    2864:	8b 8a       	std	Y+19, r8	; 0x13
    2866:	28 85       	ldd	r18, Y+8	; 0x08
    2868:	39 85       	ldd	r19, Y+9	; 0x09
    286a:	89 89       	ldd	r24, Y+17	; 0x11
    286c:	9a 89       	ldd	r25, Y+18	; 0x12
    286e:	fc 01       	movw	r30, r24
    2870:	87 89       	ldd	r24, Z+23	; 0x17
    2872:	90 8d       	ldd	r25, Z+24	; 0x18
    2874:	a9 01       	movw	r20, r18
    2876:	65 ea       	ldi	r22, 0xA5	; 165
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	0e 94 cd 1d 	call	0x3b9a	; 0x3b9a <memset>
    287e:	89 89       	ldd	r24, Y+17	; 0x11
    2880:	9a 89       	ldd	r25, Y+18	; 0x12
    2882:	fc 01       	movw	r30, r24
    2884:	27 89       	ldd	r18, Z+23	; 0x17
    2886:	30 8d       	ldd	r19, Z+24	; 0x18
    2888:	88 85       	ldd	r24, Y+8	; 0x08
    288a:	99 85       	ldd	r25, Y+9	; 0x09
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	82 0f       	add	r24, r18
    2890:	93 1f       	adc	r25, r19
    2892:	9b 83       	std	Y+3, r25	; 0x03
    2894:	8a 83       	std	Y+2, r24	; 0x02
    2896:	19 82       	std	Y+1, r1	; 0x01
    2898:	22 c0       	rjmp	.+68     	; 0x28de <prvInitialiseNewTask+0xc0>
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	88 2f       	mov	r24, r24
    289e:	90 e0       	ldi	r25, 0x00	; 0
    28a0:	29 81       	ldd	r18, Y+1	; 0x01
    28a2:	22 2f       	mov	r18, r18
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	4e 81       	ldd	r20, Y+6	; 0x06
    28a8:	5f 81       	ldd	r21, Y+7	; 0x07
    28aa:	24 0f       	add	r18, r20
    28ac:	35 1f       	adc	r19, r21
    28ae:	f9 01       	movw	r30, r18
    28b0:	40 81       	ld	r20, Z
    28b2:	29 89       	ldd	r18, Y+17	; 0x11
    28b4:	3a 89       	ldd	r19, Y+18	; 0x12
    28b6:	82 0f       	add	r24, r18
    28b8:	93 1f       	adc	r25, r19
    28ba:	49 96       	adiw	r24, 0x19	; 25
    28bc:	fc 01       	movw	r30, r24
    28be:	40 83       	st	Z, r20
    28c0:	89 81       	ldd	r24, Y+1	; 0x01
    28c2:	88 2f       	mov	r24, r24
    28c4:	90 e0       	ldi	r25, 0x00	; 0
    28c6:	2e 81       	ldd	r18, Y+6	; 0x06
    28c8:	3f 81       	ldd	r19, Y+7	; 0x07
    28ca:	82 0f       	add	r24, r18
    28cc:	93 1f       	adc	r25, r19
    28ce:	fc 01       	movw	r30, r24
    28d0:	80 81       	ld	r24, Z
    28d2:	88 23       	and	r24, r24
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <prvInitialiseNewTask+0xba>
    28d6:	06 c0       	rjmp	.+12     	; 0x28e4 <prvInitialiseNewTask+0xc6>
    28d8:	89 81       	ldd	r24, Y+1	; 0x01
    28da:	8f 5f       	subi	r24, 0xFF	; 255
    28dc:	89 83       	std	Y+1, r24	; 0x01
    28de:	89 81       	ldd	r24, Y+1	; 0x01
    28e0:	88 30       	cpi	r24, 0x08	; 8
    28e2:	d8 f2       	brcs	.-74     	; 0x289a <prvInitialiseNewTask+0x7c>
    28e4:	89 89       	ldd	r24, Y+17	; 0x11
    28e6:	9a 89       	ldd	r25, Y+18	; 0x12
    28e8:	fc 01       	movw	r30, r24
    28ea:	10 a2       	std	Z+32, r1	; 0x20
    28ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    28ee:	84 30       	cpi	r24, 0x04	; 4
    28f0:	10 f0       	brcs	.+4      	; 0x28f6 <prvInitialiseNewTask+0xd8>
    28f2:	83 e0       	ldi	r24, 0x03	; 3
    28f4:	8e 87       	std	Y+14, r24	; 0x0e
    28f6:	89 89       	ldd	r24, Y+17	; 0x11
    28f8:	9a 89       	ldd	r25, Y+18	; 0x12
    28fa:	2e 85       	ldd	r18, Y+14	; 0x0e
    28fc:	fc 01       	movw	r30, r24
    28fe:	26 8b       	std	Z+22, r18	; 0x16
    2900:	89 89       	ldd	r24, Y+17	; 0x11
    2902:	9a 89       	ldd	r25, Y+18	; 0x12
    2904:	2e 85       	ldd	r18, Y+14	; 0x0e
    2906:	fc 01       	movw	r30, r24
    2908:	23 a3       	std	Z+35, r18	; 0x23
    290a:	89 89       	ldd	r24, Y+17	; 0x11
    290c:	9a 89       	ldd	r25, Y+18	; 0x12
    290e:	fc 01       	movw	r30, r24
    2910:	14 a2       	std	Z+36, r1	; 0x24
    2912:	89 89       	ldd	r24, Y+17	; 0x11
    2914:	9a 89       	ldd	r25, Y+18	; 0x12
    2916:	02 96       	adiw	r24, 0x02	; 2
    2918:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInitialiseItem>
    291c:	89 89       	ldd	r24, Y+17	; 0x11
    291e:	9a 89       	ldd	r25, Y+18	; 0x12
    2920:	0c 96       	adiw	r24, 0x0c	; 12
    2922:	0e 94 41 07 	call	0xe82	; 0xe82 <vListInitialiseItem>
    2926:	89 89       	ldd	r24, Y+17	; 0x11
    2928:	9a 89       	ldd	r25, Y+18	; 0x12
    292a:	29 89       	ldd	r18, Y+17	; 0x11
    292c:	3a 89       	ldd	r19, Y+18	; 0x12
    292e:	fc 01       	movw	r30, r24
    2930:	31 87       	std	Z+9, r19	; 0x09
    2932:	20 87       	std	Z+8, r18	; 0x08
    2934:	8e 85       	ldd	r24, Y+14	; 0x0e
    2936:	88 2f       	mov	r24, r24
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	24 e0       	ldi	r18, 0x04	; 4
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	28 1b       	sub	r18, r24
    2940:	39 0b       	sbc	r19, r25
    2942:	89 89       	ldd	r24, Y+17	; 0x11
    2944:	9a 89       	ldd	r25, Y+18	; 0x12
    2946:	fc 01       	movw	r30, r24
    2948:	35 87       	std	Z+13, r19	; 0x0d
    294a:	24 87       	std	Z+12, r18	; 0x0c
    294c:	89 89       	ldd	r24, Y+17	; 0x11
    294e:	9a 89       	ldd	r25, Y+18	; 0x12
    2950:	29 89       	ldd	r18, Y+17	; 0x11
    2952:	3a 89       	ldd	r19, Y+18	; 0x12
    2954:	fc 01       	movw	r30, r24
    2956:	33 8b       	std	Z+19, r19	; 0x13
    2958:	22 8b       	std	Z+18, r18	; 0x12
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	9a 89       	ldd	r25, Y+18	; 0x12
    295e:	fc 01       	movw	r30, r24
    2960:	16 a2       	std	Z+38, r1	; 0x26
    2962:	15 a2       	std	Z+37, r1	; 0x25
    2964:	89 89       	ldd	r24, Y+17	; 0x11
    2966:	9a 89       	ldd	r25, Y+18	; 0x12
    2968:	fc 01       	movw	r30, r24
    296a:	17 a2       	std	Z+39, r1	; 0x27
    296c:	10 a6       	std	Z+40, r1	; 0x28
    296e:	11 a6       	std	Z+41, r1	; 0x29
    2970:	12 a6       	std	Z+42, r1	; 0x2a
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	9a 89       	ldd	r25, Y+18	; 0x12
    2976:	fc 01       	movw	r30, r24
    2978:	13 a6       	std	Z+43, r1	; 0x2b
    297a:	4c 85       	ldd	r20, Y+12	; 0x0c
    297c:	5d 85       	ldd	r21, Y+13	; 0x0d
    297e:	2c 81       	ldd	r18, Y+4	; 0x04
    2980:	3d 81       	ldd	r19, Y+5	; 0x05
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	9b 81       	ldd	r25, Y+3	; 0x03
    2986:	b9 01       	movw	r22, r18
    2988:	0e 94 6e 08 	call	0x10dc	; 0x10dc <pxPortInitialiseStack>
    298c:	9c 01       	movw	r18, r24
    298e:	89 89       	ldd	r24, Y+17	; 0x11
    2990:	9a 89       	ldd	r25, Y+18	; 0x12
    2992:	fc 01       	movw	r30, r24
    2994:	31 83       	std	Z+1, r19	; 0x01
    2996:	20 83       	st	Z, r18
    2998:	8f 85       	ldd	r24, Y+15	; 0x0f
    299a:	98 89       	ldd	r25, Y+16	; 0x10
    299c:	89 2b       	or	r24, r25
    299e:	39 f0       	breq	.+14     	; 0x29ae <prvInitialiseNewTask+0x190>
    29a0:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a2:	98 89       	ldd	r25, Y+16	; 0x10
    29a4:	29 89       	ldd	r18, Y+17	; 0x11
    29a6:	3a 89       	ldd	r19, Y+18	; 0x12
    29a8:	fc 01       	movw	r30, r24
    29aa:	31 83       	std	Z+1, r19	; 0x01
    29ac:	20 83       	st	Z, r18
    29ae:	64 96       	adiw	r28, 0x14	; 20
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ef 90       	pop	r14
    29c4:	df 90       	pop	r13
    29c6:	cf 90       	pop	r12
    29c8:	bf 90       	pop	r11
    29ca:	af 90       	pop	r10
    29cc:	9f 90       	pop	r9
    29ce:	8f 90       	pop	r8
    29d0:	08 95       	ret

000029d2 <prvAddNewTaskToReadyList>:
    29d2:	cf 93       	push	r28
    29d4:	df 93       	push	r29
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <prvAddNewTaskToReadyList+0x6>
    29d8:	cd b7       	in	r28, 0x3d	; 61
    29da:	de b7       	in	r29, 0x3e	; 62
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	0f 92       	push	r0
    29e6:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxCurrentNumberOfTasks>
    29ea:	8f 5f       	subi	r24, 0xFF	; 255
    29ec:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <uxCurrentNumberOfTasks>
    29f0:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    29f4:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    29f8:	89 2b       	or	r24, r25
    29fa:	69 f4       	brne	.+26     	; 0x2a16 <prvAddNewTaskToReadyList+0x44>
    29fc:	89 81       	ldd	r24, Y+1	; 0x01
    29fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2a00:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxCurrentTCB+0x1>
    2a04:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxCurrentTCB>
    2a08:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxCurrentNumberOfTasks>
    2a0c:	81 30       	cpi	r24, 0x01	; 1
    2a0e:	c9 f4       	brne	.+50     	; 0x2a42 <prvAddNewTaskToReadyList+0x70>
    2a10:	0e 94 94 19 	call	0x3328	; 0x3328 <prvInitialiseTaskLists>
    2a14:	16 c0       	rjmp	.+44     	; 0x2a42 <prvAddNewTaskToReadyList+0x70>
    2a16:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xSchedulerRunning>
    2a1a:	88 23       	and	r24, r24
    2a1c:	91 f4       	brne	.+36     	; 0x2a42 <prvAddNewTaskToReadyList+0x70>
    2a1e:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2a22:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2a26:	fc 01       	movw	r30, r24
    2a28:	26 89       	ldd	r18, Z+22	; 0x16
    2a2a:	89 81       	ldd	r24, Y+1	; 0x01
    2a2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a2e:	fc 01       	movw	r30, r24
    2a30:	86 89       	ldd	r24, Z+22	; 0x16
    2a32:	82 17       	cp	r24, r18
    2a34:	30 f0       	brcs	.+12     	; 0x2a42 <prvAddNewTaskToReadyList+0x70>
    2a36:	89 81       	ldd	r24, Y+1	; 0x01
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxCurrentTCB+0x1>
    2a3e:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxCurrentTCB>
    2a42:	80 91 bd 07 	lds	r24, 0x07BD	; 0x8007bd <uxTaskNumber>
    2a46:	8f 5f       	subi	r24, 0xFF	; 255
    2a48:	80 93 bd 07 	sts	0x07BD, r24	; 0x8007bd <uxTaskNumber>
    2a4c:	20 91 bd 07 	lds	r18, 0x07BD	; 0x8007bd <uxTaskNumber>
    2a50:	89 81       	ldd	r24, Y+1	; 0x01
    2a52:	9a 81       	ldd	r25, Y+2	; 0x02
    2a54:	fc 01       	movw	r30, r24
    2a56:	21 a3       	std	Z+33, r18	; 0x21
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5c:	fc 01       	movw	r30, r24
    2a5e:	96 89       	ldd	r25, Z+22	; 0x16
    2a60:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    2a64:	89 17       	cp	r24, r25
    2a66:	30 f4       	brcc	.+12     	; 0x2a74 <prvAddNewTaskToReadyList+0xa2>
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	86 89       	ldd	r24, Z+22	; 0x16
    2a70:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	9a 81       	ldd	r25, Y+2	; 0x02
    2a78:	ac 01       	movw	r20, r24
    2a7a:	4e 5f       	subi	r20, 0xFE	; 254
    2a7c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	fc 01       	movw	r30, r24
    2a84:	86 89       	ldd	r24, Z+22	; 0x16
    2a86:	28 2f       	mov	r18, r24
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	c9 01       	movw	r24, r18
    2a8c:	88 0f       	add	r24, r24
    2a8e:	99 1f       	adc	r25, r25
    2a90:	88 0f       	add	r24, r24
    2a92:	99 1f       	adc	r25, r25
    2a94:	88 0f       	add	r24, r24
    2a96:	99 1f       	adc	r25, r25
    2a98:	82 0f       	add	r24, r18
    2a9a:	93 1f       	adc	r25, r19
    2a9c:	88 59       	subi	r24, 0x98	; 152
    2a9e:	98 4f       	sbci	r25, 0xF8	; 248
    2aa0:	ba 01       	movw	r22, r20
    2aa2:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    2aa6:	0f 90       	pop	r0
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	80 91 b9 07 	lds	r24, 0x07B9	; 0x8007b9 <xSchedulerRunning>
    2aae:	88 23       	and	r24, r24
    2ab0:	71 f0       	breq	.+28     	; 0x2ace <prvAddNewTaskToReadyList+0xfc>
    2ab2:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2ab6:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2aba:	fc 01       	movw	r30, r24
    2abc:	26 89       	ldd	r18, Z+22	; 0x16
    2abe:	89 81       	ldd	r24, Y+1	; 0x01
    2ac0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	86 89       	ldd	r24, Z+22	; 0x16
    2ac6:	28 17       	cp	r18, r24
    2ac8:	10 f4       	brcc	.+4      	; 0x2ace <prvAddNewTaskToReadyList+0xfc>
    2aca:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2ace:	0f 90       	pop	r0
    2ad0:	0f 90       	pop	r0
    2ad2:	df 91       	pop	r29
    2ad4:	cf 91       	pop	r28
    2ad6:	08 95       	ret

00002ad8 <vTaskDelayUntil>:
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	cd b7       	in	r28, 0x3d	; 61
    2ade:	de b7       	in	r29, 0x3e	; 62
    2ae0:	2a 97       	sbiw	r28, 0x0a	; 10
    2ae2:	0f b6       	in	r0, 0x3f	; 63
    2ae4:	f8 94       	cli
    2ae6:	de bf       	out	0x3e, r29	; 62
    2ae8:	0f be       	out	0x3f, r0	; 63
    2aea:	cd bf       	out	0x3d, r28	; 61
    2aec:	98 87       	std	Y+8, r25	; 0x08
    2aee:	8f 83       	std	Y+7, r24	; 0x07
    2af0:	7a 87       	std	Y+10, r23	; 0x0a
    2af2:	69 87       	std	Y+9, r22	; 0x09
    2af4:	19 82       	std	Y+1, r1	; 0x01
    2af6:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
    2afa:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xTickCount>
    2afe:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    2b02:	9b 83       	std	Y+3, r25	; 0x03
    2b04:	8a 83       	std	Y+2, r24	; 0x02
    2b06:	8f 81       	ldd	r24, Y+7	; 0x07
    2b08:	98 85       	ldd	r25, Y+8	; 0x08
    2b0a:	fc 01       	movw	r30, r24
    2b0c:	20 81       	ld	r18, Z
    2b0e:	31 81       	ldd	r19, Z+1	; 0x01
    2b10:	89 85       	ldd	r24, Y+9	; 0x09
    2b12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b14:	82 0f       	add	r24, r18
    2b16:	93 1f       	adc	r25, r19
    2b18:	9d 83       	std	Y+5, r25	; 0x05
    2b1a:	8c 83       	std	Y+4, r24	; 0x04
    2b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b1e:	98 85       	ldd	r25, Y+8	; 0x08
    2b20:	fc 01       	movw	r30, r24
    2b22:	20 81       	ld	r18, Z
    2b24:	31 81       	ldd	r19, Z+1	; 0x01
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	82 17       	cp	r24, r18
    2b2c:	93 07       	cpc	r25, r19
    2b2e:	a0 f4       	brcc	.+40     	; 0x2b58 <vTaskDelayUntil+0x80>
    2b30:	8f 81       	ldd	r24, Y+7	; 0x07
    2b32:	98 85       	ldd	r25, Y+8	; 0x08
    2b34:	fc 01       	movw	r30, r24
    2b36:	20 81       	ld	r18, Z
    2b38:	31 81       	ldd	r19, Z+1	; 0x01
    2b3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2b3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2b3e:	82 17       	cp	r24, r18
    2b40:	93 07       	cpc	r25, r19
    2b42:	e8 f4       	brcc	.+58     	; 0x2b7e <vTaskDelayUntil+0xa6>
    2b44:	2c 81       	ldd	r18, Y+4	; 0x04
    2b46:	3d 81       	ldd	r19, Y+5	; 0x05
    2b48:	8a 81       	ldd	r24, Y+2	; 0x02
    2b4a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b4c:	82 17       	cp	r24, r18
    2b4e:	93 07       	cpc	r25, r19
    2b50:	b0 f4       	brcc	.+44     	; 0x2b7e <vTaskDelayUntil+0xa6>
    2b52:	81 e0       	ldi	r24, 0x01	; 1
    2b54:	89 83       	std	Y+1, r24	; 0x01
    2b56:	13 c0       	rjmp	.+38     	; 0x2b7e <vTaskDelayUntil+0xa6>
    2b58:	8f 81       	ldd	r24, Y+7	; 0x07
    2b5a:	98 85       	ldd	r25, Y+8	; 0x08
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	20 81       	ld	r18, Z
    2b60:	31 81       	ldd	r19, Z+1	; 0x01
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	9d 81       	ldd	r25, Y+5	; 0x05
    2b66:	82 17       	cp	r24, r18
    2b68:	93 07       	cpc	r25, r19
    2b6a:	38 f0       	brcs	.+14     	; 0x2b7a <vTaskDelayUntil+0xa2>
    2b6c:	2c 81       	ldd	r18, Y+4	; 0x04
    2b6e:	3d 81       	ldd	r19, Y+5	; 0x05
    2b70:	8a 81       	ldd	r24, Y+2	; 0x02
    2b72:	9b 81       	ldd	r25, Y+3	; 0x03
    2b74:	82 17       	cp	r24, r18
    2b76:	93 07       	cpc	r25, r19
    2b78:	10 f4       	brcc	.+4      	; 0x2b7e <vTaskDelayUntil+0xa6>
    2b7a:	81 e0       	ldi	r24, 0x01	; 1
    2b7c:	89 83       	std	Y+1, r24	; 0x01
    2b7e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b80:	98 85       	ldd	r25, Y+8	; 0x08
    2b82:	2c 81       	ldd	r18, Y+4	; 0x04
    2b84:	3d 81       	ldd	r19, Y+5	; 0x05
    2b86:	fc 01       	movw	r30, r24
    2b88:	31 83       	std	Z+1, r19	; 0x01
    2b8a:	20 83       	st	Z, r18
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	88 23       	and	r24, r24
    2b90:	59 f0       	breq	.+22     	; 0x2ba8 <vTaskDelayUntil+0xd0>
    2b92:	2c 81       	ldd	r18, Y+4	; 0x04
    2b94:	3d 81       	ldd	r19, Y+5	; 0x05
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	9b 81       	ldd	r25, Y+3	; 0x03
    2b9a:	a9 01       	movw	r20, r18
    2b9c:	48 1b       	sub	r20, r24
    2b9e:	59 0b       	sbc	r21, r25
    2ba0:	ca 01       	movw	r24, r20
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	0e 94 84 1b 	call	0x3708	; 0x3708 <prvAddCurrentTaskToDelayedList>
    2ba8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    2bac:	8e 83       	std	Y+6, r24	; 0x06
    2bae:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb0:	88 23       	and	r24, r24
    2bb2:	11 f4       	brne	.+4      	; 0x2bb8 <vTaskDelayUntil+0xe0>
    2bb4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2bb8:	2a 96       	adiw	r28, 0x0a	; 10
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	08 95       	ret

00002bca <vTaskDelay>:
    2bca:	cf 93       	push	r28
    2bcc:	df 93       	push	r29
    2bce:	00 d0       	rcall	.+0      	; 0x2bd0 <vTaskDelay+0x6>
    2bd0:	1f 92       	push	r1
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	9b 83       	std	Y+3, r25	; 0x03
    2bd8:	8a 83       	std	Y+2, r24	; 0x02
    2bda:	19 82       	std	Y+1, r1	; 0x01
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	89 2b       	or	r24, r25
    2be2:	51 f0       	breq	.+20     	; 0x2bf8 <vTaskDelay+0x2e>
    2be4:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
    2be8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bea:	9b 81       	ldd	r25, Y+3	; 0x03
    2bec:	60 e0       	ldi	r22, 0x00	; 0
    2bee:	0e 94 84 1b 	call	0x3708	; 0x3708 <prvAddCurrentTaskToDelayedList>
    2bf2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    2bf6:	89 83       	std	Y+1, r24	; 0x01
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	88 23       	and	r24, r24
    2bfc:	11 f4       	brne	.+4      	; 0x2c02 <vTaskDelay+0x38>
    2bfe:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2c02:	0f 90       	pop	r0
    2c04:	0f 90       	pop	r0
    2c06:	0f 90       	pop	r0
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <vTaskStartScheduler>:
    2c0e:	ef 92       	push	r14
    2c10:	ff 92       	push	r15
    2c12:	0f 93       	push	r16
    2c14:	cf 93       	push	r28
    2c16:	df 93       	push	r29
    2c18:	1f 92       	push	r1
    2c1a:	cd b7       	in	r28, 0x3d	; 61
    2c1c:	de b7       	in	r29, 0x3e	; 62
    2c1e:	0f 2e       	mov	r0, r31
    2c20:	f0 ec       	ldi	r31, 0xC0	; 192
    2c22:	ef 2e       	mov	r14, r31
    2c24:	f7 e0       	ldi	r31, 0x07	; 7
    2c26:	ff 2e       	mov	r15, r31
    2c28:	f0 2d       	mov	r31, r0
    2c2a:	00 e0       	ldi	r16, 0x00	; 0
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	45 e5       	ldi	r20, 0x55	; 85
    2c32:	50 e0       	ldi	r21, 0x00	; 0
    2c34:	6d e3       	ldi	r22, 0x3D	; 61
    2c36:	71 e0       	ldi	r23, 0x01	; 1
    2c38:	82 e8       	ldi	r24, 0x82	; 130
    2c3a:	99 e1       	ldi	r25, 0x19	; 25
    2c3c:	0e 94 92 13 	call	0x2724	; 0x2724 <xTaskCreate>
    2c40:	89 83       	std	Y+1, r24	; 0x01
    2c42:	89 81       	ldd	r24, Y+1	; 0x01
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	81 f4       	brne	.+32     	; 0x2c68 <vTaskStartScheduler+0x5a>
    2c48:	f8 94       	cli
    2c4a:	8f ef       	ldi	r24, 0xFF	; 255
    2c4c:	9f ef       	ldi	r25, 0xFF	; 255
    2c4e:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    2c52:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>
    2c56:	81 e0       	ldi	r24, 0x01	; 1
    2c58:	80 93 b9 07 	sts	0x07B9, r24	; 0x8007b9 <xSchedulerRunning>
    2c5c:	10 92 b7 07 	sts	0x07B7, r1	; 0x8007b7 <xTickCount+0x1>
    2c60:	10 92 b6 07 	sts	0x07B6, r1	; 0x8007b6 <xTickCount>
    2c64:	0e 94 17 0a 	call	0x142e	; 0x142e <xPortStartScheduler>
    2c68:	0f 90       	pop	r0
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	0f 91       	pop	r16
    2c70:	ff 90       	pop	r15
    2c72:	ef 90       	pop	r14
    2c74:	08 95       	ret

00002c76 <vTaskSuspendAll>:
    2c76:	cf 93       	push	r28
    2c78:	df 93       	push	r29
    2c7a:	cd b7       	in	r28, 0x3d	; 61
    2c7c:	de b7       	in	r29, 0x3e	; 62
    2c7e:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    2c82:	8f 5f       	subi	r24, 0xFF	; 255
    2c84:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <uxSchedulerSuspended>
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <xTaskResumeAll>:
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	00 d0       	rcall	.+0      	; 0x2c94 <xTaskResumeAll+0x6>
    2c94:	00 d0       	rcall	.+0      	; 0x2c96 <xTaskResumeAll+0x8>
    2c96:	cd b7       	in	r28, 0x3d	; 61
    2c98:	de b7       	in	r29, 0x3e	; 62
    2c9a:	1a 82       	std	Y+2, r1	; 0x02
    2c9c:	19 82       	std	Y+1, r1	; 0x01
    2c9e:	1b 82       	std	Y+3, r1	; 0x03
    2ca0:	0f b6       	in	r0, 0x3f	; 63
    2ca2:	f8 94       	cli
    2ca4:	0f 92       	push	r0
    2ca6:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    2caa:	81 50       	subi	r24, 0x01	; 1
    2cac:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <uxSchedulerSuspended>
    2cb0:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    2cb4:	88 23       	and	r24, r24
    2cb6:	09 f0       	breq	.+2      	; 0x2cba <xTaskResumeAll+0x2c>
    2cb8:	77 c0       	rjmp	.+238    	; 0x2da8 <xTaskResumeAll+0x11a>
    2cba:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxCurrentNumberOfTasks>
    2cbe:	88 23       	and	r24, r24
    2cc0:	09 f4       	brne	.+2      	; 0x2cc4 <xTaskResumeAll+0x36>
    2cc2:	72 c0       	rjmp	.+228    	; 0x2da8 <xTaskResumeAll+0x11a>
    2cc4:	49 c0       	rjmp	.+146    	; 0x2d58 <xTaskResumeAll+0xca>
    2cc6:	80 91 a7 07 	lds	r24, 0x07A7	; 0x8007a7 <xPendingReadyList+0x5>
    2cca:	90 91 a8 07 	lds	r25, 0x07A8	; 0x8007a8 <xPendingReadyList+0x6>
    2cce:	fc 01       	movw	r30, r24
    2cd0:	86 81       	ldd	r24, Z+6	; 0x06
    2cd2:	97 81       	ldd	r25, Z+7	; 0x07
    2cd4:	9a 83       	std	Y+2, r25	; 0x02
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	89 81       	ldd	r24, Y+1	; 0x01
    2cda:	9a 81       	ldd	r25, Y+2	; 0x02
    2cdc:	0c 96       	adiw	r24, 0x0c	; 12
    2cde:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    2ce2:	89 81       	ldd	r24, Y+1	; 0x01
    2ce4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ce6:	02 96       	adiw	r24, 0x02	; 2
    2ce8:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    2cec:	89 81       	ldd	r24, Y+1	; 0x01
    2cee:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf0:	fc 01       	movw	r30, r24
    2cf2:	96 89       	ldd	r25, Z+22	; 0x16
    2cf4:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    2cf8:	89 17       	cp	r24, r25
    2cfa:	30 f4       	brcc	.+12     	; 0x2d08 <xTaskResumeAll+0x7a>
    2cfc:	89 81       	ldd	r24, Y+1	; 0x01
    2cfe:	9a 81       	ldd	r25, Y+2	; 0x02
    2d00:	fc 01       	movw	r30, r24
    2d02:	86 89       	ldd	r24, Z+22	; 0x16
    2d04:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    2d08:	89 81       	ldd	r24, Y+1	; 0x01
    2d0a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0c:	ac 01       	movw	r20, r24
    2d0e:	4e 5f       	subi	r20, 0xFE	; 254
    2d10:	5f 4f       	sbci	r21, 0xFF	; 255
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	9a 81       	ldd	r25, Y+2	; 0x02
    2d16:	fc 01       	movw	r30, r24
    2d18:	86 89       	ldd	r24, Z+22	; 0x16
    2d1a:	28 2f       	mov	r18, r24
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	c9 01       	movw	r24, r18
    2d20:	88 0f       	add	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	88 0f       	add	r24, r24
    2d26:	99 1f       	adc	r25, r25
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	82 0f       	add	r24, r18
    2d2e:	93 1f       	adc	r25, r19
    2d30:	88 59       	subi	r24, 0x98	; 152
    2d32:	98 4f       	sbci	r25, 0xF8	; 248
    2d34:	ba 01       	movw	r22, r20
    2d36:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d3e:	fc 01       	movw	r30, r24
    2d40:	26 89       	ldd	r18, Z+22	; 0x16
    2d42:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2d46:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2d4a:	fc 01       	movw	r30, r24
    2d4c:	86 89       	ldd	r24, Z+22	; 0x16
    2d4e:	28 17       	cp	r18, r24
    2d50:	18 f0       	brcs	.+6      	; 0x2d58 <xTaskResumeAll+0xca>
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    2d58:	80 91 a2 07 	lds	r24, 0x07A2	; 0x8007a2 <xPendingReadyList>
    2d5c:	88 23       	and	r24, r24
    2d5e:	09 f0       	breq	.+2      	; 0x2d62 <xTaskResumeAll+0xd4>
    2d60:	b2 cf       	rjmp	.-156    	; 0x2cc6 <xTaskResumeAll+0x38>
    2d62:	89 81       	ldd	r24, Y+1	; 0x01
    2d64:	9a 81       	ldd	r25, Y+2	; 0x02
    2d66:	89 2b       	or	r24, r25
    2d68:	11 f0       	breq	.+4      	; 0x2d6e <xTaskResumeAll+0xe0>
    2d6a:	0e 94 28 1a 	call	0x3450	; 0x3450 <prvResetNextTaskUnblockTime>
    2d6e:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <uxPendedTicks>
    2d72:	8c 83       	std	Y+4, r24	; 0x04
    2d74:	8c 81       	ldd	r24, Y+4	; 0x04
    2d76:	88 23       	and	r24, r24
    2d78:	79 f0       	breq	.+30     	; 0x2d98 <xTaskResumeAll+0x10a>
    2d7a:	0e 94 f5 16 	call	0x2dea	; 0x2dea <xTaskIncrementTick>
    2d7e:	88 23       	and	r24, r24
    2d80:	19 f0       	breq	.+6      	; 0x2d88 <xTaskResumeAll+0xfa>
    2d82:	81 e0       	ldi	r24, 0x01	; 1
    2d84:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    2d88:	8c 81       	ldd	r24, Y+4	; 0x04
    2d8a:	81 50       	subi	r24, 0x01	; 1
    2d8c:	8c 83       	std	Y+4, r24	; 0x04
    2d8e:	8c 81       	ldd	r24, Y+4	; 0x04
    2d90:	88 23       	and	r24, r24
    2d92:	99 f7       	brne	.-26     	; 0x2d7a <xTaskResumeAll+0xec>
    2d94:	10 92 ba 07 	sts	0x07BA, r1	; 0x8007ba <uxPendedTicks>
    2d98:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xYieldPending>
    2d9c:	88 23       	and	r24, r24
    2d9e:	21 f0       	breq	.+8      	; 0x2da8 <xTaskResumeAll+0x11a>
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	8b 83       	std	Y+3, r24	; 0x03
    2da4:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    2da8:	0f 90       	pop	r0
    2daa:	0f be       	out	0x3f, r0	; 63
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	0f 90       	pop	r0
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	df 91       	pop	r29
    2db8:	cf 91       	pop	r28
    2dba:	08 95       	ret

00002dbc <xTaskGetTickCount>:
    2dbc:	cf 93       	push	r28
    2dbe:	df 93       	push	r29
    2dc0:	00 d0       	rcall	.+0      	; 0x2dc2 <xTaskGetTickCount+0x6>
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
    2dc6:	0f b6       	in	r0, 0x3f	; 63
    2dc8:	f8 94       	cli
    2dca:	0f 92       	push	r0
    2dcc:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xTickCount>
    2dd0:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    2dd4:	9a 83       	std	Y+2, r25	; 0x02
    2dd6:	89 83       	std	Y+1, r24	; 0x01
    2dd8:	0f 90       	pop	r0
    2dda:	0f be       	out	0x3f, r0	; 63
    2ddc:	89 81       	ldd	r24, Y+1	; 0x01
    2dde:	9a 81       	ldd	r25, Y+2	; 0x02
    2de0:	0f 90       	pop	r0
    2de2:	0f 90       	pop	r0
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	08 95       	ret

00002dea <xTaskIncrementTick>:
    2dea:	cf 93       	push	r28
    2dec:	df 93       	push	r29
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	29 97       	sbiw	r28, 0x09	; 9
    2df4:	0f b6       	in	r0, 0x3f	; 63
    2df6:	f8 94       	cli
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	cd bf       	out	0x3d, r28	; 61
    2dfe:	19 82       	std	Y+1, r1	; 0x01
    2e00:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    2e04:	88 23       	and	r24, r24
    2e06:	09 f0       	breq	.+2      	; 0x2e0a <xTaskIncrementTick+0x20>
    2e08:	c7 c0       	rjmp	.+398    	; 0x2f98 <xTaskIncrementTick+0x1ae>
    2e0a:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xTickCount>
    2e0e:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    2e12:	01 96       	adiw	r24, 0x01	; 1
    2e14:	9b 83       	std	Y+3, r25	; 0x03
    2e16:	8a 83       	std	Y+2, r24	; 0x02
    2e18:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e1c:	90 93 b7 07 	sts	0x07B7, r25	; 0x8007b7 <xTickCount+0x1>
    2e20:	80 93 b6 07 	sts	0x07B6, r24	; 0x8007b6 <xTickCount>
    2e24:	8a 81       	ldd	r24, Y+2	; 0x02
    2e26:	9b 81       	ldd	r25, Y+3	; 0x03
    2e28:	89 2b       	or	r24, r25
    2e2a:	d9 f4       	brne	.+54     	; 0x2e62 <xTaskIncrementTick+0x78>
    2e2c:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    2e30:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    2e34:	9d 83       	std	Y+5, r25	; 0x05
    2e36:	8c 83       	std	Y+4, r24	; 0x04
    2e38:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxOverflowDelayedTaskList>
    2e3c:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxOverflowDelayedTaskList+0x1>
    2e40:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxDelayedTaskList+0x1>
    2e44:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxDelayedTaskList>
    2e48:	8c 81       	ldd	r24, Y+4	; 0x04
    2e4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2e4c:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxOverflowDelayedTaskList+0x1>
    2e50:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxOverflowDelayedTaskList>
    2e54:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNumOfOverflows>
    2e58:	8f 5f       	subi	r24, 0xFF	; 255
    2e5a:	80 93 bc 07 	sts	0x07BC, r24	; 0x8007bc <xNumOfOverflows>
    2e5e:	0e 94 28 1a 	call	0x3450	; 0x3450 <prvResetNextTaskUnblockTime>
    2e62:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <xNextTaskUnblockTime>
    2e66:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <xNextTaskUnblockTime+0x1>
    2e6a:	2a 81       	ldd	r18, Y+2	; 0x02
    2e6c:	3b 81       	ldd	r19, Y+3	; 0x03
    2e6e:	28 17       	cp	r18, r24
    2e70:	39 07       	cpc	r19, r25
    2e72:	08 f4       	brcc	.+2      	; 0x2e76 <xTaskIncrementTick+0x8c>
    2e74:	77 c0       	rjmp	.+238    	; 0x2f64 <xTaskIncrementTick+0x17a>
    2e76:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    2e7a:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    2e7e:	fc 01       	movw	r30, r24
    2e80:	80 81       	ld	r24, Z
    2e82:	88 23       	and	r24, r24
    2e84:	39 f4       	brne	.+14     	; 0x2e94 <xTaskIncrementTick+0xaa>
    2e86:	8f ef       	ldi	r24, 0xFF	; 255
    2e88:	9f ef       	ldi	r25, 0xFF	; 255
    2e8a:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    2e8e:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>
    2e92:	68 c0       	rjmp	.+208    	; 0x2f64 <xTaskIncrementTick+0x17a>
    2e94:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    2e98:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    2e9c:	fc 01       	movw	r30, r24
    2e9e:	85 81       	ldd	r24, Z+5	; 0x05
    2ea0:	96 81       	ldd	r25, Z+6	; 0x06
    2ea2:	fc 01       	movw	r30, r24
    2ea4:	86 81       	ldd	r24, Z+6	; 0x06
    2ea6:	97 81       	ldd	r25, Z+7	; 0x07
    2ea8:	9f 83       	std	Y+7, r25	; 0x07
    2eaa:	8e 83       	std	Y+6, r24	; 0x06
    2eac:	8e 81       	ldd	r24, Y+6	; 0x06
    2eae:	9f 81       	ldd	r25, Y+7	; 0x07
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	82 81       	ldd	r24, Z+2	; 0x02
    2eb4:	93 81       	ldd	r25, Z+3	; 0x03
    2eb6:	99 87       	std	Y+9, r25	; 0x09
    2eb8:	88 87       	std	Y+8, r24	; 0x08
    2eba:	2a 81       	ldd	r18, Y+2	; 0x02
    2ebc:	3b 81       	ldd	r19, Y+3	; 0x03
    2ebe:	88 85       	ldd	r24, Y+8	; 0x08
    2ec0:	99 85       	ldd	r25, Y+9	; 0x09
    2ec2:	28 17       	cp	r18, r24
    2ec4:	39 07       	cpc	r19, r25
    2ec6:	38 f4       	brcc	.+14     	; 0x2ed6 <xTaskIncrementTick+0xec>
    2ec8:	88 85       	ldd	r24, Y+8	; 0x08
    2eca:	99 85       	ldd	r25, Y+9	; 0x09
    2ecc:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    2ed0:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>
    2ed4:	47 c0       	rjmp	.+142    	; 0x2f64 <xTaskIncrementTick+0x17a>
    2ed6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ed8:	9f 81       	ldd	r25, Y+7	; 0x07
    2eda:	02 96       	adiw	r24, 0x02	; 2
    2edc:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    2ee0:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee2:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	84 89       	ldd	r24, Z+20	; 0x14
    2ee8:	95 89       	ldd	r25, Z+21	; 0x15
    2eea:	89 2b       	or	r24, r25
    2eec:	29 f0       	breq	.+10     	; 0x2ef8 <xTaskIncrementTick+0x10e>
    2eee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef2:	0c 96       	adiw	r24, 0x0c	; 12
    2ef4:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    2ef8:	8e 81       	ldd	r24, Y+6	; 0x06
    2efa:	9f 81       	ldd	r25, Y+7	; 0x07
    2efc:	fc 01       	movw	r30, r24
    2efe:	96 89       	ldd	r25, Z+22	; 0x16
    2f00:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    2f04:	89 17       	cp	r24, r25
    2f06:	30 f4       	brcc	.+12     	; 0x2f14 <xTaskIncrementTick+0x12a>
    2f08:	8e 81       	ldd	r24, Y+6	; 0x06
    2f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0c:	fc 01       	movw	r30, r24
    2f0e:	86 89       	ldd	r24, Z+22	; 0x16
    2f10:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    2f14:	8e 81       	ldd	r24, Y+6	; 0x06
    2f16:	9f 81       	ldd	r25, Y+7	; 0x07
    2f18:	ac 01       	movw	r20, r24
    2f1a:	4e 5f       	subi	r20, 0xFE	; 254
    2f1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2f1e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f20:	9f 81       	ldd	r25, Y+7	; 0x07
    2f22:	fc 01       	movw	r30, r24
    2f24:	86 89       	ldd	r24, Z+22	; 0x16
    2f26:	28 2f       	mov	r18, r24
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	c9 01       	movw	r24, r18
    2f2c:	88 0f       	add	r24, r24
    2f2e:	99 1f       	adc	r25, r25
    2f30:	88 0f       	add	r24, r24
    2f32:	99 1f       	adc	r25, r25
    2f34:	88 0f       	add	r24, r24
    2f36:	99 1f       	adc	r25, r25
    2f38:	82 0f       	add	r24, r18
    2f3a:	93 1f       	adc	r25, r19
    2f3c:	88 59       	subi	r24, 0x98	; 152
    2f3e:	98 4f       	sbci	r25, 0xF8	; 248
    2f40:	ba 01       	movw	r22, r20
    2f42:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    2f46:	8e 81       	ldd	r24, Y+6	; 0x06
    2f48:	9f 81       	ldd	r25, Y+7	; 0x07
    2f4a:	fc 01       	movw	r30, r24
    2f4c:	26 89       	ldd	r18, Z+22	; 0x16
    2f4e:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2f52:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2f56:	fc 01       	movw	r30, r24
    2f58:	86 89       	ldd	r24, Z+22	; 0x16
    2f5a:	28 17       	cp	r18, r24
    2f5c:	10 f0       	brcs	.+4      	; 0x2f62 <xTaskIncrementTick+0x178>
    2f5e:	81 e0       	ldi	r24, 0x01	; 1
    2f60:	89 83       	std	Y+1, r24	; 0x01
    2f62:	89 cf       	rjmp	.-238    	; 0x2e76 <xTaskIncrementTick+0x8c>
    2f64:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2f68:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2f6c:	fc 01       	movw	r30, r24
    2f6e:	86 89       	ldd	r24, Z+22	; 0x16
    2f70:	28 2f       	mov	r18, r24
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	c9 01       	movw	r24, r18
    2f76:	88 0f       	add	r24, r24
    2f78:	99 1f       	adc	r25, r25
    2f7a:	88 0f       	add	r24, r24
    2f7c:	99 1f       	adc	r25, r25
    2f7e:	88 0f       	add	r24, r24
    2f80:	99 1f       	adc	r25, r25
    2f82:	82 0f       	add	r24, r18
    2f84:	93 1f       	adc	r25, r19
    2f86:	88 59       	subi	r24, 0x98	; 152
    2f88:	98 4f       	sbci	r25, 0xF8	; 248
    2f8a:	fc 01       	movw	r30, r24
    2f8c:	80 81       	ld	r24, Z
    2f8e:	82 30       	cpi	r24, 0x02	; 2
    2f90:	10 f0       	brcs	.+4      	; 0x2f96 <xTaskIncrementTick+0x1ac>
    2f92:	81 e0       	ldi	r24, 0x01	; 1
    2f94:	89 83       	std	Y+1, r24	; 0x01
    2f96:	05 c0       	rjmp	.+10     	; 0x2fa2 <xTaskIncrementTick+0x1b8>
    2f98:	80 91 ba 07 	lds	r24, 0x07BA	; 0x8007ba <uxPendedTicks>
    2f9c:	8f 5f       	subi	r24, 0xFF	; 255
    2f9e:	80 93 ba 07 	sts	0x07BA, r24	; 0x8007ba <uxPendedTicks>
    2fa2:	80 91 bb 07 	lds	r24, 0x07BB	; 0x8007bb <xYieldPending>
    2fa6:	88 23       	and	r24, r24
    2fa8:	11 f0       	breq	.+4      	; 0x2fae <xTaskIncrementTick+0x1c4>
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	89 83       	std	Y+1, r24	; 0x01
    2fae:	89 81       	ldd	r24, Y+1	; 0x01
    2fb0:	29 96       	adiw	r28, 0x09	; 9
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	08 95       	ret

00002fc2 <vTaskSwitchContext>:
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	00 d0       	rcall	.+0      	; 0x2fc8 <vTaskSwitchContext+0x6>
    2fc8:	1f 92       	push	r1
    2fca:	cd b7       	in	r28, 0x3d	; 61
    2fcc:	de b7       	in	r29, 0x3e	; 62
    2fce:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    2fd2:	88 23       	and	r24, r24
    2fd4:	21 f0       	breq	.+8      	; 0x2fde <vTaskSwitchContext+0x1c>
    2fd6:	81 e0       	ldi	r24, 0x01	; 1
    2fd8:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    2fdc:	71 c0       	rjmp	.+226    	; 0x30c0 <vTaskSwitchContext+0xfe>
    2fde:	10 92 bb 07 	sts	0x07BB, r1	; 0x8007bb <xYieldPending>
    2fe2:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    2fe6:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    2fea:	fc 01       	movw	r30, r24
    2fec:	85 a1       	ldd	r24, Z+37	; 0x25
    2fee:	96 a1       	ldd	r25, Z+38	; 0x26
    2ff0:	0e 94 5f 06 	call	0xcbe	; 0xcbe <switch_out>
    2ff4:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <vTaskSwitchContext+0x40>
    2ffc:	89 81       	ldd	r24, Y+1	; 0x01
    2ffe:	81 50       	subi	r24, 0x01	; 1
    3000:	89 83       	std	Y+1, r24	; 0x01
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	28 2f       	mov	r18, r24
    3006:	30 e0       	ldi	r19, 0x00	; 0
    3008:	c9 01       	movw	r24, r18
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	82 0f       	add	r24, r18
    3018:	93 1f       	adc	r25, r19
    301a:	88 59       	subi	r24, 0x98	; 152
    301c:	98 4f       	sbci	r25, 0xF8	; 248
    301e:	fc 01       	movw	r30, r24
    3020:	80 81       	ld	r24, Z
    3022:	88 23       	and	r24, r24
    3024:	59 f3       	breq	.-42     	; 0x2ffc <vTaskSwitchContext+0x3a>
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	28 2f       	mov	r18, r24
    302a:	30 e0       	ldi	r19, 0x00	; 0
    302c:	c9 01       	movw	r24, r18
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	88 0f       	add	r24, r24
    3038:	99 1f       	adc	r25, r25
    303a:	82 0f       	add	r24, r18
    303c:	93 1f       	adc	r25, r19
    303e:	88 59       	subi	r24, 0x98	; 152
    3040:	98 4f       	sbci	r25, 0xF8	; 248
    3042:	9b 83       	std	Y+3, r25	; 0x03
    3044:	8a 83       	std	Y+2, r24	; 0x02
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	fc 01       	movw	r30, r24
    304c:	81 81       	ldd	r24, Z+1	; 0x01
    304e:	92 81       	ldd	r25, Z+2	; 0x02
    3050:	fc 01       	movw	r30, r24
    3052:	22 81       	ldd	r18, Z+2	; 0x02
    3054:	33 81       	ldd	r19, Z+3	; 0x03
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	fc 01       	movw	r30, r24
    305c:	32 83       	std	Z+2, r19	; 0x02
    305e:	21 83       	std	Z+1, r18	; 0x01
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	9b 81       	ldd	r25, Y+3	; 0x03
    3064:	fc 01       	movw	r30, r24
    3066:	21 81       	ldd	r18, Z+1	; 0x01
    3068:	32 81       	ldd	r19, Z+2	; 0x02
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	9b 81       	ldd	r25, Y+3	; 0x03
    306e:	03 96       	adiw	r24, 0x03	; 3
    3070:	28 17       	cp	r18, r24
    3072:	39 07       	cpc	r19, r25
    3074:	69 f4       	brne	.+26     	; 0x3090 <vTaskSwitchContext+0xce>
    3076:	8a 81       	ldd	r24, Y+2	; 0x02
    3078:	9b 81       	ldd	r25, Y+3	; 0x03
    307a:	fc 01       	movw	r30, r24
    307c:	81 81       	ldd	r24, Z+1	; 0x01
    307e:	92 81       	ldd	r25, Z+2	; 0x02
    3080:	fc 01       	movw	r30, r24
    3082:	22 81       	ldd	r18, Z+2	; 0x02
    3084:	33 81       	ldd	r19, Z+3	; 0x03
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	9b 81       	ldd	r25, Y+3	; 0x03
    308a:	fc 01       	movw	r30, r24
    308c:	32 83       	std	Z+2, r19	; 0x02
    308e:	21 83       	std	Z+1, r18	; 0x01
    3090:	8a 81       	ldd	r24, Y+2	; 0x02
    3092:	9b 81       	ldd	r25, Y+3	; 0x03
    3094:	fc 01       	movw	r30, r24
    3096:	81 81       	ldd	r24, Z+1	; 0x01
    3098:	92 81       	ldd	r25, Z+2	; 0x02
    309a:	fc 01       	movw	r30, r24
    309c:	86 81       	ldd	r24, Z+6	; 0x06
    309e:	97 81       	ldd	r25, Z+7	; 0x07
    30a0:	90 93 67 07 	sts	0x0767, r25	; 0x800767 <pxCurrentTCB+0x1>
    30a4:	80 93 66 07 	sts	0x0766, r24	; 0x800766 <pxCurrentTCB>
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    30ae:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    30b2:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    30b6:	fc 01       	movw	r30, r24
    30b8:	85 a1       	ldd	r24, Z+37	; 0x25
    30ba:	96 a1       	ldd	r25, Z+38	; 0x26
    30bc:	0e 94 55 06 	call	0xcaa	; 0xcaa <switch_in>
    30c0:	0f 90       	pop	r0
    30c2:	0f 90       	pop	r0
    30c4:	0f 90       	pop	r0
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	08 95       	ret

000030cc <vTaskPlaceOnEventList>:
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	00 d0       	rcall	.+0      	; 0x30d2 <vTaskPlaceOnEventList+0x6>
    30d2:	00 d0       	rcall	.+0      	; 0x30d4 <vTaskPlaceOnEventList+0x8>
    30d4:	cd b7       	in	r28, 0x3d	; 61
    30d6:	de b7       	in	r29, 0x3e	; 62
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	7c 83       	std	Y+4, r23	; 0x04
    30de:	6b 83       	std	Y+3, r22	; 0x03
    30e0:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    30e4:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    30e8:	9c 01       	movw	r18, r24
    30ea:	24 5f       	subi	r18, 0xF4	; 244
    30ec:	3f 4f       	sbci	r19, 0xFF	; 255
    30ee:	89 81       	ldd	r24, Y+1	; 0x01
    30f0:	9a 81       	ldd	r25, Y+2	; 0x02
    30f2:	b9 01       	movw	r22, r18
    30f4:	0e 94 a0 07 	call	0xf40	; 0xf40 <vListInsert>
    30f8:	8b 81       	ldd	r24, Y+3	; 0x03
    30fa:	9c 81       	ldd	r25, Y+4	; 0x04
    30fc:	61 e0       	ldi	r22, 0x01	; 1
    30fe:	0e 94 84 1b 	call	0x3708	; 0x3708 <prvAddCurrentTaskToDelayedList>
    3102:	0f 90       	pop	r0
    3104:	0f 90       	pop	r0
    3106:	0f 90       	pop	r0
    3108:	0f 90       	pop	r0
    310a:	df 91       	pop	r29
    310c:	cf 91       	pop	r28
    310e:	08 95       	ret

00003110 <xTaskRemoveFromEventList>:
    3110:	cf 93       	push	r28
    3112:	df 93       	push	r29
    3114:	00 d0       	rcall	.+0      	; 0x3116 <xTaskRemoveFromEventList+0x6>
    3116:	00 d0       	rcall	.+0      	; 0x3118 <xTaskRemoveFromEventList+0x8>
    3118:	1f 92       	push	r1
    311a:	cd b7       	in	r28, 0x3d	; 61
    311c:	de b7       	in	r29, 0x3e	; 62
    311e:	9d 83       	std	Y+5, r25	; 0x05
    3120:	8c 83       	std	Y+4, r24	; 0x04
    3122:	8c 81       	ldd	r24, Y+4	; 0x04
    3124:	9d 81       	ldd	r25, Y+5	; 0x05
    3126:	fc 01       	movw	r30, r24
    3128:	85 81       	ldd	r24, Z+5	; 0x05
    312a:	96 81       	ldd	r25, Z+6	; 0x06
    312c:	fc 01       	movw	r30, r24
    312e:	86 81       	ldd	r24, Z+6	; 0x06
    3130:	97 81       	ldd	r25, Z+7	; 0x07
    3132:	9b 83       	std	Y+3, r25	; 0x03
    3134:	8a 83       	std	Y+2, r24	; 0x02
    3136:	8a 81       	ldd	r24, Y+2	; 0x02
    3138:	9b 81       	ldd	r25, Y+3	; 0x03
    313a:	0c 96       	adiw	r24, 0x0c	; 12
    313c:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    3140:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <uxSchedulerSuspended>
    3144:	88 23       	and	r24, r24
    3146:	69 f5       	brne	.+90     	; 0x31a2 <xTaskRemoveFromEventList+0x92>
    3148:	8a 81       	ldd	r24, Y+2	; 0x02
    314a:	9b 81       	ldd	r25, Y+3	; 0x03
    314c:	02 96       	adiw	r24, 0x02	; 2
    314e:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	fc 01       	movw	r30, r24
    3158:	96 89       	ldd	r25, Z+22	; 0x16
    315a:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    315e:	89 17       	cp	r24, r25
    3160:	30 f4       	brcc	.+12     	; 0x316e <xTaskRemoveFromEventList+0x5e>
    3162:	8a 81       	ldd	r24, Y+2	; 0x02
    3164:	9b 81       	ldd	r25, Y+3	; 0x03
    3166:	fc 01       	movw	r30, r24
    3168:	86 89       	ldd	r24, Z+22	; 0x16
    316a:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    316e:	8a 81       	ldd	r24, Y+2	; 0x02
    3170:	9b 81       	ldd	r25, Y+3	; 0x03
    3172:	ac 01       	movw	r20, r24
    3174:	4e 5f       	subi	r20, 0xFE	; 254
    3176:	5f 4f       	sbci	r21, 0xFF	; 255
    3178:	8a 81       	ldd	r24, Y+2	; 0x02
    317a:	9b 81       	ldd	r25, Y+3	; 0x03
    317c:	fc 01       	movw	r30, r24
    317e:	86 89       	ldd	r24, Z+22	; 0x16
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	c9 01       	movw	r24, r18
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	88 0f       	add	r24, r24
    318c:	99 1f       	adc	r25, r25
    318e:	88 0f       	add	r24, r24
    3190:	99 1f       	adc	r25, r25
    3192:	82 0f       	add	r24, r18
    3194:	93 1f       	adc	r25, r19
    3196:	88 59       	subi	r24, 0x98	; 152
    3198:	98 4f       	sbci	r25, 0xF8	; 248
    319a:	ba 01       	movw	r22, r20
    319c:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    31a0:	08 c0       	rjmp	.+16     	; 0x31b2 <xTaskRemoveFromEventList+0xa2>
    31a2:	8a 81       	ldd	r24, Y+2	; 0x02
    31a4:	9b 81       	ldd	r25, Y+3	; 0x03
    31a6:	0c 96       	adiw	r24, 0x0c	; 12
    31a8:	bc 01       	movw	r22, r24
    31aa:	82 ea       	ldi	r24, 0xA2	; 162
    31ac:	97 e0       	ldi	r25, 0x07	; 7
    31ae:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    31b2:	8a 81       	ldd	r24, Y+2	; 0x02
    31b4:	9b 81       	ldd	r25, Y+3	; 0x03
    31b6:	fc 01       	movw	r30, r24
    31b8:	26 89       	ldd	r18, Z+22	; 0x16
    31ba:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    31be:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    31c2:	fc 01       	movw	r30, r24
    31c4:	86 89       	ldd	r24, Z+22	; 0x16
    31c6:	82 17       	cp	r24, r18
    31c8:	30 f4       	brcc	.+12     	; 0x31d6 <xTaskRemoveFromEventList+0xc6>
    31ca:	81 e0       	ldi	r24, 0x01	; 1
    31cc:	89 83       	std	Y+1, r24	; 0x01
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    31d4:	01 c0       	rjmp	.+2      	; 0x31d8 <xTaskRemoveFromEventList+0xc8>
    31d6:	19 82       	std	Y+1, r1	; 0x01
    31d8:	89 81       	ldd	r24, Y+1	; 0x01
    31da:	0f 90       	pop	r0
    31dc:	0f 90       	pop	r0
    31de:	0f 90       	pop	r0
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	08 95       	ret

000031ea <vTaskSetTimeOutState>:
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	00 d0       	rcall	.+0      	; 0x31f0 <vTaskSetTimeOutState+0x6>
    31f0:	cd b7       	in	r28, 0x3d	; 61
    31f2:	de b7       	in	r29, 0x3e	; 62
    31f4:	9a 83       	std	Y+2, r25	; 0x02
    31f6:	89 83       	std	Y+1, r24	; 0x01
    31f8:	20 91 bc 07 	lds	r18, 0x07BC	; 0x8007bc <xNumOfOverflows>
    31fc:	89 81       	ldd	r24, Y+1	; 0x01
    31fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3200:	fc 01       	movw	r30, r24
    3202:	20 83       	st	Z, r18
    3204:	20 91 b6 07 	lds	r18, 0x07B6	; 0x8007b6 <xTickCount>
    3208:	30 91 b7 07 	lds	r19, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    320c:	89 81       	ldd	r24, Y+1	; 0x01
    320e:	9a 81       	ldd	r25, Y+2	; 0x02
    3210:	fc 01       	movw	r30, r24
    3212:	32 83       	std	Z+2, r19	; 0x02
    3214:	21 83       	std	Z+1, r18	; 0x01
    3216:	0f 90       	pop	r0
    3218:	0f 90       	pop	r0
    321a:	df 91       	pop	r29
    321c:	cf 91       	pop	r28
    321e:	08 95       	ret

00003220 <xTaskCheckForTimeOut>:
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	cd b7       	in	r28, 0x3d	; 61
    3226:	de b7       	in	r29, 0x3e	; 62
    3228:	27 97       	sbiw	r28, 0x07	; 7
    322a:	0f b6       	in	r0, 0x3f	; 63
    322c:	f8 94       	cli
    322e:	de bf       	out	0x3e, r29	; 62
    3230:	0f be       	out	0x3f, r0	; 63
    3232:	cd bf       	out	0x3d, r28	; 61
    3234:	9d 83       	std	Y+5, r25	; 0x05
    3236:	8c 83       	std	Y+4, r24	; 0x04
    3238:	7f 83       	std	Y+7, r23	; 0x07
    323a:	6e 83       	std	Y+6, r22	; 0x06
    323c:	0f b6       	in	r0, 0x3f	; 63
    323e:	f8 94       	cli
    3240:	0f 92       	push	r0
    3242:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xTickCount>
    3246:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    324a:	9b 83       	std	Y+3, r25	; 0x03
    324c:	8a 83       	std	Y+2, r24	; 0x02
    324e:	8c 81       	ldd	r24, Y+4	; 0x04
    3250:	9d 81       	ldd	r25, Y+5	; 0x05
    3252:	fc 01       	movw	r30, r24
    3254:	90 81       	ld	r25, Z
    3256:	80 91 bc 07 	lds	r24, 0x07BC	; 0x8007bc <xNumOfOverflows>
    325a:	98 17       	cp	r25, r24
    325c:	69 f0       	breq	.+26     	; 0x3278 <xTaskCheckForTimeOut+0x58>
    325e:	8c 81       	ldd	r24, Y+4	; 0x04
    3260:	9d 81       	ldd	r25, Y+5	; 0x05
    3262:	fc 01       	movw	r30, r24
    3264:	21 81       	ldd	r18, Z+1	; 0x01
    3266:	32 81       	ldd	r19, Z+2	; 0x02
    3268:	8a 81       	ldd	r24, Y+2	; 0x02
    326a:	9b 81       	ldd	r25, Y+3	; 0x03
    326c:	82 17       	cp	r24, r18
    326e:	93 07       	cpc	r25, r19
    3270:	18 f0       	brcs	.+6      	; 0x3278 <xTaskCheckForTimeOut+0x58>
    3272:	81 e0       	ldi	r24, 0x01	; 1
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	30 c0       	rjmp	.+96     	; 0x32d8 <xTaskCheckForTimeOut+0xb8>
    3278:	8c 81       	ldd	r24, Y+4	; 0x04
    327a:	9d 81       	ldd	r25, Y+5	; 0x05
    327c:	fc 01       	movw	r30, r24
    327e:	81 81       	ldd	r24, Z+1	; 0x01
    3280:	92 81       	ldd	r25, Z+2	; 0x02
    3282:	2a 81       	ldd	r18, Y+2	; 0x02
    3284:	3b 81       	ldd	r19, Y+3	; 0x03
    3286:	28 1b       	sub	r18, r24
    3288:	39 0b       	sbc	r19, r25
    328a:	8e 81       	ldd	r24, Y+6	; 0x06
    328c:	9f 81       	ldd	r25, Y+7	; 0x07
    328e:	fc 01       	movw	r30, r24
    3290:	80 81       	ld	r24, Z
    3292:	91 81       	ldd	r25, Z+1	; 0x01
    3294:	28 17       	cp	r18, r24
    3296:	39 07       	cpc	r19, r25
    3298:	e8 f4       	brcc	.+58     	; 0x32d4 <xTaskCheckForTimeOut+0xb4>
    329a:	8e 81       	ldd	r24, Y+6	; 0x06
    329c:	9f 81       	ldd	r25, Y+7	; 0x07
    329e:	fc 01       	movw	r30, r24
    32a0:	20 81       	ld	r18, Z
    32a2:	31 81       	ldd	r19, Z+1	; 0x01
    32a4:	8c 81       	ldd	r24, Y+4	; 0x04
    32a6:	9d 81       	ldd	r25, Y+5	; 0x05
    32a8:	fc 01       	movw	r30, r24
    32aa:	41 81       	ldd	r20, Z+1	; 0x01
    32ac:	52 81       	ldd	r21, Z+2	; 0x02
    32ae:	8a 81       	ldd	r24, Y+2	; 0x02
    32b0:	9b 81       	ldd	r25, Y+3	; 0x03
    32b2:	ba 01       	movw	r22, r20
    32b4:	68 1b       	sub	r22, r24
    32b6:	79 0b       	sbc	r23, r25
    32b8:	cb 01       	movw	r24, r22
    32ba:	28 0f       	add	r18, r24
    32bc:	39 1f       	adc	r19, r25
    32be:	8e 81       	ldd	r24, Y+6	; 0x06
    32c0:	9f 81       	ldd	r25, Y+7	; 0x07
    32c2:	fc 01       	movw	r30, r24
    32c4:	31 83       	std	Z+1, r19	; 0x01
    32c6:	20 83       	st	Z, r18
    32c8:	8c 81       	ldd	r24, Y+4	; 0x04
    32ca:	9d 81       	ldd	r25, Y+5	; 0x05
    32cc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <vTaskSetTimeOutState>
    32d0:	19 82       	std	Y+1, r1	; 0x01
    32d2:	02 c0       	rjmp	.+4      	; 0x32d8 <xTaskCheckForTimeOut+0xb8>
    32d4:	81 e0       	ldi	r24, 0x01	; 1
    32d6:	89 83       	std	Y+1, r24	; 0x01
    32d8:	0f 90       	pop	r0
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	27 96       	adiw	r28, 0x07	; 7
    32e0:	0f b6       	in	r0, 0x3f	; 63
    32e2:	f8 94       	cli
    32e4:	de bf       	out	0x3e, r29	; 62
    32e6:	0f be       	out	0x3f, r0	; 63
    32e8:	cd bf       	out	0x3d, r28	; 61
    32ea:	df 91       	pop	r29
    32ec:	cf 91       	pop	r28
    32ee:	08 95       	ret

000032f0 <vTaskMissedYield>:
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	80 93 bb 07 	sts	0x07BB, r24	; 0x8007bb <xYieldPending>
    32fe:	df 91       	pop	r29
    3300:	cf 91       	pop	r28
    3302:	08 95       	ret

00003304 <prvIdleTask>:
    3304:	cf 93       	push	r28
    3306:	df 93       	push	r29
    3308:	00 d0       	rcall	.+0      	; 0x330a <prvIdleTask+0x6>
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
    330e:	9a 83       	std	Y+2, r25	; 0x02
    3310:	89 83       	std	Y+1, r24	; 0x01
    3312:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <prvCheckTasksWaitingTermination>
    3316:	80 91 68 07 	lds	r24, 0x0768	; 0x800768 <pxReadyTasksLists>
    331a:	82 30       	cpi	r24, 0x02	; 2
    331c:	10 f0       	brcs	.+4      	; 0x3322 <prvIdleTask+0x1e>
    331e:	0e 94 4c 0a 	call	0x1498	; 0x1498 <vPortYield>
    3322:	0e 94 14 04 	call	0x828	; 0x828 <vApplicationIdleHook>
    3326:	f5 cf       	rjmp	.-22     	; 0x3312 <prvIdleTask+0xe>

00003328 <prvInitialiseTaskLists>:
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	1f 92       	push	r1
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	19 82       	std	Y+1, r1	; 0x01
    3334:	13 c0       	rjmp	.+38     	; 0x335c <prvInitialiseTaskLists+0x34>
    3336:	89 81       	ldd	r24, Y+1	; 0x01
    3338:	28 2f       	mov	r18, r24
    333a:	30 e0       	ldi	r19, 0x00	; 0
    333c:	c9 01       	movw	r24, r18
    333e:	88 0f       	add	r24, r24
    3340:	99 1f       	adc	r25, r25
    3342:	88 0f       	add	r24, r24
    3344:	99 1f       	adc	r25, r25
    3346:	88 0f       	add	r24, r24
    3348:	99 1f       	adc	r25, r25
    334a:	82 0f       	add	r24, r18
    334c:	93 1f       	adc	r25, r19
    334e:	88 59       	subi	r24, 0x98	; 152
    3350:	98 4f       	sbci	r25, 0xF8	; 248
    3352:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    3356:	89 81       	ldd	r24, Y+1	; 0x01
    3358:	8f 5f       	subi	r24, 0xFF	; 255
    335a:	89 83       	std	Y+1, r24	; 0x01
    335c:	89 81       	ldd	r24, Y+1	; 0x01
    335e:	84 30       	cpi	r24, 0x04	; 4
    3360:	50 f3       	brcs	.-44     	; 0x3336 <prvInitialiseTaskLists+0xe>
    3362:	8c e8       	ldi	r24, 0x8C	; 140
    3364:	97 e0       	ldi	r25, 0x07	; 7
    3366:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    336a:	85 e9       	ldi	r24, 0x95	; 149
    336c:	97 e0       	ldi	r25, 0x07	; 7
    336e:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    3372:	82 ea       	ldi	r24, 0xA2	; 162
    3374:	97 e0       	ldi	r25, 0x07	; 7
    3376:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    337a:	8b ea       	ldi	r24, 0xAB	; 171
    337c:	97 e0       	ldi	r25, 0x07	; 7
    337e:	0e 94 0c 07 	call	0xe18	; 0xe18 <vListInitialise>
    3382:	8c e8       	ldi	r24, 0x8C	; 140
    3384:	97 e0       	ldi	r25, 0x07	; 7
    3386:	90 93 9f 07 	sts	0x079F, r25	; 0x80079f <pxDelayedTaskList+0x1>
    338a:	80 93 9e 07 	sts	0x079E, r24	; 0x80079e <pxDelayedTaskList>
    338e:	85 e9       	ldi	r24, 0x95	; 149
    3390:	97 e0       	ldi	r25, 0x07	; 7
    3392:	90 93 a1 07 	sts	0x07A1, r25	; 0x8007a1 <pxOverflowDelayedTaskList+0x1>
    3396:	80 93 a0 07 	sts	0x07A0, r24	; 0x8007a0 <pxOverflowDelayedTaskList>
    339a:	0f 90       	pop	r0
    339c:	df 91       	pop	r29
    339e:	cf 91       	pop	r28
    33a0:	08 95       	ret

000033a2 <prvCheckTasksWaitingTermination>:
    33a2:	cf 93       	push	r28
    33a4:	df 93       	push	r29
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <prvCheckTasksWaitingTermination+0x6>
    33a8:	1f 92       	push	r1
    33aa:	cd b7       	in	r28, 0x3d	; 61
    33ac:	de b7       	in	r29, 0x3e	; 62
    33ae:	2f c0       	rjmp	.+94     	; 0x340e <prvCheckTasksWaitingTermination+0x6c>
    33b0:	0e 94 3b 16 	call	0x2c76	; 0x2c76 <vTaskSuspendAll>
    33b4:	90 91 ab 07 	lds	r25, 0x07AB	; 0x8007ab <xTasksWaitingTermination>
    33b8:	81 e0       	ldi	r24, 0x01	; 1
    33ba:	99 23       	and	r25, r25
    33bc:	09 f0       	breq	.+2      	; 0x33c0 <prvCheckTasksWaitingTermination+0x1e>
    33be:	80 e0       	ldi	r24, 0x00	; 0
    33c0:	89 83       	std	Y+1, r24	; 0x01
    33c2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskResumeAll>
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	88 23       	and	r24, r24
    33ca:	09 f5       	brne	.+66     	; 0x340e <prvCheckTasksWaitingTermination+0x6c>
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	0f 92       	push	r0
    33d2:	80 91 b0 07 	lds	r24, 0x07B0	; 0x8007b0 <xTasksWaitingTermination+0x5>
    33d6:	90 91 b1 07 	lds	r25, 0x07B1	; 0x8007b1 <xTasksWaitingTermination+0x6>
    33da:	fc 01       	movw	r30, r24
    33dc:	86 81       	ldd	r24, Z+6	; 0x06
    33de:	97 81       	ldd	r25, Z+7	; 0x07
    33e0:	9b 83       	std	Y+3, r25	; 0x03
    33e2:	8a 83       	std	Y+2, r24	; 0x02
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	9b 81       	ldd	r25, Y+3	; 0x03
    33e8:	02 96       	adiw	r24, 0x02	; 2
    33ea:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    33ee:	80 91 b5 07 	lds	r24, 0x07B5	; 0x8007b5 <uxCurrentNumberOfTasks>
    33f2:	81 50       	subi	r24, 0x01	; 1
    33f4:	80 93 b5 07 	sts	0x07B5, r24	; 0x8007b5 <uxCurrentNumberOfTasks>
    33f8:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxDeletedTasksWaitingCleanUp>
    33fc:	81 50       	subi	r24, 0x01	; 1
    33fe:	80 93 b4 07 	sts	0x07B4, r24	; 0x8007b4 <uxDeletedTasksWaitingCleanUp>
    3402:	0f 90       	pop	r0
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	8a 81       	ldd	r24, Y+2	; 0x02
    3408:	9b 81       	ldd	r25, Y+3	; 0x03
    340a:	0e 94 11 1a 	call	0x3422	; 0x3422 <prvDeleteTCB>
    340e:	80 91 b4 07 	lds	r24, 0x07B4	; 0x8007b4 <uxDeletedTasksWaitingCleanUp>
    3412:	88 23       	and	r24, r24
    3414:	69 f6       	brne	.-102    	; 0x33b0 <prvCheckTasksWaitingTermination+0xe>
    3416:	0f 90       	pop	r0
    3418:	0f 90       	pop	r0
    341a:	0f 90       	pop	r0
    341c:	df 91       	pop	r29
    341e:	cf 91       	pop	r28
    3420:	08 95       	ret

00003422 <prvDeleteTCB>:
    3422:	cf 93       	push	r28
    3424:	df 93       	push	r29
    3426:	00 d0       	rcall	.+0      	; 0x3428 <prvDeleteTCB+0x6>
    3428:	cd b7       	in	r28, 0x3d	; 61
    342a:	de b7       	in	r29, 0x3e	; 62
    342c:	9a 83       	std	Y+2, r25	; 0x02
    342e:	89 83       	std	Y+1, r24	; 0x01
    3430:	89 81       	ldd	r24, Y+1	; 0x01
    3432:	9a 81       	ldd	r25, Y+2	; 0x02
    3434:	fc 01       	movw	r30, r24
    3436:	87 89       	ldd	r24, Z+23	; 0x17
    3438:	90 8d       	ldd	r25, Z+24	; 0x18
    343a:	0e 94 bb 0b 	call	0x1776	; 0x1776 <vPortFree>
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	0e 94 bb 0b 	call	0x1776	; 0x1776 <vPortFree>
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	df 91       	pop	r29
    344c:	cf 91       	pop	r28
    344e:	08 95       	ret

00003450 <prvResetNextTaskUnblockTime>:
    3450:	cf 93       	push	r28
    3452:	df 93       	push	r29
    3454:	00 d0       	rcall	.+0      	; 0x3456 <prvResetNextTaskUnblockTime+0x6>
    3456:	cd b7       	in	r28, 0x3d	; 61
    3458:	de b7       	in	r29, 0x3e	; 62
    345a:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    345e:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    3462:	fc 01       	movw	r30, r24
    3464:	80 81       	ld	r24, Z
    3466:	88 23       	and	r24, r24
    3468:	39 f4       	brne	.+14     	; 0x3478 <prvResetNextTaskUnblockTime+0x28>
    346a:	8f ef       	ldi	r24, 0xFF	; 255
    346c:	9f ef       	ldi	r25, 0xFF	; 255
    346e:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    3472:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>
    3476:	15 c0       	rjmp	.+42     	; 0x34a2 <prvResetNextTaskUnblockTime+0x52>
    3478:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    347c:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    3480:	fc 01       	movw	r30, r24
    3482:	85 81       	ldd	r24, Z+5	; 0x05
    3484:	96 81       	ldd	r25, Z+6	; 0x06
    3486:	fc 01       	movw	r30, r24
    3488:	86 81       	ldd	r24, Z+6	; 0x06
    348a:	97 81       	ldd	r25, Z+7	; 0x07
    348c:	9a 83       	std	Y+2, r25	; 0x02
    348e:	89 83       	std	Y+1, r24	; 0x01
    3490:	89 81       	ldd	r24, Y+1	; 0x01
    3492:	9a 81       	ldd	r25, Y+2	; 0x02
    3494:	fc 01       	movw	r30, r24
    3496:	82 81       	ldd	r24, Z+2	; 0x02
    3498:	93 81       	ldd	r25, Z+3	; 0x03
    349a:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    349e:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>
    34a2:	0f 90       	pop	r0
    34a4:	0f 90       	pop	r0
    34a6:	df 91       	pop	r29
    34a8:	cf 91       	pop	r28
    34aa:	08 95       	ret

000034ac <vTaskPriorityInherit>:
    34ac:	cf 93       	push	r28
    34ae:	df 93       	push	r29
    34b0:	00 d0       	rcall	.+0      	; 0x34b2 <vTaskPriorityInherit+0x6>
    34b2:	00 d0       	rcall	.+0      	; 0x34b4 <vTaskPriorityInherit+0x8>
    34b4:	cd b7       	in	r28, 0x3d	; 61
    34b6:	de b7       	in	r29, 0x3e	; 62
    34b8:	9c 83       	std	Y+4, r25	; 0x04
    34ba:	8b 83       	std	Y+3, r24	; 0x03
    34bc:	8b 81       	ldd	r24, Y+3	; 0x03
    34be:	9c 81       	ldd	r25, Y+4	; 0x04
    34c0:	9a 83       	std	Y+2, r25	; 0x02
    34c2:	89 83       	std	Y+1, r24	; 0x01
    34c4:	8b 81       	ldd	r24, Y+3	; 0x03
    34c6:	9c 81       	ldd	r25, Y+4	; 0x04
    34c8:	89 2b       	or	r24, r25
    34ca:	09 f4       	brne	.+2      	; 0x34ce <vTaskPriorityInherit+0x22>
    34cc:	7f c0       	rjmp	.+254    	; 0x35cc <vTaskPriorityInherit+0x120>
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	fc 01       	movw	r30, r24
    34d4:	26 89       	ldd	r18, Z+22	; 0x16
    34d6:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    34da:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    34de:	fc 01       	movw	r30, r24
    34e0:	86 89       	ldd	r24, Z+22	; 0x16
    34e2:	28 17       	cp	r18, r24
    34e4:	08 f0       	brcs	.+2      	; 0x34e8 <vTaskPriorityInherit+0x3c>
    34e6:	72 c0       	rjmp	.+228    	; 0x35cc <vTaskPriorityInherit+0x120>
    34e8:	89 81       	ldd	r24, Y+1	; 0x01
    34ea:	9a 81       	ldd	r25, Y+2	; 0x02
    34ec:	fc 01       	movw	r30, r24
    34ee:	84 85       	ldd	r24, Z+12	; 0x0c
    34f0:	95 85       	ldd	r25, Z+13	; 0x0d
    34f2:	99 23       	and	r25, r25
    34f4:	8c f0       	brlt	.+34     	; 0x3518 <vTaskPriorityInherit+0x6c>
    34f6:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    34fa:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    34fe:	fc 01       	movw	r30, r24
    3500:	86 89       	ldd	r24, Z+22	; 0x16
    3502:	88 2f       	mov	r24, r24
    3504:	90 e0       	ldi	r25, 0x00	; 0
    3506:	24 e0       	ldi	r18, 0x04	; 4
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	28 1b       	sub	r18, r24
    350c:	39 0b       	sbc	r19, r25
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	9a 81       	ldd	r25, Y+2	; 0x02
    3512:	fc 01       	movw	r30, r24
    3514:	35 87       	std	Z+13, r19	; 0x0d
    3516:	24 87       	std	Z+12, r18	; 0x0c
    3518:	89 81       	ldd	r24, Y+1	; 0x01
    351a:	9a 81       	ldd	r25, Y+2	; 0x02
    351c:	fc 01       	movw	r30, r24
    351e:	42 85       	ldd	r20, Z+10	; 0x0a
    3520:	53 85       	ldd	r21, Z+11	; 0x0b
    3522:	89 81       	ldd	r24, Y+1	; 0x01
    3524:	9a 81       	ldd	r25, Y+2	; 0x02
    3526:	fc 01       	movw	r30, r24
    3528:	86 89       	ldd	r24, Z+22	; 0x16
    352a:	28 2f       	mov	r18, r24
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	c9 01       	movw	r24, r18
    3530:	88 0f       	add	r24, r24
    3532:	99 1f       	adc	r25, r25
    3534:	88 0f       	add	r24, r24
    3536:	99 1f       	adc	r25, r25
    3538:	88 0f       	add	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	82 0f       	add	r24, r18
    353e:	93 1f       	adc	r25, r19
    3540:	88 59       	subi	r24, 0x98	; 152
    3542:	98 4f       	sbci	r25, 0xF8	; 248
    3544:	48 17       	cp	r20, r24
    3546:	59 07       	cpc	r21, r25
    3548:	b9 f5       	brne	.+110    	; 0x35b8 <vTaskPriorityInherit+0x10c>
    354a:	89 81       	ldd	r24, Y+1	; 0x01
    354c:	9a 81       	ldd	r25, Y+2	; 0x02
    354e:	02 96       	adiw	r24, 0x02	; 2
    3550:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    3554:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    3558:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    355c:	fc 01       	movw	r30, r24
    355e:	26 89       	ldd	r18, Z+22	; 0x16
    3560:	89 81       	ldd	r24, Y+1	; 0x01
    3562:	9a 81       	ldd	r25, Y+2	; 0x02
    3564:	fc 01       	movw	r30, r24
    3566:	26 8b       	std	Z+22, r18	; 0x16
    3568:	89 81       	ldd	r24, Y+1	; 0x01
    356a:	9a 81       	ldd	r25, Y+2	; 0x02
    356c:	fc 01       	movw	r30, r24
    356e:	96 89       	ldd	r25, Z+22	; 0x16
    3570:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    3574:	89 17       	cp	r24, r25
    3576:	30 f4       	brcc	.+12     	; 0x3584 <vTaskPriorityInherit+0xd8>
    3578:	89 81       	ldd	r24, Y+1	; 0x01
    357a:	9a 81       	ldd	r25, Y+2	; 0x02
    357c:	fc 01       	movw	r30, r24
    357e:	86 89       	ldd	r24, Z+22	; 0x16
    3580:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    3584:	89 81       	ldd	r24, Y+1	; 0x01
    3586:	9a 81       	ldd	r25, Y+2	; 0x02
    3588:	ac 01       	movw	r20, r24
    358a:	4e 5f       	subi	r20, 0xFE	; 254
    358c:	5f 4f       	sbci	r21, 0xFF	; 255
    358e:	89 81       	ldd	r24, Y+1	; 0x01
    3590:	9a 81       	ldd	r25, Y+2	; 0x02
    3592:	fc 01       	movw	r30, r24
    3594:	86 89       	ldd	r24, Z+22	; 0x16
    3596:	28 2f       	mov	r18, r24
    3598:	30 e0       	ldi	r19, 0x00	; 0
    359a:	c9 01       	movw	r24, r18
    359c:	88 0f       	add	r24, r24
    359e:	99 1f       	adc	r25, r25
    35a0:	88 0f       	add	r24, r24
    35a2:	99 1f       	adc	r25, r25
    35a4:	88 0f       	add	r24, r24
    35a6:	99 1f       	adc	r25, r25
    35a8:	82 0f       	add	r24, r18
    35aa:	93 1f       	adc	r25, r19
    35ac:	88 59       	subi	r24, 0x98	; 152
    35ae:	98 4f       	sbci	r25, 0xF8	; 248
    35b0:	ba 01       	movw	r22, r20
    35b2:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    35b6:	0a c0       	rjmp	.+20     	; 0x35cc <vTaskPriorityInherit+0x120>
    35b8:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    35bc:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    35c0:	fc 01       	movw	r30, r24
    35c2:	26 89       	ldd	r18, Z+22	; 0x16
    35c4:	89 81       	ldd	r24, Y+1	; 0x01
    35c6:	9a 81       	ldd	r25, Y+2	; 0x02
    35c8:	fc 01       	movw	r30, r24
    35ca:	26 8b       	std	Z+22, r18	; 0x16
    35cc:	0f 90       	pop	r0
    35ce:	0f 90       	pop	r0
    35d0:	0f 90       	pop	r0
    35d2:	0f 90       	pop	r0
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	08 95       	ret

000035da <xTaskPriorityDisinherit>:
    35da:	cf 93       	push	r28
    35dc:	df 93       	push	r29
    35de:	00 d0       	rcall	.+0      	; 0x35e0 <xTaskPriorityDisinherit+0x6>
    35e0:	00 d0       	rcall	.+0      	; 0x35e2 <xTaskPriorityDisinherit+0x8>
    35e2:	1f 92       	push	r1
    35e4:	cd b7       	in	r28, 0x3d	; 61
    35e6:	de b7       	in	r29, 0x3e	; 62
    35e8:	9d 83       	std	Y+5, r25	; 0x05
    35ea:	8c 83       	std	Y+4, r24	; 0x04
    35ec:	8c 81       	ldd	r24, Y+4	; 0x04
    35ee:	9d 81       	ldd	r25, Y+5	; 0x05
    35f0:	9b 83       	std	Y+3, r25	; 0x03
    35f2:	8a 83       	std	Y+2, r24	; 0x02
    35f4:	19 82       	std	Y+1, r1	; 0x01
    35f6:	8c 81       	ldd	r24, Y+4	; 0x04
    35f8:	9d 81       	ldd	r25, Y+5	; 0x05
    35fa:	89 2b       	or	r24, r25
    35fc:	09 f4       	brne	.+2      	; 0x3600 <xTaskPriorityDisinherit+0x26>
    35fe:	61 c0       	rjmp	.+194    	; 0x36c2 <xTaskPriorityDisinherit+0xe8>
    3600:	8a 81       	ldd	r24, Y+2	; 0x02
    3602:	9b 81       	ldd	r25, Y+3	; 0x03
    3604:	fc 01       	movw	r30, r24
    3606:	84 a1       	ldd	r24, Z+36	; 0x24
    3608:	2f ef       	ldi	r18, 0xFF	; 255
    360a:	28 0f       	add	r18, r24
    360c:	8a 81       	ldd	r24, Y+2	; 0x02
    360e:	9b 81       	ldd	r25, Y+3	; 0x03
    3610:	fc 01       	movw	r30, r24
    3612:	24 a3       	std	Z+36, r18	; 0x24
    3614:	8a 81       	ldd	r24, Y+2	; 0x02
    3616:	9b 81       	ldd	r25, Y+3	; 0x03
    3618:	fc 01       	movw	r30, r24
    361a:	26 89       	ldd	r18, Z+22	; 0x16
    361c:	8a 81       	ldd	r24, Y+2	; 0x02
    361e:	9b 81       	ldd	r25, Y+3	; 0x03
    3620:	fc 01       	movw	r30, r24
    3622:	83 a1       	ldd	r24, Z+35	; 0x23
    3624:	28 17       	cp	r18, r24
    3626:	09 f4       	brne	.+2      	; 0x362a <xTaskPriorityDisinherit+0x50>
    3628:	4c c0       	rjmp	.+152    	; 0x36c2 <xTaskPriorityDisinherit+0xe8>
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	84 a1       	ldd	r24, Z+36	; 0x24
    3632:	88 23       	and	r24, r24
    3634:	09 f0       	breq	.+2      	; 0x3638 <xTaskPriorityDisinherit+0x5e>
    3636:	45 c0       	rjmp	.+138    	; 0x36c2 <xTaskPriorityDisinherit+0xe8>
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	02 96       	adiw	r24, 0x02	; 2
    363e:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
    3642:	8a 81       	ldd	r24, Y+2	; 0x02
    3644:	9b 81       	ldd	r25, Y+3	; 0x03
    3646:	fc 01       	movw	r30, r24
    3648:	23 a1       	ldd	r18, Z+35	; 0x23
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	9b 81       	ldd	r25, Y+3	; 0x03
    364e:	fc 01       	movw	r30, r24
    3650:	26 8b       	std	Z+22, r18	; 0x16
    3652:	8a 81       	ldd	r24, Y+2	; 0x02
    3654:	9b 81       	ldd	r25, Y+3	; 0x03
    3656:	fc 01       	movw	r30, r24
    3658:	86 89       	ldd	r24, Z+22	; 0x16
    365a:	88 2f       	mov	r24, r24
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	24 e0       	ldi	r18, 0x04	; 4
    3660:	30 e0       	ldi	r19, 0x00	; 0
    3662:	28 1b       	sub	r18, r24
    3664:	39 0b       	sbc	r19, r25
    3666:	8a 81       	ldd	r24, Y+2	; 0x02
    3668:	9b 81       	ldd	r25, Y+3	; 0x03
    366a:	fc 01       	movw	r30, r24
    366c:	35 87       	std	Z+13, r19	; 0x0d
    366e:	24 87       	std	Z+12, r18	; 0x0c
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	9b 81       	ldd	r25, Y+3	; 0x03
    3674:	fc 01       	movw	r30, r24
    3676:	96 89       	ldd	r25, Z+22	; 0x16
    3678:	80 91 b8 07 	lds	r24, 0x07B8	; 0x8007b8 <uxTopReadyPriority>
    367c:	89 17       	cp	r24, r25
    367e:	30 f4       	brcc	.+12     	; 0x368c <xTaskPriorityDisinherit+0xb2>
    3680:	8a 81       	ldd	r24, Y+2	; 0x02
    3682:	9b 81       	ldd	r25, Y+3	; 0x03
    3684:	fc 01       	movw	r30, r24
    3686:	86 89       	ldd	r24, Z+22	; 0x16
    3688:	80 93 b8 07 	sts	0x07B8, r24	; 0x8007b8 <uxTopReadyPriority>
    368c:	8a 81       	ldd	r24, Y+2	; 0x02
    368e:	9b 81       	ldd	r25, Y+3	; 0x03
    3690:	ac 01       	movw	r20, r24
    3692:	4e 5f       	subi	r20, 0xFE	; 254
    3694:	5f 4f       	sbci	r21, 0xFF	; 255
    3696:	8a 81       	ldd	r24, Y+2	; 0x02
    3698:	9b 81       	ldd	r25, Y+3	; 0x03
    369a:	fc 01       	movw	r30, r24
    369c:	86 89       	ldd	r24, Z+22	; 0x16
    369e:	28 2f       	mov	r18, r24
    36a0:	30 e0       	ldi	r19, 0x00	; 0
    36a2:	c9 01       	movw	r24, r18
    36a4:	88 0f       	add	r24, r24
    36a6:	99 1f       	adc	r25, r25
    36a8:	88 0f       	add	r24, r24
    36aa:	99 1f       	adc	r25, r25
    36ac:	88 0f       	add	r24, r24
    36ae:	99 1f       	adc	r25, r25
    36b0:	82 0f       	add	r24, r18
    36b2:	93 1f       	adc	r25, r19
    36b4:	88 59       	subi	r24, 0x98	; 152
    36b6:	98 4f       	sbci	r25, 0xF8	; 248
    36b8:	ba 01       	movw	r22, r20
    36ba:	0e 94 52 07 	call	0xea4	; 0xea4 <vListInsertEnd>
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	89 83       	std	Y+1, r24	; 0x01
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	0f 90       	pop	r0
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	08 95       	ret

000036d4 <pvTaskIncrementMutexHeldCount>:
    36d4:	cf 93       	push	r28
    36d6:	df 93       	push	r29
    36d8:	cd b7       	in	r28, 0x3d	; 61
    36da:	de b7       	in	r29, 0x3e	; 62
    36dc:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    36e0:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    36e4:	89 2b       	or	r24, r25
    36e6:	49 f0       	breq	.+18     	; 0x36fa <pvTaskIncrementMutexHeldCount+0x26>
    36e8:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    36ec:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    36f0:	fc 01       	movw	r30, r24
    36f2:	24 a1       	ldd	r18, Z+36	; 0x24
    36f4:	2f 5f       	subi	r18, 0xFF	; 255
    36f6:	fc 01       	movw	r30, r24
    36f8:	24 a3       	std	Z+36, r18	; 0x24
    36fa:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    36fe:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    3702:	df 91       	pop	r29
    3704:	cf 91       	pop	r28
    3706:	08 95       	ret

00003708 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3708:	cf 93       	push	r28
    370a:	df 93       	push	r29
    370c:	cd b7       	in	r28, 0x3d	; 61
    370e:	de b7       	in	r29, 0x3e	; 62
    3710:	27 97       	sbiw	r28, 0x07	; 7
    3712:	0f b6       	in	r0, 0x3f	; 63
    3714:	f8 94       	cli
    3716:	de bf       	out	0x3e, r29	; 62
    3718:	0f be       	out	0x3f, r0	; 63
    371a:	cd bf       	out	0x3d, r28	; 61
    371c:	9e 83       	std	Y+6, r25	; 0x06
    371e:	8d 83       	std	Y+5, r24	; 0x05
    3720:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3722:	80 91 b6 07 	lds	r24, 0x07B6	; 0x8007b6 <xTickCount>
    3726:	90 91 b7 07 	lds	r25, 0x07B7	; 0x8007b7 <xTickCount+0x1>
    372a:	9a 83       	std	Y+2, r25	; 0x02
    372c:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    372e:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    3732:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    3736:	02 96       	adiw	r24, 0x02	; 2
    3738:	0e 94 17 08 	call	0x102e	; 0x102e <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    373c:	29 81       	ldd	r18, Y+1	; 0x01
    373e:	3a 81       	ldd	r19, Y+2	; 0x02
    3740:	8d 81       	ldd	r24, Y+5	; 0x05
    3742:	9e 81       	ldd	r25, Y+6	; 0x06
    3744:	82 0f       	add	r24, r18
    3746:	93 1f       	adc	r25, r19
    3748:	9c 83       	std	Y+4, r25	; 0x04
    374a:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    374c:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    3750:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    3754:	2b 81       	ldd	r18, Y+3	; 0x03
    3756:	3c 81       	ldd	r19, Y+4	; 0x04
    3758:	fc 01       	movw	r30, r24
    375a:	33 83       	std	Z+3, r19	; 0x03
    375c:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    375e:	2b 81       	ldd	r18, Y+3	; 0x03
    3760:	3c 81       	ldd	r19, Y+4	; 0x04
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	28 17       	cp	r18, r24
    3768:	39 07       	cpc	r19, r25
    376a:	78 f4       	brcc	.+30     	; 0x378a <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    376c:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    3770:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    3774:	9c 01       	movw	r18, r24
    3776:	2e 5f       	subi	r18, 0xFE	; 254
    3778:	3f 4f       	sbci	r19, 0xFF	; 255
    377a:	80 91 a0 07 	lds	r24, 0x07A0	; 0x8007a0 <pxOverflowDelayedTaskList>
    377e:	90 91 a1 07 	lds	r25, 0x07A1	; 0x8007a1 <pxOverflowDelayedTaskList+0x1>
    3782:	b9 01       	movw	r22, r18
    3784:	0e 94 a0 07 	call	0xf40	; 0xf40 <vListInsert>
    3788:	1d c0       	rjmp	.+58     	; 0x37c4 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    378a:	80 91 66 07 	lds	r24, 0x0766	; 0x800766 <pxCurrentTCB>
    378e:	90 91 67 07 	lds	r25, 0x0767	; 0x800767 <pxCurrentTCB+0x1>
    3792:	9c 01       	movw	r18, r24
    3794:	2e 5f       	subi	r18, 0xFE	; 254
    3796:	3f 4f       	sbci	r19, 0xFF	; 255
    3798:	80 91 9e 07 	lds	r24, 0x079E	; 0x80079e <pxDelayedTaskList>
    379c:	90 91 9f 07 	lds	r25, 0x079F	; 0x80079f <pxDelayedTaskList+0x1>
    37a0:	b9 01       	movw	r22, r18
    37a2:	0e 94 a0 07 	call	0xf40	; 0xf40 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    37a6:	80 91 be 07 	lds	r24, 0x07BE	; 0x8007be <xNextTaskUnblockTime>
    37aa:	90 91 bf 07 	lds	r25, 0x07BF	; 0x8007bf <xNextTaskUnblockTime+0x1>
    37ae:	2b 81       	ldd	r18, Y+3	; 0x03
    37b0:	3c 81       	ldd	r19, Y+4	; 0x04
    37b2:	28 17       	cp	r18, r24
    37b4:	39 07       	cpc	r19, r25
    37b6:	30 f4       	brcc	.+12     	; 0x37c4 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
    37ba:	9c 81       	ldd	r25, Y+4	; 0x04
    37bc:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <xNextTaskUnblockTime+0x1>
    37c0:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    37c4:	27 96       	adiw	r28, 0x07	; 7
    37c6:	0f b6       	in	r0, 0x3f	; 63
    37c8:	f8 94       	cli
    37ca:	de bf       	out	0x3e, r29	; 62
    37cc:	0f be       	out	0x3f, r0	; 63
    37ce:	cd bf       	out	0x3d, r28	; 61
    37d0:	df 91       	pop	r29
    37d2:	cf 91       	pop	r28
    37d4:	08 95       	ret

000037d6 <__divmodhi4>:
    37d6:	97 fb       	bst	r25, 7
    37d8:	07 2e       	mov	r0, r23
    37da:	16 f4       	brtc	.+4      	; 0x37e0 <__divmodhi4+0xa>
    37dc:	00 94       	com	r0
    37de:	07 d0       	rcall	.+14     	; 0x37ee <__divmodhi4_neg1>
    37e0:	77 fd       	sbrc	r23, 7
    37e2:	09 d0       	rcall	.+18     	; 0x37f6 <__divmodhi4_neg2>
    37e4:	0e 94 27 1c 	call	0x384e	; 0x384e <__udivmodhi4>
    37e8:	07 fc       	sbrc	r0, 7
    37ea:	05 d0       	rcall	.+10     	; 0x37f6 <__divmodhi4_neg2>
    37ec:	3e f4       	brtc	.+14     	; 0x37fc <__divmodhi4_exit>

000037ee <__divmodhi4_neg1>:
    37ee:	90 95       	com	r25
    37f0:	81 95       	neg	r24
    37f2:	9f 4f       	sbci	r25, 0xFF	; 255
    37f4:	08 95       	ret

000037f6 <__divmodhi4_neg2>:
    37f6:	70 95       	com	r23
    37f8:	61 95       	neg	r22
    37fa:	7f 4f       	sbci	r23, 0xFF	; 255

000037fc <__divmodhi4_exit>:
    37fc:	08 95       	ret

000037fe <__udivmodsi4>:
    37fe:	a1 e2       	ldi	r26, 0x21	; 33
    3800:	1a 2e       	mov	r1, r26
    3802:	aa 1b       	sub	r26, r26
    3804:	bb 1b       	sub	r27, r27
    3806:	fd 01       	movw	r30, r26
    3808:	0d c0       	rjmp	.+26     	; 0x3824 <__udivmodsi4_ep>

0000380a <__udivmodsi4_loop>:
    380a:	aa 1f       	adc	r26, r26
    380c:	bb 1f       	adc	r27, r27
    380e:	ee 1f       	adc	r30, r30
    3810:	ff 1f       	adc	r31, r31
    3812:	a2 17       	cp	r26, r18
    3814:	b3 07       	cpc	r27, r19
    3816:	e4 07       	cpc	r30, r20
    3818:	f5 07       	cpc	r31, r21
    381a:	20 f0       	brcs	.+8      	; 0x3824 <__udivmodsi4_ep>
    381c:	a2 1b       	sub	r26, r18
    381e:	b3 0b       	sbc	r27, r19
    3820:	e4 0b       	sbc	r30, r20
    3822:	f5 0b       	sbc	r31, r21

00003824 <__udivmodsi4_ep>:
    3824:	66 1f       	adc	r22, r22
    3826:	77 1f       	adc	r23, r23
    3828:	88 1f       	adc	r24, r24
    382a:	99 1f       	adc	r25, r25
    382c:	1a 94       	dec	r1
    382e:	69 f7       	brne	.-38     	; 0x380a <__udivmodsi4_loop>
    3830:	60 95       	com	r22
    3832:	70 95       	com	r23
    3834:	80 95       	com	r24
    3836:	90 95       	com	r25
    3838:	9b 01       	movw	r18, r22
    383a:	ac 01       	movw	r20, r24
    383c:	bd 01       	movw	r22, r26
    383e:	cf 01       	movw	r24, r30
    3840:	08 95       	ret

00003842 <__tablejump2__>:
    3842:	ee 0f       	add	r30, r30
    3844:	ff 1f       	adc	r31, r31
    3846:	05 90       	lpm	r0, Z+
    3848:	f4 91       	lpm	r31, Z
    384a:	e0 2d       	mov	r30, r0
    384c:	09 94       	ijmp

0000384e <__udivmodhi4>:
    384e:	aa 1b       	sub	r26, r26
    3850:	bb 1b       	sub	r27, r27
    3852:	51 e1       	ldi	r21, 0x11	; 17
    3854:	07 c0       	rjmp	.+14     	; 0x3864 <__udivmodhi4_ep>

00003856 <__udivmodhi4_loop>:
    3856:	aa 1f       	adc	r26, r26
    3858:	bb 1f       	adc	r27, r27
    385a:	a6 17       	cp	r26, r22
    385c:	b7 07       	cpc	r27, r23
    385e:	10 f0       	brcs	.+4      	; 0x3864 <__udivmodhi4_ep>
    3860:	a6 1b       	sub	r26, r22
    3862:	b7 0b       	sbc	r27, r23

00003864 <__udivmodhi4_ep>:
    3864:	88 1f       	adc	r24, r24
    3866:	99 1f       	adc	r25, r25
    3868:	5a 95       	dec	r21
    386a:	a9 f7       	brne	.-22     	; 0x3856 <__udivmodhi4_loop>
    386c:	80 95       	com	r24
    386e:	90 95       	com	r25
    3870:	bc 01       	movw	r22, r24
    3872:	cd 01       	movw	r24, r26
    3874:	08 95       	ret

00003876 <malloc>:
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	82 30       	cpi	r24, 0x02	; 2
    387c:	91 05       	cpc	r25, r1
    387e:	10 f4       	brcc	.+4      	; 0x3884 <malloc+0xe>
    3880:	82 e0       	ldi	r24, 0x02	; 2
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	e0 91 c5 07 	lds	r30, 0x07C5	; 0x8007c5 <__flp>
    3888:	f0 91 c6 07 	lds	r31, 0x07C6	; 0x8007c6 <__flp+0x1>
    388c:	20 e0       	ldi	r18, 0x00	; 0
    388e:	30 e0       	ldi	r19, 0x00	; 0
    3890:	c0 e0       	ldi	r28, 0x00	; 0
    3892:	d0 e0       	ldi	r29, 0x00	; 0
    3894:	30 97       	sbiw	r30, 0x00	; 0
    3896:	11 f1       	breq	.+68     	; 0x38dc <malloc+0x66>
    3898:	40 81       	ld	r20, Z
    389a:	51 81       	ldd	r21, Z+1	; 0x01
    389c:	48 17       	cp	r20, r24
    389e:	59 07       	cpc	r21, r25
    38a0:	c0 f0       	brcs	.+48     	; 0x38d2 <malloc+0x5c>
    38a2:	48 17       	cp	r20, r24
    38a4:	59 07       	cpc	r21, r25
    38a6:	61 f4       	brne	.+24     	; 0x38c0 <malloc+0x4a>
    38a8:	82 81       	ldd	r24, Z+2	; 0x02
    38aa:	93 81       	ldd	r25, Z+3	; 0x03
    38ac:	20 97       	sbiw	r28, 0x00	; 0
    38ae:	19 f0       	breq	.+6      	; 0x38b6 <malloc+0x40>
    38b0:	9b 83       	std	Y+3, r25	; 0x03
    38b2:	8a 83       	std	Y+2, r24	; 0x02
    38b4:	2b c0       	rjmp	.+86     	; 0x390c <malloc+0x96>
    38b6:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <__flp+0x1>
    38ba:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__flp>
    38be:	26 c0       	rjmp	.+76     	; 0x390c <malloc+0x96>
    38c0:	21 15       	cp	r18, r1
    38c2:	31 05       	cpc	r19, r1
    38c4:	19 f0       	breq	.+6      	; 0x38cc <malloc+0x56>
    38c6:	42 17       	cp	r20, r18
    38c8:	53 07       	cpc	r21, r19
    38ca:	18 f4       	brcc	.+6      	; 0x38d2 <malloc+0x5c>
    38cc:	9a 01       	movw	r18, r20
    38ce:	be 01       	movw	r22, r28
    38d0:	df 01       	movw	r26, r30
    38d2:	ef 01       	movw	r28, r30
    38d4:	02 80       	ldd	r0, Z+2	; 0x02
    38d6:	f3 81       	ldd	r31, Z+3	; 0x03
    38d8:	e0 2d       	mov	r30, r0
    38da:	dc cf       	rjmp	.-72     	; 0x3894 <malloc+0x1e>
    38dc:	21 15       	cp	r18, r1
    38de:	31 05       	cpc	r19, r1
    38e0:	09 f1       	breq	.+66     	; 0x3924 <malloc+0xae>
    38e2:	28 1b       	sub	r18, r24
    38e4:	39 0b       	sbc	r19, r25
    38e6:	24 30       	cpi	r18, 0x04	; 4
    38e8:	31 05       	cpc	r19, r1
    38ea:	90 f4       	brcc	.+36     	; 0x3910 <malloc+0x9a>
    38ec:	12 96       	adiw	r26, 0x02	; 2
    38ee:	8d 91       	ld	r24, X+
    38f0:	9c 91       	ld	r25, X
    38f2:	13 97       	sbiw	r26, 0x03	; 3
    38f4:	61 15       	cp	r22, r1
    38f6:	71 05       	cpc	r23, r1
    38f8:	21 f0       	breq	.+8      	; 0x3902 <malloc+0x8c>
    38fa:	fb 01       	movw	r30, r22
    38fc:	93 83       	std	Z+3, r25	; 0x03
    38fe:	82 83       	std	Z+2, r24	; 0x02
    3900:	04 c0       	rjmp	.+8      	; 0x390a <malloc+0x94>
    3902:	90 93 c6 07 	sts	0x07C6, r25	; 0x8007c6 <__flp+0x1>
    3906:	80 93 c5 07 	sts	0x07C5, r24	; 0x8007c5 <__flp>
    390a:	fd 01       	movw	r30, r26
    390c:	32 96       	adiw	r30, 0x02	; 2
    390e:	44 c0       	rjmp	.+136    	; 0x3998 <malloc+0x122>
    3910:	fd 01       	movw	r30, r26
    3912:	e2 0f       	add	r30, r18
    3914:	f3 1f       	adc	r31, r19
    3916:	81 93       	st	Z+, r24
    3918:	91 93       	st	Z+, r25
    391a:	22 50       	subi	r18, 0x02	; 2
    391c:	31 09       	sbc	r19, r1
    391e:	2d 93       	st	X+, r18
    3920:	3c 93       	st	X, r19
    3922:	3a c0       	rjmp	.+116    	; 0x3998 <malloc+0x122>
    3924:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <__brkval>
    3928:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <__brkval+0x1>
    392c:	23 2b       	or	r18, r19
    392e:	41 f4       	brne	.+16     	; 0x3940 <malloc+0xca>
    3930:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3934:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3938:	30 93 c4 07 	sts	0x07C4, r19	; 0x8007c4 <__brkval+0x1>
    393c:	20 93 c3 07 	sts	0x07C3, r18	; 0x8007c3 <__brkval>
    3940:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3944:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3948:	21 15       	cp	r18, r1
    394a:	31 05       	cpc	r19, r1
    394c:	41 f4       	brne	.+16     	; 0x395e <malloc+0xe8>
    394e:	2d b7       	in	r18, 0x3d	; 61
    3950:	3e b7       	in	r19, 0x3e	; 62
    3952:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3956:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    395a:	24 1b       	sub	r18, r20
    395c:	35 0b       	sbc	r19, r21
    395e:	e0 91 c3 07 	lds	r30, 0x07C3	; 0x8007c3 <__brkval>
    3962:	f0 91 c4 07 	lds	r31, 0x07C4	; 0x8007c4 <__brkval+0x1>
    3966:	e2 17       	cp	r30, r18
    3968:	f3 07       	cpc	r31, r19
    396a:	a0 f4       	brcc	.+40     	; 0x3994 <malloc+0x11e>
    396c:	2e 1b       	sub	r18, r30
    396e:	3f 0b       	sbc	r19, r31
    3970:	28 17       	cp	r18, r24
    3972:	39 07       	cpc	r19, r25
    3974:	78 f0       	brcs	.+30     	; 0x3994 <malloc+0x11e>
    3976:	ac 01       	movw	r20, r24
    3978:	4e 5f       	subi	r20, 0xFE	; 254
    397a:	5f 4f       	sbci	r21, 0xFF	; 255
    397c:	24 17       	cp	r18, r20
    397e:	35 07       	cpc	r19, r21
    3980:	48 f0       	brcs	.+18     	; 0x3994 <malloc+0x11e>
    3982:	4e 0f       	add	r20, r30
    3984:	5f 1f       	adc	r21, r31
    3986:	50 93 c4 07 	sts	0x07C4, r21	; 0x8007c4 <__brkval+0x1>
    398a:	40 93 c3 07 	sts	0x07C3, r20	; 0x8007c3 <__brkval>
    398e:	81 93       	st	Z+, r24
    3990:	91 93       	st	Z+, r25
    3992:	02 c0       	rjmp	.+4      	; 0x3998 <malloc+0x122>
    3994:	e0 e0       	ldi	r30, 0x00	; 0
    3996:	f0 e0       	ldi	r31, 0x00	; 0
    3998:	cf 01       	movw	r24, r30
    399a:	df 91       	pop	r29
    399c:	cf 91       	pop	r28
    399e:	08 95       	ret

000039a0 <free>:
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	09 f4       	brne	.+2      	; 0x39ae <free+0xe>
    39ac:	8c c0       	rjmp	.+280    	; 0x3ac6 <free+0x126>
    39ae:	fc 01       	movw	r30, r24
    39b0:	32 97       	sbiw	r30, 0x02	; 2
    39b2:	13 82       	std	Z+3, r1	; 0x03
    39b4:	12 82       	std	Z+2, r1	; 0x02
    39b6:	00 91 c5 07 	lds	r16, 0x07C5	; 0x8007c5 <__flp>
    39ba:	10 91 c6 07 	lds	r17, 0x07C6	; 0x8007c6 <__flp+0x1>
    39be:	01 15       	cp	r16, r1
    39c0:	11 05       	cpc	r17, r1
    39c2:	81 f4       	brne	.+32     	; 0x39e4 <free+0x44>
    39c4:	20 81       	ld	r18, Z
    39c6:	31 81       	ldd	r19, Z+1	; 0x01
    39c8:	82 0f       	add	r24, r18
    39ca:	93 1f       	adc	r25, r19
    39cc:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <__brkval>
    39d0:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <__brkval+0x1>
    39d4:	28 17       	cp	r18, r24
    39d6:	39 07       	cpc	r19, r25
    39d8:	79 f5       	brne	.+94     	; 0x3a38 <free+0x98>
    39da:	f0 93 c4 07 	sts	0x07C4, r31	; 0x8007c4 <__brkval+0x1>
    39de:	e0 93 c3 07 	sts	0x07C3, r30	; 0x8007c3 <__brkval>
    39e2:	71 c0       	rjmp	.+226    	; 0x3ac6 <free+0x126>
    39e4:	d8 01       	movw	r26, r16
    39e6:	40 e0       	ldi	r20, 0x00	; 0
    39e8:	50 e0       	ldi	r21, 0x00	; 0
    39ea:	ae 17       	cp	r26, r30
    39ec:	bf 07       	cpc	r27, r31
    39ee:	50 f4       	brcc	.+20     	; 0x3a04 <free+0x64>
    39f0:	12 96       	adiw	r26, 0x02	; 2
    39f2:	2d 91       	ld	r18, X+
    39f4:	3c 91       	ld	r19, X
    39f6:	13 97       	sbiw	r26, 0x03	; 3
    39f8:	ad 01       	movw	r20, r26
    39fa:	21 15       	cp	r18, r1
    39fc:	31 05       	cpc	r19, r1
    39fe:	09 f1       	breq	.+66     	; 0x3a42 <free+0xa2>
    3a00:	d9 01       	movw	r26, r18
    3a02:	f3 cf       	rjmp	.-26     	; 0x39ea <free+0x4a>
    3a04:	9d 01       	movw	r18, r26
    3a06:	da 01       	movw	r26, r20
    3a08:	33 83       	std	Z+3, r19	; 0x03
    3a0a:	22 83       	std	Z+2, r18	; 0x02
    3a0c:	60 81       	ld	r22, Z
    3a0e:	71 81       	ldd	r23, Z+1	; 0x01
    3a10:	86 0f       	add	r24, r22
    3a12:	97 1f       	adc	r25, r23
    3a14:	82 17       	cp	r24, r18
    3a16:	93 07       	cpc	r25, r19
    3a18:	69 f4       	brne	.+26     	; 0x3a34 <free+0x94>
    3a1a:	ec 01       	movw	r28, r24
    3a1c:	28 81       	ld	r18, Y
    3a1e:	39 81       	ldd	r19, Y+1	; 0x01
    3a20:	26 0f       	add	r18, r22
    3a22:	37 1f       	adc	r19, r23
    3a24:	2e 5f       	subi	r18, 0xFE	; 254
    3a26:	3f 4f       	sbci	r19, 0xFF	; 255
    3a28:	31 83       	std	Z+1, r19	; 0x01
    3a2a:	20 83       	st	Z, r18
    3a2c:	8a 81       	ldd	r24, Y+2	; 0x02
    3a2e:	9b 81       	ldd	r25, Y+3	; 0x03
    3a30:	93 83       	std	Z+3, r25	; 0x03
    3a32:	82 83       	std	Z+2, r24	; 0x02
    3a34:	45 2b       	or	r20, r21
    3a36:	29 f4       	brne	.+10     	; 0x3a42 <free+0xa2>
    3a38:	f0 93 c6 07 	sts	0x07C6, r31	; 0x8007c6 <__flp+0x1>
    3a3c:	e0 93 c5 07 	sts	0x07C5, r30	; 0x8007c5 <__flp>
    3a40:	42 c0       	rjmp	.+132    	; 0x3ac6 <free+0x126>
    3a42:	13 96       	adiw	r26, 0x03	; 3
    3a44:	fc 93       	st	X, r31
    3a46:	ee 93       	st	-X, r30
    3a48:	12 97       	sbiw	r26, 0x02	; 2
    3a4a:	ed 01       	movw	r28, r26
    3a4c:	49 91       	ld	r20, Y+
    3a4e:	59 91       	ld	r21, Y+
    3a50:	9e 01       	movw	r18, r28
    3a52:	24 0f       	add	r18, r20
    3a54:	35 1f       	adc	r19, r21
    3a56:	e2 17       	cp	r30, r18
    3a58:	f3 07       	cpc	r31, r19
    3a5a:	71 f4       	brne	.+28     	; 0x3a78 <free+0xd8>
    3a5c:	80 81       	ld	r24, Z
    3a5e:	91 81       	ldd	r25, Z+1	; 0x01
    3a60:	84 0f       	add	r24, r20
    3a62:	95 1f       	adc	r25, r21
    3a64:	02 96       	adiw	r24, 0x02	; 2
    3a66:	11 96       	adiw	r26, 0x01	; 1
    3a68:	9c 93       	st	X, r25
    3a6a:	8e 93       	st	-X, r24
    3a6c:	82 81       	ldd	r24, Z+2	; 0x02
    3a6e:	93 81       	ldd	r25, Z+3	; 0x03
    3a70:	13 96       	adiw	r26, 0x03	; 3
    3a72:	9c 93       	st	X, r25
    3a74:	8e 93       	st	-X, r24
    3a76:	12 97       	sbiw	r26, 0x02	; 2
    3a78:	e0 e0       	ldi	r30, 0x00	; 0
    3a7a:	f0 e0       	ldi	r31, 0x00	; 0
    3a7c:	d8 01       	movw	r26, r16
    3a7e:	12 96       	adiw	r26, 0x02	; 2
    3a80:	8d 91       	ld	r24, X+
    3a82:	9c 91       	ld	r25, X
    3a84:	13 97       	sbiw	r26, 0x03	; 3
    3a86:	00 97       	sbiw	r24, 0x00	; 0
    3a88:	19 f0       	breq	.+6      	; 0x3a90 <free+0xf0>
    3a8a:	f8 01       	movw	r30, r16
    3a8c:	8c 01       	movw	r16, r24
    3a8e:	f6 cf       	rjmp	.-20     	; 0x3a7c <free+0xdc>
    3a90:	8d 91       	ld	r24, X+
    3a92:	9c 91       	ld	r25, X
    3a94:	98 01       	movw	r18, r16
    3a96:	2e 5f       	subi	r18, 0xFE	; 254
    3a98:	3f 4f       	sbci	r19, 0xFF	; 255
    3a9a:	82 0f       	add	r24, r18
    3a9c:	93 1f       	adc	r25, r19
    3a9e:	20 91 c3 07 	lds	r18, 0x07C3	; 0x8007c3 <__brkval>
    3aa2:	30 91 c4 07 	lds	r19, 0x07C4	; 0x8007c4 <__brkval+0x1>
    3aa6:	28 17       	cp	r18, r24
    3aa8:	39 07       	cpc	r19, r25
    3aaa:	69 f4       	brne	.+26     	; 0x3ac6 <free+0x126>
    3aac:	30 97       	sbiw	r30, 0x00	; 0
    3aae:	29 f4       	brne	.+10     	; 0x3aba <free+0x11a>
    3ab0:	10 92 c6 07 	sts	0x07C6, r1	; 0x8007c6 <__flp+0x1>
    3ab4:	10 92 c5 07 	sts	0x07C5, r1	; 0x8007c5 <__flp>
    3ab8:	02 c0       	rjmp	.+4      	; 0x3abe <free+0x11e>
    3aba:	13 82       	std	Z+3, r1	; 0x03
    3abc:	12 82       	std	Z+2, r1	; 0x02
    3abe:	10 93 c4 07 	sts	0x07C4, r17	; 0x8007c4 <__brkval+0x1>
    3ac2:	00 93 c3 07 	sts	0x07C3, r16	; 0x8007c3 <__brkval>
    3ac6:	df 91       	pop	r29
    3ac8:	cf 91       	pop	r28
    3aca:	1f 91       	pop	r17
    3acc:	0f 91       	pop	r16
    3ace:	08 95       	ret

00003ad0 <do_rand>:
    3ad0:	8f 92       	push	r8
    3ad2:	9f 92       	push	r9
    3ad4:	af 92       	push	r10
    3ad6:	bf 92       	push	r11
    3ad8:	cf 92       	push	r12
    3ada:	df 92       	push	r13
    3adc:	ef 92       	push	r14
    3ade:	ff 92       	push	r15
    3ae0:	cf 93       	push	r28
    3ae2:	df 93       	push	r29
    3ae4:	ec 01       	movw	r28, r24
    3ae6:	68 81       	ld	r22, Y
    3ae8:	79 81       	ldd	r23, Y+1	; 0x01
    3aea:	8a 81       	ldd	r24, Y+2	; 0x02
    3aec:	9b 81       	ldd	r25, Y+3	; 0x03
    3aee:	61 15       	cp	r22, r1
    3af0:	71 05       	cpc	r23, r1
    3af2:	81 05       	cpc	r24, r1
    3af4:	91 05       	cpc	r25, r1
    3af6:	21 f4       	brne	.+8      	; 0x3b00 <do_rand+0x30>
    3af8:	64 e2       	ldi	r22, 0x24	; 36
    3afa:	79 ed       	ldi	r23, 0xD9	; 217
    3afc:	8b e5       	ldi	r24, 0x5B	; 91
    3afe:	97 e0       	ldi	r25, 0x07	; 7
    3b00:	2d e1       	ldi	r18, 0x1D	; 29
    3b02:	33 ef       	ldi	r19, 0xF3	; 243
    3b04:	41 e0       	ldi	r20, 0x01	; 1
    3b06:	50 e0       	ldi	r21, 0x00	; 0
    3b08:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <__divmodsi4>
    3b0c:	49 01       	movw	r8, r18
    3b0e:	5a 01       	movw	r10, r20
    3b10:	9b 01       	movw	r18, r22
    3b12:	ac 01       	movw	r20, r24
    3b14:	a7 ea       	ldi	r26, 0xA7	; 167
    3b16:	b1 e4       	ldi	r27, 0x41	; 65
    3b18:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__muluhisi3>
    3b1c:	6b 01       	movw	r12, r22
    3b1e:	7c 01       	movw	r14, r24
    3b20:	ac ee       	ldi	r26, 0xEC	; 236
    3b22:	b4 ef       	ldi	r27, 0xF4	; 244
    3b24:	a5 01       	movw	r20, r10
    3b26:	94 01       	movw	r18, r8
    3b28:	0e 94 01 1e 	call	0x3c02	; 0x3c02 <__mulohisi3>
    3b2c:	dc 01       	movw	r26, r24
    3b2e:	cb 01       	movw	r24, r22
    3b30:	8c 0d       	add	r24, r12
    3b32:	9d 1d       	adc	r25, r13
    3b34:	ae 1d       	adc	r26, r14
    3b36:	bf 1d       	adc	r27, r15
    3b38:	b7 ff       	sbrs	r27, 7
    3b3a:	03 c0       	rjmp	.+6      	; 0x3b42 <do_rand+0x72>
    3b3c:	01 97       	sbiw	r24, 0x01	; 1
    3b3e:	a1 09       	sbc	r26, r1
    3b40:	b0 48       	sbci	r27, 0x80	; 128
    3b42:	88 83       	st	Y, r24
    3b44:	99 83       	std	Y+1, r25	; 0x01
    3b46:	aa 83       	std	Y+2, r26	; 0x02
    3b48:	bb 83       	std	Y+3, r27	; 0x03
    3b4a:	9f 77       	andi	r25, 0x7F	; 127
    3b4c:	df 91       	pop	r29
    3b4e:	cf 91       	pop	r28
    3b50:	ff 90       	pop	r15
    3b52:	ef 90       	pop	r14
    3b54:	df 90       	pop	r13
    3b56:	cf 90       	pop	r12
    3b58:	bf 90       	pop	r11
    3b5a:	af 90       	pop	r10
    3b5c:	9f 90       	pop	r9
    3b5e:	8f 90       	pop	r8
    3b60:	08 95       	ret

00003b62 <rand_r>:
    3b62:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <do_rand>
    3b66:	08 95       	ret

00003b68 <rand>:
    3b68:	86 e0       	ldi	r24, 0x06	; 6
    3b6a:	91 e0       	ldi	r25, 0x01	; 1
    3b6c:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <do_rand>
    3b70:	08 95       	ret

00003b72 <srand>:
    3b72:	a0 e0       	ldi	r26, 0x00	; 0
    3b74:	b0 e0       	ldi	r27, 0x00	; 0
    3b76:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3b7a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3b7e:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3b82:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3b86:	08 95       	ret

00003b88 <memcpy>:
    3b88:	fb 01       	movw	r30, r22
    3b8a:	dc 01       	movw	r26, r24
    3b8c:	02 c0       	rjmp	.+4      	; 0x3b92 <memcpy+0xa>
    3b8e:	01 90       	ld	r0, Z+
    3b90:	0d 92       	st	X+, r0
    3b92:	41 50       	subi	r20, 0x01	; 1
    3b94:	50 40       	sbci	r21, 0x00	; 0
    3b96:	d8 f7       	brcc	.-10     	; 0x3b8e <memcpy+0x6>
    3b98:	08 95       	ret

00003b9a <memset>:
    3b9a:	dc 01       	movw	r26, r24
    3b9c:	01 c0       	rjmp	.+2      	; 0x3ba0 <memset+0x6>
    3b9e:	6d 93       	st	X+, r22
    3ba0:	41 50       	subi	r20, 0x01	; 1
    3ba2:	50 40       	sbci	r21, 0x00	; 0
    3ba4:	e0 f7       	brcc	.-8      	; 0x3b9e <memset+0x4>
    3ba6:	08 95       	ret

00003ba8 <__divmodsi4>:
    3ba8:	05 2e       	mov	r0, r21
    3baa:	97 fb       	bst	r25, 7
    3bac:	1e f4       	brtc	.+6      	; 0x3bb4 <__divmodsi4+0xc>
    3bae:	00 94       	com	r0
    3bb0:	0e 94 eb 1d 	call	0x3bd6	; 0x3bd6 <__negsi2>
    3bb4:	57 fd       	sbrc	r21, 7
    3bb6:	07 d0       	rcall	.+14     	; 0x3bc6 <__divmodsi4_neg2>
    3bb8:	0e 94 ff 1b 	call	0x37fe	; 0x37fe <__udivmodsi4>
    3bbc:	07 fc       	sbrc	r0, 7
    3bbe:	03 d0       	rcall	.+6      	; 0x3bc6 <__divmodsi4_neg2>
    3bc0:	4e f4       	brtc	.+18     	; 0x3bd4 <__divmodsi4_exit>
    3bc2:	0c 94 eb 1d 	jmp	0x3bd6	; 0x3bd6 <__negsi2>

00003bc6 <__divmodsi4_neg2>:
    3bc6:	50 95       	com	r21
    3bc8:	40 95       	com	r20
    3bca:	30 95       	com	r19
    3bcc:	21 95       	neg	r18
    3bce:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd0:	4f 4f       	sbci	r20, 0xFF	; 255
    3bd2:	5f 4f       	sbci	r21, 0xFF	; 255

00003bd4 <__divmodsi4_exit>:
    3bd4:	08 95       	ret

00003bd6 <__negsi2>:
    3bd6:	90 95       	com	r25
    3bd8:	80 95       	com	r24
    3bda:	70 95       	com	r23
    3bdc:	61 95       	neg	r22
    3bde:	7f 4f       	sbci	r23, 0xFF	; 255
    3be0:	8f 4f       	sbci	r24, 0xFF	; 255
    3be2:	9f 4f       	sbci	r25, 0xFF	; 255
    3be4:	08 95       	ret

00003be6 <__muluhisi3>:
    3be6:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__umulhisi3>
    3bea:	a5 9f       	mul	r26, r21
    3bec:	90 0d       	add	r25, r0
    3bee:	b4 9f       	mul	r27, r20
    3bf0:	90 0d       	add	r25, r0
    3bf2:	a4 9f       	mul	r26, r20
    3bf4:	80 0d       	add	r24, r0
    3bf6:	91 1d       	adc	r25, r1
    3bf8:	11 24       	eor	r1, r1
    3bfa:	08 95       	ret

00003bfc <__mulshisi3>:
    3bfc:	b7 ff       	sbrs	r27, 7
    3bfe:	0c 94 f3 1d 	jmp	0x3be6	; 0x3be6 <__muluhisi3>

00003c02 <__mulohisi3>:
    3c02:	0e 94 f3 1d 	call	0x3be6	; 0x3be6 <__muluhisi3>
    3c06:	82 1b       	sub	r24, r18
    3c08:	93 0b       	sbc	r25, r19
    3c0a:	08 95       	ret

00003c0c <__umulhisi3>:
    3c0c:	a2 9f       	mul	r26, r18
    3c0e:	b0 01       	movw	r22, r0
    3c10:	b3 9f       	mul	r27, r19
    3c12:	c0 01       	movw	r24, r0
    3c14:	a3 9f       	mul	r26, r19
    3c16:	70 0d       	add	r23, r0
    3c18:	81 1d       	adc	r24, r1
    3c1a:	11 24       	eor	r1, r1
    3c1c:	91 1d       	adc	r25, r1
    3c1e:	b2 9f       	mul	r27, r18
    3c20:	70 0d       	add	r23, r0
    3c22:	81 1d       	adc	r24, r1
    3c24:	11 24       	eor	r1, r1
    3c26:	91 1d       	adc	r25, r1
    3c28:	08 95       	ret

00003c2a <_exit>:
    3c2a:	f8 94       	cli

00003c2c <__stop_program>:
    3c2c:	ff cf       	rjmp	.-2      	; 0x3c2c <__stop_program>
