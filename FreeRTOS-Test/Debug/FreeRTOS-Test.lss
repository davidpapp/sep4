
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  00002db0  00002e44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002db0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000028c  00800146  00800146  00002e8a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002e8a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ebc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000488  00000000  00000000  00002efc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003455  00000000  00000000  00003384  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ae9  00000000  00000000  000067d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002f3f  00000000  00000000  000072c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000011cc  00000000  00000000  0000a204  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000178c  00000000  00000000  0000b3d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000025f4  00000000  00000000  0000cb5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003f8  00000000  00000000  0000f150  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 08 08 	jmp	0x1010	; 0x1010 <__vector_13>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 2d 02 	jmp	0x45a	; 0x45a <__vector_16>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <__vector_20>
      54:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <__vector_21>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 56 0a 	jmp	0x14ac	; 0x14ac <__vector_28>
      74:	0c 94 ae 0a 	jmp	0x155c	; 0x155c <__vector_29>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	d8 e0       	ldi	r29, 0x08	; 8
      84:	de bf       	out	0x3e, r29	; 62
      86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
      88:	11 e0       	ldi	r17, 0x01	; 1
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b1 e0       	ldi	r27, 0x01	; 1
      8e:	e0 eb       	ldi	r30, 0xB0	; 176
      90:	fd e2       	ldi	r31, 0x2D	; 45
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 34       	cpi	r26, 0x46	; 70
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	23 e0       	ldi	r18, 0x03	; 3
      a0:	a6 e4       	ldi	r26, 0x46	; 70
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	a2 3d       	cpi	r26, 0xD2	; 210
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 7e 01 	call	0x2fc	; 0x2fc <main>
      b2:	0c 94 d6 16 	jmp	0x2dac	; 0x2dac <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <echo_task>:
				col_value[0] <<= 1;
			}
			
		}
		vTaskDelay(60);
	}
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	00 d0       	rcall	.+0      	; 0xc0 <echo_task+0x6>
      c0:	1f 92       	push	r1
      c2:	cd b7       	in	r28, 0x3d	; 61
      c4:	de b7       	in	r29, 0x3e	; 62
      c6:	9b 83       	std	Y+3, r25	; 0x03
      c8:	8a 83       	std	Y+2, r24	; 0x02
      ca:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
      ce:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
      d2:	89 2b       	or	r24, r25
      d4:	09 f4       	brne	.+2      	; 0xd8 <echo_task+0x1e>
      d6:	4c c0       	rjmp	.+152    	; 0x170 <echo_task+0xb6>
      d8:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
      dc:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	4a e0       	ldi	r20, 0x0A	; 10
      e4:	50 e0       	ldi	r21, 0x00	; 0
      e6:	be 01       	movw	r22, r28
      e8:	6f 5f       	subi	r22, 0xFF	; 255
      ea:	7f 4f       	sbci	r23, 0xFF	; 255
      ec:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xQueueGenericReceive>
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	81 36       	cpi	r24, 0x61	; 97
      f4:	e9 f5       	brne	.+122    	; 0x170 <echo_task+0xb6>
      f6:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
      fa:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	4a e0       	ldi	r20, 0x0A	; 10
     102:	50 e0       	ldi	r21, 0x00	; 0
     104:	be 01       	movw	r22, r28
     106:	6f 5f       	subi	r22, 0xFF	; 255
     108:	7f 4f       	sbci	r23, 0xFF	; 255
     10a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xQueueGenericReceive>
     10e:	2d c0       	rjmp	.+90     	; 0x16a <echo_task+0xb0>
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	81 34       	cpi	r24, 0x41	; 65
     114:	61 f4       	brne	.+24     	; 0x12e <echo_task+0x74>
     116:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     11a:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     11e:	20 e0       	ldi	r18, 0x00	; 0
     120:	4a e0       	ldi	r20, 0x0A	; 10
     122:	50 e0       	ldi	r21, 0x00	; 0
     124:	be 01       	movw	r22, r28
     126:	6f 5f       	subi	r22, 0xFF	; 255
     128:	7f 4f       	sbci	r23, 0xFF	; 255
     12a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xQueueGenericReceive>
     12e:	61 e0       	ldi	r22, 0x01	; 1
     130:	ce 01       	movw	r24, r28
     132:	01 96       	adiw	r24, 0x01	; 1
     134:	0e 94 63 02 	call	0x4c6	; 0x4c6 <com_send_bytes>
     138:	89 81       	ldd	r24, Y+1	; 0x01
     13a:	82 36       	cpi	r24, 0x62	; 98
     13c:	51 f4       	brne	.+20     	; 0x152 <echo_task+0x98>
     13e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <col_value>
     142:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <col_value+0x1>
     146:	96 95       	lsr	r25
     148:	87 95       	ror	r24
     14a:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <col_value+0x1>
     14e:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <col_value>
     152:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     156:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	4a e0       	ldi	r20, 0x0A	; 10
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	be 01       	movw	r22, r28
     162:	6f 5f       	subi	r22, 0xFF	; 255
     164:	7f 4f       	sbci	r23, 0xFF	; 255
     166:	0e 94 8b 0c 	call	0x1916	; 0x1916 <xQueueGenericReceive>
     16a:	89 81       	ldd	r24, Y+1	; 0x01
     16c:	81 36       	cpi	r24, 0x61	; 97
     16e:	81 f6       	brne	.-96     	; 0x110 <echo_task+0x56>
     170:	ac cf       	rjmp	.-168    	; 0xca <echo_task+0x10>

00000172 <game_task>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	00 d0       	rcall	.+0      	; 0x178 <game_task+0x6>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	9a 83       	std	Y+2, r25	; 0x02
     17e:	89 83       	std	Y+1, r24	; 0x01
     180:	86 e2       	ldi	r24, 0x26	; 38
     182:	90 e0       	ldi	r25, 0x00	; 0
     184:	fc 01       	movw	r30, r24
     186:	80 81       	ld	r24, Z
     188:	88 2f       	mov	r24, r24
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	80 74       	andi	r24, 0x40	; 64
     18e:	99 27       	eor	r25, r25
     190:	89 2b       	or	r24, r25
     192:	81 f4       	brne	.+32     	; 0x1b4 <game_task+0x42>
     194:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <col_value>
     198:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <col_value+0x1>
     19c:	04 97       	sbiw	r24, 0x04	; 4
     19e:	50 f0       	brcs	.+20     	; 0x1b4 <game_task+0x42>
     1a0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <col_value>
     1a4:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <col_value+0x1>
     1a8:	96 95       	lsr	r25
     1aa:	87 95       	ror	r24
     1ac:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <col_value+0x1>
     1b0:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <col_value>
     1b4:	86 e2       	ldi	r24, 0x26	; 38
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	fc 01       	movw	r30, r24
     1ba:	80 81       	ld	r24, Z
     1bc:	88 2f       	mov	r24, r24
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	81 70       	andi	r24, 0x01	; 1
     1c2:	99 27       	eor	r25, r25
     1c4:	89 2b       	or	r24, r25
     1c6:	89 f4       	brne	.+34     	; 0x1ea <game_task+0x78>
     1c8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <col_value>
     1cc:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <col_value+0x1>
     1d0:	81 15       	cp	r24, r1
     1d2:	93 40       	sbci	r25, 0x03	; 3
     1d4:	50 f4       	brcc	.+20     	; 0x1ea <game_task+0x78>
     1d6:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <col_value>
     1da:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <col_value+0x1>
     1de:	88 0f       	add	r24, r24
     1e0:	99 1f       	adc	r25, r25
     1e2:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <col_value+0x1>
     1e6:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <col_value>
     1ea:	8c e3       	ldi	r24, 0x3C	; 60
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	0e 94 b6 10 	call	0x216c	; 0x216c <vTaskDelay>
     1f2:	c6 cf       	rjmp	.-116    	; 0x180 <game_task+0xe>

000001f4 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     1fc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <col_index>
     200:	88 23       	and	r24, r24
     202:	49 f4       	brne	.+18     	; 0x216 <handle_display+0x22>
		PORTD |= _BV(PORTD2);
     204:	8b e2       	ldi	r24, 0x2B	; 43
     206:	90 e0       	ldi	r25, 0x00	; 0
     208:	2b e2       	ldi	r18, 0x2B	; 43
     20a:	30 e0       	ldi	r19, 0x00	; 0
     20c:	f9 01       	movw	r30, r18
     20e:	20 81       	ld	r18, Z
     210:	24 60       	ori	r18, 0x04	; 4
     212:	fc 01       	movw	r30, r24
     214:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     216:	8b e2       	ldi	r24, 0x2B	; 43
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	2b e2       	ldi	r18, 0x2B	; 43
     21c:	30 e0       	ldi	r19, 0x00	; 0
     21e:	f9 01       	movw	r30, r18
     220:	20 81       	ld	r18, Z
     222:	20 62       	ori	r18, 0x20	; 32
     224:	fc 01       	movw	r30, r24
     226:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     228:	8b e2       	ldi	r24, 0x2B	; 43
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	2b e2       	ldi	r18, 0x2B	; 43
     22e:	30 e0       	ldi	r19, 0x00	; 0
     230:	f9 01       	movw	r30, r18
     232:	20 81       	ld	r18, Z
     234:	2f 7d       	andi	r18, 0xDF	; 223
     236:	fc 01       	movw	r30, r24
     238:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     23a:	8b e2       	ldi	r24, 0x2B	; 43
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	2b e2       	ldi	r18, 0x2B	; 43
     240:	30 e0       	ldi	r19, 0x00	; 0
     242:	f9 01       	movw	r30, r18
     244:	20 81       	ld	r18, Z
     246:	20 61       	ori	r18, 0x10	; 16
     248:	fc 01       	movw	r30, r24
     24a:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     24c:	8b e2       	ldi	r24, 0x2B	; 43
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	2b e2       	ldi	r18, 0x2B	; 43
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	f9 01       	movw	r30, r18
     256:	20 81       	ld	r18, Z
     258:	2f 7e       	andi	r18, 0xEF	; 239
     25a:	fc 01       	movw	r30, r24
     25c:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     25e:	82 e2       	ldi	r24, 0x22	; 34
     260:	90 e0       	ldi	r25, 0x00	; 0
     262:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <col_index>
     266:	22 2f       	mov	r18, r18
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	22 0f       	add	r18, r18
     26c:	33 1f       	adc	r19, r19
     26e:	2a 5f       	subi	r18, 0xFA	; 250
     270:	3e 4f       	sbci	r19, 0xFE	; 254
     272:	f9 01       	movw	r30, r18
     274:	20 81       	ld	r18, Z
     276:	31 81       	ldd	r19, Z+1	; 0x01
     278:	20 95       	com	r18
     27a:	fc 01       	movw	r30, r24
     27c:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     27e:	85 e2       	ldi	r24, 0x25	; 37
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	25 e2       	ldi	r18, 0x25	; 37
     284:	30 e0       	ldi	r19, 0x00	; 0
     286:	f9 01       	movw	r30, r18
     288:	20 81       	ld	r18, Z
     28a:	23 60       	ori	r18, 0x03	; 3
     28c:	fc 01       	movw	r30, r24
     28e:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     290:	85 e2       	ldi	r24, 0x25	; 37
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	25 e2       	ldi	r18, 0x25	; 37
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	f9 01       	movw	r30, r18
     29a:	40 81       	ld	r20, Z
     29c:	20 91 48 01 	lds	r18, 0x0148	; 0x800148 <col_index>
     2a0:	22 2f       	mov	r18, r18
     2a2:	30 e0       	ldi	r19, 0x00	; 0
     2a4:	22 0f       	add	r18, r18
     2a6:	33 1f       	adc	r19, r19
     2a8:	2a 5f       	subi	r18, 0xFA	; 250
     2aa:	3e 4f       	sbci	r19, 0xFE	; 254
     2ac:	f9 01       	movw	r30, r18
     2ae:	20 81       	ld	r18, Z
     2b0:	31 81       	ldd	r19, Z+1	; 0x01
     2b2:	23 2f       	mov	r18, r19
     2b4:	33 27       	eor	r19, r19
     2b6:	23 70       	andi	r18, 0x03	; 3
     2b8:	20 95       	com	r18
     2ba:	24 23       	and	r18, r20
     2bc:	fc 01       	movw	r30, r24
     2be:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     2c0:	8b e2       	ldi	r24, 0x2B	; 43
     2c2:	90 e0       	ldi	r25, 0x00	; 0
     2c4:	2b e2       	ldi	r18, 0x2B	; 43
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	f9 01       	movw	r30, r18
     2ca:	20 81       	ld	r18, Z
     2cc:	2b 7f       	andi	r18, 0xFB	; 251
     2ce:	fc 01       	movw	r30, r24
     2d0:	20 83       	st	Z, r18

	++col_index;
     2d2:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <col_index>
     2d6:	8f 5f       	subi	r24, 0xFF	; 255
     2d8:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <col_index>
	if (col_index > 13){
     2dc:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <col_index>
     2e0:	8e 30       	cpi	r24, 0x0E	; 14
     2e2:	10 f0       	brcs	.+4      	; 0x2e8 <handle_display+0xf4>
		col_index = 0;
     2e4:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <col_index>
	}

}
     2e8:	df 91       	pop	r29
     2ea:	cf 91       	pop	r28
     2ec:	08 95       	ret

000002ee <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
	//
}
     2f6:	df 91       	pop	r29
     2f8:	cf 91       	pop	r28
     2fa:	08 95       	ret

000002fc <main>:

//-----------------------------------------
int main(void)
{
     2fc:	ef 92       	push	r14
     2fe:	ff 92       	push	r15
     300:	0f 93       	push	r16
     302:	cf 93       	push	r28
     304:	df 93       	push	r29
     306:	cd b7       	in	r28, 0x3d	; 61
     308:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     30a:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     30e:	8b e2       	ldi	r24, 0x2B	; 43
     310:	90 e0       	ldi	r25, 0x00	; 0
     312:	2b e2       	ldi	r18, 0x2B	; 43
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	f9 01       	movw	r30, r18
     318:	20 81       	ld	r18, Z
     31a:	2f 7b       	andi	r18, 0xBF	; 191
     31c:	fc 01       	movw	r30, r24
     31e:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     320:	8e e1       	ldi	r24, 0x1E	; 30
     322:	40 e0       	ldi	r20, 0x00	; 0
     324:	61 e0       	ldi	r22, 0x01	; 1
     326:	0e 94 9c 0b 	call	0x1738	; 0x1738 <xQueueGenericCreate>
     32a:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <__data_end+0x1>
     32e:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <__data_end>
	init_com(_x_com_received_chars_queue);
     332:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <__data_end>
     336:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <__data_end+0x1>
     33a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <init_com>

	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     33e:	e1 2c       	mov	r14, r1
     340:	f1 2c       	mov	r15, r1
     342:	04 e0       	ldi	r16, 0x04	; 4
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	45 e5       	ldi	r20, 0x55	; 85
     34a:	50 e0       	ldi	r21, 0x00	; 0
     34c:	66 e3       	ldi	r22, 0x36	; 54
     34e:	71 e0       	ldi	r23, 0x01	; 1
     350:	8d e5       	ldi	r24, 0x5D	; 93
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <xTaskCreate>
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     358:	e1 2c       	mov	r14, r1
     35a:	f1 2c       	mov	r15, r1
     35c:	02 e0       	ldi	r16, 0x02	; 2
     35e:	20 e0       	ldi	r18, 0x00	; 0
     360:	30 e0       	ldi	r19, 0x00	; 0
     362:	45 e5       	ldi	r20, 0x55	; 85
     364:	50 e0       	ldi	r21, 0x00	; 0
     366:	6b e3       	ldi	r22, 0x3B	; 59
     368:	71 e0       	ldi	r23, 0x01	; 1
     36a:	89 eb       	ldi	r24, 0xB9	; 185
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     372:	8a ef       	ldi	r24, 0xFA	; 250
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     37a:	0e 94 d8 10 	call	0x21b0	; 0x21b0 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     37e:	ff cf       	rjmp	.-2      	; 0x37e <main+0x82>

00000380 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	00 d0       	rcall	.+0      	; 0x386 <_com_call_back+0x6>
     386:	00 d0       	rcall	.+0      	; 0x388 <_com_call_back+0x8>
     388:	cd b7       	in	r28, 0x3d	; 61
     38a:	de b7       	in	r29, 0x3e	; 62
     38c:	9b 83       	std	Y+3, r25	; 0x03
     38e:	8a 83       	std	Y+2, r24	; 0x02
     390:	6c 83       	std	Y+4, r22	; 0x04
	if (_x_rx_com_queue) {
     392:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_x_rx_com_queue>
     396:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_x_rx_com_queue+0x1>
     39a:	89 2b       	or	r24, r25
     39c:	99 f0       	breq	.+38     	; 0x3c4 <_com_call_back+0x44>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     39e:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
     3a0:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <_x_rx_com_queue>
     3a4:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <_x_rx_com_queue+0x1>
     3a8:	be 01       	movw	r22, r28
     3aa:	6c 5f       	subi	r22, 0xFC	; 252
     3ac:	7f 4f       	sbci	r23, 0xFF	; 255
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	ae 01       	movw	r20, r28
     3b2:	4f 5f       	subi	r20, 0xFF	; 255
     3b4:	5f 4f       	sbci	r21, 0xFF	; 255
     3b6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
     3ba:	89 81       	ldd	r24, Y+1	; 0x01
     3bc:	88 23       	and	r24, r24
     3be:	11 f0       	breq	.+4      	; 0x3c4 <_com_call_back+0x44>
		{
			taskYIELD();
     3c0:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
		}
	}
}
     3c4:	0f 90       	pop	r0
     3c6:	0f 90       	pop	r0
     3c8:	0f 90       	pop	r0
     3ca:	0f 90       	pop	r0
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	08 95       	ret

000003d2 <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	00 d0       	rcall	.+0      	; 0x3d8 <init_com+0x6>
     3d8:	cd b7       	in	r28, 0x3d	; 61
     3da:	de b7       	in	r29, 0x3e	; 62
     3dc:	9a 83       	std	Y+2, r25	; 0x02
     3de:	89 83       	std	Y+1, r24	; 0x01
	_x_rx_com_queue = x_rx_queue;
     3e0:	89 81       	ldd	r24, Y+1	; 0x01
     3e2:	9a 81       	ldd	r25, Y+2	; 0x02
     3e4:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <_x_rx_com_queue+0x1>
     3e8:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <_x_rx_com_queue>
}
     3ec:	0f 90       	pop	r0
     3ee:	0f 90       	pop	r0
     3f0:	df 91       	pop	r29
     3f2:	cf 91       	pop	r28
     3f4:	08 95       	ret

000003f6 <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     3f6:	cf 93       	push	r28
     3f8:	df 93       	push	r29
     3fa:	00 d0       	rcall	.+0      	; 0x3fc <init_display_timer+0x6>
     3fc:	cd b7       	in	r28, 0x3d	; 61
     3fe:	de b7       	in	r29, 0x3e	; 62
     400:	9a 83       	std	Y+2, r25	; 0x02
     402:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     404:	89 81       	ldd	r24, Y+1	; 0x01
     406:	9a 81       	ldd	r25, Y+2	; 0x02
     408:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <cb_ptr+0x1>
     40c:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     410:	87 e4       	ldi	r24, 0x47	; 71
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	2a e0       	ldi	r18, 0x0A	; 10
     416:	fc 01       	movw	r30, r24
     418:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     41a:	84 e4       	ldi	r24, 0x44	; 68
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	24 e4       	ldi	r18, 0x44	; 68
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	20 81       	ld	r18, Z
     426:	22 60       	ori	r18, 0x02	; 2
     428:	fc 01       	movw	r30, r24
     42a:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     42c:	8e e6       	ldi	r24, 0x6E	; 110
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2e e6       	ldi	r18, 0x6E	; 110
     432:	30 e0       	ldi	r19, 0x00	; 0
     434:	f9 01       	movw	r30, r18
     436:	20 81       	ld	r18, Z
     438:	22 60       	ori	r18, 0x02	; 2
     43a:	fc 01       	movw	r30, r24
     43c:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     43e:	85 e4       	ldi	r24, 0x45	; 69
     440:	90 e0       	ldi	r25, 0x00	; 0
     442:	25 e4       	ldi	r18, 0x45	; 69
     444:	30 e0       	ldi	r19, 0x00	; 0
     446:	f9 01       	movw	r30, r18
     448:	20 81       	ld	r18, Z
     44a:	25 60       	ori	r18, 0x05	; 5
     44c:	fc 01       	movw	r30, r24
     44e:	20 83       	st	Z, r18
}
     450:	0f 90       	pop	r0
     452:	0f 90       	pop	r0
     454:	df 91       	pop	r29
     456:	cf 91       	pop	r28
     458:	08 95       	ret

0000045a <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     45a:	1f 92       	push	r1
     45c:	0f 92       	push	r0
     45e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     462:	0f 92       	push	r0
     464:	11 24       	eor	r1, r1
     466:	2f 93       	push	r18
     468:	3f 93       	push	r19
     46a:	4f 93       	push	r20
     46c:	5f 93       	push	r21
     46e:	6f 93       	push	r22
     470:	7f 93       	push	r23
     472:	8f 93       	push	r24
     474:	9f 93       	push	r25
     476:	af 93       	push	r26
     478:	bf 93       	push	r27
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
     47e:	cf 93       	push	r28
     480:	df 93       	push	r29
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     486:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cb_ptr>
     48a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cb_ptr+0x1>
     48e:	89 2b       	or	r24, r25
     490:	31 f0       	breq	.+12     	; 0x49e <__vector_16+0x44>
	{
		cb_ptr();
     492:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <cb_ptr>
     496:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <cb_ptr+0x1>
     49a:	fc 01       	movw	r30, r24
     49c:	09 95       	icall
	}
}
     49e:	df 91       	pop	r29
     4a0:	cf 91       	pop	r28
     4a2:	ff 91       	pop	r31
     4a4:	ef 91       	pop	r30
     4a6:	bf 91       	pop	r27
     4a8:	af 91       	pop	r26
     4aa:	9f 91       	pop	r25
     4ac:	8f 91       	pop	r24
     4ae:	7f 91       	pop	r23
     4b0:	6f 91       	pop	r22
     4b2:	5f 91       	pop	r21
     4b4:	4f 91       	pop	r20
     4b6:	3f 91       	pop	r19
     4b8:	2f 91       	pop	r18
     4ba:	0f 90       	pop	r0
     4bc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     4c0:	0f 90       	pop	r0
     4c2:	1f 90       	pop	r1
     4c4:	18 95       	reti

000004c6 <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	00 d0       	rcall	.+0      	; 0x4cc <com_send_bytes+0x6>
     4cc:	1f 92       	push	r1
     4ce:	cd b7       	in	r28, 0x3d	; 61
     4d0:	de b7       	in	r29, 0x3e	; 62
     4d2:	9a 83       	std	Y+2, r25	; 0x02
     4d4:	89 83       	std	Y+1, r24	; 0x01
     4d6:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     4d8:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <_com_serial_instance>
     4dc:	90 91 4a 01 	lds	r25, 0x014A	; 0x80014a <_com_serial_instance+0x1>
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	4b 81       	ldd	r20, Y+3	; 0x03
     4e6:	b9 01       	movw	r22, r18
     4e8:	0e 94 45 09 	call	0x128a	; 0x128a <serial_send_bytes>
}
     4ec:	0f 90       	pop	r0
     4ee:	0f 90       	pop	r0
     4f0:	0f 90       	pop	r0
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	08 95       	ret

000004f8 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     4f8:	8f 92       	push	r8
     4fa:	9f 92       	push	r9
     4fc:	af 92       	push	r10
     4fe:	bf 92       	push	r11
     500:	cf 92       	push	r12
     502:	df 92       	push	r13
     504:	ef 92       	push	r14
     506:	0f 93       	push	r16
     508:	cf 93       	push	r28
     50a:	df 93       	push	r29
     50c:	cd b7       	in	r28, 0x3d	; 61
     50e:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     510:	8f e4       	ldi	r24, 0x4F	; 79
     512:	91 e0       	ldi	r25, 0x01	; 1
     514:	0e 94 0e 03 	call	0x61c	; 0x61c <buffer_init>
	buffer_init(&_com_tx_buffer);
     518:	82 e6       	ldi	r24, 0x62	; 98
     51a:	91 e0       	ldi	r25, 0x01	; 1
     51c:	0e 94 0e 03 	call	0x61c	; 0x61c <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     520:	0f 2e       	mov	r0, r31
     522:	f0 ec       	ldi	r31, 0xC0	; 192
     524:	8f 2e       	mov	r8, r31
     526:	f1 e0       	ldi	r31, 0x01	; 1
     528:	9f 2e       	mov	r9, r31
     52a:	f0 2d       	mov	r31, r0
     52c:	0f 2e       	mov	r0, r31
     52e:	f2 e6       	ldi	r31, 0x62	; 98
     530:	af 2e       	mov	r10, r31
     532:	f1 e0       	ldi	r31, 0x01	; 1
     534:	bf 2e       	mov	r11, r31
     536:	f0 2d       	mov	r31, r0
     538:	0f 2e       	mov	r0, r31
     53a:	ff e4       	ldi	r31, 0x4F	; 79
     53c:	cf 2e       	mov	r12, r31
     53e:	f1 e0       	ldi	r31, 0x01	; 1
     540:	df 2e       	mov	r13, r31
     542:	f0 2d       	mov	r31, r0
     544:	e1 2c       	mov	r14, r1
     546:	00 e0       	ldi	r16, 0x00	; 0
     548:	23 e0       	ldi	r18, 0x03	; 3
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	52 ec       	ldi	r21, 0xC2	; 194
     54e:	61 e0       	ldi	r22, 0x01	; 1
     550:	70 e0       	ldi	r23, 0x00	; 0
     552:	80 e0       	ldi	r24, 0x00	; 0
     554:	0e 94 84 08 	call	0x1108	; 0x1108 <serial_new_instance>
     558:	90 93 4a 01 	sts	0x014A, r25	; 0x80014a <_com_serial_instance+0x1>
     55c:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     560:	88 e2       	ldi	r24, 0x28	; 40
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	28 e2       	ldi	r18, 0x28	; 40
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	f9 01       	movw	r30, r18
     56a:	20 81       	ld	r18, Z
     56c:	23 6c       	ori	r18, 0xC3	; 195
     56e:	fc 01       	movw	r30, r24
     570:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     572:	8b e2       	ldi	r24, 0x2B	; 43
     574:	90 e0       	ldi	r25, 0x00	; 0
     576:	2b e2       	ldi	r18, 0x2B	; 43
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	f9 01       	movw	r30, r18
     57c:	20 81       	ld	r18, Z
     57e:	28 60       	ori	r18, 0x08	; 8
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     584:	8a e2       	ldi	r24, 0x2A	; 42
     586:	90 e0       	ldi	r25, 0x00	; 0
     588:	2a e2       	ldi	r18, 0x2A	; 42
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	f9 01       	movw	r30, r18
     58e:	20 81       	ld	r18, Z
     590:	24 67       	ori	r18, 0x74	; 116
     592:	fc 01       	movw	r30, r24
     594:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     596:	8b e2       	ldi	r24, 0x2B	; 43
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	2b e2       	ldi	r18, 0x2B	; 43
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	f9 01       	movw	r30, r18
     5a0:	20 81       	ld	r18, Z
     5a2:	20 64       	ori	r18, 0x40	; 64
     5a4:	fc 01       	movw	r30, r24
     5a6:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     5a8:	81 e2       	ldi	r24, 0x21	; 33
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	81 e2       	ldi	r24, 0x21	; 33
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	2f ef       	ldi	r18, 0xFF	; 255
     5b6:	fc 01       	movw	r30, r24
     5b8:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     5ba:	84 e2       	ldi	r24, 0x24	; 36
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	24 e2       	ldi	r18, 0x24	; 36
     5c0:	30 e0       	ldi	r19, 0x00	; 0
     5c2:	f9 01       	movw	r30, r18
     5c4:	20 81       	ld	r18, Z
     5c6:	23 60       	ori	r18, 0x03	; 3
     5c8:	fc 01       	movw	r30, r24
     5ca:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     5cc:	84 e2       	ldi	r24, 0x24	; 36
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	24 e2       	ldi	r18, 0x24	; 36
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	f9 01       	movw	r30, r18
     5d6:	20 81       	ld	r18, Z
     5d8:	2c 63       	ori	r18, 0x3C	; 60
     5da:	fc 01       	movw	r30, r24
     5dc:	20 83       	st	Z, r18
}
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	0f 91       	pop	r16
     5e4:	ef 90       	pop	r14
     5e6:	df 90       	pop	r13
     5e8:	cf 90       	pop	r12
     5ea:	bf 90       	pop	r11
     5ec:	af 90       	pop	r10
     5ee:	9f 90       	pop	r9
     5f0:	8f 90       	pop	r8
     5f2:	08 95       	ret

000005f4 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     5f4:	cf 93       	push	r28
     5f6:	df 93       	push	r29
     5f8:	1f 92       	push	r1
     5fa:	cd b7       	in	r28, 0x3d	; 61
     5fc:	de b7       	in	r29, 0x3e	; 62
     5fe:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     600:	0f 90       	pop	r0
     602:	df 91       	pop	r29
     604:	cf 91       	pop	r28
     606:	08 95       	ret

00000608 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     608:	cf 93       	push	r28
     60a:	df 93       	push	r29
     60c:	1f 92       	push	r1
     60e:	cd b7       	in	r28, 0x3d	; 61
     610:	de b7       	in	r29, 0x3e	; 62
     612:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     614:	0f 90       	pop	r0
     616:	df 91       	pop	r29
     618:	cf 91       	pop	r28
     61a:	08 95       	ret

0000061c <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     61c:	cf 93       	push	r28
     61e:	df 93       	push	r29
     620:	00 d0       	rcall	.+0      	; 0x622 <buffer_init+0x6>
     622:	cd b7       	in	r28, 0x3d	; 61
     624:	de b7       	in	r29, 0x3e	; 62
     626:	9a 83       	std	Y+2, r25	; 0x02
     628:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     62a:	89 81       	ldd	r24, Y+1	; 0x01
     62c:	9a 81       	ldd	r25, Y+2	; 0x02
     62e:	fc 01       	movw	r30, r24
     630:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     632:	89 81       	ldd	r24, Y+1	; 0x01
     634:	9a 81       	ldd	r25, Y+2	; 0x02
     636:	fc 01       	movw	r30, r24
     638:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     63a:	89 81       	ldd	r24, Y+1	; 0x01
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	fc 01       	movw	r30, r24
     640:	12 8a       	std	Z+18, r1	; 0x12
}
     642:	0f 90       	pop	r0
     644:	0f 90       	pop	r0
     646:	df 91       	pop	r29
     648:	cf 91       	pop	r28
     64a:	08 95       	ret

0000064c <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     64c:	cf 93       	push	r28
     64e:	df 93       	push	r29
     650:	00 d0       	rcall	.+0      	; 0x652 <buffer_get_item+0x6>
     652:	00 d0       	rcall	.+0      	; 0x654 <buffer_get_item+0x8>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01
     65c:	7c 83       	std	Y+4, r23	; 0x04
     65e:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     660:	89 81       	ldd	r24, Y+1	; 0x01
     662:	9a 81       	ldd	r25, Y+2	; 0x02
     664:	fc 01       	movw	r30, r24
     666:	82 89       	ldd	r24, Z+18	; 0x12
     668:	88 23       	and	r24, r24
     66a:	81 f1       	breq	.+96     	; 0x6cc <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     66c:	89 81       	ldd	r24, Y+1	; 0x01
     66e:	9a 81       	ldd	r25, Y+2	; 0x02
     670:	fc 01       	movw	r30, r24
     672:	81 89       	ldd	r24, Z+17	; 0x11
     674:	88 2f       	mov	r24, r24
     676:	90 e0       	ldi	r25, 0x00	; 0
     678:	29 81       	ldd	r18, Y+1	; 0x01
     67a:	3a 81       	ldd	r19, Y+2	; 0x02
     67c:	82 0f       	add	r24, r18
     67e:	93 1f       	adc	r25, r19
     680:	fc 01       	movw	r30, r24
     682:	20 81       	ld	r18, Z
     684:	8b 81       	ldd	r24, Y+3	; 0x03
     686:	9c 81       	ldd	r25, Y+4	; 0x04
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     68c:	89 81       	ldd	r24, Y+1	; 0x01
     68e:	9a 81       	ldd	r25, Y+2	; 0x02
     690:	fc 01       	movw	r30, r24
     692:	81 89       	ldd	r24, Z+17	; 0x11
     694:	88 2f       	mov	r24, r24
     696:	90 e0       	ldi	r25, 0x00	; 0
     698:	01 96       	adiw	r24, 0x01	; 1
     69a:	8f 70       	andi	r24, 0x0F	; 15
     69c:	90 78       	andi	r25, 0x80	; 128
     69e:	99 23       	and	r25, r25
     6a0:	24 f4       	brge	.+8      	; 0x6aa <buffer_get_item+0x5e>
     6a2:	01 97       	sbiw	r24, 0x01	; 1
     6a4:	80 6f       	ori	r24, 0xF0	; 240
     6a6:	9f 6f       	ori	r25, 0xFF	; 255
     6a8:	01 96       	adiw	r24, 0x01	; 1
     6aa:	28 2f       	mov	r18, r24
     6ac:	89 81       	ldd	r24, Y+1	; 0x01
     6ae:	9a 81       	ldd	r25, Y+2	; 0x02
     6b0:	fc 01       	movw	r30, r24
     6b2:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     6b4:	89 81       	ldd	r24, Y+1	; 0x01
     6b6:	9a 81       	ldd	r25, Y+2	; 0x02
     6b8:	fc 01       	movw	r30, r24
     6ba:	82 89       	ldd	r24, Z+18	; 0x12
     6bc:	2f ef       	ldi	r18, 0xFF	; 255
     6be:	28 0f       	add	r18, r24
     6c0:	89 81       	ldd	r24, Y+1	; 0x01
     6c2:	9a 81       	ldd	r25, Y+2	; 0x02
     6c4:	fc 01       	movw	r30, r24
     6c6:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     6c8:	80 e0       	ldi	r24, 0x00	; 0
     6ca:	01 c0       	rjmp	.+2      	; 0x6ce <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     6cc:	81 e0       	ldi	r24, 0x01	; 1
}
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
     6d2:	0f 90       	pop	r0
     6d4:	0f 90       	pop	r0
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <buffer_put_item+0x6>
     6e2:	1f 92       	push	r1
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	9a 83       	std	Y+2, r25	; 0x02
     6ea:	89 83       	std	Y+1, r24	; 0x01
     6ec:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     6ee:	89 81       	ldd	r24, Y+1	; 0x01
     6f0:	9a 81       	ldd	r25, Y+2	; 0x02
     6f2:	fc 01       	movw	r30, r24
     6f4:	82 89       	ldd	r24, Z+18	; 0x12
     6f6:	80 31       	cpi	r24, 0x10	; 16
     6f8:	68 f5       	brcc	.+90     	; 0x754 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	fc 01       	movw	r30, r24
     700:	80 89       	ldd	r24, Z+16	; 0x10
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	29 81       	ldd	r18, Y+1	; 0x01
     708:	3a 81       	ldd	r19, Y+2	; 0x02
     70a:	82 0f       	add	r24, r18
     70c:	93 1f       	adc	r25, r19
     70e:	2b 81       	ldd	r18, Y+3	; 0x03
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     714:	89 81       	ldd	r24, Y+1	; 0x01
     716:	9a 81       	ldd	r25, Y+2	; 0x02
     718:	fc 01       	movw	r30, r24
     71a:	80 89       	ldd	r24, Z+16	; 0x10
     71c:	88 2f       	mov	r24, r24
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	8f 70       	andi	r24, 0x0F	; 15
     724:	90 78       	andi	r25, 0x80	; 128
     726:	99 23       	and	r25, r25
     728:	24 f4       	brge	.+8      	; 0x732 <buffer_put_item+0x56>
     72a:	01 97       	sbiw	r24, 0x01	; 1
     72c:	80 6f       	ori	r24, 0xF0	; 240
     72e:	9f 6f       	ori	r25, 0xFF	; 255
     730:	01 96       	adiw	r24, 0x01	; 1
     732:	28 2f       	mov	r18, r24
     734:	89 81       	ldd	r24, Y+1	; 0x01
     736:	9a 81       	ldd	r25, Y+2	; 0x02
     738:	fc 01       	movw	r30, r24
     73a:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	fc 01       	movw	r30, r24
     742:	82 89       	ldd	r24, Z+18	; 0x12
     744:	21 e0       	ldi	r18, 0x01	; 1
     746:	28 0f       	add	r18, r24
     748:	89 81       	ldd	r24, Y+1	; 0x01
     74a:	9a 81       	ldd	r25, Y+2	; 0x02
     74c:	fc 01       	movw	r30, r24
     74e:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     750:	80 e0       	ldi	r24, 0x00	; 0
     752:	01 c0       	rjmp	.+2      	; 0x756 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     754:	82 e0       	ldi	r24, 0x02	; 2
}
     756:	0f 90       	pop	r0
     758:	0f 90       	pop	r0
     75a:	0f 90       	pop	r0
     75c:	df 91       	pop	r29
     75e:	cf 91       	pop	r28
     760:	08 95       	ret

00000762 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     762:	cf 93       	push	r28
     764:	df 93       	push	r29
     766:	00 d0       	rcall	.+0      	; 0x768 <vListInitialise+0x6>
     768:	cd b7       	in	r28, 0x3d	; 61
     76a:	de b7       	in	r29, 0x3e	; 62
     76c:	9a 83       	std	Y+2, r25	; 0x02
     76e:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     770:	89 81       	ldd	r24, Y+1	; 0x01
     772:	9a 81       	ldd	r25, Y+2	; 0x02
     774:	9c 01       	movw	r18, r24
     776:	2d 5f       	subi	r18, 0xFD	; 253
     778:	3f 4f       	sbci	r19, 0xFF	; 255
     77a:	89 81       	ldd	r24, Y+1	; 0x01
     77c:	9a 81       	ldd	r25, Y+2	; 0x02
     77e:	fc 01       	movw	r30, r24
     780:	32 83       	std	Z+2, r19	; 0x02
     782:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	9a 81       	ldd	r25, Y+2	; 0x02
     788:	2f ef       	ldi	r18, 0xFF	; 255
     78a:	3f ef       	ldi	r19, 0xFF	; 255
     78c:	fc 01       	movw	r30, r24
     78e:	34 83       	std	Z+4, r19	; 0x04
     790:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     792:	89 81       	ldd	r24, Y+1	; 0x01
     794:	9a 81       	ldd	r25, Y+2	; 0x02
     796:	9c 01       	movw	r18, r24
     798:	2d 5f       	subi	r18, 0xFD	; 253
     79a:	3f 4f       	sbci	r19, 0xFF	; 255
     79c:	89 81       	ldd	r24, Y+1	; 0x01
     79e:	9a 81       	ldd	r25, Y+2	; 0x02
     7a0:	fc 01       	movw	r30, r24
     7a2:	36 83       	std	Z+6, r19	; 0x06
     7a4:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     7a6:	89 81       	ldd	r24, Y+1	; 0x01
     7a8:	9a 81       	ldd	r25, Y+2	; 0x02
     7aa:	9c 01       	movw	r18, r24
     7ac:	2d 5f       	subi	r18, 0xFD	; 253
     7ae:	3f 4f       	sbci	r19, 0xFF	; 255
     7b0:	89 81       	ldd	r24, Y+1	; 0x01
     7b2:	9a 81       	ldd	r25, Y+2	; 0x02
     7b4:	fc 01       	movw	r30, r24
     7b6:	30 87       	std	Z+8, r19	; 0x08
     7b8:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	fc 01       	movw	r30, r24
     7c0:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     7c2:	0f 90       	pop	r0
     7c4:	0f 90       	pop	r0
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <vListInitialiseItem+0x6>
     7d2:	cd b7       	in	r28, 0x3d	; 61
     7d4:	de b7       	in	r29, 0x3e	; 62
     7d6:	9a 83       	std	Y+2, r25	; 0x02
     7d8:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     7da:	89 81       	ldd	r24, Y+1	; 0x01
     7dc:	9a 81       	ldd	r25, Y+2	; 0x02
     7de:	fc 01       	movw	r30, r24
     7e0:	11 86       	std	Z+9, r1	; 0x09
     7e2:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     7e4:	0f 90       	pop	r0
     7e6:	0f 90       	pop	r0
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     7ee:	cf 93       	push	r28
     7f0:	df 93       	push	r29
     7f2:	00 d0       	rcall	.+0      	; 0x7f4 <vListInsertEnd+0x6>
     7f4:	00 d0       	rcall	.+0      	; 0x7f6 <vListInsertEnd+0x8>
     7f6:	00 d0       	rcall	.+0      	; 0x7f8 <vListInsertEnd+0xa>
     7f8:	cd b7       	in	r28, 0x3d	; 61
     7fa:	de b7       	in	r29, 0x3e	; 62
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	8b 83       	std	Y+3, r24	; 0x03
     800:	7e 83       	std	Y+6, r23	; 0x06
     802:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     804:	8b 81       	ldd	r24, Y+3	; 0x03
     806:	9c 81       	ldd	r25, Y+4	; 0x04
     808:	fc 01       	movw	r30, r24
     80a:	81 81       	ldd	r24, Z+1	; 0x01
     80c:	92 81       	ldd	r25, Z+2	; 0x02
     80e:	9a 83       	std	Y+2, r25	; 0x02
     810:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     812:	8d 81       	ldd	r24, Y+5	; 0x05
     814:	9e 81       	ldd	r25, Y+6	; 0x06
     816:	29 81       	ldd	r18, Y+1	; 0x01
     818:	3a 81       	ldd	r19, Y+2	; 0x02
     81a:	fc 01       	movw	r30, r24
     81c:	33 83       	std	Z+3, r19	; 0x03
     81e:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     820:	89 81       	ldd	r24, Y+1	; 0x01
     822:	9a 81       	ldd	r25, Y+2	; 0x02
     824:	fc 01       	movw	r30, r24
     826:	24 81       	ldd	r18, Z+4	; 0x04
     828:	35 81       	ldd	r19, Z+5	; 0x05
     82a:	8d 81       	ldd	r24, Y+5	; 0x05
     82c:	9e 81       	ldd	r25, Y+6	; 0x06
     82e:	fc 01       	movw	r30, r24
     830:	35 83       	std	Z+5, r19	; 0x05
     832:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     834:	89 81       	ldd	r24, Y+1	; 0x01
     836:	9a 81       	ldd	r25, Y+2	; 0x02
     838:	fc 01       	movw	r30, r24
     83a:	84 81       	ldd	r24, Z+4	; 0x04
     83c:	95 81       	ldd	r25, Z+5	; 0x05
     83e:	2d 81       	ldd	r18, Y+5	; 0x05
     840:	3e 81       	ldd	r19, Y+6	; 0x06
     842:	fc 01       	movw	r30, r24
     844:	33 83       	std	Z+3, r19	; 0x03
     846:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	9a 81       	ldd	r25, Y+2	; 0x02
     84c:	2d 81       	ldd	r18, Y+5	; 0x05
     84e:	3e 81       	ldd	r19, Y+6	; 0x06
     850:	fc 01       	movw	r30, r24
     852:	35 83       	std	Z+5, r19	; 0x05
     854:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     856:	8d 81       	ldd	r24, Y+5	; 0x05
     858:	9e 81       	ldd	r25, Y+6	; 0x06
     85a:	2b 81       	ldd	r18, Y+3	; 0x03
     85c:	3c 81       	ldd	r19, Y+4	; 0x04
     85e:	fc 01       	movw	r30, r24
     860:	31 87       	std	Z+9, r19	; 0x09
     862:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     864:	8b 81       	ldd	r24, Y+3	; 0x03
     866:	9c 81       	ldd	r25, Y+4	; 0x04
     868:	fc 01       	movw	r30, r24
     86a:	80 81       	ld	r24, Z
     86c:	21 e0       	ldi	r18, 0x01	; 1
     86e:	28 0f       	add	r18, r24
     870:	8b 81       	ldd	r24, Y+3	; 0x03
     872:	9c 81       	ldd	r25, Y+4	; 0x04
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
}
     878:	26 96       	adiw	r28, 0x06	; 6
     87a:	0f b6       	in	r0, 0x3f	; 63
     87c:	f8 94       	cli
     87e:	de bf       	out	0x3e, r29	; 62
     880:	0f be       	out	0x3f, r0	; 63
     882:	cd bf       	out	0x3d, r28	; 61
     884:	df 91       	pop	r29
     886:	cf 91       	pop	r28
     888:	08 95       	ret

0000088a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	cd b7       	in	r28, 0x3d	; 61
     890:	de b7       	in	r29, 0x3e	; 62
     892:	28 97       	sbiw	r28, 0x08	; 8
     894:	0f b6       	in	r0, 0x3f	; 63
     896:	f8 94       	cli
     898:	de bf       	out	0x3e, r29	; 62
     89a:	0f be       	out	0x3f, r0	; 63
     89c:	cd bf       	out	0x3d, r28	; 61
     89e:	9e 83       	std	Y+6, r25	; 0x06
     8a0:	8d 83       	std	Y+5, r24	; 0x05
     8a2:	78 87       	std	Y+8, r23	; 0x08
     8a4:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     8a6:	8f 81       	ldd	r24, Y+7	; 0x07
     8a8:	98 85       	ldd	r25, Y+8	; 0x08
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	91 81       	ldd	r25, Z+1	; 0x01
     8b0:	9c 83       	std	Y+4, r25	; 0x04
     8b2:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     8b4:	8b 81       	ldd	r24, Y+3	; 0x03
     8b6:	9c 81       	ldd	r25, Y+4	; 0x04
     8b8:	01 96       	adiw	r24, 0x01	; 1
     8ba:	41 f4       	brne	.+16     	; 0x8cc <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	9e 81       	ldd	r25, Y+6	; 0x06
     8c0:	fc 01       	movw	r30, r24
     8c2:	87 81       	ldd	r24, Z+7	; 0x07
     8c4:	90 85       	ldd	r25, Z+8	; 0x08
     8c6:	9a 83       	std	Y+2, r25	; 0x02
     8c8:	89 83       	std	Y+1, r24	; 0x01
     8ca:	1a c0       	rjmp	.+52     	; 0x900 <__stack+0x1>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	9e 81       	ldd	r25, Y+6	; 0x06
     8d0:	03 96       	adiw	r24, 0x03	; 3
     8d2:	9a 83       	std	Y+2, r25	; 0x02
     8d4:	89 83       	std	Y+1, r24	; 0x01
     8d6:	07 c0       	rjmp	.+14     	; 0x8e6 <vListInsert+0x5c>
     8d8:	89 81       	ldd	r24, Y+1	; 0x01
     8da:	9a 81       	ldd	r25, Y+2	; 0x02
     8dc:	fc 01       	movw	r30, r24
     8de:	82 81       	ldd	r24, Z+2	; 0x02
     8e0:	93 81       	ldd	r25, Z+3	; 0x03
     8e2:	9a 83       	std	Y+2, r25	; 0x02
     8e4:	89 83       	std	Y+1, r24	; 0x01
     8e6:	89 81       	ldd	r24, Y+1	; 0x01
     8e8:	9a 81       	ldd	r25, Y+2	; 0x02
     8ea:	fc 01       	movw	r30, r24
     8ec:	82 81       	ldd	r24, Z+2	; 0x02
     8ee:	93 81       	ldd	r25, Z+3	; 0x03
     8f0:	fc 01       	movw	r30, r24
     8f2:	20 81       	ld	r18, Z
     8f4:	31 81       	ldd	r19, Z+1	; 0x01
     8f6:	8b 81       	ldd	r24, Y+3	; 0x03
     8f8:	9c 81       	ldd	r25, Y+4	; 0x04
     8fa:	82 17       	cp	r24, r18
     8fc:	93 07       	cpc	r25, r19
     8fe:	60 f7       	brcc	.-40     	; 0x8d8 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     900:	89 81       	ldd	r24, Y+1	; 0x01
     902:	9a 81       	ldd	r25, Y+2	; 0x02
     904:	fc 01       	movw	r30, r24
     906:	22 81       	ldd	r18, Z+2	; 0x02
     908:	33 81       	ldd	r19, Z+3	; 0x03
     90a:	8f 81       	ldd	r24, Y+7	; 0x07
     90c:	98 85       	ldd	r25, Y+8	; 0x08
     90e:	fc 01       	movw	r30, r24
     910:	33 83       	std	Z+3, r19	; 0x03
     912:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     914:	8f 81       	ldd	r24, Y+7	; 0x07
     916:	98 85       	ldd	r25, Y+8	; 0x08
     918:	fc 01       	movw	r30, r24
     91a:	82 81       	ldd	r24, Z+2	; 0x02
     91c:	93 81       	ldd	r25, Z+3	; 0x03
     91e:	2f 81       	ldd	r18, Y+7	; 0x07
     920:	38 85       	ldd	r19, Y+8	; 0x08
     922:	fc 01       	movw	r30, r24
     924:	35 83       	std	Z+5, r19	; 0x05
     926:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     928:	8f 81       	ldd	r24, Y+7	; 0x07
     92a:	98 85       	ldd	r25, Y+8	; 0x08
     92c:	29 81       	ldd	r18, Y+1	; 0x01
     92e:	3a 81       	ldd	r19, Y+2	; 0x02
     930:	fc 01       	movw	r30, r24
     932:	35 83       	std	Z+5, r19	; 0x05
     934:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     936:	89 81       	ldd	r24, Y+1	; 0x01
     938:	9a 81       	ldd	r25, Y+2	; 0x02
     93a:	2f 81       	ldd	r18, Y+7	; 0x07
     93c:	38 85       	ldd	r19, Y+8	; 0x08
     93e:	fc 01       	movw	r30, r24
     940:	33 83       	std	Z+3, r19	; 0x03
     942:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     944:	8f 81       	ldd	r24, Y+7	; 0x07
     946:	98 85       	ldd	r25, Y+8	; 0x08
     948:	2d 81       	ldd	r18, Y+5	; 0x05
     94a:	3e 81       	ldd	r19, Y+6	; 0x06
     94c:	fc 01       	movw	r30, r24
     94e:	31 87       	std	Z+9, r19	; 0x09
     950:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     952:	8d 81       	ldd	r24, Y+5	; 0x05
     954:	9e 81       	ldd	r25, Y+6	; 0x06
     956:	fc 01       	movw	r30, r24
     958:	80 81       	ld	r24, Z
     95a:	21 e0       	ldi	r18, 0x01	; 1
     95c:	28 0f       	add	r18, r24
     95e:	8d 81       	ldd	r24, Y+5	; 0x05
     960:	9e 81       	ldd	r25, Y+6	; 0x06
     962:	fc 01       	movw	r30, r24
     964:	20 83       	st	Z, r18
}
     966:	28 96       	adiw	r28, 0x08	; 8
     968:	0f b6       	in	r0, 0x3f	; 63
     96a:	f8 94       	cli
     96c:	de bf       	out	0x3e, r29	; 62
     96e:	0f be       	out	0x3f, r0	; 63
     970:	cd bf       	out	0x3d, r28	; 61
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	08 95       	ret

00000978 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     978:	cf 93       	push	r28
     97a:	df 93       	push	r29
     97c:	00 d0       	rcall	.+0      	; 0x97e <uxListRemove+0x6>
     97e:	00 d0       	rcall	.+0      	; 0x980 <uxListRemove+0x8>
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	9c 83       	std	Y+4, r25	; 0x04
     986:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     988:	8b 81       	ldd	r24, Y+3	; 0x03
     98a:	9c 81       	ldd	r25, Y+4	; 0x04
     98c:	fc 01       	movw	r30, r24
     98e:	80 85       	ldd	r24, Z+8	; 0x08
     990:	91 85       	ldd	r25, Z+9	; 0x09
     992:	9a 83       	std	Y+2, r25	; 0x02
     994:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     996:	8b 81       	ldd	r24, Y+3	; 0x03
     998:	9c 81       	ldd	r25, Y+4	; 0x04
     99a:	fc 01       	movw	r30, r24
     99c:	82 81       	ldd	r24, Z+2	; 0x02
     99e:	93 81       	ldd	r25, Z+3	; 0x03
     9a0:	2b 81       	ldd	r18, Y+3	; 0x03
     9a2:	3c 81       	ldd	r19, Y+4	; 0x04
     9a4:	f9 01       	movw	r30, r18
     9a6:	24 81       	ldd	r18, Z+4	; 0x04
     9a8:	35 81       	ldd	r19, Z+5	; 0x05
     9aa:	fc 01       	movw	r30, r24
     9ac:	35 83       	std	Z+5, r19	; 0x05
     9ae:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     9b0:	8b 81       	ldd	r24, Y+3	; 0x03
     9b2:	9c 81       	ldd	r25, Y+4	; 0x04
     9b4:	fc 01       	movw	r30, r24
     9b6:	84 81       	ldd	r24, Z+4	; 0x04
     9b8:	95 81       	ldd	r25, Z+5	; 0x05
     9ba:	2b 81       	ldd	r18, Y+3	; 0x03
     9bc:	3c 81       	ldd	r19, Y+4	; 0x04
     9be:	f9 01       	movw	r30, r18
     9c0:	22 81       	ldd	r18, Z+2	; 0x02
     9c2:	33 81       	ldd	r19, Z+3	; 0x03
     9c4:	fc 01       	movw	r30, r24
     9c6:	33 83       	std	Z+3, r19	; 0x03
     9c8:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     9ca:	89 81       	ldd	r24, Y+1	; 0x01
     9cc:	9a 81       	ldd	r25, Y+2	; 0x02
     9ce:	fc 01       	movw	r30, r24
     9d0:	21 81       	ldd	r18, Z+1	; 0x01
     9d2:	32 81       	ldd	r19, Z+2	; 0x02
     9d4:	8b 81       	ldd	r24, Y+3	; 0x03
     9d6:	9c 81       	ldd	r25, Y+4	; 0x04
     9d8:	28 17       	cp	r18, r24
     9da:	39 07       	cpc	r19, r25
     9dc:	51 f4       	brne	.+20     	; 0x9f2 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     9de:	8b 81       	ldd	r24, Y+3	; 0x03
     9e0:	9c 81       	ldd	r25, Y+4	; 0x04
     9e2:	fc 01       	movw	r30, r24
     9e4:	24 81       	ldd	r18, Z+4	; 0x04
     9e6:	35 81       	ldd	r19, Z+5	; 0x05
     9e8:	89 81       	ldd	r24, Y+1	; 0x01
     9ea:	9a 81       	ldd	r25, Y+2	; 0x02
     9ec:	fc 01       	movw	r30, r24
     9ee:	32 83       	std	Z+2, r19	; 0x02
     9f0:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     9f2:	8b 81       	ldd	r24, Y+3	; 0x03
     9f4:	9c 81       	ldd	r25, Y+4	; 0x04
     9f6:	fc 01       	movw	r30, r24
     9f8:	11 86       	std	Z+9, r1	; 0x09
     9fa:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     9fc:	89 81       	ldd	r24, Y+1	; 0x01
     9fe:	9a 81       	ldd	r25, Y+2	; 0x02
     a00:	fc 01       	movw	r30, r24
     a02:	80 81       	ld	r24, Z
     a04:	2f ef       	ldi	r18, 0xFF	; 255
     a06:	28 0f       	add	r18, r24
     a08:	89 81       	ldd	r24, Y+1	; 0x01
     a0a:	9a 81       	ldd	r25, Y+2	; 0x02
     a0c:	fc 01       	movw	r30, r24
     a0e:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     a10:	89 81       	ldd	r24, Y+1	; 0x01
     a12:	9a 81       	ldd	r25, Y+2	; 0x02
     a14:	fc 01       	movw	r30, r24
     a16:	80 81       	ld	r24, Z
}
     a18:	0f 90       	pop	r0
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	0f 90       	pop	r0
     a20:	df 91       	pop	r29
     a22:	cf 91       	pop	r28
     a24:	08 95       	ret

00000a26 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     a26:	cf 93       	push	r28
     a28:	df 93       	push	r29
     a2a:	cd b7       	in	r28, 0x3d	; 61
     a2c:	de b7       	in	r29, 0x3e	; 62
     a2e:	28 97       	sbiw	r28, 0x08	; 8
     a30:	0f b6       	in	r0, 0x3f	; 63
     a32:	f8 94       	cli
     a34:	de bf       	out	0x3e, r29	; 62
     a36:	0f be       	out	0x3f, r0	; 63
     a38:	cd bf       	out	0x3d, r28	; 61
     a3a:	9c 83       	std	Y+4, r25	; 0x04
     a3c:	8b 83       	std	Y+3, r24	; 0x03
     a3e:	7e 83       	std	Y+6, r23	; 0x06
     a40:	6d 83       	std	Y+5, r22	; 0x05
     a42:	58 87       	std	Y+8, r21	; 0x08
     a44:	4f 83       	std	Y+7, r20	; 0x07
     a46:	8b 81       	ldd	r24, Y+3	; 0x03
     a48:	9c 81       	ldd	r25, Y+4	; 0x04
     a4a:	21 e1       	ldi	r18, 0x11	; 17
     a4c:	fc 01       	movw	r30, r24
     a4e:	20 83       	st	Z, r18
     a50:	8b 81       	ldd	r24, Y+3	; 0x03
     a52:	9c 81       	ldd	r25, Y+4	; 0x04
     a54:	01 97       	sbiw	r24, 0x01	; 1
     a56:	9c 83       	std	Y+4, r25	; 0x04
     a58:	8b 83       	std	Y+3, r24	; 0x03
     a5a:	8b 81       	ldd	r24, Y+3	; 0x03
     a5c:	9c 81       	ldd	r25, Y+4	; 0x04
     a5e:	22 e2       	ldi	r18, 0x22	; 34
     a60:	fc 01       	movw	r30, r24
     a62:	20 83       	st	Z, r18
     a64:	8b 81       	ldd	r24, Y+3	; 0x03
     a66:	9c 81       	ldd	r25, Y+4	; 0x04
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	9c 83       	std	Y+4, r25	; 0x04
     a6c:	8b 83       	std	Y+3, r24	; 0x03
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	23 e3       	ldi	r18, 0x33	; 51
     a74:	fc 01       	movw	r30, r24
     a76:	20 83       	st	Z, r18
     a78:	8b 81       	ldd	r24, Y+3	; 0x03
     a7a:	9c 81       	ldd	r25, Y+4	; 0x04
     a7c:	01 97       	sbiw	r24, 0x01	; 1
     a7e:	9c 83       	std	Y+4, r25	; 0x04
     a80:	8b 83       	std	Y+3, r24	; 0x03
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	9e 81       	ldd	r25, Y+6	; 0x06
     a86:	9a 83       	std	Y+2, r25	; 0x02
     a88:	89 83       	std	Y+1, r24	; 0x01
     a8a:	29 81       	ldd	r18, Y+1	; 0x01
     a8c:	8b 81       	ldd	r24, Y+3	; 0x03
     a8e:	9c 81       	ldd	r25, Y+4	; 0x04
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
     a94:	8b 81       	ldd	r24, Y+3	; 0x03
     a96:	9c 81       	ldd	r25, Y+4	; 0x04
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	9c 83       	std	Y+4, r25	; 0x04
     a9c:	8b 83       	std	Y+3, r24	; 0x03
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	89 2f       	mov	r24, r25
     aa4:	99 27       	eor	r25, r25
     aa6:	9a 83       	std	Y+2, r25	; 0x02
     aa8:	89 83       	std	Y+1, r24	; 0x01
     aaa:	29 81       	ldd	r18, Y+1	; 0x01
     aac:	8b 81       	ldd	r24, Y+3	; 0x03
     aae:	9c 81       	ldd	r25, Y+4	; 0x04
     ab0:	fc 01       	movw	r30, r24
     ab2:	20 83       	st	Z, r18
     ab4:	8b 81       	ldd	r24, Y+3	; 0x03
     ab6:	9c 81       	ldd	r25, Y+4	; 0x04
     ab8:	01 97       	sbiw	r24, 0x01	; 1
     aba:	9c 83       	std	Y+4, r25	; 0x04
     abc:	8b 83       	std	Y+3, r24	; 0x03
     abe:	8b 81       	ldd	r24, Y+3	; 0x03
     ac0:	9c 81       	ldd	r25, Y+4	; 0x04
     ac2:	fc 01       	movw	r30, r24
     ac4:	10 82       	st	Z, r1
     ac6:	8b 81       	ldd	r24, Y+3	; 0x03
     ac8:	9c 81       	ldd	r25, Y+4	; 0x04
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	9c 83       	std	Y+4, r25	; 0x04
     ace:	8b 83       	std	Y+3, r24	; 0x03
     ad0:	8b 81       	ldd	r24, Y+3	; 0x03
     ad2:	9c 81       	ldd	r25, Y+4	; 0x04
     ad4:	20 e8       	ldi	r18, 0x80	; 128
     ad6:	fc 01       	movw	r30, r24
     ad8:	20 83       	st	Z, r18
     ada:	8b 81       	ldd	r24, Y+3	; 0x03
     adc:	9c 81       	ldd	r25, Y+4	; 0x04
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	9c 83       	std	Y+4, r25	; 0x04
     ae2:	8b 83       	std	Y+3, r24	; 0x03
     ae4:	8b 81       	ldd	r24, Y+3	; 0x03
     ae6:	9c 81       	ldd	r25, Y+4	; 0x04
     ae8:	fc 01       	movw	r30, r24
     aea:	10 82       	st	Z, r1
     aec:	8b 81       	ldd	r24, Y+3	; 0x03
     aee:	9c 81       	ldd	r25, Y+4	; 0x04
     af0:	01 97       	sbiw	r24, 0x01	; 1
     af2:	9c 83       	std	Y+4, r25	; 0x04
     af4:	8b 83       	std	Y+3, r24	; 0x03
     af6:	8b 81       	ldd	r24, Y+3	; 0x03
     af8:	9c 81       	ldd	r25, Y+4	; 0x04
     afa:	22 e0       	ldi	r18, 0x02	; 2
     afc:	fc 01       	movw	r30, r24
     afe:	20 83       	st	Z, r18
     b00:	8b 81       	ldd	r24, Y+3	; 0x03
     b02:	9c 81       	ldd	r25, Y+4	; 0x04
     b04:	01 97       	sbiw	r24, 0x01	; 1
     b06:	9c 83       	std	Y+4, r25	; 0x04
     b08:	8b 83       	std	Y+3, r24	; 0x03
     b0a:	8b 81       	ldd	r24, Y+3	; 0x03
     b0c:	9c 81       	ldd	r25, Y+4	; 0x04
     b0e:	23 e0       	ldi	r18, 0x03	; 3
     b10:	fc 01       	movw	r30, r24
     b12:	20 83       	st	Z, r18
     b14:	8b 81       	ldd	r24, Y+3	; 0x03
     b16:	9c 81       	ldd	r25, Y+4	; 0x04
     b18:	01 97       	sbiw	r24, 0x01	; 1
     b1a:	9c 83       	std	Y+4, r25	; 0x04
     b1c:	8b 83       	std	Y+3, r24	; 0x03
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	9c 81       	ldd	r25, Y+4	; 0x04
     b22:	24 e0       	ldi	r18, 0x04	; 4
     b24:	fc 01       	movw	r30, r24
     b26:	20 83       	st	Z, r18
     b28:	8b 81       	ldd	r24, Y+3	; 0x03
     b2a:	9c 81       	ldd	r25, Y+4	; 0x04
     b2c:	01 97       	sbiw	r24, 0x01	; 1
     b2e:	9c 83       	std	Y+4, r25	; 0x04
     b30:	8b 83       	std	Y+3, r24	; 0x03
     b32:	8b 81       	ldd	r24, Y+3	; 0x03
     b34:	9c 81       	ldd	r25, Y+4	; 0x04
     b36:	25 e0       	ldi	r18, 0x05	; 5
     b38:	fc 01       	movw	r30, r24
     b3a:	20 83       	st	Z, r18
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	9c 81       	ldd	r25, Y+4	; 0x04
     b40:	01 97       	sbiw	r24, 0x01	; 1
     b42:	9c 83       	std	Y+4, r25	; 0x04
     b44:	8b 83       	std	Y+3, r24	; 0x03
     b46:	8b 81       	ldd	r24, Y+3	; 0x03
     b48:	9c 81       	ldd	r25, Y+4	; 0x04
     b4a:	26 e0       	ldi	r18, 0x06	; 6
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
     b50:	8b 81       	ldd	r24, Y+3	; 0x03
     b52:	9c 81       	ldd	r25, Y+4	; 0x04
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	9c 83       	std	Y+4, r25	; 0x04
     b58:	8b 83       	std	Y+3, r24	; 0x03
     b5a:	8b 81       	ldd	r24, Y+3	; 0x03
     b5c:	9c 81       	ldd	r25, Y+4	; 0x04
     b5e:	27 e0       	ldi	r18, 0x07	; 7
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
     b64:	8b 81       	ldd	r24, Y+3	; 0x03
     b66:	9c 81       	ldd	r25, Y+4	; 0x04
     b68:	01 97       	sbiw	r24, 0x01	; 1
     b6a:	9c 83       	std	Y+4, r25	; 0x04
     b6c:	8b 83       	std	Y+3, r24	; 0x03
     b6e:	8b 81       	ldd	r24, Y+3	; 0x03
     b70:	9c 81       	ldd	r25, Y+4	; 0x04
     b72:	28 e0       	ldi	r18, 0x08	; 8
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
     b78:	8b 81       	ldd	r24, Y+3	; 0x03
     b7a:	9c 81       	ldd	r25, Y+4	; 0x04
     b7c:	01 97       	sbiw	r24, 0x01	; 1
     b7e:	9c 83       	std	Y+4, r25	; 0x04
     b80:	8b 83       	std	Y+3, r24	; 0x03
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	9c 81       	ldd	r25, Y+4	; 0x04
     b86:	29 e0       	ldi	r18, 0x09	; 9
     b88:	fc 01       	movw	r30, r24
     b8a:	20 83       	st	Z, r18
     b8c:	8b 81       	ldd	r24, Y+3	; 0x03
     b8e:	9c 81       	ldd	r25, Y+4	; 0x04
     b90:	01 97       	sbiw	r24, 0x01	; 1
     b92:	9c 83       	std	Y+4, r25	; 0x04
     b94:	8b 83       	std	Y+3, r24	; 0x03
     b96:	8b 81       	ldd	r24, Y+3	; 0x03
     b98:	9c 81       	ldd	r25, Y+4	; 0x04
     b9a:	20 e1       	ldi	r18, 0x10	; 16
     b9c:	fc 01       	movw	r30, r24
     b9e:	20 83       	st	Z, r18
     ba0:	8b 81       	ldd	r24, Y+3	; 0x03
     ba2:	9c 81       	ldd	r25, Y+4	; 0x04
     ba4:	01 97       	sbiw	r24, 0x01	; 1
     ba6:	9c 83       	std	Y+4, r25	; 0x04
     ba8:	8b 83       	std	Y+3, r24	; 0x03
     baa:	8b 81       	ldd	r24, Y+3	; 0x03
     bac:	9c 81       	ldd	r25, Y+4	; 0x04
     bae:	21 e1       	ldi	r18, 0x11	; 17
     bb0:	fc 01       	movw	r30, r24
     bb2:	20 83       	st	Z, r18
     bb4:	8b 81       	ldd	r24, Y+3	; 0x03
     bb6:	9c 81       	ldd	r25, Y+4	; 0x04
     bb8:	01 97       	sbiw	r24, 0x01	; 1
     bba:	9c 83       	std	Y+4, r25	; 0x04
     bbc:	8b 83       	std	Y+3, r24	; 0x03
     bbe:	8b 81       	ldd	r24, Y+3	; 0x03
     bc0:	9c 81       	ldd	r25, Y+4	; 0x04
     bc2:	22 e1       	ldi	r18, 0x12	; 18
     bc4:	fc 01       	movw	r30, r24
     bc6:	20 83       	st	Z, r18
     bc8:	8b 81       	ldd	r24, Y+3	; 0x03
     bca:	9c 81       	ldd	r25, Y+4	; 0x04
     bcc:	01 97       	sbiw	r24, 0x01	; 1
     bce:	9c 83       	std	Y+4, r25	; 0x04
     bd0:	8b 83       	std	Y+3, r24	; 0x03
     bd2:	8b 81       	ldd	r24, Y+3	; 0x03
     bd4:	9c 81       	ldd	r25, Y+4	; 0x04
     bd6:	23 e1       	ldi	r18, 0x13	; 19
     bd8:	fc 01       	movw	r30, r24
     bda:	20 83       	st	Z, r18
     bdc:	8b 81       	ldd	r24, Y+3	; 0x03
     bde:	9c 81       	ldd	r25, Y+4	; 0x04
     be0:	01 97       	sbiw	r24, 0x01	; 1
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	8b 83       	std	Y+3, r24	; 0x03
     be6:	8b 81       	ldd	r24, Y+3	; 0x03
     be8:	9c 81       	ldd	r25, Y+4	; 0x04
     bea:	24 e1       	ldi	r18, 0x14	; 20
     bec:	fc 01       	movw	r30, r24
     bee:	20 83       	st	Z, r18
     bf0:	8b 81       	ldd	r24, Y+3	; 0x03
     bf2:	9c 81       	ldd	r25, Y+4	; 0x04
     bf4:	01 97       	sbiw	r24, 0x01	; 1
     bf6:	9c 83       	std	Y+4, r25	; 0x04
     bf8:	8b 83       	std	Y+3, r24	; 0x03
     bfa:	8b 81       	ldd	r24, Y+3	; 0x03
     bfc:	9c 81       	ldd	r25, Y+4	; 0x04
     bfe:	25 e1       	ldi	r18, 0x15	; 21
     c00:	fc 01       	movw	r30, r24
     c02:	20 83       	st	Z, r18
     c04:	8b 81       	ldd	r24, Y+3	; 0x03
     c06:	9c 81       	ldd	r25, Y+4	; 0x04
     c08:	01 97       	sbiw	r24, 0x01	; 1
     c0a:	9c 83       	std	Y+4, r25	; 0x04
     c0c:	8b 83       	std	Y+3, r24	; 0x03
     c0e:	8b 81       	ldd	r24, Y+3	; 0x03
     c10:	9c 81       	ldd	r25, Y+4	; 0x04
     c12:	26 e1       	ldi	r18, 0x16	; 22
     c14:	fc 01       	movw	r30, r24
     c16:	20 83       	st	Z, r18
     c18:	8b 81       	ldd	r24, Y+3	; 0x03
     c1a:	9c 81       	ldd	r25, Y+4	; 0x04
     c1c:	01 97       	sbiw	r24, 0x01	; 1
     c1e:	9c 83       	std	Y+4, r25	; 0x04
     c20:	8b 83       	std	Y+3, r24	; 0x03
     c22:	8b 81       	ldd	r24, Y+3	; 0x03
     c24:	9c 81       	ldd	r25, Y+4	; 0x04
     c26:	27 e1       	ldi	r18, 0x17	; 23
     c28:	fc 01       	movw	r30, r24
     c2a:	20 83       	st	Z, r18
     c2c:	8b 81       	ldd	r24, Y+3	; 0x03
     c2e:	9c 81       	ldd	r25, Y+4	; 0x04
     c30:	01 97       	sbiw	r24, 0x01	; 1
     c32:	9c 83       	std	Y+4, r25	; 0x04
     c34:	8b 83       	std	Y+3, r24	; 0x03
     c36:	8b 81       	ldd	r24, Y+3	; 0x03
     c38:	9c 81       	ldd	r25, Y+4	; 0x04
     c3a:	28 e1       	ldi	r18, 0x18	; 24
     c3c:	fc 01       	movw	r30, r24
     c3e:	20 83       	st	Z, r18
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	9c 81       	ldd	r25, Y+4	; 0x04
     c44:	01 97       	sbiw	r24, 0x01	; 1
     c46:	9c 83       	std	Y+4, r25	; 0x04
     c48:	8b 83       	std	Y+3, r24	; 0x03
     c4a:	8b 81       	ldd	r24, Y+3	; 0x03
     c4c:	9c 81       	ldd	r25, Y+4	; 0x04
     c4e:	29 e1       	ldi	r18, 0x19	; 25
     c50:	fc 01       	movw	r30, r24
     c52:	20 83       	st	Z, r18
     c54:	8b 81       	ldd	r24, Y+3	; 0x03
     c56:	9c 81       	ldd	r25, Y+4	; 0x04
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9c 83       	std	Y+4, r25	; 0x04
     c5c:	8b 83       	std	Y+3, r24	; 0x03
     c5e:	8b 81       	ldd	r24, Y+3	; 0x03
     c60:	9c 81       	ldd	r25, Y+4	; 0x04
     c62:	20 e2       	ldi	r18, 0x20	; 32
     c64:	fc 01       	movw	r30, r24
     c66:	20 83       	st	Z, r18
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	9c 83       	std	Y+4, r25	; 0x04
     c70:	8b 83       	std	Y+3, r24	; 0x03
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	9c 81       	ldd	r25, Y+4	; 0x04
     c76:	21 e2       	ldi	r18, 0x21	; 33
     c78:	fc 01       	movw	r30, r24
     c7a:	20 83       	st	Z, r18
     c7c:	8b 81       	ldd	r24, Y+3	; 0x03
     c7e:	9c 81       	ldd	r25, Y+4	; 0x04
     c80:	01 97       	sbiw	r24, 0x01	; 1
     c82:	9c 83       	std	Y+4, r25	; 0x04
     c84:	8b 83       	std	Y+3, r24	; 0x03
     c86:	8b 81       	ldd	r24, Y+3	; 0x03
     c88:	9c 81       	ldd	r25, Y+4	; 0x04
     c8a:	22 e2       	ldi	r18, 0x22	; 34
     c8c:	fc 01       	movw	r30, r24
     c8e:	20 83       	st	Z, r18
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	9c 81       	ldd	r25, Y+4	; 0x04
     c94:	01 97       	sbiw	r24, 0x01	; 1
     c96:	9c 83       	std	Y+4, r25	; 0x04
     c98:	8b 83       	std	Y+3, r24	; 0x03
     c9a:	8b 81       	ldd	r24, Y+3	; 0x03
     c9c:	9c 81       	ldd	r25, Y+4	; 0x04
     c9e:	23 e2       	ldi	r18, 0x23	; 35
     ca0:	fc 01       	movw	r30, r24
     ca2:	20 83       	st	Z, r18
     ca4:	8b 81       	ldd	r24, Y+3	; 0x03
     ca6:	9c 81       	ldd	r25, Y+4	; 0x04
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	9c 83       	std	Y+4, r25	; 0x04
     cac:	8b 83       	std	Y+3, r24	; 0x03
     cae:	8f 81       	ldd	r24, Y+7	; 0x07
     cb0:	98 85       	ldd	r25, Y+8	; 0x08
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
     cb6:	29 81       	ldd	r18, Y+1	; 0x01
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	9c 81       	ldd	r25, Y+4	; 0x04
     cbc:	fc 01       	movw	r30, r24
     cbe:	20 83       	st	Z, r18
     cc0:	8b 81       	ldd	r24, Y+3	; 0x03
     cc2:	9c 81       	ldd	r25, Y+4	; 0x04
     cc4:	01 97       	sbiw	r24, 0x01	; 1
     cc6:	9c 83       	std	Y+4, r25	; 0x04
     cc8:	8b 83       	std	Y+3, r24	; 0x03
     cca:	89 81       	ldd	r24, Y+1	; 0x01
     ccc:	9a 81       	ldd	r25, Y+2	; 0x02
     cce:	89 2f       	mov	r24, r25
     cd0:	99 27       	eor	r25, r25
     cd2:	9a 83       	std	Y+2, r25	; 0x02
     cd4:	89 83       	std	Y+1, r24	; 0x01
     cd6:	29 81       	ldd	r18, Y+1	; 0x01
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	fc 01       	movw	r30, r24
     cde:	20 83       	st	Z, r18
     ce0:	8b 81       	ldd	r24, Y+3	; 0x03
     ce2:	9c 81       	ldd	r25, Y+4	; 0x04
     ce4:	01 97       	sbiw	r24, 0x01	; 1
     ce6:	9c 83       	std	Y+4, r25	; 0x04
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	8b 81       	ldd	r24, Y+3	; 0x03
     cec:	9c 81       	ldd	r25, Y+4	; 0x04
     cee:	26 e2       	ldi	r18, 0x26	; 38
     cf0:	fc 01       	movw	r30, r24
     cf2:	20 83       	st	Z, r18
     cf4:	8b 81       	ldd	r24, Y+3	; 0x03
     cf6:	9c 81       	ldd	r25, Y+4	; 0x04
     cf8:	01 97       	sbiw	r24, 0x01	; 1
     cfa:	9c 83       	std	Y+4, r25	; 0x04
     cfc:	8b 83       	std	Y+3, r24	; 0x03
     cfe:	8b 81       	ldd	r24, Y+3	; 0x03
     d00:	9c 81       	ldd	r25, Y+4	; 0x04
     d02:	27 e2       	ldi	r18, 0x27	; 39
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
     d08:	8b 81       	ldd	r24, Y+3	; 0x03
     d0a:	9c 81       	ldd	r25, Y+4	; 0x04
     d0c:	01 97       	sbiw	r24, 0x01	; 1
     d0e:	9c 83       	std	Y+4, r25	; 0x04
     d10:	8b 83       	std	Y+3, r24	; 0x03
     d12:	8b 81       	ldd	r24, Y+3	; 0x03
     d14:	9c 81       	ldd	r25, Y+4	; 0x04
     d16:	28 e2       	ldi	r18, 0x28	; 40
     d18:	fc 01       	movw	r30, r24
     d1a:	20 83       	st	Z, r18
     d1c:	8b 81       	ldd	r24, Y+3	; 0x03
     d1e:	9c 81       	ldd	r25, Y+4	; 0x04
     d20:	01 97       	sbiw	r24, 0x01	; 1
     d22:	9c 83       	std	Y+4, r25	; 0x04
     d24:	8b 83       	std	Y+3, r24	; 0x03
     d26:	8b 81       	ldd	r24, Y+3	; 0x03
     d28:	9c 81       	ldd	r25, Y+4	; 0x04
     d2a:	29 e2       	ldi	r18, 0x29	; 41
     d2c:	fc 01       	movw	r30, r24
     d2e:	20 83       	st	Z, r18
     d30:	8b 81       	ldd	r24, Y+3	; 0x03
     d32:	9c 81       	ldd	r25, Y+4	; 0x04
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	9c 83       	std	Y+4, r25	; 0x04
     d38:	8b 83       	std	Y+3, r24	; 0x03
     d3a:	8b 81       	ldd	r24, Y+3	; 0x03
     d3c:	9c 81       	ldd	r25, Y+4	; 0x04
     d3e:	20 e3       	ldi	r18, 0x30	; 48
     d40:	fc 01       	movw	r30, r24
     d42:	20 83       	st	Z, r18
     d44:	8b 81       	ldd	r24, Y+3	; 0x03
     d46:	9c 81       	ldd	r25, Y+4	; 0x04
     d48:	01 97       	sbiw	r24, 0x01	; 1
     d4a:	9c 83       	std	Y+4, r25	; 0x04
     d4c:	8b 83       	std	Y+3, r24	; 0x03
     d4e:	8b 81       	ldd	r24, Y+3	; 0x03
     d50:	9c 81       	ldd	r25, Y+4	; 0x04
     d52:	21 e3       	ldi	r18, 0x31	; 49
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	8b 81       	ldd	r24, Y+3	; 0x03
     d5a:	9c 81       	ldd	r25, Y+4	; 0x04
     d5c:	01 97       	sbiw	r24, 0x01	; 1
     d5e:	9c 83       	std	Y+4, r25	; 0x04
     d60:	8b 83       	std	Y+3, r24	; 0x03
     d62:	8b 81       	ldd	r24, Y+3	; 0x03
     d64:	9c 81       	ldd	r25, Y+4	; 0x04
     d66:	28 96       	adiw	r28, 0x08	; 8
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
     d72:	df 91       	pop	r29
     d74:	cf 91       	pop	r28
     d76:	08 95       	ret

00000d78 <xPortStartScheduler>:
     d78:	cf 93       	push	r28
     d7a:	df 93       	push	r29
     d7c:	cd b7       	in	r28, 0x3d	; 61
     d7e:	de b7       	in	r29, 0x3e	; 62
     d80:	0e 94 a7 07 	call	0xf4e	; 0xf4e <prvSetupTimerInterrupt>
     d84:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <pxCurrentTCB>
     d88:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
     d8c:	cd 91       	ld	r28, X+
     d8e:	cd bf       	out	0x3d, r28	; 61
     d90:	dd 91       	ld	r29, X+
     d92:	de bf       	out	0x3e, r29	; 62
     d94:	ff 91       	pop	r31
     d96:	ef 91       	pop	r30
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	bf 91       	pop	r27
     d9e:	af 91       	pop	r26
     da0:	9f 91       	pop	r25
     da2:	8f 91       	pop	r24
     da4:	7f 91       	pop	r23
     da6:	6f 91       	pop	r22
     da8:	5f 91       	pop	r21
     daa:	4f 91       	pop	r20
     dac:	3f 91       	pop	r19
     dae:	2f 91       	pop	r18
     db0:	1f 91       	pop	r17
     db2:	0f 91       	pop	r16
     db4:	ff 90       	pop	r15
     db6:	ef 90       	pop	r14
     db8:	df 90       	pop	r13
     dba:	cf 90       	pop	r12
     dbc:	bf 90       	pop	r11
     dbe:	af 90       	pop	r10
     dc0:	9f 90       	pop	r9
     dc2:	8f 90       	pop	r8
     dc4:	7f 90       	pop	r7
     dc6:	6f 90       	pop	r6
     dc8:	5f 90       	pop	r5
     dca:	4f 90       	pop	r4
     dcc:	3f 90       	pop	r3
     dce:	2f 90       	pop	r2
     dd0:	1f 90       	pop	r1
     dd2:	0f 90       	pop	r0
     dd4:	0f be       	out	0x3f, r0	; 63
     dd6:	0f 90       	pop	r0
     dd8:	08 95       	ret
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	df 91       	pop	r29
     dde:	cf 91       	pop	r28
     de0:	08 95       	ret

00000de2 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
     de2:	0f 92       	push	r0
     de4:	0f b6       	in	r0, 0x3f	; 63
     de6:	f8 94       	cli
     de8:	0f 92       	push	r0
     dea:	1f 92       	push	r1
     dec:	11 24       	eor	r1, r1
     dee:	2f 92       	push	r2
     df0:	3f 92       	push	r3
     df2:	4f 92       	push	r4
     df4:	5f 92       	push	r5
     df6:	6f 92       	push	r6
     df8:	7f 92       	push	r7
     dfa:	8f 92       	push	r8
     dfc:	9f 92       	push	r9
     dfe:	af 92       	push	r10
     e00:	bf 92       	push	r11
     e02:	cf 92       	push	r12
     e04:	df 92       	push	r13
     e06:	ef 92       	push	r14
     e08:	ff 92       	push	r15
     e0a:	0f 93       	push	r16
     e0c:	1f 93       	push	r17
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	ef 93       	push	r30
     e28:	ff 93       	push	r31
     e2a:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <pxCurrentTCB>
     e2e:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
     e32:	0d b6       	in	r0, 0x3d	; 61
     e34:	0d 92       	st	X+, r0
     e36:	0e b6       	in	r0, 0x3e	; 62
     e38:	0d 92       	st	X+, r0
	vTaskSwitchContext();
     e3a:	0e 94 9b 12 	call	0x2536	; 0x2536 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
     e3e:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <pxCurrentTCB>
     e42:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
     e46:	cd 91       	ld	r28, X+
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	dd 91       	ld	r29, X+
     e4c:	de bf       	out	0x3e, r29	; 62
     e4e:	ff 91       	pop	r31
     e50:	ef 91       	pop	r30
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	bf 91       	pop	r27
     e58:	af 91       	pop	r26
     e5a:	9f 91       	pop	r25
     e5c:	8f 91       	pop	r24
     e5e:	7f 91       	pop	r23
     e60:	6f 91       	pop	r22
     e62:	5f 91       	pop	r21
     e64:	4f 91       	pop	r20
     e66:	3f 91       	pop	r19
     e68:	2f 91       	pop	r18
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	ef 90       	pop	r14
     e72:	df 90       	pop	r13
     e74:	cf 90       	pop	r12
     e76:	bf 90       	pop	r11
     e78:	af 90       	pop	r10
     e7a:	9f 90       	pop	r9
     e7c:	8f 90       	pop	r8
     e7e:	7f 90       	pop	r7
     e80:	6f 90       	pop	r6
     e82:	5f 90       	pop	r5
     e84:	4f 90       	pop	r4
     e86:	3f 90       	pop	r3
     e88:	2f 90       	pop	r2
     e8a:	1f 90       	pop	r1
     e8c:	0f 90       	pop	r0
     e8e:	0f be       	out	0x3f, r0	; 63
     e90:	0f 90       	pop	r0

	asm volatile ( "ret" );
     e92:	08 95       	ret

00000e94 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
     e94:	0f 92       	push	r0
     e96:	0f b6       	in	r0, 0x3f	; 63
     e98:	f8 94       	cli
     e9a:	0f 92       	push	r0
     e9c:	1f 92       	push	r1
     e9e:	11 24       	eor	r1, r1
     ea0:	2f 92       	push	r2
     ea2:	3f 92       	push	r3
     ea4:	4f 92       	push	r4
     ea6:	5f 92       	push	r5
     ea8:	6f 92       	push	r6
     eaa:	7f 92       	push	r7
     eac:	8f 92       	push	r8
     eae:	9f 92       	push	r9
     eb0:	af 92       	push	r10
     eb2:	bf 92       	push	r11
     eb4:	cf 92       	push	r12
     eb6:	df 92       	push	r13
     eb8:	ef 92       	push	r14
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	2f 93       	push	r18
     ec2:	3f 93       	push	r19
     ec4:	4f 93       	push	r20
     ec6:	5f 93       	push	r21
     ec8:	6f 93       	push	r22
     eca:	7f 93       	push	r23
     ecc:	8f 93       	push	r24
     ece:	9f 93       	push	r25
     ed0:	af 93       	push	r26
     ed2:	bf 93       	push	r27
     ed4:	cf 93       	push	r28
     ed6:	df 93       	push	r29
     ed8:	ef 93       	push	r30
     eda:	ff 93       	push	r31
     edc:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <pxCurrentTCB>
     ee0:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
     ee4:	0d b6       	in	r0, 0x3d	; 61
     ee6:	0d 92       	st	X+, r0
     ee8:	0e b6       	in	r0, 0x3e	; 62
     eea:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
     eec:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskIncrementTick>
     ef0:	88 23       	and	r24, r24
     ef2:	11 f0       	breq	.+4      	; 0xef8 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
     ef4:	0e 94 9b 12 	call	0x2536	; 0x2536 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
     ef8:	a0 91 71 03 	lds	r26, 0x0371	; 0x800371 <pxCurrentTCB>
     efc:	b0 91 72 03 	lds	r27, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
     f00:	cd 91       	ld	r28, X+
     f02:	cd bf       	out	0x3d, r28	; 61
     f04:	dd 91       	ld	r29, X+
     f06:	de bf       	out	0x3e, r29	; 62
     f08:	ff 91       	pop	r31
     f0a:	ef 91       	pop	r30
     f0c:	df 91       	pop	r29
     f0e:	cf 91       	pop	r28
     f10:	bf 91       	pop	r27
     f12:	af 91       	pop	r26
     f14:	9f 91       	pop	r25
     f16:	8f 91       	pop	r24
     f18:	7f 91       	pop	r23
     f1a:	6f 91       	pop	r22
     f1c:	5f 91       	pop	r21
     f1e:	4f 91       	pop	r20
     f20:	3f 91       	pop	r19
     f22:	2f 91       	pop	r18
     f24:	1f 91       	pop	r17
     f26:	0f 91       	pop	r16
     f28:	ff 90       	pop	r15
     f2a:	ef 90       	pop	r14
     f2c:	df 90       	pop	r13
     f2e:	cf 90       	pop	r12
     f30:	bf 90       	pop	r11
     f32:	af 90       	pop	r10
     f34:	9f 90       	pop	r9
     f36:	8f 90       	pop	r8
     f38:	7f 90       	pop	r7
     f3a:	6f 90       	pop	r6
     f3c:	5f 90       	pop	r5
     f3e:	4f 90       	pop	r4
     f40:	3f 90       	pop	r3
     f42:	2f 90       	pop	r2
     f44:	1f 90       	pop	r1
     f46:	0f 90       	pop	r0
     f48:	0f be       	out	0x3f, r0	; 63
     f4a:	0f 90       	pop	r0

	asm volatile ( "ret" );
     f4c:	08 95       	ret

00000f4e <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	00 d0       	rcall	.+0      	; 0xf54 <prvSetupTimerInterrupt+0x6>
     f54:	00 d0       	rcall	.+0      	; 0xf56 <prvSetupTimerInterrupt+0x8>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <prvSetupTimerInterrupt+0xa>
     f58:	cd b7       	in	r28, 0x3d	; 61
     f5a:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
     f5c:	89 e9       	ldi	r24, 0x99	; 153
     f5e:	99 e3       	ldi	r25, 0x39	; 57
     f60:	a0 e0       	ldi	r26, 0x00	; 0
     f62:	b0 e0       	ldi	r27, 0x00	; 0
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	9a 83       	std	Y+2, r25	; 0x02
     f68:	ab 83       	std	Y+3, r26	; 0x03
     f6a:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	ab 81       	ldd	r26, Y+3	; 0x03
     f72:	bc 81       	ldd	r27, Y+4	; 0x04
     f74:	68 94       	set
     f76:	15 f8       	bld	r1, 5
     f78:	b6 95       	lsr	r27
     f7a:	a7 95       	ror	r26
     f7c:	97 95       	ror	r25
     f7e:	87 95       	ror	r24
     f80:	16 94       	lsr	r1
     f82:	d1 f7       	brne	.-12     	; 0xf78 <prvSetupTimerInterrupt+0x2a>
     f84:	89 83       	std	Y+1, r24	; 0x01
     f86:	9a 83       	std	Y+2, r25	; 0x02
     f88:	ab 83       	std	Y+3, r26	; 0x03
     f8a:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	ab 81       	ldd	r26, Y+3	; 0x03
     f92:	bc 81       	ldd	r27, Y+4	; 0x04
     f94:	01 97       	sbiw	r24, 0x01	; 1
     f96:	a1 09       	sbc	r26, r1
     f98:	b1 09       	sbc	r27, r1
     f9a:	89 83       	std	Y+1, r24	; 0x01
     f9c:	9a 83       	std	Y+2, r25	; 0x02
     f9e:	ab 83       	std	Y+3, r26	; 0x03
     fa0:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
     fa6:	89 81       	ldd	r24, Y+1	; 0x01
     fa8:	9a 81       	ldd	r25, Y+2	; 0x02
     faa:	ab 81       	ldd	r26, Y+3	; 0x03
     fac:	bc 81       	ldd	r27, Y+4	; 0x04
     fae:	89 2f       	mov	r24, r25
     fb0:	9a 2f       	mov	r25, r26
     fb2:	ab 2f       	mov	r26, r27
     fb4:	bb 27       	eor	r27, r27
     fb6:	89 83       	std	Y+1, r24	; 0x01
     fb8:	9a 83       	std	Y+2, r25	; 0x02
     fba:	ab 83       	std	Y+3, r26	; 0x03
     fbc:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
     fc2:	89 e8       	ldi	r24, 0x89	; 137
     fc4:	90 e0       	ldi	r25, 0x00	; 0
     fc6:	2e 81       	ldd	r18, Y+6	; 0x06
     fc8:	fc 01       	movw	r30, r24
     fca:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
     fcc:	88 e8       	ldi	r24, 0x88	; 136
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	2d 81       	ldd	r18, Y+5	; 0x05
     fd2:	fc 01       	movw	r30, r24
     fd4:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
     fd6:	8b e0       	ldi	r24, 0x0B	; 11
     fd8:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
     fda:	81 e8       	ldi	r24, 0x81	; 129
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	2d 81       	ldd	r18, Y+5	; 0x05
     fe0:	fc 01       	movw	r30, r24
     fe2:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
     fe4:	8f e6       	ldi	r24, 0x6F	; 111
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	fc 01       	movw	r30, r24
     fea:	80 81       	ld	r24, Z
     fec:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
     fee:	8d 81       	ldd	r24, Y+5	; 0x05
     ff0:	82 60       	ori	r24, 0x02	; 2
     ff2:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
     ff4:	8f e6       	ldi	r24, 0x6F	; 111
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	2d 81       	ldd	r18, Y+5	; 0x05
     ffa:	fc 01       	movw	r30, r24
     ffc:	20 83       	st	Z, r18
}
     ffe:	26 96       	adiw	r28, 0x06	; 6
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	08 95       	ret

00001010 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1010:	0e 94 4a 07 	call	0xe94	; 0xe94 <vPortYieldFromTick>
		asm volatile ( "reti" );
    1014:	18 95       	reti

00001016 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <pvPortMalloc+0x6>
    101c:	00 d0       	rcall	.+0      	; 0x101e <pvPortMalloc+0x8>
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	9c 83       	std	Y+4, r25	; 0x04
    1024:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    1026:	1a 82       	std	Y+2, r1	; 0x02
    1028:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    102a:	0e 94 0c 11 	call	0x2218	; 0x2218 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    102e:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <pucAlignedHeap.1964>
    1032:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <pucAlignedHeap.1964+0x1>
    1036:	89 2b       	or	r24, r25
    1038:	31 f4       	brne	.+12     	; 0x1046 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    103a:	86 e7       	ldi	r24, 0x76	; 118
    103c:	91 e0       	ldi	r25, 0x01	; 1
    103e:	90 93 6c 03 	sts	0x036C, r25	; 0x80036c <pucAlignedHeap.1964+0x1>
    1042:	80 93 6b 03 	sts	0x036B, r24	; 0x80036b <pucAlignedHeap.1964>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1046:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <xNextFreeByte>
    104a:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <xNextFreeByte+0x1>
    104e:	8b 81       	ldd	r24, Y+3	; 0x03
    1050:	9c 81       	ldd	r25, Y+4	; 0x04
    1052:	82 0f       	add	r24, r18
    1054:	93 1f       	adc	r25, r19
    1056:	83 3f       	cpi	r24, 0xF3	; 243
    1058:	91 40       	sbci	r25, 0x01	; 1
    105a:	38 f5       	brcc	.+78     	; 0x10aa <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    105c:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <xNextFreeByte>
    1060:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <xNextFreeByte+0x1>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	28 0f       	add	r18, r24
    106a:	39 1f       	adc	r19, r25
    106c:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <xNextFreeByte>
    1070:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1074:	82 17       	cp	r24, r18
    1076:	93 07       	cpc	r25, r19
    1078:	c0 f4       	brcc	.+48     	; 0x10aa <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    107a:	20 91 6b 03 	lds	r18, 0x036B	; 0x80036b <pucAlignedHeap.1964>
    107e:	30 91 6c 03 	lds	r19, 0x036C	; 0x80036c <pucAlignedHeap.1964+0x1>
    1082:	80 91 69 03 	lds	r24, 0x0369	; 0x800369 <xNextFreeByte>
    1086:	90 91 6a 03 	lds	r25, 0x036A	; 0x80036a <xNextFreeByte+0x1>
    108a:	82 0f       	add	r24, r18
    108c:	93 1f       	adc	r25, r19
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1092:	20 91 69 03 	lds	r18, 0x0369	; 0x800369 <xNextFreeByte>
    1096:	30 91 6a 03 	lds	r19, 0x036A	; 0x80036a <xNextFreeByte+0x1>
    109a:	8b 81       	ldd	r24, Y+3	; 0x03
    109c:	9c 81       	ldd	r25, Y+4	; 0x04
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	90 93 6a 03 	sts	0x036A, r25	; 0x80036a <xNextFreeByte+0x1>
    10a6:	80 93 69 03 	sts	0x0369, r24	; 0x800369 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    10aa:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    10ae:	89 81       	ldd	r24, Y+1	; 0x01
    10b0:	9a 81       	ldd	r25, Y+2	; 0x02
}
    10b2:	0f 90       	pop	r0
    10b4:	0f 90       	pop	r0
    10b6:	0f 90       	pop	r0
    10b8:	0f 90       	pop	r0
    10ba:	df 91       	pop	r29
    10bc:	cf 91       	pop	r28
    10be:	08 95       	ret

000010c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    10c0:	cf 93       	push	r28
    10c2:	df 93       	push	r29
    10c4:	00 d0       	rcall	.+0      	; 0x10c6 <vPortFree+0x6>
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	9a 83       	std	Y+2, r25	; 0x02
    10cc:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    10ce:	0f 90       	pop	r0
    10d0:	0f 90       	pop	r0
    10d2:	df 91       	pop	r29
    10d4:	cf 91       	pop	r28
    10d6:	08 95       	ret

000010d8 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    10d8:	cf 93       	push	r28
    10da:	df 93       	push	r29
    10dc:	00 d0       	rcall	.+0      	; 0x10de <_serial_tx_int_on+0x6>
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	05 97       	sbiw	r24, 0x05	; 5
    10ec:	29 81       	ldd	r18, Y+1	; 0x01
    10ee:	3a 81       	ldd	r19, Y+2	; 0x02
    10f0:	25 50       	subi	r18, 0x05	; 5
    10f2:	31 09       	sbc	r19, r1
    10f4:	f9 01       	movw	r30, r18
    10f6:	20 81       	ld	r18, Z
    10f8:	20 62       	ori	r18, 0x20	; 32
    10fa:	fc 01       	movw	r30, r24
    10fc:	20 83       	st	Z, r18
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	df 91       	pop	r29
    1104:	cf 91       	pop	r28
    1106:	08 95       	ret

00001108 <serial_new_instance>:
    1108:	8f 92       	push	r8
    110a:	9f 92       	push	r9
    110c:	af 92       	push	r10
    110e:	bf 92       	push	r11
    1110:	cf 92       	push	r12
    1112:	df 92       	push	r13
    1114:	ef 92       	push	r14
    1116:	0f 93       	push	r16
    1118:	1f 93       	push	r17
    111a:	cf 93       	push	r28
    111c:	df 93       	push	r29
    111e:	cd b7       	in	r28, 0x3d	; 61
    1120:	de b7       	in	r29, 0x3e	; 62
    1122:	65 97       	sbiw	r28, 0x15	; 21
    1124:	0f b6       	in	r0, 0x3f	; 63
    1126:	f8 94       	cli
    1128:	de bf       	out	0x3e, r29	; 62
    112a:	0f be       	out	0x3f, r0	; 63
    112c:	cd bf       	out	0x3d, r28	; 61
    112e:	8c 83       	std	Y+4, r24	; 0x04
    1130:	4d 83       	std	Y+5, r20	; 0x05
    1132:	5e 83       	std	Y+6, r21	; 0x06
    1134:	6f 83       	std	Y+7, r22	; 0x07
    1136:	78 87       	std	Y+8, r23	; 0x08
    1138:	29 87       	std	Y+9, r18	; 0x09
    113a:	0a 87       	std	Y+10, r16	; 0x0a
    113c:	eb 86       	std	Y+11, r14	; 0x0b
    113e:	dd 86       	std	Y+13, r13	; 0x0d
    1140:	cc 86       	std	Y+12, r12	; 0x0c
    1142:	bf 86       	std	Y+15, r11	; 0x0f
    1144:	ae 86       	std	Y+14, r10	; 0x0e
    1146:	99 8a       	std	Y+17, r9	; 0x11
    1148:	88 8a       	std	Y+16, r8	; 0x10
    114a:	88 e0       	ldi	r24, 0x08	; 8
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 99 15 	call	0x2b32	; 0x2b32 <malloc>
    1152:	9a 83       	std	Y+2, r25	; 0x02
    1154:	89 83       	std	Y+1, r24	; 0x01
    1156:	8c 81       	ldd	r24, Y+4	; 0x04
    1158:	88 2f       	mov	r24, r24
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	83 59       	subi	r24, 0x93	; 147
    1162:	9c 4f       	sbci	r25, 0xFC	; 252
    1164:	29 81       	ldd	r18, Y+1	; 0x01
    1166:	3a 81       	ldd	r19, Y+2	; 0x02
    1168:	fc 01       	movw	r30, r24
    116a:	31 83       	std	Z+1, r19	; 0x01
    116c:	20 83       	st	Z, r18
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	88 2f       	mov	r24, r24
    1172:	90 e0       	ldi	r25, 0x00	; 0
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	8e 5d       	subi	r24, 0xDE	; 222
    117a:	9e 4f       	sbci	r25, 0xFE	; 254
    117c:	fc 01       	movw	r30, r24
    117e:	20 81       	ld	r18, Z
    1180:	31 81       	ldd	r19, Z+1	; 0x01
    1182:	89 81       	ldd	r24, Y+1	; 0x01
    1184:	9a 81       	ldd	r25, Y+2	; 0x02
    1186:	fc 01       	movw	r30, r24
    1188:	31 83       	std	Z+1, r19	; 0x01
    118a:	20 83       	st	Z, r18
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	2e 85       	ldd	r18, Y+14	; 0x0e
    1192:	3f 85       	ldd	r19, Y+15	; 0x0f
    1194:	fc 01       	movw	r30, r24
    1196:	33 83       	std	Z+3, r19	; 0x03
    1198:	22 83       	std	Z+2, r18	; 0x02
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	2c 85       	ldd	r18, Y+12	; 0x0c
    11a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    11a2:	fc 01       	movw	r30, r24
    11a4:	35 83       	std	Z+5, r19	; 0x05
    11a6:	24 83       	std	Z+4, r18	; 0x04
    11a8:	89 81       	ldd	r24, Y+1	; 0x01
    11aa:	9a 81       	ldd	r25, Y+2	; 0x02
    11ac:	28 89       	ldd	r18, Y+16	; 0x10
    11ae:	39 89       	ldd	r19, Y+17	; 0x11
    11b0:	fc 01       	movw	r30, r24
    11b2:	37 83       	std	Z+7, r19	; 0x07
    11b4:	26 83       	std	Z+6, r18	; 0x06
    11b6:	8f e5       	ldi	r24, 0x5F	; 95
    11b8:	90 e0       	ldi	r25, 0x00	; 0
    11ba:	fc 01       	movw	r30, r24
    11bc:	80 81       	ld	r24, Z
    11be:	8b 83       	std	Y+3, r24	; 0x03
    11c0:	f8 94       	cli
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
    11ca:	91 81       	ldd	r25, Z+1	; 0x01
    11cc:	06 97       	sbiw	r24, 0x06	; 6
    11ce:	29 81       	ldd	r18, Y+1	; 0x01
    11d0:	3a 81       	ldd	r19, Y+2	; 0x02
    11d2:	f9 01       	movw	r30, r18
    11d4:	20 81       	ld	r18, Z
    11d6:	31 81       	ldd	r19, Z+1	; 0x01
    11d8:	26 50       	subi	r18, 0x06	; 6
    11da:	31 09       	sbc	r19, r1
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	22 60       	ori	r18, 0x02	; 2
    11e2:	fc 01       	movw	r30, r24
    11e4:	20 83       	st	Z, r18
    11e6:	89 81       	ldd	r24, Y+1	; 0x01
    11e8:	9a 81       	ldd	r25, Y+2	; 0x02
    11ea:	fc 01       	movw	r30, r24
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	8c 01       	movw	r16, r24
    11f2:	02 50       	subi	r16, 0x02	; 2
    11f4:	11 09       	sbc	r17, r1
    11f6:	8d 81       	ldd	r24, Y+5	; 0x05
    11f8:	9e 81       	ldd	r25, Y+6	; 0x06
    11fa:	af 81       	ldd	r26, Y+7	; 0x07
    11fc:	b8 85       	ldd	r27, Y+8	; 0x08
    11fe:	88 0f       	add	r24, r24
    1200:	99 1f       	adc	r25, r25
    1202:	aa 1f       	adc	r26, r26
    1204:	bb 1f       	adc	r27, r27
    1206:	88 0f       	add	r24, r24
    1208:	99 1f       	adc	r25, r25
    120a:	aa 1f       	adc	r26, r26
    120c:	bb 1f       	adc	r27, r27
    120e:	88 0f       	add	r24, r24
    1210:	99 1f       	adc	r25, r25
    1212:	aa 1f       	adc	r26, r26
    1214:	bb 1f       	adc	r27, r27
    1216:	9c 01       	movw	r18, r24
    1218:	ad 01       	movw	r20, r26
    121a:	80 e0       	ldi	r24, 0x00	; 0
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	a1 ee       	ldi	r26, 0xE1	; 225
    1220:	b0 e0       	ldi	r27, 0x00	; 0
    1222:	bc 01       	movw	r22, r24
    1224:	cd 01       	movw	r24, r26
    1226:	0e 94 77 15 	call	0x2aee	; 0x2aee <__udivmodsi4>
    122a:	da 01       	movw	r26, r20
    122c:	c9 01       	movw	r24, r18
    122e:	81 50       	subi	r24, 0x01	; 1
    1230:	f8 01       	movw	r30, r16
    1232:	80 83       	st	Z, r24
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	91 81       	ldd	r25, Z+1	; 0x01
    123e:	05 97       	sbiw	r24, 0x05	; 5
    1240:	28 e9       	ldi	r18, 0x98	; 152
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	9a 81       	ldd	r25, Y+2	; 0x02
    124a:	fc 01       	movw	r30, r24
    124c:	80 81       	ld	r24, Z
    124e:	91 81       	ldd	r25, Z+1	; 0x01
    1250:	04 97       	sbiw	r24, 0x04	; 4
    1252:	26 e0       	ldi	r18, 0x06	; 6
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
    1258:	8f e5       	ldi	r24, 0x5F	; 95
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	2b 81       	ldd	r18, Y+3	; 0x03
    125e:	fc 01       	movw	r30, r24
    1260:	20 83       	st	Z, r18
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	65 96       	adiw	r28, 0x15	; 21
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	df 91       	pop	r29
    1274:	cf 91       	pop	r28
    1276:	1f 91       	pop	r17
    1278:	0f 91       	pop	r16
    127a:	ef 90       	pop	r14
    127c:	df 90       	pop	r13
    127e:	cf 90       	pop	r12
    1280:	bf 90       	pop	r11
    1282:	af 90       	pop	r10
    1284:	9f 90       	pop	r9
    1286:	8f 90       	pop	r8
    1288:	08 95       	ret

0000128a <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
    128e:	00 d0       	rcall	.+0      	; 0x1290 <serial_send_bytes+0x6>
    1290:	00 d0       	rcall	.+0      	; 0x1292 <serial_send_bytes+0x8>
    1292:	00 d0       	rcall	.+0      	; 0x1294 <serial_send_bytes+0xa>
    1294:	cd b7       	in	r28, 0x3d	; 61
    1296:	de b7       	in	r29, 0x3e	; 62
    1298:	9b 83       	std	Y+3, r25	; 0x03
    129a:	8a 83       	std	Y+2, r24	; 0x02
    129c:	7d 83       	std	Y+5, r23	; 0x05
    129e:	6c 83       	std	Y+4, r22	; 0x04
    12a0:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    12a2:	8a 81       	ldd	r24, Y+2	; 0x02
    12a4:	9b 81       	ldd	r25, Y+3	; 0x03
    12a6:	fc 01       	movw	r30, r24
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	93 81       	ldd	r25, Z+3	; 0x03
    12ac:	89 2b       	or	r24, r25
    12ae:	a9 f0       	breq	.+42     	; 0x12da <serial_send_bytes+0x50>
    12b0:	8e 81       	ldd	r24, Y+6	; 0x06
    12b2:	28 2f       	mov	r18, r24
    12b4:	30 e0       	ldi	r19, 0x00	; 0
    12b6:	8a 81       	ldd	r24, Y+2	; 0x02
    12b8:	9b 81       	ldd	r25, Y+3	; 0x03
    12ba:	fc 01       	movw	r30, r24
    12bc:	82 81       	ldd	r24, Z+2	; 0x02
    12be:	93 81       	ldd	r25, Z+3	; 0x03
    12c0:	fc 01       	movw	r30, r24
    12c2:	82 89       	ldd	r24, Z+18	; 0x12
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	40 e1       	ldi	r20, 0x10	; 16
    12ca:	50 e0       	ldi	r21, 0x00	; 0
    12cc:	ba 01       	movw	r22, r20
    12ce:	68 1b       	sub	r22, r24
    12d0:	79 0b       	sbc	r23, r25
    12d2:	cb 01       	movw	r24, r22
    12d4:	82 17       	cp	r24, r18
    12d6:	93 07       	cpc	r25, r19
    12d8:	54 f0       	brlt	.+20     	; 0x12ee <serial_send_bytes+0x64>
    12da:	8a 81       	ldd	r24, Y+2	; 0x02
    12dc:	9b 81       	ldd	r25, Y+3	; 0x03
    12de:	fc 01       	movw	r30, r24
    12e0:	82 81       	ldd	r24, Z+2	; 0x02
    12e2:	93 81       	ldd	r25, Z+3	; 0x03
    12e4:	89 2b       	or	r24, r25
    12e6:	29 f4       	brne	.+10     	; 0x12f2 <serial_send_bytes+0x68>
    12e8:	8e 81       	ldd	r24, Y+6	; 0x06
    12ea:	82 30       	cpi	r24, 0x02	; 2
    12ec:	10 f0       	brcs	.+4      	; 0x12f2 <serial_send_bytes+0x68>
		return BUFFER_FULL;
    12ee:	82 e0       	ldi	r24, 0x02	; 2
    12f0:	22 c0       	rjmp	.+68     	; 0x1336 <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    12f2:	19 82       	std	Y+1, r1	; 0x01
    12f4:	14 c0       	rjmp	.+40     	; 0x131e <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    12f6:	89 81       	ldd	r24, Y+1	; 0x01
    12f8:	88 2f       	mov	r24, r24
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	2c 81       	ldd	r18, Y+4	; 0x04
    12fe:	3d 81       	ldd	r19, Y+5	; 0x05
    1300:	82 0f       	add	r24, r18
    1302:	93 1f       	adc	r25, r19
    1304:	fc 01       	movw	r30, r24
    1306:	20 81       	ld	r18, Z
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	9b 81       	ldd	r25, Y+3	; 0x03
    130c:	fc 01       	movw	r30, r24
    130e:	82 81       	ldd	r24, Z+2	; 0x02
    1310:	93 81       	ldd	r25, Z+3	; 0x03
    1312:	62 2f       	mov	r22, r18
    1314:	0e 94 6e 03 	call	0x6dc	; 0x6dc <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1318:	89 81       	ldd	r24, Y+1	; 0x01
    131a:	8f 5f       	subi	r24, 0xFF	; 255
    131c:	89 83       	std	Y+1, r24	; 0x01
    131e:	99 81       	ldd	r25, Y+1	; 0x01
    1320:	8e 81       	ldd	r24, Y+6	; 0x06
    1322:	98 17       	cp	r25, r24
    1324:	40 f3       	brcs	.-48     	; 0x12f6 <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1326:	8a 81       	ldd	r24, Y+2	; 0x02
    1328:	9b 81       	ldd	r25, Y+3	; 0x03
    132a:	fc 01       	movw	r30, r24
    132c:	80 81       	ld	r24, Z
    132e:	91 81       	ldd	r25, Z+1	; 0x01
    1330:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <_serial_tx_int_on>
	return BUFFER_OK;
    1334:	80 e0       	ldi	r24, 0x00	; 0
}
    1336:	26 96       	adiw	r28, 0x06	; 6
    1338:	0f b6       	in	r0, 0x3f	; 63
    133a:	f8 94       	cli
    133c:	de bf       	out	0x3e, r29	; 62
    133e:	0f be       	out	0x3f, r0	; 63
    1340:	cd bf       	out	0x3d, r28	; 61
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1348:	1f 92       	push	r1
    134a:	0f 92       	push	r0
    134c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1350:	0f 92       	push	r0
    1352:	11 24       	eor	r1, r1
    1354:	2f 93       	push	r18
    1356:	3f 93       	push	r19
    1358:	4f 93       	push	r20
    135a:	5f 93       	push	r21
    135c:	6f 93       	push	r22
    135e:	7f 93       	push	r23
    1360:	8f 93       	push	r24
    1362:	9f 93       	push	r25
    1364:	af 93       	push	r26
    1366:	bf 93       	push	r27
    1368:	ef 93       	push	r30
    136a:	ff 93       	push	r31
    136c:	cf 93       	push	r28
    136e:	df 93       	push	r29
    1370:	1f 92       	push	r1
    1372:	cd b7       	in	r28, 0x3d	; 61
    1374:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1376:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    137a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    137e:	89 2b       	or	r24, r25
    1380:	31 f1       	breq	.+76     	; 0x13ce <__vector_20+0x86>
		item = UDR0;
    1382:	86 ec       	ldi	r24, 0xC6	; 198
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	fc 01       	movw	r30, r24
    1388:	80 81       	ld	r24, Z
    138a:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    138c:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    1390:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    1394:	fc 01       	movw	r30, r24
    1396:	84 81       	ldd	r24, Z+4	; 0x04
    1398:	95 81       	ldd	r25, Z+5	; 0x05
    139a:	69 81       	ldd	r22, Y+1	; 0x01
    139c:	0e 94 6e 03 	call	0x6dc	; 0x6dc <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    13a0:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    13a4:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    13a8:	fc 01       	movw	r30, r24
    13aa:	86 81       	ldd	r24, Z+6	; 0x06
    13ac:	97 81       	ldd	r25, Z+7	; 0x07
    13ae:	89 2b       	or	r24, r25
    13b0:	71 f0       	breq	.+28     	; 0x13ce <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    13b2:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    13b6:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    13ba:	fc 01       	movw	r30, r24
    13bc:	26 81       	ldd	r18, Z+6	; 0x06
    13be:	37 81       	ldd	r19, Z+7	; 0x07
    13c0:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    13c4:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    13c8:	69 81       	ldd	r22, Y+1	; 0x01
    13ca:	f9 01       	movw	r30, r18
    13cc:	09 95       	icall
		}
	}
}
    13ce:	0f 90       	pop	r0
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	ff 91       	pop	r31
    13d6:	ef 91       	pop	r30
    13d8:	bf 91       	pop	r27
    13da:	af 91       	pop	r26
    13dc:	9f 91       	pop	r25
    13de:	8f 91       	pop	r24
    13e0:	7f 91       	pop	r23
    13e2:	6f 91       	pop	r22
    13e4:	5f 91       	pop	r21
    13e6:	4f 91       	pop	r20
    13e8:	3f 91       	pop	r19
    13ea:	2f 91       	pop	r18
    13ec:	0f 90       	pop	r0
    13ee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    13f2:	0f 90       	pop	r0
    13f4:	1f 90       	pop	r1
    13f6:	18 95       	reti

000013f8 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    13f8:	1f 92       	push	r1
    13fa:	0f 92       	push	r0
    13fc:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1400:	0f 92       	push	r0
    1402:	11 24       	eor	r1, r1
    1404:	2f 93       	push	r18
    1406:	3f 93       	push	r19
    1408:	4f 93       	push	r20
    140a:	5f 93       	push	r21
    140c:	6f 93       	push	r22
    140e:	7f 93       	push	r23
    1410:	8f 93       	push	r24
    1412:	9f 93       	push	r25
    1414:	af 93       	push	r26
    1416:	bf 93       	push	r27
    1418:	ef 93       	push	r30
    141a:	ff 93       	push	r31
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	1f 92       	push	r1
    1422:	cd b7       	in	r28, 0x3d	; 61
    1424:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1426:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    142a:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    142e:	89 2b       	or	r24, r25
    1430:	f9 f0       	breq	.+62     	; 0x1470 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1432:	80 91 6d 03 	lds	r24, 0x036D	; 0x80036d <_ser_handle>
    1436:	90 91 6e 03 	lds	r25, 0x036E	; 0x80036e <_ser_handle+0x1>
    143a:	fc 01       	movw	r30, r24
    143c:	82 81       	ldd	r24, Z+2	; 0x02
    143e:	93 81       	ldd	r25, Z+3	; 0x03
    1440:	9e 01       	movw	r18, r28
    1442:	2f 5f       	subi	r18, 0xFF	; 255
    1444:	3f 4f       	sbci	r19, 0xFF	; 255
    1446:	b9 01       	movw	r22, r18
    1448:	0e 94 26 03 	call	0x64c	; 0x64c <buffer_get_item>
    144c:	88 23       	and	r24, r24
    144e:	31 f4       	brne	.+12     	; 0x145c <__vector_21+0x64>
			UDR0 = item;
    1450:	86 ec       	ldi	r24, 0xC6	; 198
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	29 81       	ldd	r18, Y+1	; 0x01
    1456:	fc 01       	movw	r30, r24
    1458:	20 83       	st	Z, r18
    145a:	13 c0       	rjmp	.+38     	; 0x1482 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    145c:	81 ec       	ldi	r24, 0xC1	; 193
    145e:	90 e0       	ldi	r25, 0x00	; 0
    1460:	21 ec       	ldi	r18, 0xC1	; 193
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	f9 01       	movw	r30, r18
    1466:	20 81       	ld	r18, Z
    1468:	2f 7d       	andi	r18, 0xDF	; 223
    146a:	fc 01       	movw	r30, r24
    146c:	20 83       	st	Z, r18
    146e:	09 c0       	rjmp	.+18     	; 0x1482 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1470:	81 ec       	ldi	r24, 0xC1	; 193
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	21 ec       	ldi	r18, 0xC1	; 193
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	f9 01       	movw	r30, r18
    147a:	20 81       	ld	r18, Z
    147c:	2f 7d       	andi	r18, 0xDF	; 223
    147e:	fc 01       	movw	r30, r24
    1480:	20 83       	st	Z, r18
	}
}
    1482:	0f 90       	pop	r0
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	ff 91       	pop	r31
    148a:	ef 91       	pop	r30
    148c:	bf 91       	pop	r27
    148e:	af 91       	pop	r26
    1490:	9f 91       	pop	r25
    1492:	8f 91       	pop	r24
    1494:	7f 91       	pop	r23
    1496:	6f 91       	pop	r22
    1498:	5f 91       	pop	r21
    149a:	4f 91       	pop	r20
    149c:	3f 91       	pop	r19
    149e:	2f 91       	pop	r18
    14a0:	0f 90       	pop	r0
    14a2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14a6:	0f 90       	pop	r0
    14a8:	1f 90       	pop	r1
    14aa:	18 95       	reti

000014ac <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    14ac:	1f 92       	push	r1
    14ae:	0f 92       	push	r0
    14b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    14b4:	0f 92       	push	r0
    14b6:	11 24       	eor	r1, r1
    14b8:	2f 93       	push	r18
    14ba:	3f 93       	push	r19
    14bc:	4f 93       	push	r20
    14be:	5f 93       	push	r21
    14c0:	6f 93       	push	r22
    14c2:	7f 93       	push	r23
    14c4:	8f 93       	push	r24
    14c6:	9f 93       	push	r25
    14c8:	af 93       	push	r26
    14ca:	bf 93       	push	r27
    14cc:	ef 93       	push	r30
    14ce:	ff 93       	push	r31
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	1f 92       	push	r1
    14d6:	cd b7       	in	r28, 0x3d	; 61
    14d8:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    14da:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    14de:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    14e2:	89 2b       	or	r24, r25
    14e4:	31 f1       	breq	.+76     	; 0x1532 <__vector_28+0x86>
		item = UDR1;
    14e6:	8e ec       	ldi	r24, 0xCE	; 206
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	80 81       	ld	r24, Z
    14ee:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    14f0:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    14f4:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    14f8:	fc 01       	movw	r30, r24
    14fa:	84 81       	ldd	r24, Z+4	; 0x04
    14fc:	95 81       	ldd	r25, Z+5	; 0x05
    14fe:	69 81       	ldd	r22, Y+1	; 0x01
    1500:	0e 94 6e 03 	call	0x6dc	; 0x6dc <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1504:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    1508:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    150c:	fc 01       	movw	r30, r24
    150e:	86 81       	ldd	r24, Z+6	; 0x06
    1510:	97 81       	ldd	r25, Z+7	; 0x07
    1512:	89 2b       	or	r24, r25
    1514:	71 f0       	breq	.+28     	; 0x1532 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1516:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    151a:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    151e:	fc 01       	movw	r30, r24
    1520:	26 81       	ldd	r18, Z+6	; 0x06
    1522:	37 81       	ldd	r19, Z+7	; 0x07
    1524:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    1528:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    152c:	69 81       	ldd	r22, Y+1	; 0x01
    152e:	f9 01       	movw	r30, r18
    1530:	09 95       	icall
		}
	}
}
    1532:	0f 90       	pop	r0
    1534:	df 91       	pop	r29
    1536:	cf 91       	pop	r28
    1538:	ff 91       	pop	r31
    153a:	ef 91       	pop	r30
    153c:	bf 91       	pop	r27
    153e:	af 91       	pop	r26
    1540:	9f 91       	pop	r25
    1542:	8f 91       	pop	r24
    1544:	7f 91       	pop	r23
    1546:	6f 91       	pop	r22
    1548:	5f 91       	pop	r21
    154a:	4f 91       	pop	r20
    154c:	3f 91       	pop	r19
    154e:	2f 91       	pop	r18
    1550:	0f 90       	pop	r0
    1552:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1556:	0f 90       	pop	r0
    1558:	1f 90       	pop	r1
    155a:	18 95       	reti

0000155c <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    155c:	1f 92       	push	r1
    155e:	0f 92       	push	r0
    1560:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1564:	0f 92       	push	r0
    1566:	11 24       	eor	r1, r1
    1568:	2f 93       	push	r18
    156a:	3f 93       	push	r19
    156c:	4f 93       	push	r20
    156e:	5f 93       	push	r21
    1570:	6f 93       	push	r22
    1572:	7f 93       	push	r23
    1574:	8f 93       	push	r24
    1576:	9f 93       	push	r25
    1578:	af 93       	push	r26
    157a:	bf 93       	push	r27
    157c:	ef 93       	push	r30
    157e:	ff 93       	push	r31
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	1f 92       	push	r1
    1586:	cd b7       	in	r28, 0x3d	; 61
    1588:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    158a:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    158e:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    1592:	89 2b       	or	r24, r25
    1594:	f9 f0       	breq	.+62     	; 0x15d4 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1596:	80 91 6f 03 	lds	r24, 0x036F	; 0x80036f <_ser_handle+0x2>
    159a:	90 91 70 03 	lds	r25, 0x0370	; 0x800370 <_ser_handle+0x3>
    159e:	fc 01       	movw	r30, r24
    15a0:	82 81       	ldd	r24, Z+2	; 0x02
    15a2:	93 81       	ldd	r25, Z+3	; 0x03
    15a4:	9e 01       	movw	r18, r28
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	b9 01       	movw	r22, r18
    15ac:	0e 94 26 03 	call	0x64c	; 0x64c <buffer_get_item>
    15b0:	88 23       	and	r24, r24
    15b2:	31 f4       	brne	.+12     	; 0x15c0 <__vector_29+0x64>
			UDR1 = item;
    15b4:	8e ec       	ldi	r24, 0xCE	; 206
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	29 81       	ldd	r18, Y+1	; 0x01
    15ba:	fc 01       	movw	r30, r24
    15bc:	20 83       	st	Z, r18
    15be:	13 c0       	rjmp	.+38     	; 0x15e6 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    15c0:	89 ec       	ldi	r24, 0xC9	; 201
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	29 ec       	ldi	r18, 0xC9	; 201
    15c6:	30 e0       	ldi	r19, 0x00	; 0
    15c8:	f9 01       	movw	r30, r18
    15ca:	20 81       	ld	r18, Z
    15cc:	2f 7d       	andi	r18, 0xDF	; 223
    15ce:	fc 01       	movw	r30, r24
    15d0:	20 83       	st	Z, r18
    15d2:	09 c0       	rjmp	.+18     	; 0x15e6 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    15d4:	89 ec       	ldi	r24, 0xC9	; 201
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	29 ec       	ldi	r18, 0xC9	; 201
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	f9 01       	movw	r30, r18
    15de:	20 81       	ld	r18, Z
    15e0:	2f 7d       	andi	r18, 0xDF	; 223
    15e2:	fc 01       	movw	r30, r24
    15e4:	20 83       	st	Z, r18
	}
}
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	ff 91       	pop	r31
    15ee:	ef 91       	pop	r30
    15f0:	bf 91       	pop	r27
    15f2:	af 91       	pop	r26
    15f4:	9f 91       	pop	r25
    15f6:	8f 91       	pop	r24
    15f8:	7f 91       	pop	r23
    15fa:	6f 91       	pop	r22
    15fc:	5f 91       	pop	r21
    15fe:	4f 91       	pop	r20
    1600:	3f 91       	pop	r19
    1602:	2f 91       	pop	r18
    1604:	0f 90       	pop	r0
    1606:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    160a:	0f 90       	pop	r0
    160c:	1f 90       	pop	r1
    160e:	18 95       	reti

00001610 <xQueueGenericReset>:
#if ( configUSE_TRACE_FACILITY == 1 )

	uint8_t ucQueueGetQueueType( QueueHandle_t xQueue )
	{
		return ( ( Queue_t * ) xQueue )->ucQueueType;
	}
    1610:	cf 93       	push	r28
    1612:	df 93       	push	r29
    1614:	00 d0       	rcall	.+0      	; 0x1616 <xQueueGenericReset+0x6>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <xQueueGenericReset+0x8>
    1618:	1f 92       	push	r1
    161a:	cd b7       	in	r28, 0x3d	; 61
    161c:	de b7       	in	r29, 0x3e	; 62
    161e:	9c 83       	std	Y+4, r25	; 0x04
    1620:	8b 83       	std	Y+3, r24	; 0x03
    1622:	6d 83       	std	Y+5, r22	; 0x05
    1624:	8b 81       	ldd	r24, Y+3	; 0x03
    1626:	9c 81       	ldd	r25, Y+4	; 0x04
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	89 83       	std	Y+1, r24	; 0x01
    162c:	0f b6       	in	r0, 0x3f	; 63
    162e:	f8 94       	cli
    1630:	0f 92       	push	r0
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	fc 01       	movw	r30, r24
    1638:	80 81       	ld	r24, Z
    163a:	91 81       	ldd	r25, Z+1	; 0x01
    163c:	29 81       	ldd	r18, Y+1	; 0x01
    163e:	3a 81       	ldd	r19, Y+2	; 0x02
    1640:	f9 01       	movw	r30, r18
    1642:	23 8d       	ldd	r18, Z+27	; 0x1b
    1644:	42 2f       	mov	r20, r18
    1646:	50 e0       	ldi	r21, 0x00	; 0
    1648:	29 81       	ldd	r18, Y+1	; 0x01
    164a:	3a 81       	ldd	r19, Y+2	; 0x02
    164c:	f9 01       	movw	r30, r18
    164e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1650:	22 2f       	mov	r18, r18
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	42 9f       	mul	r20, r18
    1656:	b0 01       	movw	r22, r0
    1658:	43 9f       	mul	r20, r19
    165a:	70 0d       	add	r23, r0
    165c:	52 9f       	mul	r21, r18
    165e:	70 0d       	add	r23, r0
    1660:	11 24       	eor	r1, r1
    1662:	9b 01       	movw	r18, r22
    1664:	28 0f       	add	r18, r24
    1666:	39 1f       	adc	r19, r25
    1668:	89 81       	ldd	r24, Y+1	; 0x01
    166a:	9a 81       	ldd	r25, Y+2	; 0x02
    166c:	fc 01       	movw	r30, r24
    166e:	33 83       	std	Z+3, r19	; 0x03
    1670:	22 83       	std	Z+2, r18	; 0x02
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	9a 81       	ldd	r25, Y+2	; 0x02
    1676:	fc 01       	movw	r30, r24
    1678:	12 8e       	std	Z+26, r1	; 0x1a
    167a:	89 81       	ldd	r24, Y+1	; 0x01
    167c:	9a 81       	ldd	r25, Y+2	; 0x02
    167e:	fc 01       	movw	r30, r24
    1680:	20 81       	ld	r18, Z
    1682:	31 81       	ldd	r19, Z+1	; 0x01
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	9a 81       	ldd	r25, Y+2	; 0x02
    1688:	fc 01       	movw	r30, r24
    168a:	35 83       	std	Z+5, r19	; 0x05
    168c:	24 83       	std	Z+4, r18	; 0x04
    168e:	89 81       	ldd	r24, Y+1	; 0x01
    1690:	9a 81       	ldd	r25, Y+2	; 0x02
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	29 81       	ldd	r18, Y+1	; 0x01
    169a:	3a 81       	ldd	r19, Y+2	; 0x02
    169c:	f9 01       	movw	r30, r18
    169e:	23 8d       	ldd	r18, Z+27	; 0x1b
    16a0:	22 2f       	mov	r18, r18
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	a9 01       	movw	r20, r18
    16a6:	41 50       	subi	r20, 0x01	; 1
    16a8:	51 09       	sbc	r21, r1
    16aa:	29 81       	ldd	r18, Y+1	; 0x01
    16ac:	3a 81       	ldd	r19, Y+2	; 0x02
    16ae:	f9 01       	movw	r30, r18
    16b0:	24 8d       	ldd	r18, Z+28	; 0x1c
    16b2:	22 2f       	mov	r18, r18
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	42 9f       	mul	r20, r18
    16b8:	b0 01       	movw	r22, r0
    16ba:	43 9f       	mul	r20, r19
    16bc:	70 0d       	add	r23, r0
    16be:	52 9f       	mul	r21, r18
    16c0:	70 0d       	add	r23, r0
    16c2:	11 24       	eor	r1, r1
    16c4:	9b 01       	movw	r18, r22
    16c6:	28 0f       	add	r18, r24
    16c8:	39 1f       	adc	r19, r25
    16ca:	89 81       	ldd	r24, Y+1	; 0x01
    16cc:	9a 81       	ldd	r25, Y+2	; 0x02
    16ce:	fc 01       	movw	r30, r24
    16d0:	37 83       	std	Z+7, r19	; 0x07
    16d2:	26 83       	std	Z+6, r18	; 0x06
    16d4:	89 81       	ldd	r24, Y+1	; 0x01
    16d6:	9a 81       	ldd	r25, Y+2	; 0x02
    16d8:	2f ef       	ldi	r18, 0xFF	; 255
    16da:	fc 01       	movw	r30, r24
    16dc:	25 8f       	std	Z+29, r18	; 0x1d
    16de:	89 81       	ldd	r24, Y+1	; 0x01
    16e0:	9a 81       	ldd	r25, Y+2	; 0x02
    16e2:	2f ef       	ldi	r18, 0xFF	; 255
    16e4:	fc 01       	movw	r30, r24
    16e6:	26 8f       	std	Z+30, r18	; 0x1e
    16e8:	8d 81       	ldd	r24, Y+5	; 0x05
    16ea:	88 23       	and	r24, r24
    16ec:	81 f4       	brne	.+32     	; 0x170e <xQueueGenericReset+0xfe>
    16ee:	89 81       	ldd	r24, Y+1	; 0x01
    16f0:	9a 81       	ldd	r25, Y+2	; 0x02
    16f2:	fc 01       	movw	r30, r24
    16f4:	80 85       	ldd	r24, Z+8	; 0x08
    16f6:	88 23       	and	r24, r24
    16f8:	a1 f0       	breq	.+40     	; 0x1722 <xQueueGenericReset+0x112>
    16fa:	89 81       	ldd	r24, Y+1	; 0x01
    16fc:	9a 81       	ldd	r25, Y+2	; 0x02
    16fe:	08 96       	adiw	r24, 0x08	; 8
    1700:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    1704:	88 23       	and	r24, r24
    1706:	69 f0       	breq	.+26     	; 0x1722 <xQueueGenericReset+0x112>
    1708:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <xQueueGenericReset+0x112>
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	08 96       	adiw	r24, 0x08	; 8
    1714:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	41 96       	adiw	r24, 0x11	; 17
    171e:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    1722:	0f 90       	pop	r0
    1724:	0f be       	out	0x3f, r0	; 63
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	df 91       	pop	r29
    1734:	cf 91       	pop	r28
    1736:	08 95       	ret

00001738 <xQueueGenericCreate>:
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	cd b7       	in	r28, 0x3d	; 61
    1742:	de b7       	in	r29, 0x3e	; 62
    1744:	29 97       	sbiw	r28, 0x09	; 9
    1746:	0f b6       	in	r0, 0x3f	; 63
    1748:	f8 94       	cli
    174a:	de bf       	out	0x3e, r29	; 62
    174c:	0f be       	out	0x3f, r0	; 63
    174e:	cd bf       	out	0x3d, r28	; 61
    1750:	8f 83       	std	Y+7, r24	; 0x07
    1752:	68 87       	std	Y+8, r22	; 0x08
    1754:	49 87       	std	Y+9, r20	; 0x09
    1756:	88 85       	ldd	r24, Y+8	; 0x08
    1758:	88 23       	and	r24, r24
    175a:	19 f4       	brne	.+6      	; 0x1762 <xQueueGenericCreate+0x2a>
    175c:	1a 82       	std	Y+2, r1	; 0x02
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	0f c0       	rjmp	.+30     	; 0x1780 <xQueueGenericCreate+0x48>
    1762:	8f 81       	ldd	r24, Y+7	; 0x07
    1764:	48 2f       	mov	r20, r24
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	88 85       	ldd	r24, Y+8	; 0x08
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	42 9f       	mul	r20, r18
    1770:	c0 01       	movw	r24, r0
    1772:	43 9f       	mul	r20, r19
    1774:	90 0d       	add	r25, r0
    1776:	52 9f       	mul	r21, r18
    1778:	90 0d       	add	r25, r0
    177a:	11 24       	eor	r1, r1
    177c:	9a 83       	std	Y+2, r25	; 0x02
    177e:	89 83       	std	Y+1, r24	; 0x01
    1780:	89 81       	ldd	r24, Y+1	; 0x01
    1782:	9a 81       	ldd	r25, Y+2	; 0x02
    1784:	81 96       	adiw	r24, 0x21	; 33
    1786:	0e 94 0b 08 	call	0x1016	; 0x1016 <pvPortMalloc>
    178a:	9c 83       	std	Y+4, r25	; 0x04
    178c:	8b 83       	std	Y+3, r24	; 0x03
    178e:	8b 81       	ldd	r24, Y+3	; 0x03
    1790:	9c 81       	ldd	r25, Y+4	; 0x04
    1792:	89 2b       	or	r24, r25
    1794:	81 f0       	breq	.+32     	; 0x17b6 <xQueueGenericCreate+0x7e>
    1796:	8b 81       	ldd	r24, Y+3	; 0x03
    1798:	9c 81       	ldd	r25, Y+4	; 0x04
    179a:	81 96       	adiw	r24, 0x21	; 33
    179c:	9e 83       	std	Y+6, r25	; 0x06
    179e:	8d 83       	std	Y+5, r24	; 0x05
    17a0:	2b 81       	ldd	r18, Y+3	; 0x03
    17a2:	3c 81       	ldd	r19, Y+4	; 0x04
    17a4:	8d 81       	ldd	r24, Y+5	; 0x05
    17a6:	9e 81       	ldd	r25, Y+6	; 0x06
    17a8:	89 01       	movw	r16, r18
    17aa:	29 85       	ldd	r18, Y+9	; 0x09
    17ac:	ac 01       	movw	r20, r24
    17ae:	68 85       	ldd	r22, Y+8	; 0x08
    17b0:	8f 81       	ldd	r24, Y+7	; 0x07
    17b2:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <prvInitialiseNewQueue>
    17b6:	8b 81       	ldd	r24, Y+3	; 0x03
    17b8:	9c 81       	ldd	r25, Y+4	; 0x04
    17ba:	29 96       	adiw	r28, 0x09	; 9
    17bc:	0f b6       	in	r0, 0x3f	; 63
    17be:	f8 94       	cli
    17c0:	de bf       	out	0x3e, r29	; 62
    17c2:	0f be       	out	0x3f, r0	; 63
    17c4:	cd bf       	out	0x3d, r28	; 61
    17c6:	df 91       	pop	r29
    17c8:	cf 91       	pop	r28
    17ca:	1f 91       	pop	r17
    17cc:	0f 91       	pop	r16
    17ce:	08 95       	ret

000017d0 <prvInitialiseNewQueue>:
    17d0:	0f 93       	push	r16
    17d2:	1f 93       	push	r17
    17d4:	cf 93       	push	r28
    17d6:	df 93       	push	r29
    17d8:	cd b7       	in	r28, 0x3d	; 61
    17da:	de b7       	in	r29, 0x3e	; 62
    17dc:	27 97       	sbiw	r28, 0x07	; 7
    17de:	0f b6       	in	r0, 0x3f	; 63
    17e0:	f8 94       	cli
    17e2:	de bf       	out	0x3e, r29	; 62
    17e4:	0f be       	out	0x3f, r0	; 63
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	89 83       	std	Y+1, r24	; 0x01
    17ea:	6a 83       	std	Y+2, r22	; 0x02
    17ec:	5c 83       	std	Y+4, r21	; 0x04
    17ee:	4b 83       	std	Y+3, r20	; 0x03
    17f0:	2d 83       	std	Y+5, r18	; 0x05
    17f2:	1f 83       	std	Y+7, r17	; 0x07
    17f4:	0e 83       	std	Y+6, r16	; 0x06
    17f6:	8a 81       	ldd	r24, Y+2	; 0x02
    17f8:	88 23       	and	r24, r24
    17fa:	41 f4       	brne	.+16     	; 0x180c <prvInitialiseNewQueue+0x3c>
    17fc:	8e 81       	ldd	r24, Y+6	; 0x06
    17fe:	9f 81       	ldd	r25, Y+7	; 0x07
    1800:	2e 81       	ldd	r18, Y+6	; 0x06
    1802:	3f 81       	ldd	r19, Y+7	; 0x07
    1804:	fc 01       	movw	r30, r24
    1806:	31 83       	std	Z+1, r19	; 0x01
    1808:	20 83       	st	Z, r18
    180a:	07 c0       	rjmp	.+14     	; 0x181a <prvInitialiseNewQueue+0x4a>
    180c:	8e 81       	ldd	r24, Y+6	; 0x06
    180e:	9f 81       	ldd	r25, Y+7	; 0x07
    1810:	2b 81       	ldd	r18, Y+3	; 0x03
    1812:	3c 81       	ldd	r19, Y+4	; 0x04
    1814:	fc 01       	movw	r30, r24
    1816:	31 83       	std	Z+1, r19	; 0x01
    1818:	20 83       	st	Z, r18
    181a:	8e 81       	ldd	r24, Y+6	; 0x06
    181c:	9f 81       	ldd	r25, Y+7	; 0x07
    181e:	29 81       	ldd	r18, Y+1	; 0x01
    1820:	fc 01       	movw	r30, r24
    1822:	23 8f       	std	Z+27, r18	; 0x1b
    1824:	8e 81       	ldd	r24, Y+6	; 0x06
    1826:	9f 81       	ldd	r25, Y+7	; 0x07
    1828:	2a 81       	ldd	r18, Y+2	; 0x02
    182a:	fc 01       	movw	r30, r24
    182c:	24 8f       	std	Z+28, r18	; 0x1c
    182e:	8e 81       	ldd	r24, Y+6	; 0x06
    1830:	9f 81       	ldd	r25, Y+7	; 0x07
    1832:	61 e0       	ldi	r22, 0x01	; 1
    1834:	0e 94 08 0b 	call	0x1610	; 0x1610 <xQueueGenericReset>
    1838:	8e 81       	ldd	r24, Y+6	; 0x06
    183a:	9f 81       	ldd	r25, Y+7	; 0x07
    183c:	2d 81       	ldd	r18, Y+5	; 0x05
    183e:	fc 01       	movw	r30, r24
    1840:	20 a3       	std	Z+32, r18	; 0x20
    1842:	27 96       	adiw	r28, 0x07	; 7
    1844:	0f b6       	in	r0, 0x3f	; 63
    1846:	f8 94       	cli
    1848:	de bf       	out	0x3e, r29	; 62
    184a:	0f be       	out	0x3f, r0	; 63
    184c:	cd bf       	out	0x3d, r28	; 61
    184e:	df 91       	pop	r29
    1850:	cf 91       	pop	r28
    1852:	1f 91       	pop	r17
    1854:	0f 91       	pop	r16
    1856:	08 95       	ret

00001858 <xQueueGenericSendFromISR>:
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	cd b7       	in	r28, 0x3d	; 61
    185e:	de b7       	in	r29, 0x3e	; 62
    1860:	2c 97       	sbiw	r28, 0x0c	; 12
    1862:	0f b6       	in	r0, 0x3f	; 63
    1864:	f8 94       	cli
    1866:	de bf       	out	0x3e, r29	; 62
    1868:	0f be       	out	0x3f, r0	; 63
    186a:	cd bf       	out	0x3d, r28	; 61
    186c:	9f 83       	std	Y+7, r25	; 0x07
    186e:	8e 83       	std	Y+6, r24	; 0x06
    1870:	79 87       	std	Y+9, r23	; 0x09
    1872:	68 87       	std	Y+8, r22	; 0x08
    1874:	5b 87       	std	Y+11, r21	; 0x0b
    1876:	4a 87       	std	Y+10, r20	; 0x0a
    1878:	2c 87       	std	Y+12, r18	; 0x0c
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	9f 81       	ldd	r25, Y+7	; 0x07
    187e:	9b 83       	std	Y+3, r25	; 0x03
    1880:	8a 83       	std	Y+2, r24	; 0x02
    1882:	1c 82       	std	Y+4, r1	; 0x04
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	fc 01       	movw	r30, r24
    188a:	22 8d       	ldd	r18, Z+26	; 0x1a
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	9b 81       	ldd	r25, Y+3	; 0x03
    1890:	fc 01       	movw	r30, r24
    1892:	83 8d       	ldd	r24, Z+27	; 0x1b
    1894:	28 17       	cp	r18, r24
    1896:	18 f0       	brcs	.+6      	; 0x189e <xQueueGenericSendFromISR+0x46>
    1898:	8c 85       	ldd	r24, Y+12	; 0x0c
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	89 f5       	brne	.+98     	; 0x1900 <xQueueGenericSendFromISR+0xa8>
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	fc 01       	movw	r30, r24
    18a4:	86 8d       	ldd	r24, Z+30	; 0x1e
    18a6:	8d 83       	std	Y+5, r24	; 0x05
    18a8:	28 85       	ldd	r18, Y+8	; 0x08
    18aa:	39 85       	ldd	r19, Y+9	; 0x09
    18ac:	8a 81       	ldd	r24, Y+2	; 0x02
    18ae:	9b 81       	ldd	r25, Y+3	; 0x03
    18b0:	4c 85       	ldd	r20, Y+12	; 0x0c
    18b2:	b9 01       	movw	r22, r18
    18b4:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <prvCopyDataToQueue>
    18b8:	8d 81       	ldd	r24, Y+5	; 0x05
    18ba:	8f 3f       	cpi	r24, 0xFF	; 255
    18bc:	b9 f4       	brne	.+46     	; 0x18ec <xQueueGenericSendFromISR+0x94>
    18be:	8a 81       	ldd	r24, Y+2	; 0x02
    18c0:	9b 81       	ldd	r25, Y+3	; 0x03
    18c2:	fc 01       	movw	r30, r24
    18c4:	81 89       	ldd	r24, Z+17	; 0x11
    18c6:	88 23       	and	r24, r24
    18c8:	c1 f0       	breq	.+48     	; 0x18fa <xQueueGenericSendFromISR+0xa2>
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	9b 81       	ldd	r25, Y+3	; 0x03
    18ce:	41 96       	adiw	r24, 0x11	; 17
    18d0:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    18d4:	88 23       	and	r24, r24
    18d6:	89 f0       	breq	.+34     	; 0x18fa <xQueueGenericSendFromISR+0xa2>
    18d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    18da:	9b 85       	ldd	r25, Y+11	; 0x0b
    18dc:	89 2b       	or	r24, r25
    18de:	69 f0       	breq	.+26     	; 0x18fa <xQueueGenericSendFromISR+0xa2>
    18e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    18e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    18e4:	21 e0       	ldi	r18, 0x01	; 1
    18e6:	fc 01       	movw	r30, r24
    18e8:	20 83       	st	Z, r18
    18ea:	07 c0       	rjmp	.+14     	; 0x18fa <xQueueGenericSendFromISR+0xa2>
    18ec:	8d 81       	ldd	r24, Y+5	; 0x05
    18ee:	8f 5f       	subi	r24, 0xFF	; 255
    18f0:	28 2f       	mov	r18, r24
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	9b 81       	ldd	r25, Y+3	; 0x03
    18f6:	fc 01       	movw	r30, r24
    18f8:	26 8f       	std	Z+30, r18	; 0x1e
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	89 83       	std	Y+1, r24	; 0x01
    18fe:	01 c0       	rjmp	.+2      	; 0x1902 <xQueueGenericSendFromISR+0xaa>
    1900:	19 82       	std	Y+1, r1	; 0x01
    1902:	89 81       	ldd	r24, Y+1	; 0x01
    1904:	2c 96       	adiw	r28, 0x0c	; 12
    1906:	0f b6       	in	r0, 0x3f	; 63
    1908:	f8 94       	cli
    190a:	de bf       	out	0x3e, r29	; 62
    190c:	0f be       	out	0x3f, r0	; 63
    190e:	cd bf       	out	0x3d, r28	; 61
    1910:	df 91       	pop	r29
    1912:	cf 91       	pop	r28
    1914:	08 95       	ret

00001916 <xQueueGenericReceive>:
    1916:	cf 93       	push	r28
    1918:	df 93       	push	r29
    191a:	cd b7       	in	r28, 0x3d	; 61
    191c:	de b7       	in	r29, 0x3e	; 62
    191e:	60 97       	sbiw	r28, 0x10	; 16
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	9b 87       	std	Y+11, r25	; 0x0b
    192c:	8a 87       	std	Y+10, r24	; 0x0a
    192e:	7d 87       	std	Y+13, r23	; 0x0d
    1930:	6c 87       	std	Y+12, r22	; 0x0c
    1932:	5f 87       	std	Y+15, r21	; 0x0f
    1934:	4e 87       	std	Y+14, r20	; 0x0e
    1936:	28 8b       	std	Y+16, r18	; 0x10
    1938:	19 82       	std	Y+1, r1	; 0x01
    193a:	8a 85       	ldd	r24, Y+10	; 0x0a
    193c:	9b 85       	ldd	r25, Y+11	; 0x0b
    193e:	9b 83       	std	Y+3, r25	; 0x03
    1940:	8a 83       	std	Y+2, r24	; 0x02
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	0f 92       	push	r0
    1948:	8a 81       	ldd	r24, Y+2	; 0x02
    194a:	9b 81       	ldd	r25, Y+3	; 0x03
    194c:	fc 01       	movw	r30, r24
    194e:	82 8d       	ldd	r24, Z+26	; 0x1a
    1950:	8c 83       	std	Y+4, r24	; 0x04
    1952:	8c 81       	ldd	r24, Y+4	; 0x04
    1954:	88 23       	and	r24, r24
    1956:	09 f4       	brne	.+2      	; 0x195a <xQueueGenericReceive+0x44>
    1958:	42 c0       	rjmp	.+132    	; 0x19de <xQueueGenericReceive+0xc8>
    195a:	8a 81       	ldd	r24, Y+2	; 0x02
    195c:	9b 81       	ldd	r25, Y+3	; 0x03
    195e:	fc 01       	movw	r30, r24
    1960:	86 81       	ldd	r24, Z+6	; 0x06
    1962:	97 81       	ldd	r25, Z+7	; 0x07
    1964:	9e 83       	std	Y+6, r25	; 0x06
    1966:	8d 83       	std	Y+5, r24	; 0x05
    1968:	2c 85       	ldd	r18, Y+12	; 0x0c
    196a:	3d 85       	ldd	r19, Y+13	; 0x0d
    196c:	8a 81       	ldd	r24, Y+2	; 0x02
    196e:	9b 81       	ldd	r25, Y+3	; 0x03
    1970:	b9 01       	movw	r22, r18
    1972:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <prvCopyDataFromQueue>
    1976:	88 89       	ldd	r24, Y+16	; 0x10
    1978:	88 23       	and	r24, r24
    197a:	b9 f4       	brne	.+46     	; 0x19aa <xQueueGenericReceive+0x94>
    197c:	8c 81       	ldd	r24, Y+4	; 0x04
    197e:	2f ef       	ldi	r18, 0xFF	; 255
    1980:	28 0f       	add	r18, r24
    1982:	8a 81       	ldd	r24, Y+2	; 0x02
    1984:	9b 81       	ldd	r25, Y+3	; 0x03
    1986:	fc 01       	movw	r30, r24
    1988:	22 8f       	std	Z+26, r18	; 0x1a
    198a:	8a 81       	ldd	r24, Y+2	; 0x02
    198c:	9b 81       	ldd	r25, Y+3	; 0x03
    198e:	fc 01       	movw	r30, r24
    1990:	80 85       	ldd	r24, Z+8	; 0x08
    1992:	88 23       	and	r24, r24
    1994:	01 f1       	breq	.+64     	; 0x19d6 <xQueueGenericReceive+0xc0>
    1996:	8a 81       	ldd	r24, Y+2	; 0x02
    1998:	9b 81       	ldd	r25, Y+3	; 0x03
    199a:	08 96       	adiw	r24, 0x08	; 8
    199c:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    19a0:	88 23       	and	r24, r24
    19a2:	c9 f0       	breq	.+50     	; 0x19d6 <xQueueGenericReceive+0xc0>
    19a4:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    19a8:	16 c0       	rjmp	.+44     	; 0x19d6 <xQueueGenericReceive+0xc0>
    19aa:	8a 81       	ldd	r24, Y+2	; 0x02
    19ac:	9b 81       	ldd	r25, Y+3	; 0x03
    19ae:	2d 81       	ldd	r18, Y+5	; 0x05
    19b0:	3e 81       	ldd	r19, Y+6	; 0x06
    19b2:	fc 01       	movw	r30, r24
    19b4:	37 83       	std	Z+7, r19	; 0x07
    19b6:	26 83       	std	Z+6, r18	; 0x06
    19b8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ba:	9b 81       	ldd	r25, Y+3	; 0x03
    19bc:	fc 01       	movw	r30, r24
    19be:	81 89       	ldd	r24, Z+17	; 0x11
    19c0:	88 23       	and	r24, r24
    19c2:	49 f0       	breq	.+18     	; 0x19d6 <xQueueGenericReceive+0xc0>
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	9b 81       	ldd	r25, Y+3	; 0x03
    19c8:	41 96       	adiw	r24, 0x11	; 17
    19ca:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    19ce:	88 23       	and	r24, r24
    19d0:	11 f0       	breq	.+4      	; 0x19d6 <xQueueGenericReceive+0xc0>
    19d2:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    19d6:	0f 90       	pop	r0
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	67 c0       	rjmp	.+206    	; 0x1aac <xQueueGenericReceive+0x196>
    19de:	8e 85       	ldd	r24, Y+14	; 0x0e
    19e0:	9f 85       	ldd	r25, Y+15	; 0x0f
    19e2:	89 2b       	or	r24, r25
    19e4:	21 f4       	brne	.+8      	; 0x19ee <xQueueGenericReceive+0xd8>
    19e6:	0f 90       	pop	r0
    19e8:	0f be       	out	0x3f, r0	; 63
    19ea:	80 e0       	ldi	r24, 0x00	; 0
    19ec:	5f c0       	rjmp	.+190    	; 0x1aac <xQueueGenericReceive+0x196>
    19ee:	89 81       	ldd	r24, Y+1	; 0x01
    19f0:	88 23       	and	r24, r24
    19f2:	31 f4       	brne	.+12     	; 0x1a00 <xQueueGenericReceive+0xea>
    19f4:	ce 01       	movw	r24, r28
    19f6:	07 96       	adiw	r24, 0x07	; 7
    19f8:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskSetTimeOutState>
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	0f 90       	pop	r0
    1a02:	0f be       	out	0x3f, r0	; 63
    1a04:	0e 94 0c 11 	call	0x2218	; 0x2218 <vTaskSuspendAll>
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	0f 92       	push	r0
    1a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a10:	9b 81       	ldd	r25, Y+3	; 0x03
    1a12:	fc 01       	movw	r30, r24
    1a14:	85 8d       	ldd	r24, Z+29	; 0x1d
    1a16:	8f 3f       	cpi	r24, 0xFF	; 255
    1a18:	21 f4       	brne	.+8      	; 0x1a22 <xQueueGenericReceive+0x10c>
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a1e:	fc 01       	movw	r30, r24
    1a20:	15 8e       	std	Z+29, r1	; 0x1d
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	fc 01       	movw	r30, r24
    1a28:	86 8d       	ldd	r24, Z+30	; 0x1e
    1a2a:	8f 3f       	cpi	r24, 0xFF	; 255
    1a2c:	21 f4       	brne	.+8      	; 0x1a36 <xQueueGenericReceive+0x120>
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	9b 81       	ldd	r25, Y+3	; 0x03
    1a32:	fc 01       	movw	r30, r24
    1a34:	16 8e       	std	Z+30, r1	; 0x1e
    1a36:	0f 90       	pop	r0
    1a38:	0f be       	out	0x3f, r0	; 63
    1a3a:	9e 01       	movw	r18, r28
    1a3c:	22 5f       	subi	r18, 0xF2	; 242
    1a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a40:	ce 01       	movw	r24, r28
    1a42:	07 96       	adiw	r24, 0x07	; 7
    1a44:	b9 01       	movw	r22, r18
    1a46:	0e 94 ca 13 	call	0x2794	; 0x2794 <xTaskCheckForTimeOut>
    1a4a:	88 23       	and	r24, r24
    1a4c:	01 f5       	brne	.+64     	; 0x1a8e <xQueueGenericReceive+0x178>
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	9b 81       	ldd	r25, Y+3	; 0x03
    1a52:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <prvIsQueueEmpty>
    1a56:	88 23       	and	r24, r24
    1a58:	99 f0       	breq	.+38     	; 0x1a80 <xQueueGenericReceive+0x16a>
    1a5a:	2e 85       	ldd	r18, Y+14	; 0x0e
    1a5c:	3f 85       	ldd	r19, Y+15	; 0x0f
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	41 96       	adiw	r24, 0x11	; 17
    1a64:	b9 01       	movw	r22, r18
    1a66:	0e 94 20 13 	call	0x2640	; 0x2640 <vTaskPlaceOnEventList>
    1a6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a6e:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <prvUnlockQueue>
    1a72:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    1a76:	88 23       	and	r24, r24
    1a78:	c1 f4       	brne	.+48     	; 0x1aaa <xQueueGenericReceive+0x194>
    1a7a:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    1a7e:	15 c0       	rjmp	.+42     	; 0x1aaa <xQueueGenericReceive+0x194>
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	9b 81       	ldd	r25, Y+3	; 0x03
    1a84:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <prvUnlockQueue>
    1a88:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    1a8c:	5a cf       	rjmp	.-332    	; 0x1942 <xQueueGenericReceive+0x2c>
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	9b 81       	ldd	r25, Y+3	; 0x03
    1a92:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <prvUnlockQueue>
    1a96:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    1a9e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <prvIsQueueEmpty>
    1aa2:	88 23       	and	r24, r24
    1aa4:	11 f0       	breq	.+4      	; 0x1aaa <xQueueGenericReceive+0x194>
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	01 c0       	rjmp	.+2      	; 0x1aac <xQueueGenericReceive+0x196>
    1aaa:	4b cf       	rjmp	.-362    	; 0x1942 <xQueueGenericReceive+0x2c>
    1aac:	60 96       	adiw	r28, 0x10	; 16
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	df 91       	pop	r29
    1aba:	cf 91       	pop	r28
    1abc:	08 95       	ret

00001abe <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	cd b7       	in	r28, 0x3d	; 61
    1ac4:	de b7       	in	r29, 0x3e	; 62
    1ac6:	27 97       	sbiw	r28, 0x07	; 7
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	9c 83       	std	Y+4, r25	; 0x04
    1ad4:	8b 83       	std	Y+3, r24	; 0x03
    1ad6:	7e 83       	std	Y+6, r23	; 0x06
    1ad8:	6d 83       	std	Y+5, r22	; 0x05
    1ada:	4f 83       	std	Y+7, r20	; 0x07
BaseType_t xReturn = pdFALSE;
    1adc:	1a 82       	std	Y+2, r1	; 0x02
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	fc 01       	movw	r30, r24
    1ae4:	82 8d       	ldd	r24, Z+26	; 0x1a
    1ae6:	89 83       	std	Y+1, r24	; 0x01

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	fc 01       	movw	r30, r24
    1aee:	84 8d       	ldd	r24, Z+28	; 0x1c
    1af0:	88 23       	and	r24, r24
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <prvCopyDataToQueue+0x38>
    1af4:	8e c0       	rjmp	.+284    	; 0x1c12 <prvCopyDataToQueue+0x154>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
    1af6:	8f 81       	ldd	r24, Y+7	; 0x07
    1af8:	88 23       	and	r24, r24
    1afa:	d9 f5       	brne	.+118    	; 0x1b72 <prvCopyDataToQueue+0xb4>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	fc 01       	movw	r30, r24
    1b02:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b04:	48 2f       	mov	r20, r24
    1b06:	50 e0       	ldi	r21, 0x00	; 0
    1b08:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	84 81       	ldd	r24, Z+4	; 0x04
    1b10:	95 81       	ldd	r25, Z+5	; 0x05
    1b12:	2d 81       	ldd	r18, Y+5	; 0x05
    1b14:	3e 81       	ldd	r19, Y+6	; 0x06
    1b16:	b9 01       	movw	r22, r18
    1b18:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
    1b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b20:	fc 01       	movw	r30, r24
    1b22:	24 81       	ldd	r18, Z+4	; 0x04
    1b24:	35 81       	ldd	r19, Z+5	; 0x05
    1b26:	8b 81       	ldd	r24, Y+3	; 0x03
    1b28:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b2e:	88 2f       	mov	r24, r24
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	28 0f       	add	r18, r24
    1b34:	39 1f       	adc	r19, r25
    1b36:	8b 81       	ldd	r24, Y+3	; 0x03
    1b38:	9c 81       	ldd	r25, Y+4	; 0x04
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	35 83       	std	Z+5, r19	; 0x05
    1b3e:	24 83       	std	Z+4, r18	; 0x04
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1b40:	8b 81       	ldd	r24, Y+3	; 0x03
    1b42:	9c 81       	ldd	r25, Y+4	; 0x04
    1b44:	fc 01       	movw	r30, r24
    1b46:	24 81       	ldd	r18, Z+4	; 0x04
    1b48:	35 81       	ldd	r19, Z+5	; 0x05
    1b4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4e:	fc 01       	movw	r30, r24
    1b50:	82 81       	ldd	r24, Z+2	; 0x02
    1b52:	93 81       	ldd	r25, Z+3	; 0x03
    1b54:	28 17       	cp	r18, r24
    1b56:	39 07       	cpc	r19, r25
    1b58:	08 f4       	brcc	.+2      	; 0x1b5c <prvCopyDataToQueue+0x9e>
    1b5a:	5b c0       	rjmp	.+182    	; 0x1c12 <prvCopyDataToQueue+0x154>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	fc 01       	movw	r30, r24
    1b62:	20 81       	ld	r18, Z
    1b64:	31 81       	ldd	r19, Z+1	; 0x01
    1b66:	8b 81       	ldd	r24, Y+3	; 0x03
    1b68:	9c 81       	ldd	r25, Y+4	; 0x04
    1b6a:	fc 01       	movw	r30, r24
    1b6c:	35 83       	std	Z+5, r19	; 0x05
    1b6e:	24 83       	std	Z+4, r18	; 0x04
    1b70:	50 c0       	rjmp	.+160    	; 0x1c12 <prvCopyDataToQueue+0x154>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	9c 81       	ldd	r25, Y+4	; 0x04
    1b76:	fc 01       	movw	r30, r24
    1b78:	84 8d       	ldd	r24, Z+28	; 0x1c
    1b7a:	48 2f       	mov	r20, r24
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	fc 01       	movw	r30, r24
    1b84:	86 81       	ldd	r24, Z+6	; 0x06
    1b86:	97 81       	ldd	r25, Z+7	; 0x07
    1b88:	2d 81       	ldd	r18, Y+5	; 0x05
    1b8a:	3e 81       	ldd	r19, Y+6	; 0x06
    1b8c:	b9 01       	movw	r22, r18
    1b8e:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
    1b92:	8b 81       	ldd	r24, Y+3	; 0x03
    1b94:	9c 81       	ldd	r25, Y+4	; 0x04
    1b96:	fc 01       	movw	r30, r24
    1b98:	26 81       	ldd	r18, Z+6	; 0x06
    1b9a:	37 81       	ldd	r19, Z+7	; 0x07
    1b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	84 8d       	ldd	r24, Z+28	; 0x1c
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	91 95       	neg	r25
    1baa:	81 95       	neg	r24
    1bac:	91 09       	sbc	r25, r1
    1bae:	28 0f       	add	r18, r24
    1bb0:	39 1f       	adc	r19, r25
    1bb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb6:	fc 01       	movw	r30, r24
    1bb8:	37 83       	std	Z+7, r19	; 0x07
    1bba:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	fc 01       	movw	r30, r24
    1bc2:	26 81       	ldd	r18, Z+6	; 0x06
    1bc4:	37 81       	ldd	r19, Z+7	; 0x07
    1bc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bca:	fc 01       	movw	r30, r24
    1bcc:	80 81       	ld	r24, Z
    1bce:	91 81       	ldd	r25, Z+1	; 0x01
    1bd0:	28 17       	cp	r18, r24
    1bd2:	39 07       	cpc	r19, r25
    1bd4:	a8 f4       	brcc	.+42     	; 0x1c00 <prvCopyDataToQueue+0x142>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
    1bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bda:	fc 01       	movw	r30, r24
    1bdc:	22 81       	ldd	r18, Z+2	; 0x02
    1bde:	33 81       	ldd	r19, Z+3	; 0x03
    1be0:	8b 81       	ldd	r24, Y+3	; 0x03
    1be2:	9c 81       	ldd	r25, Y+4	; 0x04
    1be4:	fc 01       	movw	r30, r24
    1be6:	84 8d       	ldd	r24, Z+28	; 0x1c
    1be8:	88 2f       	mov	r24, r24
    1bea:	90 e0       	ldi	r25, 0x00	; 0
    1bec:	91 95       	neg	r25
    1bee:	81 95       	neg	r24
    1bf0:	91 09       	sbc	r25, r1
    1bf2:	28 0f       	add	r18, r24
    1bf4:	39 1f       	adc	r19, r25
    1bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	37 83       	std	Z+7, r19	; 0x07
    1bfe:	26 83       	std	Z+6, r18	; 0x06
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
    1c00:	8f 81       	ldd	r24, Y+7	; 0x07
    1c02:	82 30       	cpi	r24, 0x02	; 2
    1c04:	31 f4       	brne	.+12     	; 0x1c12 <prvCopyDataToQueue+0x154>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	88 23       	and	r24, r24
    1c0a:	19 f0       	breq	.+6      	; 0x1c12 <prvCopyDataToQueue+0x154>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
    1c0c:	89 81       	ldd	r24, Y+1	; 0x01
    1c0e:	81 50       	subi	r24, 0x01	; 1
    1c10:	89 83       	std	Y+1, r24	; 0x01
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
    1c12:	89 81       	ldd	r24, Y+1	; 0x01
    1c14:	21 e0       	ldi	r18, 0x01	; 1
    1c16:	28 0f       	add	r18, r24
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	22 8f       	std	Z+26, r18	; 0x1a

	return xReturn;
    1c20:	8a 81       	ldd	r24, Y+2	; 0x02
}
    1c22:	27 96       	adiw	r28, 0x07	; 7
    1c24:	0f b6       	in	r0, 0x3f	; 63
    1c26:	f8 94       	cli
    1c28:	de bf       	out	0x3e, r29	; 62
    1c2a:	0f be       	out	0x3f, r0	; 63
    1c2c:	cd bf       	out	0x3d, r28	; 61
    1c2e:	df 91       	pop	r29
    1c30:	cf 91       	pop	r28
    1c32:	08 95       	ret

00001c34 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	00 d0       	rcall	.+0      	; 0x1c3a <prvCopyDataFromQueue+0x6>
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <prvCopyDataFromQueue+0x8>
    1c3c:	cd b7       	in	r28, 0x3d	; 61
    1c3e:	de b7       	in	r29, 0x3e	; 62
    1c40:	9a 83       	std	Y+2, r25	; 0x02
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	7c 83       	std	Y+4, r23	; 0x04
    1c46:	6b 83       	std	Y+3, r22	; 0x03
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	fc 01       	movw	r30, r24
    1c4e:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c50:	88 23       	and	r24, r24
    1c52:	c9 f1       	breq	.+114    	; 0x1cc6 <prvCopyDataFromQueue+0x92>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
    1c56:	9a 81       	ldd	r25, Y+2	; 0x02
    1c58:	fc 01       	movw	r30, r24
    1c5a:	26 81       	ldd	r18, Z+6	; 0x06
    1c5c:	37 81       	ldd	r19, Z+7	; 0x07
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	fc 01       	movw	r30, r24
    1c64:	84 8d       	ldd	r24, Z+28	; 0x1c
    1c66:	88 2f       	mov	r24, r24
    1c68:	90 e0       	ldi	r25, 0x00	; 0
    1c6a:	28 0f       	add	r18, r24
    1c6c:	39 1f       	adc	r19, r25
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	fc 01       	movw	r30, r24
    1c74:	37 83       	std	Z+7, r19	; 0x07
    1c76:	26 83       	std	Z+6, r18	; 0x06
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	26 81       	ldd	r18, Z+6	; 0x06
    1c80:	37 81       	ldd	r19, Z+7	; 0x07
    1c82:	89 81       	ldd	r24, Y+1	; 0x01
    1c84:	9a 81       	ldd	r25, Y+2	; 0x02
    1c86:	fc 01       	movw	r30, r24
    1c88:	82 81       	ldd	r24, Z+2	; 0x02
    1c8a:	93 81       	ldd	r25, Z+3	; 0x03
    1c8c:	28 17       	cp	r18, r24
    1c8e:	39 07       	cpc	r19, r25
    1c90:	50 f0       	brcs	.+20     	; 0x1ca6 <prvCopyDataFromQueue+0x72>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
    1c92:	89 81       	ldd	r24, Y+1	; 0x01
    1c94:	9a 81       	ldd	r25, Y+2	; 0x02
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 81       	ld	r18, Z
    1c9a:	31 81       	ldd	r19, Z+1	; 0x01
    1c9c:	89 81       	ldd	r24, Y+1	; 0x01
    1c9e:	9a 81       	ldd	r25, Y+2	; 0x02
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	37 83       	std	Z+7, r19	; 0x07
    1ca4:	26 83       	std	Z+6, r18	; 0x06
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	fc 01       	movw	r30, r24
    1cac:	84 8d       	ldd	r24, Z+28	; 0x1c
    1cae:	48 2f       	mov	r20, r24
    1cb0:	50 e0       	ldi	r21, 0x00	; 0
    1cb2:	89 81       	ldd	r24, Y+1	; 0x01
    1cb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	26 81       	ldd	r18, Z+6	; 0x06
    1cba:	37 81       	ldd	r19, Z+7	; 0x07
    1cbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc0:	b9 01       	movw	r22, r18
    1cc2:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <memcpy>
	}
}
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <prvUnlockQueue+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <prvUnlockQueue+0x8>
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	9c 83       	std	Y+4, r25	; 0x04
    1ce2:	8b 83       	std	Y+3, r24	; 0x03

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	0f 92       	push	r0
	{
		int8_t cTxLock = pxQueue->cTxLock;
    1cea:	8b 81       	ldd	r24, Y+3	; 0x03
    1cec:	9c 81       	ldd	r25, Y+4	; 0x04
    1cee:	fc 01       	movw	r30, r24
    1cf0:	86 8d       	ldd	r24, Z+30	; 0x1e
    1cf2:	89 83       	std	Y+1, r24	; 0x01

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <prvUnlockQueue+0x4a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	81 89       	ldd	r24, Z+17	; 0x11
    1cfe:	88 23       	and	r24, r24
    1d00:	51 f0       	breq	.+20     	; 0x1d16 <prvUnlockQueue+0x42>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
    1d02:	8b 81       	ldd	r24, Y+3	; 0x03
    1d04:	9c 81       	ldd	r25, Y+4	; 0x04
    1d06:	41 96       	adiw	r24, 0x11	; 17
    1d08:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    1d0c:	88 23       	and	r24, r24
    1d0e:	21 f0       	breq	.+8      	; 0x1d18 <prvUnlockQueue+0x44>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
    1d10:	0e 94 32 14 	call	0x2864	; 0x2864 <vTaskMissedYield>
    1d14:	01 c0       	rjmp	.+2      	; 0x1d18 <prvUnlockQueue+0x44>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				else
				{
					break;
    1d16:	06 c0       	rjmp	.+12     	; 0x1d24 <prvUnlockQueue+0x50>
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	81 50       	subi	r24, 0x01	; 1
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	taskENTER_CRITICAL();
	{
		int8_t cTxLock = pxQueue->cTxLock;

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	18 16       	cp	r1, r24
    1d22:	4c f3       	brlt	.-46     	; 0x1cf6 <prvUnlockQueue+0x22>
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
		}

		pxQueue->cTxLock = queueUNLOCKED;
    1d24:	8b 81       	ldd	r24, Y+3	; 0x03
    1d26:	9c 81       	ldd	r25, Y+4	; 0x04
    1d28:	2f ef       	ldi	r18, 0xFF	; 255
    1d2a:	fc 01       	movw	r30, r24
    1d2c:	26 8f       	std	Z+30, r18	; 0x1e
	}
	taskEXIT_CRITICAL();
    1d2e:	0f 90       	pop	r0
    1d30:	0f be       	out	0x3f, r0	; 63

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	0f 92       	push	r0
	{
		int8_t cRxLock = pxQueue->cRxLock;
    1d38:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d3c:	fc 01       	movw	r30, r24
    1d3e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1d40:	8a 83       	std	Y+2, r24	; 0x02

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1d42:	14 c0       	rjmp	.+40     	; 0x1d6c <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
    1d44:	8b 81       	ldd	r24, Y+3	; 0x03
    1d46:	9c 81       	ldd	r25, Y+4	; 0x04
    1d48:	fc 01       	movw	r30, r24
    1d4a:	80 85       	ldd	r24, Z+8	; 0x08
    1d4c:	88 23       	and	r24, r24
    1d4e:	69 f0       	breq	.+26     	; 0x1d6a <prvUnlockQueue+0x96>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
    1d50:	8b 81       	ldd	r24, Y+3	; 0x03
    1d52:	9c 81       	ldd	r25, Y+4	; 0x04
    1d54:	08 96       	adiw	r24, 0x08	; 8
    1d56:	0e 94 42 13 	call	0x2684	; 0x2684 <xTaskRemoveFromEventList>
    1d5a:	88 23       	and	r24, r24
    1d5c:	11 f0       	breq	.+4      	; 0x1d62 <prvUnlockQueue+0x8e>
				{
					vTaskMissedYield();
    1d5e:	0e 94 32 14 	call	0x2864	; 0x2864 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	81 50       	subi	r24, 0x01	; 1
    1d66:	8a 83       	std	Y+2, r24	; 0x02
    1d68:	01 c0       	rjmp	.+2      	; 0x1d6c <prvUnlockQueue+0x98>
			}
			else
			{
				break;
    1d6a:	03 c0       	rjmp	.+6      	; 0x1d72 <prvUnlockQueue+0x9e>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		int8_t cRxLock = pxQueue->cRxLock;

		while( cRxLock > queueLOCKED_UNMODIFIED )
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	18 16       	cp	r1, r24
    1d70:	4c f3       	brlt	.-46     	; 0x1d44 <prvUnlockQueue+0x70>
			{
				break;
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	2f ef       	ldi	r18, 0xFF	; 255
    1d78:	fc 01       	movw	r30, r24
    1d7a:	25 8f       	std	Z+29, r18	; 0x1d
	}
	taskEXIT_CRITICAL();
    1d7c:	0f 90       	pop	r0
    1d7e:	0f be       	out	0x3f, r0	; 63
}
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	df 91       	pop	r29
    1d8a:	cf 91       	pop	r28
    1d8c:	08 95       	ret

00001d8e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
    1d8e:	cf 93       	push	r28
    1d90:	df 93       	push	r29
    1d92:	00 d0       	rcall	.+0      	; 0x1d94 <prvIsQueueEmpty+0x6>
    1d94:	1f 92       	push	r1
    1d96:	cd b7       	in	r28, 0x3d	; 61
    1d98:	de b7       	in	r29, 0x3e	; 62
    1d9a:	9b 83       	std	Y+3, r25	; 0x03
    1d9c:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    1d9e:	0f b6       	in	r0, 0x3f	; 63
    1da0:	f8 94       	cli
    1da2:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	9b 81       	ldd	r25, Y+3	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	82 8d       	ldd	r24, Z+26	; 0x1a
    1dac:	88 23       	and	r24, r24
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <prvIsQueueEmpty+0x28>
		{
			xReturn = pdTRUE;
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	89 83       	std	Y+1, r24	; 0x01
    1db4:	01 c0       	rjmp	.+2      	; 0x1db8 <prvIsQueueEmpty+0x2a>
		}
		else
		{
			xReturn = pdFALSE;
    1db6:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    1db8:	0f 90       	pop	r0
    1dba:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    1dbc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1dbe:	0f 90       	pop	r0
    1dc0:	0f 90       	pop	r0
    1dc2:	0f 90       	pop	r0
    1dc4:	df 91       	pop	r29
    1dc6:	cf 91       	pop	r28
    1dc8:	08 95       	ret

00001dca <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    1dca:	8f 92       	push	r8
    1dcc:	9f 92       	push	r9
    1dce:	af 92       	push	r10
    1dd0:	bf 92       	push	r11
    1dd2:	cf 92       	push	r12
    1dd4:	df 92       	push	r13
    1dd6:	ef 92       	push	r14
    1dd8:	ff 92       	push	r15
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	cf 93       	push	r28
    1de0:	df 93       	push	r29
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	60 97       	sbiw	r28, 0x10	; 16
    1de8:	0f b6       	in	r0, 0x3f	; 63
    1dea:	f8 94       	cli
    1dec:	de bf       	out	0x3e, r29	; 62
    1dee:	0f be       	out	0x3f, r0	; 63
    1df0:	cd bf       	out	0x3d, r28	; 61
    1df2:	9f 83       	std	Y+7, r25	; 0x07
    1df4:	8e 83       	std	Y+6, r24	; 0x06
    1df6:	79 87       	std	Y+9, r23	; 0x09
    1df8:	68 87       	std	Y+8, r22	; 0x08
    1dfa:	5b 87       	std	Y+11, r21	; 0x0b
    1dfc:	4a 87       	std	Y+10, r20	; 0x0a
    1dfe:	3d 87       	std	Y+13, r19	; 0x0d
    1e00:	2c 87       	std	Y+12, r18	; 0x0c
    1e02:	0e 87       	std	Y+14, r16	; 0x0e
    1e04:	f8 8a       	std	Y+16, r15	; 0x10
    1e06:	ef 86       	std	Y+15, r14	; 0x0f
    1e08:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e0a:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e0c:	0e 94 0b 08 	call	0x1016	; 0x1016 <pvPortMalloc>
    1e10:	9d 83       	std	Y+5, r25	; 0x05
    1e12:	8c 83       	std	Y+4, r24	; 0x04
    1e14:	8c 81       	ldd	r24, Y+4	; 0x04
    1e16:	9d 81       	ldd	r25, Y+5	; 0x05
    1e18:	89 2b       	or	r24, r25
    1e1a:	b9 f0       	breq	.+46     	; 0x1e4a <xTaskCreate+0x80>
    1e1c:	8a e2       	ldi	r24, 0x2A	; 42
    1e1e:	90 e0       	ldi	r25, 0x00	; 0
    1e20:	0e 94 0b 08 	call	0x1016	; 0x1016 <pvPortMalloc>
    1e24:	9a 83       	std	Y+2, r25	; 0x02
    1e26:	89 83       	std	Y+1, r24	; 0x01
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	89 2b       	or	r24, r25
    1e2e:	41 f0       	breq	.+16     	; 0x1e40 <xTaskCreate+0x76>
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	9a 81       	ldd	r25, Y+2	; 0x02
    1e34:	2c 81       	ldd	r18, Y+4	; 0x04
    1e36:	3d 81       	ldd	r19, Y+5	; 0x05
    1e38:	fc 01       	movw	r30, r24
    1e3a:	30 8f       	std	Z+24, r19	; 0x18
    1e3c:	27 8b       	std	Z+23, r18	; 0x17
    1e3e:	07 c0       	rjmp	.+14     	; 0x1e4e <xTaskCreate+0x84>
    1e40:	8c 81       	ldd	r24, Y+4	; 0x04
    1e42:	9d 81       	ldd	r25, Y+5	; 0x05
    1e44:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vPortFree>
    1e48:	02 c0       	rjmp	.+4      	; 0x1e4e <xTaskCreate+0x84>
    1e4a:	1a 82       	std	Y+2, r1	; 0x02
    1e4c:	19 82       	std	Y+1, r1	; 0x01
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	9a 81       	ldd	r25, Y+2	; 0x02
    1e52:	89 2b       	or	r24, r25
    1e54:	09 f1       	breq	.+66     	; 0x1e98 <xTaskCreate+0xce>
    1e56:	8a 85       	ldd	r24, Y+10	; 0x0a
    1e58:	9b 85       	ldd	r25, Y+11	; 0x0b
    1e5a:	cc 01       	movw	r24, r24
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	09 81       	ldd	r16, Y+1	; 0x01
    1e62:	1a 81       	ldd	r17, Y+2	; 0x02
    1e64:	4f 85       	ldd	r20, Y+15	; 0x0f
    1e66:	58 89       	ldd	r21, Y+16	; 0x10
    1e68:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e6a:	3d 85       	ldd	r19, Y+13	; 0x0d
    1e6c:	68 85       	ldd	r22, Y+8	; 0x08
    1e6e:	79 85       	ldd	r23, Y+9	; 0x09
    1e70:	ee 81       	ldd	r30, Y+6	; 0x06
    1e72:	ff 81       	ldd	r31, Y+7	; 0x07
    1e74:	81 2c       	mov	r8, r1
    1e76:	91 2c       	mov	r9, r1
    1e78:	58 01       	movw	r10, r16
    1e7a:	6a 01       	movw	r12, r20
    1e7c:	ee 84       	ldd	r14, Y+14	; 0x0e
    1e7e:	89 01       	movw	r16, r18
    1e80:	9c 01       	movw	r18, r24
    1e82:	ad 01       	movw	r20, r26
    1e84:	cf 01       	movw	r24, r30
    1e86:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <prvInitialiseNewTask>
    1e8a:	89 81       	ldd	r24, Y+1	; 0x01
    1e8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8e:	0e 94 33 10 	call	0x2066	; 0x2066 <prvAddNewTaskToReadyList>
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8b 83       	std	Y+3, r24	; 0x03
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <xTaskCreate+0xd2>
    1e98:	8f ef       	ldi	r24, 0xFF	; 255
    1e9a:	8b 83       	std	Y+3, r24	; 0x03
    1e9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9e:	60 96       	adiw	r28, 0x10	; 16
    1ea0:	0f b6       	in	r0, 0x3f	; 63
    1ea2:	f8 94       	cli
    1ea4:	de bf       	out	0x3e, r29	; 62
    1ea6:	0f be       	out	0x3f, r0	; 63
    1ea8:	cd bf       	out	0x3d, r28	; 61
    1eaa:	df 91       	pop	r29
    1eac:	cf 91       	pop	r28
    1eae:	1f 91       	pop	r17
    1eb0:	0f 91       	pop	r16
    1eb2:	ff 90       	pop	r15
    1eb4:	ef 90       	pop	r14
    1eb6:	df 90       	pop	r13
    1eb8:	cf 90       	pop	r12
    1eba:	bf 90       	pop	r11
    1ebc:	af 90       	pop	r10
    1ebe:	9f 90       	pop	r9
    1ec0:	8f 90       	pop	r8
    1ec2:	08 95       	ret

00001ec4 <prvInitialiseNewTask>:
    1ec4:	8f 92       	push	r8
    1ec6:	9f 92       	push	r9
    1ec8:	af 92       	push	r10
    1eca:	bf 92       	push	r11
    1ecc:	cf 92       	push	r12
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	0f 93       	push	r16
    1ed4:	1f 93       	push	r17
    1ed6:	cf 93       	push	r28
    1ed8:	df 93       	push	r29
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
    1ede:	64 97       	sbiw	r28, 0x14	; 20
    1ee0:	0f b6       	in	r0, 0x3f	; 63
    1ee2:	f8 94       	cli
    1ee4:	de bf       	out	0x3e, r29	; 62
    1ee6:	0f be       	out	0x3f, r0	; 63
    1ee8:	cd bf       	out	0x3d, r28	; 61
    1eea:	9d 83       	std	Y+5, r25	; 0x05
    1eec:	8c 83       	std	Y+4, r24	; 0x04
    1eee:	7f 83       	std	Y+7, r23	; 0x07
    1ef0:	6e 83       	std	Y+6, r22	; 0x06
    1ef2:	28 87       	std	Y+8, r18	; 0x08
    1ef4:	39 87       	std	Y+9, r19	; 0x09
    1ef6:	4a 87       	std	Y+10, r20	; 0x0a
    1ef8:	5b 87       	std	Y+11, r21	; 0x0b
    1efa:	1d 87       	std	Y+13, r17	; 0x0d
    1efc:	0c 87       	std	Y+12, r16	; 0x0c
    1efe:	ee 86       	std	Y+14, r14	; 0x0e
    1f00:	d8 8a       	std	Y+16, r13	; 0x10
    1f02:	cf 86       	std	Y+15, r12	; 0x0f
    1f04:	ba 8a       	std	Y+18, r11	; 0x12
    1f06:	a9 8a       	std	Y+17, r10	; 0x11
    1f08:	9c 8a       	std	Y+20, r9	; 0x14
    1f0a:	8b 8a       	std	Y+19, r8	; 0x13
    1f0c:	28 85       	ldd	r18, Y+8	; 0x08
    1f0e:	39 85       	ldd	r19, Y+9	; 0x09
    1f10:	89 89       	ldd	r24, Y+17	; 0x11
    1f12:	9a 89       	ldd	r25, Y+18	; 0x12
    1f14:	fc 01       	movw	r30, r24
    1f16:	87 89       	ldd	r24, Z+23	; 0x17
    1f18:	90 8d       	ldd	r25, Z+24	; 0x18
    1f1a:	a9 01       	movw	r20, r18
    1f1c:	65 ea       	ldi	r22, 0xA5	; 165
    1f1e:	70 e0       	ldi	r23, 0x00	; 0
    1f20:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <memset>
    1f24:	89 89       	ldd	r24, Y+17	; 0x11
    1f26:	9a 89       	ldd	r25, Y+18	; 0x12
    1f28:	fc 01       	movw	r30, r24
    1f2a:	27 89       	ldd	r18, Z+23	; 0x17
    1f2c:	30 8d       	ldd	r19, Z+24	; 0x18
    1f2e:	88 85       	ldd	r24, Y+8	; 0x08
    1f30:	99 85       	ldd	r25, Y+9	; 0x09
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	82 0f       	add	r24, r18
    1f36:	93 1f       	adc	r25, r19
    1f38:	9b 83       	std	Y+3, r25	; 0x03
    1f3a:	8a 83       	std	Y+2, r24	; 0x02
    1f3c:	19 82       	std	Y+1, r1	; 0x01
    1f3e:	22 c0       	rjmp	.+68     	; 0x1f84 <prvInitialiseNewTask+0xc0>
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	88 2f       	mov	r24, r24
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	29 81       	ldd	r18, Y+1	; 0x01
    1f48:	22 2f       	mov	r18, r18
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	4e 81       	ldd	r20, Y+6	; 0x06
    1f4e:	5f 81       	ldd	r21, Y+7	; 0x07
    1f50:	24 0f       	add	r18, r20
    1f52:	35 1f       	adc	r19, r21
    1f54:	f9 01       	movw	r30, r18
    1f56:	40 81       	ld	r20, Z
    1f58:	29 89       	ldd	r18, Y+17	; 0x11
    1f5a:	3a 89       	ldd	r19, Y+18	; 0x12
    1f5c:	82 0f       	add	r24, r18
    1f5e:	93 1f       	adc	r25, r19
    1f60:	49 96       	adiw	r24, 0x19	; 25
    1f62:	fc 01       	movw	r30, r24
    1f64:	40 83       	st	Z, r20
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	88 2f       	mov	r24, r24
    1f6a:	90 e0       	ldi	r25, 0x00	; 0
    1f6c:	2e 81       	ldd	r18, Y+6	; 0x06
    1f6e:	3f 81       	ldd	r19, Y+7	; 0x07
    1f70:	82 0f       	add	r24, r18
    1f72:	93 1f       	adc	r25, r19
    1f74:	fc 01       	movw	r30, r24
    1f76:	80 81       	ld	r24, Z
    1f78:	88 23       	and	r24, r24
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <prvInitialiseNewTask+0xba>
    1f7c:	06 c0       	rjmp	.+12     	; 0x1f8a <prvInitialiseNewTask+0xc6>
    1f7e:	89 81       	ldd	r24, Y+1	; 0x01
    1f80:	8f 5f       	subi	r24, 0xFF	; 255
    1f82:	89 83       	std	Y+1, r24	; 0x01
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	88 30       	cpi	r24, 0x08	; 8
    1f88:	d8 f2       	brcs	.-74     	; 0x1f40 <prvInitialiseNewTask+0x7c>
    1f8a:	89 89       	ldd	r24, Y+17	; 0x11
    1f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8e:	fc 01       	movw	r30, r24
    1f90:	10 a2       	std	Z+32, r1	; 0x20
    1f92:	8e 85       	ldd	r24, Y+14	; 0x0e
    1f94:	84 30       	cpi	r24, 0x04	; 4
    1f96:	10 f0       	brcs	.+4      	; 0x1f9c <prvInitialiseNewTask+0xd8>
    1f98:	83 e0       	ldi	r24, 0x03	; 3
    1f9a:	8e 87       	std	Y+14, r24	; 0x0e
    1f9c:	89 89       	ldd	r24, Y+17	; 0x11
    1f9e:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa0:	2e 85       	ldd	r18, Y+14	; 0x0e
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	26 8b       	std	Z+22, r18	; 0x16
    1fa6:	89 89       	ldd	r24, Y+17	; 0x11
    1fa8:	9a 89       	ldd	r25, Y+18	; 0x12
    1faa:	02 96       	adiw	r24, 0x02	; 2
    1fac:	0e 94 e6 03 	call	0x7cc	; 0x7cc <vListInitialiseItem>
    1fb0:	89 89       	ldd	r24, Y+17	; 0x11
    1fb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fb4:	0c 96       	adiw	r24, 0x0c	; 12
    1fb6:	0e 94 e6 03 	call	0x7cc	; 0x7cc <vListInitialiseItem>
    1fba:	89 89       	ldd	r24, Y+17	; 0x11
    1fbc:	9a 89       	ldd	r25, Y+18	; 0x12
    1fbe:	29 89       	ldd	r18, Y+17	; 0x11
    1fc0:	3a 89       	ldd	r19, Y+18	; 0x12
    1fc2:	fc 01       	movw	r30, r24
    1fc4:	31 87       	std	Z+9, r19	; 0x09
    1fc6:	20 87       	std	Z+8, r18	; 0x08
    1fc8:	8e 85       	ldd	r24, Y+14	; 0x0e
    1fca:	88 2f       	mov	r24, r24
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	24 e0       	ldi	r18, 0x04	; 4
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	28 1b       	sub	r18, r24
    1fd4:	39 0b       	sbc	r19, r25
    1fd6:	89 89       	ldd	r24, Y+17	; 0x11
    1fd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1fda:	fc 01       	movw	r30, r24
    1fdc:	35 87       	std	Z+13, r19	; 0x0d
    1fde:	24 87       	std	Z+12, r18	; 0x0c
    1fe0:	89 89       	ldd	r24, Y+17	; 0x11
    1fe2:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe4:	29 89       	ldd	r18, Y+17	; 0x11
    1fe6:	3a 89       	ldd	r19, Y+18	; 0x12
    1fe8:	fc 01       	movw	r30, r24
    1fea:	33 8b       	std	Z+19, r19	; 0x13
    1fec:	22 8b       	std	Z+18, r18	; 0x12
    1fee:	89 89       	ldd	r24, Y+17	; 0x11
    1ff0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff2:	fc 01       	movw	r30, r24
    1ff4:	14 a2       	std	Z+36, r1	; 0x24
    1ff6:	13 a2       	std	Z+35, r1	; 0x23
    1ff8:	89 89       	ldd	r24, Y+17	; 0x11
    1ffa:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffc:	fc 01       	movw	r30, r24
    1ffe:	15 a2       	std	Z+37, r1	; 0x25
    2000:	16 a2       	std	Z+38, r1	; 0x26
    2002:	17 a2       	std	Z+39, r1	; 0x27
    2004:	10 a6       	std	Z+40, r1	; 0x28
    2006:	89 89       	ldd	r24, Y+17	; 0x11
    2008:	9a 89       	ldd	r25, Y+18	; 0x12
    200a:	fc 01       	movw	r30, r24
    200c:	11 a6       	std	Z+41, r1	; 0x29
    200e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2010:	5d 85       	ldd	r21, Y+13	; 0x0d
    2012:	2c 81       	ldd	r18, Y+4	; 0x04
    2014:	3d 81       	ldd	r19, Y+5	; 0x05
    2016:	8a 81       	ldd	r24, Y+2	; 0x02
    2018:	9b 81       	ldd	r25, Y+3	; 0x03
    201a:	b9 01       	movw	r22, r18
    201c:	0e 94 13 05 	call	0xa26	; 0xa26 <pxPortInitialiseStack>
    2020:	9c 01       	movw	r18, r24
    2022:	89 89       	ldd	r24, Y+17	; 0x11
    2024:	9a 89       	ldd	r25, Y+18	; 0x12
    2026:	fc 01       	movw	r30, r24
    2028:	31 83       	std	Z+1, r19	; 0x01
    202a:	20 83       	st	Z, r18
    202c:	8f 85       	ldd	r24, Y+15	; 0x0f
    202e:	98 89       	ldd	r25, Y+16	; 0x10
    2030:	89 2b       	or	r24, r25
    2032:	39 f0       	breq	.+14     	; 0x2042 <prvInitialiseNewTask+0x17e>
    2034:	8f 85       	ldd	r24, Y+15	; 0x0f
    2036:	98 89       	ldd	r25, Y+16	; 0x10
    2038:	29 89       	ldd	r18, Y+17	; 0x11
    203a:	3a 89       	ldd	r19, Y+18	; 0x12
    203c:	fc 01       	movw	r30, r24
    203e:	31 83       	std	Z+1, r19	; 0x01
    2040:	20 83       	st	Z, r18
    2042:	64 96       	adiw	r28, 0x14	; 20
    2044:	0f b6       	in	r0, 0x3f	; 63
    2046:	f8 94       	cli
    2048:	de bf       	out	0x3e, r29	; 62
    204a:	0f be       	out	0x3f, r0	; 63
    204c:	cd bf       	out	0x3d, r28	; 61
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	1f 91       	pop	r17
    2054:	0f 91       	pop	r16
    2056:	ef 90       	pop	r14
    2058:	df 90       	pop	r13
    205a:	cf 90       	pop	r12
    205c:	bf 90       	pop	r11
    205e:	af 90       	pop	r10
    2060:	9f 90       	pop	r9
    2062:	8f 90       	pop	r8
    2064:	08 95       	ret

00002066 <prvAddNewTaskToReadyList>:
    2066:	cf 93       	push	r28
    2068:	df 93       	push	r29
    206a:	00 d0       	rcall	.+0      	; 0x206c <prvAddNewTaskToReadyList+0x6>
    206c:	cd b7       	in	r28, 0x3d	; 61
    206e:	de b7       	in	r29, 0x3e	; 62
    2070:	9a 83       	std	Y+2, r25	; 0x02
    2072:	89 83       	std	Y+1, r24	; 0x01
    2074:	0f b6       	in	r0, 0x3f	; 63
    2076:	f8 94       	cli
    2078:	0f 92       	push	r0
    207a:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxCurrentNumberOfTasks>
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <uxCurrentNumberOfTasks>
    2084:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2088:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    208c:	89 2b       	or	r24, r25
    208e:	69 f4       	brne	.+26     	; 0x20aa <prvAddNewTaskToReadyList+0x44>
    2090:	89 81       	ldd	r24, Y+1	; 0x01
    2092:	9a 81       	ldd	r25, Y+2	; 0x02
    2094:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pxCurrentTCB+0x1>
    2098:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pxCurrentTCB>
    209c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxCurrentNumberOfTasks>
    20a0:	81 30       	cpi	r24, 0x01	; 1
    20a2:	c9 f4       	brne	.+50     	; 0x20d6 <prvAddNewTaskToReadyList+0x70>
    20a4:	0e 94 4e 14 	call	0x289c	; 0x289c <prvInitialiseTaskLists>
    20a8:	16 c0       	rjmp	.+44     	; 0x20d6 <prvAddNewTaskToReadyList+0x70>
    20aa:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <xSchedulerRunning>
    20ae:	88 23       	and	r24, r24
    20b0:	91 f4       	brne	.+36     	; 0x20d6 <prvAddNewTaskToReadyList+0x70>
    20b2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    20b6:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    20ba:	fc 01       	movw	r30, r24
    20bc:	26 89       	ldd	r18, Z+22	; 0x16
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	9a 81       	ldd	r25, Y+2	; 0x02
    20c2:	fc 01       	movw	r30, r24
    20c4:	86 89       	ldd	r24, Z+22	; 0x16
    20c6:	82 17       	cp	r24, r18
    20c8:	30 f0       	brcs	.+12     	; 0x20d6 <prvAddNewTaskToReadyList+0x70>
    20ca:	89 81       	ldd	r24, Y+1	; 0x01
    20cc:	9a 81       	ldd	r25, Y+2	; 0x02
    20ce:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pxCurrentTCB+0x1>
    20d2:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pxCurrentTCB>
    20d6:	80 91 c8 03 	lds	r24, 0x03C8	; 0x8003c8 <uxTaskNumber>
    20da:	8f 5f       	subi	r24, 0xFF	; 255
    20dc:	80 93 c8 03 	sts	0x03C8, r24	; 0x8003c8 <uxTaskNumber>
    20e0:	20 91 c8 03 	lds	r18, 0x03C8	; 0x8003c8 <uxTaskNumber>
    20e4:	89 81       	ldd	r24, Y+1	; 0x01
    20e6:	9a 81       	ldd	r25, Y+2	; 0x02
    20e8:	fc 01       	movw	r30, r24
    20ea:	21 a3       	std	Z+33, r18	; 0x21
    20ec:	89 81       	ldd	r24, Y+1	; 0x01
    20ee:	9a 81       	ldd	r25, Y+2	; 0x02
    20f0:	fc 01       	movw	r30, r24
    20f2:	96 89       	ldd	r25, Z+22	; 0x16
    20f4:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <uxTopReadyPriority>
    20f8:	89 17       	cp	r24, r25
    20fa:	30 f4       	brcc	.+12     	; 0x2108 <prvAddNewTaskToReadyList+0xa2>
    20fc:	89 81       	ldd	r24, Y+1	; 0x01
    20fe:	9a 81       	ldd	r25, Y+2	; 0x02
    2100:	fc 01       	movw	r30, r24
    2102:	86 89       	ldd	r24, Z+22	; 0x16
    2104:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <uxTopReadyPriority>
    2108:	89 81       	ldd	r24, Y+1	; 0x01
    210a:	9a 81       	ldd	r25, Y+2	; 0x02
    210c:	ac 01       	movw	r20, r24
    210e:	4e 5f       	subi	r20, 0xFE	; 254
    2110:	5f 4f       	sbci	r21, 0xFF	; 255
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	fc 01       	movw	r30, r24
    2118:	86 89       	ldd	r24, Z+22	; 0x16
    211a:	28 2f       	mov	r18, r24
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	c9 01       	movw	r24, r18
    2120:	88 0f       	add	r24, r24
    2122:	99 1f       	adc	r25, r25
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	88 0f       	add	r24, r24
    212a:	99 1f       	adc	r25, r25
    212c:	82 0f       	add	r24, r18
    212e:	93 1f       	adc	r25, r19
    2130:	8d 58       	subi	r24, 0x8D	; 141
    2132:	9c 4f       	sbci	r25, 0xFC	; 252
    2134:	ba 01       	movw	r22, r20
    2136:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vListInsertEnd>
    213a:	0f 90       	pop	r0
    213c:	0f be       	out	0x3f, r0	; 63
    213e:	80 91 c4 03 	lds	r24, 0x03C4	; 0x8003c4 <xSchedulerRunning>
    2142:	88 23       	and	r24, r24
    2144:	71 f0       	breq	.+28     	; 0x2162 <prvAddNewTaskToReadyList+0xfc>
    2146:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    214a:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    214e:	fc 01       	movw	r30, r24
    2150:	26 89       	ldd	r18, Z+22	; 0x16
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	9a 81       	ldd	r25, Y+2	; 0x02
    2156:	fc 01       	movw	r30, r24
    2158:	86 89       	ldd	r24, Z+22	; 0x16
    215a:	28 17       	cp	r18, r24
    215c:	10 f4       	brcc	.+4      	; 0x2162 <prvAddNewTaskToReadyList+0xfc>
    215e:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	df 91       	pop	r29
    2168:	cf 91       	pop	r28
    216a:	08 95       	ret

0000216c <vTaskDelay>:
    216c:	cf 93       	push	r28
    216e:	df 93       	push	r29
    2170:	00 d0       	rcall	.+0      	; 0x2172 <vTaskDelay+0x6>
    2172:	1f 92       	push	r1
    2174:	cd b7       	in	r28, 0x3d	; 61
    2176:	de b7       	in	r29, 0x3e	; 62
    2178:	9b 83       	std	Y+3, r25	; 0x03
    217a:	8a 83       	std	Y+2, r24	; 0x02
    217c:	19 82       	std	Y+1, r1	; 0x01
    217e:	8a 81       	ldd	r24, Y+2	; 0x02
    2180:	9b 81       	ldd	r25, Y+3	; 0x03
    2182:	89 2b       	or	r24, r25
    2184:	51 f0       	breq	.+20     	; 0x219a <vTaskDelay+0x2e>
    2186:	0e 94 0c 11 	call	0x2218	; 0x2218 <vTaskSuspendAll>
    218a:	8a 81       	ldd	r24, Y+2	; 0x02
    218c:	9b 81       	ldd	r25, Y+3	; 0x03
    218e:	60 e0       	ldi	r22, 0x00	; 0
    2190:	0e 94 10 15 	call	0x2a20	; 0x2a20 <prvAddCurrentTaskToDelayedList>
    2194:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    2198:	89 83       	std	Y+1, r24	; 0x01
    219a:	89 81       	ldd	r24, Y+1	; 0x01
    219c:	88 23       	and	r24, r24
    219e:	11 f4       	brne	.+4      	; 0x21a4 <vTaskDelay+0x38>
    21a0:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    21a4:	0f 90       	pop	r0
    21a6:	0f 90       	pop	r0
    21a8:	0f 90       	pop	r0
    21aa:	df 91       	pop	r29
    21ac:	cf 91       	pop	r28
    21ae:	08 95       	ret

000021b0 <vTaskStartScheduler>:
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	cf 93       	push	r28
    21b8:	df 93       	push	r29
    21ba:	1f 92       	push	r1
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	0f 2e       	mov	r0, r31
    21c2:	fb ec       	ldi	r31, 0xCB	; 203
    21c4:	ef 2e       	mov	r14, r31
    21c6:	f3 e0       	ldi	r31, 0x03	; 3
    21c8:	ff 2e       	mov	r15, r31
    21ca:	f0 2d       	mov	r31, r0
    21cc:	00 e0       	ldi	r16, 0x00	; 0
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	45 e5       	ldi	r20, 0x55	; 85
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	60 e4       	ldi	r22, 0x40	; 64
    21d8:	71 e0       	ldi	r23, 0x01	; 1
    21da:	8c e3       	ldi	r24, 0x3C	; 60
    21dc:	94 e1       	ldi	r25, 0x14	; 20
    21de:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <xTaskCreate>
    21e2:	89 83       	std	Y+1, r24	; 0x01
    21e4:	89 81       	ldd	r24, Y+1	; 0x01
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	81 f4       	brne	.+32     	; 0x220a <vTaskStartScheduler+0x5a>
    21ea:	f8 94       	cli
    21ec:	8f ef       	ldi	r24, 0xFF	; 255
    21ee:	9f ef       	ldi	r25, 0xFF	; 255
    21f0:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    21f4:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	80 93 c4 03 	sts	0x03C4, r24	; 0x8003c4 <xSchedulerRunning>
    21fe:	10 92 c2 03 	sts	0x03C2, r1	; 0x8003c2 <xTickCount+0x1>
    2202:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <xTickCount>
    2206:	0e 94 bc 06 	call	0xd78	; 0xd78 <xPortStartScheduler>
    220a:	0f 90       	pop	r0
    220c:	df 91       	pop	r29
    220e:	cf 91       	pop	r28
    2210:	0f 91       	pop	r16
    2212:	ff 90       	pop	r15
    2214:	ef 90       	pop	r14
    2216:	08 95       	ret

00002218 <vTaskSuspendAll>:
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	cd b7       	in	r28, 0x3d	; 61
    221e:	de b7       	in	r29, 0x3e	; 62
    2220:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    2224:	8f 5f       	subi	r24, 0xFF	; 255
    2226:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <uxSchedulerSuspended>
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	08 95       	ret

00002230 <xTaskResumeAll>:
    2230:	cf 93       	push	r28
    2232:	df 93       	push	r29
    2234:	00 d0       	rcall	.+0      	; 0x2236 <xTaskResumeAll+0x6>
    2236:	00 d0       	rcall	.+0      	; 0x2238 <xTaskResumeAll+0x8>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	1a 82       	std	Y+2, r1	; 0x02
    223e:	19 82       	std	Y+1, r1	; 0x01
    2240:	1b 82       	std	Y+3, r1	; 0x03
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	0f 92       	push	r0
    2248:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    224c:	81 50       	subi	r24, 0x01	; 1
    224e:	80 93 cd 03 	sts	0x03CD, r24	; 0x8003cd <uxSchedulerSuspended>
    2252:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    2256:	88 23       	and	r24, r24
    2258:	09 f0       	breq	.+2      	; 0x225c <xTaskResumeAll+0x2c>
    225a:	77 c0       	rjmp	.+238    	; 0x234a <xTaskResumeAll+0x11a>
    225c:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxCurrentNumberOfTasks>
    2260:	88 23       	and	r24, r24
    2262:	09 f4       	brne	.+2      	; 0x2266 <xTaskResumeAll+0x36>
    2264:	72 c0       	rjmp	.+228    	; 0x234a <xTaskResumeAll+0x11a>
    2266:	49 c0       	rjmp	.+146    	; 0x22fa <xTaskResumeAll+0xca>
    2268:	80 91 b2 03 	lds	r24, 0x03B2	; 0x8003b2 <xPendingReadyList+0x5>
    226c:	90 91 b3 03 	lds	r25, 0x03B3	; 0x8003b3 <xPendingReadyList+0x6>
    2270:	fc 01       	movw	r30, r24
    2272:	86 81       	ldd	r24, Z+6	; 0x06
    2274:	97 81       	ldd	r25, Z+7	; 0x07
    2276:	9a 83       	std	Y+2, r25	; 0x02
    2278:	89 83       	std	Y+1, r24	; 0x01
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	9a 81       	ldd	r25, Y+2	; 0x02
    227e:	0c 96       	adiw	r24, 0x0c	; 12
    2280:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    2284:	89 81       	ldd	r24, Y+1	; 0x01
    2286:	9a 81       	ldd	r25, Y+2	; 0x02
    2288:	02 96       	adiw	r24, 0x02	; 2
    228a:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    228e:	89 81       	ldd	r24, Y+1	; 0x01
    2290:	9a 81       	ldd	r25, Y+2	; 0x02
    2292:	fc 01       	movw	r30, r24
    2294:	96 89       	ldd	r25, Z+22	; 0x16
    2296:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <uxTopReadyPriority>
    229a:	89 17       	cp	r24, r25
    229c:	30 f4       	brcc	.+12     	; 0x22aa <xTaskResumeAll+0x7a>
    229e:	89 81       	ldd	r24, Y+1	; 0x01
    22a0:	9a 81       	ldd	r25, Y+2	; 0x02
    22a2:	fc 01       	movw	r30, r24
    22a4:	86 89       	ldd	r24, Z+22	; 0x16
    22a6:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <uxTopReadyPriority>
    22aa:	89 81       	ldd	r24, Y+1	; 0x01
    22ac:	9a 81       	ldd	r25, Y+2	; 0x02
    22ae:	ac 01       	movw	r20, r24
    22b0:	4e 5f       	subi	r20, 0xFE	; 254
    22b2:	5f 4f       	sbci	r21, 0xFF	; 255
    22b4:	89 81       	ldd	r24, Y+1	; 0x01
    22b6:	9a 81       	ldd	r25, Y+2	; 0x02
    22b8:	fc 01       	movw	r30, r24
    22ba:	86 89       	ldd	r24, Z+22	; 0x16
    22bc:	28 2f       	mov	r18, r24
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	c9 01       	movw	r24, r18
    22c2:	88 0f       	add	r24, r24
    22c4:	99 1f       	adc	r25, r25
    22c6:	88 0f       	add	r24, r24
    22c8:	99 1f       	adc	r25, r25
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	82 0f       	add	r24, r18
    22d0:	93 1f       	adc	r25, r19
    22d2:	8d 58       	subi	r24, 0x8D	; 141
    22d4:	9c 4f       	sbci	r25, 0xFC	; 252
    22d6:	ba 01       	movw	r22, r20
    22d8:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vListInsertEnd>
    22dc:	89 81       	ldd	r24, Y+1	; 0x01
    22de:	9a 81       	ldd	r25, Y+2	; 0x02
    22e0:	fc 01       	movw	r30, r24
    22e2:	26 89       	ldd	r18, Z+22	; 0x16
    22e4:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    22e8:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    22ec:	fc 01       	movw	r30, r24
    22ee:	86 89       	ldd	r24, Z+22	; 0x16
    22f0:	28 17       	cp	r18, r24
    22f2:	18 f0       	brcs	.+6      	; 0x22fa <xTaskResumeAll+0xca>
    22f4:	81 e0       	ldi	r24, 0x01	; 1
    22f6:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <xYieldPending>
    22fa:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <xPendingReadyList>
    22fe:	88 23       	and	r24, r24
    2300:	09 f0       	breq	.+2      	; 0x2304 <xTaskResumeAll+0xd4>
    2302:	b2 cf       	rjmp	.-156    	; 0x2268 <xTaskResumeAll+0x38>
    2304:	89 81       	ldd	r24, Y+1	; 0x01
    2306:	9a 81       	ldd	r25, Y+2	; 0x02
    2308:	89 2b       	or	r24, r25
    230a:	11 f0       	breq	.+4      	; 0x2310 <xTaskResumeAll+0xe0>
    230c:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <prvResetNextTaskUnblockTime>
    2310:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <uxPendedTicks>
    2314:	8c 83       	std	Y+4, r24	; 0x04
    2316:	8c 81       	ldd	r24, Y+4	; 0x04
    2318:	88 23       	and	r24, r24
    231a:	79 f0       	breq	.+30     	; 0x233a <xTaskResumeAll+0x10a>
    231c:	0e 94 af 11 	call	0x235e	; 0x235e <xTaskIncrementTick>
    2320:	88 23       	and	r24, r24
    2322:	19 f0       	breq	.+6      	; 0x232a <xTaskResumeAll+0xfa>
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <xYieldPending>
    232a:	8c 81       	ldd	r24, Y+4	; 0x04
    232c:	81 50       	subi	r24, 0x01	; 1
    232e:	8c 83       	std	Y+4, r24	; 0x04
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	88 23       	and	r24, r24
    2334:	99 f7       	brne	.-26     	; 0x231c <xTaskResumeAll+0xec>
    2336:	10 92 c5 03 	sts	0x03C5, r1	; 0x8003c5 <uxPendedTicks>
    233a:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <xYieldPending>
    233e:	88 23       	and	r24, r24
    2340:	21 f0       	breq	.+8      	; 0x234a <xTaskResumeAll+0x11a>
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	8b 83       	std	Y+3, r24	; 0x03
    2346:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    234a:	0f 90       	pop	r0
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	0f 90       	pop	r0
    2352:	0f 90       	pop	r0
    2354:	0f 90       	pop	r0
    2356:	0f 90       	pop	r0
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	08 95       	ret

0000235e <xTaskIncrementTick>:
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	29 97       	sbiw	r28, 0x09	; 9
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	19 82       	std	Y+1, r1	; 0x01
    2374:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    2378:	88 23       	and	r24, r24
    237a:	09 f0       	breq	.+2      	; 0x237e <xTaskIncrementTick+0x20>
    237c:	c7 c0       	rjmp	.+398    	; 0x250c <xTaskIncrementTick+0x1ae>
    237e:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <xTickCount>
    2382:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <xTickCount+0x1>
    2386:	01 96       	adiw	r24, 0x01	; 1
    2388:	9b 83       	std	Y+3, r25	; 0x03
    238a:	8a 83       	std	Y+2, r24	; 0x02
    238c:	8a 81       	ldd	r24, Y+2	; 0x02
    238e:	9b 81       	ldd	r25, Y+3	; 0x03
    2390:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <xTickCount+0x1>
    2394:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <xTickCount>
    2398:	8a 81       	ldd	r24, Y+2	; 0x02
    239a:	9b 81       	ldd	r25, Y+3	; 0x03
    239c:	89 2b       	or	r24, r25
    239e:	d9 f4       	brne	.+54     	; 0x23d6 <xTaskIncrementTick+0x78>
    23a0:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    23a4:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    23a8:	9d 83       	std	Y+5, r25	; 0x05
    23aa:	8c 83       	std	Y+4, r24	; 0x04
    23ac:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <pxOverflowDelayedTaskList>
    23b0:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <pxOverflowDelayedTaskList+0x1>
    23b4:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <pxDelayedTaskList+0x1>
    23b8:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <pxDelayedTaskList>
    23bc:	8c 81       	ldd	r24, Y+4	; 0x04
    23be:	9d 81       	ldd	r25, Y+5	; 0x05
    23c0:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <pxOverflowDelayedTaskList+0x1>
    23c4:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <pxOverflowDelayedTaskList>
    23c8:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <xNumOfOverflows>
    23cc:	8f 5f       	subi	r24, 0xFF	; 255
    23ce:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <xNumOfOverflows>
    23d2:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <prvResetNextTaskUnblockTime>
    23d6:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <xNextTaskUnblockTime>
    23da:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <xNextTaskUnblockTime+0x1>
    23de:	2a 81       	ldd	r18, Y+2	; 0x02
    23e0:	3b 81       	ldd	r19, Y+3	; 0x03
    23e2:	28 17       	cp	r18, r24
    23e4:	39 07       	cpc	r19, r25
    23e6:	08 f4       	brcc	.+2      	; 0x23ea <xTaskIncrementTick+0x8c>
    23e8:	77 c0       	rjmp	.+238    	; 0x24d8 <xTaskIncrementTick+0x17a>
    23ea:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    23ee:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    23f2:	fc 01       	movw	r30, r24
    23f4:	80 81       	ld	r24, Z
    23f6:	88 23       	and	r24, r24
    23f8:	39 f4       	brne	.+14     	; 0x2408 <xTaskIncrementTick+0xaa>
    23fa:	8f ef       	ldi	r24, 0xFF	; 255
    23fc:	9f ef       	ldi	r25, 0xFF	; 255
    23fe:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    2402:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>
    2406:	68 c0       	rjmp	.+208    	; 0x24d8 <xTaskIncrementTick+0x17a>
    2408:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    240c:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    2410:	fc 01       	movw	r30, r24
    2412:	85 81       	ldd	r24, Z+5	; 0x05
    2414:	96 81       	ldd	r25, Z+6	; 0x06
    2416:	fc 01       	movw	r30, r24
    2418:	86 81       	ldd	r24, Z+6	; 0x06
    241a:	97 81       	ldd	r25, Z+7	; 0x07
    241c:	9f 83       	std	Y+7, r25	; 0x07
    241e:	8e 83       	std	Y+6, r24	; 0x06
    2420:	8e 81       	ldd	r24, Y+6	; 0x06
    2422:	9f 81       	ldd	r25, Y+7	; 0x07
    2424:	fc 01       	movw	r30, r24
    2426:	82 81       	ldd	r24, Z+2	; 0x02
    2428:	93 81       	ldd	r25, Z+3	; 0x03
    242a:	99 87       	std	Y+9, r25	; 0x09
    242c:	88 87       	std	Y+8, r24	; 0x08
    242e:	2a 81       	ldd	r18, Y+2	; 0x02
    2430:	3b 81       	ldd	r19, Y+3	; 0x03
    2432:	88 85       	ldd	r24, Y+8	; 0x08
    2434:	99 85       	ldd	r25, Y+9	; 0x09
    2436:	28 17       	cp	r18, r24
    2438:	39 07       	cpc	r19, r25
    243a:	38 f4       	brcc	.+14     	; 0x244a <xTaskIncrementTick+0xec>
    243c:	88 85       	ldd	r24, Y+8	; 0x08
    243e:	99 85       	ldd	r25, Y+9	; 0x09
    2440:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    2444:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>
    2448:	47 c0       	rjmp	.+142    	; 0x24d8 <xTaskIncrementTick+0x17a>
    244a:	8e 81       	ldd	r24, Y+6	; 0x06
    244c:	9f 81       	ldd	r25, Y+7	; 0x07
    244e:	02 96       	adiw	r24, 0x02	; 2
    2450:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    2454:	8e 81       	ldd	r24, Y+6	; 0x06
    2456:	9f 81       	ldd	r25, Y+7	; 0x07
    2458:	fc 01       	movw	r30, r24
    245a:	84 89       	ldd	r24, Z+20	; 0x14
    245c:	95 89       	ldd	r25, Z+21	; 0x15
    245e:	89 2b       	or	r24, r25
    2460:	29 f0       	breq	.+10     	; 0x246c <xTaskIncrementTick+0x10e>
    2462:	8e 81       	ldd	r24, Y+6	; 0x06
    2464:	9f 81       	ldd	r25, Y+7	; 0x07
    2466:	0c 96       	adiw	r24, 0x0c	; 12
    2468:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    246c:	8e 81       	ldd	r24, Y+6	; 0x06
    246e:	9f 81       	ldd	r25, Y+7	; 0x07
    2470:	fc 01       	movw	r30, r24
    2472:	96 89       	ldd	r25, Z+22	; 0x16
    2474:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <uxTopReadyPriority>
    2478:	89 17       	cp	r24, r25
    247a:	30 f4       	brcc	.+12     	; 0x2488 <xTaskIncrementTick+0x12a>
    247c:	8e 81       	ldd	r24, Y+6	; 0x06
    247e:	9f 81       	ldd	r25, Y+7	; 0x07
    2480:	fc 01       	movw	r30, r24
    2482:	86 89       	ldd	r24, Z+22	; 0x16
    2484:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <uxTopReadyPriority>
    2488:	8e 81       	ldd	r24, Y+6	; 0x06
    248a:	9f 81       	ldd	r25, Y+7	; 0x07
    248c:	ac 01       	movw	r20, r24
    248e:	4e 5f       	subi	r20, 0xFE	; 254
    2490:	5f 4f       	sbci	r21, 0xFF	; 255
    2492:	8e 81       	ldd	r24, Y+6	; 0x06
    2494:	9f 81       	ldd	r25, Y+7	; 0x07
    2496:	fc 01       	movw	r30, r24
    2498:	86 89       	ldd	r24, Z+22	; 0x16
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	c9 01       	movw	r24, r18
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	88 0f       	add	r24, r24
    24a6:	99 1f       	adc	r25, r25
    24a8:	88 0f       	add	r24, r24
    24aa:	99 1f       	adc	r25, r25
    24ac:	82 0f       	add	r24, r18
    24ae:	93 1f       	adc	r25, r19
    24b0:	8d 58       	subi	r24, 0x8D	; 141
    24b2:	9c 4f       	sbci	r25, 0xFC	; 252
    24b4:	ba 01       	movw	r22, r20
    24b6:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vListInsertEnd>
    24ba:	8e 81       	ldd	r24, Y+6	; 0x06
    24bc:	9f 81       	ldd	r25, Y+7	; 0x07
    24be:	fc 01       	movw	r30, r24
    24c0:	26 89       	ldd	r18, Z+22	; 0x16
    24c2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    24c6:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    24ca:	fc 01       	movw	r30, r24
    24cc:	86 89       	ldd	r24, Z+22	; 0x16
    24ce:	28 17       	cp	r18, r24
    24d0:	10 f0       	brcs	.+4      	; 0x24d6 <xTaskIncrementTick+0x178>
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	89 83       	std	Y+1, r24	; 0x01
    24d6:	89 cf       	rjmp	.-238    	; 0x23ea <xTaskIncrementTick+0x8c>
    24d8:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    24dc:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    24e0:	fc 01       	movw	r30, r24
    24e2:	86 89       	ldd	r24, Z+22	; 0x16
    24e4:	28 2f       	mov	r18, r24
    24e6:	30 e0       	ldi	r19, 0x00	; 0
    24e8:	c9 01       	movw	r24, r18
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
    24f2:	88 0f       	add	r24, r24
    24f4:	99 1f       	adc	r25, r25
    24f6:	82 0f       	add	r24, r18
    24f8:	93 1f       	adc	r25, r19
    24fa:	8d 58       	subi	r24, 0x8D	; 141
    24fc:	9c 4f       	sbci	r25, 0xFC	; 252
    24fe:	fc 01       	movw	r30, r24
    2500:	80 81       	ld	r24, Z
    2502:	82 30       	cpi	r24, 0x02	; 2
    2504:	10 f0       	brcs	.+4      	; 0x250a <xTaskIncrementTick+0x1ac>
    2506:	81 e0       	ldi	r24, 0x01	; 1
    2508:	89 83       	std	Y+1, r24	; 0x01
    250a:	05 c0       	rjmp	.+10     	; 0x2516 <xTaskIncrementTick+0x1b8>
    250c:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <uxPendedTicks>
    2510:	8f 5f       	subi	r24, 0xFF	; 255
    2512:	80 93 c5 03 	sts	0x03C5, r24	; 0x8003c5 <uxPendedTicks>
    2516:	80 91 c6 03 	lds	r24, 0x03C6	; 0x8003c6 <xYieldPending>
    251a:	88 23       	and	r24, r24
    251c:	11 f0       	breq	.+4      	; 0x2522 <xTaskIncrementTick+0x1c4>
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	89 83       	std	Y+1, r24	; 0x01
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	29 96       	adiw	r28, 0x09	; 9
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	df 91       	pop	r29
    2532:	cf 91       	pop	r28
    2534:	08 95       	ret

00002536 <vTaskSwitchContext>:
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	00 d0       	rcall	.+0      	; 0x253c <vTaskSwitchContext+0x6>
    253c:	1f 92       	push	r1
    253e:	cd b7       	in	r28, 0x3d	; 61
    2540:	de b7       	in	r29, 0x3e	; 62
    2542:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    2546:	88 23       	and	r24, r24
    2548:	21 f0       	breq	.+8      	; 0x2552 <vTaskSwitchContext+0x1c>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <xYieldPending>
    2550:	71 c0       	rjmp	.+226    	; 0x2634 <vTaskSwitchContext+0xfe>
    2552:	10 92 c6 03 	sts	0x03C6, r1	; 0x8003c6 <xYieldPending>
    2556:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    255a:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    255e:	fc 01       	movw	r30, r24
    2560:	83 a1       	ldd	r24, Z+35	; 0x23
    2562:	94 a1       	ldd	r25, Z+36	; 0x24
    2564:	0e 94 04 03 	call	0x608	; 0x608 <switch_out>
    2568:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <uxTopReadyPriority>
    256c:	89 83       	std	Y+1, r24	; 0x01
    256e:	03 c0       	rjmp	.+6      	; 0x2576 <vTaskSwitchContext+0x40>
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	81 50       	subi	r24, 0x01	; 1
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	c9 01       	movw	r24, r18
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	88 0f       	add	r24, r24
    2584:	99 1f       	adc	r25, r25
    2586:	88 0f       	add	r24, r24
    2588:	99 1f       	adc	r25, r25
    258a:	82 0f       	add	r24, r18
    258c:	93 1f       	adc	r25, r19
    258e:	8d 58       	subi	r24, 0x8D	; 141
    2590:	9c 4f       	sbci	r25, 0xFC	; 252
    2592:	fc 01       	movw	r30, r24
    2594:	80 81       	ld	r24, Z
    2596:	88 23       	and	r24, r24
    2598:	59 f3       	breq	.-42     	; 0x2570 <vTaskSwitchContext+0x3a>
    259a:	89 81       	ldd	r24, Y+1	; 0x01
    259c:	28 2f       	mov	r18, r24
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	c9 01       	movw	r24, r18
    25a2:	88 0f       	add	r24, r24
    25a4:	99 1f       	adc	r25, r25
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	88 0f       	add	r24, r24
    25ac:	99 1f       	adc	r25, r25
    25ae:	82 0f       	add	r24, r18
    25b0:	93 1f       	adc	r25, r19
    25b2:	8d 58       	subi	r24, 0x8D	; 141
    25b4:	9c 4f       	sbci	r25, 0xFC	; 252
    25b6:	9b 83       	std	Y+3, r25	; 0x03
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    25ba:	8a 81       	ldd	r24, Y+2	; 0x02
    25bc:	9b 81       	ldd	r25, Y+3	; 0x03
    25be:	fc 01       	movw	r30, r24
    25c0:	81 81       	ldd	r24, Z+1	; 0x01
    25c2:	92 81       	ldd	r25, Z+2	; 0x02
    25c4:	fc 01       	movw	r30, r24
    25c6:	22 81       	ldd	r18, Z+2	; 0x02
    25c8:	33 81       	ldd	r19, Z+3	; 0x03
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	9b 81       	ldd	r25, Y+3	; 0x03
    25ce:	fc 01       	movw	r30, r24
    25d0:	32 83       	std	Z+2, r19	; 0x02
    25d2:	21 83       	std	Z+1, r18	; 0x01
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	fc 01       	movw	r30, r24
    25da:	21 81       	ldd	r18, Z+1	; 0x01
    25dc:	32 81       	ldd	r19, Z+2	; 0x02
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	03 96       	adiw	r24, 0x03	; 3
    25e4:	28 17       	cp	r18, r24
    25e6:	39 07       	cpc	r19, r25
    25e8:	69 f4       	brne	.+26     	; 0x2604 <vTaskSwitchContext+0xce>
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	81 81       	ldd	r24, Z+1	; 0x01
    25f2:	92 81       	ldd	r25, Z+2	; 0x02
    25f4:	fc 01       	movw	r30, r24
    25f6:	22 81       	ldd	r18, Z+2	; 0x02
    25f8:	33 81       	ldd	r19, Z+3	; 0x03
    25fa:	8a 81       	ldd	r24, Y+2	; 0x02
    25fc:	9b 81       	ldd	r25, Y+3	; 0x03
    25fe:	fc 01       	movw	r30, r24
    2600:	32 83       	std	Z+2, r19	; 0x02
    2602:	21 83       	std	Z+1, r18	; 0x01
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	fc 01       	movw	r30, r24
    260a:	81 81       	ldd	r24, Z+1	; 0x01
    260c:	92 81       	ldd	r25, Z+2	; 0x02
    260e:	fc 01       	movw	r30, r24
    2610:	86 81       	ldd	r24, Z+6	; 0x06
    2612:	97 81       	ldd	r25, Z+7	; 0x07
    2614:	90 93 72 03 	sts	0x0372, r25	; 0x800372 <pxCurrentTCB+0x1>
    2618:	80 93 71 03 	sts	0x0371, r24	; 0x800371 <pxCurrentTCB>
    261c:	89 81       	ldd	r24, Y+1	; 0x01
    261e:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <uxTopReadyPriority>
    2622:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2626:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    262a:	fc 01       	movw	r30, r24
    262c:	83 a1       	ldd	r24, Z+35	; 0x23
    262e:	94 a1       	ldd	r25, Z+36	; 0x24
    2630:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <switch_in>
    2634:	0f 90       	pop	r0
    2636:	0f 90       	pop	r0
    2638:	0f 90       	pop	r0
    263a:	df 91       	pop	r29
    263c:	cf 91       	pop	r28
    263e:	08 95       	ret

00002640 <vTaskPlaceOnEventList>:
    2640:	cf 93       	push	r28
    2642:	df 93       	push	r29
    2644:	00 d0       	rcall	.+0      	; 0x2646 <vTaskPlaceOnEventList+0x6>
    2646:	00 d0       	rcall	.+0      	; 0x2648 <vTaskPlaceOnEventList+0x8>
    2648:	cd b7       	in	r28, 0x3d	; 61
    264a:	de b7       	in	r29, 0x3e	; 62
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	7c 83       	std	Y+4, r23	; 0x04
    2652:	6b 83       	std	Y+3, r22	; 0x03
    2654:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2658:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    265c:	9c 01       	movw	r18, r24
    265e:	24 5f       	subi	r18, 0xF4	; 244
    2660:	3f 4f       	sbci	r19, 0xFF	; 255
    2662:	89 81       	ldd	r24, Y+1	; 0x01
    2664:	9a 81       	ldd	r25, Y+2	; 0x02
    2666:	b9 01       	movw	r22, r18
    2668:	0e 94 45 04 	call	0x88a	; 0x88a <vListInsert>
    266c:	8b 81       	ldd	r24, Y+3	; 0x03
    266e:	9c 81       	ldd	r25, Y+4	; 0x04
    2670:	61 e0       	ldi	r22, 0x01	; 1
    2672:	0e 94 10 15 	call	0x2a20	; 0x2a20 <prvAddCurrentTaskToDelayedList>
    2676:	0f 90       	pop	r0
    2678:	0f 90       	pop	r0
    267a:	0f 90       	pop	r0
    267c:	0f 90       	pop	r0
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	08 95       	ret

00002684 <xTaskRemoveFromEventList>:
    2684:	cf 93       	push	r28
    2686:	df 93       	push	r29
    2688:	00 d0       	rcall	.+0      	; 0x268a <xTaskRemoveFromEventList+0x6>
    268a:	00 d0       	rcall	.+0      	; 0x268c <xTaskRemoveFromEventList+0x8>
    268c:	1f 92       	push	r1
    268e:	cd b7       	in	r28, 0x3d	; 61
    2690:	de b7       	in	r29, 0x3e	; 62
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
    2696:	8c 81       	ldd	r24, Y+4	; 0x04
    2698:	9d 81       	ldd	r25, Y+5	; 0x05
    269a:	fc 01       	movw	r30, r24
    269c:	85 81       	ldd	r24, Z+5	; 0x05
    269e:	96 81       	ldd	r25, Z+6	; 0x06
    26a0:	fc 01       	movw	r30, r24
    26a2:	86 81       	ldd	r24, Z+6	; 0x06
    26a4:	97 81       	ldd	r25, Z+7	; 0x07
    26a6:	9b 83       	std	Y+3, r25	; 0x03
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	0c 96       	adiw	r24, 0x0c	; 12
    26b0:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    26b4:	80 91 cd 03 	lds	r24, 0x03CD	; 0x8003cd <uxSchedulerSuspended>
    26b8:	88 23       	and	r24, r24
    26ba:	69 f5       	brne	.+90     	; 0x2716 <xTaskRemoveFromEventList+0x92>
    26bc:	8a 81       	ldd	r24, Y+2	; 0x02
    26be:	9b 81       	ldd	r25, Y+3	; 0x03
    26c0:	02 96       	adiw	r24, 0x02	; 2
    26c2:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	fc 01       	movw	r30, r24
    26cc:	96 89       	ldd	r25, Z+22	; 0x16
    26ce:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <uxTopReadyPriority>
    26d2:	89 17       	cp	r24, r25
    26d4:	30 f4       	brcc	.+12     	; 0x26e2 <xTaskRemoveFromEventList+0x5e>
    26d6:	8a 81       	ldd	r24, Y+2	; 0x02
    26d8:	9b 81       	ldd	r25, Y+3	; 0x03
    26da:	fc 01       	movw	r30, r24
    26dc:	86 89       	ldd	r24, Z+22	; 0x16
    26de:	80 93 c3 03 	sts	0x03C3, r24	; 0x8003c3 <uxTopReadyPriority>
    26e2:	8a 81       	ldd	r24, Y+2	; 0x02
    26e4:	9b 81       	ldd	r25, Y+3	; 0x03
    26e6:	ac 01       	movw	r20, r24
    26e8:	4e 5f       	subi	r20, 0xFE	; 254
    26ea:	5f 4f       	sbci	r21, 0xFF	; 255
    26ec:	8a 81       	ldd	r24, Y+2	; 0x02
    26ee:	9b 81       	ldd	r25, Y+3	; 0x03
    26f0:	fc 01       	movw	r30, r24
    26f2:	86 89       	ldd	r24, Z+22	; 0x16
    26f4:	28 2f       	mov	r18, r24
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	c9 01       	movw	r24, r18
    26fa:	88 0f       	add	r24, r24
    26fc:	99 1f       	adc	r25, r25
    26fe:	88 0f       	add	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	88 0f       	add	r24, r24
    2704:	99 1f       	adc	r25, r25
    2706:	82 0f       	add	r24, r18
    2708:	93 1f       	adc	r25, r19
    270a:	8d 58       	subi	r24, 0x8D	; 141
    270c:	9c 4f       	sbci	r25, 0xFC	; 252
    270e:	ba 01       	movw	r22, r20
    2710:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vListInsertEnd>
    2714:	08 c0       	rjmp	.+16     	; 0x2726 <xTaskRemoveFromEventList+0xa2>
    2716:	8a 81       	ldd	r24, Y+2	; 0x02
    2718:	9b 81       	ldd	r25, Y+3	; 0x03
    271a:	0c 96       	adiw	r24, 0x0c	; 12
    271c:	bc 01       	movw	r22, r24
    271e:	8d ea       	ldi	r24, 0xAD	; 173
    2720:	93 e0       	ldi	r25, 0x03	; 3
    2722:	0e 94 f7 03 	call	0x7ee	; 0x7ee <vListInsertEnd>
    2726:	8a 81       	ldd	r24, Y+2	; 0x02
    2728:	9b 81       	ldd	r25, Y+3	; 0x03
    272a:	fc 01       	movw	r30, r24
    272c:	26 89       	ldd	r18, Z+22	; 0x16
    272e:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2732:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    2736:	fc 01       	movw	r30, r24
    2738:	86 89       	ldd	r24, Z+22	; 0x16
    273a:	82 17       	cp	r24, r18
    273c:	30 f4       	brcc	.+12     	; 0x274a <xTaskRemoveFromEventList+0xc6>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	89 83       	std	Y+1, r24	; 0x01
    2742:	81 e0       	ldi	r24, 0x01	; 1
    2744:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <xYieldPending>
    2748:	01 c0       	rjmp	.+2      	; 0x274c <xTaskRemoveFromEventList+0xc8>
    274a:	19 82       	std	Y+1, r1	; 0x01
    274c:	89 81       	ldd	r24, Y+1	; 0x01
    274e:	0f 90       	pop	r0
    2750:	0f 90       	pop	r0
    2752:	0f 90       	pop	r0
    2754:	0f 90       	pop	r0
    2756:	0f 90       	pop	r0
    2758:	df 91       	pop	r29
    275a:	cf 91       	pop	r28
    275c:	08 95       	ret

0000275e <vTaskSetTimeOutState>:
    275e:	cf 93       	push	r28
    2760:	df 93       	push	r29
    2762:	00 d0       	rcall	.+0      	; 0x2764 <vTaskSetTimeOutState+0x6>
    2764:	cd b7       	in	r28, 0x3d	; 61
    2766:	de b7       	in	r29, 0x3e	; 62
    2768:	9a 83       	std	Y+2, r25	; 0x02
    276a:	89 83       	std	Y+1, r24	; 0x01
    276c:	20 91 c7 03 	lds	r18, 0x03C7	; 0x8003c7 <xNumOfOverflows>
    2770:	89 81       	ldd	r24, Y+1	; 0x01
    2772:	9a 81       	ldd	r25, Y+2	; 0x02
    2774:	fc 01       	movw	r30, r24
    2776:	20 83       	st	Z, r18
    2778:	20 91 c1 03 	lds	r18, 0x03C1	; 0x8003c1 <xTickCount>
    277c:	30 91 c2 03 	lds	r19, 0x03C2	; 0x8003c2 <xTickCount+0x1>
    2780:	89 81       	ldd	r24, Y+1	; 0x01
    2782:	9a 81       	ldd	r25, Y+2	; 0x02
    2784:	fc 01       	movw	r30, r24
    2786:	32 83       	std	Z+2, r19	; 0x02
    2788:	21 83       	std	Z+1, r18	; 0x01
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	df 91       	pop	r29
    2790:	cf 91       	pop	r28
    2792:	08 95       	ret

00002794 <xTaskCheckForTimeOut>:
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	27 97       	sbiw	r28, 0x07	; 7
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	9d 83       	std	Y+5, r25	; 0x05
    27aa:	8c 83       	std	Y+4, r24	; 0x04
    27ac:	7f 83       	std	Y+7, r23	; 0x07
    27ae:	6e 83       	std	Y+6, r22	; 0x06
    27b0:	0f b6       	in	r0, 0x3f	; 63
    27b2:	f8 94       	cli
    27b4:	0f 92       	push	r0
    27b6:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <xTickCount>
    27ba:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <xTickCount+0x1>
    27be:	9b 83       	std	Y+3, r25	; 0x03
    27c0:	8a 83       	std	Y+2, r24	; 0x02
    27c2:	8c 81       	ldd	r24, Y+4	; 0x04
    27c4:	9d 81       	ldd	r25, Y+5	; 0x05
    27c6:	fc 01       	movw	r30, r24
    27c8:	90 81       	ld	r25, Z
    27ca:	80 91 c7 03 	lds	r24, 0x03C7	; 0x8003c7 <xNumOfOverflows>
    27ce:	98 17       	cp	r25, r24
    27d0:	69 f0       	breq	.+26     	; 0x27ec <xTaskCheckForTimeOut+0x58>
    27d2:	8c 81       	ldd	r24, Y+4	; 0x04
    27d4:	9d 81       	ldd	r25, Y+5	; 0x05
    27d6:	fc 01       	movw	r30, r24
    27d8:	21 81       	ldd	r18, Z+1	; 0x01
    27da:	32 81       	ldd	r19, Z+2	; 0x02
    27dc:	8a 81       	ldd	r24, Y+2	; 0x02
    27de:	9b 81       	ldd	r25, Y+3	; 0x03
    27e0:	82 17       	cp	r24, r18
    27e2:	93 07       	cpc	r25, r19
    27e4:	18 f0       	brcs	.+6      	; 0x27ec <xTaskCheckForTimeOut+0x58>
    27e6:	81 e0       	ldi	r24, 0x01	; 1
    27e8:	89 83       	std	Y+1, r24	; 0x01
    27ea:	30 c0       	rjmp	.+96     	; 0x284c <xTaskCheckForTimeOut+0xb8>
    27ec:	8c 81       	ldd	r24, Y+4	; 0x04
    27ee:	9d 81       	ldd	r25, Y+5	; 0x05
    27f0:	fc 01       	movw	r30, r24
    27f2:	81 81       	ldd	r24, Z+1	; 0x01
    27f4:	92 81       	ldd	r25, Z+2	; 0x02
    27f6:	2a 81       	ldd	r18, Y+2	; 0x02
    27f8:	3b 81       	ldd	r19, Y+3	; 0x03
    27fa:	28 1b       	sub	r18, r24
    27fc:	39 0b       	sbc	r19, r25
    27fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2800:	9f 81       	ldd	r25, Y+7	; 0x07
    2802:	fc 01       	movw	r30, r24
    2804:	80 81       	ld	r24, Z
    2806:	91 81       	ldd	r25, Z+1	; 0x01
    2808:	28 17       	cp	r18, r24
    280a:	39 07       	cpc	r19, r25
    280c:	e8 f4       	brcc	.+58     	; 0x2848 <xTaskCheckForTimeOut+0xb4>
    280e:	8e 81       	ldd	r24, Y+6	; 0x06
    2810:	9f 81       	ldd	r25, Y+7	; 0x07
    2812:	fc 01       	movw	r30, r24
    2814:	20 81       	ld	r18, Z
    2816:	31 81       	ldd	r19, Z+1	; 0x01
    2818:	8c 81       	ldd	r24, Y+4	; 0x04
    281a:	9d 81       	ldd	r25, Y+5	; 0x05
    281c:	fc 01       	movw	r30, r24
    281e:	41 81       	ldd	r20, Z+1	; 0x01
    2820:	52 81       	ldd	r21, Z+2	; 0x02
    2822:	8a 81       	ldd	r24, Y+2	; 0x02
    2824:	9b 81       	ldd	r25, Y+3	; 0x03
    2826:	ba 01       	movw	r22, r20
    2828:	68 1b       	sub	r22, r24
    282a:	79 0b       	sbc	r23, r25
    282c:	cb 01       	movw	r24, r22
    282e:	28 0f       	add	r18, r24
    2830:	39 1f       	adc	r19, r25
    2832:	8e 81       	ldd	r24, Y+6	; 0x06
    2834:	9f 81       	ldd	r25, Y+7	; 0x07
    2836:	fc 01       	movw	r30, r24
    2838:	31 83       	std	Z+1, r19	; 0x01
    283a:	20 83       	st	Z, r18
    283c:	8c 81       	ldd	r24, Y+4	; 0x04
    283e:	9d 81       	ldd	r25, Y+5	; 0x05
    2840:	0e 94 af 13 	call	0x275e	; 0x275e <vTaskSetTimeOutState>
    2844:	19 82       	std	Y+1, r1	; 0x01
    2846:	02 c0       	rjmp	.+4      	; 0x284c <xTaskCheckForTimeOut+0xb8>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	0f 90       	pop	r0
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	27 96       	adiw	r28, 0x07	; 7
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	08 95       	ret

00002864 <vTaskMissedYield>:
    2864:	cf 93       	push	r28
    2866:	df 93       	push	r29
    2868:	cd b7       	in	r28, 0x3d	; 61
    286a:	de b7       	in	r29, 0x3e	; 62
    286c:	81 e0       	ldi	r24, 0x01	; 1
    286e:	80 93 c6 03 	sts	0x03C6, r24	; 0x8003c6 <xYieldPending>
    2872:	df 91       	pop	r29
    2874:	cf 91       	pop	r28
    2876:	08 95       	ret

00002878 <prvIdleTask>:
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	00 d0       	rcall	.+0      	; 0x287e <prvIdleTask+0x6>
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
    2882:	9a 83       	std	Y+2, r25	; 0x02
    2884:	89 83       	std	Y+1, r24	; 0x01
    2886:	0e 94 8b 14 	call	0x2916	; 0x2916 <prvCheckTasksWaitingTermination>
    288a:	80 91 73 03 	lds	r24, 0x0373	; 0x800373 <pxReadyTasksLists>
    288e:	82 30       	cpi	r24, 0x02	; 2
    2890:	10 f0       	brcs	.+4      	; 0x2896 <prvIdleTask+0x1e>
    2892:	0e 94 f1 06 	call	0xde2	; 0xde2 <vPortYield>
    2896:	0e 94 77 01 	call	0x2ee	; 0x2ee <vApplicationIdleHook>
    289a:	f5 cf       	rjmp	.-22     	; 0x2886 <prvIdleTask+0xe>

0000289c <prvInitialiseTaskLists>:
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	1f 92       	push	r1
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	19 82       	std	Y+1, r1	; 0x01
    28a8:	13 c0       	rjmp	.+38     	; 0x28d0 <prvInitialiseTaskLists+0x34>
    28aa:	89 81       	ldd	r24, Y+1	; 0x01
    28ac:	28 2f       	mov	r18, r24
    28ae:	30 e0       	ldi	r19, 0x00	; 0
    28b0:	c9 01       	movw	r24, r18
    28b2:	88 0f       	add	r24, r24
    28b4:	99 1f       	adc	r25, r25
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	88 0f       	add	r24, r24
    28bc:	99 1f       	adc	r25, r25
    28be:	82 0f       	add	r24, r18
    28c0:	93 1f       	adc	r25, r19
    28c2:	8d 58       	subi	r24, 0x8D	; 141
    28c4:	9c 4f       	sbci	r25, 0xFC	; 252
    28c6:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    28ca:	89 81       	ldd	r24, Y+1	; 0x01
    28cc:	8f 5f       	subi	r24, 0xFF	; 255
    28ce:	89 83       	std	Y+1, r24	; 0x01
    28d0:	89 81       	ldd	r24, Y+1	; 0x01
    28d2:	84 30       	cpi	r24, 0x04	; 4
    28d4:	50 f3       	brcs	.-44     	; 0x28aa <prvInitialiseTaskLists+0xe>
    28d6:	87 e9       	ldi	r24, 0x97	; 151
    28d8:	93 e0       	ldi	r25, 0x03	; 3
    28da:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    28de:	80 ea       	ldi	r24, 0xA0	; 160
    28e0:	93 e0       	ldi	r25, 0x03	; 3
    28e2:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    28e6:	8d ea       	ldi	r24, 0xAD	; 173
    28e8:	93 e0       	ldi	r25, 0x03	; 3
    28ea:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    28ee:	86 eb       	ldi	r24, 0xB6	; 182
    28f0:	93 e0       	ldi	r25, 0x03	; 3
    28f2:	0e 94 b1 03 	call	0x762	; 0x762 <vListInitialise>
    28f6:	87 e9       	ldi	r24, 0x97	; 151
    28f8:	93 e0       	ldi	r25, 0x03	; 3
    28fa:	90 93 aa 03 	sts	0x03AA, r25	; 0x8003aa <pxDelayedTaskList+0x1>
    28fe:	80 93 a9 03 	sts	0x03A9, r24	; 0x8003a9 <pxDelayedTaskList>
    2902:	80 ea       	ldi	r24, 0xA0	; 160
    2904:	93 e0       	ldi	r25, 0x03	; 3
    2906:	90 93 ac 03 	sts	0x03AC, r25	; 0x8003ac <pxOverflowDelayedTaskList+0x1>
    290a:	80 93 ab 03 	sts	0x03AB, r24	; 0x8003ab <pxOverflowDelayedTaskList>
    290e:	0f 90       	pop	r0
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <prvCheckTasksWaitingTermination>:
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	00 d0       	rcall	.+0      	; 0x291c <prvCheckTasksWaitingTermination+0x6>
    291c:	1f 92       	push	r1
    291e:	cd b7       	in	r28, 0x3d	; 61
    2920:	de b7       	in	r29, 0x3e	; 62
    2922:	2f c0       	rjmp	.+94     	; 0x2982 <prvCheckTasksWaitingTermination+0x6c>
    2924:	0e 94 0c 11 	call	0x2218	; 0x2218 <vTaskSuspendAll>
    2928:	90 91 b6 03 	lds	r25, 0x03B6	; 0x8003b6 <xTasksWaitingTermination>
    292c:	81 e0       	ldi	r24, 0x01	; 1
    292e:	99 23       	and	r25, r25
    2930:	09 f0       	breq	.+2      	; 0x2934 <prvCheckTasksWaitingTermination+0x1e>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	0e 94 18 11 	call	0x2230	; 0x2230 <xTaskResumeAll>
    293a:	89 81       	ldd	r24, Y+1	; 0x01
    293c:	88 23       	and	r24, r24
    293e:	09 f5       	brne	.+66     	; 0x2982 <prvCheckTasksWaitingTermination+0x6c>
    2940:	0f b6       	in	r0, 0x3f	; 63
    2942:	f8 94       	cli
    2944:	0f 92       	push	r0
    2946:	80 91 bb 03 	lds	r24, 0x03BB	; 0x8003bb <xTasksWaitingTermination+0x5>
    294a:	90 91 bc 03 	lds	r25, 0x03BC	; 0x8003bc <xTasksWaitingTermination+0x6>
    294e:	fc 01       	movw	r30, r24
    2950:	86 81       	ldd	r24, Z+6	; 0x06
    2952:	97 81       	ldd	r25, Z+7	; 0x07
    2954:	9b 83       	std	Y+3, r25	; 0x03
    2956:	8a 83       	std	Y+2, r24	; 0x02
    2958:	8a 81       	ldd	r24, Y+2	; 0x02
    295a:	9b 81       	ldd	r25, Y+3	; 0x03
    295c:	02 96       	adiw	r24, 0x02	; 2
    295e:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
    2962:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <uxCurrentNumberOfTasks>
    2966:	81 50       	subi	r24, 0x01	; 1
    2968:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <uxCurrentNumberOfTasks>
    296c:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxDeletedTasksWaitingCleanUp>
    2970:	81 50       	subi	r24, 0x01	; 1
    2972:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <uxDeletedTasksWaitingCleanUp>
    2976:	0f 90       	pop	r0
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	8a 81       	ldd	r24, Y+2	; 0x02
    297c:	9b 81       	ldd	r25, Y+3	; 0x03
    297e:	0e 94 cb 14 	call	0x2996	; 0x2996 <prvDeleteTCB>
    2982:	80 91 bf 03 	lds	r24, 0x03BF	; 0x8003bf <uxDeletedTasksWaitingCleanUp>
    2986:	88 23       	and	r24, r24
    2988:	69 f6       	brne	.-102    	; 0x2924 <prvCheckTasksWaitingTermination+0xe>
    298a:	0f 90       	pop	r0
    298c:	0f 90       	pop	r0
    298e:	0f 90       	pop	r0
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret

00002996 <prvDeleteTCB>:
    2996:	cf 93       	push	r28
    2998:	df 93       	push	r29
    299a:	00 d0       	rcall	.+0      	; 0x299c <prvDeleteTCB+0x6>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	89 81       	ldd	r24, Y+1	; 0x01
    29a6:	9a 81       	ldd	r25, Y+2	; 0x02
    29a8:	fc 01       	movw	r30, r24
    29aa:	87 89       	ldd	r24, Z+23	; 0x17
    29ac:	90 8d       	ldd	r25, Z+24	; 0x18
    29ae:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vPortFree>
    29b2:	89 81       	ldd	r24, Y+1	; 0x01
    29b4:	9a 81       	ldd	r25, Y+2	; 0x02
    29b6:	0e 94 60 08 	call	0x10c0	; 0x10c0 <vPortFree>
    29ba:	0f 90       	pop	r0
    29bc:	0f 90       	pop	r0
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	08 95       	ret

000029c4 <prvResetNextTaskUnblockTime>:
    29c4:	cf 93       	push	r28
    29c6:	df 93       	push	r29
    29c8:	00 d0       	rcall	.+0      	; 0x29ca <prvResetNextTaskUnblockTime+0x6>
    29ca:	cd b7       	in	r28, 0x3d	; 61
    29cc:	de b7       	in	r29, 0x3e	; 62
    29ce:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    29d2:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    29d6:	fc 01       	movw	r30, r24
    29d8:	80 81       	ld	r24, Z
    29da:	88 23       	and	r24, r24
    29dc:	39 f4       	brne	.+14     	; 0x29ec <prvResetNextTaskUnblockTime+0x28>
    29de:	8f ef       	ldi	r24, 0xFF	; 255
    29e0:	9f ef       	ldi	r25, 0xFF	; 255
    29e2:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    29e6:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>
    29ea:	15 c0       	rjmp	.+42     	; 0x2a16 <prvResetNextTaskUnblockTime+0x52>
    29ec:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    29f0:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    29f4:	fc 01       	movw	r30, r24
    29f6:	85 81       	ldd	r24, Z+5	; 0x05
    29f8:	96 81       	ldd	r25, Z+6	; 0x06
    29fa:	fc 01       	movw	r30, r24
    29fc:	86 81       	ldd	r24, Z+6	; 0x06
    29fe:	97 81       	ldd	r25, Z+7	; 0x07
    2a00:	9a 83       	std	Y+2, r25	; 0x02
    2a02:	89 83       	std	Y+1, r24	; 0x01
    2a04:	89 81       	ldd	r24, Y+1	; 0x01
    2a06:	9a 81       	ldd	r25, Y+2	; 0x02
    2a08:	fc 01       	movw	r30, r24
    2a0a:	82 81       	ldd	r24, Z+2	; 0x02
    2a0c:	93 81       	ldd	r25, Z+3	; 0x03
    2a0e:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    2a12:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	08 95       	ret

00002a20 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    2a20:	cf 93       	push	r28
    2a22:	df 93       	push	r29
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62
    2a28:	27 97       	sbiw	r28, 0x07	; 7
    2a2a:	0f b6       	in	r0, 0x3f	; 63
    2a2c:	f8 94       	cli
    2a2e:	de bf       	out	0x3e, r29	; 62
    2a30:	0f be       	out	0x3f, r0	; 63
    2a32:	cd bf       	out	0x3d, r28	; 61
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    2a3a:	80 91 c1 03 	lds	r24, 0x03C1	; 0x8003c1 <xTickCount>
    2a3e:	90 91 c2 03 	lds	r25, 0x03C2	; 0x8003c2 <xTickCount+0x1>
    2a42:	9a 83       	std	Y+2, r25	; 0x02
    2a44:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    2a46:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2a4a:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    2a4e:	02 96       	adiw	r24, 0x02	; 2
    2a50:	0e 94 bc 04 	call	0x978	; 0x978 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    2a54:	29 81       	ldd	r18, Y+1	; 0x01
    2a56:	3a 81       	ldd	r19, Y+2	; 0x02
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	82 0f       	add	r24, r18
    2a5e:	93 1f       	adc	r25, r19
    2a60:	9c 83       	std	Y+4, r25	; 0x04
    2a62:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    2a64:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2a68:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    2a6c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a6e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a70:	fc 01       	movw	r30, r24
    2a72:	33 83       	std	Z+3, r19	; 0x03
    2a74:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    2a76:	2b 81       	ldd	r18, Y+3	; 0x03
    2a78:	3c 81       	ldd	r19, Y+4	; 0x04
    2a7a:	89 81       	ldd	r24, Y+1	; 0x01
    2a7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7e:	28 17       	cp	r18, r24
    2a80:	39 07       	cpc	r19, r25
    2a82:	78 f4       	brcc	.+30     	; 0x2aa2 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2a84:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2a88:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    2a8c:	9c 01       	movw	r18, r24
    2a8e:	2e 5f       	subi	r18, 0xFE	; 254
    2a90:	3f 4f       	sbci	r19, 0xFF	; 255
    2a92:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <pxOverflowDelayedTaskList>
    2a96:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <pxOverflowDelayedTaskList+0x1>
    2a9a:	b9 01       	movw	r22, r18
    2a9c:	0e 94 45 04 	call	0x88a	; 0x88a <vListInsert>
    2aa0:	1d c0       	rjmp	.+58     	; 0x2adc <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    2aa2:	80 91 71 03 	lds	r24, 0x0371	; 0x800371 <pxCurrentTCB>
    2aa6:	90 91 72 03 	lds	r25, 0x0372	; 0x800372 <pxCurrentTCB+0x1>
    2aaa:	9c 01       	movw	r18, r24
    2aac:	2e 5f       	subi	r18, 0xFE	; 254
    2aae:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab0:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <pxDelayedTaskList>
    2ab4:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <pxDelayedTaskList+0x1>
    2ab8:	b9 01       	movw	r22, r18
    2aba:	0e 94 45 04 	call	0x88a	; 0x88a <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    2abe:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <xNextTaskUnblockTime>
    2ac2:	90 91 ca 03 	lds	r25, 0x03CA	; 0x8003ca <xNextTaskUnblockTime+0x1>
    2ac6:	2b 81       	ldd	r18, Y+3	; 0x03
    2ac8:	3c 81       	ldd	r19, Y+4	; 0x04
    2aca:	28 17       	cp	r18, r24
    2acc:	39 07       	cpc	r19, r25
    2ace:	30 f4       	brcc	.+12     	; 0x2adc <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad4:	90 93 ca 03 	sts	0x03CA, r25	; 0x8003ca <xNextTaskUnblockTime+0x1>
    2ad8:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    2adc:	27 96       	adiw	r28, 0x07	; 7
    2ade:	0f b6       	in	r0, 0x3f	; 63
    2ae0:	f8 94       	cli
    2ae2:	de bf       	out	0x3e, r29	; 62
    2ae4:	0f be       	out	0x3f, r0	; 63
    2ae6:	cd bf       	out	0x3d, r28	; 61
    2ae8:	df 91       	pop	r29
    2aea:	cf 91       	pop	r28
    2aec:	08 95       	ret

00002aee <__udivmodsi4>:
    2aee:	a1 e2       	ldi	r26, 0x21	; 33
    2af0:	1a 2e       	mov	r1, r26
    2af2:	aa 1b       	sub	r26, r26
    2af4:	bb 1b       	sub	r27, r27
    2af6:	fd 01       	movw	r30, r26
    2af8:	0d c0       	rjmp	.+26     	; 0x2b14 <__udivmodsi4_ep>

00002afa <__udivmodsi4_loop>:
    2afa:	aa 1f       	adc	r26, r26
    2afc:	bb 1f       	adc	r27, r27
    2afe:	ee 1f       	adc	r30, r30
    2b00:	ff 1f       	adc	r31, r31
    2b02:	a2 17       	cp	r26, r18
    2b04:	b3 07       	cpc	r27, r19
    2b06:	e4 07       	cpc	r30, r20
    2b08:	f5 07       	cpc	r31, r21
    2b0a:	20 f0       	brcs	.+8      	; 0x2b14 <__udivmodsi4_ep>
    2b0c:	a2 1b       	sub	r26, r18
    2b0e:	b3 0b       	sbc	r27, r19
    2b10:	e4 0b       	sbc	r30, r20
    2b12:	f5 0b       	sbc	r31, r21

00002b14 <__udivmodsi4_ep>:
    2b14:	66 1f       	adc	r22, r22
    2b16:	77 1f       	adc	r23, r23
    2b18:	88 1f       	adc	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	1a 94       	dec	r1
    2b1e:	69 f7       	brne	.-38     	; 0x2afa <__udivmodsi4_loop>
    2b20:	60 95       	com	r22
    2b22:	70 95       	com	r23
    2b24:	80 95       	com	r24
    2b26:	90 95       	com	r25
    2b28:	9b 01       	movw	r18, r22
    2b2a:	ac 01       	movw	r20, r24
    2b2c:	bd 01       	movw	r22, r26
    2b2e:	cf 01       	movw	r24, r30
    2b30:	08 95       	ret

00002b32 <malloc>:
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	91 05       	cpc	r25, r1
    2b3a:	10 f4       	brcc	.+4      	; 0x2b40 <malloc+0xe>
    2b3c:	82 e0       	ldi	r24, 0x02	; 2
    2b3e:	90 e0       	ldi	r25, 0x00	; 0
    2b40:	e0 91 d0 03 	lds	r30, 0x03D0	; 0x8003d0 <__flp>
    2b44:	f0 91 d1 03 	lds	r31, 0x03D1	; 0x8003d1 <__flp+0x1>
    2b48:	20 e0       	ldi	r18, 0x00	; 0
    2b4a:	30 e0       	ldi	r19, 0x00	; 0
    2b4c:	c0 e0       	ldi	r28, 0x00	; 0
    2b4e:	d0 e0       	ldi	r29, 0x00	; 0
    2b50:	30 97       	sbiw	r30, 0x00	; 0
    2b52:	11 f1       	breq	.+68     	; 0x2b98 <malloc+0x66>
    2b54:	40 81       	ld	r20, Z
    2b56:	51 81       	ldd	r21, Z+1	; 0x01
    2b58:	48 17       	cp	r20, r24
    2b5a:	59 07       	cpc	r21, r25
    2b5c:	c0 f0       	brcs	.+48     	; 0x2b8e <malloc+0x5c>
    2b5e:	48 17       	cp	r20, r24
    2b60:	59 07       	cpc	r21, r25
    2b62:	61 f4       	brne	.+24     	; 0x2b7c <malloc+0x4a>
    2b64:	82 81       	ldd	r24, Z+2	; 0x02
    2b66:	93 81       	ldd	r25, Z+3	; 0x03
    2b68:	20 97       	sbiw	r28, 0x00	; 0
    2b6a:	19 f0       	breq	.+6      	; 0x2b72 <malloc+0x40>
    2b6c:	9b 83       	std	Y+3, r25	; 0x03
    2b6e:	8a 83       	std	Y+2, r24	; 0x02
    2b70:	2b c0       	rjmp	.+86     	; 0x2bc8 <malloc+0x96>
    2b72:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <__flp+0x1>
    2b76:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__flp>
    2b7a:	26 c0       	rjmp	.+76     	; 0x2bc8 <malloc+0x96>
    2b7c:	21 15       	cp	r18, r1
    2b7e:	31 05       	cpc	r19, r1
    2b80:	19 f0       	breq	.+6      	; 0x2b88 <malloc+0x56>
    2b82:	42 17       	cp	r20, r18
    2b84:	53 07       	cpc	r21, r19
    2b86:	18 f4       	brcc	.+6      	; 0x2b8e <malloc+0x5c>
    2b88:	9a 01       	movw	r18, r20
    2b8a:	be 01       	movw	r22, r28
    2b8c:	df 01       	movw	r26, r30
    2b8e:	ef 01       	movw	r28, r30
    2b90:	02 80       	ldd	r0, Z+2	; 0x02
    2b92:	f3 81       	ldd	r31, Z+3	; 0x03
    2b94:	e0 2d       	mov	r30, r0
    2b96:	dc cf       	rjmp	.-72     	; 0x2b50 <malloc+0x1e>
    2b98:	21 15       	cp	r18, r1
    2b9a:	31 05       	cpc	r19, r1
    2b9c:	09 f1       	breq	.+66     	; 0x2be0 <malloc+0xae>
    2b9e:	28 1b       	sub	r18, r24
    2ba0:	39 0b       	sbc	r19, r25
    2ba2:	24 30       	cpi	r18, 0x04	; 4
    2ba4:	31 05       	cpc	r19, r1
    2ba6:	90 f4       	brcc	.+36     	; 0x2bcc <malloc+0x9a>
    2ba8:	12 96       	adiw	r26, 0x02	; 2
    2baa:	8d 91       	ld	r24, X+
    2bac:	9c 91       	ld	r25, X
    2bae:	13 97       	sbiw	r26, 0x03	; 3
    2bb0:	61 15       	cp	r22, r1
    2bb2:	71 05       	cpc	r23, r1
    2bb4:	21 f0       	breq	.+8      	; 0x2bbe <malloc+0x8c>
    2bb6:	fb 01       	movw	r30, r22
    2bb8:	93 83       	std	Z+3, r25	; 0x03
    2bba:	82 83       	std	Z+2, r24	; 0x02
    2bbc:	04 c0       	rjmp	.+8      	; 0x2bc6 <malloc+0x94>
    2bbe:	90 93 d1 03 	sts	0x03D1, r25	; 0x8003d1 <__flp+0x1>
    2bc2:	80 93 d0 03 	sts	0x03D0, r24	; 0x8003d0 <__flp>
    2bc6:	fd 01       	movw	r30, r26
    2bc8:	32 96       	adiw	r30, 0x02	; 2
    2bca:	44 c0       	rjmp	.+136    	; 0x2c54 <malloc+0x122>
    2bcc:	fd 01       	movw	r30, r26
    2bce:	e2 0f       	add	r30, r18
    2bd0:	f3 1f       	adc	r31, r19
    2bd2:	81 93       	st	Z+, r24
    2bd4:	91 93       	st	Z+, r25
    2bd6:	22 50       	subi	r18, 0x02	; 2
    2bd8:	31 09       	sbc	r19, r1
    2bda:	2d 93       	st	X+, r18
    2bdc:	3c 93       	st	X, r19
    2bde:	3a c0       	rjmp	.+116    	; 0x2c54 <malloc+0x122>
    2be0:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <__brkval>
    2be4:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <__brkval+0x1>
    2be8:	23 2b       	or	r18, r19
    2bea:	41 f4       	brne	.+16     	; 0x2bfc <malloc+0xca>
    2bec:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    2bf0:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    2bf4:	30 93 cf 03 	sts	0x03CF, r19	; 0x8003cf <__brkval+0x1>
    2bf8:	20 93 ce 03 	sts	0x03CE, r18	; 0x8003ce <__brkval>
    2bfc:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    2c00:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    2c04:	21 15       	cp	r18, r1
    2c06:	31 05       	cpc	r19, r1
    2c08:	41 f4       	brne	.+16     	; 0x2c1a <malloc+0xe8>
    2c0a:	2d b7       	in	r18, 0x3d	; 61
    2c0c:	3e b7       	in	r19, 0x3e	; 62
    2c0e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    2c12:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    2c16:	24 1b       	sub	r18, r20
    2c18:	35 0b       	sbc	r19, r21
    2c1a:	e0 91 ce 03 	lds	r30, 0x03CE	; 0x8003ce <__brkval>
    2c1e:	f0 91 cf 03 	lds	r31, 0x03CF	; 0x8003cf <__brkval+0x1>
    2c22:	e2 17       	cp	r30, r18
    2c24:	f3 07       	cpc	r31, r19
    2c26:	a0 f4       	brcc	.+40     	; 0x2c50 <malloc+0x11e>
    2c28:	2e 1b       	sub	r18, r30
    2c2a:	3f 0b       	sbc	r19, r31
    2c2c:	28 17       	cp	r18, r24
    2c2e:	39 07       	cpc	r19, r25
    2c30:	78 f0       	brcs	.+30     	; 0x2c50 <malloc+0x11e>
    2c32:	ac 01       	movw	r20, r24
    2c34:	4e 5f       	subi	r20, 0xFE	; 254
    2c36:	5f 4f       	sbci	r21, 0xFF	; 255
    2c38:	24 17       	cp	r18, r20
    2c3a:	35 07       	cpc	r19, r21
    2c3c:	48 f0       	brcs	.+18     	; 0x2c50 <malloc+0x11e>
    2c3e:	4e 0f       	add	r20, r30
    2c40:	5f 1f       	adc	r21, r31
    2c42:	50 93 cf 03 	sts	0x03CF, r21	; 0x8003cf <__brkval+0x1>
    2c46:	40 93 ce 03 	sts	0x03CE, r20	; 0x8003ce <__brkval>
    2c4a:	81 93       	st	Z+, r24
    2c4c:	91 93       	st	Z+, r25
    2c4e:	02 c0       	rjmp	.+4      	; 0x2c54 <malloc+0x122>
    2c50:	e0 e0       	ldi	r30, 0x00	; 0
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	cf 01       	movw	r24, r30
    2c56:	df 91       	pop	r29
    2c58:	cf 91       	pop	r28
    2c5a:	08 95       	ret

00002c5c <free>:
    2c5c:	0f 93       	push	r16
    2c5e:	1f 93       	push	r17
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	00 97       	sbiw	r24, 0x00	; 0
    2c66:	09 f4       	brne	.+2      	; 0x2c6a <free+0xe>
    2c68:	8c c0       	rjmp	.+280    	; 0x2d82 <free+0x126>
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	32 97       	sbiw	r30, 0x02	; 2
    2c6e:	13 82       	std	Z+3, r1	; 0x03
    2c70:	12 82       	std	Z+2, r1	; 0x02
    2c72:	00 91 d0 03 	lds	r16, 0x03D0	; 0x8003d0 <__flp>
    2c76:	10 91 d1 03 	lds	r17, 0x03D1	; 0x8003d1 <__flp+0x1>
    2c7a:	01 15       	cp	r16, r1
    2c7c:	11 05       	cpc	r17, r1
    2c7e:	81 f4       	brne	.+32     	; 0x2ca0 <free+0x44>
    2c80:	20 81       	ld	r18, Z
    2c82:	31 81       	ldd	r19, Z+1	; 0x01
    2c84:	82 0f       	add	r24, r18
    2c86:	93 1f       	adc	r25, r19
    2c88:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <__brkval>
    2c8c:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <__brkval+0x1>
    2c90:	28 17       	cp	r18, r24
    2c92:	39 07       	cpc	r19, r25
    2c94:	79 f5       	brne	.+94     	; 0x2cf4 <free+0x98>
    2c96:	f0 93 cf 03 	sts	0x03CF, r31	; 0x8003cf <__brkval+0x1>
    2c9a:	e0 93 ce 03 	sts	0x03CE, r30	; 0x8003ce <__brkval>
    2c9e:	71 c0       	rjmp	.+226    	; 0x2d82 <free+0x126>
    2ca0:	d8 01       	movw	r26, r16
    2ca2:	40 e0       	ldi	r20, 0x00	; 0
    2ca4:	50 e0       	ldi	r21, 0x00	; 0
    2ca6:	ae 17       	cp	r26, r30
    2ca8:	bf 07       	cpc	r27, r31
    2caa:	50 f4       	brcc	.+20     	; 0x2cc0 <free+0x64>
    2cac:	12 96       	adiw	r26, 0x02	; 2
    2cae:	2d 91       	ld	r18, X+
    2cb0:	3c 91       	ld	r19, X
    2cb2:	13 97       	sbiw	r26, 0x03	; 3
    2cb4:	ad 01       	movw	r20, r26
    2cb6:	21 15       	cp	r18, r1
    2cb8:	31 05       	cpc	r19, r1
    2cba:	09 f1       	breq	.+66     	; 0x2cfe <free+0xa2>
    2cbc:	d9 01       	movw	r26, r18
    2cbe:	f3 cf       	rjmp	.-26     	; 0x2ca6 <free+0x4a>
    2cc0:	9d 01       	movw	r18, r26
    2cc2:	da 01       	movw	r26, r20
    2cc4:	33 83       	std	Z+3, r19	; 0x03
    2cc6:	22 83       	std	Z+2, r18	; 0x02
    2cc8:	60 81       	ld	r22, Z
    2cca:	71 81       	ldd	r23, Z+1	; 0x01
    2ccc:	86 0f       	add	r24, r22
    2cce:	97 1f       	adc	r25, r23
    2cd0:	82 17       	cp	r24, r18
    2cd2:	93 07       	cpc	r25, r19
    2cd4:	69 f4       	brne	.+26     	; 0x2cf0 <free+0x94>
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	28 81       	ld	r18, Y
    2cda:	39 81       	ldd	r19, Y+1	; 0x01
    2cdc:	26 0f       	add	r18, r22
    2cde:	37 1f       	adc	r19, r23
    2ce0:	2e 5f       	subi	r18, 0xFE	; 254
    2ce2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ce4:	31 83       	std	Z+1, r19	; 0x01
    2ce6:	20 83       	st	Z, r18
    2ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cea:	9b 81       	ldd	r25, Y+3	; 0x03
    2cec:	93 83       	std	Z+3, r25	; 0x03
    2cee:	82 83       	std	Z+2, r24	; 0x02
    2cf0:	45 2b       	or	r20, r21
    2cf2:	29 f4       	brne	.+10     	; 0x2cfe <free+0xa2>
    2cf4:	f0 93 d1 03 	sts	0x03D1, r31	; 0x8003d1 <__flp+0x1>
    2cf8:	e0 93 d0 03 	sts	0x03D0, r30	; 0x8003d0 <__flp>
    2cfc:	42 c0       	rjmp	.+132    	; 0x2d82 <free+0x126>
    2cfe:	13 96       	adiw	r26, 0x03	; 3
    2d00:	fc 93       	st	X, r31
    2d02:	ee 93       	st	-X, r30
    2d04:	12 97       	sbiw	r26, 0x02	; 2
    2d06:	ed 01       	movw	r28, r26
    2d08:	49 91       	ld	r20, Y+
    2d0a:	59 91       	ld	r21, Y+
    2d0c:	9e 01       	movw	r18, r28
    2d0e:	24 0f       	add	r18, r20
    2d10:	35 1f       	adc	r19, r21
    2d12:	e2 17       	cp	r30, r18
    2d14:	f3 07       	cpc	r31, r19
    2d16:	71 f4       	brne	.+28     	; 0x2d34 <free+0xd8>
    2d18:	80 81       	ld	r24, Z
    2d1a:	91 81       	ldd	r25, Z+1	; 0x01
    2d1c:	84 0f       	add	r24, r20
    2d1e:	95 1f       	adc	r25, r21
    2d20:	02 96       	adiw	r24, 0x02	; 2
    2d22:	11 96       	adiw	r26, 0x01	; 1
    2d24:	9c 93       	st	X, r25
    2d26:	8e 93       	st	-X, r24
    2d28:	82 81       	ldd	r24, Z+2	; 0x02
    2d2a:	93 81       	ldd	r25, Z+3	; 0x03
    2d2c:	13 96       	adiw	r26, 0x03	; 3
    2d2e:	9c 93       	st	X, r25
    2d30:	8e 93       	st	-X, r24
    2d32:	12 97       	sbiw	r26, 0x02	; 2
    2d34:	e0 e0       	ldi	r30, 0x00	; 0
    2d36:	f0 e0       	ldi	r31, 0x00	; 0
    2d38:	d8 01       	movw	r26, r16
    2d3a:	12 96       	adiw	r26, 0x02	; 2
    2d3c:	8d 91       	ld	r24, X+
    2d3e:	9c 91       	ld	r25, X
    2d40:	13 97       	sbiw	r26, 0x03	; 3
    2d42:	00 97       	sbiw	r24, 0x00	; 0
    2d44:	19 f0       	breq	.+6      	; 0x2d4c <free+0xf0>
    2d46:	f8 01       	movw	r30, r16
    2d48:	8c 01       	movw	r16, r24
    2d4a:	f6 cf       	rjmp	.-20     	; 0x2d38 <free+0xdc>
    2d4c:	8d 91       	ld	r24, X+
    2d4e:	9c 91       	ld	r25, X
    2d50:	98 01       	movw	r18, r16
    2d52:	2e 5f       	subi	r18, 0xFE	; 254
    2d54:	3f 4f       	sbci	r19, 0xFF	; 255
    2d56:	82 0f       	add	r24, r18
    2d58:	93 1f       	adc	r25, r19
    2d5a:	20 91 ce 03 	lds	r18, 0x03CE	; 0x8003ce <__brkval>
    2d5e:	30 91 cf 03 	lds	r19, 0x03CF	; 0x8003cf <__brkval+0x1>
    2d62:	28 17       	cp	r18, r24
    2d64:	39 07       	cpc	r19, r25
    2d66:	69 f4       	brne	.+26     	; 0x2d82 <free+0x126>
    2d68:	30 97       	sbiw	r30, 0x00	; 0
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <free+0x11a>
    2d6c:	10 92 d1 03 	sts	0x03D1, r1	; 0x8003d1 <__flp+0x1>
    2d70:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <__flp>
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <free+0x11e>
    2d76:	13 82       	std	Z+3, r1	; 0x03
    2d78:	12 82       	std	Z+2, r1	; 0x02
    2d7a:	10 93 cf 03 	sts	0x03CF, r17	; 0x8003cf <__brkval+0x1>
    2d7e:	00 93 ce 03 	sts	0x03CE, r16	; 0x8003ce <__brkval>
    2d82:	df 91       	pop	r29
    2d84:	cf 91       	pop	r28
    2d86:	1f 91       	pop	r17
    2d88:	0f 91       	pop	r16
    2d8a:	08 95       	ret

00002d8c <memcpy>:
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	dc 01       	movw	r26, r24
    2d90:	02 c0       	rjmp	.+4      	; 0x2d96 <memcpy+0xa>
    2d92:	01 90       	ld	r0, Z+
    2d94:	0d 92       	st	X+, r0
    2d96:	41 50       	subi	r20, 0x01	; 1
    2d98:	50 40       	sbci	r21, 0x00	; 0
    2d9a:	d8 f7       	brcc	.-10     	; 0x2d92 <memcpy+0x6>
    2d9c:	08 95       	ret

00002d9e <memset>:
    2d9e:	dc 01       	movw	r26, r24
    2da0:	01 c0       	rjmp	.+2      	; 0x2da4 <memset+0x6>
    2da2:	6d 93       	st	X+, r22
    2da4:	41 50       	subi	r20, 0x01	; 1
    2da6:	50 40       	sbci	r21, 0x00	; 0
    2da8:	e0 f7       	brcc	.-8      	; 0x2da2 <memset+0x4>
    2daa:	08 95       	ret

00002dac <_exit>:
    2dac:	f8 94       	cli

00002dae <__stop_program>:
    2dae:	ff cf       	rjmp	.-2      	; 0x2dae <__stop_program>
