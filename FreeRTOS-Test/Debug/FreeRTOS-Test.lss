
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000060  00800100  00003d6c  00003e00  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003d6c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000487  00800160  00800160  00003e60  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003e60  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003e90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00003ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00003956  00000000  00000000  000043b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bd0  00000000  00000000  00007d06  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000034c4  00000000  00000000  000088d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000132c  00000000  00000000  0000bd9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001955  00000000  00000000  0000d0c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028fd  00000000  00000000  0000ea1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  0001131a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 24 0c 	jmp	0x1848	; 0x1848 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 49 06 	jmp	0xc92	; 0xc92 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 c0 0d 	jmp	0x1b80	; 0x1b80 <__vector_20>
      54:	0c 94 18 0e 	jmp	0x1c30	; 0x1c30 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <__vector_28>
      74:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	fb 03       	fmulsu	r23, r19
      7e:	04 04       	cpc	r0, r4
      80:	17 04       	cpc	r1, r7
      82:	22 04       	cpc	r2, r2
      84:	35 04       	cpc	r3, r5
      86:	3e 04       	cpc	r3, r14
      88:	51 04       	cpc	r5, r1
      8a:	5c 04       	cpc	r5, r12

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e6       	ldi	r30, 0x6C	; 108
      a0:	fd e3       	ldi	r31, 0x3D	; 61
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a0 36       	cpi	r26, 0x60	; 96
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	a0 e6       	ldi	r26, 0x60	; 96
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a7 3e       	cpi	r26, 0xE7	; 231
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 72 05 	call	0xae4	; 0xae4 <main>
      c2:	0c 94 b4 1e 	jmp	0x3d68	; 0x3d68 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <serial_task>:
	{
		// Maybe something usefiúll could be done her :)
	}
}

void serial_task(void *pvParameters){
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	66 97       	sbiw	r28, 0x16	; 22
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
      de:	9e 8b       	std	Y+22, r25	; 0x16
      e0:	8d 8b       	std	Y+21, r24	; 0x15

	(void) pvParameters;
	
	TickType_t lastWakeTime;
	
	uint8_t state = 0;
      e2:	19 82       	std	Y+1, r1	; 0x01
	uint8_t data = 0;
      e4:	18 8a       	std	Y+16, r1	; 0x10
	const uint8_t flag = 0x61;
      e6:	81 e6       	ldi	r24, 0x61	; 97
      e8:	88 87       	std	Y+8, r24	; 0x08
	const uint8_t esc = 0xff;
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	89 87       	std	Y+9, r24	; 0x09

	msg_byte_t *received_byte = NULL;
      ee:	1b 82       	std	Y+3, r1	; 0x03
      f0:	1a 82       	std	Y+2, r1	; 0x02
	msg_byte_t *head;
	uint8_t count = 0;
      f2:	1e 82       	std	Y+6, r1	; 0x06
	lastWakeTime = xTaskGetTickCount();
      f4:	0e 94 7d 17 	call	0x2efa	; 0x2efa <xTaskGetTickCount>
      f8:	9f 87       	std	Y+15, r25	; 0x0f
      fa:	8e 87       	std	Y+14, r24	; 0x0e
	while (1)
	{
		while(xQueueReceive(_x_com_received_chars_queue, &(data),(TickType_t) 0) ){
      fc:	a0 c0       	rjmp	.+320    	; 0x23e <serial_task+0x174>
			
			switch (state){
      fe:	89 81       	ldd	r24, Y+1	; 0x01
     100:	88 2f       	mov	r24, r24
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	81 30       	cpi	r24, 0x01	; 1
     106:	91 05       	cpc	r25, r1
     108:	71 f0       	breq	.+28     	; 0x126 <serial_task+0x5c>
     10a:	82 30       	cpi	r24, 0x02	; 2
     10c:	91 05       	cpc	r25, r1
     10e:	09 f4       	brne	.+2      	; 0x112 <serial_task+0x48>
     110:	87 c0       	rjmp	.+270    	; 0x220 <serial_task+0x156>
     112:	89 2b       	or	r24, r25
     114:	09 f0       	breq	.+2      	; 0x118 <serial_task+0x4e>
     116:	91 c0       	rjmp	.+290    	; 0x23a <serial_task+0x170>
				case 0:
					if (data == flag){
     118:	98 89       	ldd	r25, Y+16	; 0x10
     11a:	88 85       	ldd	r24, Y+8	; 0x08
     11c:	98 17       	cp	r25, r24
     11e:	11 f4       	brne	.+4      	; 0x124 <serial_task+0x5a>
						state = 1;
     120:	81 e0       	ldi	r24, 0x01	; 1
     122:	89 83       	std	Y+1, r24	; 0x01
					}
					break;
     124:	8c c0       	rjmp	.+280    	; 0x23e <serial_task+0x174>
				case 1:
					if (data == flag){
     126:	98 89       	ldd	r25, Y+16	; 0x10
     128:	88 85       	ldd	r24, Y+8	; 0x08
     12a:	98 17       	cp	r25, r24
     12c:	09 f0       	breq	.+2      	; 0x130 <serial_task+0x66>
     12e:	4e c0       	rjmp	.+156    	; 0x1cc <serial_task+0x102>
     130:	8d b7       	in	r24, 0x3d	; 61
     132:	9e b7       	in	r25, 0x3e	; 62
     134:	ac 01       	movw	r20, r24
						msg_t *received_msg;
						received_msg = (sizeof(msg_t));
     136:	83 e0       	ldi	r24, 0x03	; 3
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	9a 8b       	std	Y+18, r25	; 0x12
     13c:	89 8b       	std	Y+17, r24	; 0x11
						uint8_t bytes[count];
     13e:	2e 81       	ldd	r18, Y+6	; 0x06
     140:	82 2f       	mov	r24, r18
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	01 97       	sbiw	r24, 0x01	; 1
     146:	9b 87       	std	Y+11, r25	; 0x0b
     148:	8a 87       	std	Y+10, r24	; 0x0a
     14a:	82 2f       	mov	r24, r18
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	2d b7       	in	r18, 0x3d	; 61
     150:	3e b7       	in	r19, 0x3e	; 62
     152:	28 1b       	sub	r18, r24
     154:	39 0b       	sbc	r19, r25
     156:	0f b6       	in	r0, 0x3f	; 63
     158:	f8 94       	cli
     15a:	3e bf       	out	0x3e, r19	; 62
     15c:	0f be       	out	0x3f, r0	; 63
     15e:	2d bf       	out	0x3d, r18	; 61
     160:	8d b7       	in	r24, 0x3d	; 61
     162:	9e b7       	in	r25, 0x3e	; 62
     164:	01 96       	adiw	r24, 0x01	; 1
     166:	9d 87       	std	Y+13, r25	; 0x0d
     168:	8c 87       	std	Y+12, r24	; 0x0c
						

						for (uint8_t i; i < count; ++i)
     16a:	17 c0       	rjmp	.+46     	; 0x19a <serial_task+0xd0>
						{
							bytes[i] = head->data;
     16c:	8f 81       	ldd	r24, Y+7	; 0x07
     16e:	88 2f       	mov	r24, r24
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	2c 81       	ldd	r18, Y+4	; 0x04
     174:	3d 81       	ldd	r19, Y+5	; 0x05
     176:	f9 01       	movw	r30, r18
     178:	60 81       	ld	r22, Z
     17a:	2c 85       	ldd	r18, Y+12	; 0x0c
     17c:	3d 85       	ldd	r19, Y+13	; 0x0d
     17e:	82 0f       	add	r24, r18
     180:	93 1f       	adc	r25, r19
     182:	fc 01       	movw	r30, r24
     184:	60 83       	st	Z, r22
							head = head->next;
     186:	8c 81       	ldd	r24, Y+4	; 0x04
     188:	9d 81       	ldd	r25, Y+5	; 0x05
     18a:	fc 01       	movw	r30, r24
     18c:	81 81       	ldd	r24, Z+1	; 0x01
     18e:	92 81       	ldd	r25, Z+2	; 0x02
     190:	9d 83       	std	Y+5, r25	; 0x05
     192:	8c 83       	std	Y+4, r24	; 0x04
						msg_t *received_msg;
						received_msg = (sizeof(msg_t));
						uint8_t bytes[count];
						

						for (uint8_t i; i < count; ++i)
     194:	8f 81       	ldd	r24, Y+7	; 0x07
     196:	8f 5f       	subi	r24, 0xFF	; 255
     198:	8f 83       	std	Y+7, r24	; 0x07
     19a:	9f 81       	ldd	r25, Y+7	; 0x07
     19c:	8e 81       	ldd	r24, Y+6	; 0x06
     19e:	98 17       	cp	r25, r24
     1a0:	28 f3       	brcs	.-54     	; 0x16c <serial_task+0xa2>
						{
							bytes[i] = head->data;
							head = head->next;
						}
						received_msg->data = &bytes;
     1a2:	89 89       	ldd	r24, Y+17	; 0x11
     1a4:	9a 89       	ldd	r25, Y+18	; 0x12
     1a6:	2c 85       	ldd	r18, Y+12	; 0x0c
     1a8:	3d 85       	ldd	r19, Y+13	; 0x0d
     1aa:	fc 01       	movw	r30, r24
     1ac:	31 83       	std	Z+1, r19	; 0x01
     1ae:	20 83       	st	Z, r18
						count = 0;
     1b0:	1e 82       	std	Y+6, r1	; 0x06
						frame = &received_msg;
     1b2:	ce 01       	movw	r24, r28
     1b4:	41 96       	adiw	r24, 0x11	; 17
     1b6:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <frame+0x1>
     1ba:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <frame>

						state = 0;
     1be:	19 82       	std	Y+1, r1	; 0x01
     1c0:	0f b6       	in	r0, 0x3f	; 63
     1c2:	f8 94       	cli
     1c4:	5e bf       	out	0x3e, r21	; 62
     1c6:	0f be       	out	0x3f, r0	; 63
     1c8:	4d bf       	out	0x3d, r20	; 61
     1ca:	29 c0       	rjmp	.+82     	; 0x21e <serial_task+0x154>
					}
					else if (data == esc){
     1cc:	98 89       	ldd	r25, Y+16	; 0x10
     1ce:	89 85       	ldd	r24, Y+9	; 0x09
     1d0:	98 17       	cp	r25, r24
     1d2:	19 f4       	brne	.+6      	; 0x1da <serial_task+0x110>
						state = 2;
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	89 83       	std	Y+1, r24	; 0x01
     1d8:	22 c0       	rjmp	.+68     	; 0x21e <serial_task+0x154>
					}
					else{
						msg_byte_t *incoming;
						incoming = malloc(sizeof(msg_byte_t));
     1da:	83 e0       	ldi	r24, 0x03	; 3
     1dc:	90 e0       	ldi	r25, 0x00	; 0
     1de:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <malloc>
     1e2:	9c 8b       	std	Y+20, r25	; 0x14
     1e4:	8b 8b       	std	Y+19, r24	; 0x13
						incoming->data =data;
     1e6:	8b 89       	ldd	r24, Y+19	; 0x13
     1e8:	9c 89       	ldd	r25, Y+20	; 0x14
     1ea:	28 89       	ldd	r18, Y+16	; 0x10
     1ec:	fc 01       	movw	r30, r24
     1ee:	20 83       	st	Z, r18
						if (count != 0){
     1f0:	8e 81       	ldd	r24, Y+6	; 0x06
     1f2:	88 23       	and	r24, r24
     1f4:	49 f0       	breq	.+18     	; 0x208 <serial_task+0x13e>
							received_byte->next = &incoming;
     1f6:	8a 81       	ldd	r24, Y+2	; 0x02
     1f8:	9b 81       	ldd	r25, Y+3	; 0x03
     1fa:	9e 01       	movw	r18, r28
     1fc:	2d 5e       	subi	r18, 0xED	; 237
     1fe:	3f 4f       	sbci	r19, 0xFF	; 255
     200:	fc 01       	movw	r30, r24
     202:	32 83       	std	Z+2, r19	; 0x02
     204:	21 83       	std	Z+1, r18	; 0x01
     206:	04 c0       	rjmp	.+8      	; 0x210 <serial_task+0x146>
						}
						else
						{
							head = &incoming;
     208:	ce 01       	movw	r24, r28
     20a:	43 96       	adiw	r24, 0x13	; 19
     20c:	9d 83       	std	Y+5, r25	; 0x05
     20e:	8c 83       	std	Y+4, r24	; 0x04
						}
						++count;
     210:	8e 81       	ldd	r24, Y+6	; 0x06
     212:	8f 5f       	subi	r24, 0xFF	; 255
     214:	8e 83       	std	Y+6, r24	; 0x06
						received_byte = &incoming;
     216:	ce 01       	movw	r24, r28
     218:	43 96       	adiw	r24, 0x13	; 19
     21a:	9b 83       	std	Y+3, r25	; 0x03
     21c:	8a 83       	std	Y+2, r24	; 0x02
					}
					break;
     21e:	0f c0       	rjmp	.+30     	; 0x23e <serial_task+0x174>
				case 2:
					xQueueReceive(_x_com_received_chars_queue, &(data),(TickType_t) 0);
     220:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     224:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     228:	be 01       	movw	r22, r28
     22a:	60 5f       	subi	r22, 0xF0	; 240
     22c:	7f 4f       	sbci	r23, 0xFF	; 255
     22e:	20 e0       	ldi	r18, 0x00	; 0
     230:	40 e0       	ldi	r20, 0x00	; 0
     232:	50 e0       	ldi	r21, 0x00	; 0
     234:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
					//save to payload
					break;
     238:	02 c0       	rjmp	.+4      	; 0x23e <serial_task+0x174>
				default:
					state = 0;
     23a:	19 82       	std	Y+1, r1	; 0x01
					break;
     23c:	00 00       	nop
	msg_byte_t *head;
	uint8_t count = 0;
	lastWakeTime = xTaskGetTickCount();
	while (1)
	{
		while(xQueueReceive(_x_com_received_chars_queue, &(data),(TickType_t) 0) ){
     23e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     242:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     246:	be 01       	movw	r22, r28
     248:	60 5f       	subi	r22, 0xF0	; 240
     24a:	7f 4f       	sbci	r23, 0xFF	; 255
     24c:	20 e0       	ldi	r18, 0x00	; 0
     24e:	40 e0       	ldi	r20, 0x00	; 0
     250:	50 e0       	ldi	r21, 0x00	; 0
     252:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
     256:	88 23       	and	r24, r24
     258:	09 f0       	breq	.+2      	; 0x25c <serial_task+0x192>
     25a:	51 cf       	rjmp	.-350    	; 0xfe <serial_task+0x34>
				if (data == 0x62){
					col_value[0] >>= 1;
				}
			}*/
		}
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 20);
     25c:	ce 01       	movw	r24, r28
     25e:	0e 96       	adiw	r24, 0x0e	; 14
     260:	64 e1       	ldi	r22, 0x14	; 20
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vTaskDelayUntil>
	}
     268:	49 cf       	rjmp	.-366    	; 0xfc <serial_task+0x32>

0000026a <echo_task>:

}

void echo_task(void *pvParameters)
{
     26a:	cf 93       	push	r28
     26c:	df 93       	push	r29
     26e:	00 d0       	rcall	.+0      	; 0x270 <echo_task+0x6>
     270:	00 d0       	rcall	.+0      	; 0x272 <echo_task+0x8>
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
     276:	9c 83       	std	Y+4, r25	; 0x04
     278:	8b 83       	std	Y+3, r24	; 0x03
	(void) pvParameters;

	uint8_t data;
	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     27a:	0e 94 7d 17 	call	0x2efa	; 0x2efa <xTaskGetTickCount>
     27e:	9a 83       	std	Y+2, r25	; 0x02
     280:	89 83       	std	Y+1, r24	; 0x01
	while(1)
	{
		if (frame != NULL)
     282:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <frame>
     286:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <frame+0x1>
     28a:	89 2b       	or	r24, r25
     28c:	e9 f0       	breq	.+58     	; 0x2c8 <echo_task+0x5e>
		{
		com_send_bytes((uint8_t *) "hello", 5);
     28e:	65 e0       	ldi	r22, 0x05	; 5
     290:	8c e3       	ldi	r24, 0x3C	; 60
     292:	91 e0       	ldi	r25, 0x01	; 1
     294:	0e 94 7f 06 	call	0xcfe	; 0xcfe <com_send_bytes>
		com_send_bytes(*(frame->data),frame->size);
     298:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <frame>
     29c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <frame+0x1>
     2a0:	fc 01       	movw	r30, r24
     2a2:	22 81       	ldd	r18, Z+2	; 0x02
     2a4:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <frame>
     2a8:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <frame+0x1>
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	91 81       	ldd	r25, Z+1	; 0x01
     2b2:	fc 01       	movw	r30, r24
     2b4:	80 81       	ld	r24, Z
     2b6:	88 2f       	mov	r24, r24
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	62 2f       	mov	r22, r18
     2bc:	0e 94 7f 06 	call	0xcfe	; 0xcfe <com_send_bytes>
		frame = NULL;
     2c0:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <frame+0x1>
     2c4:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <frame>
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     2c8:	68 e2       	ldi	r22, 0x28	; 40
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vTaskDelayUntil>
	}
     2d4:	d6 cf       	rjmp	.-84     	; 0x282 <echo_task+0x18>

000002d6 <move_player>:
	
}

void move_player(uint8_t *position, uint8_t direction){
     2d6:	cf 93       	push	r28
     2d8:	df 93       	push	r29
     2da:	00 d0       	rcall	.+0      	; 0x2dc <move_player+0x6>
     2dc:	00 d0       	rcall	.+0      	; 0x2de <move_player+0x8>
     2de:	1f 92       	push	r1
     2e0:	cd b7       	in	r28, 0x3d	; 61
     2e2:	de b7       	in	r29, 0x3e	; 62
     2e4:	9c 83       	std	Y+4, r25	; 0x04
     2e6:	8b 83       	std	Y+3, r24	; 0x03
     2e8:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	9a 83       	std	Y+2, r25	; 0x02
     2f0:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
     2f2:	8d 81       	ldd	r24, Y+5	; 0x05
     2f4:	88 23       	and	r24, r24
     2f6:	81 f4       	brne	.+32     	; 0x318 <move_player+0x42>
		mask <<= *position;
     2f8:	8b 81       	ldd	r24, Y+3	; 0x03
     2fa:	9c 81       	ldd	r25, Y+4	; 0x04
     2fc:	fc 01       	movw	r30, r24
     2fe:	80 81       	ld	r24, Z
     300:	28 2f       	mov	r18, r24
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	89 81       	ldd	r24, Y+1	; 0x01
     306:	9a 81       	ldd	r25, Y+2	; 0x02
     308:	02 c0       	rjmp	.+4      	; 0x30e <move_player+0x38>
     30a:	88 0f       	add	r24, r24
     30c:	99 1f       	adc	r25, r25
     30e:	2a 95       	dec	r18
     310:	e2 f7       	brpl	.-8      	; 0x30a <move_player+0x34>
     312:	9a 83       	std	Y+2, r25	; 0x02
     314:	89 83       	std	Y+1, r24	; 0x01
     316:	12 c0       	rjmp	.+36     	; 0x33c <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     318:	8b 81       	ldd	r24, Y+3	; 0x03
     31a:	9c 81       	ldd	r25, Y+4	; 0x04
     31c:	fc 01       	movw	r30, r24
     31e:	80 81       	ld	r24, Z
     320:	88 2f       	mov	r24, r24
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	9c 01       	movw	r18, r24
     326:	21 50       	subi	r18, 0x01	; 1
     328:	31 09       	sbc	r19, r1
     32a:	89 81       	ldd	r24, Y+1	; 0x01
     32c:	9a 81       	ldd	r25, Y+2	; 0x02
     32e:	02 c0       	rjmp	.+4      	; 0x334 <move_player+0x5e>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	2a 95       	dec	r18
     336:	e2 f7       	brpl	.-8      	; 0x330 <move_player+0x5a>
     338:	9a 83       	std	Y+2, r25	; 0x02
     33a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     33c:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     340:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	4a e0       	ldi	r20, 0x0A	; 10
     348:	50 e0       	ldi	r21, 0x00	; 0
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
	col_value[0] ^= mask;
     352:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     356:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     35a:	89 81       	ldd	r24, Y+1	; 0x01
     35c:	9a 81       	ldd	r25, Y+2	; 0x02
     35e:	82 27       	eor	r24, r18
     360:	93 27       	eor	r25, r19
     362:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     366:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     36a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     36e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     372:	20 e0       	ldi	r18, 0x00	; 0
     374:	40 e0       	ldi	r20, 0x00	; 0
     376:	50 e0       	ldi	r21, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	70 e0       	ldi	r23, 0x00	; 0
     37c:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
}
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	0f 90       	pop	r0
     38a:	df 91       	pop	r29
     38c:	cf 91       	pop	r28
     38e:	08 95       	ret

00000390 <local_player_task>:

void local_player_task(void *pvParameters)
{
     390:	cf 93       	push	r28
     392:	df 93       	push	r29
     394:	00 d0       	rcall	.+0      	; 0x396 <local_player_task+0x6>
     396:	00 d0       	rcall	.+0      	; 0x398 <local_player_task+0x8>
     398:	cd b7       	in	r28, 0x3d	; 61
     39a:	de b7       	in	r29, 0x3e	; 62
     39c:	9c 83       	std	Y+4, r25	; 0x04
     39e:	8b 83       	std	Y+3, r24	; 0x03
	(void) pvParameters;
	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     3a0:	0e 94 7d 17 	call	0x2efa	; 0x2efa <xTaskGetTickCount>
     3a4:	9a 83       	std	Y+2, r25	; 0x02
     3a6:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     3a8:	86 e2       	ldi	r24, 0x26	; 38
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	fc 01       	movw	r30, r24
     3ae:	80 81       	ld	r24, Z
     3b0:	88 2f       	mov	r24, r24
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	80 74       	andi	r24, 0x40	; 64
     3b6:	99 27       	eor	r25, r25
     3b8:	89 2b       	or	r24, r25
     3ba:	61 f5       	brne	.+88     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     3bc:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     3c0:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     3c4:	18 16       	cp	r1, r24
     3c6:	19 06       	cpc	r1, r25
     3c8:	2c f5       	brge	.+74     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     3ca:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     3ce:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     3d2:	20 e0       	ldi	r18, 0x00	; 0
     3d4:	4a e0       	ldi	r20, 0x0A	; 10
     3d6:	50 e0       	ldi	r21, 0x00	; 0
     3d8:	60 e0       	ldi	r22, 0x00	; 0
     3da:	70 e0       	ldi	r23, 0x00	; 0
     3dc:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
			--player_position;
     3e0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     3e4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     3e8:	01 97       	sbiw	r24, 0x01	; 1
     3ea:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     3ee:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     3f2:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     3f6:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	40 e0       	ldi	r20, 0x00	; 0
     3fe:	50 e0       	ldi	r21, 0x00	; 0
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
			move_player(&player_position, 0);
     408:	60 e0       	ldi	r22, 0x00	; 0
     40a:	8a e0       	ldi	r24, 0x0A	; 10
     40c:	91 e0       	ldi	r25, 0x01	; 1
     40e:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <move_player>
     412:	34 c0       	rjmp	.+104    	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     414:	86 e2       	ldi	r24, 0x26	; 38
     416:	90 e0       	ldi	r25, 0x00	; 0
     418:	fc 01       	movw	r30, r24
     41a:	80 81       	ld	r24, Z
     41c:	88 2f       	mov	r24, r24
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	81 70       	andi	r24, 0x01	; 1
     422:	99 27       	eor	r25, r25
     424:	89 2b       	or	r24, r25
     426:	51 f5       	brne	.+84     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
     428:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     42c:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     430:	08 97       	sbiw	r24, 0x08	; 8
     432:	24 f5       	brge	.+72     	; 0x47c <__FUSE_REGION_LENGTH__+0x7c>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     434:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     438:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	4a e0       	ldi	r20, 0x0A	; 10
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
			++player_position;
     44a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     44e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     452:	01 96       	adiw	r24, 0x01	; 1
     454:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     458:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     45c:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <_player_position_mutex>
     460:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <_player_position_mutex+0x1>
     464:	20 e0       	ldi	r18, 0x00	; 0
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	50 e0       	ldi	r21, 0x00	; 0
     46a:	60 e0       	ldi	r22, 0x00	; 0
     46c:	70 e0       	ldi	r23, 0x00	; 0
     46e:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
			move_player(&player_position, 1);
     472:	61 e0       	ldi	r22, 0x01	; 1
     474:	8a e0       	ldi	r24, 0x0A	; 10
     476:	91 e0       	ldi	r25, 0x01	; 1
     478:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     47c:	68 e2       	ldi	r22, 0x28	; 40
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	ce 01       	movw	r24, r28
     482:	01 96       	adiw	r24, 0x01	; 1
     484:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vTaskDelayUntil>
	}	
     488:	8f cf       	rjmp	.-226    	; 0x3a8 <local_player_task+0x18>

0000048a <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	00 d0       	rcall	.+0      	; 0x490 <bounce+0x6>
     490:	00 d0       	rcall	.+0      	; 0x492 <bounce+0x8>
     492:	00 d0       	rcall	.+0      	; 0x494 <bounce+0xa>
     494:	cd b7       	in	r28, 0x3d	; 61
     496:	de b7       	in	r29, 0x3e	; 62
     498:	9b 83       	std	Y+3, r25	; 0x03
     49a:	8a 83       	std	Y+2, r24	; 0x02
     49c:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     49e:	8a 81       	ldd	r24, Y+2	; 0x02
     4a0:	9b 81       	ldd	r25, Y+3	; 0x03
     4a2:	fc 01       	movw	r30, r24
     4a4:	80 81       	ld	r24, Z
     4a6:	81 70       	andi	r24, 0x01	; 1
     4a8:	88 23       	and	r24, r24
     4aa:	d9 f4       	brne	.+54     	; 0x4e2 <bounce+0x58>
		uint8_t r = rand()%3;
     4ac:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <rand>
     4b0:	23 e0       	ldi	r18, 0x03	; 3
     4b2:	30 e0       	ldi	r19, 0x00	; 0
     4b4:	b9 01       	movw	r22, r18
     4b6:	0e 94 8a 1c 	call	0x3914	; 0x3914 <__divmodhi4>
     4ba:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     4bc:	89 81       	ldd	r24, Y+1	; 0x01
     4be:	8d 5f       	subi	r24, 0xFD	; 253
     4c0:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     4c2:	8a 81       	ldd	r24, Y+2	; 0x02
     4c4:	9b 81       	ldd	r25, Y+3	; 0x03
     4c6:	fc 01       	movw	r30, r24
     4c8:	80 81       	ld	r24, Z
     4ca:	99 81       	ldd	r25, Y+1	; 0x01
     4cc:	89 0f       	add	r24, r25
     4ce:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     4d0:	89 81       	ldd	r24, Y+1	; 0x01
     4d2:	87 70       	andi	r24, 0x07	; 7
     4d4:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     4d6:	8a 81       	ldd	r24, Y+2	; 0x02
     4d8:	9b 81       	ldd	r25, Y+3	; 0x03
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	fc 01       	movw	r30, r24
     4de:	20 83       	st	Z, r18
     4e0:	5e c0       	rjmp	.+188    	; 0x59e <bounce+0x114>
	}
	else{
		if (side == 0){
     4e2:	8c 81       	ldd	r24, Y+4	; 0x04
     4e4:	88 23       	and	r24, r24
     4e6:	71 f5       	brne	.+92     	; 0x544 <bounce+0xba>
			switch (*direction){
     4e8:	8a 81       	ldd	r24, Y+2	; 0x02
     4ea:	9b 81       	ldd	r25, Y+3	; 0x03
     4ec:	fc 01       	movw	r30, r24
     4ee:	80 81       	ld	r24, Z
     4f0:	88 2f       	mov	r24, r24
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	83 30       	cpi	r24, 0x03	; 3
     4f6:	91 05       	cpc	r25, r1
     4f8:	91 f0       	breq	.+36     	; 0x51e <bounce+0x94>
     4fa:	84 30       	cpi	r24, 0x04	; 4
     4fc:	91 05       	cpc	r25, r1
     4fe:	1c f4       	brge	.+6      	; 0x506 <bounce+0x7c>
     500:	01 97       	sbiw	r24, 0x01	; 1
     502:	39 f0       	breq	.+14     	; 0x512 <bounce+0x88>
     504:	4c c0       	rjmp	.+152    	; 0x59e <bounce+0x114>
     506:	85 30       	cpi	r24, 0x05	; 5
     508:	91 05       	cpc	r25, r1
     50a:	79 f0       	breq	.+30     	; 0x52a <bounce+0xa0>
     50c:	07 97       	sbiw	r24, 0x07	; 7
     50e:	99 f0       	breq	.+38     	; 0x536 <bounce+0xac>
     510:	46 c0       	rjmp	.+140    	; 0x59e <bounce+0x114>
				case 1:
				*direction = 3;
     512:	8a 81       	ldd	r24, Y+2	; 0x02
     514:	9b 81       	ldd	r25, Y+3	; 0x03
     516:	23 e0       	ldi	r18, 0x03	; 3
     518:	fc 01       	movw	r30, r24
     51a:	20 83       	st	Z, r18
				break;
     51c:	12 c0       	rjmp	.+36     	; 0x542 <bounce+0xb8>
				case 3:
				*direction = 1;
     51e:	8a 81       	ldd	r24, Y+2	; 0x02
     520:	9b 81       	ldd	r25, Y+3	; 0x03
     522:	21 e0       	ldi	r18, 0x01	; 1
     524:	fc 01       	movw	r30, r24
     526:	20 83       	st	Z, r18
				break;
     528:	0c c0       	rjmp	.+24     	; 0x542 <bounce+0xb8>
				case 5:
				*direction = 7;
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	9b 81       	ldd	r25, Y+3	; 0x03
     52e:	27 e0       	ldi	r18, 0x07	; 7
     530:	fc 01       	movw	r30, r24
     532:	20 83       	st	Z, r18
				break;
     534:	06 c0       	rjmp	.+12     	; 0x542 <bounce+0xb8>
				case 7:
				*direction = 5;
     536:	8a 81       	ldd	r24, Y+2	; 0x02
     538:	9b 81       	ldd	r25, Y+3	; 0x03
     53a:	25 e0       	ldi	r18, 0x05	; 5
     53c:	fc 01       	movw	r30, r24
     53e:	20 83       	st	Z, r18
				break;
     540:	00 00       	nop
     542:	2d c0       	rjmp	.+90     	; 0x59e <bounce+0x114>
			}
		}
		else{
			switch (*direction){
     544:	8a 81       	ldd	r24, Y+2	; 0x02
     546:	9b 81       	ldd	r25, Y+3	; 0x03
     548:	fc 01       	movw	r30, r24
     54a:	80 81       	ld	r24, Z
     54c:	88 2f       	mov	r24, r24
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	83 30       	cpi	r24, 0x03	; 3
     552:	91 05       	cpc	r25, r1
     554:	91 f0       	breq	.+36     	; 0x57a <bounce+0xf0>
     556:	84 30       	cpi	r24, 0x04	; 4
     558:	91 05       	cpc	r25, r1
     55a:	1c f4       	brge	.+6      	; 0x562 <bounce+0xd8>
     55c:	01 97       	sbiw	r24, 0x01	; 1
     55e:	39 f0       	breq	.+14     	; 0x56e <bounce+0xe4>
     560:	1e c0       	rjmp	.+60     	; 0x59e <bounce+0x114>
     562:	85 30       	cpi	r24, 0x05	; 5
     564:	91 05       	cpc	r25, r1
     566:	79 f0       	breq	.+30     	; 0x586 <bounce+0xfc>
     568:	07 97       	sbiw	r24, 0x07	; 7
     56a:	99 f0       	breq	.+38     	; 0x592 <bounce+0x108>
     56c:	18 c0       	rjmp	.+48     	; 0x59e <bounce+0x114>
				case 1:
				*direction = 7;
     56e:	8a 81       	ldd	r24, Y+2	; 0x02
     570:	9b 81       	ldd	r25, Y+3	; 0x03
     572:	27 e0       	ldi	r18, 0x07	; 7
     574:	fc 01       	movw	r30, r24
     576:	20 83       	st	Z, r18
				break;
     578:	12 c0       	rjmp	.+36     	; 0x59e <bounce+0x114>
				case 3:
				*direction = 5;
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	9b 81       	ldd	r25, Y+3	; 0x03
     57e:	25 e0       	ldi	r18, 0x05	; 5
     580:	fc 01       	movw	r30, r24
     582:	20 83       	st	Z, r18
				break;
     584:	0c c0       	rjmp	.+24     	; 0x59e <bounce+0x114>
				case 5:
				*direction = 3;
     586:	8a 81       	ldd	r24, Y+2	; 0x02
     588:	9b 81       	ldd	r25, Y+3	; 0x03
     58a:	23 e0       	ldi	r18, 0x03	; 3
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
				break;
     590:	06 c0       	rjmp	.+12     	; 0x59e <bounce+0x114>
				case 7:
				*direction = 1;
     592:	8a 81       	ldd	r24, Y+2	; 0x02
     594:	9b 81       	ldd	r25, Y+3	; 0x03
     596:	21 e0       	ldi	r18, 0x01	; 1
     598:	fc 01       	movw	r30, r24
     59a:	20 83       	st	Z, r18
				break;
     59c:	00 00       	nop
			}
		}
	}
	
	
}
     59e:	26 96       	adiw	r28, 0x06	; 6
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	de bf       	out	0x3e, r29	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	cd bf       	out	0x3d, r28	; 61
     5aa:	df 91       	pop	r29
     5ac:	cf 91       	pop	r28
     5ae:	08 95       	ret

000005b0 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     5b0:	cf 93       	push	r28
     5b2:	df 93       	push	r29
     5b4:	00 d0       	rcall	.+0      	; 0x5b6 <move_ball+0x6>
     5b6:	00 d0       	rcall	.+0      	; 0x5b8 <move_ball+0x8>
     5b8:	00 d0       	rcall	.+0      	; 0x5ba <move_ball+0xa>
     5ba:	cd b7       	in	r28, 0x3d	; 61
     5bc:	de b7       	in	r29, 0x3e	; 62
     5be:	9c 83       	std	Y+4, r25	; 0x04
     5c0:	8b 83       	std	Y+3, r24	; 0x03
     5c2:	7e 83       	std	Y+6, r23	; 0x06
     5c4:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	01 96       	adiw	r24, 0x01	; 1
     5cc:	fc 01       	movw	r30, r24
     5ce:	80 81       	ld	r24, Z
     5d0:	28 2f       	mov	r18, r24
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	90 e0       	ldi	r25, 0x00	; 0
     5d8:	02 c0       	rjmp	.+4      	; 0x5de <move_ball+0x2e>
     5da:	88 0f       	add	r24, r24
     5dc:	99 1f       	adc	r25, r25
     5de:	2a 95       	dec	r18
     5e0:	e2 f7       	brpl	.-8      	; 0x5da <move_ball+0x2a>
     5e2:	9a 83       	std	Y+2, r25	; 0x02
     5e4:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     5e6:	89 81       	ldd	r24, Y+1	; 0x01
     5e8:	9a 81       	ldd	r25, Y+2	; 0x02
     5ea:	80 95       	com	r24
     5ec:	90 95       	com	r25
     5ee:	9a 83       	std	Y+2, r25	; 0x02
     5f0:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     5f2:	8b 81       	ldd	r24, Y+3	; 0x03
     5f4:	9c 81       	ldd	r25, Y+4	; 0x04
     5f6:	fc 01       	movw	r30, r24
     5f8:	80 81       	ld	r24, Z
     5fa:	88 23       	and	r24, r24
     5fc:	a9 f5       	brne	.+106    	; 0x668 <move_ball+0xb8>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     5fe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     602:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     606:	20 e0       	ldi	r18, 0x00	; 0
     608:	4a e0       	ldi	r20, 0x0A	; 10
     60a:	50 e0       	ldi	r21, 0x00	; 0
     60c:	60 e0       	ldi	r22, 0x00	; 0
     60e:	70 e0       	ldi	r23, 0x00	; 0
     610:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	88 2f       	mov	r24, r24
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	2b 81       	ldd	r18, Y+3	; 0x03
     622:	3c 81       	ldd	r19, Y+4	; 0x04
     624:	f9 01       	movw	r30, r18
     626:	20 81       	ld	r18, Z
     628:	22 2f       	mov	r18, r18
     62a:	30 e0       	ldi	r19, 0x00	; 0
     62c:	22 0f       	add	r18, r18
     62e:	33 1f       	adc	r19, r19
     630:	24 5f       	subi	r18, 0xF4	; 244
     632:	3e 4f       	sbci	r19, 0xFE	; 254
     634:	f9 01       	movw	r30, r18
     636:	40 81       	ld	r20, Z
     638:	51 81       	ldd	r21, Z+1	; 0x01
     63a:	29 81       	ldd	r18, Y+1	; 0x01
     63c:	3a 81       	ldd	r19, Y+2	; 0x02
     63e:	24 23       	and	r18, r20
     640:	35 23       	and	r19, r21
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	84 5f       	subi	r24, 0xF4	; 244
     648:	9e 4f       	sbci	r25, 0xFE	; 254
     64a:	fc 01       	movw	r30, r24
     64c:	31 83       	std	Z+1, r19	; 0x01
     64e:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     650:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     654:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	40 e0       	ldi	r20, 0x00	; 0
     65c:	50 e0       	ldi	r21, 0x00	; 0
     65e:	60 e0       	ldi	r22, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
     666:	1e c0       	rjmp	.+60     	; 0x6a4 <move_ball+0xf4>
	}
	else{
		col_value[current[0]] &= mask;
     668:	8b 81       	ldd	r24, Y+3	; 0x03
     66a:	9c 81       	ldd	r25, Y+4	; 0x04
     66c:	fc 01       	movw	r30, r24
     66e:	80 81       	ld	r24, Z
     670:	88 2f       	mov	r24, r24
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	2b 81       	ldd	r18, Y+3	; 0x03
     676:	3c 81       	ldd	r19, Y+4	; 0x04
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	22 2f       	mov	r18, r18
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	22 0f       	add	r18, r18
     682:	33 1f       	adc	r19, r19
     684:	24 5f       	subi	r18, 0xF4	; 244
     686:	3e 4f       	sbci	r19, 0xFE	; 254
     688:	f9 01       	movw	r30, r18
     68a:	40 81       	ld	r20, Z
     68c:	51 81       	ldd	r21, Z+1	; 0x01
     68e:	29 81       	ldd	r18, Y+1	; 0x01
     690:	3a 81       	ldd	r19, Y+2	; 0x02
     692:	24 23       	and	r18, r20
     694:	35 23       	and	r19, r21
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	84 5f       	subi	r24, 0xF4	; 244
     69c:	9e 4f       	sbci	r25, 0xFE	; 254
     69e:	fc 01       	movw	r30, r24
     6a0:	31 83       	std	Z+1, r19	; 0x01
     6a2:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     6a4:	8d 81       	ldd	r24, Y+5	; 0x05
     6a6:	9e 81       	ldd	r25, Y+6	; 0x06
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 81       	ld	r18, Z
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
	current[1] = next[1];
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	01 96       	adiw	r24, 0x01	; 1
     6ba:	2d 81       	ldd	r18, Y+5	; 0x05
     6bc:	3e 81       	ldd	r19, Y+6	; 0x06
     6be:	f9 01       	movw	r30, r18
     6c0:	21 81       	ldd	r18, Z+1	; 0x01
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	fc 01       	movw	r30, r24
     6ce:	80 81       	ld	r24, Z
     6d0:	28 2f       	mov	r18, r24
     6d2:	30 e0       	ldi	r19, 0x00	; 0
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	02 c0       	rjmp	.+4      	; 0x6de <move_ball+0x12e>
     6da:	88 0f       	add	r24, r24
     6dc:	99 1f       	adc	r25, r25
     6de:	2a 95       	dec	r18
     6e0:	e2 f7       	brpl	.-8      	; 0x6da <move_ball+0x12a>
     6e2:	9a 83       	std	Y+2, r25	; 0x02
     6e4:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     6e6:	8b 81       	ldd	r24, Y+3	; 0x03
     6e8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ea:	fc 01       	movw	r30, r24
     6ec:	80 81       	ld	r24, Z
     6ee:	88 23       	and	r24, r24
     6f0:	a9 f5       	brne	.+106    	; 0x75c <move_ball+0x1ac>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     6f2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     6f6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     6fa:	20 e0       	ldi	r18, 0x00	; 0
     6fc:	4a e0       	ldi	r20, 0x0A	; 10
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	60 e0       	ldi	r22, 0x00	; 0
     702:	70 e0       	ldi	r23, 0x00	; 0
     704:	0e 94 a0 11 	call	0x2340	; 0x2340 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     708:	8b 81       	ldd	r24, Y+3	; 0x03
     70a:	9c 81       	ldd	r25, Y+4	; 0x04
     70c:	fc 01       	movw	r30, r24
     70e:	80 81       	ld	r24, Z
     710:	88 2f       	mov	r24, r24
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	2b 81       	ldd	r18, Y+3	; 0x03
     716:	3c 81       	ldd	r19, Y+4	; 0x04
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	22 2f       	mov	r18, r18
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	22 0f       	add	r18, r18
     722:	33 1f       	adc	r19, r19
     724:	24 5f       	subi	r18, 0xF4	; 244
     726:	3e 4f       	sbci	r19, 0xFE	; 254
     728:	f9 01       	movw	r30, r18
     72a:	40 81       	ld	r20, Z
     72c:	51 81       	ldd	r21, Z+1	; 0x01
     72e:	29 81       	ldd	r18, Y+1	; 0x01
     730:	3a 81       	ldd	r19, Y+2	; 0x02
     732:	24 2b       	or	r18, r20
     734:	35 2b       	or	r19, r21
     736:	88 0f       	add	r24, r24
     738:	99 1f       	adc	r25, r25
     73a:	84 5f       	subi	r24, 0xF4	; 244
     73c:	9e 4f       	sbci	r25, 0xFE	; 254
     73e:	fc 01       	movw	r30, r24
     740:	31 83       	std	Z+1, r19	; 0x01
     742:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     744:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <_col_0_mutex>
     748:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <_col_0_mutex+0x1>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	50 e0       	ldi	r21, 0x00	; 0
     752:	60 e0       	ldi	r22, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
     75a:	1e c0       	rjmp	.+60     	; 0x798 <move_ball+0x1e8>
	}
	else{
		col_value[current[0]] |= mask;
     75c:	8b 81       	ldd	r24, Y+3	; 0x03
     75e:	9c 81       	ldd	r25, Y+4	; 0x04
     760:	fc 01       	movw	r30, r24
     762:	80 81       	ld	r24, Z
     764:	88 2f       	mov	r24, r24
     766:	90 e0       	ldi	r25, 0x00	; 0
     768:	2b 81       	ldd	r18, Y+3	; 0x03
     76a:	3c 81       	ldd	r19, Y+4	; 0x04
     76c:	f9 01       	movw	r30, r18
     76e:	20 81       	ld	r18, Z
     770:	22 2f       	mov	r18, r18
     772:	30 e0       	ldi	r19, 0x00	; 0
     774:	22 0f       	add	r18, r18
     776:	33 1f       	adc	r19, r19
     778:	24 5f       	subi	r18, 0xF4	; 244
     77a:	3e 4f       	sbci	r19, 0xFE	; 254
     77c:	f9 01       	movw	r30, r18
     77e:	40 81       	ld	r20, Z
     780:	51 81       	ldd	r21, Z+1	; 0x01
     782:	29 81       	ldd	r18, Y+1	; 0x01
     784:	3a 81       	ldd	r19, Y+2	; 0x02
     786:	24 2b       	or	r18, r20
     788:	35 2b       	or	r19, r21
     78a:	88 0f       	add	r24, r24
     78c:	99 1f       	adc	r25, r25
     78e:	84 5f       	subi	r24, 0xF4	; 244
     790:	9e 4f       	sbci	r25, 0xFE	; 254
     792:	fc 01       	movw	r30, r24
     794:	31 83       	std	Z+1, r19	; 0x01
     796:	20 83       	st	Z, r18
	}

	
}
     798:	26 96       	adiw	r28, 0x06	; 6
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	df 91       	pop	r29
     7a6:	cf 91       	pop	r28
     7a8:	08 95       	ret

000007aa <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	00 d0       	rcall	.+0      	; 0x7b0 <calc_next+0x6>
     7b0:	00 d0       	rcall	.+0      	; 0x7b2 <calc_next+0x8>
     7b2:	00 d0       	rcall	.+0      	; 0x7b4 <calc_next+0xa>
     7b4:	cd b7       	in	r28, 0x3d	; 61
     7b6:	de b7       	in	r29, 0x3e	; 62
     7b8:	9a 83       	std	Y+2, r25	; 0x02
     7ba:	89 83       	std	Y+1, r24	; 0x01
     7bc:	7c 83       	std	Y+4, r23	; 0x04
     7be:	6b 83       	std	Y+3, r22	; 0x03
     7c0:	5e 83       	std	Y+6, r21	; 0x06
     7c2:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     7c4:	8d 81       	ldd	r24, Y+5	; 0x05
     7c6:	9e 81       	ldd	r25, Y+6	; 0x06
     7c8:	fc 01       	movw	r30, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	88 2f       	mov	r24, r24
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	09 2e       	mov	r0, r25
     7d2:	00 0c       	add	r0, r0
     7d4:	aa 0b       	sbc	r26, r26
     7d6:	bb 0b       	sbc	r27, r27
     7d8:	40 e0       	ldi	r20, 0x00	; 0
     7da:	50 e0       	ldi	r21, 0x00	; 0
     7dc:	27 e0       	ldi	r18, 0x07	; 7
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	84 1b       	sub	r24, r20
     7e2:	95 0b       	sbc	r25, r21
     7e4:	28 17       	cp	r18, r24
     7e6:	39 07       	cpc	r19, r25
     7e8:	08 f4       	brcc	.+2      	; 0x7ec <calc_next+0x42>
     7ea:	79 c0       	rjmp	.+242    	; 0x8de <calc_next+0x134>
     7ec:	82 5c       	subi	r24, 0xC2	; 194
     7ee:	9f 4f       	sbci	r25, 0xFF	; 255
     7f0:	fc 01       	movw	r30, r24
     7f2:	0c 94 c0 1c 	jmp	0x3980	; 0x3980 <__tablejump2__>
	{
		case 0:
			--next[1];
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	9c 81       	ldd	r25, Y+4	; 0x04
     7fa:	01 96       	adiw	r24, 0x01	; 1
     7fc:	fc 01       	movw	r30, r24
     7fe:	20 81       	ld	r18, Z
     800:	21 50       	subi	r18, 0x01	; 1
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
			break;
     806:	6b c0       	rjmp	.+214    	; 0x8de <calc_next+0x134>
		case 1:
		++next[0];
     808:	8b 81       	ldd	r24, Y+3	; 0x03
     80a:	9c 81       	ldd	r25, Y+4	; 0x04
     80c:	fc 01       	movw	r30, r24
     80e:	80 81       	ld	r24, Z
     810:	21 e0       	ldi	r18, 0x01	; 1
     812:	28 0f       	add	r18, r24
     814:	8b 81       	ldd	r24, Y+3	; 0x03
     816:	9c 81       	ldd	r25, Y+4	; 0x04
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
		--next[1];
     81c:	8b 81       	ldd	r24, Y+3	; 0x03
     81e:	9c 81       	ldd	r25, Y+4	; 0x04
     820:	01 96       	adiw	r24, 0x01	; 1
     822:	fc 01       	movw	r30, r24
     824:	20 81       	ld	r18, Z
     826:	21 50       	subi	r18, 0x01	; 1
     828:	fc 01       	movw	r30, r24
     82a:	20 83       	st	Z, r18
		break;
     82c:	58 c0       	rjmp	.+176    	; 0x8de <calc_next+0x134>
		case 2:
		++next[0];
     82e:	8b 81       	ldd	r24, Y+3	; 0x03
     830:	9c 81       	ldd	r25, Y+4	; 0x04
     832:	fc 01       	movw	r30, r24
     834:	80 81       	ld	r24, Z
     836:	21 e0       	ldi	r18, 0x01	; 1
     838:	28 0f       	add	r18, r24
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	9c 81       	ldd	r25, Y+4	; 0x04
     83e:	fc 01       	movw	r30, r24
     840:	20 83       	st	Z, r18
		break;
     842:	4d c0       	rjmp	.+154    	; 0x8de <calc_next+0x134>
		case 3:
		++next[0];
     844:	8b 81       	ldd	r24, Y+3	; 0x03
     846:	9c 81       	ldd	r25, Y+4	; 0x04
     848:	fc 01       	movw	r30, r24
     84a:	80 81       	ld	r24, Z
     84c:	21 e0       	ldi	r18, 0x01	; 1
     84e:	28 0f       	add	r18, r24
     850:	8b 81       	ldd	r24, Y+3	; 0x03
     852:	9c 81       	ldd	r25, Y+4	; 0x04
     854:	fc 01       	movw	r30, r24
     856:	20 83       	st	Z, r18
		++next[1];
     858:	8b 81       	ldd	r24, Y+3	; 0x03
     85a:	9c 81       	ldd	r25, Y+4	; 0x04
     85c:	01 96       	adiw	r24, 0x01	; 1
     85e:	fc 01       	movw	r30, r24
     860:	20 81       	ld	r18, Z
     862:	2f 5f       	subi	r18, 0xFF	; 255
     864:	fc 01       	movw	r30, r24
     866:	20 83       	st	Z, r18
		break;
     868:	3a c0       	rjmp	.+116    	; 0x8de <calc_next+0x134>
		case 4:
		++next[1];
     86a:	8b 81       	ldd	r24, Y+3	; 0x03
     86c:	9c 81       	ldd	r25, Y+4	; 0x04
     86e:	01 96       	adiw	r24, 0x01	; 1
     870:	fc 01       	movw	r30, r24
     872:	20 81       	ld	r18, Z
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	fc 01       	movw	r30, r24
     878:	20 83       	st	Z, r18
		break;
     87a:	31 c0       	rjmp	.+98     	; 0x8de <calc_next+0x134>
		case 5:
		--next[0];
     87c:	8b 81       	ldd	r24, Y+3	; 0x03
     87e:	9c 81       	ldd	r25, Y+4	; 0x04
     880:	fc 01       	movw	r30, r24
     882:	80 81       	ld	r24, Z
     884:	2f ef       	ldi	r18, 0xFF	; 255
     886:	28 0f       	add	r18, r24
     888:	8b 81       	ldd	r24, Y+3	; 0x03
     88a:	9c 81       	ldd	r25, Y+4	; 0x04
     88c:	fc 01       	movw	r30, r24
     88e:	20 83       	st	Z, r18
		++next[1];
     890:	8b 81       	ldd	r24, Y+3	; 0x03
     892:	9c 81       	ldd	r25, Y+4	; 0x04
     894:	01 96       	adiw	r24, 0x01	; 1
     896:	fc 01       	movw	r30, r24
     898:	20 81       	ld	r18, Z
     89a:	2f 5f       	subi	r18, 0xFF	; 255
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
		break;
     8a0:	1e c0       	rjmp	.+60     	; 0x8de <calc_next+0x134>
		case 6:
		--next[0];
     8a2:	8b 81       	ldd	r24, Y+3	; 0x03
     8a4:	9c 81       	ldd	r25, Y+4	; 0x04
     8a6:	fc 01       	movw	r30, r24
     8a8:	80 81       	ld	r24, Z
     8aa:	2f ef       	ldi	r18, 0xFF	; 255
     8ac:	28 0f       	add	r18, r24
     8ae:	8b 81       	ldd	r24, Y+3	; 0x03
     8b0:	9c 81       	ldd	r25, Y+4	; 0x04
     8b2:	fc 01       	movw	r30, r24
     8b4:	20 83       	st	Z, r18
		break;
     8b6:	13 c0       	rjmp	.+38     	; 0x8de <calc_next+0x134>
		case 7:
		--next[0];
     8b8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ba:	9c 81       	ldd	r25, Y+4	; 0x04
     8bc:	fc 01       	movw	r30, r24
     8be:	80 81       	ld	r24, Z
     8c0:	2f ef       	ldi	r18, 0xFF	; 255
     8c2:	28 0f       	add	r18, r24
     8c4:	8b 81       	ldd	r24, Y+3	; 0x03
     8c6:	9c 81       	ldd	r25, Y+4	; 0x04
     8c8:	fc 01       	movw	r30, r24
     8ca:	20 83       	st	Z, r18
		--next[1];
     8cc:	8b 81       	ldd	r24, Y+3	; 0x03
     8ce:	9c 81       	ldd	r25, Y+4	; 0x04
     8d0:	01 96       	adiw	r24, 0x01	; 1
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 81       	ld	r18, Z
     8d6:	21 50       	subi	r18, 0x01	; 1
     8d8:	fc 01       	movw	r30, r24
     8da:	20 83       	st	Z, r18
		break;
     8dc:	00 00       	nop
	}
	
}
     8de:	26 96       	adiw	r28, 0x06	; 6
     8e0:	0f b6       	in	r0, 0x3f	; 63
     8e2:	f8 94       	cli
     8e4:	de bf       	out	0x3e, r29	; 62
     8e6:	0f be       	out	0x3f, r0	; 63
     8e8:	cd bf       	out	0x3d, r28	; 61
     8ea:	df 91       	pop	r29
     8ec:	cf 91       	pop	r28
     8ee:	08 95       	ret

000008f0 <ball_task>:

void ball_task(void *pvParameters)
{
     8f0:	cf 93       	push	r28
     8f2:	df 93       	push	r29
     8f4:	cd b7       	in	r28, 0x3d	; 61
     8f6:	de b7       	in	r29, 0x3e	; 62
     8f8:	2a 97       	sbiw	r28, 0x0a	; 10
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	9a 87       	std	Y+10, r25	; 0x0a
     906:	89 87       	std	Y+9, r24	; 0x09
	(void) pvParameters;
	TickType_t lastWakeTime;
	uint8_t pos[2] = {7, 5};
     908:	87 e0       	ldi	r24, 0x07	; 7
     90a:	8c 83       	std	Y+4, r24	; 0x04
     90c:	85 e0       	ldi	r24, 0x05	; 5
     90e:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t direction = 0;
     910:	1e 82       	std	Y+6, r1	; 0x06
	lastWakeTime = xTaskGetTickCount();
     912:	0e 94 7d 17 	call	0x2efa	; 0x2efa <xTaskGetTickCount>
     916:	9b 83       	std	Y+3, r25	; 0x03
     918:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     91a:	8c 81       	ldd	r24, Y+4	; 0x04
     91c:	8f 83       	std	Y+7, r24	; 0x07
     91e:	8d 81       	ldd	r24, Y+5	; 0x05
     920:	88 87       	std	Y+8, r24	; 0x08
		uint8_t is_bounced = 1;
     922:	81 e0       	ldi	r24, 0x01	; 1
     924:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     926:	45 c0       	rjmp	.+138    	; 0x9b2 <__stack+0xb3>
		{	
			is_bounced = 0;
     928:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     92a:	ae 01       	movw	r20, r28
     92c:	4a 5f       	subi	r20, 0xFA	; 250
     92e:	5f 4f       	sbci	r21, 0xFF	; 255
     930:	9e 01       	movw	r18, r28
     932:	29 5f       	subi	r18, 0xF9	; 249
     934:	3f 4f       	sbci	r19, 0xFF	; 255
     936:	ce 01       	movw	r24, r28
     938:	04 96       	adiw	r24, 0x04	; 4
     93a:	b9 01       	movw	r22, r18
     93c:	0e 94 d5 03 	call	0x7aa	; 0x7aa <calc_next>
			
			if (next[0] > 12){
     940:	8f 81       	ldd	r24, Y+7	; 0x07
     942:	8d 30       	cpi	r24, 0x0D	; 13
     944:	30 f0       	brcs	.+12     	; 0x952 <__stack+0x53>
				bounce(&direction, 1);
     946:	ce 01       	movw	r24, r28
     948:	06 96       	adiw	r24, 0x06	; 6
     94a:	61 e0       	ldi	r22, 0x01	; 1
     94c:	0e 94 45 02 	call	0x48a	; 0x48a <bounce>
     950:	30 c0       	rjmp	.+96     	; 0x9b2 <__stack+0xb3>
			}
			else if ( next[1] > 9){
     952:	88 85       	ldd	r24, Y+8	; 0x08
     954:	8a 30       	cpi	r24, 0x0A	; 10
     956:	30 f0       	brcs	.+12     	; 0x964 <__stack+0x65>
				bounce(&direction, 0);
     958:	ce 01       	movw	r24, r28
     95a:	06 96       	adiw	r24, 0x06	; 6
     95c:	60 e0       	ldi	r22, 0x00	; 0
     95e:	0e 94 45 02 	call	0x48a	; 0x48a <bounce>
     962:	27 c0       	rjmp	.+78     	; 0x9b2 <__stack+0xb3>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     964:	8f 81       	ldd	r24, Y+7	; 0x07
     966:	88 23       	and	r24, r24
     968:	d9 f4       	brne	.+54     	; 0x9a0 <__stack+0xa1>
     96a:	88 85       	ldd	r24, Y+8	; 0x08
     96c:	28 2f       	mov	r18, r24
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     974:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     978:	28 17       	cp	r18, r24
     97a:	39 07       	cpc	r19, r25
     97c:	59 f0       	breq	.+22     	; 0x994 <__stack+0x95>
     97e:	88 85       	ldd	r24, Y+8	; 0x08
     980:	28 2f       	mov	r18, r24
     982:	30 e0       	ldi	r19, 0x00	; 0
     984:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     988:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	28 17       	cp	r18, r24
     990:	39 07       	cpc	r19, r25
     992:	31 f4       	brne	.+12     	; 0x9a0 <__stack+0xa1>
				bounce(&direction, 1);
     994:	ce 01       	movw	r24, r28
     996:	06 96       	adiw	r24, 0x06	; 6
     998:	61 e0       	ldi	r22, 0x01	; 1
     99a:	0e 94 45 02 	call	0x48a	; 0x48a <bounce>
     99e:	09 c0       	rjmp	.+18     	; 0x9b2 <__stack+0xb3>
			}
			else{
				move_ball(pos, next);
     9a0:	9e 01       	movw	r18, r28
     9a2:	29 5f       	subi	r18, 0xF9	; 249
     9a4:	3f 4f       	sbci	r19, 0xFF	; 255
     9a6:	ce 01       	movw	r24, r28
     9a8:	04 96       	adiw	r24, 0x04	; 4
     9aa:	b9 01       	movw	r22, r18
     9ac:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <move_ball>
				is_bounced = 0;
     9b0:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     9b2:	89 81       	ldd	r24, Y+1	; 0x01
     9b4:	88 23       	and	r24, r24
     9b6:	09 f0       	breq	.+2      	; 0x9ba <__stack+0xbb>
     9b8:	b7 cf       	rjmp	.-146    	; 0x928 <__stack+0x29>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 80);
     9ba:	ce 01       	movw	r24, r28
     9bc:	02 96       	adiw	r24, 0x02	; 2
     9be:	60 e5       	ldi	r22, 0x50	; 80
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 2d 16 	call	0x2c5a	; 0x2c5a <vTaskDelayUntil>
	}
     9c6:	a9 cf       	rjmp	.-174    	; 0x91a <__stack+0x1b>

000009c8 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     9c8:	cf 93       	push	r28
     9ca:	df 93       	push	r29
     9cc:	cd b7       	in	r28, 0x3d	; 61
     9ce:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     9d0:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <col_index>
     9d4:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <col_index+0x1>
     9d8:	89 2b       	or	r24, r25
     9da:	49 f4       	brne	.+18     	; 0x9ee <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     9dc:	8b e2       	ldi	r24, 0x2B	; 43
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	2b e2       	ldi	r18, 0x2B	; 43
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	f9 01       	movw	r30, r18
     9e6:	20 81       	ld	r18, Z
     9e8:	24 60       	ori	r18, 0x04	; 4
     9ea:	fc 01       	movw	r30, r24
     9ec:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     9ee:	8b e2       	ldi	r24, 0x2B	; 43
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	2b e2       	ldi	r18, 0x2B	; 43
     9f4:	30 e0       	ldi	r19, 0x00	; 0
     9f6:	f9 01       	movw	r30, r18
     9f8:	20 81       	ld	r18, Z
     9fa:	20 62       	ori	r18, 0x20	; 32
     9fc:	fc 01       	movw	r30, r24
     9fe:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     a00:	8b e2       	ldi	r24, 0x2B	; 43
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	2b e2       	ldi	r18, 0x2B	; 43
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	f9 01       	movw	r30, r18
     a0a:	20 81       	ld	r18, Z
     a0c:	2f 7d       	andi	r18, 0xDF	; 223
     a0e:	fc 01       	movw	r30, r24
     a10:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     a12:	8b e2       	ldi	r24, 0x2B	; 43
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	2b e2       	ldi	r18, 0x2B	; 43
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	f9 01       	movw	r30, r18
     a1c:	20 81       	ld	r18, Z
     a1e:	20 61       	ori	r18, 0x10	; 16
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     a24:	8b e2       	ldi	r24, 0x2B	; 43
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	2b e2       	ldi	r18, 0x2B	; 43
     a2a:	30 e0       	ldi	r19, 0x00	; 0
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	2f 7e       	andi	r18, 0xEF	; 239
     a32:	fc 01       	movw	r30, r24
     a34:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     a36:	82 e2       	ldi	r24, 0x22	; 34
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <col_index>
     a3e:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <col_index+0x1>
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	24 5f       	subi	r18, 0xF4	; 244
     a48:	3e 4f       	sbci	r19, 0xFE	; 254
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	31 81       	ldd	r19, Z+1	; 0x01
     a50:	20 95       	com	r18
     a52:	fc 01       	movw	r30, r24
     a54:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     a56:	85 e2       	ldi	r24, 0x25	; 37
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	25 e2       	ldi	r18, 0x25	; 37
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	23 60       	ori	r18, 0x03	; 3
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     a68:	85 e2       	ldi	r24, 0x25	; 37
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	25 e2       	ldi	r18, 0x25	; 37
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	40 81       	ld	r20, Z
     a74:	20 91 66 01 	lds	r18, 0x0166	; 0x800166 <col_index>
     a78:	30 91 67 01 	lds	r19, 0x0167	; 0x800167 <col_index+0x1>
     a7c:	22 0f       	add	r18, r18
     a7e:	33 1f       	adc	r19, r19
     a80:	24 5f       	subi	r18, 0xF4	; 244
     a82:	3e 4f       	sbci	r19, 0xFE	; 254
     a84:	f9 01       	movw	r30, r18
     a86:	20 81       	ld	r18, Z
     a88:	31 81       	ldd	r19, Z+1	; 0x01
     a8a:	23 2f       	mov	r18, r19
     a8c:	33 27       	eor	r19, r19
     a8e:	23 70       	andi	r18, 0x03	; 3
     a90:	20 95       	com	r18
     a92:	24 23       	and	r18, r20
     a94:	fc 01       	movw	r30, r24
     a96:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     a98:	8b e2       	ldi	r24, 0x2B	; 43
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	2b e2       	ldi	r18, 0x2B	; 43
     a9e:	30 e0       	ldi	r19, 0x00	; 0
     aa0:	f9 01       	movw	r30, r18
     aa2:	20 81       	ld	r18, Z
     aa4:	2b 7f       	andi	r18, 0xFB	; 251
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18

	++col_index;
     aaa:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <col_index>
     aae:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <col_index+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <col_index+0x1>
     ab8:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <col_index>
	if (col_index > 13){
     abc:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <col_index>
     ac0:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <col_index+0x1>
     ac4:	0e 97       	sbiw	r24, 0x0e	; 14
     ac6:	24 f0       	brlt	.+8      	; 0xad0 <handle_display+0x108>
		col_index = 0;
     ac8:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <col_index+0x1>
     acc:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <col_index>
	}

}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     ad6:	cf 93       	push	r28
     ad8:	df 93       	push	r29
     ada:	cd b7       	in	r28, 0x3d	; 61
     adc:	de b7       	in	r29, 0x3e	; 62
	//
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	08 95       	ret

00000ae4 <main>:

//-----------------------------------------
int main(void)
{
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
     aee:	cd b7       	in	r28, 0x3d	; 61
     af0:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     af2:	0e 94 98 06 	call	0xd30	; 0xd30 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     af6:	8b e2       	ldi	r24, 0x2B	; 43
     af8:	90 e0       	ldi	r25, 0x00	; 0
     afa:	2b e2       	ldi	r18, 0x2B	; 43
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	f9 01       	movw	r30, r18
     b00:	20 81       	ld	r18, Z
     b02:	2f 7b       	andi	r18, 0xBF	; 191
     b04:	fc 01       	movw	r30, r24
     b06:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     b08:	8e e1       	ldi	r24, 0x1E	; 30
     b0a:	40 e0       	ldi	r20, 0x00	; 0
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <xQueueGenericCreate>
     b12:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     b16:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     b1a:	81 e0       	ldi	r24, 0x01	; 1
     b1c:	0e 94 6f 10 	call	0x20de	; 0x20de <xQueueCreateMutex>
     b20:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <_col_0_mutex+0x1>
     b24:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     b28:	81 e0       	ldi	r24, 0x01	; 1
     b2a:	0e 94 6f 10 	call	0x20de	; 0x20de <xQueueCreateMutex>
     b2e:	90 93 65 01 	sts	0x0165, r25	; 0x800165 <_player_position_mutex+0x1>
     b32:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     b36:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     b3a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     b3e:	0e 94 05 06 	call	0xc0a	; 0xc0a <init_com>

	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(serial_task,(const char *)"serial", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     b42:	e1 2c       	mov	r14, r1
     b44:	f1 2c       	mov	r15, r1
     b46:	04 e0       	ldi	r16, 0x04	; 4
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	45 e5       	ldi	r20, 0x55	; 85
     b4e:	50 e0       	ldi	r21, 0x00	; 0
     b50:	62 e4       	ldi	r22, 0x42	; 66
     b52:	71 e0       	ldi	r23, 0x01	; 1
     b54:	85 e6       	ldi	r24, 0x65	; 101
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 53 14 	call	0x28a6	; 0x28a6 <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     b5c:	e1 2c       	mov	r14, r1
     b5e:	f1 2c       	mov	r15, r1
     b60:	03 e0       	ldi	r16, 0x03	; 3
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e0       	ldi	r19, 0x00	; 0
     b66:	45 e5       	ldi	r20, 0x55	; 85
     b68:	50 e0       	ldi	r21, 0x00	; 0
     b6a:	69 e4       	ldi	r22, 0x49	; 73
     b6c:	71 e0       	ldi	r23, 0x01	; 1
     b6e:	88 e7       	ldi	r24, 0x78	; 120
     b70:	94 e0       	ldi	r25, 0x04	; 4
     b72:	0e 94 53 14 	call	0x28a6	; 0x28a6 <xTaskCreate>
	xTaskCreate(local_player_task,(const char *)"lplayer", configMINIMAL_STACK_SIZE, (void *)NULL, task3_prio, NULL);
     b76:	e1 2c       	mov	r14, r1
     b78:	f1 2c       	mov	r15, r1
     b7a:	02 e0       	ldi	r16, 0x02	; 2
     b7c:	20 e0       	ldi	r18, 0x00	; 0
     b7e:	30 e0       	ldi	r19, 0x00	; 0
     b80:	45 e5       	ldi	r20, 0x55	; 85
     b82:	50 e0       	ldi	r21, 0x00	; 0
     b84:	6e e4       	ldi	r22, 0x4E	; 78
     b86:	71 e0       	ldi	r23, 0x01	; 1
     b88:	88 ec       	ldi	r24, 0xC8	; 200
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <xTaskCreate>
	xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
     b90:	e1 2c       	mov	r14, r1
     b92:	f1 2c       	mov	r15, r1
     b94:	00 e0       	ldi	r16, 0x00	; 0
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	45 e5       	ldi	r20, 0x55	; 85
     b9c:	50 e0       	ldi	r21, 0x00	; 0
     b9e:	66 e5       	ldi	r22, 0x56	; 86
     ba0:	71 e0       	ldi	r23, 0x01	; 1
     ba2:	85 e3       	ldi	r24, 0x35	; 53
     ba4:	91 e0       	ldi	r25, 0x01	; 1
     ba6:	0e 94 53 14 	call	0x28a6	; 0x28a6 <xTaskCreate>
	
	
	// Start the display handler timer
	init_display_timer(handle_display);
     baa:	84 ee       	ldi	r24, 0xE4	; 228
     bac:	94 e0       	ldi	r25, 0x04	; 4
     bae:	0e 94 17 06 	call	0xc2e	; 0xc2e <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     bb2:	0e 94 a6 16 	call	0x2d4c	; 0x2d4c <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     bb6:	ff cf       	rjmp	.-2      	; 0xbb6 <main+0xd2>

00000bb8 <_com_call_back>:

// Pointer to application display handler
static display_callback_ptr_t cb_ptr = NULL;

// ----------------------------------------------------------------------------------------------------------------------
static void _com_call_back(serial_p _com_serial_instance, uint8_t serial_last_received_byte) {
     bb8:	cf 93       	push	r28
     bba:	df 93       	push	r29
     bbc:	00 d0       	rcall	.+0      	; 0xbbe <_com_call_back+0x6>
     bbe:	00 d0       	rcall	.+0      	; 0xbc0 <_com_call_back+0x8>
     bc0:	cd b7       	in	r28, 0x3d	; 61
     bc2:	de b7       	in	r29, 0x3e	; 62
     bc4:	9b 83       	std	Y+3, r25	; 0x03
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	6c 83       	std	Y+4, r22	; 0x04
	if (_x_rx_com_queue) {
     bca:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <_x_rx_com_queue>
     bce:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <_x_rx_com_queue+0x1>
     bd2:	89 2b       	or	r24, r25
     bd4:	99 f0       	breq	.+38     	; 0xbfc <_com_call_back+0x44>
		signed portBASE_TYPE xHigherPriorityTaskWoken = pdFALSE;
     bd6:	19 82       	std	Y+1, r1	; 0x01

		xQueueSendFromISR( _x_rx_com_queue, &serial_last_received_byte, &xHigherPriorityTaskWoken );
     bd8:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <_x_rx_com_queue>
     bdc:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <_x_rx_com_queue+0x1>
     be0:	be 01       	movw	r22, r28
     be2:	6c 5f       	subi	r22, 0xFC	; 252
     be4:	7f 4f       	sbci	r23, 0xFF	; 255
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	ae 01       	movw	r20, r28
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	5f 4f       	sbci	r21, 0xFF	; 255
     bee:	0e 94 41 11 	call	0x2282	; 0x2282 <xQueueGenericSendFromISR>

		if( xHigherPriorityTaskWoken != pdFALSE )
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	88 23       	and	r24, r24
     bf6:	11 f0       	breq	.+4      	; 0xbfc <_com_call_back+0x44>
		{
			taskYIELD();
     bf8:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
		}
	}
}
     bfc:	0f 90       	pop	r0
     bfe:	0f 90       	pop	r0
     c00:	0f 90       	pop	r0
     c02:	0f 90       	pop	r0
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	08 95       	ret

00000c0a <init_com>:

// ----------------------------------------------------------------------------------------------------------------------
void init_com(QueueHandle_t x_rx_queue) {
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	00 d0       	rcall	.+0      	; 0xc10 <init_com+0x6>
     c10:	cd b7       	in	r28, 0x3d	; 61
     c12:	de b7       	in	r29, 0x3e	; 62
     c14:	9a 83       	std	Y+2, r25	; 0x02
     c16:	89 83       	std	Y+1, r24	; 0x01
	_x_rx_com_queue = x_rx_queue;
     c18:	89 81       	ldd	r24, Y+1	; 0x01
     c1a:	9a 81       	ldd	r25, Y+2	; 0x02
     c1c:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <_x_rx_com_queue+0x1>
     c20:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <_x_rx_com_queue>
}
     c24:	0f 90       	pop	r0
     c26:	0f 90       	pop	r0
     c28:	df 91       	pop	r29
     c2a:	cf 91       	pop	r28
     c2c:	08 95       	ret

00000c2e <init_display_timer>:

// ----------------------------------------------------------------------------------------------------------------------
void init_display_timer(display_callback_ptr_t cb)
{
     c2e:	cf 93       	push	r28
     c30:	df 93       	push	r29
     c32:	00 d0       	rcall	.+0      	; 0xc34 <init_display_timer+0x6>
     c34:	cd b7       	in	r28, 0x3d	; 61
     c36:	de b7       	in	r29, 0x3e	; 62
     c38:	9a 83       	std	Y+2, r25	; 0x02
     c3a:	89 83       	std	Y+1, r24	; 0x01
	cb_ptr = cb;
     c3c:	89 81       	ldd	r24, Y+1	; 0x01
     c3e:	9a 81       	ldd	r25, Y+2	; 0x02
     c40:	90 93 6f 01 	sts	0x016F, r25	; 0x80016f <cb_ptr+0x1>
     c44:	80 93 6e 01 	sts	0x016E, r24	; 0x80016e <cb_ptr>
	
	// Setup timer T0 to CTC, ~1309 Hz
	OCR0A = 10;
     c48:	87 e4       	ldi	r24, 0x47	; 71
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	2a e0       	ldi	r18, 0x0A	; 10
     c4e:	fc 01       	movw	r30, r24
     c50:	20 83       	st	Z, r18
	TCCR0A |= _BV(WGM01); // Mode 2
     c52:	84 e4       	ldi	r24, 0x44	; 68
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	24 e4       	ldi	r18, 0x44	; 68
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	f9 01       	movw	r30, r18
     c5c:	20 81       	ld	r18, Z
     c5e:	22 60       	ori	r18, 0x02	; 2
     c60:	fc 01       	movw	r30, r24
     c62:	20 83       	st	Z, r18
	TIMSK0 |= _BV(OCIE0A); // Enable interrupt
     c64:	8e e6       	ldi	r24, 0x6E	; 110
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	2e e6       	ldi	r18, 0x6E	; 110
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	f9 01       	movw	r30, r18
     c6e:	20 81       	ld	r18, Z
     c70:	22 60       	ori	r18, 0x02	; 2
     c72:	fc 01       	movw	r30, r24
     c74:	20 83       	st	Z, r18
	TCCR0B |= _BV(CS00) | _BV(CS02); // Prescaler 1024 - and start timer
     c76:	85 e4       	ldi	r24, 0x45	; 69
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	25 e4       	ldi	r18, 0x45	; 69
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	f9 01       	movw	r30, r18
     c80:	20 81       	ld	r18, Z
     c82:	25 60       	ori	r18, 0x05	; 5
     c84:	fc 01       	movw	r30, r24
     c86:	20 83       	st	Z, r18
}
     c88:	0f 90       	pop	r0
     c8a:	0f 90       	pop	r0
     c8c:	df 91       	pop	r29
     c8e:	cf 91       	pop	r28
     c90:	08 95       	ret

00000c92 <__vector_16>:

// ----------------------------------------------------------------------------------------------------------------------
//ISR for display timer
ISR(TIMER0_COMPA_vect)
{
     c92:	1f 92       	push	r1
     c94:	0f 92       	push	r0
     c96:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c9a:	0f 92       	push	r0
     c9c:	11 24       	eor	r1, r1
     c9e:	2f 93       	push	r18
     ca0:	3f 93       	push	r19
     ca2:	4f 93       	push	r20
     ca4:	5f 93       	push	r21
     ca6:	6f 93       	push	r22
     ca8:	7f 93       	push	r23
     caa:	8f 93       	push	r24
     cac:	9f 93       	push	r25
     cae:	af 93       	push	r26
     cb0:	bf 93       	push	r27
     cb2:	ef 93       	push	r30
     cb4:	ff 93       	push	r31
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	cd b7       	in	r28, 0x3d	; 61
     cbc:	de b7       	in	r29, 0x3e	; 62
	if (cb_ptr)
     cbe:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <cb_ptr>
     cc2:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <cb_ptr+0x1>
     cc6:	89 2b       	or	r24, r25
     cc8:	31 f0       	breq	.+12     	; 0xcd6 <__vector_16+0x44>
	{
		cb_ptr();
     cca:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <cb_ptr>
     cce:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <cb_ptr+0x1>
     cd2:	fc 01       	movw	r30, r24
     cd4:	09 95       	icall
	}
}
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	ff 91       	pop	r31
     cdc:	ef 91       	pop	r30
     cde:	bf 91       	pop	r27
     ce0:	af 91       	pop	r26
     ce2:	9f 91       	pop	r25
     ce4:	8f 91       	pop	r24
     ce6:	7f 91       	pop	r23
     ce8:	6f 91       	pop	r22
     cea:	5f 91       	pop	r21
     cec:	4f 91       	pop	r20
     cee:	3f 91       	pop	r19
     cf0:	2f 91       	pop	r18
     cf2:	0f 90       	pop	r0
     cf4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     cf8:	0f 90       	pop	r0
     cfa:	1f 90       	pop	r1
     cfc:	18 95       	reti

00000cfe <com_send_bytes>:

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
     cfe:	cf 93       	push	r28
     d00:	df 93       	push	r29
     d02:	00 d0       	rcall	.+0      	; 0xd04 <com_send_bytes+0x6>
     d04:	1f 92       	push	r1
     d06:	cd b7       	in	r28, 0x3d	; 61
     d08:	de b7       	in	r29, 0x3e	; 62
     d0a:	9a 83       	std	Y+2, r25	; 0x02
     d0c:	89 83       	std	Y+1, r24	; 0x01
     d0e:	6b 83       	std	Y+3, r22	; 0x03
	serial_send_bytes(_com_serial_instance, bytes, len);
     d10:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <_com_serial_instance>
     d14:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <_com_serial_instance+0x1>
     d18:	29 81       	ldd	r18, Y+1	; 0x01
     d1a:	3a 81       	ldd	r19, Y+2	; 0x02
     d1c:	4b 81       	ldd	r20, Y+3	; 0x03
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <serial_send_bytes>
}
     d24:	0f 90       	pop	r0
     d26:	0f 90       	pop	r0
     d28:	0f 90       	pop	r0
     d2a:	df 91       	pop	r29
     d2c:	cf 91       	pop	r28
     d2e:	08 95       	ret

00000d30 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     d30:	8f 92       	push	r8
     d32:	9f 92       	push	r9
     d34:	af 92       	push	r10
     d36:	bf 92       	push	r11
     d38:	cf 92       	push	r12
     d3a:	df 92       	push	r13
     d3c:	ef 92       	push	r14
     d3e:	0f 93       	push	r16
     d40:	cf 93       	push	r28
     d42:	df 93       	push	r29
     d44:	cd b7       	in	r28, 0x3d	; 61
     d46:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     d48:	80 e7       	ldi	r24, 0x70	; 112
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 2a 07 	call	0xe54	; 0xe54 <buffer_init>
	buffer_init(&_com_tx_buffer);
     d50:	83 e8       	ldi	r24, 0x83	; 131
     d52:	91 e0       	ldi	r25, 0x01	; 1
     d54:	0e 94 2a 07 	call	0xe54	; 0xe54 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     d58:	0f 2e       	mov	r0, r31
     d5a:	fc ed       	ldi	r31, 0xDC	; 220
     d5c:	8f 2e       	mov	r8, r31
     d5e:	f5 e0       	ldi	r31, 0x05	; 5
     d60:	9f 2e       	mov	r9, r31
     d62:	f0 2d       	mov	r31, r0
     d64:	0f 2e       	mov	r0, r31
     d66:	f3 e8       	ldi	r31, 0x83	; 131
     d68:	af 2e       	mov	r10, r31
     d6a:	f1 e0       	ldi	r31, 0x01	; 1
     d6c:	bf 2e       	mov	r11, r31
     d6e:	f0 2d       	mov	r31, r0
     d70:	0f 2e       	mov	r0, r31
     d72:	f0 e7       	ldi	r31, 0x70	; 112
     d74:	cf 2e       	mov	r12, r31
     d76:	f1 e0       	ldi	r31, 0x01	; 1
     d78:	df 2e       	mov	r13, r31
     d7a:	f0 2d       	mov	r31, r0
     d7c:	e1 2c       	mov	r14, r1
     d7e:	00 e0       	ldi	r16, 0x00	; 0
     d80:	23 e0       	ldi	r18, 0x03	; 3
     d82:	40 e0       	ldi	r20, 0x00	; 0
     d84:	52 ec       	ldi	r21, 0xC2	; 194
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	70 e0       	ldi	r23, 0x00	; 0
     d8a:	80 e0       	ldi	r24, 0x00	; 0
     d8c:	0e 94 a0 0c 	call	0x1940	; 0x1940 <serial_new_instance>
     d90:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <_com_serial_instance+0x1>
     d94:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     d98:	88 e2       	ldi	r24, 0x28	; 40
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	28 e2       	ldi	r18, 0x28	; 40
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	f9 01       	movw	r30, r18
     da2:	20 81       	ld	r18, Z
     da4:	23 6c       	ori	r18, 0xC3	; 195
     da6:	fc 01       	movw	r30, r24
     da8:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     daa:	8b e2       	ldi	r24, 0x2B	; 43
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	2b e2       	ldi	r18, 0x2B	; 43
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	f9 01       	movw	r30, r18
     db4:	20 81       	ld	r18, Z
     db6:	28 60       	ori	r18, 0x08	; 8
     db8:	fc 01       	movw	r30, r24
     dba:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     dbc:	8a e2       	ldi	r24, 0x2A	; 42
     dbe:	90 e0       	ldi	r25, 0x00	; 0
     dc0:	2a e2       	ldi	r18, 0x2A	; 42
     dc2:	30 e0       	ldi	r19, 0x00	; 0
     dc4:	f9 01       	movw	r30, r18
     dc6:	20 81       	ld	r18, Z
     dc8:	24 67       	ori	r18, 0x74	; 116
     dca:	fc 01       	movw	r30, r24
     dcc:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     dce:	8b e2       	ldi	r24, 0x2B	; 43
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	2b e2       	ldi	r18, 0x2B	; 43
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	f9 01       	movw	r30, r18
     dd8:	20 81       	ld	r18, Z
     dda:	20 64       	ori	r18, 0x40	; 64
     ddc:	fc 01       	movw	r30, r24
     dde:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     de0:	81 e2       	ldi	r24, 0x21	; 33
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	fc 01       	movw	r30, r24
     de6:	80 81       	ld	r24, Z
     de8:	81 e2       	ldi	r24, 0x21	; 33
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	2f ef       	ldi	r18, 0xFF	; 255
     dee:	fc 01       	movw	r30, r24
     df0:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     df2:	84 e2       	ldi	r24, 0x24	; 36
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	24 e2       	ldi	r18, 0x24	; 36
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	f9 01       	movw	r30, r18
     dfc:	20 81       	ld	r18, Z
     dfe:	23 60       	ori	r18, 0x03	; 3
     e00:	fc 01       	movw	r30, r24
     e02:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     e04:	84 e2       	ldi	r24, 0x24	; 36
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	24 e2       	ldi	r18, 0x24	; 36
     e0a:	30 e0       	ldi	r19, 0x00	; 0
     e0c:	f9 01       	movw	r30, r18
     e0e:	20 81       	ld	r18, Z
     e10:	2c 63       	ori	r18, 0x3C	; 60
     e12:	fc 01       	movw	r30, r24
     e14:	20 83       	st	Z, r18
}
     e16:	df 91       	pop	r29
     e18:	cf 91       	pop	r28
     e1a:	0f 91       	pop	r16
     e1c:	ef 90       	pop	r14
     e1e:	df 90       	pop	r13
     e20:	cf 90       	pop	r12
     e22:	bf 90       	pop	r11
     e24:	af 90       	pop	r10
     e26:	9f 90       	pop	r9
     e28:	8f 90       	pop	r8
     e2a:	08 95       	ret

00000e2c <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     e2c:	cf 93       	push	r28
     e2e:	df 93       	push	r29
     e30:	1f 92       	push	r1
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     e38:	0f 90       	pop	r0
     e3a:	df 91       	pop	r29
     e3c:	cf 91       	pop	r28
     e3e:	08 95       	ret

00000e40 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	1f 92       	push	r1
     e46:	cd b7       	in	r28, 0x3d	; 61
     e48:	de b7       	in	r29, 0x3e	; 62
     e4a:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     e4c:	0f 90       	pop	r0
     e4e:	df 91       	pop	r29
     e50:	cf 91       	pop	r28
     e52:	08 95       	ret

00000e54 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     e54:	cf 93       	push	r28
     e56:	df 93       	push	r29
     e58:	00 d0       	rcall	.+0      	; 0xe5a <buffer_init+0x6>
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     e62:	89 81       	ldd	r24, Y+1	; 0x01
     e64:	9a 81       	ldd	r25, Y+2	; 0x02
     e66:	fc 01       	movw	r30, r24
     e68:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     e6a:	89 81       	ldd	r24, Y+1	; 0x01
     e6c:	9a 81       	ldd	r25, Y+2	; 0x02
     e6e:	fc 01       	movw	r30, r24
     e70:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	12 8a       	std	Z+18, r1	; 0x12
}
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	df 91       	pop	r29
     e80:	cf 91       	pop	r28
     e82:	08 95       	ret

00000e84 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     e84:	cf 93       	push	r28
     e86:	df 93       	push	r29
     e88:	00 d0       	rcall	.+0      	; 0xe8a <buffer_get_item+0x6>
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <buffer_get_item+0x8>
     e8c:	cd b7       	in	r28, 0x3d	; 61
     e8e:	de b7       	in	r29, 0x3e	; 62
     e90:	9a 83       	std	Y+2, r25	; 0x02
     e92:	89 83       	std	Y+1, r24	; 0x01
     e94:	7c 83       	std	Y+4, r23	; 0x04
     e96:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	82 89       	ldd	r24, Z+18	; 0x12
     ea0:	88 23       	and	r24, r24
     ea2:	81 f1       	breq	.+96     	; 0xf04 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     ea4:	89 81       	ldd	r24, Y+1	; 0x01
     ea6:	9a 81       	ldd	r25, Y+2	; 0x02
     ea8:	fc 01       	movw	r30, r24
     eaa:	81 89       	ldd	r24, Z+17	; 0x11
     eac:	88 2f       	mov	r24, r24
     eae:	90 e0       	ldi	r25, 0x00	; 0
     eb0:	29 81       	ldd	r18, Y+1	; 0x01
     eb2:	3a 81       	ldd	r19, Y+2	; 0x02
     eb4:	82 0f       	add	r24, r18
     eb6:	93 1f       	adc	r25, r19
     eb8:	fc 01       	movw	r30, r24
     eba:	20 81       	ld	r18, Z
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	9c 81       	ldd	r25, Y+4	; 0x04
     ec0:	fc 01       	movw	r30, r24
     ec2:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	9a 81       	ldd	r25, Y+2	; 0x02
     ec8:	fc 01       	movw	r30, r24
     eca:	81 89       	ldd	r24, Z+17	; 0x11
     ecc:	88 2f       	mov	r24, r24
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	01 96       	adiw	r24, 0x01	; 1
     ed2:	8f 70       	andi	r24, 0x0F	; 15
     ed4:	90 78       	andi	r25, 0x80	; 128
     ed6:	99 23       	and	r25, r25
     ed8:	24 f4       	brge	.+8      	; 0xee2 <buffer_get_item+0x5e>
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	80 6f       	ori	r24, 0xF0	; 240
     ede:	9f 6f       	ori	r25, 0xFF	; 255
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	28 2f       	mov	r18, r24
     ee4:	89 81       	ldd	r24, Y+1	; 0x01
     ee6:	9a 81       	ldd	r25, Y+2	; 0x02
     ee8:	fc 01       	movw	r30, r24
     eea:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     eec:	89 81       	ldd	r24, Y+1	; 0x01
     eee:	9a 81       	ldd	r25, Y+2	; 0x02
     ef0:	fc 01       	movw	r30, r24
     ef2:	82 89       	ldd	r24, Z+18	; 0x12
     ef4:	2f ef       	ldi	r18, 0xFF	; 255
     ef6:	28 0f       	add	r18, r24
     ef8:	89 81       	ldd	r24, Y+1	; 0x01
     efa:	9a 81       	ldd	r25, Y+2	; 0x02
     efc:	fc 01       	movw	r30, r24
     efe:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     f00:	80 e0       	ldi	r24, 0x00	; 0
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     f04:	81 e0       	ldi	r24, 0x01	; 1
}
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <buffer_put_item+0x6>
     f1a:	1f 92       	push	r1
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
     f20:	9a 83       	std	Y+2, r25	; 0x02
     f22:	89 83       	std	Y+1, r24	; 0x01
     f24:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     f26:	89 81       	ldd	r24, Y+1	; 0x01
     f28:	9a 81       	ldd	r25, Y+2	; 0x02
     f2a:	fc 01       	movw	r30, r24
     f2c:	82 89       	ldd	r24, Z+18	; 0x12
     f2e:	80 31       	cpi	r24, 0x10	; 16
     f30:	68 f5       	brcc	.+90     	; 0xf8c <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     f32:	89 81       	ldd	r24, Y+1	; 0x01
     f34:	9a 81       	ldd	r25, Y+2	; 0x02
     f36:	fc 01       	movw	r30, r24
     f38:	80 89       	ldd	r24, Z+16	; 0x10
     f3a:	88 2f       	mov	r24, r24
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	29 81       	ldd	r18, Y+1	; 0x01
     f40:	3a 81       	ldd	r19, Y+2	; 0x02
     f42:	82 0f       	add	r24, r18
     f44:	93 1f       	adc	r25, r19
     f46:	2b 81       	ldd	r18, Y+3	; 0x03
     f48:	fc 01       	movw	r30, r24
     f4a:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     f4c:	89 81       	ldd	r24, Y+1	; 0x01
     f4e:	9a 81       	ldd	r25, Y+2	; 0x02
     f50:	fc 01       	movw	r30, r24
     f52:	80 89       	ldd	r24, Z+16	; 0x10
     f54:	88 2f       	mov	r24, r24
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	01 96       	adiw	r24, 0x01	; 1
     f5a:	8f 70       	andi	r24, 0x0F	; 15
     f5c:	90 78       	andi	r25, 0x80	; 128
     f5e:	99 23       	and	r25, r25
     f60:	24 f4       	brge	.+8      	; 0xf6a <buffer_put_item+0x56>
     f62:	01 97       	sbiw	r24, 0x01	; 1
     f64:	80 6f       	ori	r24, 0xF0	; 240
     f66:	9f 6f       	ori	r25, 0xFF	; 255
     f68:	01 96       	adiw	r24, 0x01	; 1
     f6a:	28 2f       	mov	r18, r24
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	fc 01       	movw	r30, r24
     f72:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     f74:	89 81       	ldd	r24, Y+1	; 0x01
     f76:	9a 81       	ldd	r25, Y+2	; 0x02
     f78:	fc 01       	movw	r30, r24
     f7a:	82 89       	ldd	r24, Z+18	; 0x12
     f7c:	21 e0       	ldi	r18, 0x01	; 1
     f7e:	28 0f       	add	r18, r24
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	fc 01       	movw	r30, r24
     f86:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     f88:	80 e0       	ldi	r24, 0x00	; 0
     f8a:	01 c0       	rjmp	.+2      	; 0xf8e <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     f8c:	82 e0       	ldi	r24, 0x02	; 2
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	df 91       	pop	r29
     f96:	cf 91       	pop	r28
     f98:	08 95       	ret

00000f9a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f9a:	cf 93       	push	r28
     f9c:	df 93       	push	r29
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <vListInitialise+0x6>
     fa0:	cd b7       	in	r28, 0x3d	; 61
     fa2:	de b7       	in	r29, 0x3e	; 62
     fa4:	9a 83       	std	Y+2, r25	; 0x02
     fa6:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	9c 01       	movw	r18, r24
     fae:	2d 5f       	subi	r18, 0xFD	; 253
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	9a 81       	ldd	r25, Y+2	; 0x02
     fb6:	fc 01       	movw	r30, r24
     fb8:	32 83       	std	Z+2, r19	; 0x02
     fba:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	9a 81       	ldd	r25, Y+2	; 0x02
     fc0:	2f ef       	ldi	r18, 0xFF	; 255
     fc2:	3f ef       	ldi	r19, 0xFF	; 255
     fc4:	fc 01       	movw	r30, r24
     fc6:	34 83       	std	Z+4, r19	; 0x04
     fc8:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	9c 01       	movw	r18, r24
     fd0:	2d 5f       	subi	r18, 0xFD	; 253
     fd2:	3f 4f       	sbci	r19, 0xFF	; 255
     fd4:	89 81       	ldd	r24, Y+1	; 0x01
     fd6:	9a 81       	ldd	r25, Y+2	; 0x02
     fd8:	fc 01       	movw	r30, r24
     fda:	36 83       	std	Z+6, r19	; 0x06
     fdc:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	9a 81       	ldd	r25, Y+2	; 0x02
     fe2:	9c 01       	movw	r18, r24
     fe4:	2d 5f       	subi	r18, 0xFD	; 253
     fe6:	3f 4f       	sbci	r19, 0xFF	; 255
     fe8:	89 81       	ldd	r24, Y+1	; 0x01
     fea:	9a 81       	ldd	r25, Y+2	; 0x02
     fec:	fc 01       	movw	r30, r24
     fee:	30 87       	std	Z+8, r19	; 0x08
     ff0:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	9a 81       	ldd	r25, Y+2	; 0x02
     ff6:	fc 01       	movw	r30, r24
     ff8:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     ffa:	0f 90       	pop	r0
     ffc:	0f 90       	pop	r0
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 d0       	rcall	.+0      	; 0x100a <vListInitialiseItem+0x6>
    100a:	cd b7       	in	r28, 0x3d	; 61
    100c:	de b7       	in	r29, 0x3e	; 62
    100e:	9a 83       	std	Y+2, r25	; 0x02
    1010:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
    1012:	89 81       	ldd	r24, Y+1	; 0x01
    1014:	9a 81       	ldd	r25, Y+2	; 0x02
    1016:	fc 01       	movw	r30, r24
    1018:	11 86       	std	Z+9, r1	; 0x09
    101a:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
    101c:	0f 90       	pop	r0
    101e:	0f 90       	pop	r0
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	08 95       	ret

00001026 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    1026:	cf 93       	push	r28
    1028:	df 93       	push	r29
    102a:	00 d0       	rcall	.+0      	; 0x102c <vListInsertEnd+0x6>
    102c:	00 d0       	rcall	.+0      	; 0x102e <vListInsertEnd+0x8>
    102e:	00 d0       	rcall	.+0      	; 0x1030 <vListInsertEnd+0xa>
    1030:	cd b7       	in	r28, 0x3d	; 61
    1032:	de b7       	in	r29, 0x3e	; 62
    1034:	9c 83       	std	Y+4, r25	; 0x04
    1036:	8b 83       	std	Y+3, r24	; 0x03
    1038:	7e 83       	std	Y+6, r23	; 0x06
    103a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	fc 01       	movw	r30, r24
    1042:	81 81       	ldd	r24, Z+1	; 0x01
    1044:	92 81       	ldd	r25, Z+2	; 0x02
    1046:	9a 83       	std	Y+2, r25	; 0x02
    1048:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
    104a:	8d 81       	ldd	r24, Y+5	; 0x05
    104c:	9e 81       	ldd	r25, Y+6	; 0x06
    104e:	29 81       	ldd	r18, Y+1	; 0x01
    1050:	3a 81       	ldd	r19, Y+2	; 0x02
    1052:	fc 01       	movw	r30, r24
    1054:	33 83       	std	Z+3, r19	; 0x03
    1056:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
    1058:	89 81       	ldd	r24, Y+1	; 0x01
    105a:	9a 81       	ldd	r25, Y+2	; 0x02
    105c:	fc 01       	movw	r30, r24
    105e:	24 81       	ldd	r18, Z+4	; 0x04
    1060:	35 81       	ldd	r19, Z+5	; 0x05
    1062:	8d 81       	ldd	r24, Y+5	; 0x05
    1064:	9e 81       	ldd	r25, Y+6	; 0x06
    1066:	fc 01       	movw	r30, r24
    1068:	35 83       	std	Z+5, r19	; 0x05
    106a:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
    106c:	89 81       	ldd	r24, Y+1	; 0x01
    106e:	9a 81       	ldd	r25, Y+2	; 0x02
    1070:	fc 01       	movw	r30, r24
    1072:	84 81       	ldd	r24, Z+4	; 0x04
    1074:	95 81       	ldd	r25, Z+5	; 0x05
    1076:	2d 81       	ldd	r18, Y+5	; 0x05
    1078:	3e 81       	ldd	r19, Y+6	; 0x06
    107a:	fc 01       	movw	r30, r24
    107c:	33 83       	std	Z+3, r19	; 0x03
    107e:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	9a 81       	ldd	r25, Y+2	; 0x02
    1084:	2d 81       	ldd	r18, Y+5	; 0x05
    1086:	3e 81       	ldd	r19, Y+6	; 0x06
    1088:	fc 01       	movw	r30, r24
    108a:	35 83       	std	Z+5, r19	; 0x05
    108c:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    108e:	8d 81       	ldd	r24, Y+5	; 0x05
    1090:	9e 81       	ldd	r25, Y+6	; 0x06
    1092:	2b 81       	ldd	r18, Y+3	; 0x03
    1094:	3c 81       	ldd	r19, Y+4	; 0x04
    1096:	fc 01       	movw	r30, r24
    1098:	31 87       	std	Z+9, r19	; 0x09
    109a:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    109c:	8b 81       	ldd	r24, Y+3	; 0x03
    109e:	9c 81       	ldd	r25, Y+4	; 0x04
    10a0:	fc 01       	movw	r30, r24
    10a2:	80 81       	ld	r24, Z
    10a4:	21 e0       	ldi	r18, 0x01	; 1
    10a6:	28 0f       	add	r18, r24
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	fc 01       	movw	r30, r24
    10ae:	20 83       	st	Z, r18
}
    10b0:	26 96       	adiw	r28, 0x06	; 6
    10b2:	0f b6       	in	r0, 0x3f	; 63
    10b4:	f8 94       	cli
    10b6:	de bf       	out	0x3e, r29	; 62
    10b8:	0f be       	out	0x3f, r0	; 63
    10ba:	cd bf       	out	0x3d, r28	; 61
    10bc:	df 91       	pop	r29
    10be:	cf 91       	pop	r28
    10c0:	08 95       	ret

000010c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	cd b7       	in	r28, 0x3d	; 61
    10c8:	de b7       	in	r29, 0x3e	; 62
    10ca:	28 97       	sbiw	r28, 0x08	; 8
    10cc:	0f b6       	in	r0, 0x3f	; 63
    10ce:	f8 94       	cli
    10d0:	de bf       	out	0x3e, r29	; 62
    10d2:	0f be       	out	0x3f, r0	; 63
    10d4:	cd bf       	out	0x3d, r28	; 61
    10d6:	9e 83       	std	Y+6, r25	; 0x06
    10d8:	8d 83       	std	Y+5, r24	; 0x05
    10da:	78 87       	std	Y+8, r23	; 0x08
    10dc:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    10de:	8f 81       	ldd	r24, Y+7	; 0x07
    10e0:	98 85       	ldd	r25, Y+8	; 0x08
    10e2:	fc 01       	movw	r30, r24
    10e4:	80 81       	ld	r24, Z
    10e6:	91 81       	ldd	r25, Z+1	; 0x01
    10e8:	9c 83       	std	Y+4, r25	; 0x04
    10ea:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    10ec:	8b 81       	ldd	r24, Y+3	; 0x03
    10ee:	9c 81       	ldd	r25, Y+4	; 0x04
    10f0:	01 96       	adiw	r24, 0x01	; 1
    10f2:	41 f4       	brne	.+16     	; 0x1104 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    10f4:	8d 81       	ldd	r24, Y+5	; 0x05
    10f6:	9e 81       	ldd	r25, Y+6	; 0x06
    10f8:	fc 01       	movw	r30, r24
    10fa:	87 81       	ldd	r24, Z+7	; 0x07
    10fc:	90 85       	ldd	r25, Z+8	; 0x08
    10fe:	9a 83       	std	Y+2, r25	; 0x02
    1100:	89 83       	std	Y+1, r24	; 0x01
    1102:	1a c0       	rjmp	.+52     	; 0x1138 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	03 96       	adiw	r24, 0x03	; 3
    110a:	9a 83       	std	Y+2, r25	; 0x02
    110c:	89 83       	std	Y+1, r24	; 0x01
    110e:	07 c0       	rjmp	.+14     	; 0x111e <vListInsert+0x5c>
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	fc 01       	movw	r30, r24
    1116:	82 81       	ldd	r24, Z+2	; 0x02
    1118:	93 81       	ldd	r25, Z+3	; 0x03
    111a:	9a 83       	std	Y+2, r25	; 0x02
    111c:	89 83       	std	Y+1, r24	; 0x01
    111e:	89 81       	ldd	r24, Y+1	; 0x01
    1120:	9a 81       	ldd	r25, Y+2	; 0x02
    1122:	fc 01       	movw	r30, r24
    1124:	82 81       	ldd	r24, Z+2	; 0x02
    1126:	93 81       	ldd	r25, Z+3	; 0x03
    1128:	fc 01       	movw	r30, r24
    112a:	20 81       	ld	r18, Z
    112c:	31 81       	ldd	r19, Z+1	; 0x01
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	82 17       	cp	r24, r18
    1134:	93 07       	cpc	r25, r19
    1136:	60 f7       	brcc	.-40     	; 0x1110 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    1138:	89 81       	ldd	r24, Y+1	; 0x01
    113a:	9a 81       	ldd	r25, Y+2	; 0x02
    113c:	fc 01       	movw	r30, r24
    113e:	22 81       	ldd	r18, Z+2	; 0x02
    1140:	33 81       	ldd	r19, Z+3	; 0x03
    1142:	8f 81       	ldd	r24, Y+7	; 0x07
    1144:	98 85       	ldd	r25, Y+8	; 0x08
    1146:	fc 01       	movw	r30, r24
    1148:	33 83       	std	Z+3, r19	; 0x03
    114a:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    114c:	8f 81       	ldd	r24, Y+7	; 0x07
    114e:	98 85       	ldd	r25, Y+8	; 0x08
    1150:	fc 01       	movw	r30, r24
    1152:	82 81       	ldd	r24, Z+2	; 0x02
    1154:	93 81       	ldd	r25, Z+3	; 0x03
    1156:	2f 81       	ldd	r18, Y+7	; 0x07
    1158:	38 85       	ldd	r19, Y+8	; 0x08
    115a:	fc 01       	movw	r30, r24
    115c:	35 83       	std	Z+5, r19	; 0x05
    115e:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    1160:	8f 81       	ldd	r24, Y+7	; 0x07
    1162:	98 85       	ldd	r25, Y+8	; 0x08
    1164:	29 81       	ldd	r18, Y+1	; 0x01
    1166:	3a 81       	ldd	r19, Y+2	; 0x02
    1168:	fc 01       	movw	r30, r24
    116a:	35 83       	std	Z+5, r19	; 0x05
    116c:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	9a 81       	ldd	r25, Y+2	; 0x02
    1172:	2f 81       	ldd	r18, Y+7	; 0x07
    1174:	38 85       	ldd	r19, Y+8	; 0x08
    1176:	fc 01       	movw	r30, r24
    1178:	33 83       	std	Z+3, r19	; 0x03
    117a:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    117c:	8f 81       	ldd	r24, Y+7	; 0x07
    117e:	98 85       	ldd	r25, Y+8	; 0x08
    1180:	2d 81       	ldd	r18, Y+5	; 0x05
    1182:	3e 81       	ldd	r19, Y+6	; 0x06
    1184:	fc 01       	movw	r30, r24
    1186:	31 87       	std	Z+9, r19	; 0x09
    1188:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    118a:	8d 81       	ldd	r24, Y+5	; 0x05
    118c:	9e 81       	ldd	r25, Y+6	; 0x06
    118e:	fc 01       	movw	r30, r24
    1190:	80 81       	ld	r24, Z
    1192:	21 e0       	ldi	r18, 0x01	; 1
    1194:	28 0f       	add	r18, r24
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
}
    119e:	28 96       	adiw	r28, 0x08	; 8
    11a0:	0f b6       	in	r0, 0x3f	; 63
    11a2:	f8 94       	cli
    11a4:	de bf       	out	0x3e, r29	; 62
    11a6:	0f be       	out	0x3f, r0	; 63
    11a8:	cd bf       	out	0x3d, r28	; 61
    11aa:	df 91       	pop	r29
    11ac:	cf 91       	pop	r28
    11ae:	08 95       	ret

000011b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    11b0:	cf 93       	push	r28
    11b2:	df 93       	push	r29
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <uxListRemove+0x6>
    11b6:	00 d0       	rcall	.+0      	; 0x11b8 <uxListRemove+0x8>
    11b8:	cd b7       	in	r28, 0x3d	; 61
    11ba:	de b7       	in	r29, 0x3e	; 62
    11bc:	9c 83       	std	Y+4, r25	; 0x04
    11be:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    11c0:	8b 81       	ldd	r24, Y+3	; 0x03
    11c2:	9c 81       	ldd	r25, Y+4	; 0x04
    11c4:	fc 01       	movw	r30, r24
    11c6:	80 85       	ldd	r24, Z+8	; 0x08
    11c8:	91 85       	ldd	r25, Z+9	; 0x09
    11ca:	9a 83       	std	Y+2, r25	; 0x02
    11cc:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	fc 01       	movw	r30, r24
    11d4:	82 81       	ldd	r24, Z+2	; 0x02
    11d6:	93 81       	ldd	r25, Z+3	; 0x03
    11d8:	2b 81       	ldd	r18, Y+3	; 0x03
    11da:	3c 81       	ldd	r19, Y+4	; 0x04
    11dc:	f9 01       	movw	r30, r18
    11de:	24 81       	ldd	r18, Z+4	; 0x04
    11e0:	35 81       	ldd	r19, Z+5	; 0x05
    11e2:	fc 01       	movw	r30, r24
    11e4:	35 83       	std	Z+5, r19	; 0x05
    11e6:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    11e8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ea:	9c 81       	ldd	r25, Y+4	; 0x04
    11ec:	fc 01       	movw	r30, r24
    11ee:	84 81       	ldd	r24, Z+4	; 0x04
    11f0:	95 81       	ldd	r25, Z+5	; 0x05
    11f2:	2b 81       	ldd	r18, Y+3	; 0x03
    11f4:	3c 81       	ldd	r19, Y+4	; 0x04
    11f6:	f9 01       	movw	r30, r18
    11f8:	22 81       	ldd	r18, Z+2	; 0x02
    11fa:	33 81       	ldd	r19, Z+3	; 0x03
    11fc:	fc 01       	movw	r30, r24
    11fe:	33 83       	std	Z+3, r19	; 0x03
    1200:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1202:	89 81       	ldd	r24, Y+1	; 0x01
    1204:	9a 81       	ldd	r25, Y+2	; 0x02
    1206:	fc 01       	movw	r30, r24
    1208:	21 81       	ldd	r18, Z+1	; 0x01
    120a:	32 81       	ldd	r19, Z+2	; 0x02
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	28 17       	cp	r18, r24
    1212:	39 07       	cpc	r19, r25
    1214:	51 f4       	brne	.+20     	; 0x122a <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	fc 01       	movw	r30, r24
    121c:	24 81       	ldd	r18, Z+4	; 0x04
    121e:	35 81       	ldd	r19, Z+5	; 0x05
    1220:	89 81       	ldd	r24, Y+1	; 0x01
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	fc 01       	movw	r30, r24
    1226:	32 83       	std	Z+2, r19	; 0x02
    1228:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	fc 01       	movw	r30, r24
    1230:	11 86       	std	Z+9, r1	; 0x09
    1232:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	2f ef       	ldi	r18, 0xFF	; 255
    123e:	28 0f       	add	r18, r24
    1240:	89 81       	ldd	r24, Y+1	; 0x01
    1242:	9a 81       	ldd	r25, Y+2	; 0x02
    1244:	fc 01       	movw	r30, r24
    1246:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	9a 81       	ldd	r25, Y+2	; 0x02
    124c:	fc 01       	movw	r30, r24
    124e:	80 81       	ld	r24, Z
}
    1250:	0f 90       	pop	r0
    1252:	0f 90       	pop	r0
    1254:	0f 90       	pop	r0
    1256:	0f 90       	pop	r0
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	08 95       	ret

0000125e <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    125e:	cf 93       	push	r28
    1260:	df 93       	push	r29
    1262:	cd b7       	in	r28, 0x3d	; 61
    1264:	de b7       	in	r29, 0x3e	; 62
    1266:	28 97       	sbiw	r28, 0x08	; 8
    1268:	0f b6       	in	r0, 0x3f	; 63
    126a:	f8 94       	cli
    126c:	de bf       	out	0x3e, r29	; 62
    126e:	0f be       	out	0x3f, r0	; 63
    1270:	cd bf       	out	0x3d, r28	; 61
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	8b 83       	std	Y+3, r24	; 0x03
    1276:	7e 83       	std	Y+6, r23	; 0x06
    1278:	6d 83       	std	Y+5, r22	; 0x05
    127a:	58 87       	std	Y+8, r21	; 0x08
    127c:	4f 83       	std	Y+7, r20	; 0x07
    127e:	8b 81       	ldd	r24, Y+3	; 0x03
    1280:	9c 81       	ldd	r25, Y+4	; 0x04
    1282:	21 e1       	ldi	r18, 0x11	; 17
    1284:	fc 01       	movw	r30, r24
    1286:	20 83       	st	Z, r18
    1288:	8b 81       	ldd	r24, Y+3	; 0x03
    128a:	9c 81       	ldd	r25, Y+4	; 0x04
    128c:	01 97       	sbiw	r24, 0x01	; 1
    128e:	9c 83       	std	Y+4, r25	; 0x04
    1290:	8b 83       	std	Y+3, r24	; 0x03
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	9c 81       	ldd	r25, Y+4	; 0x04
    1296:	22 e2       	ldi	r18, 0x22	; 34
    1298:	fc 01       	movw	r30, r24
    129a:	20 83       	st	Z, r18
    129c:	8b 81       	ldd	r24, Y+3	; 0x03
    129e:	9c 81       	ldd	r25, Y+4	; 0x04
    12a0:	01 97       	sbiw	r24, 0x01	; 1
    12a2:	9c 83       	std	Y+4, r25	; 0x04
    12a4:	8b 83       	std	Y+3, r24	; 0x03
    12a6:	8b 81       	ldd	r24, Y+3	; 0x03
    12a8:	9c 81       	ldd	r25, Y+4	; 0x04
    12aa:	23 e3       	ldi	r18, 0x33	; 51
    12ac:	fc 01       	movw	r30, r24
    12ae:	20 83       	st	Z, r18
    12b0:	8b 81       	ldd	r24, Y+3	; 0x03
    12b2:	9c 81       	ldd	r25, Y+4	; 0x04
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	9c 83       	std	Y+4, r25	; 0x04
    12b8:	8b 83       	std	Y+3, r24	; 0x03
    12ba:	8d 81       	ldd	r24, Y+5	; 0x05
    12bc:	9e 81       	ldd	r25, Y+6	; 0x06
    12be:	9a 83       	std	Y+2, r25	; 0x02
    12c0:	89 83       	std	Y+1, r24	; 0x01
    12c2:	29 81       	ldd	r18, Y+1	; 0x01
    12c4:	8b 81       	ldd	r24, Y+3	; 0x03
    12c6:	9c 81       	ldd	r25, Y+4	; 0x04
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	8b 83       	std	Y+3, r24	; 0x03
    12d6:	89 81       	ldd	r24, Y+1	; 0x01
    12d8:	9a 81       	ldd	r25, Y+2	; 0x02
    12da:	89 2f       	mov	r24, r25
    12dc:	99 27       	eor	r25, r25
    12de:	9a 83       	std	Y+2, r25	; 0x02
    12e0:	89 83       	std	Y+1, r24	; 0x01
    12e2:	29 81       	ldd	r18, Y+1	; 0x01
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	fc 01       	movw	r30, r24
    12ea:	20 83       	st	Z, r18
    12ec:	8b 81       	ldd	r24, Y+3	; 0x03
    12ee:	9c 81       	ldd	r25, Y+4	; 0x04
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9c 83       	std	Y+4, r25	; 0x04
    12f4:	8b 83       	std	Y+3, r24	; 0x03
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	9c 81       	ldd	r25, Y+4	; 0x04
    12fa:	fc 01       	movw	r30, r24
    12fc:	10 82       	st	Z, r1
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	01 97       	sbiw	r24, 0x01	; 1
    1304:	9c 83       	std	Y+4, r25	; 0x04
    1306:	8b 83       	std	Y+3, r24	; 0x03
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	20 e8       	ldi	r18, 0x80	; 128
    130e:	fc 01       	movw	r30, r24
    1310:	20 83       	st	Z, r18
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	01 97       	sbiw	r24, 0x01	; 1
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	fc 01       	movw	r30, r24
    1322:	10 82       	st	Z, r1
    1324:	8b 81       	ldd	r24, Y+3	; 0x03
    1326:	9c 81       	ldd	r25, Y+4	; 0x04
    1328:	01 97       	sbiw	r24, 0x01	; 1
    132a:	9c 83       	std	Y+4, r25	; 0x04
    132c:	8b 83       	std	Y+3, r24	; 0x03
    132e:	8b 81       	ldd	r24, Y+3	; 0x03
    1330:	9c 81       	ldd	r25, Y+4	; 0x04
    1332:	22 e0       	ldi	r18, 0x02	; 2
    1334:	fc 01       	movw	r30, r24
    1336:	20 83       	st	Z, r18
    1338:	8b 81       	ldd	r24, Y+3	; 0x03
    133a:	9c 81       	ldd	r25, Y+4	; 0x04
    133c:	01 97       	sbiw	r24, 0x01	; 1
    133e:	9c 83       	std	Y+4, r25	; 0x04
    1340:	8b 83       	std	Y+3, r24	; 0x03
    1342:	8b 81       	ldd	r24, Y+3	; 0x03
    1344:	9c 81       	ldd	r25, Y+4	; 0x04
    1346:	23 e0       	ldi	r18, 0x03	; 3
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	24 e0       	ldi	r18, 0x04	; 4
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18
    1360:	8b 81       	ldd	r24, Y+3	; 0x03
    1362:	9c 81       	ldd	r25, Y+4	; 0x04
    1364:	01 97       	sbiw	r24, 0x01	; 1
    1366:	9c 83       	std	Y+4, r25	; 0x04
    1368:	8b 83       	std	Y+3, r24	; 0x03
    136a:	8b 81       	ldd	r24, Y+3	; 0x03
    136c:	9c 81       	ldd	r25, Y+4	; 0x04
    136e:	25 e0       	ldi	r18, 0x05	; 5
    1370:	fc 01       	movw	r30, r24
    1372:	20 83       	st	Z, r18
    1374:	8b 81       	ldd	r24, Y+3	; 0x03
    1376:	9c 81       	ldd	r25, Y+4	; 0x04
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9c 83       	std	Y+4, r25	; 0x04
    137c:	8b 83       	std	Y+3, r24	; 0x03
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	26 e0       	ldi	r18, 0x06	; 6
    1384:	fc 01       	movw	r30, r24
    1386:	20 83       	st	Z, r18
    1388:	8b 81       	ldd	r24, Y+3	; 0x03
    138a:	9c 81       	ldd	r25, Y+4	; 0x04
    138c:	01 97       	sbiw	r24, 0x01	; 1
    138e:	9c 83       	std	Y+4, r25	; 0x04
    1390:	8b 83       	std	Y+3, r24	; 0x03
    1392:	8b 81       	ldd	r24, Y+3	; 0x03
    1394:	9c 81       	ldd	r25, Y+4	; 0x04
    1396:	27 e0       	ldi	r18, 0x07	; 7
    1398:	fc 01       	movw	r30, r24
    139a:	20 83       	st	Z, r18
    139c:	8b 81       	ldd	r24, Y+3	; 0x03
    139e:	9c 81       	ldd	r25, Y+4	; 0x04
    13a0:	01 97       	sbiw	r24, 0x01	; 1
    13a2:	9c 83       	std	Y+4, r25	; 0x04
    13a4:	8b 83       	std	Y+3, r24	; 0x03
    13a6:	8b 81       	ldd	r24, Y+3	; 0x03
    13a8:	9c 81       	ldd	r25, Y+4	; 0x04
    13aa:	28 e0       	ldi	r18, 0x08	; 8
    13ac:	fc 01       	movw	r30, r24
    13ae:	20 83       	st	Z, r18
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	01 97       	sbiw	r24, 0x01	; 1
    13b6:	9c 83       	std	Y+4, r25	; 0x04
    13b8:	8b 83       	std	Y+3, r24	; 0x03
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	9c 81       	ldd	r25, Y+4	; 0x04
    13be:	29 e0       	ldi	r18, 0x09	; 9
    13c0:	fc 01       	movw	r30, r24
    13c2:	20 83       	st	Z, r18
    13c4:	8b 81       	ldd	r24, Y+3	; 0x03
    13c6:	9c 81       	ldd	r25, Y+4	; 0x04
    13c8:	01 97       	sbiw	r24, 0x01	; 1
    13ca:	9c 83       	std	Y+4, r25	; 0x04
    13cc:	8b 83       	std	Y+3, r24	; 0x03
    13ce:	8b 81       	ldd	r24, Y+3	; 0x03
    13d0:	9c 81       	ldd	r25, Y+4	; 0x04
    13d2:	20 e1       	ldi	r18, 0x10	; 16
    13d4:	fc 01       	movw	r30, r24
    13d6:	20 83       	st	Z, r18
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	9c 81       	ldd	r25, Y+4	; 0x04
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	9c 83       	std	Y+4, r25	; 0x04
    13e0:	8b 83       	std	Y+3, r24	; 0x03
    13e2:	8b 81       	ldd	r24, Y+3	; 0x03
    13e4:	9c 81       	ldd	r25, Y+4	; 0x04
    13e6:	21 e1       	ldi	r18, 0x11	; 17
    13e8:	fc 01       	movw	r30, r24
    13ea:	20 83       	st	Z, r18
    13ec:	8b 81       	ldd	r24, Y+3	; 0x03
    13ee:	9c 81       	ldd	r25, Y+4	; 0x04
    13f0:	01 97       	sbiw	r24, 0x01	; 1
    13f2:	9c 83       	std	Y+4, r25	; 0x04
    13f4:	8b 83       	std	Y+3, r24	; 0x03
    13f6:	8b 81       	ldd	r24, Y+3	; 0x03
    13f8:	9c 81       	ldd	r25, Y+4	; 0x04
    13fa:	22 e1       	ldi	r18, 0x12	; 18
    13fc:	fc 01       	movw	r30, r24
    13fe:	20 83       	st	Z, r18
    1400:	8b 81       	ldd	r24, Y+3	; 0x03
    1402:	9c 81       	ldd	r25, Y+4	; 0x04
    1404:	01 97       	sbiw	r24, 0x01	; 1
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	8b 83       	std	Y+3, r24	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	23 e1       	ldi	r18, 0x13	; 19
    1410:	fc 01       	movw	r30, r24
    1412:	20 83       	st	Z, r18
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	9c 81       	ldd	r25, Y+4	; 0x04
    1418:	01 97       	sbiw	r24, 0x01	; 1
    141a:	9c 83       	std	Y+4, r25	; 0x04
    141c:	8b 83       	std	Y+3, r24	; 0x03
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	9c 81       	ldd	r25, Y+4	; 0x04
    1422:	24 e1       	ldi	r18, 0x14	; 20
    1424:	fc 01       	movw	r30, r24
    1426:	20 83       	st	Z, r18
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	9c 81       	ldd	r25, Y+4	; 0x04
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9c 83       	std	Y+4, r25	; 0x04
    1430:	8b 83       	std	Y+3, r24	; 0x03
    1432:	8b 81       	ldd	r24, Y+3	; 0x03
    1434:	9c 81       	ldd	r25, Y+4	; 0x04
    1436:	25 e1       	ldi	r18, 0x15	; 21
    1438:	fc 01       	movw	r30, r24
    143a:	20 83       	st	Z, r18
    143c:	8b 81       	ldd	r24, Y+3	; 0x03
    143e:	9c 81       	ldd	r25, Y+4	; 0x04
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	9c 83       	std	Y+4, r25	; 0x04
    1444:	8b 83       	std	Y+3, r24	; 0x03
    1446:	8b 81       	ldd	r24, Y+3	; 0x03
    1448:	9c 81       	ldd	r25, Y+4	; 0x04
    144a:	26 e1       	ldi	r18, 0x16	; 22
    144c:	fc 01       	movw	r30, r24
    144e:	20 83       	st	Z, r18
    1450:	8b 81       	ldd	r24, Y+3	; 0x03
    1452:	9c 81       	ldd	r25, Y+4	; 0x04
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9c 83       	std	Y+4, r25	; 0x04
    1458:	8b 83       	std	Y+3, r24	; 0x03
    145a:	8b 81       	ldd	r24, Y+3	; 0x03
    145c:	9c 81       	ldd	r25, Y+4	; 0x04
    145e:	27 e1       	ldi	r18, 0x17	; 23
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
    1464:	8b 81       	ldd	r24, Y+3	; 0x03
    1466:	9c 81       	ldd	r25, Y+4	; 0x04
    1468:	01 97       	sbiw	r24, 0x01	; 1
    146a:	9c 83       	std	Y+4, r25	; 0x04
    146c:	8b 83       	std	Y+3, r24	; 0x03
    146e:	8b 81       	ldd	r24, Y+3	; 0x03
    1470:	9c 81       	ldd	r25, Y+4	; 0x04
    1472:	28 e1       	ldi	r18, 0x18	; 24
    1474:	fc 01       	movw	r30, r24
    1476:	20 83       	st	Z, r18
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	9c 81       	ldd	r25, Y+4	; 0x04
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	9c 83       	std	Y+4, r25	; 0x04
    1480:	8b 83       	std	Y+3, r24	; 0x03
    1482:	8b 81       	ldd	r24, Y+3	; 0x03
    1484:	9c 81       	ldd	r25, Y+4	; 0x04
    1486:	29 e1       	ldi	r18, 0x19	; 25
    1488:	fc 01       	movw	r30, r24
    148a:	20 83       	st	Z, r18
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	9c 83       	std	Y+4, r25	; 0x04
    1494:	8b 83       	std	Y+3, r24	; 0x03
    1496:	8b 81       	ldd	r24, Y+3	; 0x03
    1498:	9c 81       	ldd	r25, Y+4	; 0x04
    149a:	20 e2       	ldi	r18, 0x20	; 32
    149c:	fc 01       	movw	r30, r24
    149e:	20 83       	st	Z, r18
    14a0:	8b 81       	ldd	r24, Y+3	; 0x03
    14a2:	9c 81       	ldd	r25, Y+4	; 0x04
    14a4:	01 97       	sbiw	r24, 0x01	; 1
    14a6:	9c 83       	std	Y+4, r25	; 0x04
    14a8:	8b 83       	std	Y+3, r24	; 0x03
    14aa:	8b 81       	ldd	r24, Y+3	; 0x03
    14ac:	9c 81       	ldd	r25, Y+4	; 0x04
    14ae:	21 e2       	ldi	r18, 0x21	; 33
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	9c 81       	ldd	r25, Y+4	; 0x04
    14b8:	01 97       	sbiw	r24, 0x01	; 1
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	9c 81       	ldd	r25, Y+4	; 0x04
    14c2:	22 e2       	ldi	r18, 0x22	; 34
    14c4:	fc 01       	movw	r30, r24
    14c6:	20 83       	st	Z, r18
    14c8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ca:	9c 81       	ldd	r25, Y+4	; 0x04
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	9c 83       	std	Y+4, r25	; 0x04
    14d0:	8b 83       	std	Y+3, r24	; 0x03
    14d2:	8b 81       	ldd	r24, Y+3	; 0x03
    14d4:	9c 81       	ldd	r25, Y+4	; 0x04
    14d6:	23 e2       	ldi	r18, 0x23	; 35
    14d8:	fc 01       	movw	r30, r24
    14da:	20 83       	st	Z, r18
    14dc:	8b 81       	ldd	r24, Y+3	; 0x03
    14de:	9c 81       	ldd	r25, Y+4	; 0x04
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	8f 81       	ldd	r24, Y+7	; 0x07
    14e8:	98 85       	ldd	r25, Y+8	; 0x08
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	89 83       	std	Y+1, r24	; 0x01
    14ee:	29 81       	ldd	r18, Y+1	; 0x01
    14f0:	8b 81       	ldd	r24, Y+3	; 0x03
    14f2:	9c 81       	ldd	r25, Y+4	; 0x04
    14f4:	fc 01       	movw	r30, r24
    14f6:	20 83       	st	Z, r18
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	9c 81       	ldd	r25, Y+4	; 0x04
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9c 83       	std	Y+4, r25	; 0x04
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	89 81       	ldd	r24, Y+1	; 0x01
    1504:	9a 81       	ldd	r25, Y+2	; 0x02
    1506:	89 2f       	mov	r24, r25
    1508:	99 27       	eor	r25, r25
    150a:	9a 83       	std	Y+2, r25	; 0x02
    150c:	89 83       	std	Y+1, r24	; 0x01
    150e:	29 81       	ldd	r18, Y+1	; 0x01
    1510:	8b 81       	ldd	r24, Y+3	; 0x03
    1512:	9c 81       	ldd	r25, Y+4	; 0x04
    1514:	fc 01       	movw	r30, r24
    1516:	20 83       	st	Z, r18
    1518:	8b 81       	ldd	r24, Y+3	; 0x03
    151a:	9c 81       	ldd	r25, Y+4	; 0x04
    151c:	01 97       	sbiw	r24, 0x01	; 1
    151e:	9c 83       	std	Y+4, r25	; 0x04
    1520:	8b 83       	std	Y+3, r24	; 0x03
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	9c 81       	ldd	r25, Y+4	; 0x04
    1526:	26 e2       	ldi	r18, 0x26	; 38
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
    152c:	8b 81       	ldd	r24, Y+3	; 0x03
    152e:	9c 81       	ldd	r25, Y+4	; 0x04
    1530:	01 97       	sbiw	r24, 0x01	; 1
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	9c 81       	ldd	r25, Y+4	; 0x04
    153a:	27 e2       	ldi	r18, 0x27	; 39
    153c:	fc 01       	movw	r30, r24
    153e:	20 83       	st	Z, r18
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	01 97       	sbiw	r24, 0x01	; 1
    1546:	9c 83       	std	Y+4, r25	; 0x04
    1548:	8b 83       	std	Y+3, r24	; 0x03
    154a:	8b 81       	ldd	r24, Y+3	; 0x03
    154c:	9c 81       	ldd	r25, Y+4	; 0x04
    154e:	28 e2       	ldi	r18, 0x28	; 40
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	01 97       	sbiw	r24, 0x01	; 1
    155a:	9c 83       	std	Y+4, r25	; 0x04
    155c:	8b 83       	std	Y+3, r24	; 0x03
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	9c 81       	ldd	r25, Y+4	; 0x04
    1562:	29 e2       	ldi	r18, 0x29	; 41
    1564:	fc 01       	movw	r30, r24
    1566:	20 83       	st	Z, r18
    1568:	8b 81       	ldd	r24, Y+3	; 0x03
    156a:	9c 81       	ldd	r25, Y+4	; 0x04
    156c:	01 97       	sbiw	r24, 0x01	; 1
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04
    1576:	20 e3       	ldi	r18, 0x30	; 48
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	9c 81       	ldd	r25, Y+4	; 0x04
    158a:	21 e3       	ldi	r18, 0x31	; 49
    158c:	fc 01       	movw	r30, r24
    158e:	20 83       	st	Z, r18
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	9c 81       	ldd	r25, Y+4	; 0x04
    1594:	01 97       	sbiw	r24, 0x01	; 1
    1596:	9c 83       	std	Y+4, r25	; 0x04
    1598:	8b 83       	std	Y+3, r24	; 0x03
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	9c 81       	ldd	r25, Y+4	; 0x04
    159e:	28 96       	adiw	r28, 0x08	; 8
    15a0:	0f b6       	in	r0, 0x3f	; 63
    15a2:	f8 94       	cli
    15a4:	de bf       	out	0x3e, r29	; 62
    15a6:	0f be       	out	0x3f, r0	; 63
    15a8:	cd bf       	out	0x3d, r28	; 61
    15aa:	df 91       	pop	r29
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <xPortStartScheduler>:
    15b0:	cf 93       	push	r28
    15b2:	df 93       	push	r29
    15b4:	cd b7       	in	r28, 0x3d	; 61
    15b6:	de b7       	in	r29, 0x3e	; 62
    15b8:	0e 94 c3 0b 	call	0x1786	; 0x1786 <prvSetupTimerInterrupt>
    15bc:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <pxCurrentTCB>
    15c0:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    15c4:	cd 91       	ld	r28, X+
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	dd 91       	ld	r29, X+
    15ca:	de bf       	out	0x3e, r29	; 62
    15cc:	ff 91       	pop	r31
    15ce:	ef 91       	pop	r30
    15d0:	df 91       	pop	r29
    15d2:	cf 91       	pop	r28
    15d4:	bf 91       	pop	r27
    15d6:	af 91       	pop	r26
    15d8:	9f 91       	pop	r25
    15da:	8f 91       	pop	r24
    15dc:	7f 91       	pop	r23
    15de:	6f 91       	pop	r22
    15e0:	5f 91       	pop	r21
    15e2:	4f 91       	pop	r20
    15e4:	3f 91       	pop	r19
    15e6:	2f 91       	pop	r18
    15e8:	1f 91       	pop	r17
    15ea:	0f 91       	pop	r16
    15ec:	ff 90       	pop	r15
    15ee:	ef 90       	pop	r14
    15f0:	df 90       	pop	r13
    15f2:	cf 90       	pop	r12
    15f4:	bf 90       	pop	r11
    15f6:	af 90       	pop	r10
    15f8:	9f 90       	pop	r9
    15fa:	8f 90       	pop	r8
    15fc:	7f 90       	pop	r7
    15fe:	6f 90       	pop	r6
    1600:	5f 90       	pop	r5
    1602:	4f 90       	pop	r4
    1604:	3f 90       	pop	r3
    1606:	2f 90       	pop	r2
    1608:	1f 90       	pop	r1
    160a:	0f 90       	pop	r0
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	0f 90       	pop	r0
    1610:	08 95       	ret
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	08 95       	ret

0000161a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    161a:	0f 92       	push	r0
    161c:	0f b6       	in	r0, 0x3f	; 63
    161e:	f8 94       	cli
    1620:	0f 92       	push	r0
    1622:	1f 92       	push	r1
    1624:	11 24       	eor	r1, r1
    1626:	2f 92       	push	r2
    1628:	3f 92       	push	r3
    162a:	4f 92       	push	r4
    162c:	5f 92       	push	r5
    162e:	6f 92       	push	r6
    1630:	7f 92       	push	r7
    1632:	8f 92       	push	r8
    1634:	9f 92       	push	r9
    1636:	af 92       	push	r10
    1638:	bf 92       	push	r11
    163a:	cf 92       	push	r12
    163c:	df 92       	push	r13
    163e:	ef 92       	push	r14
    1640:	ff 92       	push	r15
    1642:	0f 93       	push	r16
    1644:	1f 93       	push	r17
    1646:	2f 93       	push	r18
    1648:	3f 93       	push	r19
    164a:	4f 93       	push	r20
    164c:	5f 93       	push	r21
    164e:	6f 93       	push	r22
    1650:	7f 93       	push	r23
    1652:	8f 93       	push	r24
    1654:	9f 93       	push	r25
    1656:	af 93       	push	r26
    1658:	bf 93       	push	r27
    165a:	cf 93       	push	r28
    165c:	df 93       	push	r29
    165e:	ef 93       	push	r30
    1660:	ff 93       	push	r31
    1662:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <pxCurrentTCB>
    1666:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    166a:	0d b6       	in	r0, 0x3d	; 61
    166c:	0d 92       	st	X+, r0
    166e:	0e b6       	in	r0, 0x3e	; 62
    1670:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    1672:	0e 94 80 18 	call	0x3100	; 0x3100 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    1676:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <pxCurrentTCB>
    167a:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    167e:	cd 91       	ld	r28, X+
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	dd 91       	ld	r29, X+
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	ff 91       	pop	r31
    1688:	ef 91       	pop	r30
    168a:	df 91       	pop	r29
    168c:	cf 91       	pop	r28
    168e:	bf 91       	pop	r27
    1690:	af 91       	pop	r26
    1692:	9f 91       	pop	r25
    1694:	8f 91       	pop	r24
    1696:	7f 91       	pop	r23
    1698:	6f 91       	pop	r22
    169a:	5f 91       	pop	r21
    169c:	4f 91       	pop	r20
    169e:	3f 91       	pop	r19
    16a0:	2f 91       	pop	r18
    16a2:	1f 91       	pop	r17
    16a4:	0f 91       	pop	r16
    16a6:	ff 90       	pop	r15
    16a8:	ef 90       	pop	r14
    16aa:	df 90       	pop	r13
    16ac:	cf 90       	pop	r12
    16ae:	bf 90       	pop	r11
    16b0:	af 90       	pop	r10
    16b2:	9f 90       	pop	r9
    16b4:	8f 90       	pop	r8
    16b6:	7f 90       	pop	r7
    16b8:	6f 90       	pop	r6
    16ba:	5f 90       	pop	r5
    16bc:	4f 90       	pop	r4
    16be:	3f 90       	pop	r3
    16c0:	2f 90       	pop	r2
    16c2:	1f 90       	pop	r1
    16c4:	0f 90       	pop	r0
    16c6:	0f be       	out	0x3f, r0	; 63
    16c8:	0f 90       	pop	r0

	asm volatile ( "ret" );
    16ca:	08 95       	ret

000016cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    16cc:	0f 92       	push	r0
    16ce:	0f b6       	in	r0, 0x3f	; 63
    16d0:	f8 94       	cli
    16d2:	0f 92       	push	r0
    16d4:	1f 92       	push	r1
    16d6:	11 24       	eor	r1, r1
    16d8:	2f 92       	push	r2
    16da:	3f 92       	push	r3
    16dc:	4f 92       	push	r4
    16de:	5f 92       	push	r5
    16e0:	6f 92       	push	r6
    16e2:	7f 92       	push	r7
    16e4:	8f 92       	push	r8
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	2f 93       	push	r18
    16fa:	3f 93       	push	r19
    16fc:	4f 93       	push	r20
    16fe:	5f 93       	push	r21
    1700:	6f 93       	push	r22
    1702:	7f 93       	push	r23
    1704:	8f 93       	push	r24
    1706:	9f 93       	push	r25
    1708:	af 93       	push	r26
    170a:	bf 93       	push	r27
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ef 93       	push	r30
    1712:	ff 93       	push	r31
    1714:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <pxCurrentTCB>
    1718:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    171c:	0d b6       	in	r0, 0x3d	; 61
    171e:	0d 92       	st	X+, r0
    1720:	0e b6       	in	r0, 0x3e	; 62
    1722:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1724:	0e 94 94 17 	call	0x2f28	; 0x2f28 <xTaskIncrementTick>
    1728:	88 23       	and	r24, r24
    172a:	11 f0       	breq	.+4      	; 0x1730 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    172c:	0e 94 80 18 	call	0x3100	; 0x3100 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1730:	a0 91 86 05 	lds	r26, 0x0586	; 0x800586 <pxCurrentTCB>
    1734:	b0 91 87 05 	lds	r27, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    1738:	cd 91       	ld	r28, X+
    173a:	cd bf       	out	0x3d, r28	; 61
    173c:	dd 91       	ld	r29, X+
    173e:	de bf       	out	0x3e, r29	; 62
    1740:	ff 91       	pop	r31
    1742:	ef 91       	pop	r30
    1744:	df 91       	pop	r29
    1746:	cf 91       	pop	r28
    1748:	bf 91       	pop	r27
    174a:	af 91       	pop	r26
    174c:	9f 91       	pop	r25
    174e:	8f 91       	pop	r24
    1750:	7f 91       	pop	r23
    1752:	6f 91       	pop	r22
    1754:	5f 91       	pop	r21
    1756:	4f 91       	pop	r20
    1758:	3f 91       	pop	r19
    175a:	2f 91       	pop	r18
    175c:	1f 91       	pop	r17
    175e:	0f 91       	pop	r16
    1760:	ff 90       	pop	r15
    1762:	ef 90       	pop	r14
    1764:	df 90       	pop	r13
    1766:	cf 90       	pop	r12
    1768:	bf 90       	pop	r11
    176a:	af 90       	pop	r10
    176c:	9f 90       	pop	r9
    176e:	8f 90       	pop	r8
    1770:	7f 90       	pop	r7
    1772:	6f 90       	pop	r6
    1774:	5f 90       	pop	r5
    1776:	4f 90       	pop	r4
    1778:	3f 90       	pop	r3
    177a:	2f 90       	pop	r2
    177c:	1f 90       	pop	r1
    177e:	0f 90       	pop	r0
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1784:	08 95       	ret

00001786 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1786:	cf 93       	push	r28
    1788:	df 93       	push	r29
    178a:	00 d0       	rcall	.+0      	; 0x178c <prvSetupTimerInterrupt+0x6>
    178c:	00 d0       	rcall	.+0      	; 0x178e <prvSetupTimerInterrupt+0x8>
    178e:	00 d0       	rcall	.+0      	; 0x1790 <prvSetupTimerInterrupt+0xa>
    1790:	cd b7       	in	r28, 0x3d	; 61
    1792:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    1794:	89 e9       	ldi	r24, 0x99	; 153
    1796:	99 e3       	ldi	r25, 0x39	; 57
    1798:	a0 e0       	ldi	r26, 0x00	; 0
    179a:	b0 e0       	ldi	r27, 0x00	; 0
    179c:	89 83       	std	Y+1, r24	; 0x01
    179e:	9a 83       	std	Y+2, r25	; 0x02
    17a0:	ab 83       	std	Y+3, r26	; 0x03
    17a2:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	ab 81       	ldd	r26, Y+3	; 0x03
    17aa:	bc 81       	ldd	r27, Y+4	; 0x04
    17ac:	68 94       	set
    17ae:	15 f8       	bld	r1, 5
    17b0:	b6 95       	lsr	r27
    17b2:	a7 95       	ror	r26
    17b4:	97 95       	ror	r25
    17b6:	87 95       	ror	r24
    17b8:	16 94       	lsr	r1
    17ba:	d1 f7       	brne	.-12     	; 0x17b0 <prvSetupTimerInterrupt+0x2a>
    17bc:	89 83       	std	Y+1, r24	; 0x01
    17be:	9a 83       	std	Y+2, r25	; 0x02
    17c0:	ab 83       	std	Y+3, r26	; 0x03
    17c2:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	9a 81       	ldd	r25, Y+2	; 0x02
    17c8:	ab 81       	ldd	r26, Y+3	; 0x03
    17ca:	bc 81       	ldd	r27, Y+4	; 0x04
    17cc:	01 97       	sbiw	r24, 0x01	; 1
    17ce:	a1 09       	sbc	r26, r1
    17d0:	b1 09       	sbc	r27, r1
    17d2:	89 83       	std	Y+1, r24	; 0x01
    17d4:	9a 83       	std	Y+2, r25	; 0x02
    17d6:	ab 83       	std	Y+3, r26	; 0x03
    17d8:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	ab 81       	ldd	r26, Y+3	; 0x03
    17e4:	bc 81       	ldd	r27, Y+4	; 0x04
    17e6:	89 2f       	mov	r24, r25
    17e8:	9a 2f       	mov	r25, r26
    17ea:	ab 2f       	mov	r26, r27
    17ec:	bb 27       	eor	r27, r27
    17ee:	89 83       	std	Y+1, r24	; 0x01
    17f0:	9a 83       	std	Y+2, r25	; 0x02
    17f2:	ab 83       	std	Y+3, r26	; 0x03
    17f4:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    17fa:	89 e8       	ldi	r24, 0x89	; 137
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	2e 81       	ldd	r18, Y+6	; 0x06
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1804:	88 e8       	ldi	r24, 0x88	; 136
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2d 81       	ldd	r18, Y+5	; 0x05
    180a:	fc 01       	movw	r30, r24
    180c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    180e:	8b e0       	ldi	r24, 0x0B	; 11
    1810:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1812:	81 e8       	ldi	r24, 0x81	; 129
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	2d 81       	ldd	r18, Y+5	; 0x05
    1818:	fc 01       	movw	r30, r24
    181a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    181c:	8f e6       	ldi	r24, 0x6F	; 111
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	fc 01       	movw	r30, r24
    1822:	80 81       	ld	r24, Z
    1824:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1826:	8d 81       	ldd	r24, Y+5	; 0x05
    1828:	82 60       	ori	r24, 0x02	; 2
    182a:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    182c:	8f e6       	ldi	r24, 0x6F	; 111
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	2d 81       	ldd	r18, Y+5	; 0x05
    1832:	fc 01       	movw	r30, r24
    1834:	20 83       	st	Z, r18
}
    1836:	26 96       	adiw	r28, 0x06	; 6
    1838:	0f b6       	in	r0, 0x3f	; 63
    183a:	f8 94       	cli
    183c:	de bf       	out	0x3e, r29	; 62
    183e:	0f be       	out	0x3f, r0	; 63
    1840:	cd bf       	out	0x3d, r28	; 61
    1842:	df 91       	pop	r29
    1844:	cf 91       	pop	r28
    1846:	08 95       	ret

00001848 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    1848:	0e 94 66 0b 	call	0x16cc	; 0x16cc <vPortYieldFromTick>
		asm volatile ( "reti" );
    184c:	18 95       	reti

0000184e <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    184e:	cf 93       	push	r28
    1850:	df 93       	push	r29
    1852:	00 d0       	rcall	.+0      	; 0x1854 <pvPortMalloc+0x6>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <pvPortMalloc+0x8>
    1856:	cd b7       	in	r28, 0x3d	; 61
    1858:	de b7       	in	r29, 0x3e	; 62
    185a:	9c 83       	std	Y+4, r25	; 0x04
    185c:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    185e:	1a 82       	std	Y+2, r1	; 0x02
    1860:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    1862:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    1866:	80 91 80 05 	lds	r24, 0x0580	; 0x800580 <pucAlignedHeap.1965>
    186a:	90 91 81 05 	lds	r25, 0x0581	; 0x800581 <pucAlignedHeap.1965+0x1>
    186e:	89 2b       	or	r24, r25
    1870:	31 f4       	brne	.+12     	; 0x187e <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    1872:	87 e9       	ldi	r24, 0x97	; 151
    1874:	91 e0       	ldi	r25, 0x01	; 1
    1876:	90 93 81 05 	sts	0x0581, r25	; 0x800581 <pucAlignedHeap.1965+0x1>
    187a:	80 93 80 05 	sts	0x0580, r24	; 0x800580 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    187e:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <xNextFreeByte>
    1882:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <xNextFreeByte+0x1>
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	82 0f       	add	r24, r18
    188c:	93 1f       	adc	r25, r19
    188e:	87 3e       	cpi	r24, 0xE7	; 231
    1890:	93 40       	sbci	r25, 0x03	; 3
    1892:	38 f5       	brcc	.+78     	; 0x18e2 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    1894:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <xNextFreeByte>
    1898:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <xNextFreeByte+0x1>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	28 0f       	add	r18, r24
    18a2:	39 1f       	adc	r19, r25
    18a4:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <xNextFreeByte>
    18a8:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    18ac:	82 17       	cp	r24, r18
    18ae:	93 07       	cpc	r25, r19
    18b0:	c0 f4       	brcc	.+48     	; 0x18e2 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    18b2:	20 91 80 05 	lds	r18, 0x0580	; 0x800580 <pucAlignedHeap.1965>
    18b6:	30 91 81 05 	lds	r19, 0x0581	; 0x800581 <pucAlignedHeap.1965+0x1>
    18ba:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <xNextFreeByte>
    18be:	90 91 7f 05 	lds	r25, 0x057F	; 0x80057f <xNextFreeByte+0x1>
    18c2:	82 0f       	add	r24, r18
    18c4:	93 1f       	adc	r25, r19
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    18ca:	20 91 7e 05 	lds	r18, 0x057E	; 0x80057e <xNextFreeByte>
    18ce:	30 91 7f 05 	lds	r19, 0x057F	; 0x80057f <xNextFreeByte+0x1>
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	82 0f       	add	r24, r18
    18d8:	93 1f       	adc	r25, r19
    18da:	90 93 7f 05 	sts	0x057F, r25	; 0x80057f <xNextFreeByte+0x1>
    18de:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    18e2:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
}
    18ea:	0f 90       	pop	r0
    18ec:	0f 90       	pop	r0
    18ee:	0f 90       	pop	r0
    18f0:	0f 90       	pop	r0
    18f2:	df 91       	pop	r29
    18f4:	cf 91       	pop	r28
    18f6:	08 95       	ret

000018f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    18f8:	cf 93       	push	r28
    18fa:	df 93       	push	r29
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <vPortFree+0x6>
    18fe:	cd b7       	in	r28, 0x3d	; 61
    1900:	de b7       	in	r29, 0x3e	; 62
    1902:	9a 83       	std	Y+2, r25	; 0x02
    1904:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1906:	0f 90       	pop	r0
    1908:	0f 90       	pop	r0
    190a:	df 91       	pop	r29
    190c:	cf 91       	pop	r28
    190e:	08 95       	ret

00001910 <_serial_tx_int_on>:
			_serial_tx_int_on(handle->ser_UDR);
			return BUFFER_OK;
		}
	}
	return BUFFER_FULL;
}
    1910:	cf 93       	push	r28
    1912:	df 93       	push	r29
    1914:	00 d0       	rcall	.+0      	; 0x1916 <_serial_tx_int_on+0x6>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
    191e:	89 81       	ldd	r24, Y+1	; 0x01
    1920:	9a 81       	ldd	r25, Y+2	; 0x02
    1922:	05 97       	sbiw	r24, 0x05	; 5
    1924:	29 81       	ldd	r18, Y+1	; 0x01
    1926:	3a 81       	ldd	r19, Y+2	; 0x02
    1928:	25 50       	subi	r18, 0x05	; 5
    192a:	31 09       	sbc	r19, r1
    192c:	f9 01       	movw	r30, r18
    192e:	20 81       	ld	r18, Z
    1930:	20 62       	ori	r18, 0x20	; 32
    1932:	fc 01       	movw	r30, r24
    1934:	20 83       	st	Z, r18
    1936:	0f 90       	pop	r0
    1938:	0f 90       	pop	r0
    193a:	df 91       	pop	r29
    193c:	cf 91       	pop	r28
    193e:	08 95       	ret

00001940 <serial_new_instance>:
    1940:	8f 92       	push	r8
    1942:	9f 92       	push	r9
    1944:	af 92       	push	r10
    1946:	bf 92       	push	r11
    1948:	cf 92       	push	r12
    194a:	df 92       	push	r13
    194c:	ef 92       	push	r14
    194e:	0f 93       	push	r16
    1950:	1f 93       	push	r17
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	cd b7       	in	r28, 0x3d	; 61
    1958:	de b7       	in	r29, 0x3e	; 62
    195a:	65 97       	sbiw	r28, 0x15	; 21
    195c:	0f b6       	in	r0, 0x3f	; 63
    195e:	f8 94       	cli
    1960:	de bf       	out	0x3e, r29	; 62
    1962:	0f be       	out	0x3f, r0	; 63
    1964:	cd bf       	out	0x3d, r28	; 61
    1966:	8c 83       	std	Y+4, r24	; 0x04
    1968:	4d 83       	std	Y+5, r20	; 0x05
    196a:	5e 83       	std	Y+6, r21	; 0x06
    196c:	6f 83       	std	Y+7, r22	; 0x07
    196e:	78 87       	std	Y+8, r23	; 0x08
    1970:	29 87       	std	Y+9, r18	; 0x09
    1972:	0a 87       	std	Y+10, r16	; 0x0a
    1974:	eb 86       	std	Y+11, r14	; 0x0b
    1976:	dd 86       	std	Y+13, r13	; 0x0d
    1978:	cc 86       	std	Y+12, r12	; 0x0c
    197a:	bf 86       	std	Y+15, r11	; 0x0f
    197c:	ae 86       	std	Y+14, r10	; 0x0e
    197e:	99 8a       	std	Y+17, r9	; 0x11
    1980:	88 8a       	std	Y+16, r8	; 0x10
    1982:	88 e0       	ldi	r24, 0x08	; 8
    1984:	90 e0       	ldi	r25, 0x00	; 0
    1986:	0e 94 da 1c 	call	0x39b4	; 0x39b4 <malloc>
    198a:	9a 83       	std	Y+2, r25	; 0x02
    198c:	89 83       	std	Y+1, r24	; 0x01
    198e:	8c 81       	ldd	r24, Y+4	; 0x04
    1990:	88 2f       	mov	r24, r24
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	8e 57       	subi	r24, 0x7E	; 126
    199a:	9a 4f       	sbci	r25, 0xFA	; 250
    199c:	29 81       	ldd	r18, Y+1	; 0x01
    199e:	3a 81       	ldd	r19, Y+2	; 0x02
    19a0:	fc 01       	movw	r30, r24
    19a2:	31 83       	std	Z+1, r19	; 0x01
    19a4:	20 83       	st	Z, r18
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	88 2f       	mov	r24, r24
    19aa:	90 e0       	ldi	r25, 0x00	; 0
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	88 5d       	subi	r24, 0xD8	; 216
    19b2:	9e 4f       	sbci	r25, 0xFE	; 254
    19b4:	fc 01       	movw	r30, r24
    19b6:	20 81       	ld	r18, Z
    19b8:	31 81       	ldd	r19, Z+1	; 0x01
    19ba:	89 81       	ldd	r24, Y+1	; 0x01
    19bc:	9a 81       	ldd	r25, Y+2	; 0x02
    19be:	fc 01       	movw	r30, r24
    19c0:	31 83       	std	Z+1, r19	; 0x01
    19c2:	20 83       	st	Z, r18
    19c4:	89 81       	ldd	r24, Y+1	; 0x01
    19c6:	9a 81       	ldd	r25, Y+2	; 0x02
    19c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    19ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    19cc:	fc 01       	movw	r30, r24
    19ce:	33 83       	std	Z+3, r19	; 0x03
    19d0:	22 83       	std	Z+2, r18	; 0x02
    19d2:	89 81       	ldd	r24, Y+1	; 0x01
    19d4:	9a 81       	ldd	r25, Y+2	; 0x02
    19d6:	2c 85       	ldd	r18, Y+12	; 0x0c
    19d8:	3d 85       	ldd	r19, Y+13	; 0x0d
    19da:	fc 01       	movw	r30, r24
    19dc:	35 83       	std	Z+5, r19	; 0x05
    19de:	24 83       	std	Z+4, r18	; 0x04
    19e0:	89 81       	ldd	r24, Y+1	; 0x01
    19e2:	9a 81       	ldd	r25, Y+2	; 0x02
    19e4:	28 89       	ldd	r18, Y+16	; 0x10
    19e6:	39 89       	ldd	r19, Y+17	; 0x11
    19e8:	fc 01       	movw	r30, r24
    19ea:	37 83       	std	Z+7, r19	; 0x07
    19ec:	26 83       	std	Z+6, r18	; 0x06
    19ee:	8f e5       	ldi	r24, 0x5F	; 95
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	fc 01       	movw	r30, r24
    19f4:	80 81       	ld	r24, Z
    19f6:	8b 83       	std	Y+3, r24	; 0x03
    19f8:	f8 94       	cli
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	9a 81       	ldd	r25, Y+2	; 0x02
    19fe:	fc 01       	movw	r30, r24
    1a00:	80 81       	ld	r24, Z
    1a02:	91 81       	ldd	r25, Z+1	; 0x01
    1a04:	06 97       	sbiw	r24, 0x06	; 6
    1a06:	29 81       	ldd	r18, Y+1	; 0x01
    1a08:	3a 81       	ldd	r19, Y+2	; 0x02
    1a0a:	f9 01       	movw	r30, r18
    1a0c:	20 81       	ld	r18, Z
    1a0e:	31 81       	ldd	r19, Z+1	; 0x01
    1a10:	26 50       	subi	r18, 0x06	; 6
    1a12:	31 09       	sbc	r19, r1
    1a14:	f9 01       	movw	r30, r18
    1a16:	20 81       	ld	r18, Z
    1a18:	22 60       	ori	r18, 0x02	; 2
    1a1a:	fc 01       	movw	r30, r24
    1a1c:	20 83       	st	Z, r18
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	fc 01       	movw	r30, r24
    1a24:	80 81       	ld	r24, Z
    1a26:	91 81       	ldd	r25, Z+1	; 0x01
    1a28:	8c 01       	movw	r16, r24
    1a2a:	02 50       	subi	r16, 0x02	; 2
    1a2c:	11 09       	sbc	r17, r1
    1a2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a30:	9e 81       	ldd	r25, Y+6	; 0x06
    1a32:	af 81       	ldd	r26, Y+7	; 0x07
    1a34:	b8 85       	ldd	r27, Y+8	; 0x08
    1a36:	88 0f       	add	r24, r24
    1a38:	99 1f       	adc	r25, r25
    1a3a:	aa 1f       	adc	r26, r26
    1a3c:	bb 1f       	adc	r27, r27
    1a3e:	88 0f       	add	r24, r24
    1a40:	99 1f       	adc	r25, r25
    1a42:	aa 1f       	adc	r26, r26
    1a44:	bb 1f       	adc	r27, r27
    1a46:	88 0f       	add	r24, r24
    1a48:	99 1f       	adc	r25, r25
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	bb 1f       	adc	r27, r27
    1a4e:	9c 01       	movw	r18, r24
    1a50:	ad 01       	movw	r20, r26
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a1 ee       	ldi	r26, 0xE1	; 225
    1a58:	b0 e0       	ldi	r27, 0x00	; 0
    1a5a:	bc 01       	movw	r22, r24
    1a5c:	cd 01       	movw	r24, r26
    1a5e:	0e 94 9e 1c 	call	0x393c	; 0x393c <__udivmodsi4>
    1a62:	da 01       	movw	r26, r20
    1a64:	c9 01       	movw	r24, r18
    1a66:	81 50       	subi	r24, 0x01	; 1
    1a68:	f8 01       	movw	r30, r16
    1a6a:	80 83       	st	Z, r24
    1a6c:	89 81       	ldd	r24, Y+1	; 0x01
    1a6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1a70:	fc 01       	movw	r30, r24
    1a72:	80 81       	ld	r24, Z
    1a74:	91 81       	ldd	r25, Z+1	; 0x01
    1a76:	05 97       	sbiw	r24, 0x05	; 5
    1a78:	28 e9       	ldi	r18, 0x98	; 152
    1a7a:	fc 01       	movw	r30, r24
    1a7c:	20 83       	st	Z, r18
    1a7e:	89 81       	ldd	r24, Y+1	; 0x01
    1a80:	9a 81       	ldd	r25, Y+2	; 0x02
    1a82:	fc 01       	movw	r30, r24
    1a84:	80 81       	ld	r24, Z
    1a86:	91 81       	ldd	r25, Z+1	; 0x01
    1a88:	04 97       	sbiw	r24, 0x04	; 4
    1a8a:	26 e0       	ldi	r18, 0x06	; 6
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    1a90:	8f e5       	ldi	r24, 0x5F	; 95
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	fc 01       	movw	r30, r24
    1a98:	20 83       	st	Z, r18
    1a9a:	89 81       	ldd	r24, Y+1	; 0x01
    1a9c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a9e:	65 96       	adiw	r28, 0x15	; 21
    1aa0:	0f b6       	in	r0, 0x3f	; 63
    1aa2:	f8 94       	cli
    1aa4:	de bf       	out	0x3e, r29	; 62
    1aa6:	0f be       	out	0x3f, r0	; 63
    1aa8:	cd bf       	out	0x3d, r28	; 61
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ef 90       	pop	r14
    1ab4:	df 90       	pop	r13
    1ab6:	cf 90       	pop	r12
    1ab8:	bf 90       	pop	r11
    1aba:	af 90       	pop	r10
    1abc:	9f 90       	pop	r9
    1abe:	8f 90       	pop	r8
    1ac0:	08 95       	ret

00001ac2 <serial_send_bytes>:

/*-----------------------------------------------------------*/
uint8_t serial_send_bytes(serial_p handle, uint8_t *buf, uint8_t len )
{
    1ac2:	cf 93       	push	r28
    1ac4:	df 93       	push	r29
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <serial_send_bytes+0x6>
    1ac8:	00 d0       	rcall	.+0      	; 0x1aca <serial_send_bytes+0x8>
    1aca:	00 d0       	rcall	.+0      	; 0x1acc <serial_send_bytes+0xa>
    1acc:	cd b7       	in	r28, 0x3d	; 61
    1ace:	de b7       	in	r29, 0x3e	; 62
    1ad0:	9b 83       	std	Y+3, r25	; 0x03
    1ad2:	8a 83       	std	Y+2, r24	; 0x02
    1ad4:	7d 83       	std	Y+5, r23	; 0x05
    1ad6:	6c 83       	std	Y+4, r22	; 0x04
    1ad8:	4e 83       	std	Y+6, r20	; 0x06
	// Check if buffer is full
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
    1ada:	8a 81       	ldd	r24, Y+2	; 0x02
    1adc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ade:	fc 01       	movw	r30, r24
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	89 2b       	or	r24, r25
    1ae6:	a9 f0       	breq	.+42     	; 0x1b12 <serial_send_bytes+0x50>
    1ae8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aea:	28 2f       	mov	r18, r24
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	8a 81       	ldd	r24, Y+2	; 0x02
    1af0:	9b 81       	ldd	r25, Y+3	; 0x03
    1af2:	fc 01       	movw	r30, r24
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	fc 01       	movw	r30, r24
    1afa:	82 89       	ldd	r24, Z+18	; 0x12
    1afc:	88 2f       	mov	r24, r24
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	40 e1       	ldi	r20, 0x10	; 16
    1b02:	50 e0       	ldi	r21, 0x00	; 0
    1b04:	ba 01       	movw	r22, r20
    1b06:	68 1b       	sub	r22, r24
    1b08:	79 0b       	sbc	r23, r25
    1b0a:	cb 01       	movw	r24, r22
    1b0c:	82 17       	cp	r24, r18
    1b0e:	93 07       	cpc	r25, r19
    1b10:	54 f0       	brlt	.+20     	; 0x1b26 <serial_send_bytes+0x64>
    1b12:	8a 81       	ldd	r24, Y+2	; 0x02
    1b14:	9b 81       	ldd	r25, Y+3	; 0x03
    1b16:	fc 01       	movw	r30, r24
    1b18:	82 81       	ldd	r24, Z+2	; 0x02
    1b1a:	93 81       	ldd	r25, Z+3	; 0x03
    1b1c:	89 2b       	or	r24, r25
    1b1e:	29 f4       	brne	.+10     	; 0x1b2a <serial_send_bytes+0x68>
    1b20:	8e 81       	ldd	r24, Y+6	; 0x06
    1b22:	82 30       	cpi	r24, 0x02	; 2
    1b24:	10 f0       	brcs	.+4      	; 0x1b2a <serial_send_bytes+0x68>
		return BUFFER_FULL;
    1b26:	82 e0       	ldi	r24, 0x02	; 2
    1b28:	22 c0       	rjmp	.+68     	; 0x1b6e <serial_send_bytes+0xac>
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1b2a:	19 82       	std	Y+1, r1	; 0x01
    1b2c:	14 c0       	rjmp	.+40     	; 0x1b56 <serial_send_bytes+0x94>
		buffer_put_item(handle->_tx_buf, buf[i]);
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	88 2f       	mov	r24, r24
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	2c 81       	ldd	r18, Y+4	; 0x04
    1b36:	3d 81       	ldd	r19, Y+5	; 0x05
    1b38:	82 0f       	add	r24, r18
    1b3a:	93 1f       	adc	r25, r19
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	20 81       	ld	r18, Z
    1b40:	8a 81       	ldd	r24, Y+2	; 0x02
    1b42:	9b 81       	ldd	r25, Y+3	; 0x03
    1b44:	fc 01       	movw	r30, r24
    1b46:	82 81       	ldd	r24, Z+2	; 0x02
    1b48:	93 81       	ldd	r25, Z+3	; 0x03
    1b4a:	62 2f       	mov	r22, r18
    1b4c:	0e 94 8a 07 	call	0xf14	; 0xf14 <buffer_put_item>
	if ( ((handle->_tx_buf != 0) && (len > (BUFFER_SIZE - handle->_tx_buf->no_in_buffer))) || ((handle->_tx_buf == 0) && (len > 1)) ) {
		return BUFFER_FULL;
	}
	
	// Put in the tx buffer
	for (uint8_t i = 0; i < len; i++) {
    1b50:	89 81       	ldd	r24, Y+1	; 0x01
    1b52:	8f 5f       	subi	r24, 0xFF	; 255
    1b54:	89 83       	std	Y+1, r24	; 0x01
    1b56:	99 81       	ldd	r25, Y+1	; 0x01
    1b58:	8e 81       	ldd	r24, Y+6	; 0x06
    1b5a:	98 17       	cp	r25, r24
    1b5c:	40 f3       	brcs	.-48     	; 0x1b2e <serial_send_bytes+0x6c>
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	9b 81       	ldd	r25, Y+3	; 0x03
    1b62:	fc 01       	movw	r30, r24
    1b64:	80 81       	ld	r24, Z
    1b66:	91 81       	ldd	r25, Z+1	; 0x01
    1b68:	0e 94 88 0c 	call	0x1910	; 0x1910 <_serial_tx_int_on>
	return BUFFER_OK;
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
}
    1b6e:	26 96       	adiw	r28, 0x06	; 6
    1b70:	0f b6       	in	r0, 0x3f	; 63
    1b72:	f8 94       	cli
    1b74:	de bf       	out	0x3e, r29	; 62
    1b76:	0f be       	out	0x3f, r0	; 63
    1b78:	cd bf       	out	0x3d, r28	; 61
    1b7a:	df 91       	pop	r29
    1b7c:	cf 91       	pop	r28
    1b7e:	08 95       	ret

00001b80 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1b80:	1f 92       	push	r1
    1b82:	0f 92       	push	r0
    1b84:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b88:	0f 92       	push	r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	2f 93       	push	r18
    1b8e:	3f 93       	push	r19
    1b90:	4f 93       	push	r20
    1b92:	5f 93       	push	r21
    1b94:	6f 93       	push	r22
    1b96:	7f 93       	push	r23
    1b98:	8f 93       	push	r24
    1b9a:	9f 93       	push	r25
    1b9c:	af 93       	push	r26
    1b9e:	bf 93       	push	r27
    1ba0:	ef 93       	push	r30
    1ba2:	ff 93       	push	r31
    1ba4:	cf 93       	push	r28
    1ba6:	df 93       	push	r29
    1ba8:	1f 92       	push	r1
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1bae:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1bb2:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1bb6:	89 2b       	or	r24, r25
    1bb8:	31 f1       	breq	.+76     	; 0x1c06 <__vector_20+0x86>
		item = UDR0;
    1bba:	86 ec       	ldi	r24, 0xC6	; 198
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	80 81       	ld	r24, Z
    1bc2:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1bc4:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1bc8:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1bcc:	fc 01       	movw	r30, r24
    1bce:	84 81       	ldd	r24, Z+4	; 0x04
    1bd0:	95 81       	ldd	r25, Z+5	; 0x05
    1bd2:	69 81       	ldd	r22, Y+1	; 0x01
    1bd4:	0e 94 8a 07 	call	0xf14	; 0xf14 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1bd8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1bdc:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1be0:	fc 01       	movw	r30, r24
    1be2:	86 81       	ldd	r24, Z+6	; 0x06
    1be4:	97 81       	ldd	r25, Z+7	; 0x07
    1be6:	89 2b       	or	r24, r25
    1be8:	71 f0       	breq	.+28     	; 0x1c06 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1bea:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1bee:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1bf2:	fc 01       	movw	r30, r24
    1bf4:	26 81       	ldd	r18, Z+6	; 0x06
    1bf6:	37 81       	ldd	r19, Z+7	; 0x07
    1bf8:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1bfc:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1c00:	69 81       	ldd	r22, Y+1	; 0x01
    1c02:	f9 01       	movw	r30, r18
    1c04:	09 95       	icall
		}
	}
}
    1c06:	0f 90       	pop	r0
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	ff 91       	pop	r31
    1c0e:	ef 91       	pop	r30
    1c10:	bf 91       	pop	r27
    1c12:	af 91       	pop	r26
    1c14:	9f 91       	pop	r25
    1c16:	8f 91       	pop	r24
    1c18:	7f 91       	pop	r23
    1c1a:	6f 91       	pop	r22
    1c1c:	5f 91       	pop	r21
    1c1e:	4f 91       	pop	r20
    1c20:	3f 91       	pop	r19
    1c22:	2f 91       	pop	r18
    1c24:	0f 90       	pop	r0
    1c26:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c2a:	0f 90       	pop	r0
    1c2c:	1f 90       	pop	r1
    1c2e:	18 95       	reti

00001c30 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1c30:	1f 92       	push	r1
    1c32:	0f 92       	push	r0
    1c34:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c38:	0f 92       	push	r0
    1c3a:	11 24       	eor	r1, r1
    1c3c:	2f 93       	push	r18
    1c3e:	3f 93       	push	r19
    1c40:	4f 93       	push	r20
    1c42:	5f 93       	push	r21
    1c44:	6f 93       	push	r22
    1c46:	7f 93       	push	r23
    1c48:	8f 93       	push	r24
    1c4a:	9f 93       	push	r25
    1c4c:	af 93       	push	r26
    1c4e:	bf 93       	push	r27
    1c50:	ef 93       	push	r30
    1c52:	ff 93       	push	r31
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	1f 92       	push	r1
    1c5a:	cd b7       	in	r28, 0x3d	; 61
    1c5c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1c5e:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1c62:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1c66:	89 2b       	or	r24, r25
    1c68:	f9 f0       	breq	.+62     	; 0x1ca8 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1c6a:	80 91 82 05 	lds	r24, 0x0582	; 0x800582 <_ser_handle>
    1c6e:	90 91 83 05 	lds	r25, 0x0583	; 0x800583 <_ser_handle+0x1>
    1c72:	fc 01       	movw	r30, r24
    1c74:	82 81       	ldd	r24, Z+2	; 0x02
    1c76:	93 81       	ldd	r25, Z+3	; 0x03
    1c78:	9e 01       	movw	r18, r28
    1c7a:	2f 5f       	subi	r18, 0xFF	; 255
    1c7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c7e:	b9 01       	movw	r22, r18
    1c80:	0e 94 42 07 	call	0xe84	; 0xe84 <buffer_get_item>
    1c84:	88 23       	and	r24, r24
    1c86:	31 f4       	brne	.+12     	; 0x1c94 <__vector_21+0x64>
			UDR0 = item;
    1c88:	86 ec       	ldi	r24, 0xC6	; 198
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	29 81       	ldd	r18, Y+1	; 0x01
    1c8e:	fc 01       	movw	r30, r24
    1c90:	20 83       	st	Z, r18
    1c92:	13 c0       	rjmp	.+38     	; 0x1cba <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1c94:	81 ec       	ldi	r24, 0xC1	; 193
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	21 ec       	ldi	r18, 0xC1	; 193
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	f9 01       	movw	r30, r18
    1c9e:	20 81       	ld	r18, Z
    1ca0:	2f 7d       	andi	r18, 0xDF	; 223
    1ca2:	fc 01       	movw	r30, r24
    1ca4:	20 83       	st	Z, r18
    1ca6:	09 c0       	rjmp	.+18     	; 0x1cba <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1ca8:	81 ec       	ldi	r24, 0xC1	; 193
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	21 ec       	ldi	r18, 0xC1	; 193
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	f9 01       	movw	r30, r18
    1cb2:	20 81       	ld	r18, Z
    1cb4:	2f 7d       	andi	r18, 0xDF	; 223
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	20 83       	st	Z, r18
	}
}
    1cba:	0f 90       	pop	r0
    1cbc:	df 91       	pop	r29
    1cbe:	cf 91       	pop	r28
    1cc0:	ff 91       	pop	r31
    1cc2:	ef 91       	pop	r30
    1cc4:	bf 91       	pop	r27
    1cc6:	af 91       	pop	r26
    1cc8:	9f 91       	pop	r25
    1cca:	8f 91       	pop	r24
    1ccc:	7f 91       	pop	r23
    1cce:	6f 91       	pop	r22
    1cd0:	5f 91       	pop	r21
    1cd2:	4f 91       	pop	r20
    1cd4:	3f 91       	pop	r19
    1cd6:	2f 91       	pop	r18
    1cd8:	0f 90       	pop	r0
    1cda:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1cde:	0f 90       	pop	r0
    1ce0:	1f 90       	pop	r1
    1ce2:	18 95       	reti

00001ce4 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1ce4:	1f 92       	push	r1
    1ce6:	0f 92       	push	r0
    1ce8:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1cec:	0f 92       	push	r0
    1cee:	11 24       	eor	r1, r1
    1cf0:	2f 93       	push	r18
    1cf2:	3f 93       	push	r19
    1cf4:	4f 93       	push	r20
    1cf6:	5f 93       	push	r21
    1cf8:	6f 93       	push	r22
    1cfa:	7f 93       	push	r23
    1cfc:	8f 93       	push	r24
    1cfe:	9f 93       	push	r25
    1d00:	af 93       	push	r26
    1d02:	bf 93       	push	r27
    1d04:	ef 93       	push	r30
    1d06:	ff 93       	push	r31
    1d08:	cf 93       	push	r28
    1d0a:	df 93       	push	r29
    1d0c:	1f 92       	push	r1
    1d0e:	cd b7       	in	r28, 0x3d	; 61
    1d10:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1d12:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1d16:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1d1a:	89 2b       	or	r24, r25
    1d1c:	31 f1       	breq	.+76     	; 0x1d6a <__vector_28+0x86>
		item = UDR1;
    1d1e:	8e ec       	ldi	r24, 0xCE	; 206
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	fc 01       	movw	r30, r24
    1d24:	80 81       	ld	r24, Z
    1d26:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1d28:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1d2c:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1d30:	fc 01       	movw	r30, r24
    1d32:	84 81       	ldd	r24, Z+4	; 0x04
    1d34:	95 81       	ldd	r25, Z+5	; 0x05
    1d36:	69 81       	ldd	r22, Y+1	; 0x01
    1d38:	0e 94 8a 07 	call	0xf14	; 0xf14 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1d3c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1d40:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1d44:	fc 01       	movw	r30, r24
    1d46:	86 81       	ldd	r24, Z+6	; 0x06
    1d48:	97 81       	ldd	r25, Z+7	; 0x07
    1d4a:	89 2b       	or	r24, r25
    1d4c:	71 f0       	breq	.+28     	; 0x1d6a <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1d4e:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1d52:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1d56:	fc 01       	movw	r30, r24
    1d58:	26 81       	ldd	r18, Z+6	; 0x06
    1d5a:	37 81       	ldd	r19, Z+7	; 0x07
    1d5c:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1d60:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1d64:	69 81       	ldd	r22, Y+1	; 0x01
    1d66:	f9 01       	movw	r30, r18
    1d68:	09 95       	icall
		}
	}
}
    1d6a:	0f 90       	pop	r0
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	ff 91       	pop	r31
    1d72:	ef 91       	pop	r30
    1d74:	bf 91       	pop	r27
    1d76:	af 91       	pop	r26
    1d78:	9f 91       	pop	r25
    1d7a:	8f 91       	pop	r24
    1d7c:	7f 91       	pop	r23
    1d7e:	6f 91       	pop	r22
    1d80:	5f 91       	pop	r21
    1d82:	4f 91       	pop	r20
    1d84:	3f 91       	pop	r19
    1d86:	2f 91       	pop	r18
    1d88:	0f 90       	pop	r0
    1d8a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d8e:	0f 90       	pop	r0
    1d90:	1f 90       	pop	r1
    1d92:	18 95       	reti

00001d94 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1d94:	1f 92       	push	r1
    1d96:	0f 92       	push	r0
    1d98:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1d9c:	0f 92       	push	r0
    1d9e:	11 24       	eor	r1, r1
    1da0:	2f 93       	push	r18
    1da2:	3f 93       	push	r19
    1da4:	4f 93       	push	r20
    1da6:	5f 93       	push	r21
    1da8:	6f 93       	push	r22
    1daa:	7f 93       	push	r23
    1dac:	8f 93       	push	r24
    1dae:	9f 93       	push	r25
    1db0:	af 93       	push	r26
    1db2:	bf 93       	push	r27
    1db4:	ef 93       	push	r30
    1db6:	ff 93       	push	r31
    1db8:	cf 93       	push	r28
    1dba:	df 93       	push	r29
    1dbc:	1f 92       	push	r1
    1dbe:	cd b7       	in	r28, 0x3d	; 61
    1dc0:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1dc2:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1dc6:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1dca:	89 2b       	or	r24, r25
    1dcc:	f9 f0       	breq	.+62     	; 0x1e0c <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1dce:	80 91 84 05 	lds	r24, 0x0584	; 0x800584 <_ser_handle+0x2>
    1dd2:	90 91 85 05 	lds	r25, 0x0585	; 0x800585 <_ser_handle+0x3>
    1dd6:	fc 01       	movw	r30, r24
    1dd8:	82 81       	ldd	r24, Z+2	; 0x02
    1dda:	93 81       	ldd	r25, Z+3	; 0x03
    1ddc:	9e 01       	movw	r18, r28
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	b9 01       	movw	r22, r18
    1de4:	0e 94 42 07 	call	0xe84	; 0xe84 <buffer_get_item>
    1de8:	88 23       	and	r24, r24
    1dea:	31 f4       	brne	.+12     	; 0x1df8 <__vector_29+0x64>
			UDR1 = item;
    1dec:	8e ec       	ldi	r24, 0xCE	; 206
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	29 81       	ldd	r18, Y+1	; 0x01
    1df2:	fc 01       	movw	r30, r24
    1df4:	20 83       	st	Z, r18
    1df6:	13 c0       	rjmp	.+38     	; 0x1e1e <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1df8:	89 ec       	ldi	r24, 0xC9	; 201
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	29 ec       	ldi	r18, 0xC9	; 201
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	f9 01       	movw	r30, r18
    1e02:	20 81       	ld	r18, Z
    1e04:	2f 7d       	andi	r18, 0xDF	; 223
    1e06:	fc 01       	movw	r30, r24
    1e08:	20 83       	st	Z, r18
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1e0c:	89 ec       	ldi	r24, 0xC9	; 201
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	29 ec       	ldi	r18, 0xC9	; 201
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	f9 01       	movw	r30, r18
    1e16:	20 81       	ld	r18, Z
    1e18:	2f 7d       	andi	r18, 0xDF	; 223
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	20 83       	st	Z, r18
	}
}
    1e1e:	0f 90       	pop	r0
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	ff 91       	pop	r31
    1e26:	ef 91       	pop	r30
    1e28:	bf 91       	pop	r27
    1e2a:	af 91       	pop	r26
    1e2c:	9f 91       	pop	r25
    1e2e:	8f 91       	pop	r24
    1e30:	7f 91       	pop	r23
    1e32:	6f 91       	pop	r22
    1e34:	5f 91       	pop	r21
    1e36:	4f 91       	pop	r20
    1e38:	3f 91       	pop	r19
    1e3a:	2f 91       	pop	r18
    1e3c:	0f 90       	pop	r0
    1e3e:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1e42:	0f 90       	pop	r0
    1e44:	1f 90       	pop	r1
    1e46:	18 95       	reti

00001e48 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1e48:	cf 93       	push	r28
    1e4a:	df 93       	push	r29
    1e4c:	00 d0       	rcall	.+0      	; 0x1e4e <xQueueGenericReset+0x6>
    1e4e:	00 d0       	rcall	.+0      	; 0x1e50 <xQueueGenericReset+0x8>
    1e50:	1f 92       	push	r1
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	6d 83       	std	Y+5, r22	; 0x05
    1e5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	0f 92       	push	r0
    1e6a:	89 81       	ldd	r24, Y+1	; 0x01
    1e6c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e6e:	fc 01       	movw	r30, r24
    1e70:	80 81       	ld	r24, Z
    1e72:	91 81       	ldd	r25, Z+1	; 0x01
    1e74:	29 81       	ldd	r18, Y+1	; 0x01
    1e76:	3a 81       	ldd	r19, Y+2	; 0x02
    1e78:	f9 01       	movw	r30, r18
    1e7a:	23 8d       	ldd	r18, Z+27	; 0x1b
    1e7c:	42 2f       	mov	r20, r18
    1e7e:	50 e0       	ldi	r21, 0x00	; 0
    1e80:	29 81       	ldd	r18, Y+1	; 0x01
    1e82:	3a 81       	ldd	r19, Y+2	; 0x02
    1e84:	f9 01       	movw	r30, r18
    1e86:	24 8d       	ldd	r18, Z+28	; 0x1c
    1e88:	22 2f       	mov	r18, r18
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	42 9f       	mul	r20, r18
    1e8e:	b0 01       	movw	r22, r0
    1e90:	43 9f       	mul	r20, r19
    1e92:	70 0d       	add	r23, r0
    1e94:	52 9f       	mul	r21, r18
    1e96:	70 0d       	add	r23, r0
    1e98:	11 24       	eor	r1, r1
    1e9a:	9b 01       	movw	r18, r22
    1e9c:	28 0f       	add	r18, r24
    1e9e:	39 1f       	adc	r19, r25
    1ea0:	89 81       	ldd	r24, Y+1	; 0x01
    1ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	33 83       	std	Z+3, r19	; 0x03
    1ea8:	22 83       	std	Z+2, r18	; 0x02
    1eaa:	89 81       	ldd	r24, Y+1	; 0x01
    1eac:	9a 81       	ldd	r25, Y+2	; 0x02
    1eae:	fc 01       	movw	r30, r24
    1eb0:	12 8e       	std	Z+26, r1	; 0x1a
    1eb2:	89 81       	ldd	r24, Y+1	; 0x01
    1eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	20 81       	ld	r18, Z
    1eba:	31 81       	ldd	r19, Z+1	; 0x01
    1ebc:	89 81       	ldd	r24, Y+1	; 0x01
    1ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    1ec0:	fc 01       	movw	r30, r24
    1ec2:	35 83       	std	Z+5, r19	; 0x05
    1ec4:	24 83       	std	Z+4, r18	; 0x04
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	9a 81       	ldd	r25, Y+2	; 0x02
    1eca:	fc 01       	movw	r30, r24
    1ecc:	80 81       	ld	r24, Z
    1ece:	91 81       	ldd	r25, Z+1	; 0x01
    1ed0:	29 81       	ldd	r18, Y+1	; 0x01
    1ed2:	3a 81       	ldd	r19, Y+2	; 0x02
    1ed4:	f9 01       	movw	r30, r18
    1ed6:	23 8d       	ldd	r18, Z+27	; 0x1b
    1ed8:	22 2f       	mov	r18, r18
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	a9 01       	movw	r20, r18
    1ede:	41 50       	subi	r20, 0x01	; 1
    1ee0:	51 09       	sbc	r21, r1
    1ee2:	29 81       	ldd	r18, Y+1	; 0x01
    1ee4:	3a 81       	ldd	r19, Y+2	; 0x02
    1ee6:	f9 01       	movw	r30, r18
    1ee8:	24 8d       	ldd	r18, Z+28	; 0x1c
    1eea:	22 2f       	mov	r18, r18
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	42 9f       	mul	r20, r18
    1ef0:	b0 01       	movw	r22, r0
    1ef2:	43 9f       	mul	r20, r19
    1ef4:	70 0d       	add	r23, r0
    1ef6:	52 9f       	mul	r21, r18
    1ef8:	70 0d       	add	r23, r0
    1efa:	11 24       	eor	r1, r1
    1efc:	9b 01       	movw	r18, r22
    1efe:	28 0f       	add	r18, r24
    1f00:	39 1f       	adc	r19, r25
    1f02:	89 81       	ldd	r24, Y+1	; 0x01
    1f04:	9a 81       	ldd	r25, Y+2	; 0x02
    1f06:	fc 01       	movw	r30, r24
    1f08:	37 83       	std	Z+7, r19	; 0x07
    1f0a:	26 83       	std	Z+6, r18	; 0x06
    1f0c:	89 81       	ldd	r24, Y+1	; 0x01
    1f0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f10:	2f ef       	ldi	r18, 0xFF	; 255
    1f12:	fc 01       	movw	r30, r24
    1f14:	25 8f       	std	Z+29, r18	; 0x1d
    1f16:	89 81       	ldd	r24, Y+1	; 0x01
    1f18:	9a 81       	ldd	r25, Y+2	; 0x02
    1f1a:	2f ef       	ldi	r18, 0xFF	; 255
    1f1c:	fc 01       	movw	r30, r24
    1f1e:	26 8f       	std	Z+30, r18	; 0x1e
    1f20:	8d 81       	ldd	r24, Y+5	; 0x05
    1f22:	88 23       	and	r24, r24
    1f24:	81 f4       	brne	.+32     	; 0x1f46 <xQueueGenericReset+0xfe>
    1f26:	89 81       	ldd	r24, Y+1	; 0x01
    1f28:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2a:	fc 01       	movw	r30, r24
    1f2c:	80 85       	ldd	r24, Z+8	; 0x08
    1f2e:	88 23       	and	r24, r24
    1f30:	a1 f0       	breq	.+40     	; 0x1f5a <xQueueGenericReset+0x112>
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	08 96       	adiw	r24, 0x08	; 8
    1f38:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    1f3c:	88 23       	and	r24, r24
    1f3e:	69 f0       	breq	.+26     	; 0x1f5a <xQueueGenericReset+0x112>
    1f40:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    1f44:	0a c0       	rjmp	.+20     	; 0x1f5a <xQueueGenericReset+0x112>
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	08 96       	adiw	r24, 0x08	; 8
    1f4c:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    1f50:	89 81       	ldd	r24, Y+1	; 0x01
    1f52:	9a 81       	ldd	r25, Y+2	; 0x02
    1f54:	41 96       	adiw	r24, 0x11	; 17
    1f56:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    1f5a:	0f 90       	pop	r0
    1f5c:	0f be       	out	0x3f, r0	; 63
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <xQueueGenericCreate>:
    1f70:	0f 93       	push	r16
    1f72:	1f 93       	push	r17
    1f74:	cf 93       	push	r28
    1f76:	df 93       	push	r29
    1f78:	cd b7       	in	r28, 0x3d	; 61
    1f7a:	de b7       	in	r29, 0x3e	; 62
    1f7c:	29 97       	sbiw	r28, 0x09	; 9
    1f7e:	0f b6       	in	r0, 0x3f	; 63
    1f80:	f8 94       	cli
    1f82:	de bf       	out	0x3e, r29	; 62
    1f84:	0f be       	out	0x3f, r0	; 63
    1f86:	cd bf       	out	0x3d, r28	; 61
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	68 87       	std	Y+8, r22	; 0x08
    1f8c:	49 87       	std	Y+9, r20	; 0x09
    1f8e:	88 85       	ldd	r24, Y+8	; 0x08
    1f90:	88 23       	and	r24, r24
    1f92:	19 f4       	brne	.+6      	; 0x1f9a <xQueueGenericCreate+0x2a>
    1f94:	1a 82       	std	Y+2, r1	; 0x02
    1f96:	19 82       	std	Y+1, r1	; 0x01
    1f98:	0f c0       	rjmp	.+30     	; 0x1fb8 <xQueueGenericCreate+0x48>
    1f9a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f9c:	48 2f       	mov	r20, r24
    1f9e:	50 e0       	ldi	r21, 0x00	; 0
    1fa0:	88 85       	ldd	r24, Y+8	; 0x08
    1fa2:	28 2f       	mov	r18, r24
    1fa4:	30 e0       	ldi	r19, 0x00	; 0
    1fa6:	42 9f       	mul	r20, r18
    1fa8:	c0 01       	movw	r24, r0
    1faa:	43 9f       	mul	r20, r19
    1fac:	90 0d       	add	r25, r0
    1fae:	52 9f       	mul	r21, r18
    1fb0:	90 0d       	add	r25, r0
    1fb2:	11 24       	eor	r1, r1
    1fb4:	9a 83       	std	Y+2, r25	; 0x02
    1fb6:	89 83       	std	Y+1, r24	; 0x01
    1fb8:	89 81       	ldd	r24, Y+1	; 0x01
    1fba:	9a 81       	ldd	r25, Y+2	; 0x02
    1fbc:	81 96       	adiw	r24, 0x21	; 33
    1fbe:	0e 94 27 0c 	call	0x184e	; 0x184e <pvPortMalloc>
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    1fc6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fca:	89 2b       	or	r24, r25
    1fcc:	81 f0       	breq	.+32     	; 0x1fee <xQueueGenericCreate+0x7e>
    1fce:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd2:	81 96       	adiw	r24, 0x21	; 33
    1fd4:	9e 83       	std	Y+6, r25	; 0x06
    1fd6:	8d 83       	std	Y+5, r24	; 0x05
    1fd8:	2b 81       	ldd	r18, Y+3	; 0x03
    1fda:	3c 81       	ldd	r19, Y+4	; 0x04
    1fdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fde:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe0:	89 01       	movw	r16, r18
    1fe2:	29 85       	ldd	r18, Y+9	; 0x09
    1fe4:	ac 01       	movw	r20, r24
    1fe6:	68 85       	ldd	r22, Y+8	; 0x08
    1fe8:	8f 81       	ldd	r24, Y+7	; 0x07
    1fea:	0e 94 04 10 	call	0x2008	; 0x2008 <prvInitialiseNewQueue>
    1fee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff2:	29 96       	adiw	r28, 0x09	; 9
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	df 91       	pop	r29
    2000:	cf 91       	pop	r28
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <prvInitialiseNewQueue>:
    2008:	0f 93       	push	r16
    200a:	1f 93       	push	r17
    200c:	cf 93       	push	r28
    200e:	df 93       	push	r29
    2010:	cd b7       	in	r28, 0x3d	; 61
    2012:	de b7       	in	r29, 0x3e	; 62
    2014:	27 97       	sbiw	r28, 0x07	; 7
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	de bf       	out	0x3e, r29	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	cd bf       	out	0x3d, r28	; 61
    2020:	89 83       	std	Y+1, r24	; 0x01
    2022:	6a 83       	std	Y+2, r22	; 0x02
    2024:	5c 83       	std	Y+4, r21	; 0x04
    2026:	4b 83       	std	Y+3, r20	; 0x03
    2028:	2d 83       	std	Y+5, r18	; 0x05
    202a:	1f 83       	std	Y+7, r17	; 0x07
    202c:	0e 83       	std	Y+6, r16	; 0x06
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	88 23       	and	r24, r24
    2032:	41 f4       	brne	.+16     	; 0x2044 <prvInitialiseNewQueue+0x3c>
    2034:	8e 81       	ldd	r24, Y+6	; 0x06
    2036:	9f 81       	ldd	r25, Y+7	; 0x07
    2038:	2e 81       	ldd	r18, Y+6	; 0x06
    203a:	3f 81       	ldd	r19, Y+7	; 0x07
    203c:	fc 01       	movw	r30, r24
    203e:	31 83       	std	Z+1, r19	; 0x01
    2040:	20 83       	st	Z, r18
    2042:	07 c0       	rjmp	.+14     	; 0x2052 <prvInitialiseNewQueue+0x4a>
    2044:	8e 81       	ldd	r24, Y+6	; 0x06
    2046:	9f 81       	ldd	r25, Y+7	; 0x07
    2048:	2b 81       	ldd	r18, Y+3	; 0x03
    204a:	3c 81       	ldd	r19, Y+4	; 0x04
    204c:	fc 01       	movw	r30, r24
    204e:	31 83       	std	Z+1, r19	; 0x01
    2050:	20 83       	st	Z, r18
    2052:	8e 81       	ldd	r24, Y+6	; 0x06
    2054:	9f 81       	ldd	r25, Y+7	; 0x07
    2056:	29 81       	ldd	r18, Y+1	; 0x01
    2058:	fc 01       	movw	r30, r24
    205a:	23 8f       	std	Z+27, r18	; 0x1b
    205c:	8e 81       	ldd	r24, Y+6	; 0x06
    205e:	9f 81       	ldd	r25, Y+7	; 0x07
    2060:	2a 81       	ldd	r18, Y+2	; 0x02
    2062:	fc 01       	movw	r30, r24
    2064:	24 8f       	std	Z+28, r18	; 0x1c
    2066:	8e 81       	ldd	r24, Y+6	; 0x06
    2068:	9f 81       	ldd	r25, Y+7	; 0x07
    206a:	61 e0       	ldi	r22, 0x01	; 1
    206c:	0e 94 24 0f 	call	0x1e48	; 0x1e48 <xQueueGenericReset>
    2070:	8e 81       	ldd	r24, Y+6	; 0x06
    2072:	9f 81       	ldd	r25, Y+7	; 0x07
    2074:	2d 81       	ldd	r18, Y+5	; 0x05
    2076:	fc 01       	movw	r30, r24
    2078:	20 a3       	std	Z+32, r18	; 0x20
    207a:	27 96       	adiw	r28, 0x07	; 7
    207c:	0f b6       	in	r0, 0x3f	; 63
    207e:	f8 94       	cli
    2080:	de bf       	out	0x3e, r29	; 62
    2082:	0f be       	out	0x3f, r0	; 63
    2084:	cd bf       	out	0x3d, r28	; 61
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	08 95       	ret

00002090 <prvInitialiseMutex>:
    2090:	cf 93       	push	r28
    2092:	df 93       	push	r29
    2094:	00 d0       	rcall	.+0      	; 0x2096 <prvInitialiseMutex+0x6>
    2096:	cd b7       	in	r28, 0x3d	; 61
    2098:	de b7       	in	r29, 0x3e	; 62
    209a:	9a 83       	std	Y+2, r25	; 0x02
    209c:	89 83       	std	Y+1, r24	; 0x01
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	9a 81       	ldd	r25, Y+2	; 0x02
    20a2:	89 2b       	or	r24, r25
    20a4:	b9 f0       	breq	.+46     	; 0x20d4 <prvInitialiseMutex+0x44>
    20a6:	89 81       	ldd	r24, Y+1	; 0x01
    20a8:	9a 81       	ldd	r25, Y+2	; 0x02
    20aa:	fc 01       	movw	r30, r24
    20ac:	13 82       	std	Z+3, r1	; 0x03
    20ae:	12 82       	std	Z+2, r1	; 0x02
    20b0:	89 81       	ldd	r24, Y+1	; 0x01
    20b2:	9a 81       	ldd	r25, Y+2	; 0x02
    20b4:	fc 01       	movw	r30, r24
    20b6:	11 82       	std	Z+1, r1	; 0x01
    20b8:	10 82       	st	Z, r1
    20ba:	89 81       	ldd	r24, Y+1	; 0x01
    20bc:	9a 81       	ldd	r25, Y+2	; 0x02
    20be:	fc 01       	movw	r30, r24
    20c0:	16 82       	std	Z+6, r1	; 0x06
    20c2:	89 81       	ldd	r24, Y+1	; 0x01
    20c4:	9a 81       	ldd	r25, Y+2	; 0x02
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	40 e0       	ldi	r20, 0x00	; 0
    20ca:	50 e0       	ldi	r21, 0x00	; 0
    20cc:	60 e0       	ldi	r22, 0x00	; 0
    20ce:	70 e0       	ldi	r23, 0x00	; 0
    20d0:	0e 94 8f 10 	call	0x211e	; 0x211e <xQueueGenericSend>
    20d4:	0f 90       	pop	r0
    20d6:	0f 90       	pop	r0
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	08 95       	ret

000020de <xQueueCreateMutex>:
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    20e2:	00 d0       	rcall	.+0      	; 0x20e4 <xQueueCreateMutex+0x6>
    20e4:	00 d0       	rcall	.+0      	; 0x20e6 <xQueueCreateMutex+0x8>
    20e6:	1f 92       	push	r1
    20e8:	cd b7       	in	r28, 0x3d	; 61
    20ea:	de b7       	in	r29, 0x3e	; 62
    20ec:	8d 83       	std	Y+5, r24	; 0x05
    20ee:	81 e0       	ldi	r24, 0x01	; 1
    20f0:	89 83       	std	Y+1, r24	; 0x01
    20f2:	1a 82       	std	Y+2, r1	; 0x02
    20f4:	4d 81       	ldd	r20, Y+5	; 0x05
    20f6:	6a 81       	ldd	r22, Y+2	; 0x02
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	0e 94 b8 0f 	call	0x1f70	; 0x1f70 <xQueueGenericCreate>
    20fe:	9c 83       	std	Y+4, r25	; 0x04
    2100:	8b 83       	std	Y+3, r24	; 0x03
    2102:	8b 81       	ldd	r24, Y+3	; 0x03
    2104:	9c 81       	ldd	r25, Y+4	; 0x04
    2106:	0e 94 48 10 	call	0x2090	; 0x2090 <prvInitialiseMutex>
    210a:	8b 81       	ldd	r24, Y+3	; 0x03
    210c:	9c 81       	ldd	r25, Y+4	; 0x04
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	0f 90       	pop	r0
    2116:	0f 90       	pop	r0
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	08 95       	ret

0000211e <xQueueGenericSend>:
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	2e 97       	sbiw	r28, 0x0e	; 14
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	de bf       	out	0x3e, r29	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	cd bf       	out	0x3d, r28	; 61
    2132:	99 87       	std	Y+9, r25	; 0x09
    2134:	88 87       	std	Y+8, r24	; 0x08
    2136:	7b 87       	std	Y+11, r23	; 0x0b
    2138:	6a 87       	std	Y+10, r22	; 0x0a
    213a:	5d 87       	std	Y+13, r21	; 0x0d
    213c:	4c 87       	std	Y+12, r20	; 0x0c
    213e:	2e 87       	std	Y+14, r18	; 0x0e
    2140:	19 82       	std	Y+1, r1	; 0x01
    2142:	88 85       	ldd	r24, Y+8	; 0x08
    2144:	99 85       	ldd	r25, Y+9	; 0x09
    2146:	9b 83       	std	Y+3, r25	; 0x03
    2148:	8a 83       	std	Y+2, r24	; 0x02
    214a:	0f b6       	in	r0, 0x3f	; 63
    214c:	f8 94       	cli
    214e:	0f 92       	push	r0
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	9b 81       	ldd	r25, Y+3	; 0x03
    2154:	fc 01       	movw	r30, r24
    2156:	22 8d       	ldd	r18, Z+26	; 0x1a
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	9b 81       	ldd	r25, Y+3	; 0x03
    215c:	fc 01       	movw	r30, r24
    215e:	83 8d       	ldd	r24, Z+27	; 0x1b
    2160:	28 17       	cp	r18, r24
    2162:	18 f0       	brcs	.+6      	; 0x216a <xQueueGenericSend+0x4c>
    2164:	8e 85       	ldd	r24, Y+14	; 0x0e
    2166:	82 30       	cpi	r24, 0x02	; 2
    2168:	11 f5       	brne	.+68     	; 0x21ae <xQueueGenericSend+0x90>
    216a:	2a 85       	ldd	r18, Y+10	; 0x0a
    216c:	3b 85       	ldd	r19, Y+11	; 0x0b
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	4e 85       	ldd	r20, Y+14	; 0x0e
    2174:	b9 01       	movw	r22, r18
    2176:	0e 94 96 12 	call	0x252c	; 0x252c <prvCopyDataToQueue>
    217a:	8c 83       	std	Y+4, r24	; 0x04
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	fc 01       	movw	r30, r24
    2182:	81 89       	ldd	r24, Z+17	; 0x11
    2184:	88 23       	and	r24, r24
    2186:	51 f0       	breq	.+20     	; 0x219c <xQueueGenericSend+0x7e>
    2188:	8a 81       	ldd	r24, Y+2	; 0x02
    218a:	9b 81       	ldd	r25, Y+3	; 0x03
    218c:	41 96       	adiw	r24, 0x11	; 17
    218e:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    2192:	88 23       	and	r24, r24
    2194:	41 f0       	breq	.+16     	; 0x21a6 <xQueueGenericSend+0x88>
    2196:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    219a:	05 c0       	rjmp	.+10     	; 0x21a6 <xQueueGenericSend+0x88>
    219c:	8c 81       	ldd	r24, Y+4	; 0x04
    219e:	88 23       	and	r24, r24
    21a0:	11 f0       	breq	.+4      	; 0x21a6 <xQueueGenericSend+0x88>
    21a2:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    21a6:	0f 90       	pop	r0
    21a8:	0f be       	out	0x3f, r0	; 63
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	61 c0       	rjmp	.+194    	; 0x2270 <xQueueGenericSend+0x152>
    21ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    21b0:	9d 85       	ldd	r25, Y+13	; 0x0d
    21b2:	89 2b       	or	r24, r25
    21b4:	21 f4       	brne	.+8      	; 0x21be <xQueueGenericSend+0xa0>
    21b6:	0f 90       	pop	r0
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	80 e0       	ldi	r24, 0x00	; 0
    21bc:	59 c0       	rjmp	.+178    	; 0x2270 <xQueueGenericSend+0x152>
    21be:	89 81       	ldd	r24, Y+1	; 0x01
    21c0:	88 23       	and	r24, r24
    21c2:	31 f4       	brne	.+12     	; 0x21d0 <xQueueGenericSend+0xb2>
    21c4:	ce 01       	movw	r24, r28
    21c6:	05 96       	adiw	r24, 0x05	; 5
    21c8:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskSetTimeOutState>
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	0f 90       	pop	r0
    21d2:	0f be       	out	0x3f, r0	; 63
    21d4:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskSuspendAll>
    21d8:	0f b6       	in	r0, 0x3f	; 63
    21da:	f8 94       	cli
    21dc:	0f 92       	push	r0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	85 8d       	ldd	r24, Z+29	; 0x1d
    21e6:	8f 3f       	cpi	r24, 0xFF	; 255
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <xQueueGenericSend+0xd4>
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	9b 81       	ldd	r25, Y+3	; 0x03
    21ee:	fc 01       	movw	r30, r24
    21f0:	15 8e       	std	Z+29, r1	; 0x1d
    21f2:	8a 81       	ldd	r24, Y+2	; 0x02
    21f4:	9b 81       	ldd	r25, Y+3	; 0x03
    21f6:	fc 01       	movw	r30, r24
    21f8:	86 8d       	ldd	r24, Z+30	; 0x1e
    21fa:	8f 3f       	cpi	r24, 0xFF	; 255
    21fc:	21 f4       	brne	.+8      	; 0x2206 <xQueueGenericSend+0xe8>
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	fc 01       	movw	r30, r24
    2204:	16 8e       	std	Z+30, r1	; 0x1e
    2206:	0f 90       	pop	r0
    2208:	0f be       	out	0x3f, r0	; 63
    220a:	9e 01       	movw	r18, r28
    220c:	24 5f       	subi	r18, 0xF4	; 244
    220e:	3f 4f       	sbci	r19, 0xFF	; 255
    2210:	ce 01       	movw	r24, r28
    2212:	05 96       	adiw	r24, 0x05	; 5
    2214:	b9 01       	movw	r22, r18
    2216:	0e 94 af 19 	call	0x335e	; 0x335e <xTaskCheckForTimeOut>
    221a:	88 23       	and	r24, r24
    221c:	01 f5       	brne	.+64     	; 0x225e <xQueueGenericSend+0x140>
    221e:	8a 81       	ldd	r24, Y+2	; 0x02
    2220:	9b 81       	ldd	r25, Y+3	; 0x03
    2222:	0e 94 31 14 	call	0x2862	; 0x2862 <prvIsQueueFull>
    2226:	88 23       	and	r24, r24
    2228:	99 f0       	breq	.+38     	; 0x2250 <xQueueGenericSend+0x132>
    222a:	2c 85       	ldd	r18, Y+12	; 0x0c
    222c:	3d 85       	ldd	r19, Y+13	; 0x0d
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	9b 81       	ldd	r25, Y+3	; 0x03
    2232:	08 96       	adiw	r24, 0x08	; 8
    2234:	b9 01       	movw	r22, r18
    2236:	0e 94 05 19 	call	0x320a	; 0x320a <vTaskPlaceOnEventList>
    223a:	8a 81       	ldd	r24, Y+2	; 0x02
    223c:	9b 81       	ldd	r25, Y+3	; 0x03
    223e:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    2242:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    2246:	88 23       	and	r24, r24
    2248:	91 f4       	brne	.+36     	; 0x226e <xQueueGenericSend+0x150>
    224a:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    224e:	0f c0       	rjmp	.+30     	; 0x226e <xQueueGenericSend+0x150>
    2250:	8a 81       	ldd	r24, Y+2	; 0x02
    2252:	9b 81       	ldd	r25, Y+3	; 0x03
    2254:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    2258:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    225c:	76 cf       	rjmp	.-276    	; 0x214a <xQueueGenericSend+0x2c>
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    2266:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	01 c0       	rjmp	.+2      	; 0x2270 <xQueueGenericSend+0x152>
    226e:	6d cf       	rjmp	.-294    	; 0x214a <xQueueGenericSend+0x2c>
    2270:	2e 96       	adiw	r28, 0x0e	; 14
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <xQueueGenericSendFromISR>:
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	2c 97       	sbiw	r28, 0x0c	; 12
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	9f 83       	std	Y+7, r25	; 0x07
    2298:	8e 83       	std	Y+6, r24	; 0x06
    229a:	79 87       	std	Y+9, r23	; 0x09
    229c:	68 87       	std	Y+8, r22	; 0x08
    229e:	5b 87       	std	Y+11, r21	; 0x0b
    22a0:	4a 87       	std	Y+10, r20	; 0x0a
    22a2:	2c 87       	std	Y+12, r18	; 0x0c
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	9f 81       	ldd	r25, Y+7	; 0x07
    22a8:	9b 83       	std	Y+3, r25	; 0x03
    22aa:	8a 83       	std	Y+2, r24	; 0x02
    22ac:	1c 82       	std	Y+4, r1	; 0x04
    22ae:	8a 81       	ldd	r24, Y+2	; 0x02
    22b0:	9b 81       	ldd	r25, Y+3	; 0x03
    22b2:	fc 01       	movw	r30, r24
    22b4:	22 8d       	ldd	r18, Z+26	; 0x1a
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	9b 81       	ldd	r25, Y+3	; 0x03
    22ba:	fc 01       	movw	r30, r24
    22bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    22be:	28 17       	cp	r18, r24
    22c0:	18 f0       	brcs	.+6      	; 0x22c8 <xQueueGenericSendFromISR+0x46>
    22c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	89 f5       	brne	.+98     	; 0x232a <xQueueGenericSendFromISR+0xa8>
    22c8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ca:	9b 81       	ldd	r25, Y+3	; 0x03
    22cc:	fc 01       	movw	r30, r24
    22ce:	86 8d       	ldd	r24, Z+30	; 0x1e
    22d0:	8d 83       	std	Y+5, r24	; 0x05
    22d2:	28 85       	ldd	r18, Y+8	; 0x08
    22d4:	39 85       	ldd	r19, Y+9	; 0x09
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	9b 81       	ldd	r25, Y+3	; 0x03
    22da:	4c 85       	ldd	r20, Y+12	; 0x0c
    22dc:	b9 01       	movw	r22, r18
    22de:	0e 94 96 12 	call	0x252c	; 0x252c <prvCopyDataToQueue>
    22e2:	8d 81       	ldd	r24, Y+5	; 0x05
    22e4:	8f 3f       	cpi	r24, 0xFF	; 255
    22e6:	b9 f4       	brne	.+46     	; 0x2316 <xQueueGenericSendFromISR+0x94>
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	9b 81       	ldd	r25, Y+3	; 0x03
    22ec:	fc 01       	movw	r30, r24
    22ee:	81 89       	ldd	r24, Z+17	; 0x11
    22f0:	88 23       	and	r24, r24
    22f2:	c1 f0       	breq	.+48     	; 0x2324 <xQueueGenericSendFromISR+0xa2>
    22f4:	8a 81       	ldd	r24, Y+2	; 0x02
    22f6:	9b 81       	ldd	r25, Y+3	; 0x03
    22f8:	41 96       	adiw	r24, 0x11	; 17
    22fa:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    22fe:	88 23       	and	r24, r24
    2300:	89 f0       	breq	.+34     	; 0x2324 <xQueueGenericSendFromISR+0xa2>
    2302:	8a 85       	ldd	r24, Y+10	; 0x0a
    2304:	9b 85       	ldd	r25, Y+11	; 0x0b
    2306:	89 2b       	or	r24, r25
    2308:	69 f0       	breq	.+26     	; 0x2324 <xQueueGenericSendFromISR+0xa2>
    230a:	8a 85       	ldd	r24, Y+10	; 0x0a
    230c:	9b 85       	ldd	r25, Y+11	; 0x0b
    230e:	21 e0       	ldi	r18, 0x01	; 1
    2310:	fc 01       	movw	r30, r24
    2312:	20 83       	st	Z, r18
    2314:	07 c0       	rjmp	.+14     	; 0x2324 <xQueueGenericSendFromISR+0xa2>
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	8f 5f       	subi	r24, 0xFF	; 255
    231a:	28 2f       	mov	r18, r24
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	9b 81       	ldd	r25, Y+3	; 0x03
    2320:	fc 01       	movw	r30, r24
    2322:	26 8f       	std	Z+30, r18	; 0x1e
    2324:	81 e0       	ldi	r24, 0x01	; 1
    2326:	89 83       	std	Y+1, r24	; 0x01
    2328:	01 c0       	rjmp	.+2      	; 0x232c <xQueueGenericSendFromISR+0xaa>
    232a:	19 82       	std	Y+1, r1	; 0x01
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	2c 96       	adiw	r28, 0x0c	; 12
    2330:	0f b6       	in	r0, 0x3f	; 63
    2332:	f8 94       	cli
    2334:	de bf       	out	0x3e, r29	; 62
    2336:	0f be       	out	0x3f, r0	; 63
    2338:	cd bf       	out	0x3d, r28	; 61
    233a:	df 91       	pop	r29
    233c:	cf 91       	pop	r28
    233e:	08 95       	ret

00002340 <xQueueGenericReceive>:
    2340:	cf 93       	push	r28
    2342:	df 93       	push	r29
    2344:	cd b7       	in	r28, 0x3d	; 61
    2346:	de b7       	in	r29, 0x3e	; 62
    2348:	60 97       	sbiw	r28, 0x10	; 16
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	9b 87       	std	Y+11, r25	; 0x0b
    2356:	8a 87       	std	Y+10, r24	; 0x0a
    2358:	7d 87       	std	Y+13, r23	; 0x0d
    235a:	6c 87       	std	Y+12, r22	; 0x0c
    235c:	5f 87       	std	Y+15, r21	; 0x0f
    235e:	4e 87       	std	Y+14, r20	; 0x0e
    2360:	28 8b       	std	Y+16, r18	; 0x10
    2362:	19 82       	std	Y+1, r1	; 0x01
    2364:	8a 85       	ldd	r24, Y+10	; 0x0a
    2366:	9b 85       	ldd	r25, Y+11	; 0x0b
    2368:	9b 83       	std	Y+3, r25	; 0x03
    236a:	8a 83       	std	Y+2, r24	; 0x02
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	0f 92       	push	r0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	9b 81       	ldd	r25, Y+3	; 0x03
    2376:	fc 01       	movw	r30, r24
    2378:	82 8d       	ldd	r24, Z+26	; 0x1a
    237a:	8c 83       	std	Y+4, r24	; 0x04
    237c:	8c 81       	ldd	r24, Y+4	; 0x04
    237e:	88 23       	and	r24, r24
    2380:	09 f4       	brne	.+2      	; 0x2384 <xQueueGenericReceive+0x44>
    2382:	51 c0       	rjmp	.+162    	; 0x2426 <xQueueGenericReceive+0xe6>
    2384:	8a 81       	ldd	r24, Y+2	; 0x02
    2386:	9b 81       	ldd	r25, Y+3	; 0x03
    2388:	fc 01       	movw	r30, r24
    238a:	86 81       	ldd	r24, Z+6	; 0x06
    238c:	97 81       	ldd	r25, Z+7	; 0x07
    238e:	9e 83       	std	Y+6, r25	; 0x06
    2390:	8d 83       	std	Y+5, r24	; 0x05
    2392:	2c 85       	ldd	r18, Y+12	; 0x0c
    2394:	3d 85       	ldd	r19, Y+13	; 0x0d
    2396:	8a 81       	ldd	r24, Y+2	; 0x02
    2398:	9b 81       	ldd	r25, Y+3	; 0x03
    239a:	b9 01       	movw	r22, r18
    239c:	0e 94 66 13 	call	0x26cc	; 0x26cc <prvCopyDataFromQueue>
    23a0:	88 89       	ldd	r24, Y+16	; 0x10
    23a2:	88 23       	and	r24, r24
    23a4:	31 f5       	brne	.+76     	; 0x23f2 <xQueueGenericReceive+0xb2>
    23a6:	8c 81       	ldd	r24, Y+4	; 0x04
    23a8:	2f ef       	ldi	r18, 0xFF	; 255
    23aa:	28 0f       	add	r18, r24
    23ac:	8a 81       	ldd	r24, Y+2	; 0x02
    23ae:	9b 81       	ldd	r25, Y+3	; 0x03
    23b0:	fc 01       	movw	r30, r24
    23b2:	22 8f       	std	Z+26, r18	; 0x1a
    23b4:	8a 81       	ldd	r24, Y+2	; 0x02
    23b6:	9b 81       	ldd	r25, Y+3	; 0x03
    23b8:	fc 01       	movw	r30, r24
    23ba:	80 81       	ld	r24, Z
    23bc:	91 81       	ldd	r25, Z+1	; 0x01
    23be:	89 2b       	or	r24, r25
    23c0:	41 f4       	brne	.+16     	; 0x23d2 <xQueueGenericReceive+0x92>
    23c2:	0e 94 09 1c 	call	0x3812	; 0x3812 <pvTaskIncrementMutexHeldCount>
    23c6:	9c 01       	movw	r18, r24
    23c8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ca:	9b 81       	ldd	r25, Y+3	; 0x03
    23cc:	fc 01       	movw	r30, r24
    23ce:	33 83       	std	Z+3, r19	; 0x03
    23d0:	22 83       	std	Z+2, r18	; 0x02
    23d2:	8a 81       	ldd	r24, Y+2	; 0x02
    23d4:	9b 81       	ldd	r25, Y+3	; 0x03
    23d6:	fc 01       	movw	r30, r24
    23d8:	80 85       	ldd	r24, Z+8	; 0x08
    23da:	88 23       	and	r24, r24
    23dc:	01 f1       	breq	.+64     	; 0x241e <xQueueGenericReceive+0xde>
    23de:	8a 81       	ldd	r24, Y+2	; 0x02
    23e0:	9b 81       	ldd	r25, Y+3	; 0x03
    23e2:	08 96       	adiw	r24, 0x08	; 8
    23e4:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    23e8:	88 23       	and	r24, r24
    23ea:	c9 f0       	breq	.+50     	; 0x241e <xQueueGenericReceive+0xde>
    23ec:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    23f0:	16 c0       	rjmp	.+44     	; 0x241e <xQueueGenericReceive+0xde>
    23f2:	8a 81       	ldd	r24, Y+2	; 0x02
    23f4:	9b 81       	ldd	r25, Y+3	; 0x03
    23f6:	2d 81       	ldd	r18, Y+5	; 0x05
    23f8:	3e 81       	ldd	r19, Y+6	; 0x06
    23fa:	fc 01       	movw	r30, r24
    23fc:	37 83       	std	Z+7, r19	; 0x07
    23fe:	26 83       	std	Z+6, r18	; 0x06
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	fc 01       	movw	r30, r24
    2406:	81 89       	ldd	r24, Z+17	; 0x11
    2408:	88 23       	and	r24, r24
    240a:	49 f0       	breq	.+18     	; 0x241e <xQueueGenericReceive+0xde>
    240c:	8a 81       	ldd	r24, Y+2	; 0x02
    240e:	9b 81       	ldd	r25, Y+3	; 0x03
    2410:	41 96       	adiw	r24, 0x11	; 17
    2412:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    2416:	88 23       	and	r24, r24
    2418:	11 f0       	breq	.+4      	; 0x241e <xQueueGenericReceive+0xde>
    241a:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    241e:	0f 90       	pop	r0
    2420:	0f be       	out	0x3f, r0	; 63
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	7a c0       	rjmp	.+244    	; 0x251a <xQueueGenericReceive+0x1da>
    2426:	8e 85       	ldd	r24, Y+14	; 0x0e
    2428:	9f 85       	ldd	r25, Y+15	; 0x0f
    242a:	89 2b       	or	r24, r25
    242c:	21 f4       	brne	.+8      	; 0x2436 <xQueueGenericReceive+0xf6>
    242e:	0f 90       	pop	r0
    2430:	0f be       	out	0x3f, r0	; 63
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	72 c0       	rjmp	.+228    	; 0x251a <xQueueGenericReceive+0x1da>
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	88 23       	and	r24, r24
    243a:	31 f4       	brne	.+12     	; 0x2448 <xQueueGenericReceive+0x108>
    243c:	ce 01       	movw	r24, r28
    243e:	07 96       	adiw	r24, 0x07	; 7
    2440:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskSetTimeOutState>
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	0f 90       	pop	r0
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskSuspendAll>
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	0f 92       	push	r0
    2456:	8a 81       	ldd	r24, Y+2	; 0x02
    2458:	9b 81       	ldd	r25, Y+3	; 0x03
    245a:	fc 01       	movw	r30, r24
    245c:	85 8d       	ldd	r24, Z+29	; 0x1d
    245e:	8f 3f       	cpi	r24, 0xFF	; 255
    2460:	21 f4       	brne	.+8      	; 0x246a <xQueueGenericReceive+0x12a>
    2462:	8a 81       	ldd	r24, Y+2	; 0x02
    2464:	9b 81       	ldd	r25, Y+3	; 0x03
    2466:	fc 01       	movw	r30, r24
    2468:	15 8e       	std	Z+29, r1	; 0x1d
    246a:	8a 81       	ldd	r24, Y+2	; 0x02
    246c:	9b 81       	ldd	r25, Y+3	; 0x03
    246e:	fc 01       	movw	r30, r24
    2470:	86 8d       	ldd	r24, Z+30	; 0x1e
    2472:	8f 3f       	cpi	r24, 0xFF	; 255
    2474:	21 f4       	brne	.+8      	; 0x247e <xQueueGenericReceive+0x13e>
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	9b 81       	ldd	r25, Y+3	; 0x03
    247a:	fc 01       	movw	r30, r24
    247c:	16 8e       	std	Z+30, r1	; 0x1e
    247e:	0f 90       	pop	r0
    2480:	0f be       	out	0x3f, r0	; 63
    2482:	9e 01       	movw	r18, r28
    2484:	22 5f       	subi	r18, 0xF2	; 242
    2486:	3f 4f       	sbci	r19, 0xFF	; 255
    2488:	ce 01       	movw	r24, r28
    248a:	07 96       	adiw	r24, 0x07	; 7
    248c:	b9 01       	movw	r22, r18
    248e:	0e 94 af 19 	call	0x335e	; 0x335e <xTaskCheckForTimeOut>
    2492:	88 23       	and	r24, r24
    2494:	99 f5       	brne	.+102    	; 0x24fc <xQueueGenericReceive+0x1bc>
    2496:	8a 81       	ldd	r24, Y+2	; 0x02
    2498:	9b 81       	ldd	r25, Y+3	; 0x03
    249a:	0e 94 13 14 	call	0x2826	; 0x2826 <prvIsQueueEmpty>
    249e:	88 23       	and	r24, r24
    24a0:	31 f1       	breq	.+76     	; 0x24ee <xQueueGenericReceive+0x1ae>
    24a2:	8a 81       	ldd	r24, Y+2	; 0x02
    24a4:	9b 81       	ldd	r25, Y+3	; 0x03
    24a6:	fc 01       	movw	r30, r24
    24a8:	80 81       	ld	r24, Z
    24aa:	91 81       	ldd	r25, Z+1	; 0x01
    24ac:	89 2b       	or	r24, r25
    24ae:	61 f4       	brne	.+24     	; 0x24c8 <xQueueGenericReceive+0x188>
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	f8 94       	cli
    24b4:	0f 92       	push	r0
    24b6:	8a 81       	ldd	r24, Y+2	; 0x02
    24b8:	9b 81       	ldd	r25, Y+3	; 0x03
    24ba:	fc 01       	movw	r30, r24
    24bc:	82 81       	ldd	r24, Z+2	; 0x02
    24be:	93 81       	ldd	r25, Z+3	; 0x03
    24c0:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <vTaskPriorityInherit>
    24c4:	0f 90       	pop	r0
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	2e 85       	ldd	r18, Y+14	; 0x0e
    24ca:	3f 85       	ldd	r19, Y+15	; 0x0f
    24cc:	8a 81       	ldd	r24, Y+2	; 0x02
    24ce:	9b 81       	ldd	r25, Y+3	; 0x03
    24d0:	41 96       	adiw	r24, 0x11	; 17
    24d2:	b9 01       	movw	r22, r18
    24d4:	0e 94 05 19 	call	0x320a	; 0x320a <vTaskPlaceOnEventList>
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	9b 81       	ldd	r25, Y+3	; 0x03
    24dc:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    24e0:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    24e4:	88 23       	and	r24, r24
    24e6:	c1 f4       	brne	.+48     	; 0x2518 <xQueueGenericReceive+0x1d8>
    24e8:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    24ec:	15 c0       	rjmp	.+42     	; 0x2518 <xQueueGenericReceive+0x1d8>
    24ee:	8a 81       	ldd	r24, Y+2	; 0x02
    24f0:	9b 81       	ldd	r25, Y+3	; 0x03
    24f2:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    24f6:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    24fa:	38 cf       	rjmp	.-400    	; 0x236c <xQueueGenericReceive+0x2c>
    24fc:	8a 81       	ldd	r24, Y+2	; 0x02
    24fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2500:	0e 94 b6 13 	call	0x276c	; 0x276c <prvUnlockQueue>
    2504:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	9b 81       	ldd	r25, Y+3	; 0x03
    250c:	0e 94 13 14 	call	0x2826	; 0x2826 <prvIsQueueEmpty>
    2510:	88 23       	and	r24, r24
    2512:	11 f0       	breq	.+4      	; 0x2518 <xQueueGenericReceive+0x1d8>
    2514:	80 e0       	ldi	r24, 0x00	; 0
    2516:	01 c0       	rjmp	.+2      	; 0x251a <xQueueGenericReceive+0x1da>
    2518:	29 cf       	rjmp	.-430    	; 0x236c <xQueueGenericReceive+0x2c>
    251a:	60 96       	adiw	r28, 0x10	; 16
    251c:	0f b6       	in	r0, 0x3f	; 63
    251e:	f8 94       	cli
    2520:	de bf       	out	0x3e, r29	; 62
    2522:	0f be       	out	0x3f, r0	; 63
    2524:	cd bf       	out	0x3d, r28	; 61
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	08 95       	ret

0000252c <prvCopyDataToQueue>:
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	27 97       	sbiw	r28, 0x07	; 7
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	9c 83       	std	Y+4, r25	; 0x04
    2542:	8b 83       	std	Y+3, r24	; 0x03
    2544:	7e 83       	std	Y+6, r23	; 0x06
    2546:	6d 83       	std	Y+5, r22	; 0x05
    2548:	4f 83       	std	Y+7, r20	; 0x07
    254a:	19 82       	std	Y+1, r1	; 0x01
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	fc 01       	movw	r30, r24
    2552:	82 8d       	ldd	r24, Z+26	; 0x1a
    2554:	8a 83       	std	Y+2, r24	; 0x02
    2556:	8b 81       	ldd	r24, Y+3	; 0x03
    2558:	9c 81       	ldd	r25, Y+4	; 0x04
    255a:	fc 01       	movw	r30, r24
    255c:	84 8d       	ldd	r24, Z+28	; 0x1c
    255e:	88 23       	and	r24, r24
    2560:	b1 f4       	brne	.+44     	; 0x258e <prvCopyDataToQueue+0x62>
    2562:	8b 81       	ldd	r24, Y+3	; 0x03
    2564:	9c 81       	ldd	r25, Y+4	; 0x04
    2566:	fc 01       	movw	r30, r24
    2568:	80 81       	ld	r24, Z
    256a:	91 81       	ldd	r25, Z+1	; 0x01
    256c:	89 2b       	or	r24, r25
    256e:	09 f0       	breq	.+2      	; 0x2572 <prvCopyDataToQueue+0x46>
    2570:	9c c0       	rjmp	.+312    	; 0x26aa <prvCopyDataToQueue+0x17e>
    2572:	8b 81       	ldd	r24, Y+3	; 0x03
    2574:	9c 81       	ldd	r25, Y+4	; 0x04
    2576:	fc 01       	movw	r30, r24
    2578:	82 81       	ldd	r24, Z+2	; 0x02
    257a:	93 81       	ldd	r25, Z+3	; 0x03
    257c:	0e 94 8c 1b 	call	0x3718	; 0x3718 <xTaskPriorityDisinherit>
    2580:	89 83       	std	Y+1, r24	; 0x01
    2582:	8b 81       	ldd	r24, Y+3	; 0x03
    2584:	9c 81       	ldd	r25, Y+4	; 0x04
    2586:	fc 01       	movw	r30, r24
    2588:	13 82       	std	Z+3, r1	; 0x03
    258a:	12 82       	std	Z+2, r1	; 0x02
    258c:	8e c0       	rjmp	.+284    	; 0x26aa <prvCopyDataToQueue+0x17e>
    258e:	8f 81       	ldd	r24, Y+7	; 0x07
    2590:	88 23       	and	r24, r24
    2592:	d9 f5       	brne	.+118    	; 0x260a <prvCopyDataToQueue+0xde>
    2594:	8b 81       	ldd	r24, Y+3	; 0x03
    2596:	9c 81       	ldd	r25, Y+4	; 0x04
    2598:	fc 01       	movw	r30, r24
    259a:	84 8d       	ldd	r24, Z+28	; 0x1c
    259c:	48 2f       	mov	r20, r24
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	8b 81       	ldd	r24, Y+3	; 0x03
    25a2:	9c 81       	ldd	r25, Y+4	; 0x04
    25a4:	fc 01       	movw	r30, r24
    25a6:	84 81       	ldd	r24, Z+4	; 0x04
    25a8:	95 81       	ldd	r25, Z+5	; 0x05
    25aa:	2d 81       	ldd	r18, Y+5	; 0x05
    25ac:	3e 81       	ldd	r19, Y+6	; 0x06
    25ae:	b9 01       	movw	r22, r18
    25b0:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <memcpy>
    25b4:	8b 81       	ldd	r24, Y+3	; 0x03
    25b6:	9c 81       	ldd	r25, Y+4	; 0x04
    25b8:	fc 01       	movw	r30, r24
    25ba:	24 81       	ldd	r18, Z+4	; 0x04
    25bc:	35 81       	ldd	r19, Z+5	; 0x05
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	9c 81       	ldd	r25, Y+4	; 0x04
    25c2:	fc 01       	movw	r30, r24
    25c4:	84 8d       	ldd	r24, Z+28	; 0x1c
    25c6:	88 2f       	mov	r24, r24
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	28 0f       	add	r18, r24
    25cc:	39 1f       	adc	r19, r25
    25ce:	8b 81       	ldd	r24, Y+3	; 0x03
    25d0:	9c 81       	ldd	r25, Y+4	; 0x04
    25d2:	fc 01       	movw	r30, r24
    25d4:	35 83       	std	Z+5, r19	; 0x05
    25d6:	24 83       	std	Z+4, r18	; 0x04
    25d8:	8b 81       	ldd	r24, Y+3	; 0x03
    25da:	9c 81       	ldd	r25, Y+4	; 0x04
    25dc:	fc 01       	movw	r30, r24
    25de:	24 81       	ldd	r18, Z+4	; 0x04
    25e0:	35 81       	ldd	r19, Z+5	; 0x05
    25e2:	8b 81       	ldd	r24, Y+3	; 0x03
    25e4:	9c 81       	ldd	r25, Y+4	; 0x04
    25e6:	fc 01       	movw	r30, r24
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	28 17       	cp	r18, r24
    25ee:	39 07       	cpc	r19, r25
    25f0:	08 f4       	brcc	.+2      	; 0x25f4 <prvCopyDataToQueue+0xc8>
    25f2:	5b c0       	rjmp	.+182    	; 0x26aa <prvCopyDataToQueue+0x17e>
    25f4:	8b 81       	ldd	r24, Y+3	; 0x03
    25f6:	9c 81       	ldd	r25, Y+4	; 0x04
    25f8:	fc 01       	movw	r30, r24
    25fa:	20 81       	ld	r18, Z
    25fc:	31 81       	ldd	r19, Z+1	; 0x01
    25fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2600:	9c 81       	ldd	r25, Y+4	; 0x04
    2602:	fc 01       	movw	r30, r24
    2604:	35 83       	std	Z+5, r19	; 0x05
    2606:	24 83       	std	Z+4, r18	; 0x04
    2608:	50 c0       	rjmp	.+160    	; 0x26aa <prvCopyDataToQueue+0x17e>
    260a:	8b 81       	ldd	r24, Y+3	; 0x03
    260c:	9c 81       	ldd	r25, Y+4	; 0x04
    260e:	fc 01       	movw	r30, r24
    2610:	84 8d       	ldd	r24, Z+28	; 0x1c
    2612:	48 2f       	mov	r20, r24
    2614:	50 e0       	ldi	r21, 0x00	; 0
    2616:	8b 81       	ldd	r24, Y+3	; 0x03
    2618:	9c 81       	ldd	r25, Y+4	; 0x04
    261a:	fc 01       	movw	r30, r24
    261c:	86 81       	ldd	r24, Z+6	; 0x06
    261e:	97 81       	ldd	r25, Z+7	; 0x07
    2620:	2d 81       	ldd	r18, Y+5	; 0x05
    2622:	3e 81       	ldd	r19, Y+6	; 0x06
    2624:	b9 01       	movw	r22, r18
    2626:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <memcpy>
    262a:	8b 81       	ldd	r24, Y+3	; 0x03
    262c:	9c 81       	ldd	r25, Y+4	; 0x04
    262e:	fc 01       	movw	r30, r24
    2630:	26 81       	ldd	r18, Z+6	; 0x06
    2632:	37 81       	ldd	r19, Z+7	; 0x07
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	9c 81       	ldd	r25, Y+4	; 0x04
    2638:	fc 01       	movw	r30, r24
    263a:	84 8d       	ldd	r24, Z+28	; 0x1c
    263c:	88 2f       	mov	r24, r24
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	91 95       	neg	r25
    2642:	81 95       	neg	r24
    2644:	91 09       	sbc	r25, r1
    2646:	28 0f       	add	r18, r24
    2648:	39 1f       	adc	r19, r25
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	fc 01       	movw	r30, r24
    2650:	37 83       	std	Z+7, r19	; 0x07
    2652:	26 83       	std	Z+6, r18	; 0x06
    2654:	8b 81       	ldd	r24, Y+3	; 0x03
    2656:	9c 81       	ldd	r25, Y+4	; 0x04
    2658:	fc 01       	movw	r30, r24
    265a:	26 81       	ldd	r18, Z+6	; 0x06
    265c:	37 81       	ldd	r19, Z+7	; 0x07
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	fc 01       	movw	r30, r24
    2664:	80 81       	ld	r24, Z
    2666:	91 81       	ldd	r25, Z+1	; 0x01
    2668:	28 17       	cp	r18, r24
    266a:	39 07       	cpc	r19, r25
    266c:	a8 f4       	brcc	.+42     	; 0x2698 <prvCopyDataToQueue+0x16c>
    266e:	8b 81       	ldd	r24, Y+3	; 0x03
    2670:	9c 81       	ldd	r25, Y+4	; 0x04
    2672:	fc 01       	movw	r30, r24
    2674:	22 81       	ldd	r18, Z+2	; 0x02
    2676:	33 81       	ldd	r19, Z+3	; 0x03
    2678:	8b 81       	ldd	r24, Y+3	; 0x03
    267a:	9c 81       	ldd	r25, Y+4	; 0x04
    267c:	fc 01       	movw	r30, r24
    267e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2680:	88 2f       	mov	r24, r24
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	91 95       	neg	r25
    2686:	81 95       	neg	r24
    2688:	91 09       	sbc	r25, r1
    268a:	28 0f       	add	r18, r24
    268c:	39 1f       	adc	r19, r25
    268e:	8b 81       	ldd	r24, Y+3	; 0x03
    2690:	9c 81       	ldd	r25, Y+4	; 0x04
    2692:	fc 01       	movw	r30, r24
    2694:	37 83       	std	Z+7, r19	; 0x07
    2696:	26 83       	std	Z+6, r18	; 0x06
    2698:	8f 81       	ldd	r24, Y+7	; 0x07
    269a:	82 30       	cpi	r24, 0x02	; 2
    269c:	31 f4       	brne	.+12     	; 0x26aa <prvCopyDataToQueue+0x17e>
    269e:	8a 81       	ldd	r24, Y+2	; 0x02
    26a0:	88 23       	and	r24, r24
    26a2:	19 f0       	breq	.+6      	; 0x26aa <prvCopyDataToQueue+0x17e>
    26a4:	8a 81       	ldd	r24, Y+2	; 0x02
    26a6:	81 50       	subi	r24, 0x01	; 1
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	21 e0       	ldi	r18, 0x01	; 1
    26ae:	28 0f       	add	r18, r24
    26b0:	8b 81       	ldd	r24, Y+3	; 0x03
    26b2:	9c 81       	ldd	r25, Y+4	; 0x04
    26b4:	fc 01       	movw	r30, r24
    26b6:	22 8f       	std	Z+26, r18	; 0x1a
    26b8:	89 81       	ldd	r24, Y+1	; 0x01
    26ba:	27 96       	adiw	r28, 0x07	; 7
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	08 95       	ret

000026cc <prvCopyDataFromQueue>:
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <prvCopyDataFromQueue+0x6>
    26d2:	00 d0       	rcall	.+0      	; 0x26d4 <prvCopyDataFromQueue+0x8>
    26d4:	cd b7       	in	r28, 0x3d	; 61
    26d6:	de b7       	in	r29, 0x3e	; 62
    26d8:	9a 83       	std	Y+2, r25	; 0x02
    26da:	89 83       	std	Y+1, r24	; 0x01
    26dc:	7c 83       	std	Y+4, r23	; 0x04
    26de:	6b 83       	std	Y+3, r22	; 0x03
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	9a 81       	ldd	r25, Y+2	; 0x02
    26e4:	fc 01       	movw	r30, r24
    26e6:	84 8d       	ldd	r24, Z+28	; 0x1c
    26e8:	88 23       	and	r24, r24
    26ea:	c9 f1       	breq	.+114    	; 0x275e <prvCopyDataFromQueue+0x92>
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	9a 81       	ldd	r25, Y+2	; 0x02
    26f0:	fc 01       	movw	r30, r24
    26f2:	26 81       	ldd	r18, Z+6	; 0x06
    26f4:	37 81       	ldd	r19, Z+7	; 0x07
    26f6:	89 81       	ldd	r24, Y+1	; 0x01
    26f8:	9a 81       	ldd	r25, Y+2	; 0x02
    26fa:	fc 01       	movw	r30, r24
    26fc:	84 8d       	ldd	r24, Z+28	; 0x1c
    26fe:	88 2f       	mov	r24, r24
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	28 0f       	add	r18, r24
    2704:	39 1f       	adc	r19, r25
    2706:	89 81       	ldd	r24, Y+1	; 0x01
    2708:	9a 81       	ldd	r25, Y+2	; 0x02
    270a:	fc 01       	movw	r30, r24
    270c:	37 83       	std	Z+7, r19	; 0x07
    270e:	26 83       	std	Z+6, r18	; 0x06
    2710:	89 81       	ldd	r24, Y+1	; 0x01
    2712:	9a 81       	ldd	r25, Y+2	; 0x02
    2714:	fc 01       	movw	r30, r24
    2716:	26 81       	ldd	r18, Z+6	; 0x06
    2718:	37 81       	ldd	r19, Z+7	; 0x07
    271a:	89 81       	ldd	r24, Y+1	; 0x01
    271c:	9a 81       	ldd	r25, Y+2	; 0x02
    271e:	fc 01       	movw	r30, r24
    2720:	82 81       	ldd	r24, Z+2	; 0x02
    2722:	93 81       	ldd	r25, Z+3	; 0x03
    2724:	28 17       	cp	r18, r24
    2726:	39 07       	cpc	r19, r25
    2728:	50 f0       	brcs	.+20     	; 0x273e <prvCopyDataFromQueue+0x72>
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	9a 81       	ldd	r25, Y+2	; 0x02
    272e:	fc 01       	movw	r30, r24
    2730:	20 81       	ld	r18, Z
    2732:	31 81       	ldd	r19, Z+1	; 0x01
    2734:	89 81       	ldd	r24, Y+1	; 0x01
    2736:	9a 81       	ldd	r25, Y+2	; 0x02
    2738:	fc 01       	movw	r30, r24
    273a:	37 83       	std	Z+7, r19	; 0x07
    273c:	26 83       	std	Z+6, r18	; 0x06
    273e:	89 81       	ldd	r24, Y+1	; 0x01
    2740:	9a 81       	ldd	r25, Y+2	; 0x02
    2742:	fc 01       	movw	r30, r24
    2744:	84 8d       	ldd	r24, Z+28	; 0x1c
    2746:	48 2f       	mov	r20, r24
    2748:	50 e0       	ldi	r21, 0x00	; 0
    274a:	89 81       	ldd	r24, Y+1	; 0x01
    274c:	9a 81       	ldd	r25, Y+2	; 0x02
    274e:	fc 01       	movw	r30, r24
    2750:	26 81       	ldd	r18, Z+6	; 0x06
    2752:	37 81       	ldd	r19, Z+7	; 0x07
    2754:	8b 81       	ldd	r24, Y+3	; 0x03
    2756:	9c 81       	ldd	r25, Y+4	; 0x04
    2758:	b9 01       	movw	r22, r18
    275a:	0e 94 63 1e 	call	0x3cc6	; 0x3cc6 <memcpy>
    275e:	0f 90       	pop	r0
    2760:	0f 90       	pop	r0
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
    2766:	df 91       	pop	r29
    2768:	cf 91       	pop	r28
    276a:	08 95       	ret

0000276c <prvUnlockQueue>:
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	00 d0       	rcall	.+0      	; 0x2772 <prvUnlockQueue+0x6>
    2772:	00 d0       	rcall	.+0      	; 0x2774 <prvUnlockQueue+0x8>
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	9c 83       	std	Y+4, r25	; 0x04
    277a:	8b 83       	std	Y+3, r24	; 0x03
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	0f 92       	push	r0
    2782:	8b 81       	ldd	r24, Y+3	; 0x03
    2784:	9c 81       	ldd	r25, Y+4	; 0x04
    2786:	fc 01       	movw	r30, r24
    2788:	86 8d       	ldd	r24, Z+30	; 0x1e
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	14 c0       	rjmp	.+40     	; 0x27b6 <prvUnlockQueue+0x4a>
    278e:	8b 81       	ldd	r24, Y+3	; 0x03
    2790:	9c 81       	ldd	r25, Y+4	; 0x04
    2792:	fc 01       	movw	r30, r24
    2794:	81 89       	ldd	r24, Z+17	; 0x11
    2796:	88 23       	and	r24, r24
    2798:	51 f0       	breq	.+20     	; 0x27ae <prvUnlockQueue+0x42>
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	41 96       	adiw	r24, 0x11	; 17
    27a0:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    27a4:	88 23       	and	r24, r24
    27a6:	21 f0       	breq	.+8      	; 0x27b0 <prvUnlockQueue+0x44>
    27a8:	0e 94 17 1a 	call	0x342e	; 0x342e <vTaskMissedYield>
    27ac:	01 c0       	rjmp	.+2      	; 0x27b0 <prvUnlockQueue+0x44>
    27ae:	06 c0       	rjmp	.+12     	; 0x27bc <prvUnlockQueue+0x50>
    27b0:	89 81       	ldd	r24, Y+1	; 0x01
    27b2:	81 50       	subi	r24, 0x01	; 1
    27b4:	89 83       	std	Y+1, r24	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	18 16       	cp	r1, r24
    27ba:	4c f3       	brlt	.-46     	; 0x278e <prvUnlockQueue+0x22>
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	2f ef       	ldi	r18, 0xFF	; 255
    27c2:	fc 01       	movw	r30, r24
    27c4:	26 8f       	std	Z+30, r18	; 0x1e
    27c6:	0f 90       	pop	r0
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	0f 92       	push	r0
    27d0:	8b 81       	ldd	r24, Y+3	; 0x03
    27d2:	9c 81       	ldd	r25, Y+4	; 0x04
    27d4:	fc 01       	movw	r30, r24
    27d6:	85 8d       	ldd	r24, Z+29	; 0x1d
    27d8:	8a 83       	std	Y+2, r24	; 0x02
    27da:	14 c0       	rjmp	.+40     	; 0x2804 <prvUnlockQueue+0x98>
    27dc:	8b 81       	ldd	r24, Y+3	; 0x03
    27de:	9c 81       	ldd	r25, Y+4	; 0x04
    27e0:	fc 01       	movw	r30, r24
    27e2:	80 85       	ldd	r24, Z+8	; 0x08
    27e4:	88 23       	and	r24, r24
    27e6:	69 f0       	breq	.+26     	; 0x2802 <prvUnlockQueue+0x96>
    27e8:	8b 81       	ldd	r24, Y+3	; 0x03
    27ea:	9c 81       	ldd	r25, Y+4	; 0x04
    27ec:	08 96       	adiw	r24, 0x08	; 8
    27ee:	0e 94 27 19 	call	0x324e	; 0x324e <xTaskRemoveFromEventList>
    27f2:	88 23       	and	r24, r24
    27f4:	11 f0       	breq	.+4      	; 0x27fa <prvUnlockQueue+0x8e>
    27f6:	0e 94 17 1a 	call	0x342e	; 0x342e <vTaskMissedYield>
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	81 50       	subi	r24, 0x01	; 1
    27fe:	8a 83       	std	Y+2, r24	; 0x02
    2800:	01 c0       	rjmp	.+2      	; 0x2804 <prvUnlockQueue+0x98>
    2802:	03 c0       	rjmp	.+6      	; 0x280a <prvUnlockQueue+0x9e>
    2804:	8a 81       	ldd	r24, Y+2	; 0x02
    2806:	18 16       	cp	r1, r24
    2808:	4c f3       	brlt	.-46     	; 0x27dc <prvUnlockQueue+0x70>
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	2f ef       	ldi	r18, 0xFF	; 255
    2810:	fc 01       	movw	r30, r24
    2812:	25 8f       	std	Z+29, r18	; 0x1d
    2814:	0f 90       	pop	r0
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	0f 90       	pop	r0
    281e:	0f 90       	pop	r0
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	08 95       	ret

00002826 <prvIsQueueEmpty>:
    2826:	cf 93       	push	r28
    2828:	df 93       	push	r29
    282a:	00 d0       	rcall	.+0      	; 0x282c <prvIsQueueEmpty+0x6>
    282c:	1f 92       	push	r1
    282e:	cd b7       	in	r28, 0x3d	; 61
    2830:	de b7       	in	r29, 0x3e	; 62
    2832:	9b 83       	std	Y+3, r25	; 0x03
    2834:	8a 83       	std	Y+2, r24	; 0x02
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	0f 92       	push	r0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	9b 81       	ldd	r25, Y+3	; 0x03
    2840:	fc 01       	movw	r30, r24
    2842:	82 8d       	ldd	r24, Z+26	; 0x1a
    2844:	88 23       	and	r24, r24
    2846:	19 f4       	brne	.+6      	; 0x284e <prvIsQueueEmpty+0x28>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	89 83       	std	Y+1, r24	; 0x01
    284c:	01 c0       	rjmp	.+2      	; 0x2850 <prvIsQueueEmpty+0x2a>
    284e:	19 82       	std	Y+1, r1	; 0x01
    2850:	0f 90       	pop	r0
    2852:	0f be       	out	0x3f, r0	; 63
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	0f 90       	pop	r0
    2858:	0f 90       	pop	r0
    285a:	0f 90       	pop	r0
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	08 95       	ret

00002862 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    2862:	cf 93       	push	r28
    2864:	df 93       	push	r29
    2866:	00 d0       	rcall	.+0      	; 0x2868 <prvIsQueueFull+0x6>
    2868:	1f 92       	push	r1
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	9b 83       	std	Y+3, r25	; 0x03
    2870:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    2872:	0f b6       	in	r0, 0x3f	; 63
    2874:	f8 94       	cli
    2876:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2878:	8a 81       	ldd	r24, Y+2	; 0x02
    287a:	9b 81       	ldd	r25, Y+3	; 0x03
    287c:	fc 01       	movw	r30, r24
    287e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2880:	8a 81       	ldd	r24, Y+2	; 0x02
    2882:	9b 81       	ldd	r25, Y+3	; 0x03
    2884:	fc 01       	movw	r30, r24
    2886:	83 8d       	ldd	r24, Z+27	; 0x1b
    2888:	28 17       	cp	r18, r24
    288a:	19 f4       	brne	.+6      	; 0x2892 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	89 83       	std	Y+1, r24	; 0x01
    2890:	01 c0       	rjmp	.+2      	; 0x2894 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2892:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2894:	0f 90       	pop	r0
    2896:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2898:	89 81       	ldd	r24, Y+1	; 0x01
}
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	0f 90       	pop	r0
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	08 95       	ret

000028a6 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    28a6:	8f 92       	push	r8
    28a8:	9f 92       	push	r9
    28aa:	af 92       	push	r10
    28ac:	bf 92       	push	r11
    28ae:	cf 92       	push	r12
    28b0:	df 92       	push	r13
    28b2:	ef 92       	push	r14
    28b4:	ff 92       	push	r15
    28b6:	0f 93       	push	r16
    28b8:	1f 93       	push	r17
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	60 97       	sbiw	r28, 0x10	; 16
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	de bf       	out	0x3e, r29	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	cd bf       	out	0x3d, r28	; 61
    28ce:	9f 83       	std	Y+7, r25	; 0x07
    28d0:	8e 83       	std	Y+6, r24	; 0x06
    28d2:	79 87       	std	Y+9, r23	; 0x09
    28d4:	68 87       	std	Y+8, r22	; 0x08
    28d6:	5b 87       	std	Y+11, r21	; 0x0b
    28d8:	4a 87       	std	Y+10, r20	; 0x0a
    28da:	3d 87       	std	Y+13, r19	; 0x0d
    28dc:	2c 87       	std	Y+12, r18	; 0x0c
    28de:	0e 87       	std	Y+14, r16	; 0x0e
    28e0:	f8 8a       	std	Y+16, r15	; 0x10
    28e2:	ef 86       	std	Y+15, r14	; 0x0f
    28e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    28e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    28e8:	0e 94 27 0c 	call	0x184e	; 0x184e <pvPortMalloc>
    28ec:	9d 83       	std	Y+5, r25	; 0x05
    28ee:	8c 83       	std	Y+4, r24	; 0x04
    28f0:	8c 81       	ldd	r24, Y+4	; 0x04
    28f2:	9d 81       	ldd	r25, Y+5	; 0x05
    28f4:	89 2b       	or	r24, r25
    28f6:	b9 f0       	breq	.+46     	; 0x2926 <xTaskCreate+0x80>
    28f8:	8c e2       	ldi	r24, 0x2C	; 44
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	0e 94 27 0c 	call	0x184e	; 0x184e <pvPortMalloc>
    2900:	9a 83       	std	Y+2, r25	; 0x02
    2902:	89 83       	std	Y+1, r24	; 0x01
    2904:	89 81       	ldd	r24, Y+1	; 0x01
    2906:	9a 81       	ldd	r25, Y+2	; 0x02
    2908:	89 2b       	or	r24, r25
    290a:	41 f0       	breq	.+16     	; 0x291c <xTaskCreate+0x76>
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	9a 81       	ldd	r25, Y+2	; 0x02
    2910:	2c 81       	ldd	r18, Y+4	; 0x04
    2912:	3d 81       	ldd	r19, Y+5	; 0x05
    2914:	fc 01       	movw	r30, r24
    2916:	30 8f       	std	Z+24, r19	; 0x18
    2918:	27 8b       	std	Z+23, r18	; 0x17
    291a:	07 c0       	rjmp	.+14     	; 0x292a <xTaskCreate+0x84>
    291c:	8c 81       	ldd	r24, Y+4	; 0x04
    291e:	9d 81       	ldd	r25, Y+5	; 0x05
    2920:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vPortFree>
    2924:	02 c0       	rjmp	.+4      	; 0x292a <xTaskCreate+0x84>
    2926:	1a 82       	std	Y+2, r1	; 0x02
    2928:	19 82       	std	Y+1, r1	; 0x01
    292a:	89 81       	ldd	r24, Y+1	; 0x01
    292c:	9a 81       	ldd	r25, Y+2	; 0x02
    292e:	89 2b       	or	r24, r25
    2930:	09 f1       	breq	.+66     	; 0x2974 <xTaskCreate+0xce>
    2932:	8a 85       	ldd	r24, Y+10	; 0x0a
    2934:	9b 85       	ldd	r25, Y+11	; 0x0b
    2936:	cc 01       	movw	r24, r24
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	09 81       	ldd	r16, Y+1	; 0x01
    293e:	1a 81       	ldd	r17, Y+2	; 0x02
    2940:	4f 85       	ldd	r20, Y+15	; 0x0f
    2942:	58 89       	ldd	r21, Y+16	; 0x10
    2944:	2c 85       	ldd	r18, Y+12	; 0x0c
    2946:	3d 85       	ldd	r19, Y+13	; 0x0d
    2948:	68 85       	ldd	r22, Y+8	; 0x08
    294a:	79 85       	ldd	r23, Y+9	; 0x09
    294c:	ee 81       	ldd	r30, Y+6	; 0x06
    294e:	ff 81       	ldd	r31, Y+7	; 0x07
    2950:	81 2c       	mov	r8, r1
    2952:	91 2c       	mov	r9, r1
    2954:	58 01       	movw	r10, r16
    2956:	6a 01       	movw	r12, r20
    2958:	ee 84       	ldd	r14, Y+14	; 0x0e
    295a:	89 01       	movw	r16, r18
    295c:	9c 01       	movw	r18, r24
    295e:	ad 01       	movw	r20, r26
    2960:	cf 01       	movw	r24, r30
    2962:	0e 94 d0 14 	call	0x29a0	; 0x29a0 <prvInitialiseNewTask>
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	0e 94 aa 15 	call	0x2b54	; 0x2b54 <prvAddNewTaskToReadyList>
    296e:	81 e0       	ldi	r24, 0x01	; 1
    2970:	8b 83       	std	Y+3, r24	; 0x03
    2972:	02 c0       	rjmp	.+4      	; 0x2978 <xTaskCreate+0xd2>
    2974:	8f ef       	ldi	r24, 0xFF	; 255
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	8b 81       	ldd	r24, Y+3	; 0x03
    297a:	60 96       	adiw	r28, 0x10	; 16
    297c:	0f b6       	in	r0, 0x3f	; 63
    297e:	f8 94       	cli
    2980:	de bf       	out	0x3e, r29	; 62
    2982:	0f be       	out	0x3f, r0	; 63
    2984:	cd bf       	out	0x3d, r28	; 61
    2986:	df 91       	pop	r29
    2988:	cf 91       	pop	r28
    298a:	1f 91       	pop	r17
    298c:	0f 91       	pop	r16
    298e:	ff 90       	pop	r15
    2990:	ef 90       	pop	r14
    2992:	df 90       	pop	r13
    2994:	cf 90       	pop	r12
    2996:	bf 90       	pop	r11
    2998:	af 90       	pop	r10
    299a:	9f 90       	pop	r9
    299c:	8f 90       	pop	r8
    299e:	08 95       	ret

000029a0 <prvInitialiseNewTask>:
    29a0:	8f 92       	push	r8
    29a2:	9f 92       	push	r9
    29a4:	af 92       	push	r10
    29a6:	bf 92       	push	r11
    29a8:	cf 92       	push	r12
    29aa:	df 92       	push	r13
    29ac:	ef 92       	push	r14
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	64 97       	sbiw	r28, 0x14	; 20
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	f8 94       	cli
    29c0:	de bf       	out	0x3e, r29	; 62
    29c2:	0f be       	out	0x3f, r0	; 63
    29c4:	cd bf       	out	0x3d, r28	; 61
    29c6:	9d 83       	std	Y+5, r25	; 0x05
    29c8:	8c 83       	std	Y+4, r24	; 0x04
    29ca:	7f 83       	std	Y+7, r23	; 0x07
    29cc:	6e 83       	std	Y+6, r22	; 0x06
    29ce:	28 87       	std	Y+8, r18	; 0x08
    29d0:	39 87       	std	Y+9, r19	; 0x09
    29d2:	4a 87       	std	Y+10, r20	; 0x0a
    29d4:	5b 87       	std	Y+11, r21	; 0x0b
    29d6:	1d 87       	std	Y+13, r17	; 0x0d
    29d8:	0c 87       	std	Y+12, r16	; 0x0c
    29da:	ee 86       	std	Y+14, r14	; 0x0e
    29dc:	d8 8a       	std	Y+16, r13	; 0x10
    29de:	cf 86       	std	Y+15, r12	; 0x0f
    29e0:	ba 8a       	std	Y+18, r11	; 0x12
    29e2:	a9 8a       	std	Y+17, r10	; 0x11
    29e4:	9c 8a       	std	Y+20, r9	; 0x14
    29e6:	8b 8a       	std	Y+19, r8	; 0x13
    29e8:	28 85       	ldd	r18, Y+8	; 0x08
    29ea:	39 85       	ldd	r19, Y+9	; 0x09
    29ec:	89 89       	ldd	r24, Y+17	; 0x11
    29ee:	9a 89       	ldd	r25, Y+18	; 0x12
    29f0:	fc 01       	movw	r30, r24
    29f2:	87 89       	ldd	r24, Z+23	; 0x17
    29f4:	90 8d       	ldd	r25, Z+24	; 0x18
    29f6:	a9 01       	movw	r20, r18
    29f8:	65 ea       	ldi	r22, 0xA5	; 165
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <memset>
    2a00:	89 89       	ldd	r24, Y+17	; 0x11
    2a02:	9a 89       	ldd	r25, Y+18	; 0x12
    2a04:	fc 01       	movw	r30, r24
    2a06:	27 89       	ldd	r18, Z+23	; 0x17
    2a08:	30 8d       	ldd	r19, Z+24	; 0x18
    2a0a:	88 85       	ldd	r24, Y+8	; 0x08
    2a0c:	99 85       	ldd	r25, Y+9	; 0x09
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	82 0f       	add	r24, r18
    2a12:	93 1f       	adc	r25, r19
    2a14:	9b 83       	std	Y+3, r25	; 0x03
    2a16:	8a 83       	std	Y+2, r24	; 0x02
    2a18:	19 82       	std	Y+1, r1	; 0x01
    2a1a:	22 c0       	rjmp	.+68     	; 0x2a60 <prvInitialiseNewTask+0xc0>
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	88 2f       	mov	r24, r24
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	29 81       	ldd	r18, Y+1	; 0x01
    2a24:	22 2f       	mov	r18, r18
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4e 81       	ldd	r20, Y+6	; 0x06
    2a2a:	5f 81       	ldd	r21, Y+7	; 0x07
    2a2c:	24 0f       	add	r18, r20
    2a2e:	35 1f       	adc	r19, r21
    2a30:	f9 01       	movw	r30, r18
    2a32:	40 81       	ld	r20, Z
    2a34:	29 89       	ldd	r18, Y+17	; 0x11
    2a36:	3a 89       	ldd	r19, Y+18	; 0x12
    2a38:	82 0f       	add	r24, r18
    2a3a:	93 1f       	adc	r25, r19
    2a3c:	49 96       	adiw	r24, 0x19	; 25
    2a3e:	fc 01       	movw	r30, r24
    2a40:	40 83       	st	Z, r20
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	88 2f       	mov	r24, r24
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	2e 81       	ldd	r18, Y+6	; 0x06
    2a4a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a4c:	82 0f       	add	r24, r18
    2a4e:	93 1f       	adc	r25, r19
    2a50:	fc 01       	movw	r30, r24
    2a52:	80 81       	ld	r24, Z
    2a54:	88 23       	and	r24, r24
    2a56:	09 f4       	brne	.+2      	; 0x2a5a <prvInitialiseNewTask+0xba>
    2a58:	06 c0       	rjmp	.+12     	; 0x2a66 <prvInitialiseNewTask+0xc6>
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	8f 5f       	subi	r24, 0xFF	; 255
    2a5e:	89 83       	std	Y+1, r24	; 0x01
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	88 30       	cpi	r24, 0x08	; 8
    2a64:	d8 f2       	brcs	.-74     	; 0x2a1c <prvInitialiseNewTask+0x7c>
    2a66:	89 89       	ldd	r24, Y+17	; 0x11
    2a68:	9a 89       	ldd	r25, Y+18	; 0x12
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	10 a2       	std	Z+32, r1	; 0x20
    2a6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2a70:	84 30       	cpi	r24, 0x04	; 4
    2a72:	10 f0       	brcs	.+4      	; 0x2a78 <prvInitialiseNewTask+0xd8>
    2a74:	83 e0       	ldi	r24, 0x03	; 3
    2a76:	8e 87       	std	Y+14, r24	; 0x0e
    2a78:	89 89       	ldd	r24, Y+17	; 0x11
    2a7a:	9a 89       	ldd	r25, Y+18	; 0x12
    2a7c:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a7e:	fc 01       	movw	r30, r24
    2a80:	26 8b       	std	Z+22, r18	; 0x16
    2a82:	89 89       	ldd	r24, Y+17	; 0x11
    2a84:	9a 89       	ldd	r25, Y+18	; 0x12
    2a86:	2e 85       	ldd	r18, Y+14	; 0x0e
    2a88:	fc 01       	movw	r30, r24
    2a8a:	23 a3       	std	Z+35, r18	; 0x23
    2a8c:	89 89       	ldd	r24, Y+17	; 0x11
    2a8e:	9a 89       	ldd	r25, Y+18	; 0x12
    2a90:	fc 01       	movw	r30, r24
    2a92:	14 a2       	std	Z+36, r1	; 0x24
    2a94:	89 89       	ldd	r24, Y+17	; 0x11
    2a96:	9a 89       	ldd	r25, Y+18	; 0x12
    2a98:	02 96       	adiw	r24, 0x02	; 2
    2a9a:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialiseItem>
    2a9e:	89 89       	ldd	r24, Y+17	; 0x11
    2aa0:	9a 89       	ldd	r25, Y+18	; 0x12
    2aa2:	0c 96       	adiw	r24, 0x0c	; 12
    2aa4:	0e 94 02 08 	call	0x1004	; 0x1004 <vListInitialiseItem>
    2aa8:	89 89       	ldd	r24, Y+17	; 0x11
    2aaa:	9a 89       	ldd	r25, Y+18	; 0x12
    2aac:	29 89       	ldd	r18, Y+17	; 0x11
    2aae:	3a 89       	ldd	r19, Y+18	; 0x12
    2ab0:	fc 01       	movw	r30, r24
    2ab2:	31 87       	std	Z+9, r19	; 0x09
    2ab4:	20 87       	std	Z+8, r18	; 0x08
    2ab6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ab8:	88 2f       	mov	r24, r24
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	24 e0       	ldi	r18, 0x04	; 4
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	28 1b       	sub	r18, r24
    2ac2:	39 0b       	sbc	r19, r25
    2ac4:	89 89       	ldd	r24, Y+17	; 0x11
    2ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    2ac8:	fc 01       	movw	r30, r24
    2aca:	35 87       	std	Z+13, r19	; 0x0d
    2acc:	24 87       	std	Z+12, r18	; 0x0c
    2ace:	89 89       	ldd	r24, Y+17	; 0x11
    2ad0:	9a 89       	ldd	r25, Y+18	; 0x12
    2ad2:	29 89       	ldd	r18, Y+17	; 0x11
    2ad4:	3a 89       	ldd	r19, Y+18	; 0x12
    2ad6:	fc 01       	movw	r30, r24
    2ad8:	33 8b       	std	Z+19, r19	; 0x13
    2ada:	22 8b       	std	Z+18, r18	; 0x12
    2adc:	89 89       	ldd	r24, Y+17	; 0x11
    2ade:	9a 89       	ldd	r25, Y+18	; 0x12
    2ae0:	fc 01       	movw	r30, r24
    2ae2:	16 a2       	std	Z+38, r1	; 0x26
    2ae4:	15 a2       	std	Z+37, r1	; 0x25
    2ae6:	89 89       	ldd	r24, Y+17	; 0x11
    2ae8:	9a 89       	ldd	r25, Y+18	; 0x12
    2aea:	fc 01       	movw	r30, r24
    2aec:	17 a2       	std	Z+39, r1	; 0x27
    2aee:	10 a6       	std	Z+40, r1	; 0x28
    2af0:	11 a6       	std	Z+41, r1	; 0x29
    2af2:	12 a6       	std	Z+42, r1	; 0x2a
    2af4:	89 89       	ldd	r24, Y+17	; 0x11
    2af6:	9a 89       	ldd	r25, Y+18	; 0x12
    2af8:	fc 01       	movw	r30, r24
    2afa:	13 a6       	std	Z+43, r1	; 0x2b
    2afc:	4c 85       	ldd	r20, Y+12	; 0x0c
    2afe:	5d 85       	ldd	r21, Y+13	; 0x0d
    2b00:	2c 81       	ldd	r18, Y+4	; 0x04
    2b02:	3d 81       	ldd	r19, Y+5	; 0x05
    2b04:	8a 81       	ldd	r24, Y+2	; 0x02
    2b06:	9b 81       	ldd	r25, Y+3	; 0x03
    2b08:	b9 01       	movw	r22, r18
    2b0a:	0e 94 2f 09 	call	0x125e	; 0x125e <pxPortInitialiseStack>
    2b0e:	9c 01       	movw	r18, r24
    2b10:	89 89       	ldd	r24, Y+17	; 0x11
    2b12:	9a 89       	ldd	r25, Y+18	; 0x12
    2b14:	fc 01       	movw	r30, r24
    2b16:	31 83       	std	Z+1, r19	; 0x01
    2b18:	20 83       	st	Z, r18
    2b1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b1c:	98 89       	ldd	r25, Y+16	; 0x10
    2b1e:	89 2b       	or	r24, r25
    2b20:	39 f0       	breq	.+14     	; 0x2b30 <prvInitialiseNewTask+0x190>
    2b22:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b24:	98 89       	ldd	r25, Y+16	; 0x10
    2b26:	29 89       	ldd	r18, Y+17	; 0x11
    2b28:	3a 89       	ldd	r19, Y+18	; 0x12
    2b2a:	fc 01       	movw	r30, r24
    2b2c:	31 83       	std	Z+1, r19	; 0x01
    2b2e:	20 83       	st	Z, r18
    2b30:	64 96       	adiw	r28, 0x14	; 20
    2b32:	0f b6       	in	r0, 0x3f	; 63
    2b34:	f8 94       	cli
    2b36:	de bf       	out	0x3e, r29	; 62
    2b38:	0f be       	out	0x3f, r0	; 63
    2b3a:	cd bf       	out	0x3d, r28	; 61
    2b3c:	df 91       	pop	r29
    2b3e:	cf 91       	pop	r28
    2b40:	1f 91       	pop	r17
    2b42:	0f 91       	pop	r16
    2b44:	ef 90       	pop	r14
    2b46:	df 90       	pop	r13
    2b48:	cf 90       	pop	r12
    2b4a:	bf 90       	pop	r11
    2b4c:	af 90       	pop	r10
    2b4e:	9f 90       	pop	r9
    2b50:	8f 90       	pop	r8
    2b52:	08 95       	ret

00002b54 <prvAddNewTaskToReadyList>:
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <prvAddNewTaskToReadyList+0x6>
    2b5a:	cd b7       	in	r28, 0x3d	; 61
    2b5c:	de b7       	in	r29, 0x3e	; 62
    2b5e:	9a 83       	std	Y+2, r25	; 0x02
    2b60:	89 83       	std	Y+1, r24	; 0x01
    2b62:	0f b6       	in	r0, 0x3f	; 63
    2b64:	f8 94       	cli
    2b66:	0f 92       	push	r0
    2b68:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxCurrentNumberOfTasks>
    2b6c:	8f 5f       	subi	r24, 0xFF	; 255
    2b6e:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <uxCurrentNumberOfTasks>
    2b72:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    2b76:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    2b7a:	89 2b       	or	r24, r25
    2b7c:	69 f4       	brne	.+26     	; 0x2b98 <prvAddNewTaskToReadyList+0x44>
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	9a 81       	ldd	r25, Y+2	; 0x02
    2b82:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <pxCurrentTCB+0x1>
    2b86:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <pxCurrentTCB>
    2b8a:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxCurrentNumberOfTasks>
    2b8e:	81 30       	cpi	r24, 0x01	; 1
    2b90:	c9 f4       	brne	.+50     	; 0x2bc4 <prvAddNewTaskToReadyList+0x70>
    2b92:	0e 94 33 1a 	call	0x3466	; 0x3466 <prvInitialiseTaskLists>
    2b96:	16 c0       	rjmp	.+44     	; 0x2bc4 <prvAddNewTaskToReadyList+0x70>
    2b98:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <xSchedulerRunning>
    2b9c:	88 23       	and	r24, r24
    2b9e:	91 f4       	brne	.+36     	; 0x2bc4 <prvAddNewTaskToReadyList+0x70>
    2ba0:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    2ba4:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    2ba8:	fc 01       	movw	r30, r24
    2baa:	26 89       	ldd	r18, Z+22	; 0x16
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	fc 01       	movw	r30, r24
    2bb2:	86 89       	ldd	r24, Z+22	; 0x16
    2bb4:	82 17       	cp	r24, r18
    2bb6:	30 f0       	brcs	.+12     	; 0x2bc4 <prvAddNewTaskToReadyList+0x70>
    2bb8:	89 81       	ldd	r24, Y+1	; 0x01
    2bba:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbc:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <pxCurrentTCB+0x1>
    2bc0:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <pxCurrentTCB>
    2bc4:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <uxTaskNumber>
    2bc8:	8f 5f       	subi	r24, 0xFF	; 255
    2bca:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <uxTaskNumber>
    2bce:	20 91 dd 05 	lds	r18, 0x05DD	; 0x8005dd <uxTaskNumber>
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	21 a3       	std	Z+33, r18	; 0x21
    2bda:	89 81       	ldd	r24, Y+1	; 0x01
    2bdc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bde:	fc 01       	movw	r30, r24
    2be0:	96 89       	ldd	r25, Z+22	; 0x16
    2be2:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    2be6:	89 17       	cp	r24, r25
    2be8:	30 f4       	brcc	.+12     	; 0x2bf6 <prvAddNewTaskToReadyList+0xa2>
    2bea:	89 81       	ldd	r24, Y+1	; 0x01
    2bec:	9a 81       	ldd	r25, Y+2	; 0x02
    2bee:	fc 01       	movw	r30, r24
    2bf0:	86 89       	ldd	r24, Z+22	; 0x16
    2bf2:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    2bf6:	89 81       	ldd	r24, Y+1	; 0x01
    2bf8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bfa:	ac 01       	movw	r20, r24
    2bfc:	4e 5f       	subi	r20, 0xFE	; 254
    2bfe:	5f 4f       	sbci	r21, 0xFF	; 255
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	fc 01       	movw	r30, r24
    2c06:	86 89       	ldd	r24, Z+22	; 0x16
    2c08:	28 2f       	mov	r18, r24
    2c0a:	30 e0       	ldi	r19, 0x00	; 0
    2c0c:	c9 01       	movw	r24, r18
    2c0e:	88 0f       	add	r24, r24
    2c10:	99 1f       	adc	r25, r25
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	82 0f       	add	r24, r18
    2c1c:	93 1f       	adc	r25, r19
    2c1e:	88 57       	subi	r24, 0x78	; 120
    2c20:	9a 4f       	sbci	r25, 0xFA	; 250
    2c22:	ba 01       	movw	r22, r20
    2c24:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    2c28:	0f 90       	pop	r0
    2c2a:	0f be       	out	0x3f, r0	; 63
    2c2c:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <xSchedulerRunning>
    2c30:	88 23       	and	r24, r24
    2c32:	71 f0       	breq	.+28     	; 0x2c50 <prvAddNewTaskToReadyList+0xfc>
    2c34:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    2c38:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	26 89       	ldd	r18, Z+22	; 0x16
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	9a 81       	ldd	r25, Y+2	; 0x02
    2c44:	fc 01       	movw	r30, r24
    2c46:	86 89       	ldd	r24, Z+22	; 0x16
    2c48:	28 17       	cp	r18, r24
    2c4a:	10 f4       	brcc	.+4      	; 0x2c50 <prvAddNewTaskToReadyList+0xfc>
    2c4c:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    2c50:	0f 90       	pop	r0
    2c52:	0f 90       	pop	r0
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	08 95       	ret

00002c5a <vTaskDelayUntil>:
    2c5a:	cf 93       	push	r28
    2c5c:	df 93       	push	r29
    2c5e:	cd b7       	in	r28, 0x3d	; 61
    2c60:	de b7       	in	r29, 0x3e	; 62
    2c62:	2a 97       	sbiw	r28, 0x0a	; 10
    2c64:	0f b6       	in	r0, 0x3f	; 63
    2c66:	f8 94       	cli
    2c68:	de bf       	out	0x3e, r29	; 62
    2c6a:	0f be       	out	0x3f, r0	; 63
    2c6c:	cd bf       	out	0x3d, r28	; 61
    2c6e:	98 87       	std	Y+8, r25	; 0x08
    2c70:	8f 83       	std	Y+7, r24	; 0x07
    2c72:	7a 87       	std	Y+10, r23	; 0x0a
    2c74:	69 87       	std	Y+9, r22	; 0x09
    2c76:	19 82       	std	Y+1, r1	; 0x01
    2c78:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskSuspendAll>
    2c7c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <xTickCount>
    2c80:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    2c84:	9b 83       	std	Y+3, r25	; 0x03
    2c86:	8a 83       	std	Y+2, r24	; 0x02
    2c88:	8f 81       	ldd	r24, Y+7	; 0x07
    2c8a:	98 85       	ldd	r25, Y+8	; 0x08
    2c8c:	fc 01       	movw	r30, r24
    2c8e:	20 81       	ld	r18, Z
    2c90:	31 81       	ldd	r19, Z+1	; 0x01
    2c92:	89 85       	ldd	r24, Y+9	; 0x09
    2c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c96:	82 0f       	add	r24, r18
    2c98:	93 1f       	adc	r25, r19
    2c9a:	9d 83       	std	Y+5, r25	; 0x05
    2c9c:	8c 83       	std	Y+4, r24	; 0x04
    2c9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca0:	98 85       	ldd	r25, Y+8	; 0x08
    2ca2:	fc 01       	movw	r30, r24
    2ca4:	20 81       	ld	r18, Z
    2ca6:	31 81       	ldd	r19, Z+1	; 0x01
    2ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    2caa:	9b 81       	ldd	r25, Y+3	; 0x03
    2cac:	82 17       	cp	r24, r18
    2cae:	93 07       	cpc	r25, r19
    2cb0:	a0 f4       	brcc	.+40     	; 0x2cda <vTaskDelayUntil+0x80>
    2cb2:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb4:	98 85       	ldd	r25, Y+8	; 0x08
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	20 81       	ld	r18, Z
    2cba:	31 81       	ldd	r19, Z+1	; 0x01
    2cbc:	8c 81       	ldd	r24, Y+4	; 0x04
    2cbe:	9d 81       	ldd	r25, Y+5	; 0x05
    2cc0:	82 17       	cp	r24, r18
    2cc2:	93 07       	cpc	r25, r19
    2cc4:	e8 f4       	brcc	.+58     	; 0x2d00 <vTaskDelayUntil+0xa6>
    2cc6:	2c 81       	ldd	r18, Y+4	; 0x04
    2cc8:	3d 81       	ldd	r19, Y+5	; 0x05
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	82 17       	cp	r24, r18
    2cd0:	93 07       	cpc	r25, r19
    2cd2:	b0 f4       	brcc	.+44     	; 0x2d00 <vTaskDelayUntil+0xa6>
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	89 83       	std	Y+1, r24	; 0x01
    2cd8:	13 c0       	rjmp	.+38     	; 0x2d00 <vTaskDelayUntil+0xa6>
    2cda:	8f 81       	ldd	r24, Y+7	; 0x07
    2cdc:	98 85       	ldd	r25, Y+8	; 0x08
    2cde:	fc 01       	movw	r30, r24
    2ce0:	20 81       	ld	r18, Z
    2ce2:	31 81       	ldd	r19, Z+1	; 0x01
    2ce4:	8c 81       	ldd	r24, Y+4	; 0x04
    2ce6:	9d 81       	ldd	r25, Y+5	; 0x05
    2ce8:	82 17       	cp	r24, r18
    2cea:	93 07       	cpc	r25, r19
    2cec:	38 f0       	brcs	.+14     	; 0x2cfc <vTaskDelayUntil+0xa2>
    2cee:	2c 81       	ldd	r18, Y+4	; 0x04
    2cf0:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf6:	82 17       	cp	r24, r18
    2cf8:	93 07       	cpc	r25, r19
    2cfa:	10 f4       	brcc	.+4      	; 0x2d00 <vTaskDelayUntil+0xa6>
    2cfc:	81 e0       	ldi	r24, 0x01	; 1
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    2d00:	8f 81       	ldd	r24, Y+7	; 0x07
    2d02:	98 85       	ldd	r25, Y+8	; 0x08
    2d04:	2c 81       	ldd	r18, Y+4	; 0x04
    2d06:	3d 81       	ldd	r19, Y+5	; 0x05
    2d08:	fc 01       	movw	r30, r24
    2d0a:	31 83       	std	Z+1, r19	; 0x01
    2d0c:	20 83       	st	Z, r18
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	88 23       	and	r24, r24
    2d12:	59 f0       	breq	.+22     	; 0x2d2a <vTaskDelayUntil+0xd0>
    2d14:	2c 81       	ldd	r18, Y+4	; 0x04
    2d16:	3d 81       	ldd	r19, Y+5	; 0x05
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1c:	a9 01       	movw	r20, r18
    2d1e:	48 1b       	sub	r20, r24
    2d20:	59 0b       	sbc	r21, r25
    2d22:	ca 01       	movw	r24, r20
    2d24:	60 e0       	ldi	r22, 0x00	; 0
    2d26:	0e 94 23 1c 	call	0x3846	; 0x3846 <prvAddCurrentTaskToDelayedList>
    2d2a:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    2d2e:	8e 83       	std	Y+6, r24	; 0x06
    2d30:	8e 81       	ldd	r24, Y+6	; 0x06
    2d32:	88 23       	and	r24, r24
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <vTaskDelayUntil+0xe0>
    2d36:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    2d3a:	2a 96       	adiw	r28, 0x0a	; 10
    2d3c:	0f b6       	in	r0, 0x3f	; 63
    2d3e:	f8 94       	cli
    2d40:	de bf       	out	0x3e, r29	; 62
    2d42:	0f be       	out	0x3f, r0	; 63
    2d44:	cd bf       	out	0x3d, r28	; 61
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	08 95       	ret

00002d4c <vTaskStartScheduler>:
    2d4c:	ef 92       	push	r14
    2d4e:	ff 92       	push	r15
    2d50:	0f 93       	push	r16
    2d52:	cf 93       	push	r28
    2d54:	df 93       	push	r29
    2d56:	1f 92       	push	r1
    2d58:	cd b7       	in	r28, 0x3d	; 61
    2d5a:	de b7       	in	r29, 0x3e	; 62
    2d5c:	0f 2e       	mov	r0, r31
    2d5e:	f0 ee       	ldi	r31, 0xE0	; 224
    2d60:	ef 2e       	mov	r14, r31
    2d62:	f5 e0       	ldi	r31, 0x05	; 5
    2d64:	ff 2e       	mov	r15, r31
    2d66:	f0 2d       	mov	r31, r0
    2d68:	00 e0       	ldi	r16, 0x00	; 0
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	45 e5       	ldi	r20, 0x55	; 85
    2d70:	50 e0       	ldi	r21, 0x00	; 0
    2d72:	6b e5       	ldi	r22, 0x5B	; 91
    2d74:	71 e0       	ldi	r23, 0x01	; 1
    2d76:	81 e2       	ldi	r24, 0x21	; 33
    2d78:	9a e1       	ldi	r25, 0x1A	; 26
    2d7a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <xTaskCreate>
    2d7e:	89 83       	std	Y+1, r24	; 0x01
    2d80:	89 81       	ldd	r24, Y+1	; 0x01
    2d82:	81 30       	cpi	r24, 0x01	; 1
    2d84:	81 f4       	brne	.+32     	; 0x2da6 <vTaskStartScheduler+0x5a>
    2d86:	f8 94       	cli
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	9f ef       	ldi	r25, 0xFF	; 255
    2d8c:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    2d90:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>
    2d94:	81 e0       	ldi	r24, 0x01	; 1
    2d96:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <xSchedulerRunning>
    2d9a:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <xTickCount+0x1>
    2d9e:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <xTickCount>
    2da2:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <xPortStartScheduler>
    2da6:	0f 90       	pop	r0
    2da8:	df 91       	pop	r29
    2daa:	cf 91       	pop	r28
    2dac:	0f 91       	pop	r16
    2dae:	ff 90       	pop	r15
    2db0:	ef 90       	pop	r14
    2db2:	08 95       	ret

00002db4 <vTaskSuspendAll>:
    2db4:	cf 93       	push	r28
    2db6:	df 93       	push	r29
    2db8:	cd b7       	in	r28, 0x3d	; 61
    2dba:	de b7       	in	r29, 0x3e	; 62
    2dbc:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    2dc0:	8f 5f       	subi	r24, 0xFF	; 255
    2dc2:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <uxSchedulerSuspended>
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	08 95       	ret

00002dcc <xTaskResumeAll>:
    2dcc:	cf 93       	push	r28
    2dce:	df 93       	push	r29
    2dd0:	00 d0       	rcall	.+0      	; 0x2dd2 <xTaskResumeAll+0x6>
    2dd2:	00 d0       	rcall	.+0      	; 0x2dd4 <xTaskResumeAll+0x8>
    2dd4:	cd b7       	in	r28, 0x3d	; 61
    2dd6:	de b7       	in	r29, 0x3e	; 62
    2dd8:	1a 82       	std	Y+2, r1	; 0x02
    2dda:	19 82       	std	Y+1, r1	; 0x01
    2ddc:	1b 82       	std	Y+3, r1	; 0x03
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	0f 92       	push	r0
    2de4:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    2de8:	81 50       	subi	r24, 0x01	; 1
    2dea:	80 93 e2 05 	sts	0x05E2, r24	; 0x8005e2 <uxSchedulerSuspended>
    2dee:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    2df2:	88 23       	and	r24, r24
    2df4:	09 f0       	breq	.+2      	; 0x2df8 <xTaskResumeAll+0x2c>
    2df6:	77 c0       	rjmp	.+238    	; 0x2ee6 <xTaskResumeAll+0x11a>
    2df8:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxCurrentNumberOfTasks>
    2dfc:	88 23       	and	r24, r24
    2dfe:	09 f4       	brne	.+2      	; 0x2e02 <xTaskResumeAll+0x36>
    2e00:	72 c0       	rjmp	.+228    	; 0x2ee6 <xTaskResumeAll+0x11a>
    2e02:	49 c0       	rjmp	.+146    	; 0x2e96 <xTaskResumeAll+0xca>
    2e04:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <xPendingReadyList+0x5>
    2e08:	90 91 c8 05 	lds	r25, 0x05C8	; 0x8005c8 <xPendingReadyList+0x6>
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	86 81       	ldd	r24, Z+6	; 0x06
    2e10:	97 81       	ldd	r25, Z+7	; 0x07
    2e12:	9a 83       	std	Y+2, r25	; 0x02
    2e14:	89 83       	std	Y+1, r24	; 0x01
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	9a 81       	ldd	r25, Y+2	; 0x02
    2e1a:	0c 96       	adiw	r24, 0x0c	; 12
    2e1c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    2e20:	89 81       	ldd	r24, Y+1	; 0x01
    2e22:	9a 81       	ldd	r25, Y+2	; 0x02
    2e24:	02 96       	adiw	r24, 0x02	; 2
    2e26:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2e:	fc 01       	movw	r30, r24
    2e30:	96 89       	ldd	r25, Z+22	; 0x16
    2e32:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    2e36:	89 17       	cp	r24, r25
    2e38:	30 f4       	brcc	.+12     	; 0x2e46 <xTaskResumeAll+0x7a>
    2e3a:	89 81       	ldd	r24, Y+1	; 0x01
    2e3c:	9a 81       	ldd	r25, Y+2	; 0x02
    2e3e:	fc 01       	movw	r30, r24
    2e40:	86 89       	ldd	r24, Z+22	; 0x16
    2e42:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4a:	ac 01       	movw	r20, r24
    2e4c:	4e 5f       	subi	r20, 0xFE	; 254
    2e4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2e50:	89 81       	ldd	r24, Y+1	; 0x01
    2e52:	9a 81       	ldd	r25, Y+2	; 0x02
    2e54:	fc 01       	movw	r30, r24
    2e56:	86 89       	ldd	r24, Z+22	; 0x16
    2e58:	28 2f       	mov	r18, r24
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	c9 01       	movw	r24, r18
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	82 0f       	add	r24, r18
    2e6c:	93 1f       	adc	r25, r19
    2e6e:	88 57       	subi	r24, 0x78	; 120
    2e70:	9a 4f       	sbci	r25, 0xFA	; 250
    2e72:	ba 01       	movw	r22, r20
    2e74:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    2e78:	89 81       	ldd	r24, Y+1	; 0x01
    2e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	26 89       	ldd	r18, Z+22	; 0x16
    2e80:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    2e84:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    2e88:	fc 01       	movw	r30, r24
    2e8a:	86 89       	ldd	r24, Z+22	; 0x16
    2e8c:	28 17       	cp	r18, r24
    2e8e:	18 f0       	brcs	.+6      	; 0x2e96 <xTaskResumeAll+0xca>
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xYieldPending>
    2e96:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <xPendingReadyList>
    2e9a:	88 23       	and	r24, r24
    2e9c:	09 f0       	breq	.+2      	; 0x2ea0 <xTaskResumeAll+0xd4>
    2e9e:	b2 cf       	rjmp	.-156    	; 0x2e04 <xTaskResumeAll+0x38>
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ea4:	89 2b       	or	r24, r25
    2ea6:	11 f0       	breq	.+4      	; 0x2eac <xTaskResumeAll+0xe0>
    2ea8:	0e 94 c7 1a 	call	0x358e	; 0x358e <prvResetNextTaskUnblockTime>
    2eac:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxPendedTicks>
    2eb0:	8c 83       	std	Y+4, r24	; 0x04
    2eb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb4:	88 23       	and	r24, r24
    2eb6:	79 f0       	breq	.+30     	; 0x2ed6 <xTaskResumeAll+0x10a>
    2eb8:	0e 94 94 17 	call	0x2f28	; 0x2f28 <xTaskIncrementTick>
    2ebc:	88 23       	and	r24, r24
    2ebe:	19 f0       	breq	.+6      	; 0x2ec6 <xTaskResumeAll+0xfa>
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xYieldPending>
    2ec6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ec8:	81 50       	subi	r24, 0x01	; 1
    2eca:	8c 83       	std	Y+4, r24	; 0x04
    2ecc:	8c 81       	ldd	r24, Y+4	; 0x04
    2ece:	88 23       	and	r24, r24
    2ed0:	99 f7       	brne	.-26     	; 0x2eb8 <xTaskResumeAll+0xec>
    2ed2:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <uxPendedTicks>
    2ed6:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <xYieldPending>
    2eda:	88 23       	and	r24, r24
    2edc:	21 f0       	breq	.+8      	; 0x2ee6 <xTaskResumeAll+0x11a>
    2ede:	81 e0       	ldi	r24, 0x01	; 1
    2ee0:	8b 83       	std	Y+3, r24	; 0x03
    2ee2:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    2ee6:	0f 90       	pop	r0
    2ee8:	0f be       	out	0x3f, r0	; 63
    2eea:	8b 81       	ldd	r24, Y+3	; 0x03
    2eec:	0f 90       	pop	r0
    2eee:	0f 90       	pop	r0
    2ef0:	0f 90       	pop	r0
    2ef2:	0f 90       	pop	r0
    2ef4:	df 91       	pop	r29
    2ef6:	cf 91       	pop	r28
    2ef8:	08 95       	ret

00002efa <xTaskGetTickCount>:
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	00 d0       	rcall	.+0      	; 0x2f00 <xTaskGetTickCount+0x6>
    2f00:	cd b7       	in	r28, 0x3d	; 61
    2f02:	de b7       	in	r29, 0x3e	; 62
    2f04:	0f b6       	in	r0, 0x3f	; 63
    2f06:	f8 94       	cli
    2f08:	0f 92       	push	r0
    2f0a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <xTickCount>
    2f0e:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    2f12:	9a 83       	std	Y+2, r25	; 0x02
    2f14:	89 83       	std	Y+1, r24	; 0x01
    2f16:	0f 90       	pop	r0
    2f18:	0f be       	out	0x3f, r0	; 63
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	0f 90       	pop	r0
    2f20:	0f 90       	pop	r0
    2f22:	df 91       	pop	r29
    2f24:	cf 91       	pop	r28
    2f26:	08 95       	ret

00002f28 <xTaskIncrementTick>:
    2f28:	cf 93       	push	r28
    2f2a:	df 93       	push	r29
    2f2c:	cd b7       	in	r28, 0x3d	; 61
    2f2e:	de b7       	in	r29, 0x3e	; 62
    2f30:	29 97       	sbiw	r28, 0x09	; 9
    2f32:	0f b6       	in	r0, 0x3f	; 63
    2f34:	f8 94       	cli
    2f36:	de bf       	out	0x3e, r29	; 62
    2f38:	0f be       	out	0x3f, r0	; 63
    2f3a:	cd bf       	out	0x3d, r28	; 61
    2f3c:	19 82       	std	Y+1, r1	; 0x01
    2f3e:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    2f42:	88 23       	and	r24, r24
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <xTaskIncrementTick+0x20>
    2f46:	c7 c0       	rjmp	.+398    	; 0x30d6 <xTaskIncrementTick+0x1ae>
    2f48:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <xTickCount>
    2f4c:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    2f50:	01 96       	adiw	r24, 0x01	; 1
    2f52:	9b 83       	std	Y+3, r25	; 0x03
    2f54:	8a 83       	std	Y+2, r24	; 0x02
    2f56:	8a 81       	ldd	r24, Y+2	; 0x02
    2f58:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5a:	90 93 d7 05 	sts	0x05D7, r25	; 0x8005d7 <xTickCount+0x1>
    2f5e:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <xTickCount>
    2f62:	8a 81       	ldd	r24, Y+2	; 0x02
    2f64:	9b 81       	ldd	r25, Y+3	; 0x03
    2f66:	89 2b       	or	r24, r25
    2f68:	d9 f4       	brne	.+54     	; 0x2fa0 <xTaskIncrementTick+0x78>
    2f6a:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    2f6e:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    2f72:	9d 83       	std	Y+5, r25	; 0x05
    2f74:	8c 83       	std	Y+4, r24	; 0x04
    2f76:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxOverflowDelayedTaskList>
    2f7a:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxOverflowDelayedTaskList+0x1>
    2f7e:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <pxDelayedTaskList+0x1>
    2f82:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <pxDelayedTaskList>
    2f86:	8c 81       	ldd	r24, Y+4	; 0x04
    2f88:	9d 81       	ldd	r25, Y+5	; 0x05
    2f8a:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <pxOverflowDelayedTaskList+0x1>
    2f8e:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <pxOverflowDelayedTaskList>
    2f92:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <xNumOfOverflows>
    2f96:	8f 5f       	subi	r24, 0xFF	; 255
    2f98:	80 93 dc 05 	sts	0x05DC, r24	; 0x8005dc <xNumOfOverflows>
    2f9c:	0e 94 c7 1a 	call	0x358e	; 0x358e <prvResetNextTaskUnblockTime>
    2fa0:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <xNextTaskUnblockTime>
    2fa4:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <xNextTaskUnblockTime+0x1>
    2fa8:	2a 81       	ldd	r18, Y+2	; 0x02
    2faa:	3b 81       	ldd	r19, Y+3	; 0x03
    2fac:	28 17       	cp	r18, r24
    2fae:	39 07       	cpc	r19, r25
    2fb0:	08 f4       	brcc	.+2      	; 0x2fb4 <xTaskIncrementTick+0x8c>
    2fb2:	77 c0       	rjmp	.+238    	; 0x30a2 <xTaskIncrementTick+0x17a>
    2fb4:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    2fb8:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    2fbc:	fc 01       	movw	r30, r24
    2fbe:	80 81       	ld	r24, Z
    2fc0:	88 23       	and	r24, r24
    2fc2:	39 f4       	brne	.+14     	; 0x2fd2 <xTaskIncrementTick+0xaa>
    2fc4:	8f ef       	ldi	r24, 0xFF	; 255
    2fc6:	9f ef       	ldi	r25, 0xFF	; 255
    2fc8:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    2fcc:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>
    2fd0:	68 c0       	rjmp	.+208    	; 0x30a2 <xTaskIncrementTick+0x17a>
    2fd2:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    2fd6:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    2fda:	fc 01       	movw	r30, r24
    2fdc:	85 81       	ldd	r24, Z+5	; 0x05
    2fde:	96 81       	ldd	r25, Z+6	; 0x06
    2fe0:	fc 01       	movw	r30, r24
    2fe2:	86 81       	ldd	r24, Z+6	; 0x06
    2fe4:	97 81       	ldd	r25, Z+7	; 0x07
    2fe6:	9f 83       	std	Y+7, r25	; 0x07
    2fe8:	8e 83       	std	Y+6, r24	; 0x06
    2fea:	8e 81       	ldd	r24, Y+6	; 0x06
    2fec:	9f 81       	ldd	r25, Y+7	; 0x07
    2fee:	fc 01       	movw	r30, r24
    2ff0:	82 81       	ldd	r24, Z+2	; 0x02
    2ff2:	93 81       	ldd	r25, Z+3	; 0x03
    2ff4:	99 87       	std	Y+9, r25	; 0x09
    2ff6:	88 87       	std	Y+8, r24	; 0x08
    2ff8:	2a 81       	ldd	r18, Y+2	; 0x02
    2ffa:	3b 81       	ldd	r19, Y+3	; 0x03
    2ffc:	88 85       	ldd	r24, Y+8	; 0x08
    2ffe:	99 85       	ldd	r25, Y+9	; 0x09
    3000:	28 17       	cp	r18, r24
    3002:	39 07       	cpc	r19, r25
    3004:	38 f4       	brcc	.+14     	; 0x3014 <xTaskIncrementTick+0xec>
    3006:	88 85       	ldd	r24, Y+8	; 0x08
    3008:	99 85       	ldd	r25, Y+9	; 0x09
    300a:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    300e:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>
    3012:	47 c0       	rjmp	.+142    	; 0x30a2 <xTaskIncrementTick+0x17a>
    3014:	8e 81       	ldd	r24, Y+6	; 0x06
    3016:	9f 81       	ldd	r25, Y+7	; 0x07
    3018:	02 96       	adiw	r24, 0x02	; 2
    301a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    301e:	8e 81       	ldd	r24, Y+6	; 0x06
    3020:	9f 81       	ldd	r25, Y+7	; 0x07
    3022:	fc 01       	movw	r30, r24
    3024:	84 89       	ldd	r24, Z+20	; 0x14
    3026:	95 89       	ldd	r25, Z+21	; 0x15
    3028:	89 2b       	or	r24, r25
    302a:	29 f0       	breq	.+10     	; 0x3036 <xTaskIncrementTick+0x10e>
    302c:	8e 81       	ldd	r24, Y+6	; 0x06
    302e:	9f 81       	ldd	r25, Y+7	; 0x07
    3030:	0c 96       	adiw	r24, 0x0c	; 12
    3032:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    3036:	8e 81       	ldd	r24, Y+6	; 0x06
    3038:	9f 81       	ldd	r25, Y+7	; 0x07
    303a:	fc 01       	movw	r30, r24
    303c:	96 89       	ldd	r25, Z+22	; 0x16
    303e:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    3042:	89 17       	cp	r24, r25
    3044:	30 f4       	brcc	.+12     	; 0x3052 <xTaskIncrementTick+0x12a>
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	9f 81       	ldd	r25, Y+7	; 0x07
    304a:	fc 01       	movw	r30, r24
    304c:	86 89       	ldd	r24, Z+22	; 0x16
    304e:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    3052:	8e 81       	ldd	r24, Y+6	; 0x06
    3054:	9f 81       	ldd	r25, Y+7	; 0x07
    3056:	ac 01       	movw	r20, r24
    3058:	4e 5f       	subi	r20, 0xFE	; 254
    305a:	5f 4f       	sbci	r21, 0xFF	; 255
    305c:	8e 81       	ldd	r24, Y+6	; 0x06
    305e:	9f 81       	ldd	r25, Y+7	; 0x07
    3060:	fc 01       	movw	r30, r24
    3062:	86 89       	ldd	r24, Z+22	; 0x16
    3064:	28 2f       	mov	r18, r24
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	c9 01       	movw	r24, r18
    306a:	88 0f       	add	r24, r24
    306c:	99 1f       	adc	r25, r25
    306e:	88 0f       	add	r24, r24
    3070:	99 1f       	adc	r25, r25
    3072:	88 0f       	add	r24, r24
    3074:	99 1f       	adc	r25, r25
    3076:	82 0f       	add	r24, r18
    3078:	93 1f       	adc	r25, r19
    307a:	88 57       	subi	r24, 0x78	; 120
    307c:	9a 4f       	sbci	r25, 0xFA	; 250
    307e:	ba 01       	movw	r22, r20
    3080:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    3084:	8e 81       	ldd	r24, Y+6	; 0x06
    3086:	9f 81       	ldd	r25, Y+7	; 0x07
    3088:	fc 01       	movw	r30, r24
    308a:	26 89       	ldd	r18, Z+22	; 0x16
    308c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3090:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3094:	fc 01       	movw	r30, r24
    3096:	86 89       	ldd	r24, Z+22	; 0x16
    3098:	28 17       	cp	r18, r24
    309a:	10 f0       	brcs	.+4      	; 0x30a0 <xTaskIncrementTick+0x178>
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	89 83       	std	Y+1, r24	; 0x01
    30a0:	89 cf       	rjmp	.-238    	; 0x2fb4 <xTaskIncrementTick+0x8c>
    30a2:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    30a6:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    30aa:	fc 01       	movw	r30, r24
    30ac:	86 89       	ldd	r24, Z+22	; 0x16
    30ae:	28 2f       	mov	r18, r24
    30b0:	30 e0       	ldi	r19, 0x00	; 0
    30b2:	c9 01       	movw	r24, r18
    30b4:	88 0f       	add	r24, r24
    30b6:	99 1f       	adc	r25, r25
    30b8:	88 0f       	add	r24, r24
    30ba:	99 1f       	adc	r25, r25
    30bc:	88 0f       	add	r24, r24
    30be:	99 1f       	adc	r25, r25
    30c0:	82 0f       	add	r24, r18
    30c2:	93 1f       	adc	r25, r19
    30c4:	88 57       	subi	r24, 0x78	; 120
    30c6:	9a 4f       	sbci	r25, 0xFA	; 250
    30c8:	fc 01       	movw	r30, r24
    30ca:	80 81       	ld	r24, Z
    30cc:	82 30       	cpi	r24, 0x02	; 2
    30ce:	10 f0       	brcs	.+4      	; 0x30d4 <xTaskIncrementTick+0x1ac>
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	05 c0       	rjmp	.+10     	; 0x30e0 <xTaskIncrementTick+0x1b8>
    30d6:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <uxPendedTicks>
    30da:	8f 5f       	subi	r24, 0xFF	; 255
    30dc:	80 93 da 05 	sts	0x05DA, r24	; 0x8005da <uxPendedTicks>
    30e0:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <xYieldPending>
    30e4:	88 23       	and	r24, r24
    30e6:	11 f0       	breq	.+4      	; 0x30ec <xTaskIncrementTick+0x1c4>
    30e8:	81 e0       	ldi	r24, 0x01	; 1
    30ea:	89 83       	std	Y+1, r24	; 0x01
    30ec:	89 81       	ldd	r24, Y+1	; 0x01
    30ee:	29 96       	adiw	r28, 0x09	; 9
    30f0:	0f b6       	in	r0, 0x3f	; 63
    30f2:	f8 94       	cli
    30f4:	de bf       	out	0x3e, r29	; 62
    30f6:	0f be       	out	0x3f, r0	; 63
    30f8:	cd bf       	out	0x3d, r28	; 61
    30fa:	df 91       	pop	r29
    30fc:	cf 91       	pop	r28
    30fe:	08 95       	ret

00003100 <vTaskSwitchContext>:
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	00 d0       	rcall	.+0      	; 0x3106 <vTaskSwitchContext+0x6>
    3106:	1f 92       	push	r1
    3108:	cd b7       	in	r28, 0x3d	; 61
    310a:	de b7       	in	r29, 0x3e	; 62
    310c:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    3110:	88 23       	and	r24, r24
    3112:	21 f0       	breq	.+8      	; 0x311c <vTaskSwitchContext+0x1c>
    3114:	81 e0       	ldi	r24, 0x01	; 1
    3116:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xYieldPending>
    311a:	71 c0       	rjmp	.+226    	; 0x31fe <vTaskSwitchContext+0xfe>
    311c:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <xYieldPending>
    3120:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3124:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3128:	fc 01       	movw	r30, r24
    312a:	85 a1       	ldd	r24, Z+37	; 0x25
    312c:	96 a1       	ldd	r25, Z+38	; 0x26
    312e:	0e 94 20 07 	call	0xe40	; 0xe40 <switch_out>
    3132:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    3136:	89 83       	std	Y+1, r24	; 0x01
    3138:	03 c0       	rjmp	.+6      	; 0x3140 <vTaskSwitchContext+0x40>
    313a:	89 81       	ldd	r24, Y+1	; 0x01
    313c:	81 50       	subi	r24, 0x01	; 1
    313e:	89 83       	std	Y+1, r24	; 0x01
    3140:	89 81       	ldd	r24, Y+1	; 0x01
    3142:	28 2f       	mov	r18, r24
    3144:	30 e0       	ldi	r19, 0x00	; 0
    3146:	c9 01       	movw	r24, r18
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	88 0f       	add	r24, r24
    314e:	99 1f       	adc	r25, r25
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	82 0f       	add	r24, r18
    3156:	93 1f       	adc	r25, r19
    3158:	88 57       	subi	r24, 0x78	; 120
    315a:	9a 4f       	sbci	r25, 0xFA	; 250
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	88 23       	and	r24, r24
    3162:	59 f3       	breq	.-42     	; 0x313a <vTaskSwitchContext+0x3a>
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	28 2f       	mov	r18, r24
    3168:	30 e0       	ldi	r19, 0x00	; 0
    316a:	c9 01       	movw	r24, r18
    316c:	88 0f       	add	r24, r24
    316e:	99 1f       	adc	r25, r25
    3170:	88 0f       	add	r24, r24
    3172:	99 1f       	adc	r25, r25
    3174:	88 0f       	add	r24, r24
    3176:	99 1f       	adc	r25, r25
    3178:	82 0f       	add	r24, r18
    317a:	93 1f       	adc	r25, r19
    317c:	88 57       	subi	r24, 0x78	; 120
    317e:	9a 4f       	sbci	r25, 0xFA	; 250
    3180:	9b 83       	std	Y+3, r25	; 0x03
    3182:	8a 83       	std	Y+2, r24	; 0x02
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	9b 81       	ldd	r25, Y+3	; 0x03
    3188:	fc 01       	movw	r30, r24
    318a:	81 81       	ldd	r24, Z+1	; 0x01
    318c:	92 81       	ldd	r25, Z+2	; 0x02
    318e:	fc 01       	movw	r30, r24
    3190:	22 81       	ldd	r18, Z+2	; 0x02
    3192:	33 81       	ldd	r19, Z+3	; 0x03
    3194:	8a 81       	ldd	r24, Y+2	; 0x02
    3196:	9b 81       	ldd	r25, Y+3	; 0x03
    3198:	fc 01       	movw	r30, r24
    319a:	32 83       	std	Z+2, r19	; 0x02
    319c:	21 83       	std	Z+1, r18	; 0x01
    319e:	8a 81       	ldd	r24, Y+2	; 0x02
    31a0:	9b 81       	ldd	r25, Y+3	; 0x03
    31a2:	fc 01       	movw	r30, r24
    31a4:	21 81       	ldd	r18, Z+1	; 0x01
    31a6:	32 81       	ldd	r19, Z+2	; 0x02
    31a8:	8a 81       	ldd	r24, Y+2	; 0x02
    31aa:	9b 81       	ldd	r25, Y+3	; 0x03
    31ac:	03 96       	adiw	r24, 0x03	; 3
    31ae:	28 17       	cp	r18, r24
    31b0:	39 07       	cpc	r19, r25
    31b2:	69 f4       	brne	.+26     	; 0x31ce <vTaskSwitchContext+0xce>
    31b4:	8a 81       	ldd	r24, Y+2	; 0x02
    31b6:	9b 81       	ldd	r25, Y+3	; 0x03
    31b8:	fc 01       	movw	r30, r24
    31ba:	81 81       	ldd	r24, Z+1	; 0x01
    31bc:	92 81       	ldd	r25, Z+2	; 0x02
    31be:	fc 01       	movw	r30, r24
    31c0:	22 81       	ldd	r18, Z+2	; 0x02
    31c2:	33 81       	ldd	r19, Z+3	; 0x03
    31c4:	8a 81       	ldd	r24, Y+2	; 0x02
    31c6:	9b 81       	ldd	r25, Y+3	; 0x03
    31c8:	fc 01       	movw	r30, r24
    31ca:	32 83       	std	Z+2, r19	; 0x02
    31cc:	21 83       	std	Z+1, r18	; 0x01
    31ce:	8a 81       	ldd	r24, Y+2	; 0x02
    31d0:	9b 81       	ldd	r25, Y+3	; 0x03
    31d2:	fc 01       	movw	r30, r24
    31d4:	81 81       	ldd	r24, Z+1	; 0x01
    31d6:	92 81       	ldd	r25, Z+2	; 0x02
    31d8:	fc 01       	movw	r30, r24
    31da:	86 81       	ldd	r24, Z+6	; 0x06
    31dc:	97 81       	ldd	r25, Z+7	; 0x07
    31de:	90 93 87 05 	sts	0x0587, r25	; 0x800587 <pxCurrentTCB+0x1>
    31e2:	80 93 86 05 	sts	0x0586, r24	; 0x800586 <pxCurrentTCB>
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    31ec:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    31f0:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    31f4:	fc 01       	movw	r30, r24
    31f6:	85 a1       	ldd	r24, Z+37	; 0x25
    31f8:	96 a1       	ldd	r25, Z+38	; 0x26
    31fa:	0e 94 16 07 	call	0xe2c	; 0xe2c <switch_in>
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	0f 90       	pop	r0
    3204:	df 91       	pop	r29
    3206:	cf 91       	pop	r28
    3208:	08 95       	ret

0000320a <vTaskPlaceOnEventList>:
    320a:	cf 93       	push	r28
    320c:	df 93       	push	r29
    320e:	00 d0       	rcall	.+0      	; 0x3210 <vTaskPlaceOnEventList+0x6>
    3210:	00 d0       	rcall	.+0      	; 0x3212 <vTaskPlaceOnEventList+0x8>
    3212:	cd b7       	in	r28, 0x3d	; 61
    3214:	de b7       	in	r29, 0x3e	; 62
    3216:	9a 83       	std	Y+2, r25	; 0x02
    3218:	89 83       	std	Y+1, r24	; 0x01
    321a:	7c 83       	std	Y+4, r23	; 0x04
    321c:	6b 83       	std	Y+3, r22	; 0x03
    321e:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3222:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3226:	9c 01       	movw	r18, r24
    3228:	24 5f       	subi	r18, 0xF4	; 244
    322a:	3f 4f       	sbci	r19, 0xFF	; 255
    322c:	89 81       	ldd	r24, Y+1	; 0x01
    322e:	9a 81       	ldd	r25, Y+2	; 0x02
    3230:	b9 01       	movw	r22, r18
    3232:	0e 94 61 08 	call	0x10c2	; 0x10c2 <vListInsert>
    3236:	8b 81       	ldd	r24, Y+3	; 0x03
    3238:	9c 81       	ldd	r25, Y+4	; 0x04
    323a:	61 e0       	ldi	r22, 0x01	; 1
    323c:	0e 94 23 1c 	call	0x3846	; 0x3846 <prvAddCurrentTaskToDelayedList>
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	0f 90       	pop	r0
    3246:	0f 90       	pop	r0
    3248:	df 91       	pop	r29
    324a:	cf 91       	pop	r28
    324c:	08 95       	ret

0000324e <xTaskRemoveFromEventList>:
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
    3252:	00 d0       	rcall	.+0      	; 0x3254 <xTaskRemoveFromEventList+0x6>
    3254:	00 d0       	rcall	.+0      	; 0x3256 <xTaskRemoveFromEventList+0x8>
    3256:	1f 92       	push	r1
    3258:	cd b7       	in	r28, 0x3d	; 61
    325a:	de b7       	in	r29, 0x3e	; 62
    325c:	9d 83       	std	Y+5, r25	; 0x05
    325e:	8c 83       	std	Y+4, r24	; 0x04
    3260:	8c 81       	ldd	r24, Y+4	; 0x04
    3262:	9d 81       	ldd	r25, Y+5	; 0x05
    3264:	fc 01       	movw	r30, r24
    3266:	85 81       	ldd	r24, Z+5	; 0x05
    3268:	96 81       	ldd	r25, Z+6	; 0x06
    326a:	fc 01       	movw	r30, r24
    326c:	86 81       	ldd	r24, Z+6	; 0x06
    326e:	97 81       	ldd	r25, Z+7	; 0x07
    3270:	9b 83       	std	Y+3, r25	; 0x03
    3272:	8a 83       	std	Y+2, r24	; 0x02
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	0c 96       	adiw	r24, 0x0c	; 12
    327a:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    327e:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <uxSchedulerSuspended>
    3282:	88 23       	and	r24, r24
    3284:	69 f5       	brne	.+90     	; 0x32e0 <xTaskRemoveFromEventList+0x92>
    3286:	8a 81       	ldd	r24, Y+2	; 0x02
    3288:	9b 81       	ldd	r25, Y+3	; 0x03
    328a:	02 96       	adiw	r24, 0x02	; 2
    328c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	fc 01       	movw	r30, r24
    3296:	96 89       	ldd	r25, Z+22	; 0x16
    3298:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    329c:	89 17       	cp	r24, r25
    329e:	30 f4       	brcc	.+12     	; 0x32ac <xTaskRemoveFromEventList+0x5e>
    32a0:	8a 81       	ldd	r24, Y+2	; 0x02
    32a2:	9b 81       	ldd	r25, Y+3	; 0x03
    32a4:	fc 01       	movw	r30, r24
    32a6:	86 89       	ldd	r24, Z+22	; 0x16
    32a8:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    32ac:	8a 81       	ldd	r24, Y+2	; 0x02
    32ae:	9b 81       	ldd	r25, Y+3	; 0x03
    32b0:	ac 01       	movw	r20, r24
    32b2:	4e 5f       	subi	r20, 0xFE	; 254
    32b4:	5f 4f       	sbci	r21, 0xFF	; 255
    32b6:	8a 81       	ldd	r24, Y+2	; 0x02
    32b8:	9b 81       	ldd	r25, Y+3	; 0x03
    32ba:	fc 01       	movw	r30, r24
    32bc:	86 89       	ldd	r24, Z+22	; 0x16
    32be:	28 2f       	mov	r18, r24
    32c0:	30 e0       	ldi	r19, 0x00	; 0
    32c2:	c9 01       	movw	r24, r18
    32c4:	88 0f       	add	r24, r24
    32c6:	99 1f       	adc	r25, r25
    32c8:	88 0f       	add	r24, r24
    32ca:	99 1f       	adc	r25, r25
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	82 0f       	add	r24, r18
    32d2:	93 1f       	adc	r25, r19
    32d4:	88 57       	subi	r24, 0x78	; 120
    32d6:	9a 4f       	sbci	r25, 0xFA	; 250
    32d8:	ba 01       	movw	r22, r20
    32da:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    32de:	08 c0       	rjmp	.+16     	; 0x32f0 <xTaskRemoveFromEventList+0xa2>
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	0c 96       	adiw	r24, 0x0c	; 12
    32e6:	bc 01       	movw	r22, r24
    32e8:	82 ec       	ldi	r24, 0xC2	; 194
    32ea:	95 e0       	ldi	r25, 0x05	; 5
    32ec:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	9b 81       	ldd	r25, Y+3	; 0x03
    32f4:	fc 01       	movw	r30, r24
    32f6:	26 89       	ldd	r18, Z+22	; 0x16
    32f8:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    32fc:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3300:	fc 01       	movw	r30, r24
    3302:	86 89       	ldd	r24, Z+22	; 0x16
    3304:	82 17       	cp	r24, r18
    3306:	30 f4       	brcc	.+12     	; 0x3314 <xTaskRemoveFromEventList+0xc6>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	89 83       	std	Y+1, r24	; 0x01
    330c:	81 e0       	ldi	r24, 0x01	; 1
    330e:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xYieldPending>
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <xTaskRemoveFromEventList+0xc8>
    3314:	19 82       	std	Y+1, r1	; 0x01
    3316:	89 81       	ldd	r24, Y+1	; 0x01
    3318:	0f 90       	pop	r0
    331a:	0f 90       	pop	r0
    331c:	0f 90       	pop	r0
    331e:	0f 90       	pop	r0
    3320:	0f 90       	pop	r0
    3322:	df 91       	pop	r29
    3324:	cf 91       	pop	r28
    3326:	08 95       	ret

00003328 <vTaskSetTimeOutState>:
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	00 d0       	rcall	.+0      	; 0x332e <vTaskSetTimeOutState+0x6>
    332e:	cd b7       	in	r28, 0x3d	; 61
    3330:	de b7       	in	r29, 0x3e	; 62
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	89 83       	std	Y+1, r24	; 0x01
    3336:	20 91 dc 05 	lds	r18, 0x05DC	; 0x8005dc <xNumOfOverflows>
    333a:	89 81       	ldd	r24, Y+1	; 0x01
    333c:	9a 81       	ldd	r25, Y+2	; 0x02
    333e:	fc 01       	movw	r30, r24
    3340:	20 83       	st	Z, r18
    3342:	20 91 d6 05 	lds	r18, 0x05D6	; 0x8005d6 <xTickCount>
    3346:	30 91 d7 05 	lds	r19, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    334a:	89 81       	ldd	r24, Y+1	; 0x01
    334c:	9a 81       	ldd	r25, Y+2	; 0x02
    334e:	fc 01       	movw	r30, r24
    3350:	32 83       	std	Z+2, r19	; 0x02
    3352:	21 83       	std	Z+1, r18	; 0x01
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	df 91       	pop	r29
    335a:	cf 91       	pop	r28
    335c:	08 95       	ret

0000335e <xTaskCheckForTimeOut>:
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	27 97       	sbiw	r28, 0x07	; 7
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
    3372:	9d 83       	std	Y+5, r25	; 0x05
    3374:	8c 83       	std	Y+4, r24	; 0x04
    3376:	7f 83       	std	Y+7, r23	; 0x07
    3378:	6e 83       	std	Y+6, r22	; 0x06
    337a:	0f b6       	in	r0, 0x3f	; 63
    337c:	f8 94       	cli
    337e:	0f 92       	push	r0
    3380:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <xTickCount>
    3384:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    3388:	9b 83       	std	Y+3, r25	; 0x03
    338a:	8a 83       	std	Y+2, r24	; 0x02
    338c:	8c 81       	ldd	r24, Y+4	; 0x04
    338e:	9d 81       	ldd	r25, Y+5	; 0x05
    3390:	fc 01       	movw	r30, r24
    3392:	90 81       	ld	r25, Z
    3394:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <xNumOfOverflows>
    3398:	98 17       	cp	r25, r24
    339a:	69 f0       	breq	.+26     	; 0x33b6 <xTaskCheckForTimeOut+0x58>
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	9d 81       	ldd	r25, Y+5	; 0x05
    33a0:	fc 01       	movw	r30, r24
    33a2:	21 81       	ldd	r18, Z+1	; 0x01
    33a4:	32 81       	ldd	r19, Z+2	; 0x02
    33a6:	8a 81       	ldd	r24, Y+2	; 0x02
    33a8:	9b 81       	ldd	r25, Y+3	; 0x03
    33aa:	82 17       	cp	r24, r18
    33ac:	93 07       	cpc	r25, r19
    33ae:	18 f0       	brcs	.+6      	; 0x33b6 <xTaskCheckForTimeOut+0x58>
    33b0:	81 e0       	ldi	r24, 0x01	; 1
    33b2:	89 83       	std	Y+1, r24	; 0x01
    33b4:	30 c0       	rjmp	.+96     	; 0x3416 <xTaskCheckForTimeOut+0xb8>
    33b6:	8c 81       	ldd	r24, Y+4	; 0x04
    33b8:	9d 81       	ldd	r25, Y+5	; 0x05
    33ba:	fc 01       	movw	r30, r24
    33bc:	81 81       	ldd	r24, Z+1	; 0x01
    33be:	92 81       	ldd	r25, Z+2	; 0x02
    33c0:	2a 81       	ldd	r18, Y+2	; 0x02
    33c2:	3b 81       	ldd	r19, Y+3	; 0x03
    33c4:	28 1b       	sub	r18, r24
    33c6:	39 0b       	sbc	r19, r25
    33c8:	8e 81       	ldd	r24, Y+6	; 0x06
    33ca:	9f 81       	ldd	r25, Y+7	; 0x07
    33cc:	fc 01       	movw	r30, r24
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	28 17       	cp	r18, r24
    33d4:	39 07       	cpc	r19, r25
    33d6:	e8 f4       	brcc	.+58     	; 0x3412 <xTaskCheckForTimeOut+0xb4>
    33d8:	8e 81       	ldd	r24, Y+6	; 0x06
    33da:	9f 81       	ldd	r25, Y+7	; 0x07
    33dc:	fc 01       	movw	r30, r24
    33de:	20 81       	ld	r18, Z
    33e0:	31 81       	ldd	r19, Z+1	; 0x01
    33e2:	8c 81       	ldd	r24, Y+4	; 0x04
    33e4:	9d 81       	ldd	r25, Y+5	; 0x05
    33e6:	fc 01       	movw	r30, r24
    33e8:	41 81       	ldd	r20, Z+1	; 0x01
    33ea:	52 81       	ldd	r21, Z+2	; 0x02
    33ec:	8a 81       	ldd	r24, Y+2	; 0x02
    33ee:	9b 81       	ldd	r25, Y+3	; 0x03
    33f0:	ba 01       	movw	r22, r20
    33f2:	68 1b       	sub	r22, r24
    33f4:	79 0b       	sbc	r23, r25
    33f6:	cb 01       	movw	r24, r22
    33f8:	28 0f       	add	r18, r24
    33fa:	39 1f       	adc	r19, r25
    33fc:	8e 81       	ldd	r24, Y+6	; 0x06
    33fe:	9f 81       	ldd	r25, Y+7	; 0x07
    3400:	fc 01       	movw	r30, r24
    3402:	31 83       	std	Z+1, r19	; 0x01
    3404:	20 83       	st	Z, r18
    3406:	8c 81       	ldd	r24, Y+4	; 0x04
    3408:	9d 81       	ldd	r25, Y+5	; 0x05
    340a:	0e 94 94 19 	call	0x3328	; 0x3328 <vTaskSetTimeOutState>
    340e:	19 82       	std	Y+1, r1	; 0x01
    3410:	02 c0       	rjmp	.+4      	; 0x3416 <xTaskCheckForTimeOut+0xb8>
    3412:	81 e0       	ldi	r24, 0x01	; 1
    3414:	89 83       	std	Y+1, r24	; 0x01
    3416:	0f 90       	pop	r0
    3418:	0f be       	out	0x3f, r0	; 63
    341a:	89 81       	ldd	r24, Y+1	; 0x01
    341c:	27 96       	adiw	r28, 0x07	; 7
    341e:	0f b6       	in	r0, 0x3f	; 63
    3420:	f8 94       	cli
    3422:	de bf       	out	0x3e, r29	; 62
    3424:	0f be       	out	0x3f, r0	; 63
    3426:	cd bf       	out	0x3d, r28	; 61
    3428:	df 91       	pop	r29
    342a:	cf 91       	pop	r28
    342c:	08 95       	ret

0000342e <vTaskMissedYield>:
    342e:	cf 93       	push	r28
    3430:	df 93       	push	r29
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	80 93 db 05 	sts	0x05DB, r24	; 0x8005db <xYieldPending>
    343c:	df 91       	pop	r29
    343e:	cf 91       	pop	r28
    3440:	08 95       	ret

00003442 <prvIdleTask>:
    3442:	cf 93       	push	r28
    3444:	df 93       	push	r29
    3446:	00 d0       	rcall	.+0      	; 0x3448 <prvIdleTask+0x6>
    3448:	cd b7       	in	r28, 0x3d	; 61
    344a:	de b7       	in	r29, 0x3e	; 62
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	89 83       	std	Y+1, r24	; 0x01
    3450:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <prvCheckTasksWaitingTermination>
    3454:	80 91 88 05 	lds	r24, 0x0588	; 0x800588 <pxReadyTasksLists>
    3458:	82 30       	cpi	r24, 0x02	; 2
    345a:	10 f0       	brcs	.+4      	; 0x3460 <prvIdleTask+0x1e>
    345c:	0e 94 0d 0b 	call	0x161a	; 0x161a <vPortYield>
    3460:	0e 94 6b 05 	call	0xad6	; 0xad6 <vApplicationIdleHook>
    3464:	f5 cf       	rjmp	.-22     	; 0x3450 <prvIdleTask+0xe>

00003466 <prvInitialiseTaskLists>:
    3466:	cf 93       	push	r28
    3468:	df 93       	push	r29
    346a:	1f 92       	push	r1
    346c:	cd b7       	in	r28, 0x3d	; 61
    346e:	de b7       	in	r29, 0x3e	; 62
    3470:	19 82       	std	Y+1, r1	; 0x01
    3472:	13 c0       	rjmp	.+38     	; 0x349a <prvInitialiseTaskLists+0x34>
    3474:	89 81       	ldd	r24, Y+1	; 0x01
    3476:	28 2f       	mov	r18, r24
    3478:	30 e0       	ldi	r19, 0x00	; 0
    347a:	c9 01       	movw	r24, r18
    347c:	88 0f       	add	r24, r24
    347e:	99 1f       	adc	r25, r25
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	82 0f       	add	r24, r18
    348a:	93 1f       	adc	r25, r19
    348c:	88 57       	subi	r24, 0x78	; 120
    348e:	9a 4f       	sbci	r25, 0xFA	; 250
    3490:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	8f 5f       	subi	r24, 0xFF	; 255
    3498:	89 83       	std	Y+1, r24	; 0x01
    349a:	89 81       	ldd	r24, Y+1	; 0x01
    349c:	84 30       	cpi	r24, 0x04	; 4
    349e:	50 f3       	brcs	.-44     	; 0x3474 <prvInitialiseTaskLists+0xe>
    34a0:	8c ea       	ldi	r24, 0xAC	; 172
    34a2:	95 e0       	ldi	r25, 0x05	; 5
    34a4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    34a8:	85 eb       	ldi	r24, 0xB5	; 181
    34aa:	95 e0       	ldi	r25, 0x05	; 5
    34ac:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    34b0:	82 ec       	ldi	r24, 0xC2	; 194
    34b2:	95 e0       	ldi	r25, 0x05	; 5
    34b4:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    34b8:	8b ec       	ldi	r24, 0xCB	; 203
    34ba:	95 e0       	ldi	r25, 0x05	; 5
    34bc:	0e 94 cd 07 	call	0xf9a	; 0xf9a <vListInitialise>
    34c0:	8c ea       	ldi	r24, 0xAC	; 172
    34c2:	95 e0       	ldi	r25, 0x05	; 5
    34c4:	90 93 bf 05 	sts	0x05BF, r25	; 0x8005bf <pxDelayedTaskList+0x1>
    34c8:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <pxDelayedTaskList>
    34cc:	85 eb       	ldi	r24, 0xB5	; 181
    34ce:	95 e0       	ldi	r25, 0x05	; 5
    34d0:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <pxOverflowDelayedTaskList+0x1>
    34d4:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <pxOverflowDelayedTaskList>
    34d8:	0f 90       	pop	r0
    34da:	df 91       	pop	r29
    34dc:	cf 91       	pop	r28
    34de:	08 95       	ret

000034e0 <prvCheckTasksWaitingTermination>:
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	00 d0       	rcall	.+0      	; 0x34e6 <prvCheckTasksWaitingTermination+0x6>
    34e6:	1f 92       	push	r1
    34e8:	cd b7       	in	r28, 0x3d	; 61
    34ea:	de b7       	in	r29, 0x3e	; 62
    34ec:	2f c0       	rjmp	.+94     	; 0x354c <prvCheckTasksWaitingTermination+0x6c>
    34ee:	0e 94 da 16 	call	0x2db4	; 0x2db4 <vTaskSuspendAll>
    34f2:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTasksWaitingTermination>
    34f6:	81 e0       	ldi	r24, 0x01	; 1
    34f8:	99 23       	and	r25, r25
    34fa:	09 f0       	breq	.+2      	; 0x34fe <prvCheckTasksWaitingTermination+0x1e>
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	89 83       	std	Y+1, r24	; 0x01
    3500:	0e 94 e6 16 	call	0x2dcc	; 0x2dcc <xTaskResumeAll>
    3504:	89 81       	ldd	r24, Y+1	; 0x01
    3506:	88 23       	and	r24, r24
    3508:	09 f5       	brne	.+66     	; 0x354c <prvCheckTasksWaitingTermination+0x6c>
    350a:	0f b6       	in	r0, 0x3f	; 63
    350c:	f8 94       	cli
    350e:	0f 92       	push	r0
    3510:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xTasksWaitingTermination+0x5>
    3514:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <xTasksWaitingTermination+0x6>
    3518:	fc 01       	movw	r30, r24
    351a:	86 81       	ldd	r24, Z+6	; 0x06
    351c:	97 81       	ldd	r25, Z+7	; 0x07
    351e:	9b 83       	std	Y+3, r25	; 0x03
    3520:	8a 83       	std	Y+2, r24	; 0x02
    3522:	8a 81       	ldd	r24, Y+2	; 0x02
    3524:	9b 81       	ldd	r25, Y+3	; 0x03
    3526:	02 96       	adiw	r24, 0x02	; 2
    3528:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    352c:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <uxCurrentNumberOfTasks>
    3530:	81 50       	subi	r24, 0x01	; 1
    3532:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <uxCurrentNumberOfTasks>
    3536:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxDeletedTasksWaitingCleanUp>
    353a:	81 50       	subi	r24, 0x01	; 1
    353c:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <uxDeletedTasksWaitingCleanUp>
    3540:	0f 90       	pop	r0
    3542:	0f be       	out	0x3f, r0	; 63
    3544:	8a 81       	ldd	r24, Y+2	; 0x02
    3546:	9b 81       	ldd	r25, Y+3	; 0x03
    3548:	0e 94 b0 1a 	call	0x3560	; 0x3560 <prvDeleteTCB>
    354c:	80 91 d4 05 	lds	r24, 0x05D4	; 0x8005d4 <uxDeletedTasksWaitingCleanUp>
    3550:	88 23       	and	r24, r24
    3552:	69 f6       	brne	.-102    	; 0x34ee <prvCheckTasksWaitingTermination+0xe>
    3554:	0f 90       	pop	r0
    3556:	0f 90       	pop	r0
    3558:	0f 90       	pop	r0
    355a:	df 91       	pop	r29
    355c:	cf 91       	pop	r28
    355e:	08 95       	ret

00003560 <prvDeleteTCB>:
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	00 d0       	rcall	.+0      	; 0x3566 <prvDeleteTCB+0x6>
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	9a 83       	std	Y+2, r25	; 0x02
    356c:	89 83       	std	Y+1, r24	; 0x01
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	fc 01       	movw	r30, r24
    3574:	87 89       	ldd	r24, Z+23	; 0x17
    3576:	90 8d       	ldd	r25, Z+24	; 0x18
    3578:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vPortFree>
    357c:	89 81       	ldd	r24, Y+1	; 0x01
    357e:	9a 81       	ldd	r25, Y+2	; 0x02
    3580:	0e 94 7c 0c 	call	0x18f8	; 0x18f8 <vPortFree>
    3584:	0f 90       	pop	r0
    3586:	0f 90       	pop	r0
    3588:	df 91       	pop	r29
    358a:	cf 91       	pop	r28
    358c:	08 95       	ret

0000358e <prvResetNextTaskUnblockTime>:
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	00 d0       	rcall	.+0      	; 0x3594 <prvResetNextTaskUnblockTime+0x6>
    3594:	cd b7       	in	r28, 0x3d	; 61
    3596:	de b7       	in	r29, 0x3e	; 62
    3598:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    359c:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    35a0:	fc 01       	movw	r30, r24
    35a2:	80 81       	ld	r24, Z
    35a4:	88 23       	and	r24, r24
    35a6:	39 f4       	brne	.+14     	; 0x35b6 <prvResetNextTaskUnblockTime+0x28>
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	9f ef       	ldi	r25, 0xFF	; 255
    35ac:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    35b0:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>
    35b4:	15 c0       	rjmp	.+42     	; 0x35e0 <prvResetNextTaskUnblockTime+0x52>
    35b6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    35ba:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    35be:	fc 01       	movw	r30, r24
    35c0:	85 81       	ldd	r24, Z+5	; 0x05
    35c2:	96 81       	ldd	r25, Z+6	; 0x06
    35c4:	fc 01       	movw	r30, r24
    35c6:	86 81       	ldd	r24, Z+6	; 0x06
    35c8:	97 81       	ldd	r25, Z+7	; 0x07
    35ca:	9a 83       	std	Y+2, r25	; 0x02
    35cc:	89 83       	std	Y+1, r24	; 0x01
    35ce:	89 81       	ldd	r24, Y+1	; 0x01
    35d0:	9a 81       	ldd	r25, Y+2	; 0x02
    35d2:	fc 01       	movw	r30, r24
    35d4:	82 81       	ldd	r24, Z+2	; 0x02
    35d6:	93 81       	ldd	r25, Z+3	; 0x03
    35d8:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    35dc:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>
    35e0:	0f 90       	pop	r0
    35e2:	0f 90       	pop	r0
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	08 95       	ret

000035ea <vTaskPriorityInherit>:
    35ea:	cf 93       	push	r28
    35ec:	df 93       	push	r29
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <vTaskPriorityInherit+0x6>
    35f0:	00 d0       	rcall	.+0      	; 0x35f2 <vTaskPriorityInherit+0x8>
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9c 83       	std	Y+4, r25	; 0x04
    35f8:	8b 83       	std	Y+3, r24	; 0x03
    35fa:	8b 81       	ldd	r24, Y+3	; 0x03
    35fc:	9c 81       	ldd	r25, Y+4	; 0x04
    35fe:	9a 83       	std	Y+2, r25	; 0x02
    3600:	89 83       	std	Y+1, r24	; 0x01
    3602:	8b 81       	ldd	r24, Y+3	; 0x03
    3604:	9c 81       	ldd	r25, Y+4	; 0x04
    3606:	89 2b       	or	r24, r25
    3608:	09 f4       	brne	.+2      	; 0x360c <vTaskPriorityInherit+0x22>
    360a:	7f c0       	rjmp	.+254    	; 0x370a <vTaskPriorityInherit+0x120>
    360c:	89 81       	ldd	r24, Y+1	; 0x01
    360e:	9a 81       	ldd	r25, Y+2	; 0x02
    3610:	fc 01       	movw	r30, r24
    3612:	26 89       	ldd	r18, Z+22	; 0x16
    3614:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3618:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    361c:	fc 01       	movw	r30, r24
    361e:	86 89       	ldd	r24, Z+22	; 0x16
    3620:	28 17       	cp	r18, r24
    3622:	08 f0       	brcs	.+2      	; 0x3626 <vTaskPriorityInherit+0x3c>
    3624:	72 c0       	rjmp	.+228    	; 0x370a <vTaskPriorityInherit+0x120>
    3626:	89 81       	ldd	r24, Y+1	; 0x01
    3628:	9a 81       	ldd	r25, Y+2	; 0x02
    362a:	fc 01       	movw	r30, r24
    362c:	84 85       	ldd	r24, Z+12	; 0x0c
    362e:	95 85       	ldd	r25, Z+13	; 0x0d
    3630:	99 23       	and	r25, r25
    3632:	8c f0       	brlt	.+34     	; 0x3656 <vTaskPriorityInherit+0x6c>
    3634:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3638:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    363c:	fc 01       	movw	r30, r24
    363e:	86 89       	ldd	r24, Z+22	; 0x16
    3640:	88 2f       	mov	r24, r24
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	24 e0       	ldi	r18, 0x04	; 4
    3646:	30 e0       	ldi	r19, 0x00	; 0
    3648:	28 1b       	sub	r18, r24
    364a:	39 0b       	sbc	r19, r25
    364c:	89 81       	ldd	r24, Y+1	; 0x01
    364e:	9a 81       	ldd	r25, Y+2	; 0x02
    3650:	fc 01       	movw	r30, r24
    3652:	35 87       	std	Z+13, r19	; 0x0d
    3654:	24 87       	std	Z+12, r18	; 0x0c
    3656:	89 81       	ldd	r24, Y+1	; 0x01
    3658:	9a 81       	ldd	r25, Y+2	; 0x02
    365a:	fc 01       	movw	r30, r24
    365c:	42 85       	ldd	r20, Z+10	; 0x0a
    365e:	53 85       	ldd	r21, Z+11	; 0x0b
    3660:	89 81       	ldd	r24, Y+1	; 0x01
    3662:	9a 81       	ldd	r25, Y+2	; 0x02
    3664:	fc 01       	movw	r30, r24
    3666:	86 89       	ldd	r24, Z+22	; 0x16
    3668:	28 2f       	mov	r18, r24
    366a:	30 e0       	ldi	r19, 0x00	; 0
    366c:	c9 01       	movw	r24, r18
    366e:	88 0f       	add	r24, r24
    3670:	99 1f       	adc	r25, r25
    3672:	88 0f       	add	r24, r24
    3674:	99 1f       	adc	r25, r25
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	82 0f       	add	r24, r18
    367c:	93 1f       	adc	r25, r19
    367e:	88 57       	subi	r24, 0x78	; 120
    3680:	9a 4f       	sbci	r25, 0xFA	; 250
    3682:	48 17       	cp	r20, r24
    3684:	59 07       	cpc	r21, r25
    3686:	b9 f5       	brne	.+110    	; 0x36f6 <vTaskPriorityInherit+0x10c>
    3688:	89 81       	ldd	r24, Y+1	; 0x01
    368a:	9a 81       	ldd	r25, Y+2	; 0x02
    368c:	02 96       	adiw	r24, 0x02	; 2
    368e:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    3692:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3696:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    369a:	fc 01       	movw	r30, r24
    369c:	26 89       	ldd	r18, Z+22	; 0x16
    369e:	89 81       	ldd	r24, Y+1	; 0x01
    36a0:	9a 81       	ldd	r25, Y+2	; 0x02
    36a2:	fc 01       	movw	r30, r24
    36a4:	26 8b       	std	Z+22, r18	; 0x16
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	9a 81       	ldd	r25, Y+2	; 0x02
    36aa:	fc 01       	movw	r30, r24
    36ac:	96 89       	ldd	r25, Z+22	; 0x16
    36ae:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    36b2:	89 17       	cp	r24, r25
    36b4:	30 f4       	brcc	.+12     	; 0x36c2 <vTaskPriorityInherit+0xd8>
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	9a 81       	ldd	r25, Y+2	; 0x02
    36ba:	fc 01       	movw	r30, r24
    36bc:	86 89       	ldd	r24, Z+22	; 0x16
    36be:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    36c2:	89 81       	ldd	r24, Y+1	; 0x01
    36c4:	9a 81       	ldd	r25, Y+2	; 0x02
    36c6:	ac 01       	movw	r20, r24
    36c8:	4e 5f       	subi	r20, 0xFE	; 254
    36ca:	5f 4f       	sbci	r21, 0xFF	; 255
    36cc:	89 81       	ldd	r24, Y+1	; 0x01
    36ce:	9a 81       	ldd	r25, Y+2	; 0x02
    36d0:	fc 01       	movw	r30, r24
    36d2:	86 89       	ldd	r24, Z+22	; 0x16
    36d4:	28 2f       	mov	r18, r24
    36d6:	30 e0       	ldi	r19, 0x00	; 0
    36d8:	c9 01       	movw	r24, r18
    36da:	88 0f       	add	r24, r24
    36dc:	99 1f       	adc	r25, r25
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	82 0f       	add	r24, r18
    36e8:	93 1f       	adc	r25, r19
    36ea:	88 57       	subi	r24, 0x78	; 120
    36ec:	9a 4f       	sbci	r25, 0xFA	; 250
    36ee:	ba 01       	movw	r22, r20
    36f0:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    36f4:	0a c0       	rjmp	.+20     	; 0x370a <vTaskPriorityInherit+0x120>
    36f6:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    36fa:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    36fe:	fc 01       	movw	r30, r24
    3700:	26 89       	ldd	r18, Z+22	; 0x16
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	fc 01       	movw	r30, r24
    3708:	26 8b       	std	Z+22, r18	; 0x16
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	0f 90       	pop	r0
    3712:	df 91       	pop	r29
    3714:	cf 91       	pop	r28
    3716:	08 95       	ret

00003718 <xTaskPriorityDisinherit>:
    3718:	cf 93       	push	r28
    371a:	df 93       	push	r29
    371c:	00 d0       	rcall	.+0      	; 0x371e <xTaskPriorityDisinherit+0x6>
    371e:	00 d0       	rcall	.+0      	; 0x3720 <xTaskPriorityDisinherit+0x8>
    3720:	1f 92       	push	r1
    3722:	cd b7       	in	r28, 0x3d	; 61
    3724:	de b7       	in	r29, 0x3e	; 62
    3726:	9d 83       	std	Y+5, r25	; 0x05
    3728:	8c 83       	std	Y+4, r24	; 0x04
    372a:	8c 81       	ldd	r24, Y+4	; 0x04
    372c:	9d 81       	ldd	r25, Y+5	; 0x05
    372e:	9b 83       	std	Y+3, r25	; 0x03
    3730:	8a 83       	std	Y+2, r24	; 0x02
    3732:	19 82       	std	Y+1, r1	; 0x01
    3734:	8c 81       	ldd	r24, Y+4	; 0x04
    3736:	9d 81       	ldd	r25, Y+5	; 0x05
    3738:	89 2b       	or	r24, r25
    373a:	09 f4       	brne	.+2      	; 0x373e <xTaskPriorityDisinherit+0x26>
    373c:	61 c0       	rjmp	.+194    	; 0x3800 <xTaskPriorityDisinherit+0xe8>
    373e:	8a 81       	ldd	r24, Y+2	; 0x02
    3740:	9b 81       	ldd	r25, Y+3	; 0x03
    3742:	fc 01       	movw	r30, r24
    3744:	84 a1       	ldd	r24, Z+36	; 0x24
    3746:	2f ef       	ldi	r18, 0xFF	; 255
    3748:	28 0f       	add	r18, r24
    374a:	8a 81       	ldd	r24, Y+2	; 0x02
    374c:	9b 81       	ldd	r25, Y+3	; 0x03
    374e:	fc 01       	movw	r30, r24
    3750:	24 a3       	std	Z+36, r18	; 0x24
    3752:	8a 81       	ldd	r24, Y+2	; 0x02
    3754:	9b 81       	ldd	r25, Y+3	; 0x03
    3756:	fc 01       	movw	r30, r24
    3758:	26 89       	ldd	r18, Z+22	; 0x16
    375a:	8a 81       	ldd	r24, Y+2	; 0x02
    375c:	9b 81       	ldd	r25, Y+3	; 0x03
    375e:	fc 01       	movw	r30, r24
    3760:	83 a1       	ldd	r24, Z+35	; 0x23
    3762:	28 17       	cp	r18, r24
    3764:	09 f4       	brne	.+2      	; 0x3768 <xTaskPriorityDisinherit+0x50>
    3766:	4c c0       	rjmp	.+152    	; 0x3800 <xTaskPriorityDisinherit+0xe8>
    3768:	8a 81       	ldd	r24, Y+2	; 0x02
    376a:	9b 81       	ldd	r25, Y+3	; 0x03
    376c:	fc 01       	movw	r30, r24
    376e:	84 a1       	ldd	r24, Z+36	; 0x24
    3770:	88 23       	and	r24, r24
    3772:	09 f0       	breq	.+2      	; 0x3776 <xTaskPriorityDisinherit+0x5e>
    3774:	45 c0       	rjmp	.+138    	; 0x3800 <xTaskPriorityDisinherit+0xe8>
    3776:	8a 81       	ldd	r24, Y+2	; 0x02
    3778:	9b 81       	ldd	r25, Y+3	; 0x03
    377a:	02 96       	adiw	r24, 0x02	; 2
    377c:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
    3780:	8a 81       	ldd	r24, Y+2	; 0x02
    3782:	9b 81       	ldd	r25, Y+3	; 0x03
    3784:	fc 01       	movw	r30, r24
    3786:	23 a1       	ldd	r18, Z+35	; 0x23
    3788:	8a 81       	ldd	r24, Y+2	; 0x02
    378a:	9b 81       	ldd	r25, Y+3	; 0x03
    378c:	fc 01       	movw	r30, r24
    378e:	26 8b       	std	Z+22, r18	; 0x16
    3790:	8a 81       	ldd	r24, Y+2	; 0x02
    3792:	9b 81       	ldd	r25, Y+3	; 0x03
    3794:	fc 01       	movw	r30, r24
    3796:	86 89       	ldd	r24, Z+22	; 0x16
    3798:	88 2f       	mov	r24, r24
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	24 e0       	ldi	r18, 0x04	; 4
    379e:	30 e0       	ldi	r19, 0x00	; 0
    37a0:	28 1b       	sub	r18, r24
    37a2:	39 0b       	sbc	r19, r25
    37a4:	8a 81       	ldd	r24, Y+2	; 0x02
    37a6:	9b 81       	ldd	r25, Y+3	; 0x03
    37a8:	fc 01       	movw	r30, r24
    37aa:	35 87       	std	Z+13, r19	; 0x0d
    37ac:	24 87       	std	Z+12, r18	; 0x0c
    37ae:	8a 81       	ldd	r24, Y+2	; 0x02
    37b0:	9b 81       	ldd	r25, Y+3	; 0x03
    37b2:	fc 01       	movw	r30, r24
    37b4:	96 89       	ldd	r25, Z+22	; 0x16
    37b6:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <uxTopReadyPriority>
    37ba:	89 17       	cp	r24, r25
    37bc:	30 f4       	brcc	.+12     	; 0x37ca <xTaskPriorityDisinherit+0xb2>
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	9b 81       	ldd	r25, Y+3	; 0x03
    37c2:	fc 01       	movw	r30, r24
    37c4:	86 89       	ldd	r24, Z+22	; 0x16
    37c6:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <uxTopReadyPriority>
    37ca:	8a 81       	ldd	r24, Y+2	; 0x02
    37cc:	9b 81       	ldd	r25, Y+3	; 0x03
    37ce:	ac 01       	movw	r20, r24
    37d0:	4e 5f       	subi	r20, 0xFE	; 254
    37d2:	5f 4f       	sbci	r21, 0xFF	; 255
    37d4:	8a 81       	ldd	r24, Y+2	; 0x02
    37d6:	9b 81       	ldd	r25, Y+3	; 0x03
    37d8:	fc 01       	movw	r30, r24
    37da:	86 89       	ldd	r24, Z+22	; 0x16
    37dc:	28 2f       	mov	r18, r24
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	c9 01       	movw	r24, r18
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	88 0f       	add	r24, r24
    37ec:	99 1f       	adc	r25, r25
    37ee:	82 0f       	add	r24, r18
    37f0:	93 1f       	adc	r25, r19
    37f2:	88 57       	subi	r24, 0x78	; 120
    37f4:	9a 4f       	sbci	r25, 0xFA	; 250
    37f6:	ba 01       	movw	r22, r20
    37f8:	0e 94 13 08 	call	0x1026	; 0x1026 <vListInsertEnd>
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	89 83       	std	Y+1, r24	; 0x01
    3800:	89 81       	ldd	r24, Y+1	; 0x01
    3802:	0f 90       	pop	r0
    3804:	0f 90       	pop	r0
    3806:	0f 90       	pop	r0
    3808:	0f 90       	pop	r0
    380a:	0f 90       	pop	r0
    380c:	df 91       	pop	r29
    380e:	cf 91       	pop	r28
    3810:	08 95       	ret

00003812 <pvTaskIncrementMutexHeldCount>:
    3812:	cf 93       	push	r28
    3814:	df 93       	push	r29
    3816:	cd b7       	in	r28, 0x3d	; 61
    3818:	de b7       	in	r29, 0x3e	; 62
    381a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    381e:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3822:	89 2b       	or	r24, r25
    3824:	49 f0       	breq	.+18     	; 0x3838 <pvTaskIncrementMutexHeldCount+0x26>
    3826:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    382a:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    382e:	fc 01       	movw	r30, r24
    3830:	24 a1       	ldd	r18, Z+36	; 0x24
    3832:	2f 5f       	subi	r18, 0xFF	; 255
    3834:	fc 01       	movw	r30, r24
    3836:	24 a3       	std	Z+36, r18	; 0x24
    3838:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    383c:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3840:	df 91       	pop	r29
    3842:	cf 91       	pop	r28
    3844:	08 95       	ret

00003846 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3846:	cf 93       	push	r28
    3848:	df 93       	push	r29
    384a:	cd b7       	in	r28, 0x3d	; 61
    384c:	de b7       	in	r29, 0x3e	; 62
    384e:	27 97       	sbiw	r28, 0x07	; 7
    3850:	0f b6       	in	r0, 0x3f	; 63
    3852:	f8 94       	cli
    3854:	de bf       	out	0x3e, r29	; 62
    3856:	0f be       	out	0x3f, r0	; 63
    3858:	cd bf       	out	0x3d, r28	; 61
    385a:	9e 83       	std	Y+6, r25	; 0x06
    385c:	8d 83       	std	Y+5, r24	; 0x05
    385e:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3860:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <xTickCount>
    3864:	90 91 d7 05 	lds	r25, 0x05D7	; 0x8005d7 <xTickCount+0x1>
    3868:	9a 83       	std	Y+2, r25	; 0x02
    386a:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    386c:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    3870:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3874:	02 96       	adiw	r24, 0x02	; 2
    3876:	0e 94 d8 08 	call	0x11b0	; 0x11b0 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    387a:	29 81       	ldd	r18, Y+1	; 0x01
    387c:	3a 81       	ldd	r19, Y+2	; 0x02
    387e:	8d 81       	ldd	r24, Y+5	; 0x05
    3880:	9e 81       	ldd	r25, Y+6	; 0x06
    3882:	82 0f       	add	r24, r18
    3884:	93 1f       	adc	r25, r19
    3886:	9c 83       	std	Y+4, r25	; 0x04
    3888:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    388a:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    388e:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    3892:	2b 81       	ldd	r18, Y+3	; 0x03
    3894:	3c 81       	ldd	r19, Y+4	; 0x04
    3896:	fc 01       	movw	r30, r24
    3898:	33 83       	std	Z+3, r19	; 0x03
    389a:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    389c:	2b 81       	ldd	r18, Y+3	; 0x03
    389e:	3c 81       	ldd	r19, Y+4	; 0x04
    38a0:	89 81       	ldd	r24, Y+1	; 0x01
    38a2:	9a 81       	ldd	r25, Y+2	; 0x02
    38a4:	28 17       	cp	r18, r24
    38a6:	39 07       	cpc	r19, r25
    38a8:	78 f4       	brcc	.+30     	; 0x38c8 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38aa:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    38ae:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    38b2:	9c 01       	movw	r18, r24
    38b4:	2e 5f       	subi	r18, 0xFE	; 254
    38b6:	3f 4f       	sbci	r19, 0xFF	; 255
    38b8:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <pxOverflowDelayedTaskList>
    38bc:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <pxOverflowDelayedTaskList+0x1>
    38c0:	b9 01       	movw	r22, r18
    38c2:	0e 94 61 08 	call	0x10c2	; 0x10c2 <vListInsert>
    38c6:	1d c0       	rjmp	.+58     	; 0x3902 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    38c8:	80 91 86 05 	lds	r24, 0x0586	; 0x800586 <pxCurrentTCB>
    38cc:	90 91 87 05 	lds	r25, 0x0587	; 0x800587 <pxCurrentTCB+0x1>
    38d0:	9c 01       	movw	r18, r24
    38d2:	2e 5f       	subi	r18, 0xFE	; 254
    38d4:	3f 4f       	sbci	r19, 0xFF	; 255
    38d6:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <pxDelayedTaskList>
    38da:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <pxDelayedTaskList+0x1>
    38de:	b9 01       	movw	r22, r18
    38e0:	0e 94 61 08 	call	0x10c2	; 0x10c2 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    38e4:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <xNextTaskUnblockTime>
    38e8:	90 91 df 05 	lds	r25, 0x05DF	; 0x8005df <xNextTaskUnblockTime+0x1>
    38ec:	2b 81       	ldd	r18, Y+3	; 0x03
    38ee:	3c 81       	ldd	r19, Y+4	; 0x04
    38f0:	28 17       	cp	r18, r24
    38f2:	39 07       	cpc	r19, r25
    38f4:	30 f4       	brcc	.+12     	; 0x3902 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    38f6:	8b 81       	ldd	r24, Y+3	; 0x03
    38f8:	9c 81       	ldd	r25, Y+4	; 0x04
    38fa:	90 93 df 05 	sts	0x05DF, r25	; 0x8005df <xNextTaskUnblockTime+0x1>
    38fe:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3902:	27 96       	adiw	r28, 0x07	; 7
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	de bf       	out	0x3e, r29	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	cd bf       	out	0x3d, r28	; 61
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	08 95       	ret

00003914 <__divmodhi4>:
    3914:	97 fb       	bst	r25, 7
    3916:	07 2e       	mov	r0, r23
    3918:	16 f4       	brtc	.+4      	; 0x391e <__divmodhi4+0xa>
    391a:	00 94       	com	r0
    391c:	07 d0       	rcall	.+14     	; 0x392c <__divmodhi4_neg1>
    391e:	77 fd       	sbrc	r23, 7
    3920:	09 d0       	rcall	.+18     	; 0x3934 <__divmodhi4_neg2>
    3922:	0e 94 c6 1c 	call	0x398c	; 0x398c <__udivmodhi4>
    3926:	07 fc       	sbrc	r0, 7
    3928:	05 d0       	rcall	.+10     	; 0x3934 <__divmodhi4_neg2>
    392a:	3e f4       	brtc	.+14     	; 0x393a <__divmodhi4_exit>

0000392c <__divmodhi4_neg1>:
    392c:	90 95       	com	r25
    392e:	81 95       	neg	r24
    3930:	9f 4f       	sbci	r25, 0xFF	; 255
    3932:	08 95       	ret

00003934 <__divmodhi4_neg2>:
    3934:	70 95       	com	r23
    3936:	61 95       	neg	r22
    3938:	7f 4f       	sbci	r23, 0xFF	; 255

0000393a <__divmodhi4_exit>:
    393a:	08 95       	ret

0000393c <__udivmodsi4>:
    393c:	a1 e2       	ldi	r26, 0x21	; 33
    393e:	1a 2e       	mov	r1, r26
    3940:	aa 1b       	sub	r26, r26
    3942:	bb 1b       	sub	r27, r27
    3944:	fd 01       	movw	r30, r26
    3946:	0d c0       	rjmp	.+26     	; 0x3962 <__udivmodsi4_ep>

00003948 <__udivmodsi4_loop>:
    3948:	aa 1f       	adc	r26, r26
    394a:	bb 1f       	adc	r27, r27
    394c:	ee 1f       	adc	r30, r30
    394e:	ff 1f       	adc	r31, r31
    3950:	a2 17       	cp	r26, r18
    3952:	b3 07       	cpc	r27, r19
    3954:	e4 07       	cpc	r30, r20
    3956:	f5 07       	cpc	r31, r21
    3958:	20 f0       	brcs	.+8      	; 0x3962 <__udivmodsi4_ep>
    395a:	a2 1b       	sub	r26, r18
    395c:	b3 0b       	sbc	r27, r19
    395e:	e4 0b       	sbc	r30, r20
    3960:	f5 0b       	sbc	r31, r21

00003962 <__udivmodsi4_ep>:
    3962:	66 1f       	adc	r22, r22
    3964:	77 1f       	adc	r23, r23
    3966:	88 1f       	adc	r24, r24
    3968:	99 1f       	adc	r25, r25
    396a:	1a 94       	dec	r1
    396c:	69 f7       	brne	.-38     	; 0x3948 <__udivmodsi4_loop>
    396e:	60 95       	com	r22
    3970:	70 95       	com	r23
    3972:	80 95       	com	r24
    3974:	90 95       	com	r25
    3976:	9b 01       	movw	r18, r22
    3978:	ac 01       	movw	r20, r24
    397a:	bd 01       	movw	r22, r26
    397c:	cf 01       	movw	r24, r30
    397e:	08 95       	ret

00003980 <__tablejump2__>:
    3980:	ee 0f       	add	r30, r30
    3982:	ff 1f       	adc	r31, r31
    3984:	05 90       	lpm	r0, Z+
    3986:	f4 91       	lpm	r31, Z
    3988:	e0 2d       	mov	r30, r0
    398a:	09 94       	ijmp

0000398c <__udivmodhi4>:
    398c:	aa 1b       	sub	r26, r26
    398e:	bb 1b       	sub	r27, r27
    3990:	51 e1       	ldi	r21, 0x11	; 17
    3992:	07 c0       	rjmp	.+14     	; 0x39a2 <__udivmodhi4_ep>

00003994 <__udivmodhi4_loop>:
    3994:	aa 1f       	adc	r26, r26
    3996:	bb 1f       	adc	r27, r27
    3998:	a6 17       	cp	r26, r22
    399a:	b7 07       	cpc	r27, r23
    399c:	10 f0       	brcs	.+4      	; 0x39a2 <__udivmodhi4_ep>
    399e:	a6 1b       	sub	r26, r22
    39a0:	b7 0b       	sbc	r27, r23

000039a2 <__udivmodhi4_ep>:
    39a2:	88 1f       	adc	r24, r24
    39a4:	99 1f       	adc	r25, r25
    39a6:	5a 95       	dec	r21
    39a8:	a9 f7       	brne	.-22     	; 0x3994 <__udivmodhi4_loop>
    39aa:	80 95       	com	r24
    39ac:	90 95       	com	r25
    39ae:	bc 01       	movw	r22, r24
    39b0:	cd 01       	movw	r24, r26
    39b2:	08 95       	ret

000039b4 <malloc>:
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	82 30       	cpi	r24, 0x02	; 2
    39ba:	91 05       	cpc	r25, r1
    39bc:	10 f4       	brcc	.+4      	; 0x39c2 <malloc+0xe>
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	90 e0       	ldi	r25, 0x00	; 0
    39c2:	e0 91 e5 05 	lds	r30, 0x05E5	; 0x8005e5 <__flp>
    39c6:	f0 91 e6 05 	lds	r31, 0x05E6	; 0x8005e6 <__flp+0x1>
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	30 e0       	ldi	r19, 0x00	; 0
    39ce:	c0 e0       	ldi	r28, 0x00	; 0
    39d0:	d0 e0       	ldi	r29, 0x00	; 0
    39d2:	30 97       	sbiw	r30, 0x00	; 0
    39d4:	11 f1       	breq	.+68     	; 0x3a1a <malloc+0x66>
    39d6:	40 81       	ld	r20, Z
    39d8:	51 81       	ldd	r21, Z+1	; 0x01
    39da:	48 17       	cp	r20, r24
    39dc:	59 07       	cpc	r21, r25
    39de:	c0 f0       	brcs	.+48     	; 0x3a10 <malloc+0x5c>
    39e0:	48 17       	cp	r20, r24
    39e2:	59 07       	cpc	r21, r25
    39e4:	61 f4       	brne	.+24     	; 0x39fe <malloc+0x4a>
    39e6:	82 81       	ldd	r24, Z+2	; 0x02
    39e8:	93 81       	ldd	r25, Z+3	; 0x03
    39ea:	20 97       	sbiw	r28, 0x00	; 0
    39ec:	19 f0       	breq	.+6      	; 0x39f4 <malloc+0x40>
    39ee:	9b 83       	std	Y+3, r25	; 0x03
    39f0:	8a 83       	std	Y+2, r24	; 0x02
    39f2:	2b c0       	rjmp	.+86     	; 0x3a4a <malloc+0x96>
    39f4:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <__flp+0x1>
    39f8:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__flp>
    39fc:	26 c0       	rjmp	.+76     	; 0x3a4a <malloc+0x96>
    39fe:	21 15       	cp	r18, r1
    3a00:	31 05       	cpc	r19, r1
    3a02:	19 f0       	breq	.+6      	; 0x3a0a <malloc+0x56>
    3a04:	42 17       	cp	r20, r18
    3a06:	53 07       	cpc	r21, r19
    3a08:	18 f4       	brcc	.+6      	; 0x3a10 <malloc+0x5c>
    3a0a:	9a 01       	movw	r18, r20
    3a0c:	be 01       	movw	r22, r28
    3a0e:	df 01       	movw	r26, r30
    3a10:	ef 01       	movw	r28, r30
    3a12:	02 80       	ldd	r0, Z+2	; 0x02
    3a14:	f3 81       	ldd	r31, Z+3	; 0x03
    3a16:	e0 2d       	mov	r30, r0
    3a18:	dc cf       	rjmp	.-72     	; 0x39d2 <malloc+0x1e>
    3a1a:	21 15       	cp	r18, r1
    3a1c:	31 05       	cpc	r19, r1
    3a1e:	09 f1       	breq	.+66     	; 0x3a62 <malloc+0xae>
    3a20:	28 1b       	sub	r18, r24
    3a22:	39 0b       	sbc	r19, r25
    3a24:	24 30       	cpi	r18, 0x04	; 4
    3a26:	31 05       	cpc	r19, r1
    3a28:	90 f4       	brcc	.+36     	; 0x3a4e <malloc+0x9a>
    3a2a:	12 96       	adiw	r26, 0x02	; 2
    3a2c:	8d 91       	ld	r24, X+
    3a2e:	9c 91       	ld	r25, X
    3a30:	13 97       	sbiw	r26, 0x03	; 3
    3a32:	61 15       	cp	r22, r1
    3a34:	71 05       	cpc	r23, r1
    3a36:	21 f0       	breq	.+8      	; 0x3a40 <malloc+0x8c>
    3a38:	fb 01       	movw	r30, r22
    3a3a:	93 83       	std	Z+3, r25	; 0x03
    3a3c:	82 83       	std	Z+2, r24	; 0x02
    3a3e:	04 c0       	rjmp	.+8      	; 0x3a48 <malloc+0x94>
    3a40:	90 93 e6 05 	sts	0x05E6, r25	; 0x8005e6 <__flp+0x1>
    3a44:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <__flp>
    3a48:	fd 01       	movw	r30, r26
    3a4a:	32 96       	adiw	r30, 0x02	; 2
    3a4c:	44 c0       	rjmp	.+136    	; 0x3ad6 <malloc+0x122>
    3a4e:	fd 01       	movw	r30, r26
    3a50:	e2 0f       	add	r30, r18
    3a52:	f3 1f       	adc	r31, r19
    3a54:	81 93       	st	Z+, r24
    3a56:	91 93       	st	Z+, r25
    3a58:	22 50       	subi	r18, 0x02	; 2
    3a5a:	31 09       	sbc	r19, r1
    3a5c:	2d 93       	st	X+, r18
    3a5e:	3c 93       	st	X, r19
    3a60:	3a c0       	rjmp	.+116    	; 0x3ad6 <malloc+0x122>
    3a62:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <__brkval>
    3a66:	30 91 e4 05 	lds	r19, 0x05E4	; 0x8005e4 <__brkval+0x1>
    3a6a:	23 2b       	or	r18, r19
    3a6c:	41 f4       	brne	.+16     	; 0x3a7e <malloc+0xca>
    3a6e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3a72:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3a76:	30 93 e4 05 	sts	0x05E4, r19	; 0x8005e4 <__brkval+0x1>
    3a7a:	20 93 e3 05 	sts	0x05E3, r18	; 0x8005e3 <__brkval>
    3a7e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3a82:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3a86:	21 15       	cp	r18, r1
    3a88:	31 05       	cpc	r19, r1
    3a8a:	41 f4       	brne	.+16     	; 0x3a9c <malloc+0xe8>
    3a8c:	2d b7       	in	r18, 0x3d	; 61
    3a8e:	3e b7       	in	r19, 0x3e	; 62
    3a90:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3a94:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3a98:	24 1b       	sub	r18, r20
    3a9a:	35 0b       	sbc	r19, r21
    3a9c:	e0 91 e3 05 	lds	r30, 0x05E3	; 0x8005e3 <__brkval>
    3aa0:	f0 91 e4 05 	lds	r31, 0x05E4	; 0x8005e4 <__brkval+0x1>
    3aa4:	e2 17       	cp	r30, r18
    3aa6:	f3 07       	cpc	r31, r19
    3aa8:	a0 f4       	brcc	.+40     	; 0x3ad2 <malloc+0x11e>
    3aaa:	2e 1b       	sub	r18, r30
    3aac:	3f 0b       	sbc	r19, r31
    3aae:	28 17       	cp	r18, r24
    3ab0:	39 07       	cpc	r19, r25
    3ab2:	78 f0       	brcs	.+30     	; 0x3ad2 <malloc+0x11e>
    3ab4:	ac 01       	movw	r20, r24
    3ab6:	4e 5f       	subi	r20, 0xFE	; 254
    3ab8:	5f 4f       	sbci	r21, 0xFF	; 255
    3aba:	24 17       	cp	r18, r20
    3abc:	35 07       	cpc	r19, r21
    3abe:	48 f0       	brcs	.+18     	; 0x3ad2 <malloc+0x11e>
    3ac0:	4e 0f       	add	r20, r30
    3ac2:	5f 1f       	adc	r21, r31
    3ac4:	50 93 e4 05 	sts	0x05E4, r21	; 0x8005e4 <__brkval+0x1>
    3ac8:	40 93 e3 05 	sts	0x05E3, r20	; 0x8005e3 <__brkval>
    3acc:	81 93       	st	Z+, r24
    3ace:	91 93       	st	Z+, r25
    3ad0:	02 c0       	rjmp	.+4      	; 0x3ad6 <malloc+0x122>
    3ad2:	e0 e0       	ldi	r30, 0x00	; 0
    3ad4:	f0 e0       	ldi	r31, 0x00	; 0
    3ad6:	cf 01       	movw	r24, r30
    3ad8:	df 91       	pop	r29
    3ada:	cf 91       	pop	r28
    3adc:	08 95       	ret

00003ade <free>:
    3ade:	0f 93       	push	r16
    3ae0:	1f 93       	push	r17
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	00 97       	sbiw	r24, 0x00	; 0
    3ae8:	09 f4       	brne	.+2      	; 0x3aec <free+0xe>
    3aea:	8c c0       	rjmp	.+280    	; 0x3c04 <free+0x126>
    3aec:	fc 01       	movw	r30, r24
    3aee:	32 97       	sbiw	r30, 0x02	; 2
    3af0:	13 82       	std	Z+3, r1	; 0x03
    3af2:	12 82       	std	Z+2, r1	; 0x02
    3af4:	00 91 e5 05 	lds	r16, 0x05E5	; 0x8005e5 <__flp>
    3af8:	10 91 e6 05 	lds	r17, 0x05E6	; 0x8005e6 <__flp+0x1>
    3afc:	01 15       	cp	r16, r1
    3afe:	11 05       	cpc	r17, r1
    3b00:	81 f4       	brne	.+32     	; 0x3b22 <free+0x44>
    3b02:	20 81       	ld	r18, Z
    3b04:	31 81       	ldd	r19, Z+1	; 0x01
    3b06:	82 0f       	add	r24, r18
    3b08:	93 1f       	adc	r25, r19
    3b0a:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <__brkval>
    3b0e:	30 91 e4 05 	lds	r19, 0x05E4	; 0x8005e4 <__brkval+0x1>
    3b12:	28 17       	cp	r18, r24
    3b14:	39 07       	cpc	r19, r25
    3b16:	79 f5       	brne	.+94     	; 0x3b76 <free+0x98>
    3b18:	f0 93 e4 05 	sts	0x05E4, r31	; 0x8005e4 <__brkval+0x1>
    3b1c:	e0 93 e3 05 	sts	0x05E3, r30	; 0x8005e3 <__brkval>
    3b20:	71 c0       	rjmp	.+226    	; 0x3c04 <free+0x126>
    3b22:	d8 01       	movw	r26, r16
    3b24:	40 e0       	ldi	r20, 0x00	; 0
    3b26:	50 e0       	ldi	r21, 0x00	; 0
    3b28:	ae 17       	cp	r26, r30
    3b2a:	bf 07       	cpc	r27, r31
    3b2c:	50 f4       	brcc	.+20     	; 0x3b42 <free+0x64>
    3b2e:	12 96       	adiw	r26, 0x02	; 2
    3b30:	2d 91       	ld	r18, X+
    3b32:	3c 91       	ld	r19, X
    3b34:	13 97       	sbiw	r26, 0x03	; 3
    3b36:	ad 01       	movw	r20, r26
    3b38:	21 15       	cp	r18, r1
    3b3a:	31 05       	cpc	r19, r1
    3b3c:	09 f1       	breq	.+66     	; 0x3b80 <free+0xa2>
    3b3e:	d9 01       	movw	r26, r18
    3b40:	f3 cf       	rjmp	.-26     	; 0x3b28 <free+0x4a>
    3b42:	9d 01       	movw	r18, r26
    3b44:	da 01       	movw	r26, r20
    3b46:	33 83       	std	Z+3, r19	; 0x03
    3b48:	22 83       	std	Z+2, r18	; 0x02
    3b4a:	60 81       	ld	r22, Z
    3b4c:	71 81       	ldd	r23, Z+1	; 0x01
    3b4e:	86 0f       	add	r24, r22
    3b50:	97 1f       	adc	r25, r23
    3b52:	82 17       	cp	r24, r18
    3b54:	93 07       	cpc	r25, r19
    3b56:	69 f4       	brne	.+26     	; 0x3b72 <free+0x94>
    3b58:	ec 01       	movw	r28, r24
    3b5a:	28 81       	ld	r18, Y
    3b5c:	39 81       	ldd	r19, Y+1	; 0x01
    3b5e:	26 0f       	add	r18, r22
    3b60:	37 1f       	adc	r19, r23
    3b62:	2e 5f       	subi	r18, 0xFE	; 254
    3b64:	3f 4f       	sbci	r19, 0xFF	; 255
    3b66:	31 83       	std	Z+1, r19	; 0x01
    3b68:	20 83       	st	Z, r18
    3b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    3b6c:	9b 81       	ldd	r25, Y+3	; 0x03
    3b6e:	93 83       	std	Z+3, r25	; 0x03
    3b70:	82 83       	std	Z+2, r24	; 0x02
    3b72:	45 2b       	or	r20, r21
    3b74:	29 f4       	brne	.+10     	; 0x3b80 <free+0xa2>
    3b76:	f0 93 e6 05 	sts	0x05E6, r31	; 0x8005e6 <__flp+0x1>
    3b7a:	e0 93 e5 05 	sts	0x05E5, r30	; 0x8005e5 <__flp>
    3b7e:	42 c0       	rjmp	.+132    	; 0x3c04 <free+0x126>
    3b80:	13 96       	adiw	r26, 0x03	; 3
    3b82:	fc 93       	st	X, r31
    3b84:	ee 93       	st	-X, r30
    3b86:	12 97       	sbiw	r26, 0x02	; 2
    3b88:	ed 01       	movw	r28, r26
    3b8a:	49 91       	ld	r20, Y+
    3b8c:	59 91       	ld	r21, Y+
    3b8e:	9e 01       	movw	r18, r28
    3b90:	24 0f       	add	r18, r20
    3b92:	35 1f       	adc	r19, r21
    3b94:	e2 17       	cp	r30, r18
    3b96:	f3 07       	cpc	r31, r19
    3b98:	71 f4       	brne	.+28     	; 0x3bb6 <free+0xd8>
    3b9a:	80 81       	ld	r24, Z
    3b9c:	91 81       	ldd	r25, Z+1	; 0x01
    3b9e:	84 0f       	add	r24, r20
    3ba0:	95 1f       	adc	r25, r21
    3ba2:	02 96       	adiw	r24, 0x02	; 2
    3ba4:	11 96       	adiw	r26, 0x01	; 1
    3ba6:	9c 93       	st	X, r25
    3ba8:	8e 93       	st	-X, r24
    3baa:	82 81       	ldd	r24, Z+2	; 0x02
    3bac:	93 81       	ldd	r25, Z+3	; 0x03
    3bae:	13 96       	adiw	r26, 0x03	; 3
    3bb0:	9c 93       	st	X, r25
    3bb2:	8e 93       	st	-X, r24
    3bb4:	12 97       	sbiw	r26, 0x02	; 2
    3bb6:	e0 e0       	ldi	r30, 0x00	; 0
    3bb8:	f0 e0       	ldi	r31, 0x00	; 0
    3bba:	d8 01       	movw	r26, r16
    3bbc:	12 96       	adiw	r26, 0x02	; 2
    3bbe:	8d 91       	ld	r24, X+
    3bc0:	9c 91       	ld	r25, X
    3bc2:	13 97       	sbiw	r26, 0x03	; 3
    3bc4:	00 97       	sbiw	r24, 0x00	; 0
    3bc6:	19 f0       	breq	.+6      	; 0x3bce <free+0xf0>
    3bc8:	f8 01       	movw	r30, r16
    3bca:	8c 01       	movw	r16, r24
    3bcc:	f6 cf       	rjmp	.-20     	; 0x3bba <free+0xdc>
    3bce:	8d 91       	ld	r24, X+
    3bd0:	9c 91       	ld	r25, X
    3bd2:	98 01       	movw	r18, r16
    3bd4:	2e 5f       	subi	r18, 0xFE	; 254
    3bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    3bd8:	82 0f       	add	r24, r18
    3bda:	93 1f       	adc	r25, r19
    3bdc:	20 91 e3 05 	lds	r18, 0x05E3	; 0x8005e3 <__brkval>
    3be0:	30 91 e4 05 	lds	r19, 0x05E4	; 0x8005e4 <__brkval+0x1>
    3be4:	28 17       	cp	r18, r24
    3be6:	39 07       	cpc	r19, r25
    3be8:	69 f4       	brne	.+26     	; 0x3c04 <free+0x126>
    3bea:	30 97       	sbiw	r30, 0x00	; 0
    3bec:	29 f4       	brne	.+10     	; 0x3bf8 <free+0x11a>
    3bee:	10 92 e6 05 	sts	0x05E6, r1	; 0x8005e6 <__flp+0x1>
    3bf2:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <__flp>
    3bf6:	02 c0       	rjmp	.+4      	; 0x3bfc <free+0x11e>
    3bf8:	13 82       	std	Z+3, r1	; 0x03
    3bfa:	12 82       	std	Z+2, r1	; 0x02
    3bfc:	10 93 e4 05 	sts	0x05E4, r17	; 0x8005e4 <__brkval+0x1>
    3c00:	00 93 e3 05 	sts	0x05E3, r16	; 0x8005e3 <__brkval>
    3c04:	df 91       	pop	r29
    3c06:	cf 91       	pop	r28
    3c08:	1f 91       	pop	r17
    3c0a:	0f 91       	pop	r16
    3c0c:	08 95       	ret

00003c0e <do_rand>:
    3c0e:	8f 92       	push	r8
    3c10:	9f 92       	push	r9
    3c12:	af 92       	push	r10
    3c14:	bf 92       	push	r11
    3c16:	cf 92       	push	r12
    3c18:	df 92       	push	r13
    3c1a:	ef 92       	push	r14
    3c1c:	ff 92       	push	r15
    3c1e:	cf 93       	push	r28
    3c20:	df 93       	push	r29
    3c22:	ec 01       	movw	r28, r24
    3c24:	68 81       	ld	r22, Y
    3c26:	79 81       	ldd	r23, Y+1	; 0x01
    3c28:	8a 81       	ldd	r24, Y+2	; 0x02
    3c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c2c:	61 15       	cp	r22, r1
    3c2e:	71 05       	cpc	r23, r1
    3c30:	81 05       	cpc	r24, r1
    3c32:	91 05       	cpc	r25, r1
    3c34:	21 f4       	brne	.+8      	; 0x3c3e <do_rand+0x30>
    3c36:	64 e2       	ldi	r22, 0x24	; 36
    3c38:	79 ed       	ldi	r23, 0xD9	; 217
    3c3a:	8b e5       	ldi	r24, 0x5B	; 91
    3c3c:	97 e0       	ldi	r25, 0x07	; 7
    3c3e:	2d e1       	ldi	r18, 0x1D	; 29
    3c40:	33 ef       	ldi	r19, 0xF3	; 243
    3c42:	41 e0       	ldi	r20, 0x01	; 1
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <__divmodsi4>
    3c4a:	49 01       	movw	r8, r18
    3c4c:	5a 01       	movw	r10, r20
    3c4e:	9b 01       	movw	r18, r22
    3c50:	ac 01       	movw	r20, r24
    3c52:	a7 ea       	ldi	r26, 0xA7	; 167
    3c54:	b1 e4       	ldi	r27, 0x41	; 65
    3c56:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__muluhisi3>
    3c5a:	6b 01       	movw	r12, r22
    3c5c:	7c 01       	movw	r14, r24
    3c5e:	ac ee       	ldi	r26, 0xEC	; 236
    3c60:	b4 ef       	ldi	r27, 0xF4	; 244
    3c62:	a5 01       	movw	r20, r10
    3c64:	94 01       	movw	r18, r8
    3c66:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <__mulohisi3>
    3c6a:	dc 01       	movw	r26, r24
    3c6c:	cb 01       	movw	r24, r22
    3c6e:	8c 0d       	add	r24, r12
    3c70:	9d 1d       	adc	r25, r13
    3c72:	ae 1d       	adc	r26, r14
    3c74:	bf 1d       	adc	r27, r15
    3c76:	b7 ff       	sbrs	r27, 7
    3c78:	03 c0       	rjmp	.+6      	; 0x3c80 <do_rand+0x72>
    3c7a:	01 97       	sbiw	r24, 0x01	; 1
    3c7c:	a1 09       	sbc	r26, r1
    3c7e:	b0 48       	sbci	r27, 0x80	; 128
    3c80:	88 83       	st	Y, r24
    3c82:	99 83       	std	Y+1, r25	; 0x01
    3c84:	aa 83       	std	Y+2, r26	; 0x02
    3c86:	bb 83       	std	Y+3, r27	; 0x03
    3c88:	9f 77       	andi	r25, 0x7F	; 127
    3c8a:	df 91       	pop	r29
    3c8c:	cf 91       	pop	r28
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	df 90       	pop	r13
    3c94:	cf 90       	pop	r12
    3c96:	bf 90       	pop	r11
    3c98:	af 90       	pop	r10
    3c9a:	9f 90       	pop	r9
    3c9c:	8f 90       	pop	r8
    3c9e:	08 95       	ret

00003ca0 <rand_r>:
    3ca0:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <do_rand>
    3ca4:	08 95       	ret

00003ca6 <rand>:
    3ca6:	86 e0       	ldi	r24, 0x06	; 6
    3ca8:	91 e0       	ldi	r25, 0x01	; 1
    3caa:	0e 94 07 1e 	call	0x3c0e	; 0x3c0e <do_rand>
    3cae:	08 95       	ret

00003cb0 <srand>:
    3cb0:	a0 e0       	ldi	r26, 0x00	; 0
    3cb2:	b0 e0       	ldi	r27, 0x00	; 0
    3cb4:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3cb8:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3cbc:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3cc0:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3cc4:	08 95       	ret

00003cc6 <memcpy>:
    3cc6:	fb 01       	movw	r30, r22
    3cc8:	dc 01       	movw	r26, r24
    3cca:	02 c0       	rjmp	.+4      	; 0x3cd0 <memcpy+0xa>
    3ccc:	01 90       	ld	r0, Z+
    3cce:	0d 92       	st	X+, r0
    3cd0:	41 50       	subi	r20, 0x01	; 1
    3cd2:	50 40       	sbci	r21, 0x00	; 0
    3cd4:	d8 f7       	brcc	.-10     	; 0x3ccc <memcpy+0x6>
    3cd6:	08 95       	ret

00003cd8 <memset>:
    3cd8:	dc 01       	movw	r26, r24
    3cda:	01 c0       	rjmp	.+2      	; 0x3cde <memset+0x6>
    3cdc:	6d 93       	st	X+, r22
    3cde:	41 50       	subi	r20, 0x01	; 1
    3ce0:	50 40       	sbci	r21, 0x00	; 0
    3ce2:	e0 f7       	brcc	.-8      	; 0x3cdc <memset+0x4>
    3ce4:	08 95       	ret

00003ce6 <__divmodsi4>:
    3ce6:	05 2e       	mov	r0, r21
    3ce8:	97 fb       	bst	r25, 7
    3cea:	1e f4       	brtc	.+6      	; 0x3cf2 <__divmodsi4+0xc>
    3cec:	00 94       	com	r0
    3cee:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <__negsi2>
    3cf2:	57 fd       	sbrc	r21, 7
    3cf4:	07 d0       	rcall	.+14     	; 0x3d04 <__divmodsi4_neg2>
    3cf6:	0e 94 9e 1c 	call	0x393c	; 0x393c <__udivmodsi4>
    3cfa:	07 fc       	sbrc	r0, 7
    3cfc:	03 d0       	rcall	.+6      	; 0x3d04 <__divmodsi4_neg2>
    3cfe:	4e f4       	brtc	.+18     	; 0x3d12 <__divmodsi4_exit>
    3d00:	0c 94 8a 1e 	jmp	0x3d14	; 0x3d14 <__negsi2>

00003d04 <__divmodsi4_neg2>:
    3d04:	50 95       	com	r21
    3d06:	40 95       	com	r20
    3d08:	30 95       	com	r19
    3d0a:	21 95       	neg	r18
    3d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    3d0e:	4f 4f       	sbci	r20, 0xFF	; 255
    3d10:	5f 4f       	sbci	r21, 0xFF	; 255

00003d12 <__divmodsi4_exit>:
    3d12:	08 95       	ret

00003d14 <__negsi2>:
    3d14:	90 95       	com	r25
    3d16:	80 95       	com	r24
    3d18:	70 95       	com	r23
    3d1a:	61 95       	neg	r22
    3d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d1e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d20:	9f 4f       	sbci	r25, 0xFF	; 255
    3d22:	08 95       	ret

00003d24 <__muluhisi3>:
    3d24:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <__umulhisi3>
    3d28:	a5 9f       	mul	r26, r21
    3d2a:	90 0d       	add	r25, r0
    3d2c:	b4 9f       	mul	r27, r20
    3d2e:	90 0d       	add	r25, r0
    3d30:	a4 9f       	mul	r26, r20
    3d32:	80 0d       	add	r24, r0
    3d34:	91 1d       	adc	r25, r1
    3d36:	11 24       	eor	r1, r1
    3d38:	08 95       	ret

00003d3a <__mulshisi3>:
    3d3a:	b7 ff       	sbrs	r27, 7
    3d3c:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <__muluhisi3>

00003d40 <__mulohisi3>:
    3d40:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <__muluhisi3>
    3d44:	82 1b       	sub	r24, r18
    3d46:	93 0b       	sbc	r25, r19
    3d48:	08 95       	ret

00003d4a <__umulhisi3>:
    3d4a:	a2 9f       	mul	r26, r18
    3d4c:	b0 01       	movw	r22, r0
    3d4e:	b3 9f       	mul	r27, r19
    3d50:	c0 01       	movw	r24, r0
    3d52:	a3 9f       	mul	r26, r19
    3d54:	70 0d       	add	r23, r0
    3d56:	81 1d       	adc	r24, r1
    3d58:	11 24       	eor	r1, r1
    3d5a:	91 1d       	adc	r25, r1
    3d5c:	b2 9f       	mul	r27, r18
    3d5e:	70 0d       	add	r23, r0
    3d60:	81 1d       	adc	r24, r1
    3d62:	11 24       	eor	r1, r1
    3d64:	91 1d       	adc	r25, r1
    3d66:	08 95       	ret

00003d68 <_exit>:
    3d68:	f8 94       	cli

00003d6a <__stop_program>:
    3d6a:	ff cf       	rjmp	.-2      	; 0x3d6a <__stop_program>
