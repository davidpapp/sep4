
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004c  00800100  00003902  00003996  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003902  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  0080014c  0080014c  000039e2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000039e2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003a14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004d8  00000000  00000000  00003a54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000376d  00000000  00000000  00003f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b38  00000000  00000000  00007699  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000346d  00000000  00000000  000081d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000130c  00000000  00000000  0000b640  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000018d1  00000000  00000000  0000c94c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028b6  00000000  00000000  0000e21d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000448  00000000  00000000  00010ad3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 d4 0a 	jmp	0x15a8	; 0x15a8 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 f9 0b 	jmp	0x17f2	; 0x17f2 <__vector_20>
      54:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 ab 0c 	jmp	0x1956	; 0x1956 <__vector_28>
      74:	0c 94 03 0d 	jmp	0x1a06	; 0x1a06 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	ee 02       	muls	r30, r30
      7e:	f7 02       	muls	r31, r23
      80:	0a 03       	fmul	r16, r18
      82:	15 03       	mulsu	r17, r21
      84:	28 03       	fmul	r18, r16
      86:	31 03       	mulsu	r19, r17
      88:	44 03       	mulsu	r20, r20
      8a:	4f 03       	fmul	r20, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 e0       	ldi	r30, 0x02	; 2
      a0:	f9 e3       	ldi	r31, 0x39	; 57
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	ac 34       	cpi	r26, 0x4C	; 76
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	ac e4       	ldi	r26, 0x4C	; 76
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	a1 3d       	cpi	r26, 0xD1	; 209
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <main>
      c2:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <move_player>:
		}	
	}
	
}

void move_player(uint8_t *position, uint8_t direction){
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	00 d0       	rcall	.+0      	; 0xd0 <move_player+0x6>
      d0:	00 d0       	rcall	.+0      	; 0xd2 <move_player+0x8>
      d2:	1f 92       	push	r1
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	9c 83       	std	Y+4, r25	; 0x04
      da:	8b 83       	std	Y+3, r24	; 0x03
      dc:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
      de:	85 e0       	ldi	r24, 0x05	; 5
      e0:	90 e0       	ldi	r25, 0x00	; 0
      e2:	9a 83       	std	Y+2, r25	; 0x02
      e4:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
      e6:	8d 81       	ldd	r24, Y+5	; 0x05
      e8:	88 23       	and	r24, r24
      ea:	81 f4       	brne	.+32     	; 0x10c <move_player+0x42>
		mask <<= *position;
      ec:	8b 81       	ldd	r24, Y+3	; 0x03
      ee:	9c 81       	ldd	r25, Y+4	; 0x04
      f0:	fc 01       	movw	r30, r24
      f2:	80 81       	ld	r24, Z
      f4:	28 2f       	mov	r18, r24
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	9a 81       	ldd	r25, Y+2	; 0x02
      fc:	02 c0       	rjmp	.+4      	; 0x102 <move_player+0x38>
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	2a 95       	dec	r18
     104:	e2 f7       	brpl	.-8      	; 0xfe <move_player+0x34>
     106:	9a 83       	std	Y+2, r25	; 0x02
     108:	89 83       	std	Y+1, r24	; 0x01
     10a:	12 c0       	rjmp	.+36     	; 0x130 <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     10c:	8b 81       	ldd	r24, Y+3	; 0x03
     10e:	9c 81       	ldd	r25, Y+4	; 0x04
     110:	fc 01       	movw	r30, r24
     112:	80 81       	ld	r24, Z
     114:	88 2f       	mov	r24, r24
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	9c 01       	movw	r18, r24
     11a:	21 50       	subi	r18, 0x01	; 1
     11c:	31 09       	sbc	r19, r1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	9a 81       	ldd	r25, Y+2	; 0x02
     122:	02 c0       	rjmp	.+4      	; 0x128 <move_player+0x5e>
     124:	88 0f       	add	r24, r24
     126:	99 1f       	adc	r25, r25
     128:	2a 95       	dec	r18
     12a:	e2 f7       	brpl	.-8      	; 0x124 <move_player+0x5a>
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     130:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     134:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     138:	20 e0       	ldi	r18, 0x00	; 0
     13a:	4a e0       	ldi	r20, 0x0A	; 10
     13c:	50 e0       	ldi	r21, 0x00	; 0
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericReceive>
	col_value[0] ^= mask;
     146:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     14a:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     14e:	89 81       	ldd	r24, Y+1	; 0x01
     150:	9a 81       	ldd	r25, Y+2	; 0x02
     152:	82 27       	eor	r24, r18
     154:	93 27       	eor	r25, r19
     156:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     15a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     15e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     162:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	40 e0       	ldi	r20, 0x00	; 0
     16a:	50 e0       	ldi	r21, 0x00	; 0
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
}
     174:	0f 90       	pop	r0
     176:	0f 90       	pop	r0
     178:	0f 90       	pop	r0
     17a:	0f 90       	pop	r0
     17c:	0f 90       	pop	r0
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	08 95       	ret

00000184 <game_task>:

void game_task(void *pvParameters)
{
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	00 d0       	rcall	.+0      	; 0x18a <game_task+0x6>
     18a:	cd b7       	in	r28, 0x3d	; 61
     18c:	de b7       	in	r29, 0x3e	; 62
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
	(void) pvParameters;

	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     192:	86 e2       	ldi	r24, 0x26	; 38
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	fc 01       	movw	r30, r24
     198:	80 81       	ld	r24, Z
     19a:	88 2f       	mov	r24, r24
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	80 74       	andi	r24, 0x40	; 64
     1a0:	99 27       	eor	r25, r25
     1a2:	89 2b       	or	r24, r25
     1a4:	61 f5       	brne	.+88     	; 0x1fe <game_task+0x7a>
     1a6:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1aa:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1ae:	18 16       	cp	r1, r24
     1b0:	19 06       	cpc	r1, r25
     1b2:	2c f5       	brge	.+74     	; 0x1fe <game_task+0x7a>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     1b4:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1b8:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1bc:	20 e0       	ldi	r18, 0x00	; 0
     1be:	4a e0       	ldi	r20, 0x0A	; 10
     1c0:	50 e0       	ldi	r21, 0x00	; 0
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	70 e0       	ldi	r23, 0x00	; 0
     1c6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericReceive>
			--player_position;
     1ca:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     1ce:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     1d2:	01 97       	sbiw	r24, 0x01	; 1
     1d4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     1d8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     1dc:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     1e0:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	40 e0       	ldi	r20, 0x00	; 0
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
			move_player(&player_position, 0);
     1f2:	60 e0       	ldi	r22, 0x00	; 0
     1f4:	8a e0       	ldi	r24, 0x0A	; 10
     1f6:	91 e0       	ldi	r25, 0x01	; 1
     1f8:	0e 94 65 00 	call	0xca	; 0xca <move_player>
     1fc:	34 c0       	rjmp	.+104    	; 0x266 <game_task+0xe2>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     1fe:	86 e2       	ldi	r24, 0x26	; 38
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	fc 01       	movw	r30, r24
     204:	80 81       	ld	r24, Z
     206:	88 2f       	mov	r24, r24
     208:	90 e0       	ldi	r25, 0x00	; 0
     20a:	81 70       	andi	r24, 0x01	; 1
     20c:	99 27       	eor	r25, r25
     20e:	89 2b       	or	r24, r25
     210:	51 f5       	brne	.+84     	; 0x266 <game_task+0xe2>
     212:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     216:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     21a:	08 97       	sbiw	r24, 0x08	; 8
     21c:	24 f5       	brge	.+72     	; 0x266 <game_task+0xe2>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     21e:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     222:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     226:	20 e0       	ldi	r18, 0x00	; 0
     228:	4a e0       	ldi	r20, 0x0A	; 10
     22a:	50 e0       	ldi	r21, 0x00	; 0
     22c:	60 e0       	ldi	r22, 0x00	; 0
     22e:	70 e0       	ldi	r23, 0x00	; 0
     230:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericReceive>
			++player_position;
     234:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     238:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     23c:	01 96       	adiw	r24, 0x01	; 1
     23e:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     242:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     246:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <_player_position_mutex>
     24a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <_player_position_mutex+0x1>
     24e:	20 e0       	ldi	r18, 0x00	; 0
     250:	40 e0       	ldi	r20, 0x00	; 0
     252:	50 e0       	ldi	r21, 0x00	; 0
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	70 e0       	ldi	r23, 0x00	; 0
     258:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
			move_player(&player_position, 1);
     25c:	61 e0       	ldi	r22, 0x01	; 1
     25e:	8a e0       	ldi	r24, 0x0A	; 10
     260:	91 e0       	ldi	r25, 0x01	; 1
     262:	0e 94 65 00 	call	0xca	; 0xca <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelay(50);
     266:	82 e3       	ldi	r24, 0x32	; 50
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	0e 94 66 14 	call	0x28cc	; 0x28cc <vTaskDelay>
	}	
     26e:	91 cf       	rjmp	.-222    	; 0x192 <game_task+0xe>

00000270 <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     270:	cf 93       	push	r28
     272:	df 93       	push	r29
     274:	00 d0       	rcall	.+0      	; 0x276 <bounce+0x6>
     276:	00 d0       	rcall	.+0      	; 0x278 <bounce+0x8>
     278:	00 d0       	rcall	.+0      	; 0x27a <bounce+0xa>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9b 83       	std	Y+3, r25	; 0x03
     280:	8a 83       	std	Y+2, r24	; 0x02
     282:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     284:	8a 81       	ldd	r24, Y+2	; 0x02
     286:	9b 81       	ldd	r25, Y+3	; 0x03
     288:	fc 01       	movw	r30, r24
     28a:	80 81       	ld	r24, Z
     28c:	81 70       	andi	r24, 0x01	; 1
     28e:	88 23       	and	r24, r24
     290:	d9 f4       	brne	.+54     	; 0x2c8 <bounce+0x58>
		uint8_t r = rand()%3;
     292:	0e 94 1e 1c 	call	0x383c	; 0x383c <rand>
     296:	23 e0       	ldi	r18, 0x03	; 3
     298:	30 e0       	ldi	r19, 0x00	; 0
     29a:	b9 01       	movw	r22, r18
     29c:	0e 94 55 1a 	call	0x34aa	; 0x34aa <__divmodhi4>
     2a0:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     2a2:	89 81       	ldd	r24, Y+1	; 0x01
     2a4:	8d 5f       	subi	r24, 0xFD	; 253
     2a6:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     2a8:	8a 81       	ldd	r24, Y+2	; 0x02
     2aa:	9b 81       	ldd	r25, Y+3	; 0x03
     2ac:	fc 01       	movw	r30, r24
     2ae:	80 81       	ld	r24, Z
     2b0:	99 81       	ldd	r25, Y+1	; 0x01
     2b2:	89 0f       	add	r24, r25
     2b4:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     2b6:	89 81       	ldd	r24, Y+1	; 0x01
     2b8:	87 70       	andi	r24, 0x07	; 7
     2ba:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	29 81       	ldd	r18, Y+1	; 0x01
     2c2:	fc 01       	movw	r30, r24
     2c4:	20 83       	st	Z, r18
     2c6:	5e c0       	rjmp	.+188    	; 0x384 <bounce+0x114>
	}
	else{
		if (side == 0){
     2c8:	8c 81       	ldd	r24, Y+4	; 0x04
     2ca:	88 23       	and	r24, r24
     2cc:	71 f5       	brne	.+92     	; 0x32a <bounce+0xba>
			switch (*direction){
     2ce:	8a 81       	ldd	r24, Y+2	; 0x02
     2d0:	9b 81       	ldd	r25, Y+3	; 0x03
     2d2:	fc 01       	movw	r30, r24
     2d4:	80 81       	ld	r24, Z
     2d6:	88 2f       	mov	r24, r24
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	83 30       	cpi	r24, 0x03	; 3
     2dc:	91 05       	cpc	r25, r1
     2de:	91 f0       	breq	.+36     	; 0x304 <bounce+0x94>
     2e0:	84 30       	cpi	r24, 0x04	; 4
     2e2:	91 05       	cpc	r25, r1
     2e4:	1c f4       	brge	.+6      	; 0x2ec <bounce+0x7c>
     2e6:	01 97       	sbiw	r24, 0x01	; 1
     2e8:	39 f0       	breq	.+14     	; 0x2f8 <bounce+0x88>
     2ea:	4c c0       	rjmp	.+152    	; 0x384 <bounce+0x114>
     2ec:	85 30       	cpi	r24, 0x05	; 5
     2ee:	91 05       	cpc	r25, r1
     2f0:	79 f0       	breq	.+30     	; 0x310 <bounce+0xa0>
     2f2:	07 97       	sbiw	r24, 0x07	; 7
     2f4:	99 f0       	breq	.+38     	; 0x31c <bounce+0xac>
     2f6:	46 c0       	rjmp	.+140    	; 0x384 <bounce+0x114>
				case 1:
				*direction = 3;
     2f8:	8a 81       	ldd	r24, Y+2	; 0x02
     2fa:	9b 81       	ldd	r25, Y+3	; 0x03
     2fc:	23 e0       	ldi	r18, 0x03	; 3
     2fe:	fc 01       	movw	r30, r24
     300:	20 83       	st	Z, r18
				break;
     302:	12 c0       	rjmp	.+36     	; 0x328 <bounce+0xb8>
				case 3:
				*direction = 1;
     304:	8a 81       	ldd	r24, Y+2	; 0x02
     306:	9b 81       	ldd	r25, Y+3	; 0x03
     308:	21 e0       	ldi	r18, 0x01	; 1
     30a:	fc 01       	movw	r30, r24
     30c:	20 83       	st	Z, r18
				break;
     30e:	0c c0       	rjmp	.+24     	; 0x328 <bounce+0xb8>
				case 5:
				*direction = 7;
     310:	8a 81       	ldd	r24, Y+2	; 0x02
     312:	9b 81       	ldd	r25, Y+3	; 0x03
     314:	27 e0       	ldi	r18, 0x07	; 7
     316:	fc 01       	movw	r30, r24
     318:	20 83       	st	Z, r18
				break;
     31a:	06 c0       	rjmp	.+12     	; 0x328 <bounce+0xb8>
				case 7:
				*direction = 5;
     31c:	8a 81       	ldd	r24, Y+2	; 0x02
     31e:	9b 81       	ldd	r25, Y+3	; 0x03
     320:	25 e0       	ldi	r18, 0x05	; 5
     322:	fc 01       	movw	r30, r24
     324:	20 83       	st	Z, r18
				break;
     326:	00 00       	nop
     328:	2d c0       	rjmp	.+90     	; 0x384 <bounce+0x114>
			}
		}
		else{
			switch (*direction){
     32a:	8a 81       	ldd	r24, Y+2	; 0x02
     32c:	9b 81       	ldd	r25, Y+3	; 0x03
     32e:	fc 01       	movw	r30, r24
     330:	80 81       	ld	r24, Z
     332:	88 2f       	mov	r24, r24
     334:	90 e0       	ldi	r25, 0x00	; 0
     336:	83 30       	cpi	r24, 0x03	; 3
     338:	91 05       	cpc	r25, r1
     33a:	91 f0       	breq	.+36     	; 0x360 <bounce+0xf0>
     33c:	84 30       	cpi	r24, 0x04	; 4
     33e:	91 05       	cpc	r25, r1
     340:	1c f4       	brge	.+6      	; 0x348 <bounce+0xd8>
     342:	01 97       	sbiw	r24, 0x01	; 1
     344:	39 f0       	breq	.+14     	; 0x354 <bounce+0xe4>
     346:	1e c0       	rjmp	.+60     	; 0x384 <bounce+0x114>
     348:	85 30       	cpi	r24, 0x05	; 5
     34a:	91 05       	cpc	r25, r1
     34c:	79 f0       	breq	.+30     	; 0x36c <bounce+0xfc>
     34e:	07 97       	sbiw	r24, 0x07	; 7
     350:	99 f0       	breq	.+38     	; 0x378 <bounce+0x108>
     352:	18 c0       	rjmp	.+48     	; 0x384 <bounce+0x114>
				case 1:
				*direction = 7;
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	9b 81       	ldd	r25, Y+3	; 0x03
     358:	27 e0       	ldi	r18, 0x07	; 7
     35a:	fc 01       	movw	r30, r24
     35c:	20 83       	st	Z, r18
				break;
     35e:	12 c0       	rjmp	.+36     	; 0x384 <bounce+0x114>
				case 3:
				*direction = 5;
     360:	8a 81       	ldd	r24, Y+2	; 0x02
     362:	9b 81       	ldd	r25, Y+3	; 0x03
     364:	25 e0       	ldi	r18, 0x05	; 5
     366:	fc 01       	movw	r30, r24
     368:	20 83       	st	Z, r18
				break;
     36a:	0c c0       	rjmp	.+24     	; 0x384 <bounce+0x114>
				case 5:
				*direction = 3;
     36c:	8a 81       	ldd	r24, Y+2	; 0x02
     36e:	9b 81       	ldd	r25, Y+3	; 0x03
     370:	23 e0       	ldi	r18, 0x03	; 3
     372:	fc 01       	movw	r30, r24
     374:	20 83       	st	Z, r18
				break;
     376:	06 c0       	rjmp	.+12     	; 0x384 <bounce+0x114>
				case 7:
				*direction = 1;
     378:	8a 81       	ldd	r24, Y+2	; 0x02
     37a:	9b 81       	ldd	r25, Y+3	; 0x03
     37c:	21 e0       	ldi	r18, 0x01	; 1
     37e:	fc 01       	movw	r30, r24
     380:	20 83       	st	Z, r18
				break;
     382:	00 00       	nop
			}
		}
	}
	
	
}
     384:	26 96       	adiw	r28, 0x06	; 6
     386:	0f b6       	in	r0, 0x3f	; 63
     388:	f8 94       	cli
     38a:	de bf       	out	0x3e, r29	; 62
     38c:	0f be       	out	0x3f, r0	; 63
     38e:	cd bf       	out	0x3d, r28	; 61
     390:	df 91       	pop	r29
     392:	cf 91       	pop	r28
     394:	08 95       	ret

00000396 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	00 d0       	rcall	.+0      	; 0x39c <move_ball+0x6>
     39c:	00 d0       	rcall	.+0      	; 0x39e <move_ball+0x8>
     39e:	00 d0       	rcall	.+0      	; 0x3a0 <move_ball+0xa>
     3a0:	cd b7       	in	r28, 0x3d	; 61
     3a2:	de b7       	in	r29, 0x3e	; 62
     3a4:	9c 83       	std	Y+4, r25	; 0x04
     3a6:	8b 83       	std	Y+3, r24	; 0x03
     3a8:	7e 83       	std	Y+6, r23	; 0x06
     3aa:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     3ac:	8b 81       	ldd	r24, Y+3	; 0x03
     3ae:	9c 81       	ldd	r25, Y+4	; 0x04
     3b0:	01 96       	adiw	r24, 0x01	; 1
     3b2:	fc 01       	movw	r30, r24
     3b4:	80 81       	ld	r24, Z
     3b6:	28 2f       	mov	r18, r24
     3b8:	30 e0       	ldi	r19, 0x00	; 0
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	02 c0       	rjmp	.+4      	; 0x3c4 <move_ball+0x2e>
     3c0:	88 0f       	add	r24, r24
     3c2:	99 1f       	adc	r25, r25
     3c4:	2a 95       	dec	r18
     3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <move_ball+0x2a>
     3c8:	9a 83       	std	Y+2, r25	; 0x02
     3ca:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	9a 81       	ldd	r25, Y+2	; 0x02
     3d0:	80 95       	com	r24
     3d2:	90 95       	com	r25
     3d4:	9a 83       	std	Y+2, r25	; 0x02
     3d6:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     3d8:	8b 81       	ldd	r24, Y+3	; 0x03
     3da:	9c 81       	ldd	r25, Y+4	; 0x04
     3dc:	fc 01       	movw	r30, r24
     3de:	80 81       	ld	r24, Z
     3e0:	88 23       	and	r24, r24
     3e2:	a9 f5       	brne	.+106    	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     3e4:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     3e8:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     3ec:	20 e0       	ldi	r18, 0x00	; 0
     3ee:	4a e0       	ldi	r20, 0x0A	; 10
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	60 e0       	ldi	r22, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     3fa:	8b 81       	ldd	r24, Y+3	; 0x03
     3fc:	9c 81       	ldd	r25, Y+4	; 0x04
     3fe:	fc 01       	movw	r30, r24
     400:	80 81       	ld	r24, Z
     402:	88 2f       	mov	r24, r24
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	2b 81       	ldd	r18, Y+3	; 0x03
     408:	3c 81       	ldd	r19, Y+4	; 0x04
     40a:	f9 01       	movw	r30, r18
     40c:	20 81       	ld	r18, Z
     40e:	22 2f       	mov	r18, r18
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	22 0f       	add	r18, r18
     414:	33 1f       	adc	r19, r19
     416:	24 5f       	subi	r18, 0xF4	; 244
     418:	3e 4f       	sbci	r19, 0xFE	; 254
     41a:	f9 01       	movw	r30, r18
     41c:	40 81       	ld	r20, Z
     41e:	51 81       	ldd	r21, Z+1	; 0x01
     420:	29 81       	ldd	r18, Y+1	; 0x01
     422:	3a 81       	ldd	r19, Y+2	; 0x02
     424:	24 23       	and	r18, r20
     426:	35 23       	and	r19, r21
     428:	88 0f       	add	r24, r24
     42a:	99 1f       	adc	r25, r25
     42c:	84 5f       	subi	r24, 0xF4	; 244
     42e:	9e 4f       	sbci	r25, 0xFE	; 254
     430:	fc 01       	movw	r30, r24
     432:	31 83       	std	Z+1, r19	; 0x01
     434:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     436:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     43a:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	40 e0       	ldi	r20, 0x00	; 0
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
     44c:	1e c0       	rjmp	.+60     	; 0x48a <__FUSE_REGION_LENGTH__+0x8a>
	}
	else{
		col_value[current[0]] &= mask;
     44e:	8b 81       	ldd	r24, Y+3	; 0x03
     450:	9c 81       	ldd	r25, Y+4	; 0x04
     452:	fc 01       	movw	r30, r24
     454:	80 81       	ld	r24, Z
     456:	88 2f       	mov	r24, r24
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	2b 81       	ldd	r18, Y+3	; 0x03
     45c:	3c 81       	ldd	r19, Y+4	; 0x04
     45e:	f9 01       	movw	r30, r18
     460:	20 81       	ld	r18, Z
     462:	22 2f       	mov	r18, r18
     464:	30 e0       	ldi	r19, 0x00	; 0
     466:	22 0f       	add	r18, r18
     468:	33 1f       	adc	r19, r19
     46a:	24 5f       	subi	r18, 0xF4	; 244
     46c:	3e 4f       	sbci	r19, 0xFE	; 254
     46e:	f9 01       	movw	r30, r18
     470:	40 81       	ld	r20, Z
     472:	51 81       	ldd	r21, Z+1	; 0x01
     474:	29 81       	ldd	r18, Y+1	; 0x01
     476:	3a 81       	ldd	r19, Y+2	; 0x02
     478:	24 23       	and	r18, r20
     47a:	35 23       	and	r19, r21
     47c:	88 0f       	add	r24, r24
     47e:	99 1f       	adc	r25, r25
     480:	84 5f       	subi	r24, 0xF4	; 244
     482:	9e 4f       	sbci	r25, 0xFE	; 254
     484:	fc 01       	movw	r30, r24
     486:	31 83       	std	Z+1, r19	; 0x01
     488:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     48a:	8d 81       	ldd	r24, Y+5	; 0x05
     48c:	9e 81       	ldd	r25, Y+6	; 0x06
     48e:	fc 01       	movw	r30, r24
     490:	20 81       	ld	r18, Z
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	fc 01       	movw	r30, r24
     498:	20 83       	st	Z, r18
	current[1] = next[1];
     49a:	8b 81       	ldd	r24, Y+3	; 0x03
     49c:	9c 81       	ldd	r25, Y+4	; 0x04
     49e:	01 96       	adiw	r24, 0x01	; 1
     4a0:	2d 81       	ldd	r18, Y+5	; 0x05
     4a2:	3e 81       	ldd	r19, Y+6	; 0x06
     4a4:	f9 01       	movw	r30, r18
     4a6:	21 81       	ldd	r18, Z+1	; 0x01
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	01 96       	adiw	r24, 0x01	; 1
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	28 2f       	mov	r18, r24
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	02 c0       	rjmp	.+4      	; 0x4c4 <__FUSE_REGION_LENGTH__+0xc4>
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	2a 95       	dec	r18
     4c6:	e2 f7       	brpl	.-8      	; 0x4c0 <__FUSE_REGION_LENGTH__+0xc0>
     4c8:	9a 83       	std	Y+2, r25	; 0x02
     4ca:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	fc 01       	movw	r30, r24
     4d2:	80 81       	ld	r24, Z
     4d4:	88 23       	and	r24, r24
     4d6:	a9 f5       	brne	.+106    	; 0x542 <__FUSE_REGION_LENGTH__+0x142>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     4d8:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     4dc:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	4a e0       	ldi	r20, 0x0A	; 10
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0e 94 d9 0f 	call	0x1fb2	; 0x1fb2 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     4ee:	8b 81       	ldd	r24, Y+3	; 0x03
     4f0:	9c 81       	ldd	r25, Y+4	; 0x04
     4f2:	fc 01       	movw	r30, r24
     4f4:	80 81       	ld	r24, Z
     4f6:	88 2f       	mov	r24, r24
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	2b 81       	ldd	r18, Y+3	; 0x03
     4fc:	3c 81       	ldd	r19, Y+4	; 0x04
     4fe:	f9 01       	movw	r30, r18
     500:	20 81       	ld	r18, Z
     502:	22 2f       	mov	r18, r18
     504:	30 e0       	ldi	r19, 0x00	; 0
     506:	22 0f       	add	r18, r18
     508:	33 1f       	adc	r19, r19
     50a:	24 5f       	subi	r18, 0xF4	; 244
     50c:	3e 4f       	sbci	r19, 0xFE	; 254
     50e:	f9 01       	movw	r30, r18
     510:	40 81       	ld	r20, Z
     512:	51 81       	ldd	r21, Z+1	; 0x01
     514:	29 81       	ldd	r18, Y+1	; 0x01
     516:	3a 81       	ldd	r19, Y+2	; 0x02
     518:	24 2b       	or	r18, r20
     51a:	35 2b       	or	r19, r21
     51c:	88 0f       	add	r24, r24
     51e:	99 1f       	adc	r25, r25
     520:	84 5f       	subi	r24, 0xF4	; 244
     522:	9e 4f       	sbci	r25, 0xFE	; 254
     524:	fc 01       	movw	r30, r24
     526:	31 83       	std	Z+1, r19	; 0x01
     528:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     52a:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <_col_0_mutex>
     52e:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <_col_0_mutex+0x1>
     532:	20 e0       	ldi	r18, 0x00	; 0
     534:	40 e0       	ldi	r20, 0x00	; 0
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
     540:	1e c0       	rjmp	.+60     	; 0x57e <__FUSE_REGION_LENGTH__+0x17e>
	}
	else{
		col_value[current[0]] |= mask;
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	fc 01       	movw	r30, r24
     548:	80 81       	ld	r24, Z
     54a:	88 2f       	mov	r24, r24
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	2b 81       	ldd	r18, Y+3	; 0x03
     550:	3c 81       	ldd	r19, Y+4	; 0x04
     552:	f9 01       	movw	r30, r18
     554:	20 81       	ld	r18, Z
     556:	22 2f       	mov	r18, r18
     558:	30 e0       	ldi	r19, 0x00	; 0
     55a:	22 0f       	add	r18, r18
     55c:	33 1f       	adc	r19, r19
     55e:	24 5f       	subi	r18, 0xF4	; 244
     560:	3e 4f       	sbci	r19, 0xFE	; 254
     562:	f9 01       	movw	r30, r18
     564:	40 81       	ld	r20, Z
     566:	51 81       	ldd	r21, Z+1	; 0x01
     568:	29 81       	ldd	r18, Y+1	; 0x01
     56a:	3a 81       	ldd	r19, Y+2	; 0x02
     56c:	24 2b       	or	r18, r20
     56e:	35 2b       	or	r19, r21
     570:	88 0f       	add	r24, r24
     572:	99 1f       	adc	r25, r25
     574:	84 5f       	subi	r24, 0xF4	; 244
     576:	9e 4f       	sbci	r25, 0xFE	; 254
     578:	fc 01       	movw	r30, r24
     57a:	31 83       	std	Z+1, r19	; 0x01
     57c:	20 83       	st	Z, r18
	}

	
}
     57e:	26 96       	adiw	r28, 0x06	; 6
     580:	0f b6       	in	r0, 0x3f	; 63
     582:	f8 94       	cli
     584:	de bf       	out	0x3e, r29	; 62
     586:	0f be       	out	0x3f, r0	; 63
     588:	cd bf       	out	0x3d, r28	; 61
     58a:	df 91       	pop	r29
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     590:	cf 93       	push	r28
     592:	df 93       	push	r29
     594:	00 d0       	rcall	.+0      	; 0x596 <calc_next+0x6>
     596:	00 d0       	rcall	.+0      	; 0x598 <calc_next+0x8>
     598:	00 d0       	rcall	.+0      	; 0x59a <calc_next+0xa>
     59a:	cd b7       	in	r28, 0x3d	; 61
     59c:	de b7       	in	r29, 0x3e	; 62
     59e:	9a 83       	std	Y+2, r25	; 0x02
     5a0:	89 83       	std	Y+1, r24	; 0x01
     5a2:	7c 83       	std	Y+4, r23	; 0x04
     5a4:	6b 83       	std	Y+3, r22	; 0x03
     5a6:	5e 83       	std	Y+6, r21	; 0x06
     5a8:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     5aa:	8d 81       	ldd	r24, Y+5	; 0x05
     5ac:	9e 81       	ldd	r25, Y+6	; 0x06
     5ae:	fc 01       	movw	r30, r24
     5b0:	80 81       	ld	r24, Z
     5b2:	88 2f       	mov	r24, r24
     5b4:	90 e0       	ldi	r25, 0x00	; 0
     5b6:	09 2e       	mov	r0, r25
     5b8:	00 0c       	add	r0, r0
     5ba:	aa 0b       	sbc	r26, r26
     5bc:	bb 0b       	sbc	r27, r27
     5be:	40 e0       	ldi	r20, 0x00	; 0
     5c0:	50 e0       	ldi	r21, 0x00	; 0
     5c2:	27 e0       	ldi	r18, 0x07	; 7
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	84 1b       	sub	r24, r20
     5c8:	95 0b       	sbc	r25, r21
     5ca:	28 17       	cp	r18, r24
     5cc:	39 07       	cpc	r19, r25
     5ce:	08 f4       	brcc	.+2      	; 0x5d2 <calc_next+0x42>
     5d0:	79 c0       	rjmp	.+242    	; 0x6c4 <calc_next+0x134>
     5d2:	82 5c       	subi	r24, 0xC2	; 194
     5d4:	9f 4f       	sbci	r25, 0xFF	; 255
     5d6:	fc 01       	movw	r30, r24
     5d8:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__tablejump2__>
	{
		case 0:
			--next[1];
     5dc:	8b 81       	ldd	r24, Y+3	; 0x03
     5de:	9c 81       	ldd	r25, Y+4	; 0x04
     5e0:	01 96       	adiw	r24, 0x01	; 1
     5e2:	fc 01       	movw	r30, r24
     5e4:	20 81       	ld	r18, Z
     5e6:	21 50       	subi	r18, 0x01	; 1
     5e8:	fc 01       	movw	r30, r24
     5ea:	20 83       	st	Z, r18
			break;
     5ec:	6b c0       	rjmp	.+214    	; 0x6c4 <calc_next+0x134>
		case 1:
		++next[0];
     5ee:	8b 81       	ldd	r24, Y+3	; 0x03
     5f0:	9c 81       	ldd	r25, Y+4	; 0x04
     5f2:	fc 01       	movw	r30, r24
     5f4:	80 81       	ld	r24, Z
     5f6:	21 e0       	ldi	r18, 0x01	; 1
     5f8:	28 0f       	add	r18, r24
     5fa:	8b 81       	ldd	r24, Y+3	; 0x03
     5fc:	9c 81       	ldd	r25, Y+4	; 0x04
     5fe:	fc 01       	movw	r30, r24
     600:	20 83       	st	Z, r18
		--next[1];
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	01 96       	adiw	r24, 0x01	; 1
     608:	fc 01       	movw	r30, r24
     60a:	20 81       	ld	r18, Z
     60c:	21 50       	subi	r18, 0x01	; 1
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
		break;
     612:	58 c0       	rjmp	.+176    	; 0x6c4 <calc_next+0x134>
		case 2:
		++next[0];
     614:	8b 81       	ldd	r24, Y+3	; 0x03
     616:	9c 81       	ldd	r25, Y+4	; 0x04
     618:	fc 01       	movw	r30, r24
     61a:	80 81       	ld	r24, Z
     61c:	21 e0       	ldi	r18, 0x01	; 1
     61e:	28 0f       	add	r18, r24
     620:	8b 81       	ldd	r24, Y+3	; 0x03
     622:	9c 81       	ldd	r25, Y+4	; 0x04
     624:	fc 01       	movw	r30, r24
     626:	20 83       	st	Z, r18
		break;
     628:	4d c0       	rjmp	.+154    	; 0x6c4 <calc_next+0x134>
		case 3:
		++next[0];
     62a:	8b 81       	ldd	r24, Y+3	; 0x03
     62c:	9c 81       	ldd	r25, Y+4	; 0x04
     62e:	fc 01       	movw	r30, r24
     630:	80 81       	ld	r24, Z
     632:	21 e0       	ldi	r18, 0x01	; 1
     634:	28 0f       	add	r18, r24
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	fc 01       	movw	r30, r24
     63c:	20 83       	st	Z, r18
		++next[1];
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	01 96       	adiw	r24, 0x01	; 1
     644:	fc 01       	movw	r30, r24
     646:	20 81       	ld	r18, Z
     648:	2f 5f       	subi	r18, 0xFF	; 255
     64a:	fc 01       	movw	r30, r24
     64c:	20 83       	st	Z, r18
		break;
     64e:	3a c0       	rjmp	.+116    	; 0x6c4 <calc_next+0x134>
		case 4:
		++next[1];
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	fc 01       	movw	r30, r24
     658:	20 81       	ld	r18, Z
     65a:	2f 5f       	subi	r18, 0xFF	; 255
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
		break;
     660:	31 c0       	rjmp	.+98     	; 0x6c4 <calc_next+0x134>
		case 5:
		--next[0];
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	fc 01       	movw	r30, r24
     668:	80 81       	ld	r24, Z
     66a:	2f ef       	ldi	r18, 0xFF	; 255
     66c:	28 0f       	add	r18, r24
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	9c 81       	ldd	r25, Y+4	; 0x04
     672:	fc 01       	movw	r30, r24
     674:	20 83       	st	Z, r18
		++next[1];
     676:	8b 81       	ldd	r24, Y+3	; 0x03
     678:	9c 81       	ldd	r25, Y+4	; 0x04
     67a:	01 96       	adiw	r24, 0x01	; 1
     67c:	fc 01       	movw	r30, r24
     67e:	20 81       	ld	r18, Z
     680:	2f 5f       	subi	r18, 0xFF	; 255
     682:	fc 01       	movw	r30, r24
     684:	20 83       	st	Z, r18
		break;
     686:	1e c0       	rjmp	.+60     	; 0x6c4 <calc_next+0x134>
		case 6:
		--next[0];
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	fc 01       	movw	r30, r24
     68e:	80 81       	ld	r24, Z
     690:	2f ef       	ldi	r18, 0xFF	; 255
     692:	28 0f       	add	r18, r24
     694:	8b 81       	ldd	r24, Y+3	; 0x03
     696:	9c 81       	ldd	r25, Y+4	; 0x04
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
		break;
     69c:	13 c0       	rjmp	.+38     	; 0x6c4 <calc_next+0x134>
		case 7:
		--next[0];
     69e:	8b 81       	ldd	r24, Y+3	; 0x03
     6a0:	9c 81       	ldd	r25, Y+4	; 0x04
     6a2:	fc 01       	movw	r30, r24
     6a4:	80 81       	ld	r24, Z
     6a6:	2f ef       	ldi	r18, 0xFF	; 255
     6a8:	28 0f       	add	r18, r24
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	9c 81       	ldd	r25, Y+4	; 0x04
     6ae:	fc 01       	movw	r30, r24
     6b0:	20 83       	st	Z, r18
		--next[1];
     6b2:	8b 81       	ldd	r24, Y+3	; 0x03
     6b4:	9c 81       	ldd	r25, Y+4	; 0x04
     6b6:	01 96       	adiw	r24, 0x01	; 1
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 81       	ld	r18, Z
     6bc:	21 50       	subi	r18, 0x01	; 1
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
		break;
     6c2:	00 00       	nop
	}
	
}
     6c4:	26 96       	adiw	r28, 0x06	; 6
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	f8 94       	cli
     6ca:	de bf       	out	0x3e, r29	; 62
     6cc:	0f be       	out	0x3f, r0	; 63
     6ce:	cd bf       	out	0x3d, r28	; 61
     6d0:	df 91       	pop	r29
     6d2:	cf 91       	pop	r28
     6d4:	08 95       	ret

000006d6 <ball_task>:

void ball_task(void *pvParameters)
{
     6d6:	cf 93       	push	r28
     6d8:	df 93       	push	r29
     6da:	cd b7       	in	r28, 0x3d	; 61
     6dc:	de b7       	in	r29, 0x3e	; 62
     6de:	27 97       	sbiw	r28, 0x07	; 7
     6e0:	0f b6       	in	r0, 0x3f	; 63
     6e2:	f8 94       	cli
     6e4:	de bf       	out	0x3e, r29	; 62
     6e6:	0f be       	out	0x3f, r0	; 63
     6e8:	cd bf       	out	0x3d, r28	; 61
     6ea:	9f 83       	std	Y+7, r25	; 0x07
     6ec:	8e 83       	std	Y+6, r24	; 0x06
	(void) pvParameters;

	uint8_t pos[2] = {7, 5};
     6ee:	87 e0       	ldi	r24, 0x07	; 7
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	85 e0       	ldi	r24, 0x05	; 5
     6f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t direction = 0;
     6f6:	1b 82       	std	Y+3, r1	; 0x03
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     6f8:	89 81       	ldd	r24, Y+1	; 0x01
     6fa:	8c 83       	std	Y+4, r24	; 0x04
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	8d 83       	std	Y+5, r24	; 0x05
		calc_next( &pos, &next, &direction);
     700:	9e 01       	movw	r18, r28
     702:	2d 5f       	subi	r18, 0xFD	; 253
     704:	3f 4f       	sbci	r19, 0xFF	; 255
     706:	ce 01       	movw	r24, r28
     708:	04 96       	adiw	r24, 0x04	; 4
     70a:	a9 01       	movw	r20, r18
     70c:	bc 01       	movw	r22, r24
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 c8 02 	call	0x590	; 0x590 <calc_next>
		
		if (next[0] > 12){
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	8d 30       	cpi	r24, 0x0D	; 13
     71a:	30 f0       	brcs	.+12     	; 0x728 <ball_task+0x52>
			bounce(&direction, 1);
     71c:	ce 01       	movw	r24, r28
     71e:	03 96       	adiw	r24, 0x03	; 3
     720:	61 e0       	ldi	r22, 0x01	; 1
     722:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     726:	2e c0       	rjmp	.+92     	; 0x784 <ball_task+0xae>
		}
		else if ( next[1] > 9){
     728:	8d 81       	ldd	r24, Y+5	; 0x05
     72a:	8a 30       	cpi	r24, 0x0A	; 10
     72c:	30 f0       	brcs	.+12     	; 0x73a <ball_task+0x64>
			bounce(&direction, 0);
     72e:	ce 01       	movw	r24, r28
     730:	03 96       	adiw	r24, 0x03	; 3
     732:	60 e0       	ldi	r22, 0x00	; 0
     734:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     738:	25 c0       	rjmp	.+74     	; 0x784 <ball_task+0xae>
		}
		else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     73a:	8c 81       	ldd	r24, Y+4	; 0x04
     73c:	88 23       	and	r24, r24
     73e:	d9 f4       	brne	.+54     	; 0x776 <ball_task+0xa0>
     740:	8d 81       	ldd	r24, Y+5	; 0x05
     742:	28 2f       	mov	r18, r24
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     74a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     74e:	28 17       	cp	r18, r24
     750:	39 07       	cpc	r19, r25
     752:	59 f0       	breq	.+22     	; 0x76a <ball_task+0x94>
     754:	8d 81       	ldd	r24, Y+5	; 0x05
     756:	28 2f       	mov	r18, r24
     758:	30 e0       	ldi	r19, 0x00	; 0
     75a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     75e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	28 17       	cp	r18, r24
     766:	39 07       	cpc	r19, r25
     768:	31 f4       	brne	.+12     	; 0x776 <ball_task+0xa0>
			bounce(&direction, 1);
     76a:	ce 01       	movw	r24, r28
     76c:	03 96       	adiw	r24, 0x03	; 3
     76e:	61 e0       	ldi	r22, 0x01	; 1
     770:	0e 94 38 01 	call	0x270	; 0x270 <bounce>
     774:	07 c0       	rjmp	.+14     	; 0x784 <ball_task+0xae>
		}
		else{
			move_ball(pos, next);
     776:	ce 01       	movw	r24, r28
     778:	04 96       	adiw	r24, 0x04	; 4
     77a:	bc 01       	movw	r22, r24
     77c:	ce 01       	movw	r24, r28
     77e:	01 96       	adiw	r24, 0x01	; 1
     780:	0e 94 cb 01 	call	0x396	; 0x396 <move_ball>
		}
		vTaskDelay(60);
     784:	8c e3       	ldi	r24, 0x3C	; 60
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	0e 94 66 14 	call	0x28cc	; 0x28cc <vTaskDelay>
	}
     78c:	b5 cf       	rjmp	.-150    	; 0x6f8 <ball_task+0x22>

0000078e <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     796:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     79a:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     79e:	89 2b       	or	r24, r25
     7a0:	49 f4       	brne	.+18     	; 0x7b4 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     7a2:	8b e2       	ldi	r24, 0x2B	; 43
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	2b e2       	ldi	r18, 0x2B	; 43
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	f9 01       	movw	r30, r18
     7ac:	20 81       	ld	r18, Z
     7ae:	24 60       	ori	r18, 0x04	; 4
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     7b4:	8b e2       	ldi	r24, 0x2B	; 43
     7b6:	90 e0       	ldi	r25, 0x00	; 0
     7b8:	2b e2       	ldi	r18, 0x2B	; 43
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	f9 01       	movw	r30, r18
     7be:	20 81       	ld	r18, Z
     7c0:	20 62       	ori	r18, 0x20	; 32
     7c2:	fc 01       	movw	r30, r24
     7c4:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     7c6:	8b e2       	ldi	r24, 0x2B	; 43
     7c8:	90 e0       	ldi	r25, 0x00	; 0
     7ca:	2b e2       	ldi	r18, 0x2B	; 43
     7cc:	30 e0       	ldi	r19, 0x00	; 0
     7ce:	f9 01       	movw	r30, r18
     7d0:	20 81       	ld	r18, Z
     7d2:	2f 7d       	andi	r18, 0xDF	; 223
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     7d8:	8b e2       	ldi	r24, 0x2B	; 43
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	2b e2       	ldi	r18, 0x2B	; 43
     7de:	30 e0       	ldi	r19, 0x00	; 0
     7e0:	f9 01       	movw	r30, r18
     7e2:	20 81       	ld	r18, Z
     7e4:	20 61       	ori	r18, 0x10	; 16
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     7ea:	8b e2       	ldi	r24, 0x2B	; 43
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	2b e2       	ldi	r18, 0x2B	; 43
     7f0:	30 e0       	ldi	r19, 0x00	; 0
     7f2:	f9 01       	movw	r30, r18
     7f4:	20 81       	ld	r18, Z
     7f6:	2f 7e       	andi	r18, 0xEF	; 239
     7f8:	fc 01       	movw	r30, r24
     7fa:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     7fc:	82 e2       	ldi	r24, 0x22	; 34
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     804:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     808:	22 0f       	add	r18, r18
     80a:	33 1f       	adc	r19, r19
     80c:	24 5f       	subi	r18, 0xF4	; 244
     80e:	3e 4f       	sbci	r19, 0xFE	; 254
     810:	f9 01       	movw	r30, r18
     812:	20 81       	ld	r18, Z
     814:	31 81       	ldd	r19, Z+1	; 0x01
     816:	20 95       	com	r18
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     81c:	85 e2       	ldi	r24, 0x25	; 37
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	25 e2       	ldi	r18, 0x25	; 37
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	f9 01       	movw	r30, r18
     826:	20 81       	ld	r18, Z
     828:	23 60       	ori	r18, 0x03	; 3
     82a:	fc 01       	movw	r30, r24
     82c:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     82e:	85 e2       	ldi	r24, 0x25	; 37
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	25 e2       	ldi	r18, 0x25	; 37
     834:	30 e0       	ldi	r19, 0x00	; 0
     836:	f9 01       	movw	r30, r18
     838:	40 81       	ld	r20, Z
     83a:	20 91 52 01 	lds	r18, 0x0152	; 0x800152 <col_index>
     83e:	30 91 53 01 	lds	r19, 0x0153	; 0x800153 <col_index+0x1>
     842:	22 0f       	add	r18, r18
     844:	33 1f       	adc	r19, r19
     846:	24 5f       	subi	r18, 0xF4	; 244
     848:	3e 4f       	sbci	r19, 0xFE	; 254
     84a:	f9 01       	movw	r30, r18
     84c:	20 81       	ld	r18, Z
     84e:	31 81       	ldd	r19, Z+1	; 0x01
     850:	23 2f       	mov	r18, r19
     852:	33 27       	eor	r19, r19
     854:	23 70       	andi	r18, 0x03	; 3
     856:	20 95       	com	r18
     858:	24 23       	and	r18, r20
     85a:	fc 01       	movw	r30, r24
     85c:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     85e:	8b e2       	ldi	r24, 0x2B	; 43
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	2b e2       	ldi	r18, 0x2B	; 43
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	f9 01       	movw	r30, r18
     868:	20 81       	ld	r18, Z
     86a:	2b 7f       	andi	r18, 0xFB	; 251
     86c:	fc 01       	movw	r30, r24
     86e:	20 83       	st	Z, r18

	++col_index;
     870:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     874:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     878:	01 96       	adiw	r24, 0x01	; 1
     87a:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <col_index+0x1>
     87e:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <col_index>
	if (col_index > 13){
     882:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <col_index>
     886:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <col_index+0x1>
     88a:	0e 97       	sbiw	r24, 0x0e	; 14
     88c:	24 f0       	brlt	.+8      	; 0x896 <handle_display+0x108>
		col_index = 0;
     88e:	10 92 53 01 	sts	0x0153, r1	; 0x800153 <col_index+0x1>
     892:	10 92 52 01 	sts	0x0152, r1	; 0x800152 <col_index>
	}

}
     896:	df 91       	pop	r29
     898:	cf 91       	pop	r28
     89a:	08 95       	ret

0000089c <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     89c:	cf 93       	push	r28
     89e:	df 93       	push	r29
     8a0:	cd b7       	in	r28, 0x3d	; 61
     8a2:	de b7       	in	r29, 0x3e	; 62
	//
}
     8a4:	df 91       	pop	r29
     8a6:	cf 91       	pop	r28
     8a8:	08 95       	ret

000008aa <main>:

//-----------------------------------------
int main(void)
{
     8aa:	ef 92       	push	r14
     8ac:	ff 92       	push	r15
     8ae:	0f 93       	push	r16
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	cd b7       	in	r28, 0x3d	; 61
     8b6:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     8b8:	0e 94 48 05 	call	0xa90	; 0xa90 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     8bc:	8b e2       	ldi	r24, 0x2B	; 43
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	2b e2       	ldi	r18, 0x2B	; 43
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	f9 01       	movw	r30, r18
     8c6:	20 81       	ld	r18, Z
     8c8:	2f 7b       	andi	r18, 0xBF	; 191
     8ca:	fc 01       	movw	r30, r24
     8cc:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     8ce:	8e e1       	ldi	r24, 0x1E	; 30
     8d0:	40 e0       	ldi	r20, 0x00	; 0
     8d2:	61 e0       	ldi	r22, 0x01	; 1
     8d4:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericCreate>
     8d8:	90 93 4d 01 	sts	0x014D, r25	; 0x80014d <__data_end+0x1>
     8dc:	80 93 4c 01 	sts	0x014C, r24	; 0x80014c <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     8e0:	81 e0       	ldi	r24, 0x01	; 1
     8e2:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <xQueueCreateMutex>
     8e6:	90 93 4f 01 	sts	0x014F, r25	; 0x80014f <_col_0_mutex+0x1>
     8ea:	80 93 4e 01 	sts	0x014E, r24	; 0x80014e <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	0e 94 a8 0e 	call	0x1d50	; 0x1d50 <xQueueCreateMutex>
     8f4:	90 93 51 01 	sts	0x0151, r25	; 0x800151 <_player_position_mutex+0x1>
     8f8:	80 93 50 01 	sts	0x0150, r24	; 0x800150 <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     8fc:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <__data_end>
     900:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <__data_end+0x1>
     904:	0e 94 ce 04 	call	0x99c	; 0x99c <init_com>
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	//xTaskCreate(echo_task,(const char *)"echo", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
	xTaskCreate(game_task,(const char *)"game", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     908:	e1 2c       	mov	r14, r1
     90a:	f1 2c       	mov	r15, r1
     90c:	03 e0       	ldi	r16, 0x03	; 3
     90e:	20 e0       	ldi	r18, 0x00	; 0
     910:	30 e0       	ldi	r19, 0x00	; 0
     912:	45 e5       	ldi	r20, 0x55	; 85
     914:	50 e0       	ldi	r21, 0x00	; 0
     916:	6c e3       	ldi	r22, 0x3C	; 60
     918:	71 e0       	ldi	r23, 0x01	; 1
     91a:	82 ec       	ldi	r24, 0xC2	; 194
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	0e 94 8c 12 	call	0x2518	; 0x2518 <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     922:	e1 2c       	mov	r14, r1
     924:	f1 2c       	mov	r15, r1
     926:	04 e0       	ldi	r16, 0x04	; 4
     928:	20 e0       	ldi	r18, 0x00	; 0
     92a:	30 e0       	ldi	r19, 0x00	; 0
     92c:	45 e5       	ldi	r20, 0x55	; 85
     92e:	50 e0       	ldi	r21, 0x00	; 0
     930:	61 e4       	ldi	r22, 0x41	; 65
     932:	71 e0       	ldi	r23, 0x01	; 1
     934:	8b e6       	ldi	r24, 0x6B	; 107
     936:	93 e0       	ldi	r25, 0x03	; 3
     938:	0e 94 8c 12 	call	0x2518	; 0x2518 <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     93c:	87 ec       	ldi	r24, 0xC7	; 199
     93e:	93 e0       	ldi	r25, 0x03	; 3
     940:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     944:	0e 94 88 14 	call	0x2910	; 0x2910 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     948:	ff cf       	rjmp	.-2      	; 0x948 <__stack+0x49>

0000094a <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     94a:	cf 93       	push	r28
     94c:	df 93       	push	r29
     94e:	00 d0       	rcall	.+0      	; 0x950 <_com_call_back+0x6>
     950:	00 d0       	rcall	.+0      	; 0x952 <_com_call_back+0x8>
     952:	cd b7       	in	r28, 0x3d	; 61
     954:	de b7       	in	r29, 0x3e	; 62
     956:	9b 83       	std	Y+3, r25	; 0x03
     958:	8a 83       	std	Y+2, r24	; 0x02
     95a:	6c 83       	std	Y+4, r22	; 0x04
     95c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     960:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     964:	89 2b       	or	r24, r25
     966:	99 f0       	breq	.+38     	; 0x98e <_com_call_back+0x44>
     968:	19 82       	std	Y+1, r1	; 0x01
     96a:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <_x_rx_com_queue>
     96e:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <_x_rx_com_queue+0x1>
     972:	be 01       	movw	r22, r28
     974:	6c 5f       	subi	r22, 0xFC	; 252
     976:	7f 4f       	sbci	r23, 0xFF	; 255
     978:	20 e0       	ldi	r18, 0x00	; 0
     97a:	ae 01       	movw	r20, r28
     97c:	4f 5f       	subi	r20, 0xFF	; 255
     97e:	5f 4f       	sbci	r21, 0xFF	; 255
     980:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <xQueueGenericSendFromISR>
     984:	89 81       	ldd	r24, Y+1	; 0x01
     986:	88 23       	and	r24, r24
     988:	11 f0       	breq	.+4      	; 0x98e <_com_call_back+0x44>
     98a:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	0f 90       	pop	r0
     994:	0f 90       	pop	r0
     996:	df 91       	pop	r29
     998:	cf 91       	pop	r28
     99a:	08 95       	ret

0000099c <init_com>:
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	00 d0       	rcall	.+0      	; 0x9a2 <init_com+0x6>
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	9a 83       	std	Y+2, r25	; 0x02
     9a8:	89 83       	std	Y+1, r24	; 0x01
     9aa:	89 81       	ldd	r24, Y+1	; 0x01
     9ac:	9a 81       	ldd	r25, Y+2	; 0x02
     9ae:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <_x_rx_com_queue+0x1>
     9b2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <_x_rx_com_queue>
     9b6:	0f 90       	pop	r0
     9b8:	0f 90       	pop	r0
     9ba:	df 91       	pop	r29
     9bc:	cf 91       	pop	r28
     9be:	08 95       	ret

000009c0 <init_display_timer>:
     9c0:	cf 93       	push	r28
     9c2:	df 93       	push	r29
     9c4:	00 d0       	rcall	.+0      	; 0x9c6 <init_display_timer+0x6>
     9c6:	cd b7       	in	r28, 0x3d	; 61
     9c8:	de b7       	in	r29, 0x3e	; 62
     9ca:	9a 83       	std	Y+2, r25	; 0x02
     9cc:	89 83       	std	Y+1, r24	; 0x01
     9ce:	89 81       	ldd	r24, Y+1	; 0x01
     9d0:	9a 81       	ldd	r25, Y+2	; 0x02
     9d2:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <cb_ptr+0x1>
     9d6:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <cb_ptr>
     9da:	87 e4       	ldi	r24, 0x47	; 71
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	2a e0       	ldi	r18, 0x0A	; 10
     9e0:	fc 01       	movw	r30, r24
     9e2:	20 83       	st	Z, r18
     9e4:	84 e4       	ldi	r24, 0x44	; 68
     9e6:	90 e0       	ldi	r25, 0x00	; 0
     9e8:	24 e4       	ldi	r18, 0x44	; 68
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	f9 01       	movw	r30, r18
     9ee:	20 81       	ld	r18, Z
     9f0:	22 60       	ori	r18, 0x02	; 2
     9f2:	fc 01       	movw	r30, r24
     9f4:	20 83       	st	Z, r18
     9f6:	8e e6       	ldi	r24, 0x6E	; 110
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	2e e6       	ldi	r18, 0x6E	; 110
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	f9 01       	movw	r30, r18
     a00:	20 81       	ld	r18, Z
     a02:	22 60       	ori	r18, 0x02	; 2
     a04:	fc 01       	movw	r30, r24
     a06:	20 83       	st	Z, r18
     a08:	85 e4       	ldi	r24, 0x45	; 69
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	25 e4       	ldi	r18, 0x45	; 69
     a0e:	30 e0       	ldi	r19, 0x00	; 0
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	25 60       	ori	r18, 0x05	; 5
     a16:	fc 01       	movw	r30, r24
     a18:	20 83       	st	Z, r18
     a1a:	0f 90       	pop	r0
     a1c:	0f 90       	pop	r0
     a1e:	df 91       	pop	r29
     a20:	cf 91       	pop	r28
     a22:	08 95       	ret

00000a24 <__vector_16>:
     a24:	1f 92       	push	r1
     a26:	0f 92       	push	r0
     a28:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a2c:	0f 92       	push	r0
     a2e:	11 24       	eor	r1, r1
     a30:	2f 93       	push	r18
     a32:	3f 93       	push	r19
     a34:	4f 93       	push	r20
     a36:	5f 93       	push	r21
     a38:	6f 93       	push	r22
     a3a:	7f 93       	push	r23
     a3c:	8f 93       	push	r24
     a3e:	9f 93       	push	r25
     a40:	af 93       	push	r26
     a42:	bf 93       	push	r27
     a44:	ef 93       	push	r30
     a46:	ff 93       	push	r31
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     a54:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     a58:	89 2b       	or	r24, r25
     a5a:	31 f0       	breq	.+12     	; 0xa68 <__vector_16+0x44>
     a5c:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <cb_ptr>
     a60:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <cb_ptr+0x1>
     a64:	fc 01       	movw	r30, r24
     a66:	09 95       	icall
     a68:	df 91       	pop	r29
     a6a:	cf 91       	pop	r28
     a6c:	ff 91       	pop	r31
     a6e:	ef 91       	pop	r30
     a70:	bf 91       	pop	r27
     a72:	af 91       	pop	r26
     a74:	9f 91       	pop	r25
     a76:	8f 91       	pop	r24
     a78:	7f 91       	pop	r23
     a7a:	6f 91       	pop	r22
     a7c:	5f 91       	pop	r21
     a7e:	4f 91       	pop	r20
     a80:	3f 91       	pop	r19
     a82:	2f 91       	pop	r18
     a84:	0f 90       	pop	r0
     a86:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     a8a:	0f 90       	pop	r0
     a8c:	1f 90       	pop	r1
     a8e:	18 95       	reti

00000a90 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     a90:	8f 92       	push	r8
     a92:	9f 92       	push	r9
     a94:	af 92       	push	r10
     a96:	bf 92       	push	r11
     a98:	cf 92       	push	r12
     a9a:	df 92       	push	r13
     a9c:	ef 92       	push	r14
     a9e:	0f 93       	push	r16
     aa0:	cf 93       	push	r28
     aa2:	df 93       	push	r29
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     aa8:	8a e5       	ldi	r24, 0x5A	; 90
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	0e 94 da 05 	call	0xbb4	; 0xbb4 <buffer_init>
	buffer_init(&_com_tx_buffer);
     ab0:	8d e6       	ldi	r24, 0x6D	; 109
     ab2:	91 e0       	ldi	r25, 0x01	; 1
     ab4:	0e 94 da 05 	call	0xbb4	; 0xbb4 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     ab8:	0f 2e       	mov	r0, r31
     aba:	f5 ea       	ldi	r31, 0xA5	; 165
     abc:	8f 2e       	mov	r8, r31
     abe:	f4 e0       	ldi	r31, 0x04	; 4
     ac0:	9f 2e       	mov	r9, r31
     ac2:	f0 2d       	mov	r31, r0
     ac4:	0f 2e       	mov	r0, r31
     ac6:	fd e6       	ldi	r31, 0x6D	; 109
     ac8:	af 2e       	mov	r10, r31
     aca:	f1 e0       	ldi	r31, 0x01	; 1
     acc:	bf 2e       	mov	r11, r31
     ace:	f0 2d       	mov	r31, r0
     ad0:	0f 2e       	mov	r0, r31
     ad2:	fa e5       	ldi	r31, 0x5A	; 90
     ad4:	cf 2e       	mov	r12, r31
     ad6:	f1 e0       	ldi	r31, 0x01	; 1
     ad8:	df 2e       	mov	r13, r31
     ada:	f0 2d       	mov	r31, r0
     adc:	e1 2c       	mov	r14, r1
     ade:	00 e0       	ldi	r16, 0x00	; 0
     ae0:	23 e0       	ldi	r18, 0x03	; 3
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	52 ec       	ldi	r21, 0xC2	; 194
     ae6:	61 e0       	ldi	r22, 0x01	; 1
     ae8:	70 e0       	ldi	r23, 0x00	; 0
     aea:	80 e0       	ldi	r24, 0x00	; 0
     aec:	0e 94 38 0b 	call	0x1670	; 0x1670 <serial_new_instance>
     af0:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <_com_serial_instance+0x1>
     af4:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     af8:	88 e2       	ldi	r24, 0x28	; 40
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	28 e2       	ldi	r18, 0x28	; 40
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	f9 01       	movw	r30, r18
     b02:	20 81       	ld	r18, Z
     b04:	23 6c       	ori	r18, 0xC3	; 195
     b06:	fc 01       	movw	r30, r24
     b08:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     b0a:	8b e2       	ldi	r24, 0x2B	; 43
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	2b e2       	ldi	r18, 0x2B	; 43
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	f9 01       	movw	r30, r18
     b14:	20 81       	ld	r18, Z
     b16:	28 60       	ori	r18, 0x08	; 8
     b18:	fc 01       	movw	r30, r24
     b1a:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     b1c:	8a e2       	ldi	r24, 0x2A	; 42
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	2a e2       	ldi	r18, 0x2A	; 42
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	f9 01       	movw	r30, r18
     b26:	20 81       	ld	r18, Z
     b28:	24 67       	ori	r18, 0x74	; 116
     b2a:	fc 01       	movw	r30, r24
     b2c:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     b2e:	8b e2       	ldi	r24, 0x2B	; 43
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	2b e2       	ldi	r18, 0x2B	; 43
     b34:	30 e0       	ldi	r19, 0x00	; 0
     b36:	f9 01       	movw	r30, r18
     b38:	20 81       	ld	r18, Z
     b3a:	20 64       	ori	r18, 0x40	; 64
     b3c:	fc 01       	movw	r30, r24
     b3e:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     b40:	81 e2       	ldi	r24, 0x21	; 33
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	fc 01       	movw	r30, r24
     b46:	80 81       	ld	r24, Z
     b48:	81 e2       	ldi	r24, 0x21	; 33
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	2f ef       	ldi	r18, 0xFF	; 255
     b4e:	fc 01       	movw	r30, r24
     b50:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     b52:	84 e2       	ldi	r24, 0x24	; 36
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	24 e2       	ldi	r18, 0x24	; 36
     b58:	30 e0       	ldi	r19, 0x00	; 0
     b5a:	f9 01       	movw	r30, r18
     b5c:	20 81       	ld	r18, Z
     b5e:	23 60       	ori	r18, 0x03	; 3
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     b64:	84 e2       	ldi	r24, 0x24	; 36
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	24 e2       	ldi	r18, 0x24	; 36
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	2c 63       	ori	r18, 0x3C	; 60
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
}
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	0f 91       	pop	r16
     b7c:	ef 90       	pop	r14
     b7e:	df 90       	pop	r13
     b80:	cf 90       	pop	r12
     b82:	bf 90       	pop	r11
     b84:	af 90       	pop	r10
     b86:	9f 90       	pop	r9
     b88:	8f 90       	pop	r8
     b8a:	08 95       	ret

00000b8c <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     b8c:	cf 93       	push	r28
     b8e:	df 93       	push	r29
     b90:	1f 92       	push	r1
     b92:	cd b7       	in	r28, 0x3d	; 61
     b94:	de b7       	in	r29, 0x3e	; 62
     b96:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     b98:	0f 90       	pop	r0
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	08 95       	ret

00000ba0 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     ba0:	cf 93       	push	r28
     ba2:	df 93       	push	r29
     ba4:	1f 92       	push	r1
     ba6:	cd b7       	in	r28, 0x3d	; 61
     ba8:	de b7       	in	r29, 0x3e	; 62
     baa:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     bac:	0f 90       	pop	r0
     bae:	df 91       	pop	r29
     bb0:	cf 91       	pop	r28
     bb2:	08 95       	ret

00000bb4 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
     bb8:	00 d0       	rcall	.+0      	; 0xbba <buffer_init+0x6>
     bba:	cd b7       	in	r28, 0x3d	; 61
     bbc:	de b7       	in	r29, 0x3e	; 62
     bbe:	9a 83       	std	Y+2, r25	; 0x02
     bc0:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     bc2:	89 81       	ldd	r24, Y+1	; 0x01
     bc4:	9a 81       	ldd	r25, Y+2	; 0x02
     bc6:	fc 01       	movw	r30, r24
     bc8:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	fc 01       	movw	r30, r24
     bd0:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	9a 81       	ldd	r25, Y+2	; 0x02
     bd6:	fc 01       	movw	r30, r24
     bd8:	12 8a       	std	Z+18, r1	; 0x12
}
     bda:	0f 90       	pop	r0
     bdc:	0f 90       	pop	r0
     bde:	df 91       	pop	r29
     be0:	cf 91       	pop	r28
     be2:	08 95       	ret

00000be4 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	00 d0       	rcall	.+0      	; 0xbea <buffer_get_item+0x6>
     bea:	00 d0       	rcall	.+0      	; 0xbec <buffer_get_item+0x8>
     bec:	cd b7       	in	r28, 0x3d	; 61
     bee:	de b7       	in	r29, 0x3e	; 62
     bf0:	9a 83       	std	Y+2, r25	; 0x02
     bf2:	89 83       	std	Y+1, r24	; 0x01
     bf4:	7c 83       	std	Y+4, r23	; 0x04
     bf6:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     bf8:	89 81       	ldd	r24, Y+1	; 0x01
     bfa:	9a 81       	ldd	r25, Y+2	; 0x02
     bfc:	fc 01       	movw	r30, r24
     bfe:	82 89       	ldd	r24, Z+18	; 0x12
     c00:	88 23       	and	r24, r24
     c02:	81 f1       	breq	.+96     	; 0xc64 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     c04:	89 81       	ldd	r24, Y+1	; 0x01
     c06:	9a 81       	ldd	r25, Y+2	; 0x02
     c08:	fc 01       	movw	r30, r24
     c0a:	81 89       	ldd	r24, Z+17	; 0x11
     c0c:	88 2f       	mov	r24, r24
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	29 81       	ldd	r18, Y+1	; 0x01
     c12:	3a 81       	ldd	r19, Y+2	; 0x02
     c14:	82 0f       	add	r24, r18
     c16:	93 1f       	adc	r25, r19
     c18:	fc 01       	movw	r30, r24
     c1a:	20 81       	ld	r18, Z
     c1c:	8b 81       	ldd	r24, Y+3	; 0x03
     c1e:	9c 81       	ldd	r25, Y+4	; 0x04
     c20:	fc 01       	movw	r30, r24
     c22:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     c24:	89 81       	ldd	r24, Y+1	; 0x01
     c26:	9a 81       	ldd	r25, Y+2	; 0x02
     c28:	fc 01       	movw	r30, r24
     c2a:	81 89       	ldd	r24, Z+17	; 0x11
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	01 96       	adiw	r24, 0x01	; 1
     c32:	8f 70       	andi	r24, 0x0F	; 15
     c34:	90 78       	andi	r25, 0x80	; 128
     c36:	99 23       	and	r25, r25
     c38:	24 f4       	brge	.+8      	; 0xc42 <buffer_get_item+0x5e>
     c3a:	01 97       	sbiw	r24, 0x01	; 1
     c3c:	80 6f       	ori	r24, 0xF0	; 240
     c3e:	9f 6f       	ori	r25, 0xFF	; 255
     c40:	01 96       	adiw	r24, 0x01	; 1
     c42:	28 2f       	mov	r18, r24
     c44:	89 81       	ldd	r24, Y+1	; 0x01
     c46:	9a 81       	ldd	r25, Y+2	; 0x02
     c48:	fc 01       	movw	r30, r24
     c4a:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     c4c:	89 81       	ldd	r24, Y+1	; 0x01
     c4e:	9a 81       	ldd	r25, Y+2	; 0x02
     c50:	fc 01       	movw	r30, r24
     c52:	82 89       	ldd	r24, Z+18	; 0x12
     c54:	2f ef       	ldi	r18, 0xFF	; 255
     c56:	28 0f       	add	r18, r24
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	9a 81       	ldd	r25, Y+2	; 0x02
     c5c:	fc 01       	movw	r30, r24
     c5e:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	01 c0       	rjmp	.+2      	; 0xc66 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     c64:	81 e0       	ldi	r24, 0x01	; 1
}
     c66:	0f 90       	pop	r0
     c68:	0f 90       	pop	r0
     c6a:	0f 90       	pop	r0
     c6c:	0f 90       	pop	r0
     c6e:	df 91       	pop	r29
     c70:	cf 91       	pop	r28
     c72:	08 95       	ret

00000c74 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	00 d0       	rcall	.+0      	; 0xc7a <buffer_put_item+0x6>
     c7a:	1f 92       	push	r1
     c7c:	cd b7       	in	r28, 0x3d	; 61
     c7e:	de b7       	in	r29, 0x3e	; 62
     c80:	9a 83       	std	Y+2, r25	; 0x02
     c82:	89 83       	std	Y+1, r24	; 0x01
     c84:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     c86:	89 81       	ldd	r24, Y+1	; 0x01
     c88:	9a 81       	ldd	r25, Y+2	; 0x02
     c8a:	fc 01       	movw	r30, r24
     c8c:	82 89       	ldd	r24, Z+18	; 0x12
     c8e:	80 31       	cpi	r24, 0x10	; 16
     c90:	68 f5       	brcc	.+90     	; 0xcec <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     c92:	89 81       	ldd	r24, Y+1	; 0x01
     c94:	9a 81       	ldd	r25, Y+2	; 0x02
     c96:	fc 01       	movw	r30, r24
     c98:	80 89       	ldd	r24, Z+16	; 0x10
     c9a:	88 2f       	mov	r24, r24
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	29 81       	ldd	r18, Y+1	; 0x01
     ca0:	3a 81       	ldd	r19, Y+2	; 0x02
     ca2:	82 0f       	add	r24, r18
     ca4:	93 1f       	adc	r25, r19
     ca6:	2b 81       	ldd	r18, Y+3	; 0x03
     ca8:	fc 01       	movw	r30, r24
     caa:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     cac:	89 81       	ldd	r24, Y+1	; 0x01
     cae:	9a 81       	ldd	r25, Y+2	; 0x02
     cb0:	fc 01       	movw	r30, r24
     cb2:	80 89       	ldd	r24, Z+16	; 0x10
     cb4:	88 2f       	mov	r24, r24
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	01 96       	adiw	r24, 0x01	; 1
     cba:	8f 70       	andi	r24, 0x0F	; 15
     cbc:	90 78       	andi	r25, 0x80	; 128
     cbe:	99 23       	and	r25, r25
     cc0:	24 f4       	brge	.+8      	; 0xcca <buffer_put_item+0x56>
     cc2:	01 97       	sbiw	r24, 0x01	; 1
     cc4:	80 6f       	ori	r24, 0xF0	; 240
     cc6:	9f 6f       	ori	r25, 0xFF	; 255
     cc8:	01 96       	adiw	r24, 0x01	; 1
     cca:	28 2f       	mov	r18, r24
     ccc:	89 81       	ldd	r24, Y+1	; 0x01
     cce:	9a 81       	ldd	r25, Y+2	; 0x02
     cd0:	fc 01       	movw	r30, r24
     cd2:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     cd4:	89 81       	ldd	r24, Y+1	; 0x01
     cd6:	9a 81       	ldd	r25, Y+2	; 0x02
     cd8:	fc 01       	movw	r30, r24
     cda:	82 89       	ldd	r24, Z+18	; 0x12
     cdc:	21 e0       	ldi	r18, 0x01	; 1
     cde:	28 0f       	add	r18, r24
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	9a 81       	ldd	r25, Y+2	; 0x02
     ce4:	fc 01       	movw	r30, r24
     ce6:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     ce8:	80 e0       	ldi	r24, 0x00	; 0
     cea:	01 c0       	rjmp	.+2      	; 0xcee <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     cec:	82 e0       	ldi	r24, 0x02	; 2
}
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	df 91       	pop	r29
     cf6:	cf 91       	pop	r28
     cf8:	08 95       	ret

00000cfa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     cfa:	cf 93       	push	r28
     cfc:	df 93       	push	r29
     cfe:	00 d0       	rcall	.+0      	; 0xd00 <vListInitialise+0x6>
     d00:	cd b7       	in	r28, 0x3d	; 61
     d02:	de b7       	in	r29, 0x3e	; 62
     d04:	9a 83       	std	Y+2, r25	; 0x02
     d06:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	9c 01       	movw	r18, r24
     d0e:	2d 5f       	subi	r18, 0xFD	; 253
     d10:	3f 4f       	sbci	r19, 0xFF	; 255
     d12:	89 81       	ldd	r24, Y+1	; 0x01
     d14:	9a 81       	ldd	r25, Y+2	; 0x02
     d16:	fc 01       	movw	r30, r24
     d18:	32 83       	std	Z+2, r19	; 0x02
     d1a:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     d1c:	89 81       	ldd	r24, Y+1	; 0x01
     d1e:	9a 81       	ldd	r25, Y+2	; 0x02
     d20:	2f ef       	ldi	r18, 0xFF	; 255
     d22:	3f ef       	ldi	r19, 0xFF	; 255
     d24:	fc 01       	movw	r30, r24
     d26:	34 83       	std	Z+4, r19	; 0x04
     d28:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d2a:	89 81       	ldd	r24, Y+1	; 0x01
     d2c:	9a 81       	ldd	r25, Y+2	; 0x02
     d2e:	9c 01       	movw	r18, r24
     d30:	2d 5f       	subi	r18, 0xFD	; 253
     d32:	3f 4f       	sbci	r19, 0xFF	; 255
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	9a 81       	ldd	r25, Y+2	; 0x02
     d38:	fc 01       	movw	r30, r24
     d3a:	36 83       	std	Z+6, r19	; 0x06
     d3c:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	9a 81       	ldd	r25, Y+2	; 0x02
     d42:	9c 01       	movw	r18, r24
     d44:	2d 5f       	subi	r18, 0xFD	; 253
     d46:	3f 4f       	sbci	r19, 0xFF	; 255
     d48:	89 81       	ldd	r24, Y+1	; 0x01
     d4a:	9a 81       	ldd	r25, Y+2	; 0x02
     d4c:	fc 01       	movw	r30, r24
     d4e:	30 87       	std	Z+8, r19	; 0x08
     d50:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     d52:	89 81       	ldd	r24, Y+1	; 0x01
     d54:	9a 81       	ldd	r25, Y+2	; 0x02
     d56:	fc 01       	movw	r30, r24
     d58:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	df 91       	pop	r29
     d60:	cf 91       	pop	r28
     d62:	08 95       	ret

00000d64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	00 d0       	rcall	.+0      	; 0xd6a <vListInitialiseItem+0x6>
     d6a:	cd b7       	in	r28, 0x3d	; 61
     d6c:	de b7       	in	r29, 0x3e	; 62
     d6e:	9a 83       	std	Y+2, r25	; 0x02
     d70:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     d72:	89 81       	ldd	r24, Y+1	; 0x01
     d74:	9a 81       	ldd	r25, Y+2	; 0x02
     d76:	fc 01       	movw	r30, r24
     d78:	11 86       	std	Z+9, r1	; 0x09
     d7a:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	df 91       	pop	r29
     d82:	cf 91       	pop	r28
     d84:	08 95       	ret

00000d86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	00 d0       	rcall	.+0      	; 0xd8c <vListInsertEnd+0x6>
     d8c:	00 d0       	rcall	.+0      	; 0xd8e <vListInsertEnd+0x8>
     d8e:	00 d0       	rcall	.+0      	; 0xd90 <vListInsertEnd+0xa>
     d90:	cd b7       	in	r28, 0x3d	; 61
     d92:	de b7       	in	r29, 0x3e	; 62
     d94:	9c 83       	std	Y+4, r25	; 0x04
     d96:	8b 83       	std	Y+3, r24	; 0x03
     d98:	7e 83       	std	Y+6, r23	; 0x06
     d9a:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     d9c:	8b 81       	ldd	r24, Y+3	; 0x03
     d9e:	9c 81       	ldd	r25, Y+4	; 0x04
     da0:	fc 01       	movw	r30, r24
     da2:	81 81       	ldd	r24, Z+1	; 0x01
     da4:	92 81       	ldd	r25, Z+2	; 0x02
     da6:	9a 83       	std	Y+2, r25	; 0x02
     da8:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     daa:	8d 81       	ldd	r24, Y+5	; 0x05
     dac:	9e 81       	ldd	r25, Y+6	; 0x06
     dae:	29 81       	ldd	r18, Y+1	; 0x01
     db0:	3a 81       	ldd	r19, Y+2	; 0x02
     db2:	fc 01       	movw	r30, r24
     db4:	33 83       	std	Z+3, r19	; 0x03
     db6:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     db8:	89 81       	ldd	r24, Y+1	; 0x01
     dba:	9a 81       	ldd	r25, Y+2	; 0x02
     dbc:	fc 01       	movw	r30, r24
     dbe:	24 81       	ldd	r18, Z+4	; 0x04
     dc0:	35 81       	ldd	r19, Z+5	; 0x05
     dc2:	8d 81       	ldd	r24, Y+5	; 0x05
     dc4:	9e 81       	ldd	r25, Y+6	; 0x06
     dc6:	fc 01       	movw	r30, r24
     dc8:	35 83       	std	Z+5, r19	; 0x05
     dca:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     dcc:	89 81       	ldd	r24, Y+1	; 0x01
     dce:	9a 81       	ldd	r25, Y+2	; 0x02
     dd0:	fc 01       	movw	r30, r24
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	2d 81       	ldd	r18, Y+5	; 0x05
     dd8:	3e 81       	ldd	r19, Y+6	; 0x06
     dda:	fc 01       	movw	r30, r24
     ddc:	33 83       	std	Z+3, r19	; 0x03
     dde:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	2d 81       	ldd	r18, Y+5	; 0x05
     de6:	3e 81       	ldd	r19, Y+6	; 0x06
     de8:	fc 01       	movw	r30, r24
     dea:	35 83       	std	Z+5, r19	; 0x05
     dec:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     dee:	8d 81       	ldd	r24, Y+5	; 0x05
     df0:	9e 81       	ldd	r25, Y+6	; 0x06
     df2:	2b 81       	ldd	r18, Y+3	; 0x03
     df4:	3c 81       	ldd	r19, Y+4	; 0x04
     df6:	fc 01       	movw	r30, r24
     df8:	31 87       	std	Z+9, r19	; 0x09
     dfa:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	9c 81       	ldd	r25, Y+4	; 0x04
     e00:	fc 01       	movw	r30, r24
     e02:	80 81       	ld	r24, Z
     e04:	21 e0       	ldi	r18, 0x01	; 1
     e06:	28 0f       	add	r18, r24
     e08:	8b 81       	ldd	r24, Y+3	; 0x03
     e0a:	9c 81       	ldd	r25, Y+4	; 0x04
     e0c:	fc 01       	movw	r30, r24
     e0e:	20 83       	st	Z, r18
}
     e10:	26 96       	adiw	r28, 0x06	; 6
     e12:	0f b6       	in	r0, 0x3f	; 63
     e14:	f8 94       	cli
     e16:	de bf       	out	0x3e, r29	; 62
     e18:	0f be       	out	0x3f, r0	; 63
     e1a:	cd bf       	out	0x3d, r28	; 61
     e1c:	df 91       	pop	r29
     e1e:	cf 91       	pop	r28
     e20:	08 95       	ret

00000e22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e22:	cf 93       	push	r28
     e24:	df 93       	push	r29
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	28 97       	sbiw	r28, 0x08	; 8
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	9e 83       	std	Y+6, r25	; 0x06
     e38:	8d 83       	std	Y+5, r24	; 0x05
     e3a:	78 87       	std	Y+8, r23	; 0x08
     e3c:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     e3e:	8f 81       	ldd	r24, Y+7	; 0x07
     e40:	98 85       	ldd	r25, Y+8	; 0x08
     e42:	fc 01       	movw	r30, r24
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	9c 83       	std	Y+4, r25	; 0x04
     e4a:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     e4c:	8b 81       	ldd	r24, Y+3	; 0x03
     e4e:	9c 81       	ldd	r25, Y+4	; 0x04
     e50:	01 96       	adiw	r24, 0x01	; 1
     e52:	41 f4       	brne	.+16     	; 0xe64 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     e54:	8d 81       	ldd	r24, Y+5	; 0x05
     e56:	9e 81       	ldd	r25, Y+6	; 0x06
     e58:	fc 01       	movw	r30, r24
     e5a:	87 81       	ldd	r24, Z+7	; 0x07
     e5c:	90 85       	ldd	r25, Z+8	; 0x08
     e5e:	9a 83       	std	Y+2, r25	; 0x02
     e60:	89 83       	std	Y+1, r24	; 0x01
     e62:	1a c0       	rjmp	.+52     	; 0xe98 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e64:	8d 81       	ldd	r24, Y+5	; 0x05
     e66:	9e 81       	ldd	r25, Y+6	; 0x06
     e68:	03 96       	adiw	r24, 0x03	; 3
     e6a:	9a 83       	std	Y+2, r25	; 0x02
     e6c:	89 83       	std	Y+1, r24	; 0x01
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <vListInsert+0x5c>
     e70:	89 81       	ldd	r24, Y+1	; 0x01
     e72:	9a 81       	ldd	r25, Y+2	; 0x02
     e74:	fc 01       	movw	r30, r24
     e76:	82 81       	ldd	r24, Z+2	; 0x02
     e78:	93 81       	ldd	r25, Z+3	; 0x03
     e7a:	9a 83       	std	Y+2, r25	; 0x02
     e7c:	89 83       	std	Y+1, r24	; 0x01
     e7e:	89 81       	ldd	r24, Y+1	; 0x01
     e80:	9a 81       	ldd	r25, Y+2	; 0x02
     e82:	fc 01       	movw	r30, r24
     e84:	82 81       	ldd	r24, Z+2	; 0x02
     e86:	93 81       	ldd	r25, Z+3	; 0x03
     e88:	fc 01       	movw	r30, r24
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	8b 81       	ldd	r24, Y+3	; 0x03
     e90:	9c 81       	ldd	r25, Y+4	; 0x04
     e92:	82 17       	cp	r24, r18
     e94:	93 07       	cpc	r25, r19
     e96:	60 f7       	brcc	.-40     	; 0xe70 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     e98:	89 81       	ldd	r24, Y+1	; 0x01
     e9a:	9a 81       	ldd	r25, Y+2	; 0x02
     e9c:	fc 01       	movw	r30, r24
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	33 81       	ldd	r19, Z+3	; 0x03
     ea2:	8f 81       	ldd	r24, Y+7	; 0x07
     ea4:	98 85       	ldd	r25, Y+8	; 0x08
     ea6:	fc 01       	movw	r30, r24
     ea8:	33 83       	std	Z+3, r19	; 0x03
     eaa:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     eac:	8f 81       	ldd	r24, Y+7	; 0x07
     eae:	98 85       	ldd	r25, Y+8	; 0x08
     eb0:	fc 01       	movw	r30, r24
     eb2:	82 81       	ldd	r24, Z+2	; 0x02
     eb4:	93 81       	ldd	r25, Z+3	; 0x03
     eb6:	2f 81       	ldd	r18, Y+7	; 0x07
     eb8:	38 85       	ldd	r19, Y+8	; 0x08
     eba:	fc 01       	movw	r30, r24
     ebc:	35 83       	std	Z+5, r19	; 0x05
     ebe:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     ec0:	8f 81       	ldd	r24, Y+7	; 0x07
     ec2:	98 85       	ldd	r25, Y+8	; 0x08
     ec4:	29 81       	ldd	r18, Y+1	; 0x01
     ec6:	3a 81       	ldd	r19, Y+2	; 0x02
     ec8:	fc 01       	movw	r30, r24
     eca:	35 83       	std	Z+5, r19	; 0x05
     ecc:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	9a 81       	ldd	r25, Y+2	; 0x02
     ed2:	2f 81       	ldd	r18, Y+7	; 0x07
     ed4:	38 85       	ldd	r19, Y+8	; 0x08
     ed6:	fc 01       	movw	r30, r24
     ed8:	33 83       	std	Z+3, r19	; 0x03
     eda:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     edc:	8f 81       	ldd	r24, Y+7	; 0x07
     ede:	98 85       	ldd	r25, Y+8	; 0x08
     ee0:	2d 81       	ldd	r18, Y+5	; 0x05
     ee2:	3e 81       	ldd	r19, Y+6	; 0x06
     ee4:	fc 01       	movw	r30, r24
     ee6:	31 87       	std	Z+9, r19	; 0x09
     ee8:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	fc 01       	movw	r30, r24
     ef0:	80 81       	ld	r24, Z
     ef2:	21 e0       	ldi	r18, 0x01	; 1
     ef4:	28 0f       	add	r18, r24
     ef6:	8d 81       	ldd	r24, Y+5	; 0x05
     ef8:	9e 81       	ldd	r25, Y+6	; 0x06
     efa:	fc 01       	movw	r30, r24
     efc:	20 83       	st	Z, r18
}
     efe:	28 96       	adiw	r28, 0x08	; 8
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	df 91       	pop	r29
     f0c:	cf 91       	pop	r28
     f0e:	08 95       	ret

00000f10 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     f10:	cf 93       	push	r28
     f12:	df 93       	push	r29
     f14:	00 d0       	rcall	.+0      	; 0xf16 <uxListRemove+0x6>
     f16:	00 d0       	rcall	.+0      	; 0xf18 <uxListRemove+0x8>
     f18:	cd b7       	in	r28, 0x3d	; 61
     f1a:	de b7       	in	r29, 0x3e	; 62
     f1c:	9c 83       	std	Y+4, r25	; 0x04
     f1e:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
     f20:	8b 81       	ldd	r24, Y+3	; 0x03
     f22:	9c 81       	ldd	r25, Y+4	; 0x04
     f24:	fc 01       	movw	r30, r24
     f26:	80 85       	ldd	r24, Z+8	; 0x08
     f28:	91 85       	ldd	r25, Z+9	; 0x09
     f2a:	9a 83       	std	Y+2, r25	; 0x02
     f2c:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     f2e:	8b 81       	ldd	r24, Y+3	; 0x03
     f30:	9c 81       	ldd	r25, Y+4	; 0x04
     f32:	fc 01       	movw	r30, r24
     f34:	82 81       	ldd	r24, Z+2	; 0x02
     f36:	93 81       	ldd	r25, Z+3	; 0x03
     f38:	2b 81       	ldd	r18, Y+3	; 0x03
     f3a:	3c 81       	ldd	r19, Y+4	; 0x04
     f3c:	f9 01       	movw	r30, r18
     f3e:	24 81       	ldd	r18, Z+4	; 0x04
     f40:	35 81       	ldd	r19, Z+5	; 0x05
     f42:	fc 01       	movw	r30, r24
     f44:	35 83       	std	Z+5, r19	; 0x05
     f46:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     f48:	8b 81       	ldd	r24, Y+3	; 0x03
     f4a:	9c 81       	ldd	r25, Y+4	; 0x04
     f4c:	fc 01       	movw	r30, r24
     f4e:	84 81       	ldd	r24, Z+4	; 0x04
     f50:	95 81       	ldd	r25, Z+5	; 0x05
     f52:	2b 81       	ldd	r18, Y+3	; 0x03
     f54:	3c 81       	ldd	r19, Y+4	; 0x04
     f56:	f9 01       	movw	r30, r18
     f58:	22 81       	ldd	r18, Z+2	; 0x02
     f5a:	33 81       	ldd	r19, Z+3	; 0x03
     f5c:	fc 01       	movw	r30, r24
     f5e:	33 83       	std	Z+3, r19	; 0x03
     f60:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	21 81       	ldd	r18, Z+1	; 0x01
     f6a:	32 81       	ldd	r19, Z+2	; 0x02
     f6c:	8b 81       	ldd	r24, Y+3	; 0x03
     f6e:	9c 81       	ldd	r25, Y+4	; 0x04
     f70:	28 17       	cp	r18, r24
     f72:	39 07       	cpc	r19, r25
     f74:	51 f4       	brne	.+20     	; 0xf8a <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
     f76:	8b 81       	ldd	r24, Y+3	; 0x03
     f78:	9c 81       	ldd	r25, Y+4	; 0x04
     f7a:	fc 01       	movw	r30, r24
     f7c:	24 81       	ldd	r18, Z+4	; 0x04
     f7e:	35 81       	ldd	r19, Z+5	; 0x05
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	9a 81       	ldd	r25, Y+2	; 0x02
     f84:	fc 01       	movw	r30, r24
     f86:	32 83       	std	Z+2, r19	; 0x02
     f88:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
     f8a:	8b 81       	ldd	r24, Y+3	; 0x03
     f8c:	9c 81       	ldd	r25, Y+4	; 0x04
     f8e:	fc 01       	movw	r30, r24
     f90:	11 86       	std	Z+9, r1	; 0x09
     f92:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	9a 81       	ldd	r25, Y+2	; 0x02
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	2f ef       	ldi	r18, 0xFF	; 255
     f9e:	28 0f       	add	r18, r24
     fa0:	89 81       	ldd	r24, Y+1	; 0x01
     fa2:	9a 81       	ldd	r25, Y+2	; 0x02
     fa4:	fc 01       	movw	r30, r24
     fa6:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	9a 81       	ldd	r25, Y+2	; 0x02
     fac:	fc 01       	movw	r30, r24
     fae:	80 81       	ld	r24, Z
}
     fb0:	0f 90       	pop	r0
     fb2:	0f 90       	pop	r0
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	df 91       	pop	r29
     fba:	cf 91       	pop	r28
     fbc:	08 95       	ret

00000fbe <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	cd b7       	in	r28, 0x3d	; 61
     fc4:	de b7       	in	r29, 0x3e	; 62
     fc6:	28 97       	sbiw	r28, 0x08	; 8
     fc8:	0f b6       	in	r0, 0x3f	; 63
     fca:	f8 94       	cli
     fcc:	de bf       	out	0x3e, r29	; 62
     fce:	0f be       	out	0x3f, r0	; 63
     fd0:	cd bf       	out	0x3d, r28	; 61
     fd2:	9c 83       	std	Y+4, r25	; 0x04
     fd4:	8b 83       	std	Y+3, r24	; 0x03
     fd6:	7e 83       	std	Y+6, r23	; 0x06
     fd8:	6d 83       	std	Y+5, r22	; 0x05
     fda:	58 87       	std	Y+8, r21	; 0x08
     fdc:	4f 83       	std	Y+7, r20	; 0x07
     fde:	8b 81       	ldd	r24, Y+3	; 0x03
     fe0:	9c 81       	ldd	r25, Y+4	; 0x04
     fe2:	21 e1       	ldi	r18, 0x11	; 17
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
     fe8:	8b 81       	ldd	r24, Y+3	; 0x03
     fea:	9c 81       	ldd	r25, Y+4	; 0x04
     fec:	01 97       	sbiw	r24, 0x01	; 1
     fee:	9c 83       	std	Y+4, r25	; 0x04
     ff0:	8b 83       	std	Y+3, r24	; 0x03
     ff2:	8b 81       	ldd	r24, Y+3	; 0x03
     ff4:	9c 81       	ldd	r25, Y+4	; 0x04
     ff6:	22 e2       	ldi	r18, 0x22	; 34
     ff8:	fc 01       	movw	r30, r24
     ffa:	20 83       	st	Z, r18
     ffc:	8b 81       	ldd	r24, Y+3	; 0x03
     ffe:	9c 81       	ldd	r25, Y+4	; 0x04
    1000:	01 97       	sbiw	r24, 0x01	; 1
    1002:	9c 83       	std	Y+4, r25	; 0x04
    1004:	8b 83       	std	Y+3, r24	; 0x03
    1006:	8b 81       	ldd	r24, Y+3	; 0x03
    1008:	9c 81       	ldd	r25, Y+4	; 0x04
    100a:	23 e3       	ldi	r18, 0x33	; 51
    100c:	fc 01       	movw	r30, r24
    100e:	20 83       	st	Z, r18
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	9c 81       	ldd	r25, Y+4	; 0x04
    1014:	01 97       	sbiw	r24, 0x01	; 1
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	8b 83       	std	Y+3, r24	; 0x03
    101a:	8d 81       	ldd	r24, Y+5	; 0x05
    101c:	9e 81       	ldd	r25, Y+6	; 0x06
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	29 81       	ldd	r18, Y+1	; 0x01
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	9c 81       	ldd	r25, Y+4	; 0x04
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
    102c:	8b 81       	ldd	r24, Y+3	; 0x03
    102e:	9c 81       	ldd	r25, Y+4	; 0x04
    1030:	01 97       	sbiw	r24, 0x01	; 1
    1032:	9c 83       	std	Y+4, r25	; 0x04
    1034:	8b 83       	std	Y+3, r24	; 0x03
    1036:	89 81       	ldd	r24, Y+1	; 0x01
    1038:	9a 81       	ldd	r25, Y+2	; 0x02
    103a:	89 2f       	mov	r24, r25
    103c:	99 27       	eor	r25, r25
    103e:	9a 83       	std	Y+2, r25	; 0x02
    1040:	89 83       	std	Y+1, r24	; 0x01
    1042:	29 81       	ldd	r18, Y+1	; 0x01
    1044:	8b 81       	ldd	r24, Y+3	; 0x03
    1046:	9c 81       	ldd	r25, Y+4	; 0x04
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
    104c:	8b 81       	ldd	r24, Y+3	; 0x03
    104e:	9c 81       	ldd	r25, Y+4	; 0x04
    1050:	01 97       	sbiw	r24, 0x01	; 1
    1052:	9c 83       	std	Y+4, r25	; 0x04
    1054:	8b 83       	std	Y+3, r24	; 0x03
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	9c 81       	ldd	r25, Y+4	; 0x04
    105a:	fc 01       	movw	r30, r24
    105c:	10 82       	st	Z, r1
    105e:	8b 81       	ldd	r24, Y+3	; 0x03
    1060:	9c 81       	ldd	r25, Y+4	; 0x04
    1062:	01 97       	sbiw	r24, 0x01	; 1
    1064:	9c 83       	std	Y+4, r25	; 0x04
    1066:	8b 83       	std	Y+3, r24	; 0x03
    1068:	8b 81       	ldd	r24, Y+3	; 0x03
    106a:	9c 81       	ldd	r25, Y+4	; 0x04
    106c:	20 e8       	ldi	r18, 0x80	; 128
    106e:	fc 01       	movw	r30, r24
    1070:	20 83       	st	Z, r18
    1072:	8b 81       	ldd	r24, Y+3	; 0x03
    1074:	9c 81       	ldd	r25, Y+4	; 0x04
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	9c 83       	std	Y+4, r25	; 0x04
    107a:	8b 83       	std	Y+3, r24	; 0x03
    107c:	8b 81       	ldd	r24, Y+3	; 0x03
    107e:	9c 81       	ldd	r25, Y+4	; 0x04
    1080:	fc 01       	movw	r30, r24
    1082:	10 82       	st	Z, r1
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	9c 81       	ldd	r25, Y+4	; 0x04
    1088:	01 97       	sbiw	r24, 0x01	; 1
    108a:	9c 83       	std	Y+4, r25	; 0x04
    108c:	8b 83       	std	Y+3, r24	; 0x03
    108e:	8b 81       	ldd	r24, Y+3	; 0x03
    1090:	9c 81       	ldd	r25, Y+4	; 0x04
    1092:	22 e0       	ldi	r18, 0x02	; 2
    1094:	fc 01       	movw	r30, r24
    1096:	20 83       	st	Z, r18
    1098:	8b 81       	ldd	r24, Y+3	; 0x03
    109a:	9c 81       	ldd	r25, Y+4	; 0x04
    109c:	01 97       	sbiw	r24, 0x01	; 1
    109e:	9c 83       	std	Y+4, r25	; 0x04
    10a0:	8b 83       	std	Y+3, r24	; 0x03
    10a2:	8b 81       	ldd	r24, Y+3	; 0x03
    10a4:	9c 81       	ldd	r25, Y+4	; 0x04
    10a6:	23 e0       	ldi	r18, 0x03	; 3
    10a8:	fc 01       	movw	r30, r24
    10aa:	20 83       	st	Z, r18
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	9c 83       	std	Y+4, r25	; 0x04
    10b4:	8b 83       	std	Y+3, r24	; 0x03
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ba:	24 e0       	ldi	r18, 0x04	; 4
    10bc:	fc 01       	movw	r30, r24
    10be:	20 83       	st	Z, r18
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	01 97       	sbiw	r24, 0x01	; 1
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	8b 81       	ldd	r24, Y+3	; 0x03
    10cc:	9c 81       	ldd	r25, Y+4	; 0x04
    10ce:	25 e0       	ldi	r18, 0x05	; 5
    10d0:	fc 01       	movw	r30, r24
    10d2:	20 83       	st	Z, r18
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	9c 83       	std	Y+4, r25	; 0x04
    10dc:	8b 83       	std	Y+3, r24	; 0x03
    10de:	8b 81       	ldd	r24, Y+3	; 0x03
    10e0:	9c 81       	ldd	r25, Y+4	; 0x04
    10e2:	26 e0       	ldi	r18, 0x06	; 6
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
    10f2:	8b 81       	ldd	r24, Y+3	; 0x03
    10f4:	9c 81       	ldd	r25, Y+4	; 0x04
    10f6:	27 e0       	ldi	r18, 0x07	; 7
    10f8:	fc 01       	movw	r30, r24
    10fa:	20 83       	st	Z, r18
    10fc:	8b 81       	ldd	r24, Y+3	; 0x03
    10fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1100:	01 97       	sbiw	r24, 0x01	; 1
    1102:	9c 83       	std	Y+4, r25	; 0x04
    1104:	8b 83       	std	Y+3, r24	; 0x03
    1106:	8b 81       	ldd	r24, Y+3	; 0x03
    1108:	9c 81       	ldd	r25, Y+4	; 0x04
    110a:	28 e0       	ldi	r18, 0x08	; 8
    110c:	fc 01       	movw	r30, r24
    110e:	20 83       	st	Z, r18
    1110:	8b 81       	ldd	r24, Y+3	; 0x03
    1112:	9c 81       	ldd	r25, Y+4	; 0x04
    1114:	01 97       	sbiw	r24, 0x01	; 1
    1116:	9c 83       	std	Y+4, r25	; 0x04
    1118:	8b 83       	std	Y+3, r24	; 0x03
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	9c 81       	ldd	r25, Y+4	; 0x04
    111e:	29 e0       	ldi	r18, 0x09	; 9
    1120:	fc 01       	movw	r30, r24
    1122:	20 83       	st	Z, r18
    1124:	8b 81       	ldd	r24, Y+3	; 0x03
    1126:	9c 81       	ldd	r25, Y+4	; 0x04
    1128:	01 97       	sbiw	r24, 0x01	; 1
    112a:	9c 83       	std	Y+4, r25	; 0x04
    112c:	8b 83       	std	Y+3, r24	; 0x03
    112e:	8b 81       	ldd	r24, Y+3	; 0x03
    1130:	9c 81       	ldd	r25, Y+4	; 0x04
    1132:	20 e1       	ldi	r18, 0x10	; 16
    1134:	fc 01       	movw	r30, r24
    1136:	20 83       	st	Z, r18
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	01 97       	sbiw	r24, 0x01	; 1
    113e:	9c 83       	std	Y+4, r25	; 0x04
    1140:	8b 83       	std	Y+3, r24	; 0x03
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	9c 81       	ldd	r25, Y+4	; 0x04
    1146:	21 e1       	ldi	r18, 0x11	; 17
    1148:	fc 01       	movw	r30, r24
    114a:	20 83       	st	Z, r18
    114c:	8b 81       	ldd	r24, Y+3	; 0x03
    114e:	9c 81       	ldd	r25, Y+4	; 0x04
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
    1156:	8b 81       	ldd	r24, Y+3	; 0x03
    1158:	9c 81       	ldd	r25, Y+4	; 0x04
    115a:	22 e1       	ldi	r18, 0x12	; 18
    115c:	fc 01       	movw	r30, r24
    115e:	20 83       	st	Z, r18
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	9c 81       	ldd	r25, Y+4	; 0x04
    1164:	01 97       	sbiw	r24, 0x01	; 1
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	23 e1       	ldi	r18, 0x13	; 19
    1170:	fc 01       	movw	r30, r24
    1172:	20 83       	st	Z, r18
    1174:	8b 81       	ldd	r24, Y+3	; 0x03
    1176:	9c 81       	ldd	r25, Y+4	; 0x04
    1178:	01 97       	sbiw	r24, 0x01	; 1
    117a:	9c 83       	std	Y+4, r25	; 0x04
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	24 e1       	ldi	r18, 0x14	; 20
    1184:	fc 01       	movw	r30, r24
    1186:	20 83       	st	Z, r18
    1188:	8b 81       	ldd	r24, Y+3	; 0x03
    118a:	9c 81       	ldd	r25, Y+4	; 0x04
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	9c 83       	std	Y+4, r25	; 0x04
    1190:	8b 83       	std	Y+3, r24	; 0x03
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	25 e1       	ldi	r18, 0x15	; 21
    1198:	fc 01       	movw	r30, r24
    119a:	20 83       	st	Z, r18
    119c:	8b 81       	ldd	r24, Y+3	; 0x03
    119e:	9c 81       	ldd	r25, Y+4	; 0x04
    11a0:	01 97       	sbiw	r24, 0x01	; 1
    11a2:	9c 83       	std	Y+4, r25	; 0x04
    11a4:	8b 83       	std	Y+3, r24	; 0x03
    11a6:	8b 81       	ldd	r24, Y+3	; 0x03
    11a8:	9c 81       	ldd	r25, Y+4	; 0x04
    11aa:	26 e1       	ldi	r18, 0x16	; 22
    11ac:	fc 01       	movw	r30, r24
    11ae:	20 83       	st	Z, r18
    11b0:	8b 81       	ldd	r24, Y+3	; 0x03
    11b2:	9c 81       	ldd	r25, Y+4	; 0x04
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9c 83       	std	Y+4, r25	; 0x04
    11b8:	8b 83       	std	Y+3, r24	; 0x03
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	27 e1       	ldi	r18, 0x17	; 23
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 83       	st	Z, r18
    11c4:	8b 81       	ldd	r24, Y+3	; 0x03
    11c6:	9c 81       	ldd	r25, Y+4	; 0x04
    11c8:	01 97       	sbiw	r24, 0x01	; 1
    11ca:	9c 83       	std	Y+4, r25	; 0x04
    11cc:	8b 83       	std	Y+3, r24	; 0x03
    11ce:	8b 81       	ldd	r24, Y+3	; 0x03
    11d0:	9c 81       	ldd	r25, Y+4	; 0x04
    11d2:	28 e1       	ldi	r18, 0x18	; 24
    11d4:	fc 01       	movw	r30, r24
    11d6:	20 83       	st	Z, r18
    11d8:	8b 81       	ldd	r24, Y+3	; 0x03
    11da:	9c 81       	ldd	r25, Y+4	; 0x04
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	8b 83       	std	Y+3, r24	; 0x03
    11e2:	8b 81       	ldd	r24, Y+3	; 0x03
    11e4:	9c 81       	ldd	r25, Y+4	; 0x04
    11e6:	29 e1       	ldi	r18, 0x19	; 25
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 83       	st	Z, r18
    11ec:	8b 81       	ldd	r24, Y+3	; 0x03
    11ee:	9c 81       	ldd	r25, Y+4	; 0x04
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	9c 83       	std	Y+4, r25	; 0x04
    11f4:	8b 83       	std	Y+3, r24	; 0x03
    11f6:	8b 81       	ldd	r24, Y+3	; 0x03
    11f8:	9c 81       	ldd	r25, Y+4	; 0x04
    11fa:	20 e2       	ldi	r18, 0x20	; 32
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	8b 81       	ldd	r24, Y+3	; 0x03
    1202:	9c 81       	ldd	r25, Y+4	; 0x04
    1204:	01 97       	sbiw	r24, 0x01	; 1
    1206:	9c 83       	std	Y+4, r25	; 0x04
    1208:	8b 83       	std	Y+3, r24	; 0x03
    120a:	8b 81       	ldd	r24, Y+3	; 0x03
    120c:	9c 81       	ldd	r25, Y+4	; 0x04
    120e:	21 e2       	ldi	r18, 0x21	; 33
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	9c 81       	ldd	r25, Y+4	; 0x04
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9c 83       	std	Y+4, r25	; 0x04
    121c:	8b 83       	std	Y+3, r24	; 0x03
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	9c 81       	ldd	r25, Y+4	; 0x04
    1222:	22 e2       	ldi	r18, 0x22	; 34
    1224:	fc 01       	movw	r30, r24
    1226:	20 83       	st	Z, r18
    1228:	8b 81       	ldd	r24, Y+3	; 0x03
    122a:	9c 81       	ldd	r25, Y+4	; 0x04
    122c:	01 97       	sbiw	r24, 0x01	; 1
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	23 e2       	ldi	r18, 0x23	; 35
    1238:	fc 01       	movw	r30, r24
    123a:	20 83       	st	Z, r18
    123c:	8b 81       	ldd	r24, Y+3	; 0x03
    123e:	9c 81       	ldd	r25, Y+4	; 0x04
    1240:	01 97       	sbiw	r24, 0x01	; 1
    1242:	9c 83       	std	Y+4, r25	; 0x04
    1244:	8b 83       	std	Y+3, r24	; 0x03
    1246:	8f 81       	ldd	r24, Y+7	; 0x07
    1248:	98 85       	ldd	r25, Y+8	; 0x08
    124a:	9a 83       	std	Y+2, r25	; 0x02
    124c:	89 83       	std	Y+1, r24	; 0x01
    124e:	29 81       	ldd	r18, Y+1	; 0x01
    1250:	8b 81       	ldd	r24, Y+3	; 0x03
    1252:	9c 81       	ldd	r25, Y+4	; 0x04
    1254:	fc 01       	movw	r30, r24
    1256:	20 83       	st	Z, r18
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	9c 81       	ldd	r25, Y+4	; 0x04
    125c:	01 97       	sbiw	r24, 0x01	; 1
    125e:	9c 83       	std	Y+4, r25	; 0x04
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	89 81       	ldd	r24, Y+1	; 0x01
    1264:	9a 81       	ldd	r25, Y+2	; 0x02
    1266:	89 2f       	mov	r24, r25
    1268:	99 27       	eor	r25, r25
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	29 81       	ldd	r18, Y+1	; 0x01
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	fc 01       	movw	r30, r24
    1276:	20 83       	st	Z, r18
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	26 e2       	ldi	r18, 0x26	; 38
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	27 e2       	ldi	r18, 0x27	; 39
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
    12a0:	8b 81       	ldd	r24, Y+3	; 0x03
    12a2:	9c 81       	ldd	r25, Y+4	; 0x04
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9c 83       	std	Y+4, r25	; 0x04
    12a8:	8b 83       	std	Y+3, r24	; 0x03
    12aa:	8b 81       	ldd	r24, Y+3	; 0x03
    12ac:	9c 81       	ldd	r25, Y+4	; 0x04
    12ae:	28 e2       	ldi	r18, 0x28	; 40
    12b0:	fc 01       	movw	r30, r24
    12b2:	20 83       	st	Z, r18
    12b4:	8b 81       	ldd	r24, Y+3	; 0x03
    12b6:	9c 81       	ldd	r25, Y+4	; 0x04
    12b8:	01 97       	sbiw	r24, 0x01	; 1
    12ba:	9c 83       	std	Y+4, r25	; 0x04
    12bc:	8b 83       	std	Y+3, r24	; 0x03
    12be:	8b 81       	ldd	r24, Y+3	; 0x03
    12c0:	9c 81       	ldd	r25, Y+4	; 0x04
    12c2:	29 e2       	ldi	r18, 0x29	; 41
    12c4:	fc 01       	movw	r30, r24
    12c6:	20 83       	st	Z, r18
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	9c 81       	ldd	r25, Y+4	; 0x04
    12cc:	01 97       	sbiw	r24, 0x01	; 1
    12ce:	9c 83       	std	Y+4, r25	; 0x04
    12d0:	8b 83       	std	Y+3, r24	; 0x03
    12d2:	8b 81       	ldd	r24, Y+3	; 0x03
    12d4:	9c 81       	ldd	r25, Y+4	; 0x04
    12d6:	20 e3       	ldi	r18, 0x30	; 48
    12d8:	fc 01       	movw	r30, r24
    12da:	20 83       	st	Z, r18
    12dc:	8b 81       	ldd	r24, Y+3	; 0x03
    12de:	9c 81       	ldd	r25, Y+4	; 0x04
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
    12e6:	8b 81       	ldd	r24, Y+3	; 0x03
    12e8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ea:	21 e3       	ldi	r18, 0x31	; 49
    12ec:	fc 01       	movw	r30, r24
    12ee:	20 83       	st	Z, r18
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	9c 81       	ldd	r25, Y+4	; 0x04
    12f4:	01 97       	sbiw	r24, 0x01	; 1
    12f6:	9c 83       	std	Y+4, r25	; 0x04
    12f8:	8b 83       	std	Y+3, r24	; 0x03
    12fa:	8b 81       	ldd	r24, Y+3	; 0x03
    12fc:	9c 81       	ldd	r25, Y+4	; 0x04
    12fe:	28 96       	adiw	r28, 0x08	; 8
    1300:	0f b6       	in	r0, 0x3f	; 63
    1302:	f8 94       	cli
    1304:	de bf       	out	0x3e, r29	; 62
    1306:	0f be       	out	0x3f, r0	; 63
    1308:	cd bf       	out	0x3d, r28	; 61
    130a:	df 91       	pop	r29
    130c:	cf 91       	pop	r28
    130e:	08 95       	ret

00001310 <xPortStartScheduler>:
    1310:	cf 93       	push	r28
    1312:	df 93       	push	r29
    1314:	cd b7       	in	r28, 0x3d	; 61
    1316:	de b7       	in	r29, 0x3e	; 62
    1318:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <prvSetupTimerInterrupt>
    131c:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1320:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1324:	cd 91       	ld	r28, X+
    1326:	cd bf       	out	0x3d, r28	; 61
    1328:	dd 91       	ld	r29, X+
    132a:	de bf       	out	0x3e, r29	; 62
    132c:	ff 91       	pop	r31
    132e:	ef 91       	pop	r30
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	bf 91       	pop	r27
    1336:	af 91       	pop	r26
    1338:	9f 91       	pop	r25
    133a:	8f 91       	pop	r24
    133c:	7f 91       	pop	r23
    133e:	6f 91       	pop	r22
    1340:	5f 91       	pop	r21
    1342:	4f 91       	pop	r20
    1344:	3f 91       	pop	r19
    1346:	2f 91       	pop	r18
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	7f 90       	pop	r7
    135e:	6f 90       	pop	r6
    1360:	5f 90       	pop	r5
    1362:	4f 90       	pop	r4
    1364:	3f 90       	pop	r3
    1366:	2f 90       	pop	r2
    1368:	1f 90       	pop	r1
    136a:	0f 90       	pop	r0
    136c:	0f be       	out	0x3f, r0	; 63
    136e:	0f 90       	pop	r0
    1370:	08 95       	ret
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	df 91       	pop	r29
    1376:	cf 91       	pop	r28
    1378:	08 95       	ret

0000137a <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    137a:	0f 92       	push	r0
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	0f 92       	push	r0
    1382:	1f 92       	push	r1
    1384:	11 24       	eor	r1, r1
    1386:	2f 92       	push	r2
    1388:	3f 92       	push	r3
    138a:	4f 92       	push	r4
    138c:	5f 92       	push	r5
    138e:	6f 92       	push	r6
    1390:	7f 92       	push	r7
    1392:	8f 92       	push	r8
    1394:	9f 92       	push	r9
    1396:	af 92       	push	r10
    1398:	bf 92       	push	r11
    139a:	cf 92       	push	r12
    139c:	df 92       	push	r13
    139e:	ef 92       	push	r14
    13a0:	ff 92       	push	r15
    13a2:	0f 93       	push	r16
    13a4:	1f 93       	push	r17
    13a6:	2f 93       	push	r18
    13a8:	3f 93       	push	r19
    13aa:	4f 93       	push	r20
    13ac:	5f 93       	push	r21
    13ae:	6f 93       	push	r22
    13b0:	7f 93       	push	r23
    13b2:	8f 93       	push	r24
    13b4:	9f 93       	push	r25
    13b6:	af 93       	push	r26
    13b8:	bf 93       	push	r27
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ef 93       	push	r30
    13c0:	ff 93       	push	r31
    13c2:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    13c6:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    13ca:	0d b6       	in	r0, 0x3d	; 61
    13cc:	0d 92       	st	X+, r0
    13ce:	0e b6       	in	r0, 0x3e	; 62
    13d0:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    13d2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    13d6:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    13da:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    13de:	cd 91       	ld	r28, X+
    13e0:	cd bf       	out	0x3d, r28	; 61
    13e2:	dd 91       	ld	r29, X+
    13e4:	de bf       	out	0x3e, r29	; 62
    13e6:	ff 91       	pop	r31
    13e8:	ef 91       	pop	r30
    13ea:	df 91       	pop	r29
    13ec:	cf 91       	pop	r28
    13ee:	bf 91       	pop	r27
    13f0:	af 91       	pop	r26
    13f2:	9f 91       	pop	r25
    13f4:	8f 91       	pop	r24
    13f6:	7f 91       	pop	r23
    13f8:	6f 91       	pop	r22
    13fa:	5f 91       	pop	r21
    13fc:	4f 91       	pop	r20
    13fe:	3f 91       	pop	r19
    1400:	2f 91       	pop	r18
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	df 90       	pop	r13
    140c:	cf 90       	pop	r12
    140e:	bf 90       	pop	r11
    1410:	af 90       	pop	r10
    1412:	9f 90       	pop	r9
    1414:	8f 90       	pop	r8
    1416:	7f 90       	pop	r7
    1418:	6f 90       	pop	r6
    141a:	5f 90       	pop	r5
    141c:	4f 90       	pop	r4
    141e:	3f 90       	pop	r3
    1420:	2f 90       	pop	r2
    1422:	1f 90       	pop	r1
    1424:	0f 90       	pop	r0
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	0f 90       	pop	r0

	asm volatile ( "ret" );
    142a:	08 95       	ret

0000142c <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    142c:	0f 92       	push	r0
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	0f 92       	push	r0
    1434:	1f 92       	push	r1
    1436:	11 24       	eor	r1, r1
    1438:	2f 92       	push	r2
    143a:	3f 92       	push	r3
    143c:	4f 92       	push	r4
    143e:	5f 92       	push	r5
    1440:	6f 92       	push	r6
    1442:	7f 92       	push	r7
    1444:	8f 92       	push	r8
    1446:	9f 92       	push	r9
    1448:	af 92       	push	r10
    144a:	bf 92       	push	r11
    144c:	cf 92       	push	r12
    144e:	df 92       	push	r13
    1450:	ef 92       	push	r14
    1452:	ff 92       	push	r15
    1454:	0f 93       	push	r16
    1456:	1f 93       	push	r17
    1458:	2f 93       	push	r18
    145a:	3f 93       	push	r19
    145c:	4f 93       	push	r20
    145e:	5f 93       	push	r21
    1460:	6f 93       	push	r22
    1462:	7f 93       	push	r23
    1464:	8f 93       	push	r24
    1466:	9f 93       	push	r25
    1468:	af 93       	push	r26
    146a:	bf 93       	push	r27
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ef 93       	push	r30
    1472:	ff 93       	push	r31
    1474:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1478:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    147c:	0d b6       	in	r0, 0x3d	; 61
    147e:	0d 92       	st	X+, r0
    1480:	0e b6       	in	r0, 0x3e	; 62
    1482:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1484:	0e 94 5f 15 	call	0x2abe	; 0x2abe <xTaskIncrementTick>
    1488:	88 23       	and	r24, r24
    148a:	11 f0       	breq	.+4      	; 0x1490 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    148c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1490:	a0 91 70 05 	lds	r26, 0x0570	; 0x800570 <pxCurrentTCB>
    1494:	b0 91 71 05 	lds	r27, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    1498:	cd 91       	ld	r28, X+
    149a:	cd bf       	out	0x3d, r28	; 61
    149c:	dd 91       	ld	r29, X+
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	ff 91       	pop	r31
    14a2:	ef 91       	pop	r30
    14a4:	df 91       	pop	r29
    14a6:	cf 91       	pop	r28
    14a8:	bf 91       	pop	r27
    14aa:	af 91       	pop	r26
    14ac:	9f 91       	pop	r25
    14ae:	8f 91       	pop	r24
    14b0:	7f 91       	pop	r23
    14b2:	6f 91       	pop	r22
    14b4:	5f 91       	pop	r21
    14b6:	4f 91       	pop	r20
    14b8:	3f 91       	pop	r19
    14ba:	2f 91       	pop	r18
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	ff 90       	pop	r15
    14c2:	ef 90       	pop	r14
    14c4:	df 90       	pop	r13
    14c6:	cf 90       	pop	r12
    14c8:	bf 90       	pop	r11
    14ca:	af 90       	pop	r10
    14cc:	9f 90       	pop	r9
    14ce:	8f 90       	pop	r8
    14d0:	7f 90       	pop	r7
    14d2:	6f 90       	pop	r6
    14d4:	5f 90       	pop	r5
    14d6:	4f 90       	pop	r4
    14d8:	3f 90       	pop	r3
    14da:	2f 90       	pop	r2
    14dc:	1f 90       	pop	r1
    14de:	0f 90       	pop	r0
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	0f 90       	pop	r0

	asm volatile ( "ret" );
    14e4:	08 95       	ret

000014e6 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    14e6:	cf 93       	push	r28
    14e8:	df 93       	push	r29
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <prvSetupTimerInterrupt+0x6>
    14ec:	00 d0       	rcall	.+0      	; 0x14ee <prvSetupTimerInterrupt+0x8>
    14ee:	00 d0       	rcall	.+0      	; 0x14f0 <prvSetupTimerInterrupt+0xa>
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    14f4:	89 e9       	ldi	r24, 0x99	; 153
    14f6:	99 e3       	ldi	r25, 0x39	; 57
    14f8:	a0 e0       	ldi	r26, 0x00	; 0
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	9a 83       	std	Y+2, r25	; 0x02
    1500:	ab 83       	std	Y+3, r26	; 0x03
    1502:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    1504:	89 81       	ldd	r24, Y+1	; 0x01
    1506:	9a 81       	ldd	r25, Y+2	; 0x02
    1508:	ab 81       	ldd	r26, Y+3	; 0x03
    150a:	bc 81       	ldd	r27, Y+4	; 0x04
    150c:	68 94       	set
    150e:	15 f8       	bld	r1, 5
    1510:	b6 95       	lsr	r27
    1512:	a7 95       	ror	r26
    1514:	97 95       	ror	r25
    1516:	87 95       	ror	r24
    1518:	16 94       	lsr	r1
    151a:	d1 f7       	brne	.-12     	; 0x1510 <prvSetupTimerInterrupt+0x2a>
    151c:	89 83       	std	Y+1, r24	; 0x01
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	ab 83       	std	Y+3, r26	; 0x03
    1522:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1524:	89 81       	ldd	r24, Y+1	; 0x01
    1526:	9a 81       	ldd	r25, Y+2	; 0x02
    1528:	ab 81       	ldd	r26, Y+3	; 0x03
    152a:	bc 81       	ldd	r27, Y+4	; 0x04
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	a1 09       	sbc	r26, r1
    1530:	b1 09       	sbc	r27, r1
    1532:	89 83       	std	Y+1, r24	; 0x01
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	ab 83       	std	Y+3, r26	; 0x03
    1538:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	ab 81       	ldd	r26, Y+3	; 0x03
    1544:	bc 81       	ldd	r27, Y+4	; 0x04
    1546:	89 2f       	mov	r24, r25
    1548:	9a 2f       	mov	r25, r26
    154a:	ab 2f       	mov	r26, r27
    154c:	bb 27       	eor	r27, r27
    154e:	89 83       	std	Y+1, r24	; 0x01
    1550:	9a 83       	std	Y+2, r25	; 0x02
    1552:	ab 83       	std	Y+3, r26	; 0x03
    1554:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    155a:	89 e8       	ldi	r24, 0x89	; 137
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	2e 81       	ldd	r18, Y+6	; 0x06
    1560:	fc 01       	movw	r30, r24
    1562:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1564:	88 e8       	ldi	r24, 0x88	; 136
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	2d 81       	ldd	r18, Y+5	; 0x05
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    156e:	8b e0       	ldi	r24, 0x0B	; 11
    1570:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1572:	81 e8       	ldi	r24, 0x81	; 129
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	2d 81       	ldd	r18, Y+5	; 0x05
    1578:	fc 01       	movw	r30, r24
    157a:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    157c:	8f e6       	ldi	r24, 0x6F	; 111
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	fc 01       	movw	r30, r24
    1582:	80 81       	ld	r24, Z
    1584:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    1586:	8d 81       	ldd	r24, Y+5	; 0x05
    1588:	82 60       	ori	r24, 0x02	; 2
    158a:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    158c:	8f e6       	ldi	r24, 0x6F	; 111
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	2d 81       	ldd	r18, Y+5	; 0x05
    1592:	fc 01       	movw	r30, r24
    1594:	20 83       	st	Z, r18
}
    1596:	26 96       	adiw	r28, 0x06	; 6
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	08 95       	ret

000015a8 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    15a8:	0e 94 16 0a 	call	0x142c	; 0x142c <vPortYieldFromTick>
		asm volatile ( "reti" );
    15ac:	18 95       	reti

000015ae <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    15ae:	cf 93       	push	r28
    15b0:	df 93       	push	r29
    15b2:	00 d0       	rcall	.+0      	; 0x15b4 <pvPortMalloc+0x6>
    15b4:	00 d0       	rcall	.+0      	; 0x15b6 <pvPortMalloc+0x8>
    15b6:	cd b7       	in	r28, 0x3d	; 61
    15b8:	de b7       	in	r29, 0x3e	; 62
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    15be:	1a 82       	std	Y+2, r1	; 0x02
    15c0:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    15c2:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    15c6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    15ca:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    15ce:	89 2b       	or	r24, r25
    15d0:	31 f4       	brne	.+12     	; 0x15de <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    15d2:	81 e8       	ldi	r24, 0x81	; 129
    15d4:	91 e0       	ldi	r25, 0x01	; 1
    15d6:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <pucAlignedHeap.1965+0x1>
    15da:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    15de:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    15e2:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    15e6:	8b 81       	ldd	r24, Y+3	; 0x03
    15e8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ea:	82 0f       	add	r24, r18
    15ec:	93 1f       	adc	r25, r19
    15ee:	87 3e       	cpi	r24, 0xE7	; 231
    15f0:	93 40       	sbci	r25, 0x03	; 3
    15f2:	38 f5       	brcc	.+78     	; 0x1642 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    15f4:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    15f8:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    15fc:	8b 81       	ldd	r24, Y+3	; 0x03
    15fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1600:	28 0f       	add	r18, r24
    1602:	39 1f       	adc	r19, r25
    1604:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    1608:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    160c:	82 17       	cp	r24, r18
    160e:	93 07       	cpc	r25, r19
    1610:	c0 f4       	brcc	.+48     	; 0x1642 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1612:	20 91 6a 05 	lds	r18, 0x056A	; 0x80056a <pucAlignedHeap.1965>
    1616:	30 91 6b 05 	lds	r19, 0x056B	; 0x80056b <pucAlignedHeap.1965+0x1>
    161a:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <xNextFreeByte>
    161e:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1622:	82 0f       	add	r24, r18
    1624:	93 1f       	adc	r25, r19
    1626:	9a 83       	std	Y+2, r25	; 0x02
    1628:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    162a:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <xNextFreeByte>
    162e:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <xNextFreeByte+0x1>
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	9c 81       	ldd	r25, Y+4	; 0x04
    1636:	82 0f       	add	r24, r18
    1638:	93 1f       	adc	r25, r19
    163a:	90 93 69 05 	sts	0x0569, r25	; 0x800569 <xNextFreeByte+0x1>
    163e:	80 93 68 05 	sts	0x0568, r24	; 0x800568 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1642:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1646:	89 81       	ldd	r24, Y+1	; 0x01
    1648:	9a 81       	ldd	r25, Y+2	; 0x02
}
    164a:	0f 90       	pop	r0
    164c:	0f 90       	pop	r0
    164e:	0f 90       	pop	r0
    1650:	0f 90       	pop	r0
    1652:	df 91       	pop	r29
    1654:	cf 91       	pop	r28
    1656:	08 95       	ret

00001658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	00 d0       	rcall	.+0      	; 0x165e <vPortFree+0x6>
    165e:	cd b7       	in	r28, 0x3d	; 61
    1660:	de b7       	in	r29, 0x3e	; 62
    1662:	9a 83       	std	Y+2, r25	; 0x02
    1664:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1670:	8f 92       	push	r8
    1672:	9f 92       	push	r9
    1674:	af 92       	push	r10
    1676:	bf 92       	push	r11
    1678:	cf 92       	push	r12
    167a:	df 92       	push	r13
    167c:	ef 92       	push	r14
    167e:	0f 93       	push	r16
    1680:	1f 93       	push	r17
    1682:	cf 93       	push	r28
    1684:	df 93       	push	r29
    1686:	cd b7       	in	r28, 0x3d	; 61
    1688:	de b7       	in	r29, 0x3e	; 62
    168a:	65 97       	sbiw	r28, 0x15	; 21
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	8c 83       	std	Y+4, r24	; 0x04
    1698:	4d 83       	std	Y+5, r20	; 0x05
    169a:	5e 83       	std	Y+6, r21	; 0x06
    169c:	6f 83       	std	Y+7, r22	; 0x07
    169e:	78 87       	std	Y+8, r23	; 0x08
    16a0:	29 87       	std	Y+9, r18	; 0x09
    16a2:	0a 87       	std	Y+10, r16	; 0x0a
    16a4:	eb 86       	std	Y+11, r14	; 0x0b
    16a6:	dd 86       	std	Y+13, r13	; 0x0d
    16a8:	cc 86       	std	Y+12, r12	; 0x0c
    16aa:	bf 86       	std	Y+15, r11	; 0x0f
    16ac:	ae 86       	std	Y+14, r10	; 0x0e
    16ae:	99 8a       	std	Y+17, r9	; 0x11
    16b0:	88 8a       	std	Y+16, r8	; 0x10
    16b2:	88 e0       	ldi	r24, 0x08	; 8
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	0e 94 a5 1a 	call	0x354a	; 0x354a <malloc>
    16ba:	9a 83       	std	Y+2, r25	; 0x02
    16bc:	89 83       	std	Y+1, r24	; 0x01
    16be:	8c 81       	ldd	r24, Y+4	; 0x04
    16c0:	88 2f       	mov	r24, r24
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	84 59       	subi	r24, 0x94	; 148
    16ca:	9a 4f       	sbci	r25, 0xFA	; 250
    16cc:	29 81       	ldd	r18, Y+1	; 0x01
    16ce:	3a 81       	ldd	r19, Y+2	; 0x02
    16d0:	fc 01       	movw	r30, r24
    16d2:	31 83       	std	Z+1, r19	; 0x01
    16d4:	20 83       	st	Z, r18
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	88 2f       	mov	r24, r24
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	88 0f       	add	r24, r24
    16de:	99 1f       	adc	r25, r25
    16e0:	88 5d       	subi	r24, 0xD8	; 216
    16e2:	9e 4f       	sbci	r25, 0xFE	; 254
    16e4:	fc 01       	movw	r30, r24
    16e6:	20 81       	ld	r18, Z
    16e8:	31 81       	ldd	r19, Z+1	; 0x01
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	9a 81       	ldd	r25, Y+2	; 0x02
    16ee:	fc 01       	movw	r30, r24
    16f0:	31 83       	std	Z+1, r19	; 0x01
    16f2:	20 83       	st	Z, r18
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    16fa:	3f 85       	ldd	r19, Y+15	; 0x0f
    16fc:	fc 01       	movw	r30, r24
    16fe:	33 83       	std	Z+3, r19	; 0x03
    1700:	22 83       	std	Z+2, r18	; 0x02
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	9a 81       	ldd	r25, Y+2	; 0x02
    1706:	2c 85       	ldd	r18, Y+12	; 0x0c
    1708:	3d 85       	ldd	r19, Y+13	; 0x0d
    170a:	fc 01       	movw	r30, r24
    170c:	35 83       	std	Z+5, r19	; 0x05
    170e:	24 83       	std	Z+4, r18	; 0x04
    1710:	89 81       	ldd	r24, Y+1	; 0x01
    1712:	9a 81       	ldd	r25, Y+2	; 0x02
    1714:	28 89       	ldd	r18, Y+16	; 0x10
    1716:	39 89       	ldd	r19, Y+17	; 0x11
    1718:	fc 01       	movw	r30, r24
    171a:	37 83       	std	Z+7, r19	; 0x07
    171c:	26 83       	std	Z+6, r18	; 0x06
    171e:	8f e5       	ldi	r24, 0x5F	; 95
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	fc 01       	movw	r30, r24
    1724:	80 81       	ld	r24, Z
    1726:	8b 83       	std	Y+3, r24	; 0x03
    1728:	f8 94       	cli
    172a:	89 81       	ldd	r24, Y+1	; 0x01
    172c:	9a 81       	ldd	r25, Y+2	; 0x02
    172e:	fc 01       	movw	r30, r24
    1730:	80 81       	ld	r24, Z
    1732:	91 81       	ldd	r25, Z+1	; 0x01
    1734:	06 97       	sbiw	r24, 0x06	; 6
    1736:	29 81       	ldd	r18, Y+1	; 0x01
    1738:	3a 81       	ldd	r19, Y+2	; 0x02
    173a:	f9 01       	movw	r30, r18
    173c:	20 81       	ld	r18, Z
    173e:	31 81       	ldd	r19, Z+1	; 0x01
    1740:	26 50       	subi	r18, 0x06	; 6
    1742:	31 09       	sbc	r19, r1
    1744:	f9 01       	movw	r30, r18
    1746:	20 81       	ld	r18, Z
    1748:	22 60       	ori	r18, 0x02	; 2
    174a:	fc 01       	movw	r30, r24
    174c:	20 83       	st	Z, r18
    174e:	89 81       	ldd	r24, Y+1	; 0x01
    1750:	9a 81       	ldd	r25, Y+2	; 0x02
    1752:	fc 01       	movw	r30, r24
    1754:	80 81       	ld	r24, Z
    1756:	91 81       	ldd	r25, Z+1	; 0x01
    1758:	8c 01       	movw	r16, r24
    175a:	02 50       	subi	r16, 0x02	; 2
    175c:	11 09       	sbc	r17, r1
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	af 81       	ldd	r26, Y+7	; 0x07
    1764:	b8 85       	ldd	r27, Y+8	; 0x08
    1766:	88 0f       	add	r24, r24
    1768:	99 1f       	adc	r25, r25
    176a:	aa 1f       	adc	r26, r26
    176c:	bb 1f       	adc	r27, r27
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	aa 1f       	adc	r26, r26
    1774:	bb 1f       	adc	r27, r27
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	aa 1f       	adc	r26, r26
    177c:	bb 1f       	adc	r27, r27
    177e:	9c 01       	movw	r18, r24
    1780:	ad 01       	movw	r20, r26
    1782:	80 e0       	ldi	r24, 0x00	; 0
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a1 ee       	ldi	r26, 0xE1	; 225
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	bc 01       	movw	r22, r24
    178c:	cd 01       	movw	r24, r26
    178e:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodsi4>
    1792:	da 01       	movw	r26, r20
    1794:	c9 01       	movw	r24, r18
    1796:	81 50       	subi	r24, 0x01	; 1
    1798:	f8 01       	movw	r30, r16
    179a:	80 83       	st	Z, r24
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	9a 81       	ldd	r25, Y+2	; 0x02
    17a0:	fc 01       	movw	r30, r24
    17a2:	80 81       	ld	r24, Z
    17a4:	91 81       	ldd	r25, Z+1	; 0x01
    17a6:	05 97       	sbiw	r24, 0x05	; 5
    17a8:	28 e9       	ldi	r18, 0x98	; 152
    17aa:	fc 01       	movw	r30, r24
    17ac:	20 83       	st	Z, r18
    17ae:	89 81       	ldd	r24, Y+1	; 0x01
    17b0:	9a 81       	ldd	r25, Y+2	; 0x02
    17b2:	fc 01       	movw	r30, r24
    17b4:	80 81       	ld	r24, Z
    17b6:	91 81       	ldd	r25, Z+1	; 0x01
    17b8:	04 97       	sbiw	r24, 0x04	; 4
    17ba:	26 e0       	ldi	r18, 0x06	; 6
    17bc:	fc 01       	movw	r30, r24
    17be:	20 83       	st	Z, r18
    17c0:	8f e5       	ldi	r24, 0x5F	; 95
    17c2:	90 e0       	ldi	r25, 0x00	; 0
    17c4:	2b 81       	ldd	r18, Y+3	; 0x03
    17c6:	fc 01       	movw	r30, r24
    17c8:	20 83       	st	Z, r18
    17ca:	89 81       	ldd	r24, Y+1	; 0x01
    17cc:	9a 81       	ldd	r25, Y+2	; 0x02
    17ce:	65 96       	adiw	r28, 0x15	; 21
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ef 90       	pop	r14
    17e4:	df 90       	pop	r13
    17e6:	cf 90       	pop	r12
    17e8:	bf 90       	pop	r11
    17ea:	af 90       	pop	r10
    17ec:	9f 90       	pop	r9
    17ee:	8f 90       	pop	r8
    17f0:	08 95       	ret

000017f2 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    17f2:	1f 92       	push	r1
    17f4:	0f 92       	push	r0
    17f6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    17fa:	0f 92       	push	r0
    17fc:	11 24       	eor	r1, r1
    17fe:	2f 93       	push	r18
    1800:	3f 93       	push	r19
    1802:	4f 93       	push	r20
    1804:	5f 93       	push	r21
    1806:	6f 93       	push	r22
    1808:	7f 93       	push	r23
    180a:	8f 93       	push	r24
    180c:	9f 93       	push	r25
    180e:	af 93       	push	r26
    1810:	bf 93       	push	r27
    1812:	ef 93       	push	r30
    1814:	ff 93       	push	r31
    1816:	cf 93       	push	r28
    1818:	df 93       	push	r29
    181a:	1f 92       	push	r1
    181c:	cd b7       	in	r28, 0x3d	; 61
    181e:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1820:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1824:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1828:	89 2b       	or	r24, r25
    182a:	31 f1       	breq	.+76     	; 0x1878 <__vector_20+0x86>
		item = UDR0;
    182c:	86 ec       	ldi	r24, 0xC6	; 198
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	fc 01       	movw	r30, r24
    1832:	80 81       	ld	r24, Z
    1834:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1836:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    183a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    183e:	fc 01       	movw	r30, r24
    1840:	84 81       	ldd	r24, Z+4	; 0x04
    1842:	95 81       	ldd	r25, Z+5	; 0x05
    1844:	69 81       	ldd	r22, Y+1	; 0x01
    1846:	0e 94 3a 06 	call	0xc74	; 0xc74 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    184a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    184e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1852:	fc 01       	movw	r30, r24
    1854:	86 81       	ldd	r24, Z+6	; 0x06
    1856:	97 81       	ldd	r25, Z+7	; 0x07
    1858:	89 2b       	or	r24, r25
    185a:	71 f0       	breq	.+28     	; 0x1878 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    185c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    1860:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1864:	fc 01       	movw	r30, r24
    1866:	26 81       	ldd	r18, Z+6	; 0x06
    1868:	37 81       	ldd	r19, Z+7	; 0x07
    186a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    186e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    1872:	69 81       	ldd	r22, Y+1	; 0x01
    1874:	f9 01       	movw	r30, r18
    1876:	09 95       	icall
		}
	}
}
    1878:	0f 90       	pop	r0
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	ff 91       	pop	r31
    1880:	ef 91       	pop	r30
    1882:	bf 91       	pop	r27
    1884:	af 91       	pop	r26
    1886:	9f 91       	pop	r25
    1888:	8f 91       	pop	r24
    188a:	7f 91       	pop	r23
    188c:	6f 91       	pop	r22
    188e:	5f 91       	pop	r21
    1890:	4f 91       	pop	r20
    1892:	3f 91       	pop	r19
    1894:	2f 91       	pop	r18
    1896:	0f 90       	pop	r0
    1898:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    189c:	0f 90       	pop	r0
    189e:	1f 90       	pop	r1
    18a0:	18 95       	reti

000018a2 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    18a2:	1f 92       	push	r1
    18a4:	0f 92       	push	r0
    18a6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18aa:	0f 92       	push	r0
    18ac:	11 24       	eor	r1, r1
    18ae:	2f 93       	push	r18
    18b0:	3f 93       	push	r19
    18b2:	4f 93       	push	r20
    18b4:	5f 93       	push	r21
    18b6:	6f 93       	push	r22
    18b8:	7f 93       	push	r23
    18ba:	8f 93       	push	r24
    18bc:	9f 93       	push	r25
    18be:	af 93       	push	r26
    18c0:	bf 93       	push	r27
    18c2:	ef 93       	push	r30
    18c4:	ff 93       	push	r31
    18c6:	cf 93       	push	r28
    18c8:	df 93       	push	r29
    18ca:	1f 92       	push	r1
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    18d0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    18d4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    18d8:	89 2b       	or	r24, r25
    18da:	f9 f0       	breq	.+62     	; 0x191a <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    18dc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <_ser_handle>
    18e0:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <_ser_handle+0x1>
    18e4:	fc 01       	movw	r30, r24
    18e6:	82 81       	ldd	r24, Z+2	; 0x02
    18e8:	93 81       	ldd	r25, Z+3	; 0x03
    18ea:	9e 01       	movw	r18, r28
    18ec:	2f 5f       	subi	r18, 0xFF	; 255
    18ee:	3f 4f       	sbci	r19, 0xFF	; 255
    18f0:	b9 01       	movw	r22, r18
    18f2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <buffer_get_item>
    18f6:	88 23       	and	r24, r24
    18f8:	31 f4       	brne	.+12     	; 0x1906 <__vector_21+0x64>
			UDR0 = item;
    18fa:	86 ec       	ldi	r24, 0xC6	; 198
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	29 81       	ldd	r18, Y+1	; 0x01
    1900:	fc 01       	movw	r30, r24
    1902:	20 83       	st	Z, r18
    1904:	13 c0       	rjmp	.+38     	; 0x192c <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1906:	81 ec       	ldi	r24, 0xC1	; 193
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	21 ec       	ldi	r18, 0xC1	; 193
    190c:	30 e0       	ldi	r19, 0x00	; 0
    190e:	f9 01       	movw	r30, r18
    1910:	20 81       	ld	r18, Z
    1912:	2f 7d       	andi	r18, 0xDF	; 223
    1914:	fc 01       	movw	r30, r24
    1916:	20 83       	st	Z, r18
    1918:	09 c0       	rjmp	.+18     	; 0x192c <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    191a:	81 ec       	ldi	r24, 0xC1	; 193
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	21 ec       	ldi	r18, 0xC1	; 193
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	f9 01       	movw	r30, r18
    1924:	20 81       	ld	r18, Z
    1926:	2f 7d       	andi	r18, 0xDF	; 223
    1928:	fc 01       	movw	r30, r24
    192a:	20 83       	st	Z, r18
	}
}
    192c:	0f 90       	pop	r0
    192e:	df 91       	pop	r29
    1930:	cf 91       	pop	r28
    1932:	ff 91       	pop	r31
    1934:	ef 91       	pop	r30
    1936:	bf 91       	pop	r27
    1938:	af 91       	pop	r26
    193a:	9f 91       	pop	r25
    193c:	8f 91       	pop	r24
    193e:	7f 91       	pop	r23
    1940:	6f 91       	pop	r22
    1942:	5f 91       	pop	r21
    1944:	4f 91       	pop	r20
    1946:	3f 91       	pop	r19
    1948:	2f 91       	pop	r18
    194a:	0f 90       	pop	r0
    194c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1950:	0f 90       	pop	r0
    1952:	1f 90       	pop	r1
    1954:	18 95       	reti

00001956 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1956:	1f 92       	push	r1
    1958:	0f 92       	push	r0
    195a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    195e:	0f 92       	push	r0
    1960:	11 24       	eor	r1, r1
    1962:	2f 93       	push	r18
    1964:	3f 93       	push	r19
    1966:	4f 93       	push	r20
    1968:	5f 93       	push	r21
    196a:	6f 93       	push	r22
    196c:	7f 93       	push	r23
    196e:	8f 93       	push	r24
    1970:	9f 93       	push	r25
    1972:	af 93       	push	r26
    1974:	bf 93       	push	r27
    1976:	ef 93       	push	r30
    1978:	ff 93       	push	r31
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	1f 92       	push	r1
    1980:	cd b7       	in	r28, 0x3d	; 61
    1982:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1984:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1988:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    198c:	89 2b       	or	r24, r25
    198e:	31 f1       	breq	.+76     	; 0x19dc <__vector_28+0x86>
		item = UDR1;
    1990:	8e ec       	ldi	r24, 0xCE	; 206
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	fc 01       	movw	r30, r24
    1996:	80 81       	ld	r24, Z
    1998:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    199a:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    199e:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19a2:	fc 01       	movw	r30, r24
    19a4:	84 81       	ldd	r24, Z+4	; 0x04
    19a6:	95 81       	ldd	r25, Z+5	; 0x05
    19a8:	69 81       	ldd	r22, Y+1	; 0x01
    19aa:	0e 94 3a 06 	call	0xc74	; 0xc74 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    19ae:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19b2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19b6:	fc 01       	movw	r30, r24
    19b8:	86 81       	ldd	r24, Z+6	; 0x06
    19ba:	97 81       	ldd	r25, Z+7	; 0x07
    19bc:	89 2b       	or	r24, r25
    19be:	71 f0       	breq	.+28     	; 0x19dc <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    19c0:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19c4:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19c8:	fc 01       	movw	r30, r24
    19ca:	26 81       	ldd	r18, Z+6	; 0x06
    19cc:	37 81       	ldd	r19, Z+7	; 0x07
    19ce:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    19d2:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    19d6:	69 81       	ldd	r22, Y+1	; 0x01
    19d8:	f9 01       	movw	r30, r18
    19da:	09 95       	icall
		}
	}
}
    19dc:	0f 90       	pop	r0
    19de:	df 91       	pop	r29
    19e0:	cf 91       	pop	r28
    19e2:	ff 91       	pop	r31
    19e4:	ef 91       	pop	r30
    19e6:	bf 91       	pop	r27
    19e8:	af 91       	pop	r26
    19ea:	9f 91       	pop	r25
    19ec:	8f 91       	pop	r24
    19ee:	7f 91       	pop	r23
    19f0:	6f 91       	pop	r22
    19f2:	5f 91       	pop	r21
    19f4:	4f 91       	pop	r20
    19f6:	3f 91       	pop	r19
    19f8:	2f 91       	pop	r18
    19fa:	0f 90       	pop	r0
    19fc:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a00:	0f 90       	pop	r0
    1a02:	1f 90       	pop	r1
    1a04:	18 95       	reti

00001a06 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1a06:	1f 92       	push	r1
    1a08:	0f 92       	push	r0
    1a0a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a0e:	0f 92       	push	r0
    1a10:	11 24       	eor	r1, r1
    1a12:	2f 93       	push	r18
    1a14:	3f 93       	push	r19
    1a16:	4f 93       	push	r20
    1a18:	5f 93       	push	r21
    1a1a:	6f 93       	push	r22
    1a1c:	7f 93       	push	r23
    1a1e:	8f 93       	push	r24
    1a20:	9f 93       	push	r25
    1a22:	af 93       	push	r26
    1a24:	bf 93       	push	r27
    1a26:	ef 93       	push	r30
    1a28:	ff 93       	push	r31
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	1f 92       	push	r1
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1a34:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1a38:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1a3c:	89 2b       	or	r24, r25
    1a3e:	f9 f0       	breq	.+62     	; 0x1a7e <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1a40:	80 91 6e 05 	lds	r24, 0x056E	; 0x80056e <_ser_handle+0x2>
    1a44:	90 91 6f 05 	lds	r25, 0x056F	; 0x80056f <_ser_handle+0x3>
    1a48:	fc 01       	movw	r30, r24
    1a4a:	82 81       	ldd	r24, Z+2	; 0x02
    1a4c:	93 81       	ldd	r25, Z+3	; 0x03
    1a4e:	9e 01       	movw	r18, r28
    1a50:	2f 5f       	subi	r18, 0xFF	; 255
    1a52:	3f 4f       	sbci	r19, 0xFF	; 255
    1a54:	b9 01       	movw	r22, r18
    1a56:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <buffer_get_item>
    1a5a:	88 23       	and	r24, r24
    1a5c:	31 f4       	brne	.+12     	; 0x1a6a <__vector_29+0x64>
			UDR1 = item;
    1a5e:	8e ec       	ldi	r24, 0xCE	; 206
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	29 81       	ldd	r18, Y+1	; 0x01
    1a64:	fc 01       	movw	r30, r24
    1a66:	20 83       	st	Z, r18
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1a6a:	89 ec       	ldi	r24, 0xC9	; 201
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	29 ec       	ldi	r18, 0xC9	; 201
    1a70:	30 e0       	ldi	r19, 0x00	; 0
    1a72:	f9 01       	movw	r30, r18
    1a74:	20 81       	ld	r18, Z
    1a76:	2f 7d       	andi	r18, 0xDF	; 223
    1a78:	fc 01       	movw	r30, r24
    1a7a:	20 83       	st	Z, r18
    1a7c:	09 c0       	rjmp	.+18     	; 0x1a90 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1a7e:	89 ec       	ldi	r24, 0xC9	; 201
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	29 ec       	ldi	r18, 0xC9	; 201
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	f9 01       	movw	r30, r18
    1a88:	20 81       	ld	r18, Z
    1a8a:	2f 7d       	andi	r18, 0xDF	; 223
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
	}
}
    1a90:	0f 90       	pop	r0
    1a92:	df 91       	pop	r29
    1a94:	cf 91       	pop	r28
    1a96:	ff 91       	pop	r31
    1a98:	ef 91       	pop	r30
    1a9a:	bf 91       	pop	r27
    1a9c:	af 91       	pop	r26
    1a9e:	9f 91       	pop	r25
    1aa0:	8f 91       	pop	r24
    1aa2:	7f 91       	pop	r23
    1aa4:	6f 91       	pop	r22
    1aa6:	5f 91       	pop	r21
    1aa8:	4f 91       	pop	r20
    1aaa:	3f 91       	pop	r19
    1aac:	2f 91       	pop	r18
    1aae:	0f 90       	pop	r0
    1ab0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ab4:	0f 90       	pop	r0
    1ab6:	1f 90       	pop	r1
    1ab8:	18 95       	reti

00001aba <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1aba:	cf 93       	push	r28
    1abc:	df 93       	push	r29
    1abe:	00 d0       	rcall	.+0      	; 0x1ac0 <xQueueGenericReset+0x6>
    1ac0:	00 d0       	rcall	.+0      	; 0x1ac2 <xQueueGenericReset+0x8>
    1ac2:	1f 92       	push	r1
    1ac4:	cd b7       	in	r28, 0x3d	; 61
    1ac6:	de b7       	in	r29, 0x3e	; 62
    1ac8:	9c 83       	std	Y+4, r25	; 0x04
    1aca:	8b 83       	std	Y+3, r24	; 0x03
    1acc:	6d 83       	std	Y+5, r22	; 0x05
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	9a 83       	std	Y+2, r25	; 0x02
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	0f b6       	in	r0, 0x3f	; 63
    1ad8:	f8 94       	cli
    1ada:	0f 92       	push	r0
    1adc:	89 81       	ldd	r24, Y+1	; 0x01
    1ade:	9a 81       	ldd	r25, Y+2	; 0x02
    1ae0:	fc 01       	movw	r30, r24
    1ae2:	80 81       	ld	r24, Z
    1ae4:	91 81       	ldd	r25, Z+1	; 0x01
    1ae6:	29 81       	ldd	r18, Y+1	; 0x01
    1ae8:	3a 81       	ldd	r19, Y+2	; 0x02
    1aea:	f9 01       	movw	r30, r18
    1aec:	23 8d       	ldd	r18, Z+27	; 0x1b
    1aee:	42 2f       	mov	r20, r18
    1af0:	50 e0       	ldi	r21, 0x00	; 0
    1af2:	29 81       	ldd	r18, Y+1	; 0x01
    1af4:	3a 81       	ldd	r19, Y+2	; 0x02
    1af6:	f9 01       	movw	r30, r18
    1af8:	24 8d       	ldd	r18, Z+28	; 0x1c
    1afa:	22 2f       	mov	r18, r18
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	42 9f       	mul	r20, r18
    1b00:	b0 01       	movw	r22, r0
    1b02:	43 9f       	mul	r20, r19
    1b04:	70 0d       	add	r23, r0
    1b06:	52 9f       	mul	r21, r18
    1b08:	70 0d       	add	r23, r0
    1b0a:	11 24       	eor	r1, r1
    1b0c:	9b 01       	movw	r18, r22
    1b0e:	28 0f       	add	r18, r24
    1b10:	39 1f       	adc	r19, r25
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	fc 01       	movw	r30, r24
    1b18:	33 83       	std	Z+3, r19	; 0x03
    1b1a:	22 83       	std	Z+2, r18	; 0x02
    1b1c:	89 81       	ldd	r24, Y+1	; 0x01
    1b1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b20:	fc 01       	movw	r30, r24
    1b22:	12 8e       	std	Z+26, r1	; 0x1a
    1b24:	89 81       	ldd	r24, Y+1	; 0x01
    1b26:	9a 81       	ldd	r25, Y+2	; 0x02
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 81       	ld	r18, Z
    1b2c:	31 81       	ldd	r19, Z+1	; 0x01
    1b2e:	89 81       	ldd	r24, Y+1	; 0x01
    1b30:	9a 81       	ldd	r25, Y+2	; 0x02
    1b32:	fc 01       	movw	r30, r24
    1b34:	35 83       	std	Z+5, r19	; 0x05
    1b36:	24 83       	std	Z+4, r18	; 0x04
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	80 81       	ld	r24, Z
    1b40:	91 81       	ldd	r25, Z+1	; 0x01
    1b42:	29 81       	ldd	r18, Y+1	; 0x01
    1b44:	3a 81       	ldd	r19, Y+2	; 0x02
    1b46:	f9 01       	movw	r30, r18
    1b48:	23 8d       	ldd	r18, Z+27	; 0x1b
    1b4a:	22 2f       	mov	r18, r18
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	a9 01       	movw	r20, r18
    1b50:	41 50       	subi	r20, 0x01	; 1
    1b52:	51 09       	sbc	r21, r1
    1b54:	29 81       	ldd	r18, Y+1	; 0x01
    1b56:	3a 81       	ldd	r19, Y+2	; 0x02
    1b58:	f9 01       	movw	r30, r18
    1b5a:	24 8d       	ldd	r18, Z+28	; 0x1c
    1b5c:	22 2f       	mov	r18, r18
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	42 9f       	mul	r20, r18
    1b62:	b0 01       	movw	r22, r0
    1b64:	43 9f       	mul	r20, r19
    1b66:	70 0d       	add	r23, r0
    1b68:	52 9f       	mul	r21, r18
    1b6a:	70 0d       	add	r23, r0
    1b6c:	11 24       	eor	r1, r1
    1b6e:	9b 01       	movw	r18, r22
    1b70:	28 0f       	add	r18, r24
    1b72:	39 1f       	adc	r19, r25
    1b74:	89 81       	ldd	r24, Y+1	; 0x01
    1b76:	9a 81       	ldd	r25, Y+2	; 0x02
    1b78:	fc 01       	movw	r30, r24
    1b7a:	37 83       	std	Z+7, r19	; 0x07
    1b7c:	26 83       	std	Z+6, r18	; 0x06
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	9a 81       	ldd	r25, Y+2	; 0x02
    1b82:	2f ef       	ldi	r18, 0xFF	; 255
    1b84:	fc 01       	movw	r30, r24
    1b86:	25 8f       	std	Z+29, r18	; 0x1d
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
    1b8a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b8c:	2f ef       	ldi	r18, 0xFF	; 255
    1b8e:	fc 01       	movw	r30, r24
    1b90:	26 8f       	std	Z+30, r18	; 0x1e
    1b92:	8d 81       	ldd	r24, Y+5	; 0x05
    1b94:	88 23       	and	r24, r24
    1b96:	81 f4       	brne	.+32     	; 0x1bb8 <xQueueGenericReset+0xfe>
    1b98:	89 81       	ldd	r24, Y+1	; 0x01
    1b9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b9c:	fc 01       	movw	r30, r24
    1b9e:	80 85       	ldd	r24, Z+8	; 0x08
    1ba0:	88 23       	and	r24, r24
    1ba2:	a1 f0       	breq	.+40     	; 0x1bcc <xQueueGenericReset+0x112>
    1ba4:	89 81       	ldd	r24, Y+1	; 0x01
    1ba6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ba8:	08 96       	adiw	r24, 0x08	; 8
    1baa:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    1bae:	88 23       	and	r24, r24
    1bb0:	69 f0       	breq	.+26     	; 0x1bcc <xQueueGenericReset+0x112>
    1bb2:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    1bb6:	0a c0       	rjmp	.+20     	; 0x1bcc <xQueueGenericReset+0x112>
    1bb8:	89 81       	ldd	r24, Y+1	; 0x01
    1bba:	9a 81       	ldd	r25, Y+2	; 0x02
    1bbc:	08 96       	adiw	r24, 0x08	; 8
    1bbe:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    1bc2:	89 81       	ldd	r24, Y+1	; 0x01
    1bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc6:	41 96       	adiw	r24, 0x11	; 17
    1bc8:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    1bcc:	0f 90       	pop	r0
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	81 e0       	ldi	r24, 0x01	; 1
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	08 95       	ret

00001be2 <xQueueGenericCreate>:
    1be2:	0f 93       	push	r16
    1be4:	1f 93       	push	r17
    1be6:	cf 93       	push	r28
    1be8:	df 93       	push	r29
    1bea:	cd b7       	in	r28, 0x3d	; 61
    1bec:	de b7       	in	r29, 0x3e	; 62
    1bee:	29 97       	sbiw	r28, 0x09	; 9
    1bf0:	0f b6       	in	r0, 0x3f	; 63
    1bf2:	f8 94       	cli
    1bf4:	de bf       	out	0x3e, r29	; 62
    1bf6:	0f be       	out	0x3f, r0	; 63
    1bf8:	cd bf       	out	0x3d, r28	; 61
    1bfa:	8f 83       	std	Y+7, r24	; 0x07
    1bfc:	68 87       	std	Y+8, r22	; 0x08
    1bfe:	49 87       	std	Y+9, r20	; 0x09
    1c00:	88 85       	ldd	r24, Y+8	; 0x08
    1c02:	88 23       	and	r24, r24
    1c04:	19 f4       	brne	.+6      	; 0x1c0c <xQueueGenericCreate+0x2a>
    1c06:	1a 82       	std	Y+2, r1	; 0x02
    1c08:	19 82       	std	Y+1, r1	; 0x01
    1c0a:	0f c0       	rjmp	.+30     	; 0x1c2a <xQueueGenericCreate+0x48>
    1c0c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0e:	48 2f       	mov	r20, r24
    1c10:	50 e0       	ldi	r21, 0x00	; 0
    1c12:	88 85       	ldd	r24, Y+8	; 0x08
    1c14:	28 2f       	mov	r18, r24
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	42 9f       	mul	r20, r18
    1c1a:	c0 01       	movw	r24, r0
    1c1c:	43 9f       	mul	r20, r19
    1c1e:	90 0d       	add	r25, r0
    1c20:	52 9f       	mul	r21, r18
    1c22:	90 0d       	add	r25, r0
    1c24:	11 24       	eor	r1, r1
    1c26:	9a 83       	std	Y+2, r25	; 0x02
    1c28:	89 83       	std	Y+1, r24	; 0x01
    1c2a:	89 81       	ldd	r24, Y+1	; 0x01
    1c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2e:	81 96       	adiw	r24, 0x21	; 33
    1c30:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <pvPortMalloc>
    1c34:	9c 83       	std	Y+4, r25	; 0x04
    1c36:	8b 83       	std	Y+3, r24	; 0x03
    1c38:	8b 81       	ldd	r24, Y+3	; 0x03
    1c3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c3c:	89 2b       	or	r24, r25
    1c3e:	81 f0       	breq	.+32     	; 0x1c60 <xQueueGenericCreate+0x7e>
    1c40:	8b 81       	ldd	r24, Y+3	; 0x03
    1c42:	9c 81       	ldd	r25, Y+4	; 0x04
    1c44:	81 96       	adiw	r24, 0x21	; 33
    1c46:	9e 83       	std	Y+6, r25	; 0x06
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c4e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c50:	9e 81       	ldd	r25, Y+6	; 0x06
    1c52:	89 01       	movw	r16, r18
    1c54:	29 85       	ldd	r18, Y+9	; 0x09
    1c56:	ac 01       	movw	r20, r24
    1c58:	68 85       	ldd	r22, Y+8	; 0x08
    1c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c5c:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <prvInitialiseNewQueue>
    1c60:	8b 81       	ldd	r24, Y+3	; 0x03
    1c62:	9c 81       	ldd	r25, Y+4	; 0x04
    1c64:	29 96       	adiw	r28, 0x09	; 9
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
    1c70:	df 91       	pop	r29
    1c72:	cf 91       	pop	r28
    1c74:	1f 91       	pop	r17
    1c76:	0f 91       	pop	r16
    1c78:	08 95       	ret

00001c7a <prvInitialiseNewQueue>:
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	27 97       	sbiw	r28, 0x07	; 7
    1c88:	0f b6       	in	r0, 0x3f	; 63
    1c8a:	f8 94       	cli
    1c8c:	de bf       	out	0x3e, r29	; 62
    1c8e:	0f be       	out	0x3f, r0	; 63
    1c90:	cd bf       	out	0x3d, r28	; 61
    1c92:	89 83       	std	Y+1, r24	; 0x01
    1c94:	6a 83       	std	Y+2, r22	; 0x02
    1c96:	5c 83       	std	Y+4, r21	; 0x04
    1c98:	4b 83       	std	Y+3, r20	; 0x03
    1c9a:	2d 83       	std	Y+5, r18	; 0x05
    1c9c:	1f 83       	std	Y+7, r17	; 0x07
    1c9e:	0e 83       	std	Y+6, r16	; 0x06
    1ca0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca2:	88 23       	and	r24, r24
    1ca4:	41 f4       	brne	.+16     	; 0x1cb6 <prvInitialiseNewQueue+0x3c>
    1ca6:	8e 81       	ldd	r24, Y+6	; 0x06
    1ca8:	9f 81       	ldd	r25, Y+7	; 0x07
    1caa:	2e 81       	ldd	r18, Y+6	; 0x06
    1cac:	3f 81       	ldd	r19, Y+7	; 0x07
    1cae:	fc 01       	movw	r30, r24
    1cb0:	31 83       	std	Z+1, r19	; 0x01
    1cb2:	20 83       	st	Z, r18
    1cb4:	07 c0       	rjmp	.+14     	; 0x1cc4 <prvInitialiseNewQueue+0x4a>
    1cb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1cb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1cba:	2b 81       	ldd	r18, Y+3	; 0x03
    1cbc:	3c 81       	ldd	r19, Y+4	; 0x04
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	31 83       	std	Z+1, r19	; 0x01
    1cc2:	20 83       	st	Z, r18
    1cc4:	8e 81       	ldd	r24, Y+6	; 0x06
    1cc6:	9f 81       	ldd	r25, Y+7	; 0x07
    1cc8:	29 81       	ldd	r18, Y+1	; 0x01
    1cca:	fc 01       	movw	r30, r24
    1ccc:	23 8f       	std	Z+27, r18	; 0x1b
    1cce:	8e 81       	ldd	r24, Y+6	; 0x06
    1cd0:	9f 81       	ldd	r25, Y+7	; 0x07
    1cd2:	2a 81       	ldd	r18, Y+2	; 0x02
    1cd4:	fc 01       	movw	r30, r24
    1cd6:	24 8f       	std	Z+28, r18	; 0x1c
    1cd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1cda:	9f 81       	ldd	r25, Y+7	; 0x07
    1cdc:	61 e0       	ldi	r22, 0x01	; 1
    1cde:	0e 94 5d 0d 	call	0x1aba	; 0x1aba <xQueueGenericReset>
    1ce2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ce4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ce6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ce8:	fc 01       	movw	r30, r24
    1cea:	20 a3       	std	Z+32, r18	; 0x20
    1cec:	27 96       	adiw	r28, 0x07	; 7
    1cee:	0f b6       	in	r0, 0x3f	; 63
    1cf0:	f8 94       	cli
    1cf2:	de bf       	out	0x3e, r29	; 62
    1cf4:	0f be       	out	0x3f, r0	; 63
    1cf6:	cd bf       	out	0x3d, r28	; 61
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	08 95       	ret

00001d02 <prvInitialiseMutex>:
    1d02:	cf 93       	push	r28
    1d04:	df 93       	push	r29
    1d06:	00 d0       	rcall	.+0      	; 0x1d08 <prvInitialiseMutex+0x6>
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	9a 83       	std	Y+2, r25	; 0x02
    1d0e:	89 83       	std	Y+1, r24	; 0x01
    1d10:	89 81       	ldd	r24, Y+1	; 0x01
    1d12:	9a 81       	ldd	r25, Y+2	; 0x02
    1d14:	89 2b       	or	r24, r25
    1d16:	b9 f0       	breq	.+46     	; 0x1d46 <prvInitialiseMutex+0x44>
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d1c:	fc 01       	movw	r30, r24
    1d1e:	13 82       	std	Z+3, r1	; 0x03
    1d20:	12 82       	std	Z+2, r1	; 0x02
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	9a 81       	ldd	r25, Y+2	; 0x02
    1d26:	fc 01       	movw	r30, r24
    1d28:	11 82       	std	Z+1, r1	; 0x01
    1d2a:	10 82       	st	Z, r1
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	fc 01       	movw	r30, r24
    1d32:	16 82       	std	Z+6, r1	; 0x06
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	60 e0       	ldi	r22, 0x00	; 0
    1d40:	70 e0       	ldi	r23, 0x00	; 0
    1d42:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <xQueueGenericSend>
    1d46:	0f 90       	pop	r0
    1d48:	0f 90       	pop	r0
    1d4a:	df 91       	pop	r29
    1d4c:	cf 91       	pop	r28
    1d4e:	08 95       	ret

00001d50 <xQueueCreateMutex>:
    1d50:	cf 93       	push	r28
    1d52:	df 93       	push	r29
    1d54:	00 d0       	rcall	.+0      	; 0x1d56 <xQueueCreateMutex+0x6>
    1d56:	00 d0       	rcall	.+0      	; 0x1d58 <xQueueCreateMutex+0x8>
    1d58:	1f 92       	push	r1
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	8d 83       	std	Y+5, r24	; 0x05
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	1a 82       	std	Y+2, r1	; 0x02
    1d66:	4d 81       	ldd	r20, Y+5	; 0x05
    1d68:	6a 81       	ldd	r22, Y+2	; 0x02
    1d6a:	89 81       	ldd	r24, Y+1	; 0x01
    1d6c:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <xQueueGenericCreate>
    1d70:	9c 83       	std	Y+4, r25	; 0x04
    1d72:	8b 83       	std	Y+3, r24	; 0x03
    1d74:	8b 81       	ldd	r24, Y+3	; 0x03
    1d76:	9c 81       	ldd	r25, Y+4	; 0x04
    1d78:	0e 94 81 0e 	call	0x1d02	; 0x1d02 <prvInitialiseMutex>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	0f 90       	pop	r0
    1d82:	0f 90       	pop	r0
    1d84:	0f 90       	pop	r0
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	df 91       	pop	r29
    1d8c:	cf 91       	pop	r28
    1d8e:	08 95       	ret

00001d90 <xQueueGenericSend>:
    1d90:	cf 93       	push	r28
    1d92:	df 93       	push	r29
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    1d98:	2e 97       	sbiw	r28, 0x0e	; 14
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
    1da4:	99 87       	std	Y+9, r25	; 0x09
    1da6:	88 87       	std	Y+8, r24	; 0x08
    1da8:	7b 87       	std	Y+11, r23	; 0x0b
    1daa:	6a 87       	std	Y+10, r22	; 0x0a
    1dac:	5d 87       	std	Y+13, r21	; 0x0d
    1dae:	4c 87       	std	Y+12, r20	; 0x0c
    1db0:	2e 87       	std	Y+14, r18	; 0x0e
    1db2:	19 82       	std	Y+1, r1	; 0x01
    1db4:	88 85       	ldd	r24, Y+8	; 0x08
    1db6:	99 85       	ldd	r25, Y+9	; 0x09
    1db8:	9b 83       	std	Y+3, r25	; 0x03
    1dba:	8a 83       	std	Y+2, r24	; 0x02
    1dbc:	0f b6       	in	r0, 0x3f	; 63
    1dbe:	f8 94       	cli
    1dc0:	0f 92       	push	r0
    1dc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1dca:	8a 81       	ldd	r24, Y+2	; 0x02
    1dcc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dce:	fc 01       	movw	r30, r24
    1dd0:	83 8d       	ldd	r24, Z+27	; 0x1b
    1dd2:	28 17       	cp	r18, r24
    1dd4:	18 f0       	brcs	.+6      	; 0x1ddc <xQueueGenericSend+0x4c>
    1dd6:	8e 85       	ldd	r24, Y+14	; 0x0e
    1dd8:	82 30       	cpi	r24, 0x02	; 2
    1dda:	11 f5       	brne	.+68     	; 0x1e20 <xQueueGenericSend+0x90>
    1ddc:	2a 85       	ldd	r18, Y+10	; 0x0a
    1dde:	3b 85       	ldd	r19, Y+11	; 0x0b
    1de0:	8a 81       	ldd	r24, Y+2	; 0x02
    1de2:	9b 81       	ldd	r25, Y+3	; 0x03
    1de4:	4e 85       	ldd	r20, Y+14	; 0x0e
    1de6:	b9 01       	movw	r22, r18
    1de8:	0e 94 cf 10 	call	0x219e	; 0x219e <prvCopyDataToQueue>
    1dec:	8c 83       	std	Y+4, r24	; 0x04
    1dee:	8a 81       	ldd	r24, Y+2	; 0x02
    1df0:	9b 81       	ldd	r25, Y+3	; 0x03
    1df2:	fc 01       	movw	r30, r24
    1df4:	81 89       	ldd	r24, Z+17	; 0x11
    1df6:	88 23       	and	r24, r24
    1df8:	51 f0       	breq	.+20     	; 0x1e0e <xQueueGenericSend+0x7e>
    1dfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dfc:	9b 81       	ldd	r25, Y+3	; 0x03
    1dfe:	41 96       	adiw	r24, 0x11	; 17
    1e00:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    1e04:	88 23       	and	r24, r24
    1e06:	41 f0       	breq	.+16     	; 0x1e18 <xQueueGenericSend+0x88>
    1e08:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    1e0c:	05 c0       	rjmp	.+10     	; 0x1e18 <xQueueGenericSend+0x88>
    1e0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1e10:	88 23       	and	r24, r24
    1e12:	11 f0       	breq	.+4      	; 0x1e18 <xQueueGenericSend+0x88>
    1e14:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    1e18:	0f 90       	pop	r0
    1e1a:	0f be       	out	0x3f, r0	; 63
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	61 c0       	rjmp	.+194    	; 0x1ee2 <xQueueGenericSend+0x152>
    1e20:	8c 85       	ldd	r24, Y+12	; 0x0c
    1e22:	9d 85       	ldd	r25, Y+13	; 0x0d
    1e24:	89 2b       	or	r24, r25
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <xQueueGenericSend+0xa0>
    1e28:	0f 90       	pop	r0
    1e2a:	0f be       	out	0x3f, r0	; 63
    1e2c:	80 e0       	ldi	r24, 0x00	; 0
    1e2e:	59 c0       	rjmp	.+178    	; 0x1ee2 <xQueueGenericSend+0x152>
    1e30:	89 81       	ldd	r24, Y+1	; 0x01
    1e32:	88 23       	and	r24, r24
    1e34:	31 f4       	brne	.+12     	; 0x1e42 <xQueueGenericSend+0xb2>
    1e36:	ce 01       	movw	r24, r28
    1e38:	05 96       	adiw	r24, 0x05	; 5
    1e3a:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <vTaskSetTimeOutState>
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	89 83       	std	Y+1, r24	; 0x01
    1e42:	0f 90       	pop	r0
    1e44:	0f be       	out	0x3f, r0	; 63
    1e46:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSuspendAll>
    1e4a:	0f b6       	in	r0, 0x3f	; 63
    1e4c:	f8 94       	cli
    1e4e:	0f 92       	push	r0
    1e50:	8a 81       	ldd	r24, Y+2	; 0x02
    1e52:	9b 81       	ldd	r25, Y+3	; 0x03
    1e54:	fc 01       	movw	r30, r24
    1e56:	85 8d       	ldd	r24, Z+29	; 0x1d
    1e58:	8f 3f       	cpi	r24, 0xFF	; 255
    1e5a:	21 f4       	brne	.+8      	; 0x1e64 <xQueueGenericSend+0xd4>
    1e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e60:	fc 01       	movw	r30, r24
    1e62:	15 8e       	std	Z+29, r1	; 0x1d
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	9b 81       	ldd	r25, Y+3	; 0x03
    1e68:	fc 01       	movw	r30, r24
    1e6a:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1e6e:	21 f4       	brne	.+8      	; 0x1e78 <xQueueGenericSend+0xe8>
    1e70:	8a 81       	ldd	r24, Y+2	; 0x02
    1e72:	9b 81       	ldd	r25, Y+3	; 0x03
    1e74:	fc 01       	movw	r30, r24
    1e76:	16 8e       	std	Z+30, r1	; 0x1e
    1e78:	0f 90       	pop	r0
    1e7a:	0f be       	out	0x3f, r0	; 63
    1e7c:	9e 01       	movw	r18, r28
    1e7e:	24 5f       	subi	r18, 0xF4	; 244
    1e80:	3f 4f       	sbci	r19, 0xFF	; 255
    1e82:	ce 01       	movw	r24, r28
    1e84:	05 96       	adiw	r24, 0x05	; 5
    1e86:	b9 01       	movw	r22, r18
    1e88:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskCheckForTimeOut>
    1e8c:	88 23       	and	r24, r24
    1e8e:	01 f5       	brne	.+64     	; 0x1ed0 <xQueueGenericSend+0x140>
    1e90:	8a 81       	ldd	r24, Y+2	; 0x02
    1e92:	9b 81       	ldd	r25, Y+3	; 0x03
    1e94:	0e 94 6a 12 	call	0x24d4	; 0x24d4 <prvIsQueueFull>
    1e98:	88 23       	and	r24, r24
    1e9a:	99 f0       	breq	.+38     	; 0x1ec2 <xQueueGenericSend+0x132>
    1e9c:	2c 85       	ldd	r18, Y+12	; 0x0c
    1e9e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea4:	08 96       	adiw	r24, 0x08	; 8
    1ea6:	b9 01       	movw	r22, r18
    1ea8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <vTaskPlaceOnEventList>
    1eac:	8a 81       	ldd	r24, Y+2	; 0x02
    1eae:	9b 81       	ldd	r25, Y+3	; 0x03
    1eb0:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    1eb4:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    1eb8:	88 23       	and	r24, r24
    1eba:	91 f4       	brne	.+36     	; 0x1ee0 <xQueueGenericSend+0x150>
    1ebc:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    1ec0:	0f c0       	rjmp	.+30     	; 0x1ee0 <xQueueGenericSend+0x150>
    1ec2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec6:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    1eca:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    1ece:	76 cf       	rjmp	.-276    	; 0x1dbc <xQueueGenericSend+0x2c>
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed4:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    1ed8:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	01 c0       	rjmp	.+2      	; 0x1ee2 <xQueueGenericSend+0x152>
    1ee0:	6d cf       	rjmp	.-294    	; 0x1dbc <xQueueGenericSend+0x2c>
    1ee2:	2e 96       	adiw	r28, 0x0e	; 14
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
    1eee:	df 91       	pop	r29
    1ef0:	cf 91       	pop	r28
    1ef2:	08 95       	ret

00001ef4 <xQueueGenericSendFromISR>:
    1ef4:	cf 93       	push	r28
    1ef6:	df 93       	push	r29
    1ef8:	cd b7       	in	r28, 0x3d	; 61
    1efa:	de b7       	in	r29, 0x3e	; 62
    1efc:	2c 97       	sbiw	r28, 0x0c	; 12
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	de bf       	out	0x3e, r29	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	cd bf       	out	0x3d, r28	; 61
    1f08:	9f 83       	std	Y+7, r25	; 0x07
    1f0a:	8e 83       	std	Y+6, r24	; 0x06
    1f0c:	79 87       	std	Y+9, r23	; 0x09
    1f0e:	68 87       	std	Y+8, r22	; 0x08
    1f10:	5b 87       	std	Y+11, r21	; 0x0b
    1f12:	4a 87       	std	Y+10, r20	; 0x0a
    1f14:	2c 87       	std	Y+12, r18	; 0x0c
    1f16:	8e 81       	ldd	r24, Y+6	; 0x06
    1f18:	9f 81       	ldd	r25, Y+7	; 0x07
    1f1a:	9b 83       	std	Y+3, r25	; 0x03
    1f1c:	8a 83       	std	Y+2, r24	; 0x02
    1f1e:	1c 82       	std	Y+4, r1	; 0x04
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	9b 81       	ldd	r25, Y+3	; 0x03
    1f24:	fc 01       	movw	r30, r24
    1f26:	22 8d       	ldd	r18, Z+26	; 0x1a
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	83 8d       	ldd	r24, Z+27	; 0x1b
    1f30:	28 17       	cp	r18, r24
    1f32:	18 f0       	brcs	.+6      	; 0x1f3a <xQueueGenericSendFromISR+0x46>
    1f34:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f36:	82 30       	cpi	r24, 0x02	; 2
    1f38:	89 f5       	brne	.+98     	; 0x1f9c <xQueueGenericSendFromISR+0xa8>
    1f3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f3e:	fc 01       	movw	r30, r24
    1f40:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f42:	8d 83       	std	Y+5, r24	; 0x05
    1f44:	28 85       	ldd	r18, Y+8	; 0x08
    1f46:	39 85       	ldd	r19, Y+9	; 0x09
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4c:	4c 85       	ldd	r20, Y+12	; 0x0c
    1f4e:	b9 01       	movw	r22, r18
    1f50:	0e 94 cf 10 	call	0x219e	; 0x219e <prvCopyDataToQueue>
    1f54:	8d 81       	ldd	r24, Y+5	; 0x05
    1f56:	8f 3f       	cpi	r24, 0xFF	; 255
    1f58:	b9 f4       	brne	.+46     	; 0x1f88 <xQueueGenericSendFromISR+0x94>
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	fc 01       	movw	r30, r24
    1f60:	81 89       	ldd	r24, Z+17	; 0x11
    1f62:	88 23       	and	r24, r24
    1f64:	c1 f0       	breq	.+48     	; 0x1f96 <xQueueGenericSendFromISR+0xa2>
    1f66:	8a 81       	ldd	r24, Y+2	; 0x02
    1f68:	9b 81       	ldd	r25, Y+3	; 0x03
    1f6a:	41 96       	adiw	r24, 0x11	; 17
    1f6c:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    1f70:	88 23       	and	r24, r24
    1f72:	89 f0       	breq	.+34     	; 0x1f96 <xQueueGenericSendFromISR+0xa2>
    1f74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f76:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f78:	89 2b       	or	r24, r25
    1f7a:	69 f0       	breq	.+26     	; 0x1f96 <xQueueGenericSendFromISR+0xa2>
    1f7c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f7e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1f80:	21 e0       	ldi	r18, 0x01	; 1
    1f82:	fc 01       	movw	r30, r24
    1f84:	20 83       	st	Z, r18
    1f86:	07 c0       	rjmp	.+14     	; 0x1f96 <xQueueGenericSendFromISR+0xa2>
    1f88:	8d 81       	ldd	r24, Y+5	; 0x05
    1f8a:	8f 5f       	subi	r24, 0xFF	; 255
    1f8c:	28 2f       	mov	r18, r24
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	fc 01       	movw	r30, r24
    1f94:	26 8f       	std	Z+30, r18	; 0x1e
    1f96:	81 e0       	ldi	r24, 0x01	; 1
    1f98:	89 83       	std	Y+1, r24	; 0x01
    1f9a:	01 c0       	rjmp	.+2      	; 0x1f9e <xQueueGenericSendFromISR+0xaa>
    1f9c:	19 82       	std	Y+1, r1	; 0x01
    1f9e:	89 81       	ldd	r24, Y+1	; 0x01
    1fa0:	2c 96       	adiw	r28, 0x0c	; 12
    1fa2:	0f b6       	in	r0, 0x3f	; 63
    1fa4:	f8 94       	cli
    1fa6:	de bf       	out	0x3e, r29	; 62
    1fa8:	0f be       	out	0x3f, r0	; 63
    1faa:	cd bf       	out	0x3d, r28	; 61
    1fac:	df 91       	pop	r29
    1fae:	cf 91       	pop	r28
    1fb0:	08 95       	ret

00001fb2 <xQueueGenericReceive>:
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	cd b7       	in	r28, 0x3d	; 61
    1fb8:	de b7       	in	r29, 0x3e	; 62
    1fba:	60 97       	sbiw	r28, 0x10	; 16
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	9b 87       	std	Y+11, r25	; 0x0b
    1fc8:	8a 87       	std	Y+10, r24	; 0x0a
    1fca:	7d 87       	std	Y+13, r23	; 0x0d
    1fcc:	6c 87       	std	Y+12, r22	; 0x0c
    1fce:	5f 87       	std	Y+15, r21	; 0x0f
    1fd0:	4e 87       	std	Y+14, r20	; 0x0e
    1fd2:	28 8b       	std	Y+16, r18	; 0x10
    1fd4:	19 82       	std	Y+1, r1	; 0x01
    1fd6:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fd8:	9b 85       	ldd	r25, Y+11	; 0x0b
    1fda:	9b 83       	std	Y+3, r25	; 0x03
    1fdc:	8a 83       	std	Y+2, r24	; 0x02
    1fde:	0f b6       	in	r0, 0x3f	; 63
    1fe0:	f8 94       	cli
    1fe2:	0f 92       	push	r0
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	fc 01       	movw	r30, r24
    1fea:	82 8d       	ldd	r24, Z+26	; 0x1a
    1fec:	8c 83       	std	Y+4, r24	; 0x04
    1fee:	8c 81       	ldd	r24, Y+4	; 0x04
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <xQueueGenericReceive+0x44>
    1ff4:	51 c0       	rjmp	.+162    	; 0x2098 <xQueueGenericReceive+0xe6>
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffa:	fc 01       	movw	r30, r24
    1ffc:	86 81       	ldd	r24, Z+6	; 0x06
    1ffe:	97 81       	ldd	r25, Z+7	; 0x07
    2000:	9e 83       	std	Y+6, r25	; 0x06
    2002:	8d 83       	std	Y+5, r24	; 0x05
    2004:	2c 85       	ldd	r18, Y+12	; 0x0c
    2006:	3d 85       	ldd	r19, Y+13	; 0x0d
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	b9 01       	movw	r22, r18
    200e:	0e 94 9f 11 	call	0x233e	; 0x233e <prvCopyDataFromQueue>
    2012:	88 89       	ldd	r24, Y+16	; 0x10
    2014:	88 23       	and	r24, r24
    2016:	31 f5       	brne	.+76     	; 0x2064 <xQueueGenericReceive+0xb2>
    2018:	8c 81       	ldd	r24, Y+4	; 0x04
    201a:	2f ef       	ldi	r18, 0xFF	; 255
    201c:	28 0f       	add	r18, r24
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	fc 01       	movw	r30, r24
    2024:	22 8f       	std	Z+26, r18	; 0x1a
    2026:	8a 81       	ldd	r24, Y+2	; 0x02
    2028:	9b 81       	ldd	r25, Y+3	; 0x03
    202a:	fc 01       	movw	r30, r24
    202c:	80 81       	ld	r24, Z
    202e:	91 81       	ldd	r25, Z+1	; 0x01
    2030:	89 2b       	or	r24, r25
    2032:	41 f4       	brne	.+16     	; 0x2044 <xQueueGenericReceive+0x92>
    2034:	0e 94 d4 19 	call	0x33a8	; 0x33a8 <pvTaskIncrementMutexHeldCount>
    2038:	9c 01       	movw	r18, r24
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
    203c:	9b 81       	ldd	r25, Y+3	; 0x03
    203e:	fc 01       	movw	r30, r24
    2040:	33 83       	std	Z+3, r19	; 0x03
    2042:	22 83       	std	Z+2, r18	; 0x02
    2044:	8a 81       	ldd	r24, Y+2	; 0x02
    2046:	9b 81       	ldd	r25, Y+3	; 0x03
    2048:	fc 01       	movw	r30, r24
    204a:	80 85       	ldd	r24, Z+8	; 0x08
    204c:	88 23       	and	r24, r24
    204e:	01 f1       	breq	.+64     	; 0x2090 <xQueueGenericReceive+0xde>
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	9b 81       	ldd	r25, Y+3	; 0x03
    2054:	08 96       	adiw	r24, 0x08	; 8
    2056:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    205a:	88 23       	and	r24, r24
    205c:	c9 f0       	breq	.+50     	; 0x2090 <xQueueGenericReceive+0xde>
    205e:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    2062:	16 c0       	rjmp	.+44     	; 0x2090 <xQueueGenericReceive+0xde>
    2064:	8a 81       	ldd	r24, Y+2	; 0x02
    2066:	9b 81       	ldd	r25, Y+3	; 0x03
    2068:	2d 81       	ldd	r18, Y+5	; 0x05
    206a:	3e 81       	ldd	r19, Y+6	; 0x06
    206c:	fc 01       	movw	r30, r24
    206e:	37 83       	std	Z+7, r19	; 0x07
    2070:	26 83       	std	Z+6, r18	; 0x06
    2072:	8a 81       	ldd	r24, Y+2	; 0x02
    2074:	9b 81       	ldd	r25, Y+3	; 0x03
    2076:	fc 01       	movw	r30, r24
    2078:	81 89       	ldd	r24, Z+17	; 0x11
    207a:	88 23       	and	r24, r24
    207c:	49 f0       	breq	.+18     	; 0x2090 <xQueueGenericReceive+0xde>
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	41 96       	adiw	r24, 0x11	; 17
    2084:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    2088:	88 23       	and	r24, r24
    208a:	11 f0       	breq	.+4      	; 0x2090 <xQueueGenericReceive+0xde>
    208c:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	7a c0       	rjmp	.+244    	; 0x218c <xQueueGenericReceive+0x1da>
    2098:	8e 85       	ldd	r24, Y+14	; 0x0e
    209a:	9f 85       	ldd	r25, Y+15	; 0x0f
    209c:	89 2b       	or	r24, r25
    209e:	21 f4       	brne	.+8      	; 0x20a8 <xQueueGenericReceive+0xf6>
    20a0:	0f 90       	pop	r0
    20a2:	0f be       	out	0x3f, r0	; 63
    20a4:	80 e0       	ldi	r24, 0x00	; 0
    20a6:	72 c0       	rjmp	.+228    	; 0x218c <xQueueGenericReceive+0x1da>
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	88 23       	and	r24, r24
    20ac:	31 f4       	brne	.+12     	; 0x20ba <xQueueGenericReceive+0x108>
    20ae:	ce 01       	movw	r24, r28
    20b0:	07 96       	adiw	r24, 0x07	; 7
    20b2:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <vTaskSetTimeOutState>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	89 83       	std	Y+1, r24	; 0x01
    20ba:	0f 90       	pop	r0
    20bc:	0f be       	out	0x3f, r0	; 63
    20be:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSuspendAll>
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	0f 92       	push	r0
    20c8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ca:	9b 81       	ldd	r25, Y+3	; 0x03
    20cc:	fc 01       	movw	r30, r24
    20ce:	85 8d       	ldd	r24, Z+29	; 0x1d
    20d0:	8f 3f       	cpi	r24, 0xFF	; 255
    20d2:	21 f4       	brne	.+8      	; 0x20dc <xQueueGenericReceive+0x12a>
    20d4:	8a 81       	ldd	r24, Y+2	; 0x02
    20d6:	9b 81       	ldd	r25, Y+3	; 0x03
    20d8:	fc 01       	movw	r30, r24
    20da:	15 8e       	std	Z+29, r1	; 0x1d
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	fc 01       	movw	r30, r24
    20e2:	86 8d       	ldd	r24, Z+30	; 0x1e
    20e4:	8f 3f       	cpi	r24, 0xFF	; 255
    20e6:	21 f4       	brne	.+8      	; 0x20f0 <xQueueGenericReceive+0x13e>
    20e8:	8a 81       	ldd	r24, Y+2	; 0x02
    20ea:	9b 81       	ldd	r25, Y+3	; 0x03
    20ec:	fc 01       	movw	r30, r24
    20ee:	16 8e       	std	Z+30, r1	; 0x1e
    20f0:	0f 90       	pop	r0
    20f2:	0f be       	out	0x3f, r0	; 63
    20f4:	9e 01       	movw	r18, r28
    20f6:	22 5f       	subi	r18, 0xF2	; 242
    20f8:	3f 4f       	sbci	r19, 0xFF	; 255
    20fa:	ce 01       	movw	r24, r28
    20fc:	07 96       	adiw	r24, 0x07	; 7
    20fe:	b9 01       	movw	r22, r18
    2100:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <xTaskCheckForTimeOut>
    2104:	88 23       	and	r24, r24
    2106:	99 f5       	brne	.+102    	; 0x216e <xQueueGenericReceive+0x1bc>
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	9b 81       	ldd	r25, Y+3	; 0x03
    210c:	0e 94 4c 12 	call	0x2498	; 0x2498 <prvIsQueueEmpty>
    2110:	88 23       	and	r24, r24
    2112:	31 f1       	breq	.+76     	; 0x2160 <xQueueGenericReceive+0x1ae>
    2114:	8a 81       	ldd	r24, Y+2	; 0x02
    2116:	9b 81       	ldd	r25, Y+3	; 0x03
    2118:	fc 01       	movw	r30, r24
    211a:	80 81       	ld	r24, Z
    211c:	91 81       	ldd	r25, Z+1	; 0x01
    211e:	89 2b       	or	r24, r25
    2120:	61 f4       	brne	.+24     	; 0x213a <xQueueGenericReceive+0x188>
    2122:	0f b6       	in	r0, 0x3f	; 63
    2124:	f8 94       	cli
    2126:	0f 92       	push	r0
    2128:	8a 81       	ldd	r24, Y+2	; 0x02
    212a:	9b 81       	ldd	r25, Y+3	; 0x03
    212c:	fc 01       	movw	r30, r24
    212e:	82 81       	ldd	r24, Z+2	; 0x02
    2130:	93 81       	ldd	r25, Z+3	; 0x03
    2132:	0e 94 c0 18 	call	0x3180	; 0x3180 <vTaskPriorityInherit>
    2136:	0f 90       	pop	r0
    2138:	0f be       	out	0x3f, r0	; 63
    213a:	2e 85       	ldd	r18, Y+14	; 0x0e
    213c:	3f 85       	ldd	r19, Y+15	; 0x0f
    213e:	8a 81       	ldd	r24, Y+2	; 0x02
    2140:	9b 81       	ldd	r25, Y+3	; 0x03
    2142:	41 96       	adiw	r24, 0x11	; 17
    2144:	b9 01       	movw	r22, r18
    2146:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <vTaskPlaceOnEventList>
    214a:	8a 81       	ldd	r24, Y+2	; 0x02
    214c:	9b 81       	ldd	r25, Y+3	; 0x03
    214e:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    2152:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    2156:	88 23       	and	r24, r24
    2158:	c1 f4       	brne	.+48     	; 0x218a <xQueueGenericReceive+0x1d8>
    215a:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    215e:	15 c0       	rjmp	.+42     	; 0x218a <xQueueGenericReceive+0x1d8>
    2160:	8a 81       	ldd	r24, Y+2	; 0x02
    2162:	9b 81       	ldd	r25, Y+3	; 0x03
    2164:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    2168:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    216c:	38 cf       	rjmp	.-400    	; 0x1fde <xQueueGenericReceive+0x2c>
    216e:	8a 81       	ldd	r24, Y+2	; 0x02
    2170:	9b 81       	ldd	r25, Y+3	; 0x03
    2172:	0e 94 ef 11 	call	0x23de	; 0x23de <prvUnlockQueue>
    2176:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	9b 81       	ldd	r25, Y+3	; 0x03
    217e:	0e 94 4c 12 	call	0x2498	; 0x2498 <prvIsQueueEmpty>
    2182:	88 23       	and	r24, r24
    2184:	11 f0       	breq	.+4      	; 0x218a <xQueueGenericReceive+0x1d8>
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	01 c0       	rjmp	.+2      	; 0x218c <xQueueGenericReceive+0x1da>
    218a:	29 cf       	rjmp	.-430    	; 0x1fde <xQueueGenericReceive+0x2c>
    218c:	60 96       	adiw	r28, 0x10	; 16
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	08 95       	ret

0000219e <prvCopyDataToQueue>:
    219e:	cf 93       	push	r28
    21a0:	df 93       	push	r29
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	27 97       	sbiw	r28, 0x07	; 7
    21a8:	0f b6       	in	r0, 0x3f	; 63
    21aa:	f8 94       	cli
    21ac:	de bf       	out	0x3e, r29	; 62
    21ae:	0f be       	out	0x3f, r0	; 63
    21b0:	cd bf       	out	0x3d, r28	; 61
    21b2:	9c 83       	std	Y+4, r25	; 0x04
    21b4:	8b 83       	std	Y+3, r24	; 0x03
    21b6:	7e 83       	std	Y+6, r23	; 0x06
    21b8:	6d 83       	std	Y+5, r22	; 0x05
    21ba:	4f 83       	std	Y+7, r20	; 0x07
    21bc:	19 82       	std	Y+1, r1	; 0x01
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	fc 01       	movw	r30, r24
    21c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    21c6:	8a 83       	std	Y+2, r24	; 0x02
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	fc 01       	movw	r30, r24
    21ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    21d0:	88 23       	and	r24, r24
    21d2:	b1 f4       	brne	.+44     	; 0x2200 <prvCopyDataToQueue+0x62>
    21d4:	8b 81       	ldd	r24, Y+3	; 0x03
    21d6:	9c 81       	ldd	r25, Y+4	; 0x04
    21d8:	fc 01       	movw	r30, r24
    21da:	80 81       	ld	r24, Z
    21dc:	91 81       	ldd	r25, Z+1	; 0x01
    21de:	89 2b       	or	r24, r25
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <prvCopyDataToQueue+0x46>
    21e2:	9c c0       	rjmp	.+312    	; 0x231c <prvCopyDataToQueue+0x17e>
    21e4:	8b 81       	ldd	r24, Y+3	; 0x03
    21e6:	9c 81       	ldd	r25, Y+4	; 0x04
    21e8:	fc 01       	movw	r30, r24
    21ea:	82 81       	ldd	r24, Z+2	; 0x02
    21ec:	93 81       	ldd	r25, Z+3	; 0x03
    21ee:	0e 94 57 19 	call	0x32ae	; 0x32ae <xTaskPriorityDisinherit>
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	8b 81       	ldd	r24, Y+3	; 0x03
    21f6:	9c 81       	ldd	r25, Y+4	; 0x04
    21f8:	fc 01       	movw	r30, r24
    21fa:	13 82       	std	Z+3, r1	; 0x03
    21fc:	12 82       	std	Z+2, r1	; 0x02
    21fe:	8e c0       	rjmp	.+284    	; 0x231c <prvCopyDataToQueue+0x17e>
    2200:	8f 81       	ldd	r24, Y+7	; 0x07
    2202:	88 23       	and	r24, r24
    2204:	d9 f5       	brne	.+118    	; 0x227c <prvCopyDataToQueue+0xde>
    2206:	8b 81       	ldd	r24, Y+3	; 0x03
    2208:	9c 81       	ldd	r25, Y+4	; 0x04
    220a:	fc 01       	movw	r30, r24
    220c:	84 8d       	ldd	r24, Z+28	; 0x1c
    220e:	48 2f       	mov	r20, r24
    2210:	50 e0       	ldi	r21, 0x00	; 0
    2212:	8b 81       	ldd	r24, Y+3	; 0x03
    2214:	9c 81       	ldd	r25, Y+4	; 0x04
    2216:	fc 01       	movw	r30, r24
    2218:	84 81       	ldd	r24, Z+4	; 0x04
    221a:	95 81       	ldd	r25, Z+5	; 0x05
    221c:	2d 81       	ldd	r18, Y+5	; 0x05
    221e:	3e 81       	ldd	r19, Y+6	; 0x06
    2220:	b9 01       	movw	r22, r18
    2222:	0e 94 2e 1c 	call	0x385c	; 0x385c <memcpy>
    2226:	8b 81       	ldd	r24, Y+3	; 0x03
    2228:	9c 81       	ldd	r25, Y+4	; 0x04
    222a:	fc 01       	movw	r30, r24
    222c:	24 81       	ldd	r18, Z+4	; 0x04
    222e:	35 81       	ldd	r19, Z+5	; 0x05
    2230:	8b 81       	ldd	r24, Y+3	; 0x03
    2232:	9c 81       	ldd	r25, Y+4	; 0x04
    2234:	fc 01       	movw	r30, r24
    2236:	84 8d       	ldd	r24, Z+28	; 0x1c
    2238:	88 2f       	mov	r24, r24
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	28 0f       	add	r18, r24
    223e:	39 1f       	adc	r19, r25
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	fc 01       	movw	r30, r24
    2246:	35 83       	std	Z+5, r19	; 0x05
    2248:	24 83       	std	Z+4, r18	; 0x04
    224a:	8b 81       	ldd	r24, Y+3	; 0x03
    224c:	9c 81       	ldd	r25, Y+4	; 0x04
    224e:	fc 01       	movw	r30, r24
    2250:	24 81       	ldd	r18, Z+4	; 0x04
    2252:	35 81       	ldd	r19, Z+5	; 0x05
    2254:	8b 81       	ldd	r24, Y+3	; 0x03
    2256:	9c 81       	ldd	r25, Y+4	; 0x04
    2258:	fc 01       	movw	r30, r24
    225a:	82 81       	ldd	r24, Z+2	; 0x02
    225c:	93 81       	ldd	r25, Z+3	; 0x03
    225e:	28 17       	cp	r18, r24
    2260:	39 07       	cpc	r19, r25
    2262:	08 f4       	brcc	.+2      	; 0x2266 <prvCopyDataToQueue+0xc8>
    2264:	5b c0       	rjmp	.+182    	; 0x231c <prvCopyDataToQueue+0x17e>
    2266:	8b 81       	ldd	r24, Y+3	; 0x03
    2268:	9c 81       	ldd	r25, Y+4	; 0x04
    226a:	fc 01       	movw	r30, r24
    226c:	20 81       	ld	r18, Z
    226e:	31 81       	ldd	r19, Z+1	; 0x01
    2270:	8b 81       	ldd	r24, Y+3	; 0x03
    2272:	9c 81       	ldd	r25, Y+4	; 0x04
    2274:	fc 01       	movw	r30, r24
    2276:	35 83       	std	Z+5, r19	; 0x05
    2278:	24 83       	std	Z+4, r18	; 0x04
    227a:	50 c0       	rjmp	.+160    	; 0x231c <prvCopyDataToQueue+0x17e>
    227c:	8b 81       	ldd	r24, Y+3	; 0x03
    227e:	9c 81       	ldd	r25, Y+4	; 0x04
    2280:	fc 01       	movw	r30, r24
    2282:	84 8d       	ldd	r24, Z+28	; 0x1c
    2284:	48 2f       	mov	r20, r24
    2286:	50 e0       	ldi	r21, 0x00	; 0
    2288:	8b 81       	ldd	r24, Y+3	; 0x03
    228a:	9c 81       	ldd	r25, Y+4	; 0x04
    228c:	fc 01       	movw	r30, r24
    228e:	86 81       	ldd	r24, Z+6	; 0x06
    2290:	97 81       	ldd	r25, Z+7	; 0x07
    2292:	2d 81       	ldd	r18, Y+5	; 0x05
    2294:	3e 81       	ldd	r19, Y+6	; 0x06
    2296:	b9 01       	movw	r22, r18
    2298:	0e 94 2e 1c 	call	0x385c	; 0x385c <memcpy>
    229c:	8b 81       	ldd	r24, Y+3	; 0x03
    229e:	9c 81       	ldd	r25, Y+4	; 0x04
    22a0:	fc 01       	movw	r30, r24
    22a2:	26 81       	ldd	r18, Z+6	; 0x06
    22a4:	37 81       	ldd	r19, Z+7	; 0x07
    22a6:	8b 81       	ldd	r24, Y+3	; 0x03
    22a8:	9c 81       	ldd	r25, Y+4	; 0x04
    22aa:	fc 01       	movw	r30, r24
    22ac:	84 8d       	ldd	r24, Z+28	; 0x1c
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	91 95       	neg	r25
    22b4:	81 95       	neg	r24
    22b6:	91 09       	sbc	r25, r1
    22b8:	28 0f       	add	r18, r24
    22ba:	39 1f       	adc	r19, r25
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	fc 01       	movw	r30, r24
    22c2:	37 83       	std	Z+7, r19	; 0x07
    22c4:	26 83       	std	Z+6, r18	; 0x06
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	9c 81       	ldd	r25, Y+4	; 0x04
    22ca:	fc 01       	movw	r30, r24
    22cc:	26 81       	ldd	r18, Z+6	; 0x06
    22ce:	37 81       	ldd	r19, Z+7	; 0x07
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	fc 01       	movw	r30, r24
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	28 17       	cp	r18, r24
    22dc:	39 07       	cpc	r19, r25
    22de:	a8 f4       	brcc	.+42     	; 0x230a <prvCopyDataToQueue+0x16c>
    22e0:	8b 81       	ldd	r24, Y+3	; 0x03
    22e2:	9c 81       	ldd	r25, Y+4	; 0x04
    22e4:	fc 01       	movw	r30, r24
    22e6:	22 81       	ldd	r18, Z+2	; 0x02
    22e8:	33 81       	ldd	r19, Z+3	; 0x03
    22ea:	8b 81       	ldd	r24, Y+3	; 0x03
    22ec:	9c 81       	ldd	r25, Y+4	; 0x04
    22ee:	fc 01       	movw	r30, r24
    22f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	91 95       	neg	r25
    22f8:	81 95       	neg	r24
    22fa:	91 09       	sbc	r25, r1
    22fc:	28 0f       	add	r18, r24
    22fe:	39 1f       	adc	r19, r25
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	fc 01       	movw	r30, r24
    2306:	37 83       	std	Z+7, r19	; 0x07
    2308:	26 83       	std	Z+6, r18	; 0x06
    230a:	8f 81       	ldd	r24, Y+7	; 0x07
    230c:	82 30       	cpi	r24, 0x02	; 2
    230e:	31 f4       	brne	.+12     	; 0x231c <prvCopyDataToQueue+0x17e>
    2310:	8a 81       	ldd	r24, Y+2	; 0x02
    2312:	88 23       	and	r24, r24
    2314:	19 f0       	breq	.+6      	; 0x231c <prvCopyDataToQueue+0x17e>
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	81 50       	subi	r24, 0x01	; 1
    231a:	8a 83       	std	Y+2, r24	; 0x02
    231c:	8a 81       	ldd	r24, Y+2	; 0x02
    231e:	21 e0       	ldi	r18, 0x01	; 1
    2320:	28 0f       	add	r18, r24
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	fc 01       	movw	r30, r24
    2328:	22 8f       	std	Z+26, r18	; 0x1a
    232a:	89 81       	ldd	r24, Y+1	; 0x01
    232c:	27 96       	adiw	r28, 0x07	; 7
    232e:	0f b6       	in	r0, 0x3f	; 63
    2330:	f8 94       	cli
    2332:	de bf       	out	0x3e, r29	; 62
    2334:	0f be       	out	0x3f, r0	; 63
    2336:	cd bf       	out	0x3d, r28	; 61
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	08 95       	ret

0000233e <prvCopyDataFromQueue>:
    233e:	cf 93       	push	r28
    2340:	df 93       	push	r29
    2342:	00 d0       	rcall	.+0      	; 0x2344 <prvCopyDataFromQueue+0x6>
    2344:	00 d0       	rcall	.+0      	; 0x2346 <prvCopyDataFromQueue+0x8>
    2346:	cd b7       	in	r28, 0x3d	; 61
    2348:	de b7       	in	r29, 0x3e	; 62
    234a:	9a 83       	std	Y+2, r25	; 0x02
    234c:	89 83       	std	Y+1, r24	; 0x01
    234e:	7c 83       	std	Y+4, r23	; 0x04
    2350:	6b 83       	std	Y+3, r22	; 0x03
    2352:	89 81       	ldd	r24, Y+1	; 0x01
    2354:	9a 81       	ldd	r25, Y+2	; 0x02
    2356:	fc 01       	movw	r30, r24
    2358:	84 8d       	ldd	r24, Z+28	; 0x1c
    235a:	88 23       	and	r24, r24
    235c:	c9 f1       	breq	.+114    	; 0x23d0 <prvCopyDataFromQueue+0x92>
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	fc 01       	movw	r30, r24
    2364:	26 81       	ldd	r18, Z+6	; 0x06
    2366:	37 81       	ldd	r19, Z+7	; 0x07
    2368:	89 81       	ldd	r24, Y+1	; 0x01
    236a:	9a 81       	ldd	r25, Y+2	; 0x02
    236c:	fc 01       	movw	r30, r24
    236e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2370:	88 2f       	mov	r24, r24
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	28 0f       	add	r18, r24
    2376:	39 1f       	adc	r19, r25
    2378:	89 81       	ldd	r24, Y+1	; 0x01
    237a:	9a 81       	ldd	r25, Y+2	; 0x02
    237c:	fc 01       	movw	r30, r24
    237e:	37 83       	std	Z+7, r19	; 0x07
    2380:	26 83       	std	Z+6, r18	; 0x06
    2382:	89 81       	ldd	r24, Y+1	; 0x01
    2384:	9a 81       	ldd	r25, Y+2	; 0x02
    2386:	fc 01       	movw	r30, r24
    2388:	26 81       	ldd	r18, Z+6	; 0x06
    238a:	37 81       	ldd	r19, Z+7	; 0x07
    238c:	89 81       	ldd	r24, Y+1	; 0x01
    238e:	9a 81       	ldd	r25, Y+2	; 0x02
    2390:	fc 01       	movw	r30, r24
    2392:	82 81       	ldd	r24, Z+2	; 0x02
    2394:	93 81       	ldd	r25, Z+3	; 0x03
    2396:	28 17       	cp	r18, r24
    2398:	39 07       	cpc	r19, r25
    239a:	50 f0       	brcs	.+20     	; 0x23b0 <prvCopyDataFromQueue+0x72>
    239c:	89 81       	ldd	r24, Y+1	; 0x01
    239e:	9a 81       	ldd	r25, Y+2	; 0x02
    23a0:	fc 01       	movw	r30, r24
    23a2:	20 81       	ld	r18, Z
    23a4:	31 81       	ldd	r19, Z+1	; 0x01
    23a6:	89 81       	ldd	r24, Y+1	; 0x01
    23a8:	9a 81       	ldd	r25, Y+2	; 0x02
    23aa:	fc 01       	movw	r30, r24
    23ac:	37 83       	std	Z+7, r19	; 0x07
    23ae:	26 83       	std	Z+6, r18	; 0x06
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
    23b2:	9a 81       	ldd	r25, Y+2	; 0x02
    23b4:	fc 01       	movw	r30, r24
    23b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    23b8:	48 2f       	mov	r20, r24
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	89 81       	ldd	r24, Y+1	; 0x01
    23be:	9a 81       	ldd	r25, Y+2	; 0x02
    23c0:	fc 01       	movw	r30, r24
    23c2:	26 81       	ldd	r18, Z+6	; 0x06
    23c4:	37 81       	ldd	r19, Z+7	; 0x07
    23c6:	8b 81       	ldd	r24, Y+3	; 0x03
    23c8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ca:	b9 01       	movw	r22, r18
    23cc:	0e 94 2e 1c 	call	0x385c	; 0x385c <memcpy>
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	df 91       	pop	r29
    23da:	cf 91       	pop	r28
    23dc:	08 95       	ret

000023de <prvUnlockQueue>:
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	00 d0       	rcall	.+0      	; 0x23e4 <prvUnlockQueue+0x6>
    23e4:	00 d0       	rcall	.+0      	; 0x23e6 <prvUnlockQueue+0x8>
    23e6:	cd b7       	in	r28, 0x3d	; 61
    23e8:	de b7       	in	r29, 0x3e	; 62
    23ea:	9c 83       	std	Y+4, r25	; 0x04
    23ec:	8b 83       	std	Y+3, r24	; 0x03
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	0f 92       	push	r0
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	fc 01       	movw	r30, r24
    23fa:	86 8d       	ldd	r24, Z+30	; 0x1e
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	14 c0       	rjmp	.+40     	; 0x2428 <prvUnlockQueue+0x4a>
    2400:	8b 81       	ldd	r24, Y+3	; 0x03
    2402:	9c 81       	ldd	r25, Y+4	; 0x04
    2404:	fc 01       	movw	r30, r24
    2406:	81 89       	ldd	r24, Z+17	; 0x11
    2408:	88 23       	and	r24, r24
    240a:	51 f0       	breq	.+20     	; 0x2420 <prvUnlockQueue+0x42>
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	9c 81       	ldd	r25, Y+4	; 0x04
    2410:	41 96       	adiw	r24, 0x11	; 17
    2412:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    2416:	88 23       	and	r24, r24
    2418:	21 f0       	breq	.+8      	; 0x2422 <prvUnlockQueue+0x44>
    241a:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <vTaskMissedYield>
    241e:	01 c0       	rjmp	.+2      	; 0x2422 <prvUnlockQueue+0x44>
    2420:	06 c0       	rjmp	.+12     	; 0x242e <prvUnlockQueue+0x50>
    2422:	89 81       	ldd	r24, Y+1	; 0x01
    2424:	81 50       	subi	r24, 0x01	; 1
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	89 81       	ldd	r24, Y+1	; 0x01
    242a:	18 16       	cp	r1, r24
    242c:	4c f3       	brlt	.-46     	; 0x2400 <prvUnlockQueue+0x22>
    242e:	8b 81       	ldd	r24, Y+3	; 0x03
    2430:	9c 81       	ldd	r25, Y+4	; 0x04
    2432:	2f ef       	ldi	r18, 0xFF	; 255
    2434:	fc 01       	movw	r30, r24
    2436:	26 8f       	std	Z+30, r18	; 0x1e
    2438:	0f 90       	pop	r0
    243a:	0f be       	out	0x3f, r0	; 63
    243c:	0f b6       	in	r0, 0x3f	; 63
    243e:	f8 94       	cli
    2440:	0f 92       	push	r0
    2442:	8b 81       	ldd	r24, Y+3	; 0x03
    2444:	9c 81       	ldd	r25, Y+4	; 0x04
    2446:	fc 01       	movw	r30, r24
    2448:	85 8d       	ldd	r24, Z+29	; 0x1d
    244a:	8a 83       	std	Y+2, r24	; 0x02
    244c:	14 c0       	rjmp	.+40     	; 0x2476 <prvUnlockQueue+0x98>
    244e:	8b 81       	ldd	r24, Y+3	; 0x03
    2450:	9c 81       	ldd	r25, Y+4	; 0x04
    2452:	fc 01       	movw	r30, r24
    2454:	80 85       	ldd	r24, Z+8	; 0x08
    2456:	88 23       	and	r24, r24
    2458:	69 f0       	breq	.+26     	; 0x2474 <prvUnlockQueue+0x96>
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	08 96       	adiw	r24, 0x08	; 8
    2460:	0e 94 f2 16 	call	0x2de4	; 0x2de4 <xTaskRemoveFromEventList>
    2464:	88 23       	and	r24, r24
    2466:	11 f0       	breq	.+4      	; 0x246c <prvUnlockQueue+0x8e>
    2468:	0e 94 e2 17 	call	0x2fc4	; 0x2fc4 <vTaskMissedYield>
    246c:	8a 81       	ldd	r24, Y+2	; 0x02
    246e:	81 50       	subi	r24, 0x01	; 1
    2470:	8a 83       	std	Y+2, r24	; 0x02
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <prvUnlockQueue+0x98>
    2474:	03 c0       	rjmp	.+6      	; 0x247c <prvUnlockQueue+0x9e>
    2476:	8a 81       	ldd	r24, Y+2	; 0x02
    2478:	18 16       	cp	r1, r24
    247a:	4c f3       	brlt	.-46     	; 0x244e <prvUnlockQueue+0x70>
    247c:	8b 81       	ldd	r24, Y+3	; 0x03
    247e:	9c 81       	ldd	r25, Y+4	; 0x04
    2480:	2f ef       	ldi	r18, 0xFF	; 255
    2482:	fc 01       	movw	r30, r24
    2484:	25 8f       	std	Z+29, r18	; 0x1d
    2486:	0f 90       	pop	r0
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	0f 90       	pop	r0
    248c:	0f 90       	pop	r0
    248e:	0f 90       	pop	r0
    2490:	0f 90       	pop	r0
    2492:	df 91       	pop	r29
    2494:	cf 91       	pop	r28
    2496:	08 95       	ret

00002498 <prvIsQueueEmpty>:
    2498:	cf 93       	push	r28
    249a:	df 93       	push	r29
    249c:	00 d0       	rcall	.+0      	; 0x249e <prvIsQueueEmpty+0x6>
    249e:	1f 92       	push	r1
    24a0:	cd b7       	in	r28, 0x3d	; 61
    24a2:	de b7       	in	r29, 0x3e	; 62
    24a4:	9b 83       	std	Y+3, r25	; 0x03
    24a6:	8a 83       	std	Y+2, r24	; 0x02
    24a8:	0f b6       	in	r0, 0x3f	; 63
    24aa:	f8 94       	cli
    24ac:	0f 92       	push	r0
    24ae:	8a 81       	ldd	r24, Y+2	; 0x02
    24b0:	9b 81       	ldd	r25, Y+3	; 0x03
    24b2:	fc 01       	movw	r30, r24
    24b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    24b6:	88 23       	and	r24, r24
    24b8:	19 f4       	brne	.+6      	; 0x24c0 <prvIsQueueEmpty+0x28>
    24ba:	81 e0       	ldi	r24, 0x01	; 1
    24bc:	89 83       	std	Y+1, r24	; 0x01
    24be:	01 c0       	rjmp	.+2      	; 0x24c2 <prvIsQueueEmpty+0x2a>
    24c0:	19 82       	std	Y+1, r1	; 0x01
    24c2:	0f 90       	pop	r0
    24c4:	0f be       	out	0x3f, r0	; 63
    24c6:	89 81       	ldd	r24, Y+1	; 0x01
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	0f 90       	pop	r0
    24ce:	df 91       	pop	r29
    24d0:	cf 91       	pop	r28
    24d2:	08 95       	ret

000024d4 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	00 d0       	rcall	.+0      	; 0x24da <prvIsQueueFull+0x6>
    24da:	1f 92       	push	r1
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	9b 83       	std	Y+3, r25	; 0x03
    24e2:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    24e4:	0f b6       	in	r0, 0x3f	; 63
    24e6:	f8 94       	cli
    24e8:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    24ea:	8a 81       	ldd	r24, Y+2	; 0x02
    24ec:	9b 81       	ldd	r25, Y+3	; 0x03
    24ee:	fc 01       	movw	r30, r24
    24f0:	22 8d       	ldd	r18, Z+26	; 0x1a
    24f2:	8a 81       	ldd	r24, Y+2	; 0x02
    24f4:	9b 81       	ldd	r25, Y+3	; 0x03
    24f6:	fc 01       	movw	r30, r24
    24f8:	83 8d       	ldd	r24, Z+27	; 0x1b
    24fa:	28 17       	cp	r18, r24
    24fc:	19 f4       	brne	.+6      	; 0x2504 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    24fe:	81 e0       	ldi	r24, 0x01	; 1
    2500:	89 83       	std	Y+1, r24	; 0x01
    2502:	01 c0       	rjmp	.+2      	; 0x2506 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    2504:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2506:	0f 90       	pop	r0
    2508:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    250a:	89 81       	ldd	r24, Y+1	; 0x01
}
    250c:	0f 90       	pop	r0
    250e:	0f 90       	pop	r0
    2510:	0f 90       	pop	r0
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret

00002518 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2518:	8f 92       	push	r8
    251a:	9f 92       	push	r9
    251c:	af 92       	push	r10
    251e:	bf 92       	push	r11
    2520:	cf 92       	push	r12
    2522:	df 92       	push	r13
    2524:	ef 92       	push	r14
    2526:	ff 92       	push	r15
    2528:	0f 93       	push	r16
    252a:	1f 93       	push	r17
    252c:	cf 93       	push	r28
    252e:	df 93       	push	r29
    2530:	cd b7       	in	r28, 0x3d	; 61
    2532:	de b7       	in	r29, 0x3e	; 62
    2534:	60 97       	sbiw	r28, 0x10	; 16
    2536:	0f b6       	in	r0, 0x3f	; 63
    2538:	f8 94       	cli
    253a:	de bf       	out	0x3e, r29	; 62
    253c:	0f be       	out	0x3f, r0	; 63
    253e:	cd bf       	out	0x3d, r28	; 61
    2540:	9f 83       	std	Y+7, r25	; 0x07
    2542:	8e 83       	std	Y+6, r24	; 0x06
    2544:	79 87       	std	Y+9, r23	; 0x09
    2546:	68 87       	std	Y+8, r22	; 0x08
    2548:	5b 87       	std	Y+11, r21	; 0x0b
    254a:	4a 87       	std	Y+10, r20	; 0x0a
    254c:	3d 87       	std	Y+13, r19	; 0x0d
    254e:	2c 87       	std	Y+12, r18	; 0x0c
    2550:	0e 87       	std	Y+14, r16	; 0x0e
    2552:	f8 8a       	std	Y+16, r15	; 0x10
    2554:	ef 86       	std	Y+15, r14	; 0x0f
    2556:	8a 85       	ldd	r24, Y+10	; 0x0a
    2558:	9b 85       	ldd	r25, Y+11	; 0x0b
    255a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <pvPortMalloc>
    255e:	9d 83       	std	Y+5, r25	; 0x05
    2560:	8c 83       	std	Y+4, r24	; 0x04
    2562:	8c 81       	ldd	r24, Y+4	; 0x04
    2564:	9d 81       	ldd	r25, Y+5	; 0x05
    2566:	89 2b       	or	r24, r25
    2568:	b9 f0       	breq	.+46     	; 0x2598 <xTaskCreate+0x80>
    256a:	8c e2       	ldi	r24, 0x2C	; 44
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <pvPortMalloc>
    2572:	9a 83       	std	Y+2, r25	; 0x02
    2574:	89 83       	std	Y+1, r24	; 0x01
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	9a 81       	ldd	r25, Y+2	; 0x02
    257a:	89 2b       	or	r24, r25
    257c:	41 f0       	breq	.+16     	; 0x258e <xTaskCreate+0x76>
    257e:	89 81       	ldd	r24, Y+1	; 0x01
    2580:	9a 81       	ldd	r25, Y+2	; 0x02
    2582:	2c 81       	ldd	r18, Y+4	; 0x04
    2584:	3d 81       	ldd	r19, Y+5	; 0x05
    2586:	fc 01       	movw	r30, r24
    2588:	30 8f       	std	Z+24, r19	; 0x18
    258a:	27 8b       	std	Z+23, r18	; 0x17
    258c:	07 c0       	rjmp	.+14     	; 0x259c <xTaskCreate+0x84>
    258e:	8c 81       	ldd	r24, Y+4	; 0x04
    2590:	9d 81       	ldd	r25, Y+5	; 0x05
    2592:	0e 94 2c 0b 	call	0x1658	; 0x1658 <vPortFree>
    2596:	02 c0       	rjmp	.+4      	; 0x259c <xTaskCreate+0x84>
    2598:	1a 82       	std	Y+2, r1	; 0x02
    259a:	19 82       	std	Y+1, r1	; 0x01
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	89 2b       	or	r24, r25
    25a2:	09 f1       	breq	.+66     	; 0x25e6 <xTaskCreate+0xce>
    25a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    25a6:	9b 85       	ldd	r25, Y+11	; 0x0b
    25a8:	cc 01       	movw	r24, r24
    25aa:	a0 e0       	ldi	r26, 0x00	; 0
    25ac:	b0 e0       	ldi	r27, 0x00	; 0
    25ae:	09 81       	ldd	r16, Y+1	; 0x01
    25b0:	1a 81       	ldd	r17, Y+2	; 0x02
    25b2:	4f 85       	ldd	r20, Y+15	; 0x0f
    25b4:	58 89       	ldd	r21, Y+16	; 0x10
    25b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    25b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    25ba:	68 85       	ldd	r22, Y+8	; 0x08
    25bc:	79 85       	ldd	r23, Y+9	; 0x09
    25be:	ee 81       	ldd	r30, Y+6	; 0x06
    25c0:	ff 81       	ldd	r31, Y+7	; 0x07
    25c2:	81 2c       	mov	r8, r1
    25c4:	91 2c       	mov	r9, r1
    25c6:	58 01       	movw	r10, r16
    25c8:	6a 01       	movw	r12, r20
    25ca:	ee 84       	ldd	r14, Y+14	; 0x0e
    25cc:	89 01       	movw	r16, r18
    25ce:	9c 01       	movw	r18, r24
    25d0:	ad 01       	movw	r20, r26
    25d2:	cf 01       	movw	r24, r30
    25d4:	0e 94 09 13 	call	0x2612	; 0x2612 <prvInitialiseNewTask>
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	9a 81       	ldd	r25, Y+2	; 0x02
    25dc:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <prvAddNewTaskToReadyList>
    25e0:	81 e0       	ldi	r24, 0x01	; 1
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	02 c0       	rjmp	.+4      	; 0x25ea <xTaskCreate+0xd2>
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	8b 83       	std	Y+3, r24	; 0x03
    25ea:	8b 81       	ldd	r24, Y+3	; 0x03
    25ec:	60 96       	adiw	r28, 0x10	; 16
    25ee:	0f b6       	in	r0, 0x3f	; 63
    25f0:	f8 94       	cli
    25f2:	de bf       	out	0x3e, r29	; 62
    25f4:	0f be       	out	0x3f, r0	; 63
    25f6:	cd bf       	out	0x3d, r28	; 61
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
    2608:	bf 90       	pop	r11
    260a:	af 90       	pop	r10
    260c:	9f 90       	pop	r9
    260e:	8f 90       	pop	r8
    2610:	08 95       	ret

00002612 <prvInitialiseNewTask>:
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	64 97       	sbiw	r28, 0x14	; 20
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	9d 83       	std	Y+5, r25	; 0x05
    263a:	8c 83       	std	Y+4, r24	; 0x04
    263c:	7f 83       	std	Y+7, r23	; 0x07
    263e:	6e 83       	std	Y+6, r22	; 0x06
    2640:	28 87       	std	Y+8, r18	; 0x08
    2642:	39 87       	std	Y+9, r19	; 0x09
    2644:	4a 87       	std	Y+10, r20	; 0x0a
    2646:	5b 87       	std	Y+11, r21	; 0x0b
    2648:	1d 87       	std	Y+13, r17	; 0x0d
    264a:	0c 87       	std	Y+12, r16	; 0x0c
    264c:	ee 86       	std	Y+14, r14	; 0x0e
    264e:	d8 8a       	std	Y+16, r13	; 0x10
    2650:	cf 86       	std	Y+15, r12	; 0x0f
    2652:	ba 8a       	std	Y+18, r11	; 0x12
    2654:	a9 8a       	std	Y+17, r10	; 0x11
    2656:	9c 8a       	std	Y+20, r9	; 0x14
    2658:	8b 8a       	std	Y+19, r8	; 0x13
    265a:	28 85       	ldd	r18, Y+8	; 0x08
    265c:	39 85       	ldd	r19, Y+9	; 0x09
    265e:	89 89       	ldd	r24, Y+17	; 0x11
    2660:	9a 89       	ldd	r25, Y+18	; 0x12
    2662:	fc 01       	movw	r30, r24
    2664:	87 89       	ldd	r24, Z+23	; 0x17
    2666:	90 8d       	ldd	r25, Z+24	; 0x18
    2668:	a9 01       	movw	r20, r18
    266a:	65 ea       	ldi	r22, 0xA5	; 165
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	0e 94 37 1c 	call	0x386e	; 0x386e <memset>
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	fc 01       	movw	r30, r24
    2678:	27 89       	ldd	r18, Z+23	; 0x17
    267a:	30 8d       	ldd	r19, Z+24	; 0x18
    267c:	88 85       	ldd	r24, Y+8	; 0x08
    267e:	99 85       	ldd	r25, Y+9	; 0x09
    2680:	01 97       	sbiw	r24, 0x01	; 1
    2682:	82 0f       	add	r24, r18
    2684:	93 1f       	adc	r25, r19
    2686:	9b 83       	std	Y+3, r25	; 0x03
    2688:	8a 83       	std	Y+2, r24	; 0x02
    268a:	19 82       	std	Y+1, r1	; 0x01
    268c:	22 c0       	rjmp	.+68     	; 0x26d2 <prvInitialiseNewTask+0xc0>
    268e:	89 81       	ldd	r24, Y+1	; 0x01
    2690:	88 2f       	mov	r24, r24
    2692:	90 e0       	ldi	r25, 0x00	; 0
    2694:	29 81       	ldd	r18, Y+1	; 0x01
    2696:	22 2f       	mov	r18, r18
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4e 81       	ldd	r20, Y+6	; 0x06
    269c:	5f 81       	ldd	r21, Y+7	; 0x07
    269e:	24 0f       	add	r18, r20
    26a0:	35 1f       	adc	r19, r21
    26a2:	f9 01       	movw	r30, r18
    26a4:	40 81       	ld	r20, Z
    26a6:	29 89       	ldd	r18, Y+17	; 0x11
    26a8:	3a 89       	ldd	r19, Y+18	; 0x12
    26aa:	82 0f       	add	r24, r18
    26ac:	93 1f       	adc	r25, r19
    26ae:	49 96       	adiw	r24, 0x19	; 25
    26b0:	fc 01       	movw	r30, r24
    26b2:	40 83       	st	Z, r20
    26b4:	89 81       	ldd	r24, Y+1	; 0x01
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	2e 81       	ldd	r18, Y+6	; 0x06
    26bc:	3f 81       	ldd	r19, Y+7	; 0x07
    26be:	82 0f       	add	r24, r18
    26c0:	93 1f       	adc	r25, r19
    26c2:	fc 01       	movw	r30, r24
    26c4:	80 81       	ld	r24, Z
    26c6:	88 23       	and	r24, r24
    26c8:	09 f4       	brne	.+2      	; 0x26cc <prvInitialiseNewTask+0xba>
    26ca:	06 c0       	rjmp	.+12     	; 0x26d8 <prvInitialiseNewTask+0xc6>
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	8f 5f       	subi	r24, 0xFF	; 255
    26d0:	89 83       	std	Y+1, r24	; 0x01
    26d2:	89 81       	ldd	r24, Y+1	; 0x01
    26d4:	88 30       	cpi	r24, 0x08	; 8
    26d6:	d8 f2       	brcs	.-74     	; 0x268e <prvInitialiseNewTask+0x7c>
    26d8:	89 89       	ldd	r24, Y+17	; 0x11
    26da:	9a 89       	ldd	r25, Y+18	; 0x12
    26dc:	fc 01       	movw	r30, r24
    26de:	10 a2       	std	Z+32, r1	; 0x20
    26e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    26e2:	84 30       	cpi	r24, 0x04	; 4
    26e4:	10 f0       	brcs	.+4      	; 0x26ea <prvInitialiseNewTask+0xd8>
    26e6:	83 e0       	ldi	r24, 0x03	; 3
    26e8:	8e 87       	std	Y+14, r24	; 0x0e
    26ea:	89 89       	ldd	r24, Y+17	; 0x11
    26ec:	9a 89       	ldd	r25, Y+18	; 0x12
    26ee:	2e 85       	ldd	r18, Y+14	; 0x0e
    26f0:	fc 01       	movw	r30, r24
    26f2:	26 8b       	std	Z+22, r18	; 0x16
    26f4:	89 89       	ldd	r24, Y+17	; 0x11
    26f6:	9a 89       	ldd	r25, Y+18	; 0x12
    26f8:	2e 85       	ldd	r18, Y+14	; 0x0e
    26fa:	fc 01       	movw	r30, r24
    26fc:	23 a3       	std	Z+35, r18	; 0x23
    26fe:	89 89       	ldd	r24, Y+17	; 0x11
    2700:	9a 89       	ldd	r25, Y+18	; 0x12
    2702:	fc 01       	movw	r30, r24
    2704:	14 a2       	std	Z+36, r1	; 0x24
    2706:	89 89       	ldd	r24, Y+17	; 0x11
    2708:	9a 89       	ldd	r25, Y+18	; 0x12
    270a:	02 96       	adiw	r24, 0x02	; 2
    270c:	0e 94 b2 06 	call	0xd64	; 0xd64 <vListInitialiseItem>
    2710:	89 89       	ldd	r24, Y+17	; 0x11
    2712:	9a 89       	ldd	r25, Y+18	; 0x12
    2714:	0c 96       	adiw	r24, 0x0c	; 12
    2716:	0e 94 b2 06 	call	0xd64	; 0xd64 <vListInitialiseItem>
    271a:	89 89       	ldd	r24, Y+17	; 0x11
    271c:	9a 89       	ldd	r25, Y+18	; 0x12
    271e:	29 89       	ldd	r18, Y+17	; 0x11
    2720:	3a 89       	ldd	r19, Y+18	; 0x12
    2722:	fc 01       	movw	r30, r24
    2724:	31 87       	std	Z+9, r19	; 0x09
    2726:	20 87       	std	Z+8, r18	; 0x08
    2728:	8e 85       	ldd	r24, Y+14	; 0x0e
    272a:	88 2f       	mov	r24, r24
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	24 e0       	ldi	r18, 0x04	; 4
    2730:	30 e0       	ldi	r19, 0x00	; 0
    2732:	28 1b       	sub	r18, r24
    2734:	39 0b       	sbc	r19, r25
    2736:	89 89       	ldd	r24, Y+17	; 0x11
    2738:	9a 89       	ldd	r25, Y+18	; 0x12
    273a:	fc 01       	movw	r30, r24
    273c:	35 87       	std	Z+13, r19	; 0x0d
    273e:	24 87       	std	Z+12, r18	; 0x0c
    2740:	89 89       	ldd	r24, Y+17	; 0x11
    2742:	9a 89       	ldd	r25, Y+18	; 0x12
    2744:	29 89       	ldd	r18, Y+17	; 0x11
    2746:	3a 89       	ldd	r19, Y+18	; 0x12
    2748:	fc 01       	movw	r30, r24
    274a:	33 8b       	std	Z+19, r19	; 0x13
    274c:	22 8b       	std	Z+18, r18	; 0x12
    274e:	89 89       	ldd	r24, Y+17	; 0x11
    2750:	9a 89       	ldd	r25, Y+18	; 0x12
    2752:	fc 01       	movw	r30, r24
    2754:	16 a2       	std	Z+38, r1	; 0x26
    2756:	15 a2       	std	Z+37, r1	; 0x25
    2758:	89 89       	ldd	r24, Y+17	; 0x11
    275a:	9a 89       	ldd	r25, Y+18	; 0x12
    275c:	fc 01       	movw	r30, r24
    275e:	17 a2       	std	Z+39, r1	; 0x27
    2760:	10 a6       	std	Z+40, r1	; 0x28
    2762:	11 a6       	std	Z+41, r1	; 0x29
    2764:	12 a6       	std	Z+42, r1	; 0x2a
    2766:	89 89       	ldd	r24, Y+17	; 0x11
    2768:	9a 89       	ldd	r25, Y+18	; 0x12
    276a:	fc 01       	movw	r30, r24
    276c:	13 a6       	std	Z+43, r1	; 0x2b
    276e:	4c 85       	ldd	r20, Y+12	; 0x0c
    2770:	5d 85       	ldd	r21, Y+13	; 0x0d
    2772:	2c 81       	ldd	r18, Y+4	; 0x04
    2774:	3d 81       	ldd	r19, Y+5	; 0x05
    2776:	8a 81       	ldd	r24, Y+2	; 0x02
    2778:	9b 81       	ldd	r25, Y+3	; 0x03
    277a:	b9 01       	movw	r22, r18
    277c:	0e 94 df 07 	call	0xfbe	; 0xfbe <pxPortInitialiseStack>
    2780:	9c 01       	movw	r18, r24
    2782:	89 89       	ldd	r24, Y+17	; 0x11
    2784:	9a 89       	ldd	r25, Y+18	; 0x12
    2786:	fc 01       	movw	r30, r24
    2788:	31 83       	std	Z+1, r19	; 0x01
    278a:	20 83       	st	Z, r18
    278c:	8f 85       	ldd	r24, Y+15	; 0x0f
    278e:	98 89       	ldd	r25, Y+16	; 0x10
    2790:	89 2b       	or	r24, r25
    2792:	39 f0       	breq	.+14     	; 0x27a2 <prvInitialiseNewTask+0x190>
    2794:	8f 85       	ldd	r24, Y+15	; 0x0f
    2796:	98 89       	ldd	r25, Y+16	; 0x10
    2798:	29 89       	ldd	r18, Y+17	; 0x11
    279a:	3a 89       	ldd	r19, Y+18	; 0x12
    279c:	fc 01       	movw	r30, r24
    279e:	31 83       	std	Z+1, r19	; 0x01
    27a0:	20 83       	st	Z, r18
    27a2:	64 96       	adiw	r28, 0x14	; 20
    27a4:	0f b6       	in	r0, 0x3f	; 63
    27a6:	f8 94       	cli
    27a8:	de bf       	out	0x3e, r29	; 62
    27aa:	0f be       	out	0x3f, r0	; 63
    27ac:	cd bf       	out	0x3d, r28	; 61
    27ae:	df 91       	pop	r29
    27b0:	cf 91       	pop	r28
    27b2:	1f 91       	pop	r17
    27b4:	0f 91       	pop	r16
    27b6:	ef 90       	pop	r14
    27b8:	df 90       	pop	r13
    27ba:	cf 90       	pop	r12
    27bc:	bf 90       	pop	r11
    27be:	af 90       	pop	r10
    27c0:	9f 90       	pop	r9
    27c2:	8f 90       	pop	r8
    27c4:	08 95       	ret

000027c6 <prvAddNewTaskToReadyList>:
    27c6:	cf 93       	push	r28
    27c8:	df 93       	push	r29
    27ca:	00 d0       	rcall	.+0      	; 0x27cc <prvAddNewTaskToReadyList+0x6>
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	9a 83       	std	Y+2, r25	; 0x02
    27d2:	89 83       	std	Y+1, r24	; 0x01
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	0f 92       	push	r0
    27da:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    27de:	8f 5f       	subi	r24, 0xFF	; 255
    27e0:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    27e4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    27e8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    27ec:	89 2b       	or	r24, r25
    27ee:	69 f4       	brne	.+26     	; 0x280a <prvAddNewTaskToReadyList+0x44>
    27f0:	89 81       	ldd	r24, Y+1	; 0x01
    27f2:	9a 81       	ldd	r25, Y+2	; 0x02
    27f4:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    27f8:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    27fc:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    2800:	81 30       	cpi	r24, 0x01	; 1
    2802:	c9 f4       	brne	.+50     	; 0x2836 <prvAddNewTaskToReadyList+0x70>
    2804:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <prvInitialiseTaskLists>
    2808:	16 c0       	rjmp	.+44     	; 0x2836 <prvAddNewTaskToReadyList+0x70>
    280a:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    280e:	88 23       	and	r24, r24
    2810:	91 f4       	brne	.+36     	; 0x2836 <prvAddNewTaskToReadyList+0x70>
    2812:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2816:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    281a:	fc 01       	movw	r30, r24
    281c:	26 89       	ldd	r18, Z+22	; 0x16
    281e:	89 81       	ldd	r24, Y+1	; 0x01
    2820:	9a 81       	ldd	r25, Y+2	; 0x02
    2822:	fc 01       	movw	r30, r24
    2824:	86 89       	ldd	r24, Z+22	; 0x16
    2826:	82 17       	cp	r24, r18
    2828:	30 f0       	brcs	.+12     	; 0x2836 <prvAddNewTaskToReadyList+0x70>
    282a:	89 81       	ldd	r24, Y+1	; 0x01
    282c:	9a 81       	ldd	r25, Y+2	; 0x02
    282e:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2832:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2836:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <uxTaskNumber>
    283a:	8f 5f       	subi	r24, 0xFF	; 255
    283c:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <uxTaskNumber>
    2840:	20 91 c7 05 	lds	r18, 0x05C7	; 0x8005c7 <uxTaskNumber>
    2844:	89 81       	ldd	r24, Y+1	; 0x01
    2846:	9a 81       	ldd	r25, Y+2	; 0x02
    2848:	fc 01       	movw	r30, r24
    284a:	21 a3       	std	Z+33, r18	; 0x21
    284c:	89 81       	ldd	r24, Y+1	; 0x01
    284e:	9a 81       	ldd	r25, Y+2	; 0x02
    2850:	fc 01       	movw	r30, r24
    2852:	96 89       	ldd	r25, Z+22	; 0x16
    2854:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2858:	89 17       	cp	r24, r25
    285a:	30 f4       	brcc	.+12     	; 0x2868 <prvAddNewTaskToReadyList+0xa2>
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	fc 01       	movw	r30, r24
    2862:	86 89       	ldd	r24, Z+22	; 0x16
    2864:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	9a 81       	ldd	r25, Y+2	; 0x02
    286c:	ac 01       	movw	r20, r24
    286e:	4e 5f       	subi	r20, 0xFE	; 254
    2870:	5f 4f       	sbci	r21, 0xFF	; 255
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	9a 81       	ldd	r25, Y+2	; 0x02
    2876:	fc 01       	movw	r30, r24
    2878:	86 89       	ldd	r24, Z+22	; 0x16
    287a:	28 2f       	mov	r18, r24
    287c:	30 e0       	ldi	r19, 0x00	; 0
    287e:	c9 01       	movw	r24, r18
    2880:	88 0f       	add	r24, r24
    2882:	99 1f       	adc	r25, r25
    2884:	88 0f       	add	r24, r24
    2886:	99 1f       	adc	r25, r25
    2888:	88 0f       	add	r24, r24
    288a:	99 1f       	adc	r25, r25
    288c:	82 0f       	add	r24, r18
    288e:	93 1f       	adc	r25, r19
    2890:	8e 58       	subi	r24, 0x8E	; 142
    2892:	9a 4f       	sbci	r25, 0xFA	; 250
    2894:	ba 01       	movw	r22, r20
    2896:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    289a:	0f 90       	pop	r0
    289c:	0f be       	out	0x3f, r0	; 63
    289e:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <xSchedulerRunning>
    28a2:	88 23       	and	r24, r24
    28a4:	71 f0       	breq	.+28     	; 0x28c2 <prvAddNewTaskToReadyList+0xfc>
    28a6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    28aa:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    28ae:	fc 01       	movw	r30, r24
    28b0:	26 89       	ldd	r18, Z+22	; 0x16
    28b2:	89 81       	ldd	r24, Y+1	; 0x01
    28b4:	9a 81       	ldd	r25, Y+2	; 0x02
    28b6:	fc 01       	movw	r30, r24
    28b8:	86 89       	ldd	r24, Z+22	; 0x16
    28ba:	28 17       	cp	r18, r24
    28bc:	10 f4       	brcc	.+4      	; 0x28c2 <prvAddNewTaskToReadyList+0xfc>
    28be:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    28c2:	0f 90       	pop	r0
    28c4:	0f 90       	pop	r0
    28c6:	df 91       	pop	r29
    28c8:	cf 91       	pop	r28
    28ca:	08 95       	ret

000028cc <vTaskDelay>:
    28cc:	cf 93       	push	r28
    28ce:	df 93       	push	r29
    28d0:	00 d0       	rcall	.+0      	; 0x28d2 <vTaskDelay+0x6>
    28d2:	1f 92       	push	r1
    28d4:	cd b7       	in	r28, 0x3d	; 61
    28d6:	de b7       	in	r29, 0x3e	; 62
    28d8:	9b 83       	std	Y+3, r25	; 0x03
    28da:	8a 83       	std	Y+2, r24	; 0x02
    28dc:	19 82       	std	Y+1, r1	; 0x01
    28de:	8a 81       	ldd	r24, Y+2	; 0x02
    28e0:	9b 81       	ldd	r25, Y+3	; 0x03
    28e2:	89 2b       	or	r24, r25
    28e4:	51 f0       	breq	.+20     	; 0x28fa <vTaskDelay+0x2e>
    28e6:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSuspendAll>
    28ea:	8a 81       	ldd	r24, Y+2	; 0x02
    28ec:	9b 81       	ldd	r25, Y+3	; 0x03
    28ee:	60 e0       	ldi	r22, 0x00	; 0
    28f0:	0e 94 ee 19 	call	0x33dc	; 0x33dc <prvAddCurrentTaskToDelayedList>
    28f4:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    28f8:	89 83       	std	Y+1, r24	; 0x01
    28fa:	89 81       	ldd	r24, Y+1	; 0x01
    28fc:	88 23       	and	r24, r24
    28fe:	11 f4       	brne	.+4      	; 0x2904 <vTaskDelay+0x38>
    2900:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    2904:	0f 90       	pop	r0
    2906:	0f 90       	pop	r0
    2908:	0f 90       	pop	r0
    290a:	df 91       	pop	r29
    290c:	cf 91       	pop	r28
    290e:	08 95       	ret

00002910 <vTaskStartScheduler>:
    2910:	ef 92       	push	r14
    2912:	ff 92       	push	r15
    2914:	0f 93       	push	r16
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	1f 92       	push	r1
    291c:	cd b7       	in	r28, 0x3d	; 61
    291e:	de b7       	in	r29, 0x3e	; 62
    2920:	0f 2e       	mov	r0, r31
    2922:	fa ec       	ldi	r31, 0xCA	; 202
    2924:	ef 2e       	mov	r14, r31
    2926:	f5 e0       	ldi	r31, 0x05	; 5
    2928:	ff 2e       	mov	r15, r31
    292a:	f0 2d       	mov	r31, r0
    292c:	00 e0       	ldi	r16, 0x00	; 0
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	45 e5       	ldi	r20, 0x55	; 85
    2934:	50 e0       	ldi	r21, 0x00	; 0
    2936:	66 e4       	ldi	r22, 0x46	; 70
    2938:	71 e0       	ldi	r23, 0x01	; 1
    293a:	8c ee       	ldi	r24, 0xEC	; 236
    293c:	97 e1       	ldi	r25, 0x17	; 23
    293e:	0e 94 8c 12 	call	0x2518	; 0x2518 <xTaskCreate>
    2942:	89 83       	std	Y+1, r24	; 0x01
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	81 30       	cpi	r24, 0x01	; 1
    2948:	81 f4       	brne	.+32     	; 0x296a <vTaskStartScheduler+0x5a>
    294a:	f8 94       	cli
    294c:	8f ef       	ldi	r24, 0xFF	; 255
    294e:	9f ef       	ldi	r25, 0xFF	; 255
    2950:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2954:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2958:	81 e0       	ldi	r24, 0x01	; 1
    295a:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <xSchedulerRunning>
    295e:	10 92 c1 05 	sts	0x05C1, r1	; 0x8005c1 <xTickCount+0x1>
    2962:	10 92 c0 05 	sts	0x05C0, r1	; 0x8005c0 <xTickCount>
    2966:	0e 94 88 09 	call	0x1310	; 0x1310 <xPortStartScheduler>
    296a:	0f 90       	pop	r0
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	0f 91       	pop	r16
    2972:	ff 90       	pop	r15
    2974:	ef 90       	pop	r14
    2976:	08 95       	ret

00002978 <vTaskSuspendAll>:
    2978:	cf 93       	push	r28
    297a:	df 93       	push	r29
    297c:	cd b7       	in	r28, 0x3d	; 61
    297e:	de b7       	in	r29, 0x3e	; 62
    2980:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2984:	8f 5f       	subi	r24, 0xFF	; 255
    2986:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    298a:	df 91       	pop	r29
    298c:	cf 91       	pop	r28
    298e:	08 95       	ret

00002990 <xTaskResumeAll>:
    2990:	cf 93       	push	r28
    2992:	df 93       	push	r29
    2994:	00 d0       	rcall	.+0      	; 0x2996 <xTaskResumeAll+0x6>
    2996:	00 d0       	rcall	.+0      	; 0x2998 <xTaskResumeAll+0x8>
    2998:	cd b7       	in	r28, 0x3d	; 61
    299a:	de b7       	in	r29, 0x3e	; 62
    299c:	1a 82       	std	Y+2, r1	; 0x02
    299e:	19 82       	std	Y+1, r1	; 0x01
    29a0:	1b 82       	std	Y+3, r1	; 0x03
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	f8 94       	cli
    29a6:	0f 92       	push	r0
    29a8:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    29ac:	81 50       	subi	r24, 0x01	; 1
    29ae:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxSchedulerSuspended>
    29b2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    29b6:	88 23       	and	r24, r24
    29b8:	09 f0       	breq	.+2      	; 0x29bc <xTaskResumeAll+0x2c>
    29ba:	77 c0       	rjmp	.+238    	; 0x2aaa <xTaskResumeAll+0x11a>
    29bc:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    29c0:	88 23       	and	r24, r24
    29c2:	09 f4       	brne	.+2      	; 0x29c6 <xTaskResumeAll+0x36>
    29c4:	72 c0       	rjmp	.+228    	; 0x2aaa <xTaskResumeAll+0x11a>
    29c6:	49 c0       	rjmp	.+146    	; 0x2a5a <xTaskResumeAll+0xca>
    29c8:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <xPendingReadyList+0x5>
    29cc:	90 91 b2 05 	lds	r25, 0x05B2	; 0x8005b2 <xPendingReadyList+0x6>
    29d0:	fc 01       	movw	r30, r24
    29d2:	86 81       	ldd	r24, Z+6	; 0x06
    29d4:	97 81       	ldd	r25, Z+7	; 0x07
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	0c 96       	adiw	r24, 0x0c	; 12
    29e0:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    29e4:	89 81       	ldd	r24, Y+1	; 0x01
    29e6:	9a 81       	ldd	r25, Y+2	; 0x02
    29e8:	02 96       	adiw	r24, 0x02	; 2
    29ea:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    29ee:	89 81       	ldd	r24, Y+1	; 0x01
    29f0:	9a 81       	ldd	r25, Y+2	; 0x02
    29f2:	fc 01       	movw	r30, r24
    29f4:	96 89       	ldd	r25, Z+22	; 0x16
    29f6:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    29fa:	89 17       	cp	r24, r25
    29fc:	30 f4       	brcc	.+12     	; 0x2a0a <xTaskResumeAll+0x7a>
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	9a 81       	ldd	r25, Y+2	; 0x02
    2a02:	fc 01       	movw	r30, r24
    2a04:	86 89       	ldd	r24, Z+22	; 0x16
    2a06:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	ac 01       	movw	r20, r24
    2a10:	4e 5f       	subi	r20, 0xFE	; 254
    2a12:	5f 4f       	sbci	r21, 0xFF	; 255
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	fc 01       	movw	r30, r24
    2a1a:	86 89       	ldd	r24, Z+22	; 0x16
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	c9 01       	movw	r24, r18
    2a22:	88 0f       	add	r24, r24
    2a24:	99 1f       	adc	r25, r25
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	88 0f       	add	r24, r24
    2a2c:	99 1f       	adc	r25, r25
    2a2e:	82 0f       	add	r24, r18
    2a30:	93 1f       	adc	r25, r19
    2a32:	8e 58       	subi	r24, 0x8E	; 142
    2a34:	9a 4f       	sbci	r25, 0xFA	; 250
    2a36:	ba 01       	movw	r22, r20
    2a38:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a40:	fc 01       	movw	r30, r24
    2a42:	26 89       	ldd	r18, Z+22	; 0x16
    2a44:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2a48:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2a4c:	fc 01       	movw	r30, r24
    2a4e:	86 89       	ldd	r24, Z+22	; 0x16
    2a50:	28 17       	cp	r18, r24
    2a52:	18 f0       	brcs	.+6      	; 0x2a5a <xTaskResumeAll+0xca>
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2a5a:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <xPendingReadyList>
    2a5e:	88 23       	and	r24, r24
    2a60:	09 f0       	breq	.+2      	; 0x2a64 <xTaskResumeAll+0xd4>
    2a62:	b2 cf       	rjmp	.-156    	; 0x29c8 <xTaskResumeAll+0x38>
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	9a 81       	ldd	r25, Y+2	; 0x02
    2a68:	89 2b       	or	r24, r25
    2a6a:	11 f0       	breq	.+4      	; 0x2a70 <xTaskResumeAll+0xe0>
    2a6c:	0e 94 92 18 	call	0x3124	; 0x3124 <prvResetNextTaskUnblockTime>
    2a70:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2a74:	8c 83       	std	Y+4, r24	; 0x04
    2a76:	8c 81       	ldd	r24, Y+4	; 0x04
    2a78:	88 23       	and	r24, r24
    2a7a:	79 f0       	breq	.+30     	; 0x2a9a <xTaskResumeAll+0x10a>
    2a7c:	0e 94 5f 15 	call	0x2abe	; 0x2abe <xTaskIncrementTick>
    2a80:	88 23       	and	r24, r24
    2a82:	19 f0       	breq	.+6      	; 0x2a8a <xTaskResumeAll+0xfa>
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2a8a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a8c:	81 50       	subi	r24, 0x01	; 1
    2a8e:	8c 83       	std	Y+4, r24	; 0x04
    2a90:	8c 81       	ldd	r24, Y+4	; 0x04
    2a92:	88 23       	and	r24, r24
    2a94:	99 f7       	brne	.-26     	; 0x2a7c <xTaskResumeAll+0xec>
    2a96:	10 92 c4 05 	sts	0x05C4, r1	; 0x8005c4 <uxPendedTicks>
    2a9a:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2a9e:	88 23       	and	r24, r24
    2aa0:	21 f0       	breq	.+8      	; 0x2aaa <xTaskResumeAll+0x11a>
    2aa2:	81 e0       	ldi	r24, 0x01	; 1
    2aa4:	8b 83       	std	Y+3, r24	; 0x03
    2aa6:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    2aaa:	0f 90       	pop	r0
    2aac:	0f be       	out	0x3f, r0	; 63
    2aae:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab0:	0f 90       	pop	r0
    2ab2:	0f 90       	pop	r0
    2ab4:	0f 90       	pop	r0
    2ab6:	0f 90       	pop	r0
    2ab8:	df 91       	pop	r29
    2aba:	cf 91       	pop	r28
    2abc:	08 95       	ret

00002abe <xTaskIncrementTick>:
    2abe:	cf 93       	push	r28
    2ac0:	df 93       	push	r29
    2ac2:	cd b7       	in	r28, 0x3d	; 61
    2ac4:	de b7       	in	r29, 0x3e	; 62
    2ac6:	29 97       	sbiw	r28, 0x09	; 9
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	de bf       	out	0x3e, r29	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	cd bf       	out	0x3d, r28	; 61
    2ad2:	19 82       	std	Y+1, r1	; 0x01
    2ad4:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2ad8:	88 23       	and	r24, r24
    2ada:	09 f0       	breq	.+2      	; 0x2ade <xTaskIncrementTick+0x20>
    2adc:	c7 c0       	rjmp	.+398    	; 0x2c6c <xTaskIncrementTick+0x1ae>
    2ade:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2ae2:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	9b 83       	std	Y+3, r25	; 0x03
    2aea:	8a 83       	std	Y+2, r24	; 0x02
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	90 93 c1 05 	sts	0x05C1, r25	; 0x8005c1 <xTickCount+0x1>
    2af4:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <xTickCount>
    2af8:	8a 81       	ldd	r24, Y+2	; 0x02
    2afa:	9b 81       	ldd	r25, Y+3	; 0x03
    2afc:	89 2b       	or	r24, r25
    2afe:	d9 f4       	brne	.+54     	; 0x2b36 <xTaskIncrementTick+0x78>
    2b00:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b04:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b08:	9d 83       	std	Y+5, r25	; 0x05
    2b0a:	8c 83       	std	Y+4, r24	; 0x04
    2b0c:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    2b10:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2b14:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b18:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    2b1c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b1e:	9d 81       	ldd	r25, Y+5	; 0x05
    2b20:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    2b24:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    2b28:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2b2c:	8f 5f       	subi	r24, 0xFF	; 255
    2b2e:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <xNumOfOverflows>
    2b32:	0e 94 92 18 	call	0x3124	; 0x3124 <prvResetNextTaskUnblockTime>
    2b36:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    2b3a:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b40:	3b 81       	ldd	r19, Y+3	; 0x03
    2b42:	28 17       	cp	r18, r24
    2b44:	39 07       	cpc	r19, r25
    2b46:	08 f4       	brcc	.+2      	; 0x2b4a <xTaskIncrementTick+0x8c>
    2b48:	77 c0       	rjmp	.+238    	; 0x2c38 <xTaskIncrementTick+0x17a>
    2b4a:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b4e:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b52:	fc 01       	movw	r30, r24
    2b54:	80 81       	ld	r24, Z
    2b56:	88 23       	and	r24, r24
    2b58:	39 f4       	brne	.+14     	; 0x2b68 <xTaskIncrementTick+0xaa>
    2b5a:	8f ef       	ldi	r24, 0xFF	; 255
    2b5c:	9f ef       	ldi	r25, 0xFF	; 255
    2b5e:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2b62:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2b66:	68 c0       	rjmp	.+208    	; 0x2c38 <xTaskIncrementTick+0x17a>
    2b68:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    2b6c:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    2b70:	fc 01       	movw	r30, r24
    2b72:	85 81       	ldd	r24, Z+5	; 0x05
    2b74:	96 81       	ldd	r25, Z+6	; 0x06
    2b76:	fc 01       	movw	r30, r24
    2b78:	86 81       	ldd	r24, Z+6	; 0x06
    2b7a:	97 81       	ldd	r25, Z+7	; 0x07
    2b7c:	9f 83       	std	Y+7, r25	; 0x07
    2b7e:	8e 83       	std	Y+6, r24	; 0x06
    2b80:	8e 81       	ldd	r24, Y+6	; 0x06
    2b82:	9f 81       	ldd	r25, Y+7	; 0x07
    2b84:	fc 01       	movw	r30, r24
    2b86:	82 81       	ldd	r24, Z+2	; 0x02
    2b88:	93 81       	ldd	r25, Z+3	; 0x03
    2b8a:	99 87       	std	Y+9, r25	; 0x09
    2b8c:	88 87       	std	Y+8, r24	; 0x08
    2b8e:	2a 81       	ldd	r18, Y+2	; 0x02
    2b90:	3b 81       	ldd	r19, Y+3	; 0x03
    2b92:	88 85       	ldd	r24, Y+8	; 0x08
    2b94:	99 85       	ldd	r25, Y+9	; 0x09
    2b96:	28 17       	cp	r18, r24
    2b98:	39 07       	cpc	r19, r25
    2b9a:	38 f4       	brcc	.+14     	; 0x2baa <xTaskIncrementTick+0xec>
    2b9c:	88 85       	ldd	r24, Y+8	; 0x08
    2b9e:	99 85       	ldd	r25, Y+9	; 0x09
    2ba0:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    2ba4:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    2ba8:	47 c0       	rjmp	.+142    	; 0x2c38 <xTaskIncrementTick+0x17a>
    2baa:	8e 81       	ldd	r24, Y+6	; 0x06
    2bac:	9f 81       	ldd	r25, Y+7	; 0x07
    2bae:	02 96       	adiw	r24, 0x02	; 2
    2bb0:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    2bb4:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb6:	9f 81       	ldd	r25, Y+7	; 0x07
    2bb8:	fc 01       	movw	r30, r24
    2bba:	84 89       	ldd	r24, Z+20	; 0x14
    2bbc:	95 89       	ldd	r25, Z+21	; 0x15
    2bbe:	89 2b       	or	r24, r25
    2bc0:	29 f0       	breq	.+10     	; 0x2bcc <xTaskIncrementTick+0x10e>
    2bc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bc6:	0c 96       	adiw	r24, 0x0c	; 12
    2bc8:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    2bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bce:	9f 81       	ldd	r25, Y+7	; 0x07
    2bd0:	fc 01       	movw	r30, r24
    2bd2:	96 89       	ldd	r25, Z+22	; 0x16
    2bd4:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2bd8:	89 17       	cp	r24, r25
    2bda:	30 f4       	brcc	.+12     	; 0x2be8 <xTaskIncrementTick+0x12a>
    2bdc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bde:	9f 81       	ldd	r25, Y+7	; 0x07
    2be0:	fc 01       	movw	r30, r24
    2be2:	86 89       	ldd	r24, Z+22	; 0x16
    2be4:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2be8:	8e 81       	ldd	r24, Y+6	; 0x06
    2bea:	9f 81       	ldd	r25, Y+7	; 0x07
    2bec:	ac 01       	movw	r20, r24
    2bee:	4e 5f       	subi	r20, 0xFE	; 254
    2bf0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bf2:	8e 81       	ldd	r24, Y+6	; 0x06
    2bf4:	9f 81       	ldd	r25, Y+7	; 0x07
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	86 89       	ldd	r24, Z+22	; 0x16
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	c9 01       	movw	r24, r18
    2c00:	88 0f       	add	r24, r24
    2c02:	99 1f       	adc	r25, r25
    2c04:	88 0f       	add	r24, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	88 0f       	add	r24, r24
    2c0a:	99 1f       	adc	r25, r25
    2c0c:	82 0f       	add	r24, r18
    2c0e:	93 1f       	adc	r25, r19
    2c10:	8e 58       	subi	r24, 0x8E	; 142
    2c12:	9a 4f       	sbci	r25, 0xFA	; 250
    2c14:	ba 01       	movw	r22, r20
    2c16:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    2c1a:	8e 81       	ldd	r24, Y+6	; 0x06
    2c1c:	9f 81       	ldd	r25, Y+7	; 0x07
    2c1e:	fc 01       	movw	r30, r24
    2c20:	26 89       	ldd	r18, Z+22	; 0x16
    2c22:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2c26:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2c2a:	fc 01       	movw	r30, r24
    2c2c:	86 89       	ldd	r24, Z+22	; 0x16
    2c2e:	28 17       	cp	r18, r24
    2c30:	10 f0       	brcs	.+4      	; 0x2c36 <xTaskIncrementTick+0x178>
    2c32:	81 e0       	ldi	r24, 0x01	; 1
    2c34:	89 83       	std	Y+1, r24	; 0x01
    2c36:	89 cf       	rjmp	.-238    	; 0x2b4a <xTaskIncrementTick+0x8c>
    2c38:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2c3c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2c40:	fc 01       	movw	r30, r24
    2c42:	86 89       	ldd	r24, Z+22	; 0x16
    2c44:	28 2f       	mov	r18, r24
    2c46:	30 e0       	ldi	r19, 0x00	; 0
    2c48:	c9 01       	movw	r24, r18
    2c4a:	88 0f       	add	r24, r24
    2c4c:	99 1f       	adc	r25, r25
    2c4e:	88 0f       	add	r24, r24
    2c50:	99 1f       	adc	r25, r25
    2c52:	88 0f       	add	r24, r24
    2c54:	99 1f       	adc	r25, r25
    2c56:	82 0f       	add	r24, r18
    2c58:	93 1f       	adc	r25, r19
    2c5a:	8e 58       	subi	r24, 0x8E	; 142
    2c5c:	9a 4f       	sbci	r25, 0xFA	; 250
    2c5e:	fc 01       	movw	r30, r24
    2c60:	80 81       	ld	r24, Z
    2c62:	82 30       	cpi	r24, 0x02	; 2
    2c64:	10 f0       	brcs	.+4      	; 0x2c6a <xTaskIncrementTick+0x1ac>
    2c66:	81 e0       	ldi	r24, 0x01	; 1
    2c68:	89 83       	std	Y+1, r24	; 0x01
    2c6a:	05 c0       	rjmp	.+10     	; 0x2c76 <xTaskIncrementTick+0x1b8>
    2c6c:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <uxPendedTicks>
    2c70:	8f 5f       	subi	r24, 0xFF	; 255
    2c72:	80 93 c4 05 	sts	0x05C4, r24	; 0x8005c4 <uxPendedTicks>
    2c76:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <xYieldPending>
    2c7a:	88 23       	and	r24, r24
    2c7c:	11 f0       	breq	.+4      	; 0x2c82 <xTaskIncrementTick+0x1c4>
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	89 83       	std	Y+1, r24	; 0x01
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	29 96       	adiw	r28, 0x09	; 9
    2c86:	0f b6       	in	r0, 0x3f	; 63
    2c88:	f8 94       	cli
    2c8a:	de bf       	out	0x3e, r29	; 62
    2c8c:	0f be       	out	0x3f, r0	; 63
    2c8e:	cd bf       	out	0x3d, r28	; 61
    2c90:	df 91       	pop	r29
    2c92:	cf 91       	pop	r28
    2c94:	08 95       	ret

00002c96 <vTaskSwitchContext>:
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	00 d0       	rcall	.+0      	; 0x2c9c <vTaskSwitchContext+0x6>
    2c9c:	1f 92       	push	r1
    2c9e:	cd b7       	in	r28, 0x3d	; 61
    2ca0:	de b7       	in	r29, 0x3e	; 62
    2ca2:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2ca6:	88 23       	and	r24, r24
    2ca8:	21 f0       	breq	.+8      	; 0x2cb2 <vTaskSwitchContext+0x1c>
    2caa:	81 e0       	ldi	r24, 0x01	; 1
    2cac:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2cb0:	71 c0       	rjmp	.+226    	; 0x2d94 <vTaskSwitchContext+0xfe>
    2cb2:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <xYieldPending>
    2cb6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2cba:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	85 a1       	ldd	r24, Z+37	; 0x25
    2cc2:	96 a1       	ldd	r25, Z+38	; 0x26
    2cc4:	0e 94 d0 05 	call	0xba0	; 0xba0 <switch_out>
    2cc8:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2ccc:	89 83       	std	Y+1, r24	; 0x01
    2cce:	03 c0       	rjmp	.+6      	; 0x2cd6 <vTaskSwitchContext+0x40>
    2cd0:	89 81       	ldd	r24, Y+1	; 0x01
    2cd2:	81 50       	subi	r24, 0x01	; 1
    2cd4:	89 83       	std	Y+1, r24	; 0x01
    2cd6:	89 81       	ldd	r24, Y+1	; 0x01
    2cd8:	28 2f       	mov	r18, r24
    2cda:	30 e0       	ldi	r19, 0x00	; 0
    2cdc:	c9 01       	movw	r24, r18
    2cde:	88 0f       	add	r24, r24
    2ce0:	99 1f       	adc	r25, r25
    2ce2:	88 0f       	add	r24, r24
    2ce4:	99 1f       	adc	r25, r25
    2ce6:	88 0f       	add	r24, r24
    2ce8:	99 1f       	adc	r25, r25
    2cea:	82 0f       	add	r24, r18
    2cec:	93 1f       	adc	r25, r19
    2cee:	8e 58       	subi	r24, 0x8E	; 142
    2cf0:	9a 4f       	sbci	r25, 0xFA	; 250
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 23       	and	r24, r24
    2cf8:	59 f3       	breq	.-42     	; 0x2cd0 <vTaskSwitchContext+0x3a>
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	28 2f       	mov	r18, r24
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	c9 01       	movw	r24, r18
    2d02:	88 0f       	add	r24, r24
    2d04:	99 1f       	adc	r25, r25
    2d06:	88 0f       	add	r24, r24
    2d08:	99 1f       	adc	r25, r25
    2d0a:	88 0f       	add	r24, r24
    2d0c:	99 1f       	adc	r25, r25
    2d0e:	82 0f       	add	r24, r18
    2d10:	93 1f       	adc	r25, r19
    2d12:	8e 58       	subi	r24, 0x8E	; 142
    2d14:	9a 4f       	sbci	r25, 0xFA	; 250
    2d16:	9b 83       	std	Y+3, r25	; 0x03
    2d18:	8a 83       	std	Y+2, r24	; 0x02
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1e:	fc 01       	movw	r30, r24
    2d20:	81 81       	ldd	r24, Z+1	; 0x01
    2d22:	92 81       	ldd	r25, Z+2	; 0x02
    2d24:	fc 01       	movw	r30, r24
    2d26:	22 81       	ldd	r18, Z+2	; 0x02
    2d28:	33 81       	ldd	r19, Z+3	; 0x03
    2d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2e:	fc 01       	movw	r30, r24
    2d30:	32 83       	std	Z+2, r19	; 0x02
    2d32:	21 83       	std	Z+1, r18	; 0x01
    2d34:	8a 81       	ldd	r24, Y+2	; 0x02
    2d36:	9b 81       	ldd	r25, Y+3	; 0x03
    2d38:	fc 01       	movw	r30, r24
    2d3a:	21 81       	ldd	r18, Z+1	; 0x01
    2d3c:	32 81       	ldd	r19, Z+2	; 0x02
    2d3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2d40:	9b 81       	ldd	r25, Y+3	; 0x03
    2d42:	03 96       	adiw	r24, 0x03	; 3
    2d44:	28 17       	cp	r18, r24
    2d46:	39 07       	cpc	r19, r25
    2d48:	69 f4       	brne	.+26     	; 0x2d64 <vTaskSwitchContext+0xce>
    2d4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d4e:	fc 01       	movw	r30, r24
    2d50:	81 81       	ldd	r24, Z+1	; 0x01
    2d52:	92 81       	ldd	r25, Z+2	; 0x02
    2d54:	fc 01       	movw	r30, r24
    2d56:	22 81       	ldd	r18, Z+2	; 0x02
    2d58:	33 81       	ldd	r19, Z+3	; 0x03
    2d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d5c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5e:	fc 01       	movw	r30, r24
    2d60:	32 83       	std	Z+2, r19	; 0x02
    2d62:	21 83       	std	Z+1, r18	; 0x01
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	fc 01       	movw	r30, r24
    2d6a:	81 81       	ldd	r24, Z+1	; 0x01
    2d6c:	92 81       	ldd	r25, Z+2	; 0x02
    2d6e:	fc 01       	movw	r30, r24
    2d70:	86 81       	ldd	r24, Z+6	; 0x06
    2d72:	97 81       	ldd	r25, Z+7	; 0x07
    2d74:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <pxCurrentTCB+0x1>
    2d78:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <pxCurrentTCB>
    2d7c:	89 81       	ldd	r24, Y+1	; 0x01
    2d7e:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2d82:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2d86:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2d8a:	fc 01       	movw	r30, r24
    2d8c:	85 a1       	ldd	r24, Z+37	; 0x25
    2d8e:	96 a1       	ldd	r25, Z+38	; 0x26
    2d90:	0e 94 c6 05 	call	0xb8c	; 0xb8c <switch_in>
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	df 91       	pop	r29
    2d9c:	cf 91       	pop	r28
    2d9e:	08 95       	ret

00002da0 <vTaskPlaceOnEventList>:
    2da0:	cf 93       	push	r28
    2da2:	df 93       	push	r29
    2da4:	00 d0       	rcall	.+0      	; 0x2da6 <vTaskPlaceOnEventList+0x6>
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <vTaskPlaceOnEventList+0x8>
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
    2dac:	9a 83       	std	Y+2, r25	; 0x02
    2dae:	89 83       	std	Y+1, r24	; 0x01
    2db0:	7c 83       	std	Y+4, r23	; 0x04
    2db2:	6b 83       	std	Y+3, r22	; 0x03
    2db4:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2db8:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2dbc:	9c 01       	movw	r18, r24
    2dbe:	24 5f       	subi	r18, 0xF4	; 244
    2dc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc2:	89 81       	ldd	r24, Y+1	; 0x01
    2dc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2dc6:	b9 01       	movw	r22, r18
    2dc8:	0e 94 11 07 	call	0xe22	; 0xe22 <vListInsert>
    2dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    2dce:	9c 81       	ldd	r25, Y+4	; 0x04
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	0e 94 ee 19 	call	0x33dc	; 0x33dc <prvAddCurrentTaskToDelayedList>
    2dd6:	0f 90       	pop	r0
    2dd8:	0f 90       	pop	r0
    2dda:	0f 90       	pop	r0
    2ddc:	0f 90       	pop	r0
    2dde:	df 91       	pop	r29
    2de0:	cf 91       	pop	r28
    2de2:	08 95       	ret

00002de4 <xTaskRemoveFromEventList>:
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <xTaskRemoveFromEventList+0x6>
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <xTaskRemoveFromEventList+0x8>
    2dec:	1f 92       	push	r1
    2dee:	cd b7       	in	r28, 0x3d	; 61
    2df0:	de b7       	in	r29, 0x3e	; 62
    2df2:	9d 83       	std	Y+5, r25	; 0x05
    2df4:	8c 83       	std	Y+4, r24	; 0x04
    2df6:	8c 81       	ldd	r24, Y+4	; 0x04
    2df8:	9d 81       	ldd	r25, Y+5	; 0x05
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	85 81       	ldd	r24, Z+5	; 0x05
    2dfe:	96 81       	ldd	r25, Z+6	; 0x06
    2e00:	fc 01       	movw	r30, r24
    2e02:	86 81       	ldd	r24, Z+6	; 0x06
    2e04:	97 81       	ldd	r25, Z+7	; 0x07
    2e06:	9b 83       	std	Y+3, r25	; 0x03
    2e08:	8a 83       	std	Y+2, r24	; 0x02
    2e0a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e0c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e0e:	0c 96       	adiw	r24, 0x0c	; 12
    2e10:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    2e14:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxSchedulerSuspended>
    2e18:	88 23       	and	r24, r24
    2e1a:	69 f5       	brne	.+90     	; 0x2e76 <xTaskRemoveFromEventList+0x92>
    2e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e1e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e20:	02 96       	adiw	r24, 0x02	; 2
    2e22:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	96 89       	ldd	r25, Z+22	; 0x16
    2e2e:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    2e32:	89 17       	cp	r24, r25
    2e34:	30 f4       	brcc	.+12     	; 0x2e42 <xTaskRemoveFromEventList+0x5e>
    2e36:	8a 81       	ldd	r24, Y+2	; 0x02
    2e38:	9b 81       	ldd	r25, Y+3	; 0x03
    2e3a:	fc 01       	movw	r30, r24
    2e3c:	86 89       	ldd	r24, Z+22	; 0x16
    2e3e:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    2e42:	8a 81       	ldd	r24, Y+2	; 0x02
    2e44:	9b 81       	ldd	r25, Y+3	; 0x03
    2e46:	ac 01       	movw	r20, r24
    2e48:	4e 5f       	subi	r20, 0xFE	; 254
    2e4a:	5f 4f       	sbci	r21, 0xFF	; 255
    2e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e50:	fc 01       	movw	r30, r24
    2e52:	86 89       	ldd	r24, Z+22	; 0x16
    2e54:	28 2f       	mov	r18, r24
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	c9 01       	movw	r24, r18
    2e5a:	88 0f       	add	r24, r24
    2e5c:	99 1f       	adc	r25, r25
    2e5e:	88 0f       	add	r24, r24
    2e60:	99 1f       	adc	r25, r25
    2e62:	88 0f       	add	r24, r24
    2e64:	99 1f       	adc	r25, r25
    2e66:	82 0f       	add	r24, r18
    2e68:	93 1f       	adc	r25, r19
    2e6a:	8e 58       	subi	r24, 0x8E	; 142
    2e6c:	9a 4f       	sbci	r25, 0xFA	; 250
    2e6e:	ba 01       	movw	r22, r20
    2e70:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    2e74:	08 c0       	rjmp	.+16     	; 0x2e86 <xTaskRemoveFromEventList+0xa2>
    2e76:	8a 81       	ldd	r24, Y+2	; 0x02
    2e78:	9b 81       	ldd	r25, Y+3	; 0x03
    2e7a:	0c 96       	adiw	r24, 0x0c	; 12
    2e7c:	bc 01       	movw	r22, r24
    2e7e:	8c ea       	ldi	r24, 0xAC	; 172
    2e80:	95 e0       	ldi	r25, 0x05	; 5
    2e82:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    2e86:	8a 81       	ldd	r24, Y+2	; 0x02
    2e88:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	26 89       	ldd	r18, Z+22	; 0x16
    2e8e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    2e92:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    2e96:	fc 01       	movw	r30, r24
    2e98:	86 89       	ldd	r24, Z+22	; 0x16
    2e9a:	82 17       	cp	r24, r18
    2e9c:	30 f4       	brcc	.+12     	; 0x2eaa <xTaskRemoveFromEventList+0xc6>
    2e9e:	81 e0       	ldi	r24, 0x01	; 1
    2ea0:	89 83       	std	Y+1, r24	; 0x01
    2ea2:	81 e0       	ldi	r24, 0x01	; 1
    2ea4:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2ea8:	01 c0       	rjmp	.+2      	; 0x2eac <xTaskRemoveFromEventList+0xc8>
    2eaa:	19 82       	std	Y+1, r1	; 0x01
    2eac:	89 81       	ldd	r24, Y+1	; 0x01
    2eae:	0f 90       	pop	r0
    2eb0:	0f 90       	pop	r0
    2eb2:	0f 90       	pop	r0
    2eb4:	0f 90       	pop	r0
    2eb6:	0f 90       	pop	r0
    2eb8:	df 91       	pop	r29
    2eba:	cf 91       	pop	r28
    2ebc:	08 95       	ret

00002ebe <vTaskSetTimeOutState>:
    2ebe:	cf 93       	push	r28
    2ec0:	df 93       	push	r29
    2ec2:	00 d0       	rcall	.+0      	; 0x2ec4 <vTaskSetTimeOutState+0x6>
    2ec4:	cd b7       	in	r28, 0x3d	; 61
    2ec6:	de b7       	in	r29, 0x3e	; 62
    2ec8:	9a 83       	std	Y+2, r25	; 0x02
    2eca:	89 83       	std	Y+1, r24	; 0x01
    2ecc:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2ed0:	89 81       	ldd	r24, Y+1	; 0x01
    2ed2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	20 83       	st	Z, r18
    2ed8:	20 91 c0 05 	lds	r18, 0x05C0	; 0x8005c0 <xTickCount>
    2edc:	30 91 c1 05 	lds	r19, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2ee0:	89 81       	ldd	r24, Y+1	; 0x01
    2ee2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee4:	fc 01       	movw	r30, r24
    2ee6:	32 83       	std	Z+2, r19	; 0x02
    2ee8:	21 83       	std	Z+1, r18	; 0x01
    2eea:	0f 90       	pop	r0
    2eec:	0f 90       	pop	r0
    2eee:	df 91       	pop	r29
    2ef0:	cf 91       	pop	r28
    2ef2:	08 95       	ret

00002ef4 <xTaskCheckForTimeOut>:
    2ef4:	cf 93       	push	r28
    2ef6:	df 93       	push	r29
    2ef8:	cd b7       	in	r28, 0x3d	; 61
    2efa:	de b7       	in	r29, 0x3e	; 62
    2efc:	27 97       	sbiw	r28, 0x07	; 7
    2efe:	0f b6       	in	r0, 0x3f	; 63
    2f00:	f8 94       	cli
    2f02:	de bf       	out	0x3e, r29	; 62
    2f04:	0f be       	out	0x3f, r0	; 63
    2f06:	cd bf       	out	0x3d, r28	; 61
    2f08:	9d 83       	std	Y+5, r25	; 0x05
    2f0a:	8c 83       	std	Y+4, r24	; 0x04
    2f0c:	7f 83       	std	Y+7, r23	; 0x07
    2f0e:	6e 83       	std	Y+6, r22	; 0x06
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
    2f16:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    2f1a:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    2f1e:	9b 83       	std	Y+3, r25	; 0x03
    2f20:	8a 83       	std	Y+2, r24	; 0x02
    2f22:	8c 81       	ldd	r24, Y+4	; 0x04
    2f24:	9d 81       	ldd	r25, Y+5	; 0x05
    2f26:	fc 01       	movw	r30, r24
    2f28:	90 81       	ld	r25, Z
    2f2a:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <xNumOfOverflows>
    2f2e:	98 17       	cp	r25, r24
    2f30:	69 f0       	breq	.+26     	; 0x2f4c <xTaskCheckForTimeOut+0x58>
    2f32:	8c 81       	ldd	r24, Y+4	; 0x04
    2f34:	9d 81       	ldd	r25, Y+5	; 0x05
    2f36:	fc 01       	movw	r30, r24
    2f38:	21 81       	ldd	r18, Z+1	; 0x01
    2f3a:	32 81       	ldd	r19, Z+2	; 0x02
    2f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2f40:	82 17       	cp	r24, r18
    2f42:	93 07       	cpc	r25, r19
    2f44:	18 f0       	brcs	.+6      	; 0x2f4c <xTaskCheckForTimeOut+0x58>
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	89 83       	std	Y+1, r24	; 0x01
    2f4a:	30 c0       	rjmp	.+96     	; 0x2fac <xTaskCheckForTimeOut+0xb8>
    2f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    2f50:	fc 01       	movw	r30, r24
    2f52:	81 81       	ldd	r24, Z+1	; 0x01
    2f54:	92 81       	ldd	r25, Z+2	; 0x02
    2f56:	2a 81       	ldd	r18, Y+2	; 0x02
    2f58:	3b 81       	ldd	r19, Y+3	; 0x03
    2f5a:	28 1b       	sub	r18, r24
    2f5c:	39 0b       	sbc	r19, r25
    2f5e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f60:	9f 81       	ldd	r25, Y+7	; 0x07
    2f62:	fc 01       	movw	r30, r24
    2f64:	80 81       	ld	r24, Z
    2f66:	91 81       	ldd	r25, Z+1	; 0x01
    2f68:	28 17       	cp	r18, r24
    2f6a:	39 07       	cpc	r19, r25
    2f6c:	e8 f4       	brcc	.+58     	; 0x2fa8 <xTaskCheckForTimeOut+0xb4>
    2f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f70:	9f 81       	ldd	r25, Y+7	; 0x07
    2f72:	fc 01       	movw	r30, r24
    2f74:	20 81       	ld	r18, Z
    2f76:	31 81       	ldd	r19, Z+1	; 0x01
    2f78:	8c 81       	ldd	r24, Y+4	; 0x04
    2f7a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	41 81       	ldd	r20, Z+1	; 0x01
    2f80:	52 81       	ldd	r21, Z+2	; 0x02
    2f82:	8a 81       	ldd	r24, Y+2	; 0x02
    2f84:	9b 81       	ldd	r25, Y+3	; 0x03
    2f86:	ba 01       	movw	r22, r20
    2f88:	68 1b       	sub	r22, r24
    2f8a:	79 0b       	sbc	r23, r25
    2f8c:	cb 01       	movw	r24, r22
    2f8e:	28 0f       	add	r18, r24
    2f90:	39 1f       	adc	r19, r25
    2f92:	8e 81       	ldd	r24, Y+6	; 0x06
    2f94:	9f 81       	ldd	r25, Y+7	; 0x07
    2f96:	fc 01       	movw	r30, r24
    2f98:	31 83       	std	Z+1, r19	; 0x01
    2f9a:	20 83       	st	Z, r18
    2f9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2f9e:	9d 81       	ldd	r25, Y+5	; 0x05
    2fa0:	0e 94 5f 17 	call	0x2ebe	; 0x2ebe <vTaskSetTimeOutState>
    2fa4:	19 82       	std	Y+1, r1	; 0x01
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <xTaskCheckForTimeOut+0xb8>
    2fa8:	81 e0       	ldi	r24, 0x01	; 1
    2faa:	89 83       	std	Y+1, r24	; 0x01
    2fac:	0f 90       	pop	r0
    2fae:	0f be       	out	0x3f, r0	; 63
    2fb0:	89 81       	ldd	r24, Y+1	; 0x01
    2fb2:	27 96       	adiw	r28, 0x07	; 7
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	f8 94       	cli
    2fb8:	de bf       	out	0x3e, r29	; 62
    2fba:	0f be       	out	0x3f, r0	; 63
    2fbc:	cd bf       	out	0x3d, r28	; 61
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	08 95       	ret

00002fc4 <vTaskMissedYield>:
    2fc4:	cf 93       	push	r28
    2fc6:	df 93       	push	r29
    2fc8:	cd b7       	in	r28, 0x3d	; 61
    2fca:	de b7       	in	r29, 0x3e	; 62
    2fcc:	81 e0       	ldi	r24, 0x01	; 1
    2fce:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <xYieldPending>
    2fd2:	df 91       	pop	r29
    2fd4:	cf 91       	pop	r28
    2fd6:	08 95       	ret

00002fd8 <prvIdleTask>:
    2fd8:	cf 93       	push	r28
    2fda:	df 93       	push	r29
    2fdc:	00 d0       	rcall	.+0      	; 0x2fde <prvIdleTask+0x6>
    2fde:	cd b7       	in	r28, 0x3d	; 61
    2fe0:	de b7       	in	r29, 0x3e	; 62
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	0e 94 3b 18 	call	0x3076	; 0x3076 <prvCheckTasksWaitingTermination>
    2fea:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <pxReadyTasksLists>
    2fee:	82 30       	cpi	r24, 0x02	; 2
    2ff0:	10 f0       	brcs	.+4      	; 0x2ff6 <prvIdleTask+0x1e>
    2ff2:	0e 94 bd 09 	call	0x137a	; 0x137a <vPortYield>
    2ff6:	0e 94 4e 04 	call	0x89c	; 0x89c <vApplicationIdleHook>
    2ffa:	f5 cf       	rjmp	.-22     	; 0x2fe6 <prvIdleTask+0xe>

00002ffc <prvInitialiseTaskLists>:
    2ffc:	cf 93       	push	r28
    2ffe:	df 93       	push	r29
    3000:	1f 92       	push	r1
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	19 82       	std	Y+1, r1	; 0x01
    3008:	13 c0       	rjmp	.+38     	; 0x3030 <prvInitialiseTaskLists+0x34>
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	28 2f       	mov	r18, r24
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	c9 01       	movw	r24, r18
    3012:	88 0f       	add	r24, r24
    3014:	99 1f       	adc	r25, r25
    3016:	88 0f       	add	r24, r24
    3018:	99 1f       	adc	r25, r25
    301a:	88 0f       	add	r24, r24
    301c:	99 1f       	adc	r25, r25
    301e:	82 0f       	add	r24, r18
    3020:	93 1f       	adc	r25, r19
    3022:	8e 58       	subi	r24, 0x8E	; 142
    3024:	9a 4f       	sbci	r25, 0xFA	; 250
    3026:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    302a:	89 81       	ldd	r24, Y+1	; 0x01
    302c:	8f 5f       	subi	r24, 0xFF	; 255
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	84 30       	cpi	r24, 0x04	; 4
    3034:	50 f3       	brcs	.-44     	; 0x300a <prvInitialiseTaskLists+0xe>
    3036:	86 e9       	ldi	r24, 0x96	; 150
    3038:	95 e0       	ldi	r25, 0x05	; 5
    303a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    303e:	8f e9       	ldi	r24, 0x9F	; 159
    3040:	95 e0       	ldi	r25, 0x05	; 5
    3042:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    3046:	8c ea       	ldi	r24, 0xAC	; 172
    3048:	95 e0       	ldi	r25, 0x05	; 5
    304a:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    304e:	85 eb       	ldi	r24, 0xB5	; 181
    3050:	95 e0       	ldi	r25, 0x05	; 5
    3052:	0e 94 7d 06 	call	0xcfa	; 0xcfa <vListInitialise>
    3056:	86 e9       	ldi	r24, 0x96	; 150
    3058:	95 e0       	ldi	r25, 0x05	; 5
    305a:	90 93 a9 05 	sts	0x05A9, r25	; 0x8005a9 <pxDelayedTaskList+0x1>
    305e:	80 93 a8 05 	sts	0x05A8, r24	; 0x8005a8 <pxDelayedTaskList>
    3062:	8f e9       	ldi	r24, 0x9F	; 159
    3064:	95 e0       	ldi	r25, 0x05	; 5
    3066:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    306a:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <pxOverflowDelayedTaskList>
    306e:	0f 90       	pop	r0
    3070:	df 91       	pop	r29
    3072:	cf 91       	pop	r28
    3074:	08 95       	ret

00003076 <prvCheckTasksWaitingTermination>:
    3076:	cf 93       	push	r28
    3078:	df 93       	push	r29
    307a:	00 d0       	rcall	.+0      	; 0x307c <prvCheckTasksWaitingTermination+0x6>
    307c:	1f 92       	push	r1
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	2f c0       	rjmp	.+94     	; 0x30e2 <prvCheckTasksWaitingTermination+0x6c>
    3084:	0e 94 bc 14 	call	0x2978	; 0x2978 <vTaskSuspendAll>
    3088:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <xTasksWaitingTermination>
    308c:	81 e0       	ldi	r24, 0x01	; 1
    308e:	99 23       	and	r25, r25
    3090:	09 f0       	breq	.+2      	; 0x3094 <prvCheckTasksWaitingTermination+0x1e>
    3092:	80 e0       	ldi	r24, 0x00	; 0
    3094:	89 83       	std	Y+1, r24	; 0x01
    3096:	0e 94 c8 14 	call	0x2990	; 0x2990 <xTaskResumeAll>
    309a:	89 81       	ldd	r24, Y+1	; 0x01
    309c:	88 23       	and	r24, r24
    309e:	09 f5       	brne	.+66     	; 0x30e2 <prvCheckTasksWaitingTermination+0x6c>
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	0f 92       	push	r0
    30a6:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <xTasksWaitingTermination+0x5>
    30aa:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <xTasksWaitingTermination+0x6>
    30ae:	fc 01       	movw	r30, r24
    30b0:	86 81       	ldd	r24, Z+6	; 0x06
    30b2:	97 81       	ldd	r25, Z+7	; 0x07
    30b4:	9b 83       	std	Y+3, r25	; 0x03
    30b6:	8a 83       	std	Y+2, r24	; 0x02
    30b8:	8a 81       	ldd	r24, Y+2	; 0x02
    30ba:	9b 81       	ldd	r25, Y+3	; 0x03
    30bc:	02 96       	adiw	r24, 0x02	; 2
    30be:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    30c2:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <uxCurrentNumberOfTasks>
    30c6:	81 50       	subi	r24, 0x01	; 1
    30c8:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <uxCurrentNumberOfTasks>
    30cc:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30d0:	81 50       	subi	r24, 0x01	; 1
    30d2:	80 93 be 05 	sts	0x05BE, r24	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30d6:	0f 90       	pop	r0
    30d8:	0f be       	out	0x3f, r0	; 63
    30da:	8a 81       	ldd	r24, Y+2	; 0x02
    30dc:	9b 81       	ldd	r25, Y+3	; 0x03
    30de:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <prvDeleteTCB>
    30e2:	80 91 be 05 	lds	r24, 0x05BE	; 0x8005be <uxDeletedTasksWaitingCleanUp>
    30e6:	88 23       	and	r24, r24
    30e8:	69 f6       	brne	.-102    	; 0x3084 <prvCheckTasksWaitingTermination+0xe>
    30ea:	0f 90       	pop	r0
    30ec:	0f 90       	pop	r0
    30ee:	0f 90       	pop	r0
    30f0:	df 91       	pop	r29
    30f2:	cf 91       	pop	r28
    30f4:	08 95       	ret

000030f6 <prvDeleteTCB>:
    30f6:	cf 93       	push	r28
    30f8:	df 93       	push	r29
    30fa:	00 d0       	rcall	.+0      	; 0x30fc <prvDeleteTCB+0x6>
    30fc:	cd b7       	in	r28, 0x3d	; 61
    30fe:	de b7       	in	r29, 0x3e	; 62
    3100:	9a 83       	std	Y+2, r25	; 0x02
    3102:	89 83       	std	Y+1, r24	; 0x01
    3104:	89 81       	ldd	r24, Y+1	; 0x01
    3106:	9a 81       	ldd	r25, Y+2	; 0x02
    3108:	fc 01       	movw	r30, r24
    310a:	87 89       	ldd	r24, Z+23	; 0x17
    310c:	90 8d       	ldd	r25, Z+24	; 0x18
    310e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <vPortFree>
    3112:	89 81       	ldd	r24, Y+1	; 0x01
    3114:	9a 81       	ldd	r25, Y+2	; 0x02
    3116:	0e 94 2c 0b 	call	0x1658	; 0x1658 <vPortFree>
    311a:	0f 90       	pop	r0
    311c:	0f 90       	pop	r0
    311e:	df 91       	pop	r29
    3120:	cf 91       	pop	r28
    3122:	08 95       	ret

00003124 <prvResetNextTaskUnblockTime>:
    3124:	cf 93       	push	r28
    3126:	df 93       	push	r29
    3128:	00 d0       	rcall	.+0      	; 0x312a <prvResetNextTaskUnblockTime+0x6>
    312a:	cd b7       	in	r28, 0x3d	; 61
    312c:	de b7       	in	r29, 0x3e	; 62
    312e:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3132:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3136:	fc 01       	movw	r30, r24
    3138:	80 81       	ld	r24, Z
    313a:	88 23       	and	r24, r24
    313c:	39 f4       	brne	.+14     	; 0x314c <prvResetNextTaskUnblockTime+0x28>
    313e:	8f ef       	ldi	r24, 0xFF	; 255
    3140:	9f ef       	ldi	r25, 0xFF	; 255
    3142:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3146:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    314a:	15 c0       	rjmp	.+42     	; 0x3176 <prvResetNextTaskUnblockTime+0x52>
    314c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3150:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3154:	fc 01       	movw	r30, r24
    3156:	85 81       	ldd	r24, Z+5	; 0x05
    3158:	96 81       	ldd	r25, Z+6	; 0x06
    315a:	fc 01       	movw	r30, r24
    315c:	86 81       	ldd	r24, Z+6	; 0x06
    315e:	97 81       	ldd	r25, Z+7	; 0x07
    3160:	9a 83       	std	Y+2, r25	; 0x02
    3162:	89 83       	std	Y+1, r24	; 0x01
    3164:	89 81       	ldd	r24, Y+1	; 0x01
    3166:	9a 81       	ldd	r25, Y+2	; 0x02
    3168:	fc 01       	movw	r30, r24
    316a:	82 81       	ldd	r24, Z+2	; 0x02
    316c:	93 81       	ldd	r25, Z+3	; 0x03
    316e:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3172:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>
    3176:	0f 90       	pop	r0
    3178:	0f 90       	pop	r0
    317a:	df 91       	pop	r29
    317c:	cf 91       	pop	r28
    317e:	08 95       	ret

00003180 <vTaskPriorityInherit>:
    3180:	cf 93       	push	r28
    3182:	df 93       	push	r29
    3184:	00 d0       	rcall	.+0      	; 0x3186 <vTaskPriorityInherit+0x6>
    3186:	00 d0       	rcall	.+0      	; 0x3188 <vTaskPriorityInherit+0x8>
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	9c 83       	std	Y+4, r25	; 0x04
    318e:	8b 83       	std	Y+3, r24	; 0x03
    3190:	8b 81       	ldd	r24, Y+3	; 0x03
    3192:	9c 81       	ldd	r25, Y+4	; 0x04
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
    3198:	8b 81       	ldd	r24, Y+3	; 0x03
    319a:	9c 81       	ldd	r25, Y+4	; 0x04
    319c:	89 2b       	or	r24, r25
    319e:	09 f4       	brne	.+2      	; 0x31a2 <vTaskPriorityInherit+0x22>
    31a0:	7f c0       	rjmp	.+254    	; 0x32a0 <vTaskPriorityInherit+0x120>
    31a2:	89 81       	ldd	r24, Y+1	; 0x01
    31a4:	9a 81       	ldd	r25, Y+2	; 0x02
    31a6:	fc 01       	movw	r30, r24
    31a8:	26 89       	ldd	r18, Z+22	; 0x16
    31aa:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31ae:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31b2:	fc 01       	movw	r30, r24
    31b4:	86 89       	ldd	r24, Z+22	; 0x16
    31b6:	28 17       	cp	r18, r24
    31b8:	08 f0       	brcs	.+2      	; 0x31bc <vTaskPriorityInherit+0x3c>
    31ba:	72 c0       	rjmp	.+228    	; 0x32a0 <vTaskPriorityInherit+0x120>
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	9a 81       	ldd	r25, Y+2	; 0x02
    31c0:	fc 01       	movw	r30, r24
    31c2:	84 85       	ldd	r24, Z+12	; 0x0c
    31c4:	95 85       	ldd	r25, Z+13	; 0x0d
    31c6:	99 23       	and	r25, r25
    31c8:	8c f0       	brlt	.+34     	; 0x31ec <vTaskPriorityInherit+0x6c>
    31ca:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    31ce:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    31d2:	fc 01       	movw	r30, r24
    31d4:	86 89       	ldd	r24, Z+22	; 0x16
    31d6:	88 2f       	mov	r24, r24
    31d8:	90 e0       	ldi	r25, 0x00	; 0
    31da:	24 e0       	ldi	r18, 0x04	; 4
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	28 1b       	sub	r18, r24
    31e0:	39 0b       	sbc	r19, r25
    31e2:	89 81       	ldd	r24, Y+1	; 0x01
    31e4:	9a 81       	ldd	r25, Y+2	; 0x02
    31e6:	fc 01       	movw	r30, r24
    31e8:	35 87       	std	Z+13, r19	; 0x0d
    31ea:	24 87       	std	Z+12, r18	; 0x0c
    31ec:	89 81       	ldd	r24, Y+1	; 0x01
    31ee:	9a 81       	ldd	r25, Y+2	; 0x02
    31f0:	fc 01       	movw	r30, r24
    31f2:	42 85       	ldd	r20, Z+10	; 0x0a
    31f4:	53 85       	ldd	r21, Z+11	; 0x0b
    31f6:	89 81       	ldd	r24, Y+1	; 0x01
    31f8:	9a 81       	ldd	r25, Y+2	; 0x02
    31fa:	fc 01       	movw	r30, r24
    31fc:	86 89       	ldd	r24, Z+22	; 0x16
    31fe:	28 2f       	mov	r18, r24
    3200:	30 e0       	ldi	r19, 0x00	; 0
    3202:	c9 01       	movw	r24, r18
    3204:	88 0f       	add	r24, r24
    3206:	99 1f       	adc	r25, r25
    3208:	88 0f       	add	r24, r24
    320a:	99 1f       	adc	r25, r25
    320c:	88 0f       	add	r24, r24
    320e:	99 1f       	adc	r25, r25
    3210:	82 0f       	add	r24, r18
    3212:	93 1f       	adc	r25, r19
    3214:	8e 58       	subi	r24, 0x8E	; 142
    3216:	9a 4f       	sbci	r25, 0xFA	; 250
    3218:	48 17       	cp	r20, r24
    321a:	59 07       	cpc	r21, r25
    321c:	b9 f5       	brne	.+110    	; 0x328c <vTaskPriorityInherit+0x10c>
    321e:	89 81       	ldd	r24, Y+1	; 0x01
    3220:	9a 81       	ldd	r25, Y+2	; 0x02
    3222:	02 96       	adiw	r24, 0x02	; 2
    3224:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    3228:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    322c:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3230:	fc 01       	movw	r30, r24
    3232:	26 89       	ldd	r18, Z+22	; 0x16
    3234:	89 81       	ldd	r24, Y+1	; 0x01
    3236:	9a 81       	ldd	r25, Y+2	; 0x02
    3238:	fc 01       	movw	r30, r24
    323a:	26 8b       	std	Z+22, r18	; 0x16
    323c:	89 81       	ldd	r24, Y+1	; 0x01
    323e:	9a 81       	ldd	r25, Y+2	; 0x02
    3240:	fc 01       	movw	r30, r24
    3242:	96 89       	ldd	r25, Z+22	; 0x16
    3244:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3248:	89 17       	cp	r24, r25
    324a:	30 f4       	brcc	.+12     	; 0x3258 <vTaskPriorityInherit+0xd8>
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	9a 81       	ldd	r25, Y+2	; 0x02
    3250:	fc 01       	movw	r30, r24
    3252:	86 89       	ldd	r24, Z+22	; 0x16
    3254:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	9a 81       	ldd	r25, Y+2	; 0x02
    325c:	ac 01       	movw	r20, r24
    325e:	4e 5f       	subi	r20, 0xFE	; 254
    3260:	5f 4f       	sbci	r21, 0xFF	; 255
    3262:	89 81       	ldd	r24, Y+1	; 0x01
    3264:	9a 81       	ldd	r25, Y+2	; 0x02
    3266:	fc 01       	movw	r30, r24
    3268:	86 89       	ldd	r24, Z+22	; 0x16
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	c9 01       	movw	r24, r18
    3270:	88 0f       	add	r24, r24
    3272:	99 1f       	adc	r25, r25
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	88 0f       	add	r24, r24
    327a:	99 1f       	adc	r25, r25
    327c:	82 0f       	add	r24, r18
    327e:	93 1f       	adc	r25, r19
    3280:	8e 58       	subi	r24, 0x8E	; 142
    3282:	9a 4f       	sbci	r25, 0xFA	; 250
    3284:	ba 01       	movw	r22, r20
    3286:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    328a:	0a c0       	rjmp	.+20     	; 0x32a0 <vTaskPriorityInherit+0x120>
    328c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3290:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3294:	fc 01       	movw	r30, r24
    3296:	26 89       	ldd	r18, Z+22	; 0x16
    3298:	89 81       	ldd	r24, Y+1	; 0x01
    329a:	9a 81       	ldd	r25, Y+2	; 0x02
    329c:	fc 01       	movw	r30, r24
    329e:	26 8b       	std	Z+22, r18	; 0x16
    32a0:	0f 90       	pop	r0
    32a2:	0f 90       	pop	r0
    32a4:	0f 90       	pop	r0
    32a6:	0f 90       	pop	r0
    32a8:	df 91       	pop	r29
    32aa:	cf 91       	pop	r28
    32ac:	08 95       	ret

000032ae <xTaskPriorityDisinherit>:
    32ae:	cf 93       	push	r28
    32b0:	df 93       	push	r29
    32b2:	00 d0       	rcall	.+0      	; 0x32b4 <xTaskPriorityDisinherit+0x6>
    32b4:	00 d0       	rcall	.+0      	; 0x32b6 <xTaskPriorityDisinherit+0x8>
    32b6:	1f 92       	push	r1
    32b8:	cd b7       	in	r28, 0x3d	; 61
    32ba:	de b7       	in	r29, 0x3e	; 62
    32bc:	9d 83       	std	Y+5, r25	; 0x05
    32be:	8c 83       	std	Y+4, r24	; 0x04
    32c0:	8c 81       	ldd	r24, Y+4	; 0x04
    32c2:	9d 81       	ldd	r25, Y+5	; 0x05
    32c4:	9b 83       	std	Y+3, r25	; 0x03
    32c6:	8a 83       	std	Y+2, r24	; 0x02
    32c8:	19 82       	std	Y+1, r1	; 0x01
    32ca:	8c 81       	ldd	r24, Y+4	; 0x04
    32cc:	9d 81       	ldd	r25, Y+5	; 0x05
    32ce:	89 2b       	or	r24, r25
    32d0:	09 f4       	brne	.+2      	; 0x32d4 <xTaskPriorityDisinherit+0x26>
    32d2:	61 c0       	rjmp	.+194    	; 0x3396 <xTaskPriorityDisinherit+0xe8>
    32d4:	8a 81       	ldd	r24, Y+2	; 0x02
    32d6:	9b 81       	ldd	r25, Y+3	; 0x03
    32d8:	fc 01       	movw	r30, r24
    32da:	84 a1       	ldd	r24, Z+36	; 0x24
    32dc:	2f ef       	ldi	r18, 0xFF	; 255
    32de:	28 0f       	add	r18, r24
    32e0:	8a 81       	ldd	r24, Y+2	; 0x02
    32e2:	9b 81       	ldd	r25, Y+3	; 0x03
    32e4:	fc 01       	movw	r30, r24
    32e6:	24 a3       	std	Z+36, r18	; 0x24
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	26 89       	ldd	r18, Z+22	; 0x16
    32f0:	8a 81       	ldd	r24, Y+2	; 0x02
    32f2:	9b 81       	ldd	r25, Y+3	; 0x03
    32f4:	fc 01       	movw	r30, r24
    32f6:	83 a1       	ldd	r24, Z+35	; 0x23
    32f8:	28 17       	cp	r18, r24
    32fa:	09 f4       	brne	.+2      	; 0x32fe <xTaskPriorityDisinherit+0x50>
    32fc:	4c c0       	rjmp	.+152    	; 0x3396 <xTaskPriorityDisinherit+0xe8>
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	9b 81       	ldd	r25, Y+3	; 0x03
    3302:	fc 01       	movw	r30, r24
    3304:	84 a1       	ldd	r24, Z+36	; 0x24
    3306:	88 23       	and	r24, r24
    3308:	09 f0       	breq	.+2      	; 0x330c <xTaskPriorityDisinherit+0x5e>
    330a:	45 c0       	rjmp	.+138    	; 0x3396 <xTaskPriorityDisinherit+0xe8>
    330c:	8a 81       	ldd	r24, Y+2	; 0x02
    330e:	9b 81       	ldd	r25, Y+3	; 0x03
    3310:	02 96       	adiw	r24, 0x02	; 2
    3312:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	9b 81       	ldd	r25, Y+3	; 0x03
    331a:	fc 01       	movw	r30, r24
    331c:	23 a1       	ldd	r18, Z+35	; 0x23
    331e:	8a 81       	ldd	r24, Y+2	; 0x02
    3320:	9b 81       	ldd	r25, Y+3	; 0x03
    3322:	fc 01       	movw	r30, r24
    3324:	26 8b       	std	Z+22, r18	; 0x16
    3326:	8a 81       	ldd	r24, Y+2	; 0x02
    3328:	9b 81       	ldd	r25, Y+3	; 0x03
    332a:	fc 01       	movw	r30, r24
    332c:	86 89       	ldd	r24, Z+22	; 0x16
    332e:	88 2f       	mov	r24, r24
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	24 e0       	ldi	r18, 0x04	; 4
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	28 1b       	sub	r18, r24
    3338:	39 0b       	sbc	r19, r25
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	fc 01       	movw	r30, r24
    3340:	35 87       	std	Z+13, r19	; 0x0d
    3342:	24 87       	std	Z+12, r18	; 0x0c
    3344:	8a 81       	ldd	r24, Y+2	; 0x02
    3346:	9b 81       	ldd	r25, Y+3	; 0x03
    3348:	fc 01       	movw	r30, r24
    334a:	96 89       	ldd	r25, Z+22	; 0x16
    334c:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <uxTopReadyPriority>
    3350:	89 17       	cp	r24, r25
    3352:	30 f4       	brcc	.+12     	; 0x3360 <xTaskPriorityDisinherit+0xb2>
    3354:	8a 81       	ldd	r24, Y+2	; 0x02
    3356:	9b 81       	ldd	r25, Y+3	; 0x03
    3358:	fc 01       	movw	r30, r24
    335a:	86 89       	ldd	r24, Z+22	; 0x16
    335c:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <uxTopReadyPriority>
    3360:	8a 81       	ldd	r24, Y+2	; 0x02
    3362:	9b 81       	ldd	r25, Y+3	; 0x03
    3364:	ac 01       	movw	r20, r24
    3366:	4e 5f       	subi	r20, 0xFE	; 254
    3368:	5f 4f       	sbci	r21, 0xFF	; 255
    336a:	8a 81       	ldd	r24, Y+2	; 0x02
    336c:	9b 81       	ldd	r25, Y+3	; 0x03
    336e:	fc 01       	movw	r30, r24
    3370:	86 89       	ldd	r24, Z+22	; 0x16
    3372:	28 2f       	mov	r18, r24
    3374:	30 e0       	ldi	r19, 0x00	; 0
    3376:	c9 01       	movw	r24, r18
    3378:	88 0f       	add	r24, r24
    337a:	99 1f       	adc	r25, r25
    337c:	88 0f       	add	r24, r24
    337e:	99 1f       	adc	r25, r25
    3380:	88 0f       	add	r24, r24
    3382:	99 1f       	adc	r25, r25
    3384:	82 0f       	add	r24, r18
    3386:	93 1f       	adc	r25, r19
    3388:	8e 58       	subi	r24, 0x8E	; 142
    338a:	9a 4f       	sbci	r25, 0xFA	; 250
    338c:	ba 01       	movw	r22, r20
    338e:	0e 94 c3 06 	call	0xd86	; 0xd86 <vListInsertEnd>
    3392:	81 e0       	ldi	r24, 0x01	; 1
    3394:	89 83       	std	Y+1, r24	; 0x01
    3396:	89 81       	ldd	r24, Y+1	; 0x01
    3398:	0f 90       	pop	r0
    339a:	0f 90       	pop	r0
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	0f 90       	pop	r0
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	08 95       	ret

000033a8 <pvTaskIncrementMutexHeldCount>:
    33a8:	cf 93       	push	r28
    33aa:	df 93       	push	r29
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33b4:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33b8:	89 2b       	or	r24, r25
    33ba:	49 f0       	breq	.+18     	; 0x33ce <pvTaskIncrementMutexHeldCount+0x26>
    33bc:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33c0:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33c4:	fc 01       	movw	r30, r24
    33c6:	24 a1       	ldd	r18, Z+36	; 0x24
    33c8:	2f 5f       	subi	r18, 0xFF	; 255
    33ca:	fc 01       	movw	r30, r24
    33cc:	24 a3       	std	Z+36, r18	; 0x24
    33ce:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    33d2:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	08 95       	ret

000033dc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    33dc:	cf 93       	push	r28
    33de:	df 93       	push	r29
    33e0:	cd b7       	in	r28, 0x3d	; 61
    33e2:	de b7       	in	r29, 0x3e	; 62
    33e4:	27 97       	sbiw	r28, 0x07	; 7
    33e6:	0f b6       	in	r0, 0x3f	; 63
    33e8:	f8 94       	cli
    33ea:	de bf       	out	0x3e, r29	; 62
    33ec:	0f be       	out	0x3f, r0	; 63
    33ee:	cd bf       	out	0x3d, r28	; 61
    33f0:	9e 83       	std	Y+6, r25	; 0x06
    33f2:	8d 83       	std	Y+5, r24	; 0x05
    33f4:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    33f6:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <xTickCount>
    33fa:	90 91 c1 05 	lds	r25, 0x05C1	; 0x8005c1 <xTickCount+0x1>
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    3402:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3406:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    340a:	02 96       	adiw	r24, 0x02	; 2
    340c:	0e 94 88 07 	call	0xf10	; 0xf10 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    3410:	29 81       	ldd	r18, Y+1	; 0x01
    3412:	3a 81       	ldd	r19, Y+2	; 0x02
    3414:	8d 81       	ldd	r24, Y+5	; 0x05
    3416:	9e 81       	ldd	r25, Y+6	; 0x06
    3418:	82 0f       	add	r24, r18
    341a:	93 1f       	adc	r25, r19
    341c:	9c 83       	std	Y+4, r25	; 0x04
    341e:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    3420:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3424:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3428:	2b 81       	ldd	r18, Y+3	; 0x03
    342a:	3c 81       	ldd	r19, Y+4	; 0x04
    342c:	fc 01       	movw	r30, r24
    342e:	33 83       	std	Z+3, r19	; 0x03
    3430:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3432:	2b 81       	ldd	r18, Y+3	; 0x03
    3434:	3c 81       	ldd	r19, Y+4	; 0x04
    3436:	89 81       	ldd	r24, Y+1	; 0x01
    3438:	9a 81       	ldd	r25, Y+2	; 0x02
    343a:	28 17       	cp	r18, r24
    343c:	39 07       	cpc	r19, r25
    343e:	78 f4       	brcc	.+30     	; 0x345e <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3440:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3444:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3448:	9c 01       	movw	r18, r24
    344a:	2e 5f       	subi	r18, 0xFE	; 254
    344c:	3f 4f       	sbci	r19, 0xFF	; 255
    344e:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <pxOverflowDelayedTaskList>
    3452:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <pxOverflowDelayedTaskList+0x1>
    3456:	b9 01       	movw	r22, r18
    3458:	0e 94 11 07 	call	0xe22	; 0xe22 <vListInsert>
    345c:	1d c0       	rjmp	.+58     	; 0x3498 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    345e:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <pxCurrentTCB>
    3462:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <pxCurrentTCB+0x1>
    3466:	9c 01       	movw	r18, r24
    3468:	2e 5f       	subi	r18, 0xFE	; 254
    346a:	3f 4f       	sbci	r19, 0xFF	; 255
    346c:	80 91 a8 05 	lds	r24, 0x05A8	; 0x8005a8 <pxDelayedTaskList>
    3470:	90 91 a9 05 	lds	r25, 0x05A9	; 0x8005a9 <pxDelayedTaskList+0x1>
    3474:	b9 01       	movw	r22, r18
    3476:	0e 94 11 07 	call	0xe22	; 0xe22 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    347a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <xNextTaskUnblockTime>
    347e:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3482:	2b 81       	ldd	r18, Y+3	; 0x03
    3484:	3c 81       	ldd	r19, Y+4	; 0x04
    3486:	28 17       	cp	r18, r24
    3488:	39 07       	cpc	r19, r25
    348a:	30 f4       	brcc	.+12     	; 0x3498 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    348c:	8b 81       	ldd	r24, Y+3	; 0x03
    348e:	9c 81       	ldd	r25, Y+4	; 0x04
    3490:	90 93 c9 05 	sts	0x05C9, r25	; 0x8005c9 <xNextTaskUnblockTime+0x1>
    3494:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3498:	27 96       	adiw	r28, 0x07	; 7
    349a:	0f b6       	in	r0, 0x3f	; 63
    349c:	f8 94       	cli
    349e:	de bf       	out	0x3e, r29	; 62
    34a0:	0f be       	out	0x3f, r0	; 63
    34a2:	cd bf       	out	0x3d, r28	; 61
    34a4:	df 91       	pop	r29
    34a6:	cf 91       	pop	r28
    34a8:	08 95       	ret

000034aa <__divmodhi4>:
    34aa:	97 fb       	bst	r25, 7
    34ac:	07 2e       	mov	r0, r23
    34ae:	16 f4       	brtc	.+4      	; 0x34b4 <__divmodhi4+0xa>
    34b0:	00 94       	com	r0
    34b2:	07 d0       	rcall	.+14     	; 0x34c2 <__divmodhi4_neg1>
    34b4:	77 fd       	sbrc	r23, 7
    34b6:	09 d0       	rcall	.+18     	; 0x34ca <__divmodhi4_neg2>
    34b8:	0e 94 91 1a 	call	0x3522	; 0x3522 <__udivmodhi4>
    34bc:	07 fc       	sbrc	r0, 7
    34be:	05 d0       	rcall	.+10     	; 0x34ca <__divmodhi4_neg2>
    34c0:	3e f4       	brtc	.+14     	; 0x34d0 <__divmodhi4_exit>

000034c2 <__divmodhi4_neg1>:
    34c2:	90 95       	com	r25
    34c4:	81 95       	neg	r24
    34c6:	9f 4f       	sbci	r25, 0xFF	; 255
    34c8:	08 95       	ret

000034ca <__divmodhi4_neg2>:
    34ca:	70 95       	com	r23
    34cc:	61 95       	neg	r22
    34ce:	7f 4f       	sbci	r23, 0xFF	; 255

000034d0 <__divmodhi4_exit>:
    34d0:	08 95       	ret

000034d2 <__udivmodsi4>:
    34d2:	a1 e2       	ldi	r26, 0x21	; 33
    34d4:	1a 2e       	mov	r1, r26
    34d6:	aa 1b       	sub	r26, r26
    34d8:	bb 1b       	sub	r27, r27
    34da:	fd 01       	movw	r30, r26
    34dc:	0d c0       	rjmp	.+26     	; 0x34f8 <__udivmodsi4_ep>

000034de <__udivmodsi4_loop>:
    34de:	aa 1f       	adc	r26, r26
    34e0:	bb 1f       	adc	r27, r27
    34e2:	ee 1f       	adc	r30, r30
    34e4:	ff 1f       	adc	r31, r31
    34e6:	a2 17       	cp	r26, r18
    34e8:	b3 07       	cpc	r27, r19
    34ea:	e4 07       	cpc	r30, r20
    34ec:	f5 07       	cpc	r31, r21
    34ee:	20 f0       	brcs	.+8      	; 0x34f8 <__udivmodsi4_ep>
    34f0:	a2 1b       	sub	r26, r18
    34f2:	b3 0b       	sbc	r27, r19
    34f4:	e4 0b       	sbc	r30, r20
    34f6:	f5 0b       	sbc	r31, r21

000034f8 <__udivmodsi4_ep>:
    34f8:	66 1f       	adc	r22, r22
    34fa:	77 1f       	adc	r23, r23
    34fc:	88 1f       	adc	r24, r24
    34fe:	99 1f       	adc	r25, r25
    3500:	1a 94       	dec	r1
    3502:	69 f7       	brne	.-38     	; 0x34de <__udivmodsi4_loop>
    3504:	60 95       	com	r22
    3506:	70 95       	com	r23
    3508:	80 95       	com	r24
    350a:	90 95       	com	r25
    350c:	9b 01       	movw	r18, r22
    350e:	ac 01       	movw	r20, r24
    3510:	bd 01       	movw	r22, r26
    3512:	cf 01       	movw	r24, r30
    3514:	08 95       	ret

00003516 <__tablejump2__>:
    3516:	ee 0f       	add	r30, r30
    3518:	ff 1f       	adc	r31, r31
    351a:	05 90       	lpm	r0, Z+
    351c:	f4 91       	lpm	r31, Z
    351e:	e0 2d       	mov	r30, r0
    3520:	09 94       	ijmp

00003522 <__udivmodhi4>:
    3522:	aa 1b       	sub	r26, r26
    3524:	bb 1b       	sub	r27, r27
    3526:	51 e1       	ldi	r21, 0x11	; 17
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <__udivmodhi4_ep>

0000352a <__udivmodhi4_loop>:
    352a:	aa 1f       	adc	r26, r26
    352c:	bb 1f       	adc	r27, r27
    352e:	a6 17       	cp	r26, r22
    3530:	b7 07       	cpc	r27, r23
    3532:	10 f0       	brcs	.+4      	; 0x3538 <__udivmodhi4_ep>
    3534:	a6 1b       	sub	r26, r22
    3536:	b7 0b       	sbc	r27, r23

00003538 <__udivmodhi4_ep>:
    3538:	88 1f       	adc	r24, r24
    353a:	99 1f       	adc	r25, r25
    353c:	5a 95       	dec	r21
    353e:	a9 f7       	brne	.-22     	; 0x352a <__udivmodhi4_loop>
    3540:	80 95       	com	r24
    3542:	90 95       	com	r25
    3544:	bc 01       	movw	r22, r24
    3546:	cd 01       	movw	r24, r26
    3548:	08 95       	ret

0000354a <malloc>:
    354a:	cf 93       	push	r28
    354c:	df 93       	push	r29
    354e:	82 30       	cpi	r24, 0x02	; 2
    3550:	91 05       	cpc	r25, r1
    3552:	10 f4       	brcc	.+4      	; 0x3558 <malloc+0xe>
    3554:	82 e0       	ldi	r24, 0x02	; 2
    3556:	90 e0       	ldi	r25, 0x00	; 0
    3558:	e0 91 cf 05 	lds	r30, 0x05CF	; 0x8005cf <__flp>
    355c:	f0 91 d0 05 	lds	r31, 0x05D0	; 0x8005d0 <__flp+0x1>
    3560:	20 e0       	ldi	r18, 0x00	; 0
    3562:	30 e0       	ldi	r19, 0x00	; 0
    3564:	c0 e0       	ldi	r28, 0x00	; 0
    3566:	d0 e0       	ldi	r29, 0x00	; 0
    3568:	30 97       	sbiw	r30, 0x00	; 0
    356a:	11 f1       	breq	.+68     	; 0x35b0 <malloc+0x66>
    356c:	40 81       	ld	r20, Z
    356e:	51 81       	ldd	r21, Z+1	; 0x01
    3570:	48 17       	cp	r20, r24
    3572:	59 07       	cpc	r21, r25
    3574:	c0 f0       	brcs	.+48     	; 0x35a6 <malloc+0x5c>
    3576:	48 17       	cp	r20, r24
    3578:	59 07       	cpc	r21, r25
    357a:	61 f4       	brne	.+24     	; 0x3594 <malloc+0x4a>
    357c:	82 81       	ldd	r24, Z+2	; 0x02
    357e:	93 81       	ldd	r25, Z+3	; 0x03
    3580:	20 97       	sbiw	r28, 0x00	; 0
    3582:	19 f0       	breq	.+6      	; 0x358a <malloc+0x40>
    3584:	9b 83       	std	Y+3, r25	; 0x03
    3586:	8a 83       	std	Y+2, r24	; 0x02
    3588:	2b c0       	rjmp	.+86     	; 0x35e0 <malloc+0x96>
    358a:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    358e:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    3592:	26 c0       	rjmp	.+76     	; 0x35e0 <malloc+0x96>
    3594:	21 15       	cp	r18, r1
    3596:	31 05       	cpc	r19, r1
    3598:	19 f0       	breq	.+6      	; 0x35a0 <malloc+0x56>
    359a:	42 17       	cp	r20, r18
    359c:	53 07       	cpc	r21, r19
    359e:	18 f4       	brcc	.+6      	; 0x35a6 <malloc+0x5c>
    35a0:	9a 01       	movw	r18, r20
    35a2:	be 01       	movw	r22, r28
    35a4:	df 01       	movw	r26, r30
    35a6:	ef 01       	movw	r28, r30
    35a8:	02 80       	ldd	r0, Z+2	; 0x02
    35aa:	f3 81       	ldd	r31, Z+3	; 0x03
    35ac:	e0 2d       	mov	r30, r0
    35ae:	dc cf       	rjmp	.-72     	; 0x3568 <malloc+0x1e>
    35b0:	21 15       	cp	r18, r1
    35b2:	31 05       	cpc	r19, r1
    35b4:	09 f1       	breq	.+66     	; 0x35f8 <malloc+0xae>
    35b6:	28 1b       	sub	r18, r24
    35b8:	39 0b       	sbc	r19, r25
    35ba:	24 30       	cpi	r18, 0x04	; 4
    35bc:	31 05       	cpc	r19, r1
    35be:	90 f4       	brcc	.+36     	; 0x35e4 <malloc+0x9a>
    35c0:	12 96       	adiw	r26, 0x02	; 2
    35c2:	8d 91       	ld	r24, X+
    35c4:	9c 91       	ld	r25, X
    35c6:	13 97       	sbiw	r26, 0x03	; 3
    35c8:	61 15       	cp	r22, r1
    35ca:	71 05       	cpc	r23, r1
    35cc:	21 f0       	breq	.+8      	; 0x35d6 <malloc+0x8c>
    35ce:	fb 01       	movw	r30, r22
    35d0:	93 83       	std	Z+3, r25	; 0x03
    35d2:	82 83       	std	Z+2, r24	; 0x02
    35d4:	04 c0       	rjmp	.+8      	; 0x35de <malloc+0x94>
    35d6:	90 93 d0 05 	sts	0x05D0, r25	; 0x8005d0 <__flp+0x1>
    35da:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <__flp>
    35de:	fd 01       	movw	r30, r26
    35e0:	32 96       	adiw	r30, 0x02	; 2
    35e2:	44 c0       	rjmp	.+136    	; 0x366c <malloc+0x122>
    35e4:	fd 01       	movw	r30, r26
    35e6:	e2 0f       	add	r30, r18
    35e8:	f3 1f       	adc	r31, r19
    35ea:	81 93       	st	Z+, r24
    35ec:	91 93       	st	Z+, r25
    35ee:	22 50       	subi	r18, 0x02	; 2
    35f0:	31 09       	sbc	r19, r1
    35f2:	2d 93       	st	X+, r18
    35f4:	3c 93       	st	X, r19
    35f6:	3a c0       	rjmp	.+116    	; 0x366c <malloc+0x122>
    35f8:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    35fc:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    3600:	23 2b       	or	r18, r19
    3602:	41 f4       	brne	.+16     	; 0x3614 <malloc+0xca>
    3604:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3608:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    360c:	30 93 ce 05 	sts	0x05CE, r19	; 0x8005ce <__brkval+0x1>
    3610:	20 93 cd 05 	sts	0x05CD, r18	; 0x8005cd <__brkval>
    3614:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3618:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    361c:	21 15       	cp	r18, r1
    361e:	31 05       	cpc	r19, r1
    3620:	41 f4       	brne	.+16     	; 0x3632 <malloc+0xe8>
    3622:	2d b7       	in	r18, 0x3d	; 61
    3624:	3e b7       	in	r19, 0x3e	; 62
    3626:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    362a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    362e:	24 1b       	sub	r18, r20
    3630:	35 0b       	sbc	r19, r21
    3632:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <__brkval>
    3636:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <__brkval+0x1>
    363a:	e2 17       	cp	r30, r18
    363c:	f3 07       	cpc	r31, r19
    363e:	a0 f4       	brcc	.+40     	; 0x3668 <malloc+0x11e>
    3640:	2e 1b       	sub	r18, r30
    3642:	3f 0b       	sbc	r19, r31
    3644:	28 17       	cp	r18, r24
    3646:	39 07       	cpc	r19, r25
    3648:	78 f0       	brcs	.+30     	; 0x3668 <malloc+0x11e>
    364a:	ac 01       	movw	r20, r24
    364c:	4e 5f       	subi	r20, 0xFE	; 254
    364e:	5f 4f       	sbci	r21, 0xFF	; 255
    3650:	24 17       	cp	r18, r20
    3652:	35 07       	cpc	r19, r21
    3654:	48 f0       	brcs	.+18     	; 0x3668 <malloc+0x11e>
    3656:	4e 0f       	add	r20, r30
    3658:	5f 1f       	adc	r21, r31
    365a:	50 93 ce 05 	sts	0x05CE, r21	; 0x8005ce <__brkval+0x1>
    365e:	40 93 cd 05 	sts	0x05CD, r20	; 0x8005cd <__brkval>
    3662:	81 93       	st	Z+, r24
    3664:	91 93       	st	Z+, r25
    3666:	02 c0       	rjmp	.+4      	; 0x366c <malloc+0x122>
    3668:	e0 e0       	ldi	r30, 0x00	; 0
    366a:	f0 e0       	ldi	r31, 0x00	; 0
    366c:	cf 01       	movw	r24, r30
    366e:	df 91       	pop	r29
    3670:	cf 91       	pop	r28
    3672:	08 95       	ret

00003674 <free>:
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	cf 93       	push	r28
    367a:	df 93       	push	r29
    367c:	00 97       	sbiw	r24, 0x00	; 0
    367e:	09 f4       	brne	.+2      	; 0x3682 <free+0xe>
    3680:	8c c0       	rjmp	.+280    	; 0x379a <free+0x126>
    3682:	fc 01       	movw	r30, r24
    3684:	32 97       	sbiw	r30, 0x02	; 2
    3686:	13 82       	std	Z+3, r1	; 0x03
    3688:	12 82       	std	Z+2, r1	; 0x02
    368a:	00 91 cf 05 	lds	r16, 0x05CF	; 0x8005cf <__flp>
    368e:	10 91 d0 05 	lds	r17, 0x05D0	; 0x8005d0 <__flp+0x1>
    3692:	01 15       	cp	r16, r1
    3694:	11 05       	cpc	r17, r1
    3696:	81 f4       	brne	.+32     	; 0x36b8 <free+0x44>
    3698:	20 81       	ld	r18, Z
    369a:	31 81       	ldd	r19, Z+1	; 0x01
    369c:	82 0f       	add	r24, r18
    369e:	93 1f       	adc	r25, r19
    36a0:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    36a4:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    36a8:	28 17       	cp	r18, r24
    36aa:	39 07       	cpc	r19, r25
    36ac:	79 f5       	brne	.+94     	; 0x370c <free+0x98>
    36ae:	f0 93 ce 05 	sts	0x05CE, r31	; 0x8005ce <__brkval+0x1>
    36b2:	e0 93 cd 05 	sts	0x05CD, r30	; 0x8005cd <__brkval>
    36b6:	71 c0       	rjmp	.+226    	; 0x379a <free+0x126>
    36b8:	d8 01       	movw	r26, r16
    36ba:	40 e0       	ldi	r20, 0x00	; 0
    36bc:	50 e0       	ldi	r21, 0x00	; 0
    36be:	ae 17       	cp	r26, r30
    36c0:	bf 07       	cpc	r27, r31
    36c2:	50 f4       	brcc	.+20     	; 0x36d8 <free+0x64>
    36c4:	12 96       	adiw	r26, 0x02	; 2
    36c6:	2d 91       	ld	r18, X+
    36c8:	3c 91       	ld	r19, X
    36ca:	13 97       	sbiw	r26, 0x03	; 3
    36cc:	ad 01       	movw	r20, r26
    36ce:	21 15       	cp	r18, r1
    36d0:	31 05       	cpc	r19, r1
    36d2:	09 f1       	breq	.+66     	; 0x3716 <free+0xa2>
    36d4:	d9 01       	movw	r26, r18
    36d6:	f3 cf       	rjmp	.-26     	; 0x36be <free+0x4a>
    36d8:	9d 01       	movw	r18, r26
    36da:	da 01       	movw	r26, r20
    36dc:	33 83       	std	Z+3, r19	; 0x03
    36de:	22 83       	std	Z+2, r18	; 0x02
    36e0:	60 81       	ld	r22, Z
    36e2:	71 81       	ldd	r23, Z+1	; 0x01
    36e4:	86 0f       	add	r24, r22
    36e6:	97 1f       	adc	r25, r23
    36e8:	82 17       	cp	r24, r18
    36ea:	93 07       	cpc	r25, r19
    36ec:	69 f4       	brne	.+26     	; 0x3708 <free+0x94>
    36ee:	ec 01       	movw	r28, r24
    36f0:	28 81       	ld	r18, Y
    36f2:	39 81       	ldd	r19, Y+1	; 0x01
    36f4:	26 0f       	add	r18, r22
    36f6:	37 1f       	adc	r19, r23
    36f8:	2e 5f       	subi	r18, 0xFE	; 254
    36fa:	3f 4f       	sbci	r19, 0xFF	; 255
    36fc:	31 83       	std	Z+1, r19	; 0x01
    36fe:	20 83       	st	Z, r18
    3700:	8a 81       	ldd	r24, Y+2	; 0x02
    3702:	9b 81       	ldd	r25, Y+3	; 0x03
    3704:	93 83       	std	Z+3, r25	; 0x03
    3706:	82 83       	std	Z+2, r24	; 0x02
    3708:	45 2b       	or	r20, r21
    370a:	29 f4       	brne	.+10     	; 0x3716 <free+0xa2>
    370c:	f0 93 d0 05 	sts	0x05D0, r31	; 0x8005d0 <__flp+0x1>
    3710:	e0 93 cf 05 	sts	0x05CF, r30	; 0x8005cf <__flp>
    3714:	42 c0       	rjmp	.+132    	; 0x379a <free+0x126>
    3716:	13 96       	adiw	r26, 0x03	; 3
    3718:	fc 93       	st	X, r31
    371a:	ee 93       	st	-X, r30
    371c:	12 97       	sbiw	r26, 0x02	; 2
    371e:	ed 01       	movw	r28, r26
    3720:	49 91       	ld	r20, Y+
    3722:	59 91       	ld	r21, Y+
    3724:	9e 01       	movw	r18, r28
    3726:	24 0f       	add	r18, r20
    3728:	35 1f       	adc	r19, r21
    372a:	e2 17       	cp	r30, r18
    372c:	f3 07       	cpc	r31, r19
    372e:	71 f4       	brne	.+28     	; 0x374c <free+0xd8>
    3730:	80 81       	ld	r24, Z
    3732:	91 81       	ldd	r25, Z+1	; 0x01
    3734:	84 0f       	add	r24, r20
    3736:	95 1f       	adc	r25, r21
    3738:	02 96       	adiw	r24, 0x02	; 2
    373a:	11 96       	adiw	r26, 0x01	; 1
    373c:	9c 93       	st	X, r25
    373e:	8e 93       	st	-X, r24
    3740:	82 81       	ldd	r24, Z+2	; 0x02
    3742:	93 81       	ldd	r25, Z+3	; 0x03
    3744:	13 96       	adiw	r26, 0x03	; 3
    3746:	9c 93       	st	X, r25
    3748:	8e 93       	st	-X, r24
    374a:	12 97       	sbiw	r26, 0x02	; 2
    374c:	e0 e0       	ldi	r30, 0x00	; 0
    374e:	f0 e0       	ldi	r31, 0x00	; 0
    3750:	d8 01       	movw	r26, r16
    3752:	12 96       	adiw	r26, 0x02	; 2
    3754:	8d 91       	ld	r24, X+
    3756:	9c 91       	ld	r25, X
    3758:	13 97       	sbiw	r26, 0x03	; 3
    375a:	00 97       	sbiw	r24, 0x00	; 0
    375c:	19 f0       	breq	.+6      	; 0x3764 <free+0xf0>
    375e:	f8 01       	movw	r30, r16
    3760:	8c 01       	movw	r16, r24
    3762:	f6 cf       	rjmp	.-20     	; 0x3750 <free+0xdc>
    3764:	8d 91       	ld	r24, X+
    3766:	9c 91       	ld	r25, X
    3768:	98 01       	movw	r18, r16
    376a:	2e 5f       	subi	r18, 0xFE	; 254
    376c:	3f 4f       	sbci	r19, 0xFF	; 255
    376e:	82 0f       	add	r24, r18
    3770:	93 1f       	adc	r25, r19
    3772:	20 91 cd 05 	lds	r18, 0x05CD	; 0x8005cd <__brkval>
    3776:	30 91 ce 05 	lds	r19, 0x05CE	; 0x8005ce <__brkval+0x1>
    377a:	28 17       	cp	r18, r24
    377c:	39 07       	cpc	r19, r25
    377e:	69 f4       	brne	.+26     	; 0x379a <free+0x126>
    3780:	30 97       	sbiw	r30, 0x00	; 0
    3782:	29 f4       	brne	.+10     	; 0x378e <free+0x11a>
    3784:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <__flp+0x1>
    3788:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <__flp>
    378c:	02 c0       	rjmp	.+4      	; 0x3792 <free+0x11e>
    378e:	13 82       	std	Z+3, r1	; 0x03
    3790:	12 82       	std	Z+2, r1	; 0x02
    3792:	10 93 ce 05 	sts	0x05CE, r17	; 0x8005ce <__brkval+0x1>
    3796:	00 93 cd 05 	sts	0x05CD, r16	; 0x8005cd <__brkval>
    379a:	df 91       	pop	r29
    379c:	cf 91       	pop	r28
    379e:	1f 91       	pop	r17
    37a0:	0f 91       	pop	r16
    37a2:	08 95       	ret

000037a4 <do_rand>:
    37a4:	8f 92       	push	r8
    37a6:	9f 92       	push	r9
    37a8:	af 92       	push	r10
    37aa:	bf 92       	push	r11
    37ac:	cf 92       	push	r12
    37ae:	df 92       	push	r13
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	cf 93       	push	r28
    37b6:	df 93       	push	r29
    37b8:	ec 01       	movw	r28, r24
    37ba:	68 81       	ld	r22, Y
    37bc:	79 81       	ldd	r23, Y+1	; 0x01
    37be:	8a 81       	ldd	r24, Y+2	; 0x02
    37c0:	9b 81       	ldd	r25, Y+3	; 0x03
    37c2:	61 15       	cp	r22, r1
    37c4:	71 05       	cpc	r23, r1
    37c6:	81 05       	cpc	r24, r1
    37c8:	91 05       	cpc	r25, r1
    37ca:	21 f4       	brne	.+8      	; 0x37d4 <do_rand+0x30>
    37cc:	64 e2       	ldi	r22, 0x24	; 36
    37ce:	79 ed       	ldi	r23, 0xD9	; 217
    37d0:	8b e5       	ldi	r24, 0x5B	; 91
    37d2:	97 e0       	ldi	r25, 0x07	; 7
    37d4:	2d e1       	ldi	r18, 0x1D	; 29
    37d6:	33 ef       	ldi	r19, 0xF3	; 243
    37d8:	41 e0       	ldi	r20, 0x01	; 1
    37da:	50 e0       	ldi	r21, 0x00	; 0
    37dc:	0e 94 3e 1c 	call	0x387c	; 0x387c <__divmodsi4>
    37e0:	49 01       	movw	r8, r18
    37e2:	5a 01       	movw	r10, r20
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	a7 ea       	ldi	r26, 0xA7	; 167
    37ea:	b1 e4       	ldi	r27, 0x41	; 65
    37ec:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__muluhisi3>
    37f0:	6b 01       	movw	r12, r22
    37f2:	7c 01       	movw	r14, r24
    37f4:	ac ee       	ldi	r26, 0xEC	; 236
    37f6:	b4 ef       	ldi	r27, 0xF4	; 244
    37f8:	a5 01       	movw	r20, r10
    37fa:	94 01       	movw	r18, r8
    37fc:	0e 94 6b 1c 	call	0x38d6	; 0x38d6 <__mulohisi3>
    3800:	dc 01       	movw	r26, r24
    3802:	cb 01       	movw	r24, r22
    3804:	8c 0d       	add	r24, r12
    3806:	9d 1d       	adc	r25, r13
    3808:	ae 1d       	adc	r26, r14
    380a:	bf 1d       	adc	r27, r15
    380c:	b7 ff       	sbrs	r27, 7
    380e:	03 c0       	rjmp	.+6      	; 0x3816 <do_rand+0x72>
    3810:	01 97       	sbiw	r24, 0x01	; 1
    3812:	a1 09       	sbc	r26, r1
    3814:	b0 48       	sbci	r27, 0x80	; 128
    3816:	88 83       	st	Y, r24
    3818:	99 83       	std	Y+1, r25	; 0x01
    381a:	aa 83       	std	Y+2, r26	; 0x02
    381c:	bb 83       	std	Y+3, r27	; 0x03
    381e:	9f 77       	andi	r25, 0x7F	; 127
    3820:	df 91       	pop	r29
    3822:	cf 91       	pop	r28
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	bf 90       	pop	r11
    382e:	af 90       	pop	r10
    3830:	9f 90       	pop	r9
    3832:	8f 90       	pop	r8
    3834:	08 95       	ret

00003836 <rand_r>:
    3836:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <do_rand>
    383a:	08 95       	ret

0000383c <rand>:
    383c:	86 e0       	ldi	r24, 0x06	; 6
    383e:	91 e0       	ldi	r25, 0x01	; 1
    3840:	0e 94 d2 1b 	call	0x37a4	; 0x37a4 <do_rand>
    3844:	08 95       	ret

00003846 <srand>:
    3846:	a0 e0       	ldi	r26, 0x00	; 0
    3848:	b0 e0       	ldi	r27, 0x00	; 0
    384a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    384e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3852:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3856:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    385a:	08 95       	ret

0000385c <memcpy>:
    385c:	fb 01       	movw	r30, r22
    385e:	dc 01       	movw	r26, r24
    3860:	02 c0       	rjmp	.+4      	; 0x3866 <memcpy+0xa>
    3862:	01 90       	ld	r0, Z+
    3864:	0d 92       	st	X+, r0
    3866:	41 50       	subi	r20, 0x01	; 1
    3868:	50 40       	sbci	r21, 0x00	; 0
    386a:	d8 f7       	brcc	.-10     	; 0x3862 <memcpy+0x6>
    386c:	08 95       	ret

0000386e <memset>:
    386e:	dc 01       	movw	r26, r24
    3870:	01 c0       	rjmp	.+2      	; 0x3874 <memset+0x6>
    3872:	6d 93       	st	X+, r22
    3874:	41 50       	subi	r20, 0x01	; 1
    3876:	50 40       	sbci	r21, 0x00	; 0
    3878:	e0 f7       	brcc	.-8      	; 0x3872 <memset+0x4>
    387a:	08 95       	ret

0000387c <__divmodsi4>:
    387c:	05 2e       	mov	r0, r21
    387e:	97 fb       	bst	r25, 7
    3880:	1e f4       	brtc	.+6      	; 0x3888 <__divmodsi4+0xc>
    3882:	00 94       	com	r0
    3884:	0e 94 55 1c 	call	0x38aa	; 0x38aa <__negsi2>
    3888:	57 fd       	sbrc	r21, 7
    388a:	07 d0       	rcall	.+14     	; 0x389a <__divmodsi4_neg2>
    388c:	0e 94 69 1a 	call	0x34d2	; 0x34d2 <__udivmodsi4>
    3890:	07 fc       	sbrc	r0, 7
    3892:	03 d0       	rcall	.+6      	; 0x389a <__divmodsi4_neg2>
    3894:	4e f4       	brtc	.+18     	; 0x38a8 <__divmodsi4_exit>
    3896:	0c 94 55 1c 	jmp	0x38aa	; 0x38aa <__negsi2>

0000389a <__divmodsi4_neg2>:
    389a:	50 95       	com	r21
    389c:	40 95       	com	r20
    389e:	30 95       	com	r19
    38a0:	21 95       	neg	r18
    38a2:	3f 4f       	sbci	r19, 0xFF	; 255
    38a4:	4f 4f       	sbci	r20, 0xFF	; 255
    38a6:	5f 4f       	sbci	r21, 0xFF	; 255

000038a8 <__divmodsi4_exit>:
    38a8:	08 95       	ret

000038aa <__negsi2>:
    38aa:	90 95       	com	r25
    38ac:	80 95       	com	r24
    38ae:	70 95       	com	r23
    38b0:	61 95       	neg	r22
    38b2:	7f 4f       	sbci	r23, 0xFF	; 255
    38b4:	8f 4f       	sbci	r24, 0xFF	; 255
    38b6:	9f 4f       	sbci	r25, 0xFF	; 255
    38b8:	08 95       	ret

000038ba <__muluhisi3>:
    38ba:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__umulhisi3>
    38be:	a5 9f       	mul	r26, r21
    38c0:	90 0d       	add	r25, r0
    38c2:	b4 9f       	mul	r27, r20
    38c4:	90 0d       	add	r25, r0
    38c6:	a4 9f       	mul	r26, r20
    38c8:	80 0d       	add	r24, r0
    38ca:	91 1d       	adc	r25, r1
    38cc:	11 24       	eor	r1, r1
    38ce:	08 95       	ret

000038d0 <__mulshisi3>:
    38d0:	b7 ff       	sbrs	r27, 7
    38d2:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <__muluhisi3>

000038d6 <__mulohisi3>:
    38d6:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <__muluhisi3>
    38da:	82 1b       	sub	r24, r18
    38dc:	93 0b       	sbc	r25, r19
    38de:	08 95       	ret

000038e0 <__umulhisi3>:
    38e0:	a2 9f       	mul	r26, r18
    38e2:	b0 01       	movw	r22, r0
    38e4:	b3 9f       	mul	r27, r19
    38e6:	c0 01       	movw	r24, r0
    38e8:	a3 9f       	mul	r26, r19
    38ea:	70 0d       	add	r23, r0
    38ec:	81 1d       	adc	r24, r1
    38ee:	11 24       	eor	r1, r1
    38f0:	91 1d       	adc	r25, r1
    38f2:	b2 9f       	mul	r27, r18
    38f4:	70 0d       	add	r23, r0
    38f6:	81 1d       	adc	r24, r1
    38f8:	11 24       	eor	r1, r1
    38fa:	91 1d       	adc	r25, r1
    38fc:	08 95       	ret

000038fe <_exit>:
    38fe:	f8 94       	cli

00003900 <__stop_program>:
    3900:	ff cf       	rjmp	.-2      	; 0x3900 <__stop_program>
