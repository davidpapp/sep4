
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00003c3c  00003cd0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c3c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  00800156  00800156  00003d26  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003d26  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003d58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00003d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000380e  00000000  00000000  00004278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  00007a86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000035c8  00000000  00000000  000085e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000132c  00000000  00000000  0000bbb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000190b  00000000  00000000  0000cedc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028fd  00000000  00000000  0000e7e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  000110e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 e1 0b 	jmp	0x17c2	; 0x17c2 <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 1f 06 	jmp	0xc3e	; 0xc3e <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 06 0d 	jmp	0x1a0c	; 0x1a0c <__vector_20>
      54:	0c 94 5e 0d 	jmp	0x1abc	; 0x1abc <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 b8 0d 	jmp	0x1b70	; 0x1b70 <__vector_28>
      74:	0c 94 10 0e 	jmp	0x1c20	; 0x1c20 <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	4e 03       	fmul	r20, r22
      7e:	57 03       	mulsu	r21, r23
      80:	6a 03       	fmul	r22, r18
      82:	75 03       	mulsu	r23, r21
      84:	88 03       	fmulsu	r16, r16
      86:	91 03       	fmuls	r17, r17
      88:	a4 03       	fmuls	r18, r20
      8a:	af 03       	fmulsu	r18, r23

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec e3       	ldi	r30, 0x3C	; 60
      a0:	fc e3       	ldi	r31, 0x3C	; 60
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 35       	cpi	r26, 0x56	; 86
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	a6 e5       	ldi	r26, 0x56	; 86
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ab 3d       	cpi	r26, 0xDB	; 219
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 55 05 	call	0xaaa	; 0xaaa <main>
      c2:	0c 94 1c 1e 	jmp	0x3c38	; 0x3c38 <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <serial_task>:
				if (data == 0x62){
					col_value[0] >>= 1;
				}
			}
		}	
	}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	28 97       	sbiw	r28, 0x08	; 8
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
      de:	98 87       	std	Y+8, r25	; 0x08
      e0:	8f 83       	std	Y+7, r24	; 0x07
      e2:	19 82       	std	Y+1, r1	; 0x01
      e4:	1e 82       	std	Y+6, r1	; 0x06
      e6:	1a 82       	std	Y+2, r1	; 0x02
      e8:	8f ef       	ldi	r24, 0xFF	; 255
      ea:	8b 83       	std	Y+3, r24	; 0x03
      ec:	0e 94 e5 16 	call	0x2dca	; 0x2dca <xTaskGetTickCount>
      f0:	9d 83       	std	Y+5, r25	; 0x05
      f2:	8c 83       	std	Y+4, r24	; 0x04
      f4:	2e c0       	rjmp	.+92     	; 0x152 <serial_task+0x88>
      f6:	89 81       	ldd	r24, Y+1	; 0x01
      f8:	88 2f       	mov	r24, r24
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	81 30       	cpi	r24, 0x01	; 1
      fe:	91 05       	cpc	r25, r1
     100:	61 f0       	breq	.+24     	; 0x11a <serial_task+0x50>
     102:	82 30       	cpi	r24, 0x02	; 2
     104:	91 05       	cpc	r25, r1
     106:	b1 f0       	breq	.+44     	; 0x134 <serial_task+0x6a>
     108:	89 2b       	or	r24, r25
     10a:	09 f5       	brne	.+66     	; 0x14e <serial_task+0x84>
     10c:	9e 81       	ldd	r25, Y+6	; 0x06
     10e:	8a 81       	ldd	r24, Y+2	; 0x02
     110:	98 17       	cp	r25, r24
     112:	11 f4       	brne	.+4      	; 0x118 <serial_task+0x4e>
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	89 83       	std	Y+1, r24	; 0x01
     118:	1c c0       	rjmp	.+56     	; 0x152 <serial_task+0x88>
     11a:	9e 81       	ldd	r25, Y+6	; 0x06
     11c:	8a 81       	ldd	r24, Y+2	; 0x02
     11e:	98 17       	cp	r25, r24
     120:	11 f4       	brne	.+4      	; 0x126 <serial_task+0x5c>
     122:	19 82       	std	Y+1, r1	; 0x01
     124:	06 c0       	rjmp	.+12     	; 0x132 <serial_task+0x68>
     126:	9e 81       	ldd	r25, Y+6	; 0x06
     128:	8b 81       	ldd	r24, Y+3	; 0x03
     12a:	98 17       	cp	r25, r24
     12c:	11 f4       	brne	.+4      	; 0x132 <serial_task+0x68>
     12e:	82 e0       	ldi	r24, 0x02	; 2
     130:	89 83       	std	Y+1, r24	; 0x01
     132:	0f c0       	rjmp	.+30     	; 0x152 <serial_task+0x88>
     134:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     138:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     13c:	be 01       	movw	r22, r28
     13e:	6a 5f       	subi	r22, 0xFA	; 250
     140:	7f 4f       	sbci	r23, 0xFF	; 255
     142:	20 e0       	ldi	r18, 0x00	; 0
     144:	40 e0       	ldi	r20, 0x00	; 0
     146:	50 e0       	ldi	r21, 0x00	; 0
     148:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
     14c:	02 c0       	rjmp	.+4      	; 0x152 <serial_task+0x88>
     14e:	19 82       	std	Y+1, r1	; 0x01
     150:	00 00       	nop
     152:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     156:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     15a:	be 01       	movw	r22, r28
     15c:	6a 5f       	subi	r22, 0xFA	; 250
     15e:	7f 4f       	sbci	r23, 0xFF	; 255
     160:	20 e0       	ldi	r18, 0x00	; 0
     162:	40 e0       	ldi	r20, 0x00	; 0
     164:	50 e0       	ldi	r21, 0x00	; 0
     166:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
     16a:	88 23       	and	r24, r24
     16c:	21 f6       	brne	.-120    	; 0xf6 <serial_task+0x2c>
     16e:	ce 01       	movw	r24, r28
     170:	04 96       	adiw	r24, 0x04	; 4
     172:	64 e1       	ldi	r22, 0x14	; 20
     174:	70 e0       	ldi	r23, 0x00	; 0
     176:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vTaskDelayUntil>
     17a:	bc cf       	rjmp	.-136    	; 0xf4 <serial_task+0x2a>

0000017c <move_player>:
	
}

void move_player(uint8_t *position, uint8_t direction){
     17c:	cf 93       	push	r28
     17e:	df 93       	push	r29
     180:	00 d0       	rcall	.+0      	; 0x182 <move_player+0x6>
     182:	00 d0       	rcall	.+0      	; 0x184 <move_player+0x8>
     184:	1f 92       	push	r1
     186:	cd b7       	in	r28, 0x3d	; 61
     188:	de b7       	in	r29, 0x3e	; 62
     18a:	9c 83       	std	Y+4, r25	; 0x04
     18c:	8b 83       	std	Y+3, r24	; 0x03
     18e:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
     190:	85 e0       	ldi	r24, 0x05	; 5
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	9a 83       	std	Y+2, r25	; 0x02
     196:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
     198:	8d 81       	ldd	r24, Y+5	; 0x05
     19a:	88 23       	and	r24, r24
     19c:	81 f4       	brne	.+32     	; 0x1be <move_player+0x42>
		mask <<= *position;
     19e:	8b 81       	ldd	r24, Y+3	; 0x03
     1a0:	9c 81       	ldd	r25, Y+4	; 0x04
     1a2:	fc 01       	movw	r30, r24
     1a4:	80 81       	ld	r24, Z
     1a6:	28 2f       	mov	r18, r24
     1a8:	30 e0       	ldi	r19, 0x00	; 0
     1aa:	89 81       	ldd	r24, Y+1	; 0x01
     1ac:	9a 81       	ldd	r25, Y+2	; 0x02
     1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <move_player+0x38>
     1b0:	88 0f       	add	r24, r24
     1b2:	99 1f       	adc	r25, r25
     1b4:	2a 95       	dec	r18
     1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <move_player+0x34>
     1b8:	9a 83       	std	Y+2, r25	; 0x02
     1ba:	89 83       	std	Y+1, r24	; 0x01
     1bc:	12 c0       	rjmp	.+36     	; 0x1e2 <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     1be:	8b 81       	ldd	r24, Y+3	; 0x03
     1c0:	9c 81       	ldd	r25, Y+4	; 0x04
     1c2:	fc 01       	movw	r30, r24
     1c4:	80 81       	ld	r24, Z
     1c6:	88 2f       	mov	r24, r24
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	9c 01       	movw	r18, r24
     1cc:	21 50       	subi	r18, 0x01	; 1
     1ce:	31 09       	sbc	r19, r1
     1d0:	89 81       	ldd	r24, Y+1	; 0x01
     1d2:	9a 81       	ldd	r25, Y+2	; 0x02
     1d4:	02 c0       	rjmp	.+4      	; 0x1da <move_player+0x5e>
     1d6:	88 0f       	add	r24, r24
     1d8:	99 1f       	adc	r25, r25
     1da:	2a 95       	dec	r18
     1dc:	e2 f7       	brpl	.-8      	; 0x1d6 <move_player+0x5a>
     1de:	9a 83       	std	Y+2, r25	; 0x02
     1e0:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     1e2:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     1e6:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     1ea:	20 e0       	ldi	r18, 0x00	; 0
     1ec:	4a e0       	ldi	r20, 0x0A	; 10
     1ee:	50 e0       	ldi	r21, 0x00	; 0
     1f0:	60 e0       	ldi	r22, 0x00	; 0
     1f2:	70 e0       	ldi	r23, 0x00	; 0
     1f4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
	col_value[0] ^= mask;
     1f8:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     1fc:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     200:	89 81       	ldd	r24, Y+1	; 0x01
     202:	9a 81       	ldd	r25, Y+2	; 0x02
     204:	82 27       	eor	r24, r18
     206:	93 27       	eor	r25, r19
     208:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     20c:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     210:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     214:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     218:	20 e0       	ldi	r18, 0x00	; 0
     21a:	40 e0       	ldi	r20, 0x00	; 0
     21c:	50 e0       	ldi	r21, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	70 e0       	ldi	r23, 0x00	; 0
     222:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
}
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	0f 90       	pop	r0
     22c:	0f 90       	pop	r0
     22e:	0f 90       	pop	r0
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <local_player_task>:

void local_player_task(void *pvParameters)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	00 d0       	rcall	.+0      	; 0x23c <local_player_task+0x6>
     23c:	00 d0       	rcall	.+0      	; 0x23e <local_player_task+0x8>
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
     242:	9c 83       	std	Y+4, r25	; 0x04
     244:	8b 83       	std	Y+3, r24	; 0x03
	(void) pvParameters;
	
	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     246:	0e 94 e5 16 	call	0x2dca	; 0x2dca <xTaskGetTickCount>
     24a:	9a 83       	std	Y+2, r25	; 0x02
     24c:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     24e:	86 e2       	ldi	r24, 0x26	; 38
     250:	90 e0       	ldi	r25, 0x00	; 0
     252:	fc 01       	movw	r30, r24
     254:	80 81       	ld	r24, Z
     256:	88 2f       	mov	r24, r24
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	80 74       	andi	r24, 0x40	; 64
     25c:	99 27       	eor	r25, r25
     25e:	89 2b       	or	r24, r25
     260:	61 f5       	brne	.+88     	; 0x2ba <local_player_task+0x84>
     262:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     266:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     26a:	18 16       	cp	r1, r24
     26c:	19 06       	cpc	r1, r25
     26e:	2c f5       	brge	.+74     	; 0x2ba <local_player_task+0x84>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     270:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     274:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     278:	20 e0       	ldi	r18, 0x00	; 0
     27a:	4a e0       	ldi	r20, 0x0A	; 10
     27c:	50 e0       	ldi	r21, 0x00	; 0
     27e:	60 e0       	ldi	r22, 0x00	; 0
     280:	70 e0       	ldi	r23, 0x00	; 0
     282:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
			--player_position;
     286:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     28a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     28e:	01 97       	sbiw	r24, 0x01	; 1
     290:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     294:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     298:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     29c:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     2a0:	20 e0       	ldi	r18, 0x00	; 0
     2a2:	40 e0       	ldi	r20, 0x00	; 0
     2a4:	50 e0       	ldi	r21, 0x00	; 0
     2a6:	60 e0       	ldi	r22, 0x00	; 0
     2a8:	70 e0       	ldi	r23, 0x00	; 0
     2aa:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
			move_player(&player_position, 0);
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8a e0       	ldi	r24, 0x0A	; 10
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	0e 94 be 00 	call	0x17c	; 0x17c <move_player>
     2b8:	34 c0       	rjmp	.+104    	; 0x322 <local_player_task+0xec>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     2ba:	86 e2       	ldi	r24, 0x26	; 38
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	fc 01       	movw	r30, r24
     2c0:	80 81       	ld	r24, Z
     2c2:	88 2f       	mov	r24, r24
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	81 70       	andi	r24, 0x01	; 1
     2c8:	99 27       	eor	r25, r25
     2ca:	89 2b       	or	r24, r25
     2cc:	51 f5       	brne	.+84     	; 0x322 <local_player_task+0xec>
     2ce:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     2d2:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     2d6:	08 97       	sbiw	r24, 0x08	; 8
     2d8:	24 f5       	brge	.+72     	; 0x322 <local_player_task+0xec>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     2da:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     2de:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     2e2:	20 e0       	ldi	r18, 0x00	; 0
     2e4:	4a e0       	ldi	r20, 0x0A	; 10
     2e6:	50 e0       	ldi	r21, 0x00	; 0
     2e8:	60 e0       	ldi	r22, 0x00	; 0
     2ea:	70 e0       	ldi	r23, 0x00	; 0
     2ec:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
			++player_position;
     2f0:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     2f4:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     2f8:	01 96       	adiw	r24, 0x01	; 1
     2fa:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     2fe:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     302:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     306:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	40 e0       	ldi	r20, 0x00	; 0
     30e:	50 e0       	ldi	r21, 0x00	; 0
     310:	60 e0       	ldi	r22, 0x00	; 0
     312:	70 e0       	ldi	r23, 0x00	; 0
     314:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
			move_player(&player_position, 1);
     318:	61 e0       	ldi	r22, 0x01	; 1
     31a:	8a e0       	ldi	r24, 0x0A	; 10
     31c:	91 e0       	ldi	r25, 0x01	; 1
     31e:	0e 94 be 00 	call	0x17c	; 0x17c <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     322:	68 e2       	ldi	r22, 0x28	; 40
     324:	70 e0       	ldi	r23, 0x00	; 0
     326:	ce 01       	movw	r24, r28
     328:	01 96       	adiw	r24, 0x01	; 1
     32a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vTaskDelayUntil>
	}	
     32e:	8f cf       	rjmp	.-226    	; 0x24e <local_player_task+0x18>

00000330 <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	00 d0       	rcall	.+0      	; 0x336 <bounce+0x6>
     336:	00 d0       	rcall	.+0      	; 0x338 <bounce+0x8>
     338:	00 d0       	rcall	.+0      	; 0x33a <bounce+0xa>
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
     33e:	9b 83       	std	Y+3, r25	; 0x03
     340:	8a 83       	std	Y+2, r24	; 0x02
     342:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     344:	8a 81       	ldd	r24, Y+2	; 0x02
     346:	9b 81       	ldd	r25, Y+3	; 0x03
     348:	fc 01       	movw	r30, r24
     34a:	80 81       	ld	r24, Z
     34c:	81 70       	andi	r24, 0x01	; 1
     34e:	88 23       	and	r24, r24
     350:	d9 f4       	brne	.+54     	; 0x388 <bounce+0x58>
		uint8_t r = rand()%3;
     352:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <rand>
     356:	23 e0       	ldi	r18, 0x03	; 3
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	b9 01       	movw	r22, r18
     35c:	0e 94 f2 1b 	call	0x37e4	; 0x37e4 <__divmodhi4>
     360:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8d 5f       	subi	r24, 0xFD	; 253
     366:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	9b 81       	ldd	r25, Y+3	; 0x03
     36c:	fc 01       	movw	r30, r24
     36e:	80 81       	ld	r24, Z
     370:	99 81       	ldd	r25, Y+1	; 0x01
     372:	89 0f       	add	r24, r25
     374:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     376:	89 81       	ldd	r24, Y+1	; 0x01
     378:	87 70       	andi	r24, 0x07	; 7
     37a:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     37c:	8a 81       	ldd	r24, Y+2	; 0x02
     37e:	9b 81       	ldd	r25, Y+3	; 0x03
     380:	29 81       	ldd	r18, Y+1	; 0x01
     382:	fc 01       	movw	r30, r24
     384:	20 83       	st	Z, r18
     386:	5e c0       	rjmp	.+188    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
	}
	else{
		if (side == 0){
     388:	8c 81       	ldd	r24, Y+4	; 0x04
     38a:	88 23       	and	r24, r24
     38c:	71 f5       	brne	.+92     	; 0x3ea <bounce+0xba>
			switch (*direction){
     38e:	8a 81       	ldd	r24, Y+2	; 0x02
     390:	9b 81       	ldd	r25, Y+3	; 0x03
     392:	fc 01       	movw	r30, r24
     394:	80 81       	ld	r24, Z
     396:	88 2f       	mov	r24, r24
     398:	90 e0       	ldi	r25, 0x00	; 0
     39a:	83 30       	cpi	r24, 0x03	; 3
     39c:	91 05       	cpc	r25, r1
     39e:	91 f0       	breq	.+36     	; 0x3c4 <bounce+0x94>
     3a0:	84 30       	cpi	r24, 0x04	; 4
     3a2:	91 05       	cpc	r25, r1
     3a4:	1c f4       	brge	.+6      	; 0x3ac <bounce+0x7c>
     3a6:	01 97       	sbiw	r24, 0x01	; 1
     3a8:	39 f0       	breq	.+14     	; 0x3b8 <bounce+0x88>
     3aa:	4c c0       	rjmp	.+152    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     3ac:	85 30       	cpi	r24, 0x05	; 5
     3ae:	91 05       	cpc	r25, r1
     3b0:	79 f0       	breq	.+30     	; 0x3d0 <bounce+0xa0>
     3b2:	07 97       	sbiw	r24, 0x07	; 7
     3b4:	99 f0       	breq	.+38     	; 0x3dc <bounce+0xac>
     3b6:	46 c0       	rjmp	.+140    	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				case 1:
				*direction = 3;
     3b8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ba:	9b 81       	ldd	r25, Y+3	; 0x03
     3bc:	23 e0       	ldi	r18, 0x03	; 3
     3be:	fc 01       	movw	r30, r24
     3c0:	20 83       	st	Z, r18
				break;
     3c2:	12 c0       	rjmp	.+36     	; 0x3e8 <bounce+0xb8>
				case 3:
				*direction = 1;
     3c4:	8a 81       	ldd	r24, Y+2	; 0x02
     3c6:	9b 81       	ldd	r25, Y+3	; 0x03
     3c8:	21 e0       	ldi	r18, 0x01	; 1
     3ca:	fc 01       	movw	r30, r24
     3cc:	20 83       	st	Z, r18
				break;
     3ce:	0c c0       	rjmp	.+24     	; 0x3e8 <bounce+0xb8>
				case 5:
				*direction = 7;
     3d0:	8a 81       	ldd	r24, Y+2	; 0x02
     3d2:	9b 81       	ldd	r25, Y+3	; 0x03
     3d4:	27 e0       	ldi	r18, 0x07	; 7
     3d6:	fc 01       	movw	r30, r24
     3d8:	20 83       	st	Z, r18
				break;
     3da:	06 c0       	rjmp	.+12     	; 0x3e8 <bounce+0xb8>
				case 7:
				*direction = 5;
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	9b 81       	ldd	r25, Y+3	; 0x03
     3e0:	25 e0       	ldi	r18, 0x05	; 5
     3e2:	fc 01       	movw	r30, r24
     3e4:	20 83       	st	Z, r18
				break;
     3e6:	00 00       	nop
     3e8:	2d c0       	rjmp	.+90     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
			}
		}
		else{
			switch (*direction){
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	9b 81       	ldd	r25, Y+3	; 0x03
     3ee:	fc 01       	movw	r30, r24
     3f0:	80 81       	ld	r24, Z
     3f2:	88 2f       	mov	r24, r24
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	83 30       	cpi	r24, 0x03	; 3
     3f8:	91 05       	cpc	r25, r1
     3fa:	91 f0       	breq	.+36     	; 0x420 <__FUSE_REGION_LENGTH__+0x20>
     3fc:	84 30       	cpi	r24, 0x04	; 4
     3fe:	91 05       	cpc	r25, r1
     400:	1c f4       	brge	.+6      	; 0x408 <__FUSE_REGION_LENGTH__+0x8>
     402:	01 97       	sbiw	r24, 0x01	; 1
     404:	39 f0       	breq	.+14     	; 0x414 <__FUSE_REGION_LENGTH__+0x14>
     406:	1e c0       	rjmp	.+60     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
     408:	85 30       	cpi	r24, 0x05	; 5
     40a:	91 05       	cpc	r25, r1
     40c:	79 f0       	breq	.+30     	; 0x42c <__FUSE_REGION_LENGTH__+0x2c>
     40e:	07 97       	sbiw	r24, 0x07	; 7
     410:	99 f0       	breq	.+38     	; 0x438 <__FUSE_REGION_LENGTH__+0x38>
     412:	18 c0       	rjmp	.+48     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				case 1:
				*direction = 7;
     414:	8a 81       	ldd	r24, Y+2	; 0x02
     416:	9b 81       	ldd	r25, Y+3	; 0x03
     418:	27 e0       	ldi	r18, 0x07	; 7
     41a:	fc 01       	movw	r30, r24
     41c:	20 83       	st	Z, r18
				break;
     41e:	12 c0       	rjmp	.+36     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				case 3:
				*direction = 5;
     420:	8a 81       	ldd	r24, Y+2	; 0x02
     422:	9b 81       	ldd	r25, Y+3	; 0x03
     424:	25 e0       	ldi	r18, 0x05	; 5
     426:	fc 01       	movw	r30, r24
     428:	20 83       	st	Z, r18
				break;
     42a:	0c c0       	rjmp	.+24     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				case 5:
				*direction = 3;
     42c:	8a 81       	ldd	r24, Y+2	; 0x02
     42e:	9b 81       	ldd	r25, Y+3	; 0x03
     430:	23 e0       	ldi	r18, 0x03	; 3
     432:	fc 01       	movw	r30, r24
     434:	20 83       	st	Z, r18
				break;
     436:	06 c0       	rjmp	.+12     	; 0x444 <__FUSE_REGION_LENGTH__+0x44>
				case 7:
				*direction = 1;
     438:	8a 81       	ldd	r24, Y+2	; 0x02
     43a:	9b 81       	ldd	r25, Y+3	; 0x03
     43c:	21 e0       	ldi	r18, 0x01	; 1
     43e:	fc 01       	movw	r30, r24
     440:	20 83       	st	Z, r18
				break;
     442:	00 00       	nop
			}
		}
	}
	
	
}
     444:	26 96       	adiw	r28, 0x06	; 6
     446:	0f b6       	in	r0, 0x3f	; 63
     448:	f8 94       	cli
     44a:	de bf       	out	0x3e, r29	; 62
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	cd bf       	out	0x3d, r28	; 61
     450:	df 91       	pop	r29
     452:	cf 91       	pop	r28
     454:	08 95       	ret

00000456 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	00 d0       	rcall	.+0      	; 0x45c <move_ball+0x6>
     45c:	00 d0       	rcall	.+0      	; 0x45e <move_ball+0x8>
     45e:	00 d0       	rcall	.+0      	; 0x460 <move_ball+0xa>
     460:	cd b7       	in	r28, 0x3d	; 61
     462:	de b7       	in	r29, 0x3e	; 62
     464:	9c 83       	std	Y+4, r25	; 0x04
     466:	8b 83       	std	Y+3, r24	; 0x03
     468:	7e 83       	std	Y+6, r23	; 0x06
     46a:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     46c:	8b 81       	ldd	r24, Y+3	; 0x03
     46e:	9c 81       	ldd	r25, Y+4	; 0x04
     470:	01 96       	adiw	r24, 0x01	; 1
     472:	fc 01       	movw	r30, r24
     474:	80 81       	ld	r24, Z
     476:	28 2f       	mov	r18, r24
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	81 e0       	ldi	r24, 0x01	; 1
     47c:	90 e0       	ldi	r25, 0x00	; 0
     47e:	02 c0       	rjmp	.+4      	; 0x484 <move_ball+0x2e>
     480:	88 0f       	add	r24, r24
     482:	99 1f       	adc	r25, r25
     484:	2a 95       	dec	r18
     486:	e2 f7       	brpl	.-8      	; 0x480 <move_ball+0x2a>
     488:	9a 83       	std	Y+2, r25	; 0x02
     48a:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     48c:	89 81       	ldd	r24, Y+1	; 0x01
     48e:	9a 81       	ldd	r25, Y+2	; 0x02
     490:	80 95       	com	r24
     492:	90 95       	com	r25
     494:	9a 83       	std	Y+2, r25	; 0x02
     496:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     498:	8b 81       	ldd	r24, Y+3	; 0x03
     49a:	9c 81       	ldd	r25, Y+4	; 0x04
     49c:	fc 01       	movw	r30, r24
     49e:	80 81       	ld	r24, Z
     4a0:	88 23       	and	r24, r24
     4a2:	a9 f5       	brne	.+106    	; 0x50e <move_ball+0xb8>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     4a4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     4a8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     4ac:	20 e0       	ldi	r18, 0x00	; 0
     4ae:	4a e0       	ldi	r20, 0x0A	; 10
     4b0:	50 e0       	ldi	r21, 0x00	; 0
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	70 e0       	ldi	r23, 0x00	; 0
     4b6:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     4ba:	8b 81       	ldd	r24, Y+3	; 0x03
     4bc:	9c 81       	ldd	r25, Y+4	; 0x04
     4be:	fc 01       	movw	r30, r24
     4c0:	80 81       	ld	r24, Z
     4c2:	88 2f       	mov	r24, r24
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	2b 81       	ldd	r18, Y+3	; 0x03
     4c8:	3c 81       	ldd	r19, Y+4	; 0x04
     4ca:	f9 01       	movw	r30, r18
     4cc:	20 81       	ld	r18, Z
     4ce:	22 2f       	mov	r18, r18
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	24 5f       	subi	r18, 0xF4	; 244
     4d8:	3e 4f       	sbci	r19, 0xFE	; 254
     4da:	f9 01       	movw	r30, r18
     4dc:	40 81       	ld	r20, Z
     4de:	51 81       	ldd	r21, Z+1	; 0x01
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	3a 81       	ldd	r19, Y+2	; 0x02
     4e4:	24 23       	and	r18, r20
     4e6:	35 23       	and	r19, r21
     4e8:	88 0f       	add	r24, r24
     4ea:	99 1f       	adc	r25, r25
     4ec:	84 5f       	subi	r24, 0xF4	; 244
     4ee:	9e 4f       	sbci	r25, 0xFE	; 254
     4f0:	fc 01       	movw	r30, r24
     4f2:	31 83       	std	Z+1, r19	; 0x01
     4f4:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     4f6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     4fa:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	40 e0       	ldi	r20, 0x00	; 0
     502:	50 e0       	ldi	r21, 0x00	; 0
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
     50c:	1e c0       	rjmp	.+60     	; 0x54a <move_ball+0xf4>
	}
	else{
		col_value[current[0]] &= mask;
     50e:	8b 81       	ldd	r24, Y+3	; 0x03
     510:	9c 81       	ldd	r25, Y+4	; 0x04
     512:	fc 01       	movw	r30, r24
     514:	80 81       	ld	r24, Z
     516:	88 2f       	mov	r24, r24
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	2b 81       	ldd	r18, Y+3	; 0x03
     51c:	3c 81       	ldd	r19, Y+4	; 0x04
     51e:	f9 01       	movw	r30, r18
     520:	20 81       	ld	r18, Z
     522:	22 2f       	mov	r18, r18
     524:	30 e0       	ldi	r19, 0x00	; 0
     526:	22 0f       	add	r18, r18
     528:	33 1f       	adc	r19, r19
     52a:	24 5f       	subi	r18, 0xF4	; 244
     52c:	3e 4f       	sbci	r19, 0xFE	; 254
     52e:	f9 01       	movw	r30, r18
     530:	40 81       	ld	r20, Z
     532:	51 81       	ldd	r21, Z+1	; 0x01
     534:	29 81       	ldd	r18, Y+1	; 0x01
     536:	3a 81       	ldd	r19, Y+2	; 0x02
     538:	24 23       	and	r18, r20
     53a:	35 23       	and	r19, r21
     53c:	88 0f       	add	r24, r24
     53e:	99 1f       	adc	r25, r25
     540:	84 5f       	subi	r24, 0xF4	; 244
     542:	9e 4f       	sbci	r25, 0xFE	; 254
     544:	fc 01       	movw	r30, r24
     546:	31 83       	std	Z+1, r19	; 0x01
     548:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     54a:	8d 81       	ldd	r24, Y+5	; 0x05
     54c:	9e 81       	ldd	r25, Y+6	; 0x06
     54e:	fc 01       	movw	r30, r24
     550:	20 81       	ld	r18, Z
     552:	8b 81       	ldd	r24, Y+3	; 0x03
     554:	9c 81       	ldd	r25, Y+4	; 0x04
     556:	fc 01       	movw	r30, r24
     558:	20 83       	st	Z, r18
	current[1] = next[1];
     55a:	8b 81       	ldd	r24, Y+3	; 0x03
     55c:	9c 81       	ldd	r25, Y+4	; 0x04
     55e:	01 96       	adiw	r24, 0x01	; 1
     560:	2d 81       	ldd	r18, Y+5	; 0x05
     562:	3e 81       	ldd	r19, Y+6	; 0x06
     564:	f9 01       	movw	r30, r18
     566:	21 81       	ldd	r18, Z+1	; 0x01
     568:	fc 01       	movw	r30, r24
     56a:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     56c:	8b 81       	ldd	r24, Y+3	; 0x03
     56e:	9c 81       	ldd	r25, Y+4	; 0x04
     570:	01 96       	adiw	r24, 0x01	; 1
     572:	fc 01       	movw	r30, r24
     574:	80 81       	ld	r24, Z
     576:	28 2f       	mov	r18, r24
     578:	30 e0       	ldi	r19, 0x00	; 0
     57a:	81 e0       	ldi	r24, 0x01	; 1
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	02 c0       	rjmp	.+4      	; 0x584 <move_ball+0x12e>
     580:	88 0f       	add	r24, r24
     582:	99 1f       	adc	r25, r25
     584:	2a 95       	dec	r18
     586:	e2 f7       	brpl	.-8      	; 0x580 <move_ball+0x12a>
     588:	9a 83       	std	Y+2, r25	; 0x02
     58a:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     58c:	8b 81       	ldd	r24, Y+3	; 0x03
     58e:	9c 81       	ldd	r25, Y+4	; 0x04
     590:	fc 01       	movw	r30, r24
     592:	80 81       	ld	r24, Z
     594:	88 23       	and	r24, r24
     596:	a9 f5       	brne	.+106    	; 0x602 <move_ball+0x1ac>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     598:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     59c:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     5a0:	20 e0       	ldi	r18, 0x00	; 0
     5a2:	4a e0       	ldi	r20, 0x0A	; 10
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	70 e0       	ldi	r23, 0x00	; 0
     5aa:	0e 94 e6 10 	call	0x21cc	; 0x21cc <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	9c 81       	ldd	r25, Y+4	; 0x04
     5b2:	fc 01       	movw	r30, r24
     5b4:	80 81       	ld	r24, Z
     5b6:	88 2f       	mov	r24, r24
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	2b 81       	ldd	r18, Y+3	; 0x03
     5bc:	3c 81       	ldd	r19, Y+4	; 0x04
     5be:	f9 01       	movw	r30, r18
     5c0:	20 81       	ld	r18, Z
     5c2:	22 2f       	mov	r18, r18
     5c4:	30 e0       	ldi	r19, 0x00	; 0
     5c6:	22 0f       	add	r18, r18
     5c8:	33 1f       	adc	r19, r19
     5ca:	24 5f       	subi	r18, 0xF4	; 244
     5cc:	3e 4f       	sbci	r19, 0xFE	; 254
     5ce:	f9 01       	movw	r30, r18
     5d0:	40 81       	ld	r20, Z
     5d2:	51 81       	ldd	r21, Z+1	; 0x01
     5d4:	29 81       	ldd	r18, Y+1	; 0x01
     5d6:	3a 81       	ldd	r19, Y+2	; 0x02
     5d8:	24 2b       	or	r18, r20
     5da:	35 2b       	or	r19, r21
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	84 5f       	subi	r24, 0xF4	; 244
     5e2:	9e 4f       	sbci	r25, 0xFE	; 254
     5e4:	fc 01       	movw	r30, r24
     5e6:	31 83       	std	Z+1, r19	; 0x01
     5e8:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     5ea:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     5ee:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	50 e0       	ldi	r21, 0x00	; 0
     5f8:	60 e0       	ldi	r22, 0x00	; 0
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
     600:	1e c0       	rjmp	.+60     	; 0x63e <move_ball+0x1e8>
	}
	else{
		col_value[current[0]] |= mask;
     602:	8b 81       	ldd	r24, Y+3	; 0x03
     604:	9c 81       	ldd	r25, Y+4	; 0x04
     606:	fc 01       	movw	r30, r24
     608:	80 81       	ld	r24, Z
     60a:	88 2f       	mov	r24, r24
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	2b 81       	ldd	r18, Y+3	; 0x03
     610:	3c 81       	ldd	r19, Y+4	; 0x04
     612:	f9 01       	movw	r30, r18
     614:	20 81       	ld	r18, Z
     616:	22 2f       	mov	r18, r18
     618:	30 e0       	ldi	r19, 0x00	; 0
     61a:	22 0f       	add	r18, r18
     61c:	33 1f       	adc	r19, r19
     61e:	24 5f       	subi	r18, 0xF4	; 244
     620:	3e 4f       	sbci	r19, 0xFE	; 254
     622:	f9 01       	movw	r30, r18
     624:	40 81       	ld	r20, Z
     626:	51 81       	ldd	r21, Z+1	; 0x01
     628:	29 81       	ldd	r18, Y+1	; 0x01
     62a:	3a 81       	ldd	r19, Y+2	; 0x02
     62c:	24 2b       	or	r18, r20
     62e:	35 2b       	or	r19, r21
     630:	88 0f       	add	r24, r24
     632:	99 1f       	adc	r25, r25
     634:	84 5f       	subi	r24, 0xF4	; 244
     636:	9e 4f       	sbci	r25, 0xFE	; 254
     638:	fc 01       	movw	r30, r24
     63a:	31 83       	std	Z+1, r19	; 0x01
     63c:	20 83       	st	Z, r18
	}

	
}
     63e:	26 96       	adiw	r28, 0x06	; 6
     640:	0f b6       	in	r0, 0x3f	; 63
     642:	f8 94       	cli
     644:	de bf       	out	0x3e, r29	; 62
     646:	0f be       	out	0x3f, r0	; 63
     648:	cd bf       	out	0x3d, r28	; 61
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	08 95       	ret

00000650 <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     650:	cf 93       	push	r28
     652:	df 93       	push	r29
     654:	00 d0       	rcall	.+0      	; 0x656 <calc_next+0x6>
     656:	00 d0       	rcall	.+0      	; 0x658 <calc_next+0x8>
     658:	00 d0       	rcall	.+0      	; 0x65a <calc_next+0xa>
     65a:	cd b7       	in	r28, 0x3d	; 61
     65c:	de b7       	in	r29, 0x3e	; 62
     65e:	9a 83       	std	Y+2, r25	; 0x02
     660:	89 83       	std	Y+1, r24	; 0x01
     662:	7c 83       	std	Y+4, r23	; 0x04
     664:	6b 83       	std	Y+3, r22	; 0x03
     666:	5e 83       	std	Y+6, r21	; 0x06
     668:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     66a:	8d 81       	ldd	r24, Y+5	; 0x05
     66c:	9e 81       	ldd	r25, Y+6	; 0x06
     66e:	fc 01       	movw	r30, r24
     670:	80 81       	ld	r24, Z
     672:	88 2f       	mov	r24, r24
     674:	90 e0       	ldi	r25, 0x00	; 0
     676:	09 2e       	mov	r0, r25
     678:	00 0c       	add	r0, r0
     67a:	aa 0b       	sbc	r26, r26
     67c:	bb 0b       	sbc	r27, r27
     67e:	40 e0       	ldi	r20, 0x00	; 0
     680:	50 e0       	ldi	r21, 0x00	; 0
     682:	27 e0       	ldi	r18, 0x07	; 7
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	84 1b       	sub	r24, r20
     688:	95 0b       	sbc	r25, r21
     68a:	28 17       	cp	r18, r24
     68c:	39 07       	cpc	r19, r25
     68e:	08 f4       	brcc	.+2      	; 0x692 <calc_next+0x42>
     690:	79 c0       	rjmp	.+242    	; 0x784 <calc_next+0x134>
     692:	82 5c       	subi	r24, 0xC2	; 194
     694:	9f 4f       	sbci	r25, 0xFF	; 255
     696:	fc 01       	movw	r30, r24
     698:	0c 94 28 1c 	jmp	0x3850	; 0x3850 <__tablejump2__>
	{
		case 0:
			--next[1];
     69c:	8b 81       	ldd	r24, Y+3	; 0x03
     69e:	9c 81       	ldd	r25, Y+4	; 0x04
     6a0:	01 96       	adiw	r24, 0x01	; 1
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 81       	ld	r18, Z
     6a6:	21 50       	subi	r18, 0x01	; 1
     6a8:	fc 01       	movw	r30, r24
     6aa:	20 83       	st	Z, r18
			break;
     6ac:	6b c0       	rjmp	.+214    	; 0x784 <calc_next+0x134>
		case 1:
		++next[0];
     6ae:	8b 81       	ldd	r24, Y+3	; 0x03
     6b0:	9c 81       	ldd	r25, Y+4	; 0x04
     6b2:	fc 01       	movw	r30, r24
     6b4:	80 81       	ld	r24, Z
     6b6:	21 e0       	ldi	r18, 0x01	; 1
     6b8:	28 0f       	add	r18, r24
     6ba:	8b 81       	ldd	r24, Y+3	; 0x03
     6bc:	9c 81       	ldd	r25, Y+4	; 0x04
     6be:	fc 01       	movw	r30, r24
     6c0:	20 83       	st	Z, r18
		--next[1];
     6c2:	8b 81       	ldd	r24, Y+3	; 0x03
     6c4:	9c 81       	ldd	r25, Y+4	; 0x04
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 81       	ld	r18, Z
     6cc:	21 50       	subi	r18, 0x01	; 1
     6ce:	fc 01       	movw	r30, r24
     6d0:	20 83       	st	Z, r18
		break;
     6d2:	58 c0       	rjmp	.+176    	; 0x784 <calc_next+0x134>
		case 2:
		++next[0];
     6d4:	8b 81       	ldd	r24, Y+3	; 0x03
     6d6:	9c 81       	ldd	r25, Y+4	; 0x04
     6d8:	fc 01       	movw	r30, r24
     6da:	80 81       	ld	r24, Z
     6dc:	21 e0       	ldi	r18, 0x01	; 1
     6de:	28 0f       	add	r18, r24
     6e0:	8b 81       	ldd	r24, Y+3	; 0x03
     6e2:	9c 81       	ldd	r25, Y+4	; 0x04
     6e4:	fc 01       	movw	r30, r24
     6e6:	20 83       	st	Z, r18
		break;
     6e8:	4d c0       	rjmp	.+154    	; 0x784 <calc_next+0x134>
		case 3:
		++next[0];
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	fc 01       	movw	r30, r24
     6f0:	80 81       	ld	r24, Z
     6f2:	21 e0       	ldi	r18, 0x01	; 1
     6f4:	28 0f       	add	r18, r24
     6f6:	8b 81       	ldd	r24, Y+3	; 0x03
     6f8:	9c 81       	ldd	r25, Y+4	; 0x04
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
		++next[1];
     6fe:	8b 81       	ldd	r24, Y+3	; 0x03
     700:	9c 81       	ldd	r25, Y+4	; 0x04
     702:	01 96       	adiw	r24, 0x01	; 1
     704:	fc 01       	movw	r30, r24
     706:	20 81       	ld	r18, Z
     708:	2f 5f       	subi	r18, 0xFF	; 255
     70a:	fc 01       	movw	r30, r24
     70c:	20 83       	st	Z, r18
		break;
     70e:	3a c0       	rjmp	.+116    	; 0x784 <calc_next+0x134>
		case 4:
		++next[1];
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	01 96       	adiw	r24, 0x01	; 1
     716:	fc 01       	movw	r30, r24
     718:	20 81       	ld	r18, Z
     71a:	2f 5f       	subi	r18, 0xFF	; 255
     71c:	fc 01       	movw	r30, r24
     71e:	20 83       	st	Z, r18
		break;
     720:	31 c0       	rjmp	.+98     	; 0x784 <calc_next+0x134>
		case 5:
		--next[0];
     722:	8b 81       	ldd	r24, Y+3	; 0x03
     724:	9c 81       	ldd	r25, Y+4	; 0x04
     726:	fc 01       	movw	r30, r24
     728:	80 81       	ld	r24, Z
     72a:	2f ef       	ldi	r18, 0xFF	; 255
     72c:	28 0f       	add	r18, r24
     72e:	8b 81       	ldd	r24, Y+3	; 0x03
     730:	9c 81       	ldd	r25, Y+4	; 0x04
     732:	fc 01       	movw	r30, r24
     734:	20 83       	st	Z, r18
		++next[1];
     736:	8b 81       	ldd	r24, Y+3	; 0x03
     738:	9c 81       	ldd	r25, Y+4	; 0x04
     73a:	01 96       	adiw	r24, 0x01	; 1
     73c:	fc 01       	movw	r30, r24
     73e:	20 81       	ld	r18, Z
     740:	2f 5f       	subi	r18, 0xFF	; 255
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
		break;
     746:	1e c0       	rjmp	.+60     	; 0x784 <calc_next+0x134>
		case 6:
		--next[0];
     748:	8b 81       	ldd	r24, Y+3	; 0x03
     74a:	9c 81       	ldd	r25, Y+4	; 0x04
     74c:	fc 01       	movw	r30, r24
     74e:	80 81       	ld	r24, Z
     750:	2f ef       	ldi	r18, 0xFF	; 255
     752:	28 0f       	add	r18, r24
     754:	8b 81       	ldd	r24, Y+3	; 0x03
     756:	9c 81       	ldd	r25, Y+4	; 0x04
     758:	fc 01       	movw	r30, r24
     75a:	20 83       	st	Z, r18
		break;
     75c:	13 c0       	rjmp	.+38     	; 0x784 <calc_next+0x134>
		case 7:
		--next[0];
     75e:	8b 81       	ldd	r24, Y+3	; 0x03
     760:	9c 81       	ldd	r25, Y+4	; 0x04
     762:	fc 01       	movw	r30, r24
     764:	80 81       	ld	r24, Z
     766:	2f ef       	ldi	r18, 0xFF	; 255
     768:	28 0f       	add	r18, r24
     76a:	8b 81       	ldd	r24, Y+3	; 0x03
     76c:	9c 81       	ldd	r25, Y+4	; 0x04
     76e:	fc 01       	movw	r30, r24
     770:	20 83       	st	Z, r18
		--next[1];
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	9c 81       	ldd	r25, Y+4	; 0x04
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	fc 01       	movw	r30, r24
     77a:	20 81       	ld	r18, Z
     77c:	21 50       	subi	r18, 0x01	; 1
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
		break;
     782:	00 00       	nop
	}
	
}
     784:	26 96       	adiw	r28, 0x06	; 6
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <ball_task>:

void ball_task(void *pvParameters)
{
     796:	cf 93       	push	r28
     798:	df 93       	push	r29
     79a:	cd b7       	in	r28, 0x3d	; 61
     79c:	de b7       	in	r29, 0x3e	; 62
     79e:	2a 97       	sbiw	r28, 0x0a	; 10
     7a0:	0f b6       	in	r0, 0x3f	; 63
     7a2:	f8 94       	cli
     7a4:	de bf       	out	0x3e, r29	; 62
     7a6:	0f be       	out	0x3f, r0	; 63
     7a8:	cd bf       	out	0x3d, r28	; 61
     7aa:	9a 87       	std	Y+10, r25	; 0x0a
     7ac:	89 87       	std	Y+9, r24	; 0x09
	(void) pvParameters;
	
		col_value[13] = 240;
     7ae:	80 ef       	ldi	r24, 0xF0	; 240
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <col_value+0x1b>
     7b6:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <col_value+0x1a>
		col_value[12] = 336;
     7ba:	80 e5       	ldi	r24, 0x50	; 80
     7bc:	91 e0       	ldi	r25, 0x01	; 1
     7be:	90 93 25 01 	sts	0x0125, r25	; 0x800125 <col_value+0x19>
     7c2:	80 93 24 01 	sts	0x0124, r24	; 0x800124 <col_value+0x18>
		col_value[11] = 288;
     7c6:	80 e2       	ldi	r24, 0x20	; 32
     7c8:	91 e0       	ldi	r25, 0x01	; 1
     7ca:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <col_value+0x17>
     7ce:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <col_value+0x16>
		col_value[10] = 0;
     7d2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <col_value+0x15>
     7d6:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <col_value+0x14>
		col_value[9] = 224;
     7da:	80 ee       	ldi	r24, 0xE0	; 224
     7dc:	90 e0       	ldi	r25, 0x00	; 0
     7de:	90 93 1f 01 	sts	0x011F, r25	; 0x80011f <col_value+0x13>
     7e2:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <col_value+0x12>
		col_value[8] = 16;
     7e6:	80 e1       	ldi	r24, 0x10	; 16
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <col_value+0x11>
     7ee:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <col_value+0x10>
		col_value[7] = 240;
     7f2:	80 ef       	ldi	r24, 0xF0	; 240
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <col_value+0xf>
     7fa:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <col_value+0xe>
		col_value[6] = 0;
     7fe:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <col_value+0xd>
     802:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <col_value+0xc>
		col_value[5] = 96;
     806:	80 e6       	ldi	r24, 0x60	; 96
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 17 01 	sts	0x0117, r25	; 0x800117 <col_value+0xb>
     80e:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <col_value+0xa>
		col_value[4] = 144;
     812:	80 e9       	ldi	r24, 0x90	; 144
     814:	90 e0       	ldi	r25, 0x00	; 0
     816:	90 93 15 01 	sts	0x0115, r25	; 0x800115 <col_value+0x9>
     81a:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <col_value+0x8>
		col_value[3] = 96;
     81e:	80 e6       	ldi	r24, 0x60	; 96
     820:	90 e0       	ldi	r25, 0x00	; 0
     822:	90 93 13 01 	sts	0x0113, r25	; 0x800113 <col_value+0x7>
     826:	80 93 12 01 	sts	0x0112, r24	; 0x800112 <col_value+0x6>
		col_value[2] = 12;
     82a:	8c e0       	ldi	r24, 0x0C	; 12
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <col_value+0x5>
     832:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <col_value+0x4>
		col_value[1] = 18;
     836:	82 e1       	ldi	r24, 0x12	; 18
     838:	90 e0       	ldi	r25, 0x00	; 0
     83a:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <col_value+0x3>
     83e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <col_value+0x2>
		col_value[0] = 254;
     842:	8e ef       	ldi	r24, 0xFE	; 254
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     84a:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
		vTaskDelay(2000);
     84e:	80 ed       	ldi	r24, 0xD0	; 208
     850:	97 e0       	ldi	r25, 0x07	; 7
     852:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <vTaskDelay>
		col_value[13] = 48;
     856:	80 e3       	ldi	r24, 0x30	; 48
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <col_value+0x1b>
     85e:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <col_value+0x1a>
		col_value[12] = 0;
     862:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <col_value+0x19>
     866:	10 92 24 01 	sts	0x0124, r1	; 0x800124 <col_value+0x18>
		col_value[11] = 0;
     86a:	10 92 23 01 	sts	0x0123, r1	; 0x800123 <col_value+0x17>
     86e:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <col_value+0x16>
		col_value[10] = 0;
     872:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <col_value+0x15>
     876:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <col_value+0x14>
		col_value[9] = 0;
     87a:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <col_value+0x13>
     87e:	10 92 1e 01 	sts	0x011E, r1	; 0x80011e <col_value+0x12>
		col_value[8] = 0;
     882:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <col_value+0x11>
     886:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <col_value+0x10>
		col_value[7] = 0;
     88a:	10 92 1b 01 	sts	0x011B, r1	; 0x80011b <col_value+0xf>
     88e:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <col_value+0xe>
		col_value[6] = 0;
     892:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <col_value+0xd>
     896:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <col_value+0xc>
		col_value[5] = 0;
     89a:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <col_value+0xb>
     89e:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <col_value+0xa>
		col_value[4] = 0;
     8a2:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <col_value+0x9>
     8a6:	10 92 14 01 	sts	0x0114, r1	; 0x800114 <col_value+0x8>
		col_value[3] = 0;
     8aa:	10 92 13 01 	sts	0x0113, r1	; 0x800113 <col_value+0x7>
     8ae:	10 92 12 01 	sts	0x0112, r1	; 0x800112 <col_value+0x6>
		col_value[2] = 0;
     8b2:	10 92 11 01 	sts	0x0111, r1	; 0x800111 <col_value+0x5>
     8b6:	10 92 10 01 	sts	0x0110, r1	; 0x800110 <col_value+0x4>
		col_value[1] = 0;
     8ba:	10 92 0f 01 	sts	0x010F, r1	; 0x80010f <col_value+0x3>
     8be:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <col_value+0x2>
		col_value[0] = 48;	
     8c2:	80 e3       	ldi	r24, 0x30	; 48
     8c4:	90 e0       	ldi	r25, 0x00	; 0
     8c6:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     8ca:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	TickType_t lastWakeTime;
	uint8_t pos[2] = {7, 5};
     8ce:	87 e0       	ldi	r24, 0x07	; 7
     8d0:	8c 83       	std	Y+4, r24	; 0x04
     8d2:	85 e0       	ldi	r24, 0x05	; 5
     8d4:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t direction = 0;
     8d6:	1e 82       	std	Y+6, r1	; 0x06
	lastWakeTime = xTaskGetTickCount();
     8d8:	0e 94 e5 16 	call	0x2dca	; 0x2dca <xTaskGetTickCount>
     8dc:	9b 83       	std	Y+3, r25	; 0x03
     8de:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     8e0:	8c 81       	ldd	r24, Y+4	; 0x04
     8e2:	8f 83       	std	Y+7, r24	; 0x07
     8e4:	8d 81       	ldd	r24, Y+5	; 0x05
     8e6:	88 87       	std	Y+8, r24	; 0x08
		uint8_t is_bounced = 1;
     8e8:	81 e0       	ldi	r24, 0x01	; 1
     8ea:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     8ec:	45 c0       	rjmp	.+138    	; 0x978 <__stack+0x79>
		{	
			is_bounced = 0;
     8ee:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     8f0:	ae 01       	movw	r20, r28
     8f2:	4a 5f       	subi	r20, 0xFA	; 250
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	9e 01       	movw	r18, r28
     8f8:	29 5f       	subi	r18, 0xF9	; 249
     8fa:	3f 4f       	sbci	r19, 0xFF	; 255
     8fc:	ce 01       	movw	r24, r28
     8fe:	04 96       	adiw	r24, 0x04	; 4
     900:	b9 01       	movw	r22, r18
     902:	0e 94 28 03 	call	0x650	; 0x650 <calc_next>
			
			if (next[0] > 12){
     906:	8f 81       	ldd	r24, Y+7	; 0x07
     908:	8d 30       	cpi	r24, 0x0D	; 13
     90a:	30 f0       	brcs	.+12     	; 0x918 <__stack+0x19>
				bounce(&direction, 1);
     90c:	ce 01       	movw	r24, r28
     90e:	06 96       	adiw	r24, 0x06	; 6
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 98 01 	call	0x330	; 0x330 <bounce>
     916:	30 c0       	rjmp	.+96     	; 0x978 <__stack+0x79>
			}
			else if ( next[1] > 9){
     918:	88 85       	ldd	r24, Y+8	; 0x08
     91a:	8a 30       	cpi	r24, 0x0A	; 10
     91c:	30 f0       	brcs	.+12     	; 0x92a <__stack+0x2b>
				bounce(&direction, 0);
     91e:	ce 01       	movw	r24, r28
     920:	06 96       	adiw	r24, 0x06	; 6
     922:	60 e0       	ldi	r22, 0x00	; 0
     924:	0e 94 98 01 	call	0x330	; 0x330 <bounce>
     928:	27 c0       	rjmp	.+78     	; 0x978 <__stack+0x79>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     92a:	8f 81       	ldd	r24, Y+7	; 0x07
     92c:	88 23       	and	r24, r24
     92e:	d9 f4       	brne	.+54     	; 0x966 <__stack+0x67>
     930:	88 85       	ldd	r24, Y+8	; 0x08
     932:	28 2f       	mov	r18, r24
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     93a:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     93e:	28 17       	cp	r18, r24
     940:	39 07       	cpc	r19, r25
     942:	59 f0       	breq	.+22     	; 0x95a <__stack+0x5b>
     944:	88 85       	ldd	r24, Y+8	; 0x08
     946:	28 2f       	mov	r18, r24
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     94e:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	28 17       	cp	r18, r24
     956:	39 07       	cpc	r19, r25
     958:	31 f4       	brne	.+12     	; 0x966 <__stack+0x67>
				bounce(&direction, 1);
     95a:	ce 01       	movw	r24, r28
     95c:	06 96       	adiw	r24, 0x06	; 6
     95e:	61 e0       	ldi	r22, 0x01	; 1
     960:	0e 94 98 01 	call	0x330	; 0x330 <bounce>
     964:	09 c0       	rjmp	.+18     	; 0x978 <__stack+0x79>
			}
			else{
				move_ball(pos, next);
     966:	9e 01       	movw	r18, r28
     968:	29 5f       	subi	r18, 0xF9	; 249
     96a:	3f 4f       	sbci	r19, 0xFF	; 255
     96c:	ce 01       	movw	r24, r28
     96e:	04 96       	adiw	r24, 0x04	; 4
     970:	b9 01       	movw	r22, r18
     972:	0e 94 2b 02 	call	0x456	; 0x456 <move_ball>
				is_bounced = 0;
     976:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     978:	89 81       	ldd	r24, Y+1	; 0x01
     97a:	88 23       	and	r24, r24
     97c:	09 f0       	breq	.+2      	; 0x980 <__stack+0x81>
     97e:	b7 cf       	rjmp	.-146    	; 0x8ee <ball_task+0x158>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 80);
     980:	ce 01       	movw	r24, r28
     982:	02 96       	adiw	r24, 0x02	; 2
     984:	60 e5       	ldi	r22, 0x50	; 80
     986:	70 e0       	ldi	r23, 0x00	; 0
     988:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <vTaskDelayUntil>
	}
     98c:	a9 cf       	rjmp	.-174    	; 0x8e0 <ball_task+0x14a>

0000098e <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	cd b7       	in	r28, 0x3d	; 61
     994:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     996:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     99a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     99e:	89 2b       	or	r24, r25
     9a0:	49 f4       	brne	.+18     	; 0x9b4 <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     9a2:	8b e2       	ldi	r24, 0x2B	; 43
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	2b e2       	ldi	r18, 0x2B	; 43
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	f9 01       	movw	r30, r18
     9ac:	20 81       	ld	r18, Z
     9ae:	24 60       	ori	r18, 0x04	; 4
     9b0:	fc 01       	movw	r30, r24
     9b2:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     9b4:	8b e2       	ldi	r24, 0x2B	; 43
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	2b e2       	ldi	r18, 0x2B	; 43
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	f9 01       	movw	r30, r18
     9be:	20 81       	ld	r18, Z
     9c0:	20 62       	ori	r18, 0x20	; 32
     9c2:	fc 01       	movw	r30, r24
     9c4:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     9c6:	8b e2       	ldi	r24, 0x2B	; 43
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	2b e2       	ldi	r18, 0x2B	; 43
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	f9 01       	movw	r30, r18
     9d0:	20 81       	ld	r18, Z
     9d2:	2f 7d       	andi	r18, 0xDF	; 223
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     9d8:	8b e2       	ldi	r24, 0x2B	; 43
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	2b e2       	ldi	r18, 0x2B	; 43
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	f9 01       	movw	r30, r18
     9e2:	20 81       	ld	r18, Z
     9e4:	20 61       	ori	r18, 0x10	; 16
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     9ea:	8b e2       	ldi	r24, 0x2B	; 43
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	2b e2       	ldi	r18, 0x2B	; 43
     9f0:	30 e0       	ldi	r19, 0x00	; 0
     9f2:	f9 01       	movw	r30, r18
     9f4:	20 81       	ld	r18, Z
     9f6:	2f 7e       	andi	r18, 0xEF	; 239
     9f8:	fc 01       	movw	r30, r24
     9fa:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     9fc:	82 e2       	ldi	r24, 0x22	; 34
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <col_index>
     a04:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <col_index+0x1>
     a08:	22 0f       	add	r18, r18
     a0a:	33 1f       	adc	r19, r19
     a0c:	24 5f       	subi	r18, 0xF4	; 244
     a0e:	3e 4f       	sbci	r19, 0xFE	; 254
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	31 81       	ldd	r19, Z+1	; 0x01
     a16:	20 95       	com	r18
     a18:	fc 01       	movw	r30, r24
     a1a:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     a1c:	85 e2       	ldi	r24, 0x25	; 37
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	25 e2       	ldi	r18, 0x25	; 37
     a22:	30 e0       	ldi	r19, 0x00	; 0
     a24:	f9 01       	movw	r30, r18
     a26:	20 81       	ld	r18, Z
     a28:	23 60       	ori	r18, 0x03	; 3
     a2a:	fc 01       	movw	r30, r24
     a2c:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     a2e:	85 e2       	ldi	r24, 0x25	; 37
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	25 e2       	ldi	r18, 0x25	; 37
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	f9 01       	movw	r30, r18
     a38:	40 81       	ld	r20, Z
     a3a:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <col_index>
     a3e:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <col_index+0x1>
     a42:	22 0f       	add	r18, r18
     a44:	33 1f       	adc	r19, r19
     a46:	24 5f       	subi	r18, 0xF4	; 244
     a48:	3e 4f       	sbci	r19, 0xFE	; 254
     a4a:	f9 01       	movw	r30, r18
     a4c:	20 81       	ld	r18, Z
     a4e:	31 81       	ldd	r19, Z+1	; 0x01
     a50:	23 2f       	mov	r18, r19
     a52:	33 27       	eor	r19, r19
     a54:	23 70       	andi	r18, 0x03	; 3
     a56:	20 95       	com	r18
     a58:	24 23       	and	r18, r20
     a5a:	fc 01       	movw	r30, r24
     a5c:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     a5e:	8b e2       	ldi	r24, 0x2B	; 43
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	2b e2       	ldi	r18, 0x2B	; 43
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	f9 01       	movw	r30, r18
     a68:	20 81       	ld	r18, Z
     a6a:	2b 7f       	andi	r18, 0xFB	; 251
     a6c:	fc 01       	movw	r30, r24
     a6e:	20 83       	st	Z, r18

	++col_index;
     a70:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     a74:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     a78:	01 96       	adiw	r24, 0x01	; 1
     a7a:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <col_index+0x1>
     a7e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <col_index>
	if (col_index > 13){
     a82:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     a86:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     a8a:	0e 97       	sbiw	r24, 0x0e	; 14
     a8c:	24 f0       	brlt	.+8      	; 0xa96 <handle_display+0x108>
		col_index = 0;
     a8e:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <col_index+0x1>
     a92:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <col_index>
	}

}
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
	//
}
     aa4:	df 91       	pop	r29
     aa6:	cf 91       	pop	r28
     aa8:	08 95       	ret

00000aaa <main>:

//-----------------------------------------
int main(void)
{
     aaa:	ef 92       	push	r14
     aac:	ff 92       	push	r15
     aae:	0f 93       	push	r16
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
     ab4:	cd b7       	in	r28, 0x3d	; 61
     ab6:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     ab8:	0e 94 55 06 	call	0xcaa	; 0xcaa <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     abc:	8b e2       	ldi	r24, 0x2B	; 43
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	2b e2       	ldi	r18, 0x2B	; 43
     ac2:	30 e0       	ldi	r19, 0x00	; 0
     ac4:	f9 01       	movw	r30, r18
     ac6:	20 81       	ld	r18, Z
     ac8:	2f 7b       	andi	r18, 0xBF	; 191
     aca:	fc 01       	movw	r30, r24
     acc:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     ace:	8e e1       	ldi	r24, 0x1E	; 30
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	61 e0       	ldi	r22, 0x01	; 1
     ad4:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <xQueueGenericCreate>
     ad8:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     adc:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <xQueueCreateMutex>
     ae6:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_col_0_mutex+0x1>
     aea:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     aee:	81 e0       	ldi	r24, 0x01	; 1
     af0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <xQueueCreateMutex>
     af4:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_player_position_mutex+0x1>
     af8:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     afc:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     b00:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     b04:	0e 94 db 05 	call	0xbb6	; 0xbb6 <init_com>
	
	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(serial_task,(const char *)"serial", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     b08:	e1 2c       	mov	r14, r1
     b0a:	f1 2c       	mov	r15, r1
     b0c:	04 e0       	ldi	r16, 0x04	; 4
     b0e:	20 e0       	ldi	r18, 0x00	; 0
     b10:	30 e0       	ldi	r19, 0x00	; 0
     b12:	45 e5       	ldi	r20, 0x55	; 85
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	6c e3       	ldi	r22, 0x3C	; 60
     b18:	71 e0       	ldi	r23, 0x01	; 1
     b1a:	85 e6       	ldi	r24, 0x65	; 101
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	xTaskCreate(local_player_task,(const char *)"lplayer", configMINIMAL_STACK_SIZE, (void *)NULL, task3_prio, NULL);
     b22:	e1 2c       	mov	r14, r1
     b24:	f1 2c       	mov	r15, r1
     b26:	02 e0       	ldi	r16, 0x02	; 2
     b28:	20 e0       	ldi	r18, 0x00	; 0
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	45 e5       	ldi	r20, 0x55	; 85
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	63 e4       	ldi	r22, 0x43	; 67
     b32:	71 e0       	ldi	r23, 0x01	; 1
     b34:	8b e1       	ldi	r24, 0x1B	; 27
     b36:	91 e0       	ldi	r25, 0x01	; 1
     b38:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     b3c:	e1 2c       	mov	r14, r1
     b3e:	f1 2c       	mov	r15, r1
     b40:	03 e0       	ldi	r16, 0x03	; 3
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	45 e5       	ldi	r20, 0x55	; 85
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	6b e4       	ldi	r22, 0x4B	; 75
     b4c:	71 e0       	ldi	r23, 0x01	; 1
     b4e:	8b ec       	ldi	r24, 0xCB	; 203
     b50:	93 e0       	ldi	r25, 0x03	; 3
     b52:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     b56:	87 ec       	ldi	r24, 0xC7	; 199
     b58:	94 e0       	ldi	r25, 0x04	; 4
     b5a:	0e 94 ed 05 	call	0xbda	; 0xbda <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     b5e:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     b62:	ff cf       	rjmp	.-2      	; 0xb62 <main+0xb8>

00000b64 <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     b64:	cf 93       	push	r28
     b66:	df 93       	push	r29
     b68:	00 d0       	rcall	.+0      	; 0xb6a <_com_call_back+0x6>
     b6a:	00 d0       	rcall	.+0      	; 0xb6c <_com_call_back+0x8>
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
     b70:	9b 83       	std	Y+3, r25	; 0x03
     b72:	8a 83       	std	Y+2, r24	; 0x02
     b74:	6c 83       	std	Y+4, r22	; 0x04
     b76:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_x_rx_com_queue>
     b7a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_x_rx_com_queue+0x1>
     b7e:	89 2b       	or	r24, r25
     b80:	99 f0       	breq	.+38     	; 0xba8 <_com_call_back+0x44>
     b82:	19 82       	std	Y+1, r1	; 0x01
     b84:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_x_rx_com_queue>
     b88:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_x_rx_com_queue+0x1>
     b8c:	be 01       	movw	r22, r28
     b8e:	6c 5f       	subi	r22, 0xFC	; 252
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	20 e0       	ldi	r18, 0x00	; 0
     b94:	ae 01       	movw	r20, r28
     b96:	4f 5f       	subi	r20, 0xFF	; 255
     b98:	5f 4f       	sbci	r21, 0xFF	; 255
     b9a:	0e 94 87 10 	call	0x210e	; 0x210e <xQueueGenericSendFromISR>
     b9e:	89 81       	ldd	r24, Y+1	; 0x01
     ba0:	88 23       	and	r24, r24
     ba2:	11 f0       	breq	.+4      	; 0xba8 <_com_call_back+0x44>
     ba4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
     ba8:	0f 90       	pop	r0
     baa:	0f 90       	pop	r0
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	df 91       	pop	r29
     bb2:	cf 91       	pop	r28
     bb4:	08 95       	ret

00000bb6 <init_com>:
     bb6:	cf 93       	push	r28
     bb8:	df 93       	push	r29
     bba:	00 d0       	rcall	.+0      	; 0xbbc <init_com+0x6>
     bbc:	cd b7       	in	r28, 0x3d	; 61
     bbe:	de b7       	in	r29, 0x3e	; 62
     bc0:	9a 83       	std	Y+2, r25	; 0x02
     bc2:	89 83       	std	Y+1, r24	; 0x01
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	9a 81       	ldd	r25, Y+2	; 0x02
     bc8:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_x_rx_com_queue+0x1>
     bcc:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_x_rx_com_queue>
     bd0:	0f 90       	pop	r0
     bd2:	0f 90       	pop	r0
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	08 95       	ret

00000bda <init_display_timer>:
     bda:	cf 93       	push	r28
     bdc:	df 93       	push	r29
     bde:	00 d0       	rcall	.+0      	; 0xbe0 <init_display_timer+0x6>
     be0:	cd b7       	in	r28, 0x3d	; 61
     be2:	de b7       	in	r29, 0x3e	; 62
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	89 83       	std	Y+1, r24	; 0x01
     be8:	89 81       	ldd	r24, Y+1	; 0x01
     bea:	9a 81       	ldd	r25, Y+2	; 0x02
     bec:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <cb_ptr+0x1>
     bf0:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <cb_ptr>
     bf4:	87 e4       	ldi	r24, 0x47	; 71
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	2a e0       	ldi	r18, 0x0A	; 10
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
     bfe:	84 e4       	ldi	r24, 0x44	; 68
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	24 e4       	ldi	r18, 0x44	; 68
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	22 60       	ori	r18, 0x02	; 2
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
     c10:	8e e6       	ldi	r24, 0x6E	; 110
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	2e e6       	ldi	r18, 0x6E	; 110
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	f9 01       	movw	r30, r18
     c1a:	20 81       	ld	r18, Z
     c1c:	22 60       	ori	r18, 0x02	; 2
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
     c22:	85 e4       	ldi	r24, 0x45	; 69
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	25 e4       	ldi	r18, 0x45	; 69
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	25 60       	ori	r18, 0x05	; 5
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
     c34:	0f 90       	pop	r0
     c36:	0f 90       	pop	r0
     c38:	df 91       	pop	r29
     c3a:	cf 91       	pop	r28
     c3c:	08 95       	ret

00000c3e <__vector_16>:
     c3e:	1f 92       	push	r1
     c40:	0f 92       	push	r0
     c42:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     c46:	0f 92       	push	r0
     c48:	11 24       	eor	r1, r1
     c4a:	2f 93       	push	r18
     c4c:	3f 93       	push	r19
     c4e:	4f 93       	push	r20
     c50:	5f 93       	push	r21
     c52:	6f 93       	push	r22
     c54:	7f 93       	push	r23
     c56:	8f 93       	push	r24
     c58:	9f 93       	push	r25
     c5a:	af 93       	push	r26
     c5c:	bf 93       	push	r27
     c5e:	ef 93       	push	r30
     c60:	ff 93       	push	r31
     c62:	cf 93       	push	r28
     c64:	df 93       	push	r29
     c66:	cd b7       	in	r28, 0x3d	; 61
     c68:	de b7       	in	r29, 0x3e	; 62
     c6a:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cb_ptr>
     c6e:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cb_ptr+0x1>
     c72:	89 2b       	or	r24, r25
     c74:	31 f0       	breq	.+12     	; 0xc82 <__vector_16+0x44>
     c76:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cb_ptr>
     c7a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cb_ptr+0x1>
     c7e:	fc 01       	movw	r30, r24
     c80:	09 95       	icall
     c82:	df 91       	pop	r29
     c84:	cf 91       	pop	r28
     c86:	ff 91       	pop	r31
     c88:	ef 91       	pop	r30
     c8a:	bf 91       	pop	r27
     c8c:	af 91       	pop	r26
     c8e:	9f 91       	pop	r25
     c90:	8f 91       	pop	r24
     c92:	7f 91       	pop	r23
     c94:	6f 91       	pop	r22
     c96:	5f 91       	pop	r21
     c98:	4f 91       	pop	r20
     c9a:	3f 91       	pop	r19
     c9c:	2f 91       	pop	r18
     c9e:	0f 90       	pop	r0
     ca0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     ca4:	0f 90       	pop	r0
     ca6:	1f 90       	pop	r1
     ca8:	18 95       	reti

00000caa <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     caa:	8f 92       	push	r8
     cac:	9f 92       	push	r9
     cae:	af 92       	push	r10
     cb0:	bf 92       	push	r11
     cb2:	cf 92       	push	r12
     cb4:	df 92       	push	r13
     cb6:	ef 92       	push	r14
     cb8:	0f 93       	push	r16
     cba:	cf 93       	push	r28
     cbc:	df 93       	push	r29
     cbe:	cd b7       	in	r28, 0x3d	; 61
     cc0:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     cc2:	84 e6       	ldi	r24, 0x64	; 100
     cc4:	91 e0       	ldi	r25, 0x01	; 1
     cc6:	0e 94 e7 06 	call	0xdce	; 0xdce <buffer_init>
	buffer_init(&_com_tx_buffer);
     cca:	87 e7       	ldi	r24, 0x77	; 119
     ccc:	91 e0       	ldi	r25, 0x01	; 1
     cce:	0e 94 e7 06 	call	0xdce	; 0xdce <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     cd2:	0f 2e       	mov	r0, r31
     cd4:	f2 eb       	ldi	r31, 0xB2	; 178
     cd6:	8f 2e       	mov	r8, r31
     cd8:	f5 e0       	ldi	r31, 0x05	; 5
     cda:	9f 2e       	mov	r9, r31
     cdc:	f0 2d       	mov	r31, r0
     cde:	0f 2e       	mov	r0, r31
     ce0:	f7 e7       	ldi	r31, 0x77	; 119
     ce2:	af 2e       	mov	r10, r31
     ce4:	f1 e0       	ldi	r31, 0x01	; 1
     ce6:	bf 2e       	mov	r11, r31
     ce8:	f0 2d       	mov	r31, r0
     cea:	0f 2e       	mov	r0, r31
     cec:	f4 e6       	ldi	r31, 0x64	; 100
     cee:	cf 2e       	mov	r12, r31
     cf0:	f1 e0       	ldi	r31, 0x01	; 1
     cf2:	df 2e       	mov	r13, r31
     cf4:	f0 2d       	mov	r31, r0
     cf6:	e1 2c       	mov	r14, r1
     cf8:	00 e0       	ldi	r16, 0x00	; 0
     cfa:	23 e0       	ldi	r18, 0x03	; 3
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	52 ec       	ldi	r21, 0xC2	; 194
     d00:	61 e0       	ldi	r22, 0x01	; 1
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	0e 94 45 0c 	call	0x188a	; 0x188a <serial_new_instance>
     d0a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <_com_serial_instance+0x1>
     d0e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     d12:	88 e2       	ldi	r24, 0x28	; 40
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	28 e2       	ldi	r18, 0x28	; 40
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	f9 01       	movw	r30, r18
     d1c:	20 81       	ld	r18, Z
     d1e:	23 6c       	ori	r18, 0xC3	; 195
     d20:	fc 01       	movw	r30, r24
     d22:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     d24:	8b e2       	ldi	r24, 0x2B	; 43
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	2b e2       	ldi	r18, 0x2B	; 43
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	f9 01       	movw	r30, r18
     d2e:	20 81       	ld	r18, Z
     d30:	28 60       	ori	r18, 0x08	; 8
     d32:	fc 01       	movw	r30, r24
     d34:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     d36:	8a e2       	ldi	r24, 0x2A	; 42
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	2a e2       	ldi	r18, 0x2A	; 42
     d3c:	30 e0       	ldi	r19, 0x00	; 0
     d3e:	f9 01       	movw	r30, r18
     d40:	20 81       	ld	r18, Z
     d42:	24 67       	ori	r18, 0x74	; 116
     d44:	fc 01       	movw	r30, r24
     d46:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     d48:	8b e2       	ldi	r24, 0x2B	; 43
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	2b e2       	ldi	r18, 0x2B	; 43
     d4e:	30 e0       	ldi	r19, 0x00	; 0
     d50:	f9 01       	movw	r30, r18
     d52:	20 81       	ld	r18, Z
     d54:	20 64       	ori	r18, 0x40	; 64
     d56:	fc 01       	movw	r30, r24
     d58:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     d5a:	81 e2       	ldi	r24, 0x21	; 33
     d5c:	90 e0       	ldi	r25, 0x00	; 0
     d5e:	fc 01       	movw	r30, r24
     d60:	80 81       	ld	r24, Z
     d62:	81 e2       	ldi	r24, 0x21	; 33
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	2f ef       	ldi	r18, 0xFF	; 255
     d68:	fc 01       	movw	r30, r24
     d6a:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     d6c:	84 e2       	ldi	r24, 0x24	; 36
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	24 e2       	ldi	r18, 0x24	; 36
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	f9 01       	movw	r30, r18
     d76:	20 81       	ld	r18, Z
     d78:	23 60       	ori	r18, 0x03	; 3
     d7a:	fc 01       	movw	r30, r24
     d7c:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     d7e:	84 e2       	ldi	r24, 0x24	; 36
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	24 e2       	ldi	r18, 0x24	; 36
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	f9 01       	movw	r30, r18
     d88:	20 81       	ld	r18, Z
     d8a:	2c 63       	ori	r18, 0x3C	; 60
     d8c:	fc 01       	movw	r30, r24
     d8e:	20 83       	st	Z, r18
}
     d90:	df 91       	pop	r29
     d92:	cf 91       	pop	r28
     d94:	0f 91       	pop	r16
     d96:	ef 90       	pop	r14
     d98:	df 90       	pop	r13
     d9a:	cf 90       	pop	r12
     d9c:	bf 90       	pop	r11
     d9e:	af 90       	pop	r10
     da0:	9f 90       	pop	r9
     da2:	8f 90       	pop	r8
     da4:	08 95       	ret

00000da6 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     da6:	cf 93       	push	r28
     da8:	df 93       	push	r29
     daa:	1f 92       	push	r1
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     db2:	0f 90       	pop	r0
     db4:	df 91       	pop	r29
     db6:	cf 91       	pop	r28
     db8:	08 95       	ret

00000dba <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     dba:	cf 93       	push	r28
     dbc:	df 93       	push	r29
     dbe:	1f 92       	push	r1
     dc0:	cd b7       	in	r28, 0x3d	; 61
     dc2:	de b7       	in	r29, 0x3e	; 62
     dc4:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     dc6:	0f 90       	pop	r0
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	08 95       	ret

00000dce <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     dce:	cf 93       	push	r28
     dd0:	df 93       	push	r29
     dd2:	00 d0       	rcall	.+0      	; 0xdd4 <buffer_init+0x6>
     dd4:	cd b7       	in	r28, 0x3d	; 61
     dd6:	de b7       	in	r29, 0x3e	; 62
     dd8:	9a 83       	std	Y+2, r25	; 0x02
     dda:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     ddc:	89 81       	ldd	r24, Y+1	; 0x01
     dde:	9a 81       	ldd	r25, Y+2	; 0x02
     de0:	fc 01       	movw	r30, r24
     de2:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     de4:	89 81       	ldd	r24, Y+1	; 0x01
     de6:	9a 81       	ldd	r25, Y+2	; 0x02
     de8:	fc 01       	movw	r30, r24
     dea:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     dec:	89 81       	ldd	r24, Y+1	; 0x01
     dee:	9a 81       	ldd	r25, Y+2	; 0x02
     df0:	fc 01       	movw	r30, r24
     df2:	12 8a       	std	Z+18, r1	; 0x12
}
     df4:	0f 90       	pop	r0
     df6:	0f 90       	pop	r0
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	08 95       	ret

00000dfe <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     dfe:	cf 93       	push	r28
     e00:	df 93       	push	r29
     e02:	00 d0       	rcall	.+0      	; 0xe04 <buffer_get_item+0x6>
     e04:	00 d0       	rcall	.+0      	; 0xe06 <buffer_get_item+0x8>
     e06:	cd b7       	in	r28, 0x3d	; 61
     e08:	de b7       	in	r29, 0x3e	; 62
     e0a:	9a 83       	std	Y+2, r25	; 0x02
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	7c 83       	std	Y+4, r23	; 0x04
     e10:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     e12:	89 81       	ldd	r24, Y+1	; 0x01
     e14:	9a 81       	ldd	r25, Y+2	; 0x02
     e16:	fc 01       	movw	r30, r24
     e18:	82 89       	ldd	r24, Z+18	; 0x12
     e1a:	88 23       	and	r24, r24
     e1c:	81 f1       	breq	.+96     	; 0xe7e <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	fc 01       	movw	r30, r24
     e24:	81 89       	ldd	r24, Z+17	; 0x11
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	29 81       	ldd	r18, Y+1	; 0x01
     e2c:	3a 81       	ldd	r19, Y+2	; 0x02
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	fc 01       	movw	r30, r24
     e34:	20 81       	ld	r18, Z
     e36:	8b 81       	ldd	r24, Y+3	; 0x03
     e38:	9c 81       	ldd	r25, Y+4	; 0x04
     e3a:	fc 01       	movw	r30, r24
     e3c:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     e3e:	89 81       	ldd	r24, Y+1	; 0x01
     e40:	9a 81       	ldd	r25, Y+2	; 0x02
     e42:	fc 01       	movw	r30, r24
     e44:	81 89       	ldd	r24, Z+17	; 0x11
     e46:	88 2f       	mov	r24, r24
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	01 96       	adiw	r24, 0x01	; 1
     e4c:	8f 70       	andi	r24, 0x0F	; 15
     e4e:	90 78       	andi	r25, 0x80	; 128
     e50:	99 23       	and	r25, r25
     e52:	24 f4       	brge	.+8      	; 0xe5c <buffer_get_item+0x5e>
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	80 6f       	ori	r24, 0xF0	; 240
     e58:	9f 6f       	ori	r25, 0xFF	; 255
     e5a:	01 96       	adiw	r24, 0x01	; 1
     e5c:	28 2f       	mov	r18, r24
     e5e:	89 81       	ldd	r24, Y+1	; 0x01
     e60:	9a 81       	ldd	r25, Y+2	; 0x02
     e62:	fc 01       	movw	r30, r24
     e64:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	82 89       	ldd	r24, Z+18	; 0x12
     e6e:	2f ef       	ldi	r18, 0xFF	; 255
     e70:	28 0f       	add	r18, r24
     e72:	89 81       	ldd	r24, Y+1	; 0x01
     e74:	9a 81       	ldd	r25, Y+2	; 0x02
     e76:	fc 01       	movw	r30, r24
     e78:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	0f 90       	pop	r0
     e86:	0f 90       	pop	r0
     e88:	df 91       	pop	r29
     e8a:	cf 91       	pop	r28
     e8c:	08 95       	ret

00000e8e <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     e8e:	cf 93       	push	r28
     e90:	df 93       	push	r29
     e92:	00 d0       	rcall	.+0      	; 0xe94 <buffer_put_item+0x6>
     e94:	1f 92       	push	r1
     e96:	cd b7       	in	r28, 0x3d	; 61
     e98:	de b7       	in	r29, 0x3e	; 62
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
     e9e:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     ea0:	89 81       	ldd	r24, Y+1	; 0x01
     ea2:	9a 81       	ldd	r25, Y+2	; 0x02
     ea4:	fc 01       	movw	r30, r24
     ea6:	82 89       	ldd	r24, Z+18	; 0x12
     ea8:	80 31       	cpi	r24, 0x10	; 16
     eaa:	68 f5       	brcc	.+90     	; 0xf06 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	80 89       	ldd	r24, Z+16	; 0x10
     eb4:	88 2f       	mov	r24, r24
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	29 81       	ldd	r18, Y+1	; 0x01
     eba:	3a 81       	ldd	r19, Y+2	; 0x02
     ebc:	82 0f       	add	r24, r18
     ebe:	93 1f       	adc	r25, r19
     ec0:	2b 81       	ldd	r18, Y+3	; 0x03
     ec2:	fc 01       	movw	r30, r24
     ec4:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	9a 81       	ldd	r25, Y+2	; 0x02
     eca:	fc 01       	movw	r30, r24
     ecc:	80 89       	ldd	r24, Z+16	; 0x10
     ece:	88 2f       	mov	r24, r24
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	01 96       	adiw	r24, 0x01	; 1
     ed4:	8f 70       	andi	r24, 0x0F	; 15
     ed6:	90 78       	andi	r25, 0x80	; 128
     ed8:	99 23       	and	r25, r25
     eda:	24 f4       	brge	.+8      	; 0xee4 <buffer_put_item+0x56>
     edc:	01 97       	sbiw	r24, 0x01	; 1
     ede:	80 6f       	ori	r24, 0xF0	; 240
     ee0:	9f 6f       	ori	r25, 0xFF	; 255
     ee2:	01 96       	adiw	r24, 0x01	; 1
     ee4:	28 2f       	mov	r18, r24
     ee6:	89 81       	ldd	r24, Y+1	; 0x01
     ee8:	9a 81       	ldd	r25, Y+2	; 0x02
     eea:	fc 01       	movw	r30, r24
     eec:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	9a 81       	ldd	r25, Y+2	; 0x02
     ef2:	fc 01       	movw	r30, r24
     ef4:	82 89       	ldd	r24, Z+18	; 0x12
     ef6:	21 e0       	ldi	r18, 0x01	; 1
     ef8:	28 0f       	add	r18, r24
     efa:	89 81       	ldd	r24, Y+1	; 0x01
     efc:	9a 81       	ldd	r25, Y+2	; 0x02
     efe:	fc 01       	movw	r30, r24
     f00:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     f02:	80 e0       	ldi	r24, 0x00	; 0
     f04:	01 c0       	rjmp	.+2      	; 0xf08 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     f06:	82 e0       	ldi	r24, 0x02	; 2
}
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	df 91       	pop	r29
     f10:	cf 91       	pop	r28
     f12:	08 95       	ret

00000f14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     f14:	cf 93       	push	r28
     f16:	df 93       	push	r29
     f18:	00 d0       	rcall	.+0      	; 0xf1a <vListInitialise+0x6>
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	9a 83       	std	Y+2, r25	; 0x02
     f20:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f22:	89 81       	ldd	r24, Y+1	; 0x01
     f24:	9a 81       	ldd	r25, Y+2	; 0x02
     f26:	9c 01       	movw	r18, r24
     f28:	2d 5f       	subi	r18, 0xFD	; 253
     f2a:	3f 4f       	sbci	r19, 0xFF	; 255
     f2c:	89 81       	ldd	r24, Y+1	; 0x01
     f2e:	9a 81       	ldd	r25, Y+2	; 0x02
     f30:	fc 01       	movw	r30, r24
     f32:	32 83       	std	Z+2, r19	; 0x02
     f34:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     f36:	89 81       	ldd	r24, Y+1	; 0x01
     f38:	9a 81       	ldd	r25, Y+2	; 0x02
     f3a:	2f ef       	ldi	r18, 0xFF	; 255
     f3c:	3f ef       	ldi	r19, 0xFF	; 255
     f3e:	fc 01       	movw	r30, r24
     f40:	34 83       	std	Z+4, r19	; 0x04
     f42:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f44:	89 81       	ldd	r24, Y+1	; 0x01
     f46:	9a 81       	ldd	r25, Y+2	; 0x02
     f48:	9c 01       	movw	r18, r24
     f4a:	2d 5f       	subi	r18, 0xFD	; 253
     f4c:	3f 4f       	sbci	r19, 0xFF	; 255
     f4e:	89 81       	ldd	r24, Y+1	; 0x01
     f50:	9a 81       	ldd	r25, Y+2	; 0x02
     f52:	fc 01       	movw	r30, r24
     f54:	36 83       	std	Z+6, r19	; 0x06
     f56:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f58:	89 81       	ldd	r24, Y+1	; 0x01
     f5a:	9a 81       	ldd	r25, Y+2	; 0x02
     f5c:	9c 01       	movw	r18, r24
     f5e:	2d 5f       	subi	r18, 0xFD	; 253
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	9a 81       	ldd	r25, Y+2	; 0x02
     f66:	fc 01       	movw	r30, r24
     f68:	30 87       	std	Z+8, r19	; 0x08
     f6a:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     f6c:	89 81       	ldd	r24, Y+1	; 0x01
     f6e:	9a 81       	ldd	r25, Y+2	; 0x02
     f70:	fc 01       	movw	r30, r24
     f72:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     f74:	0f 90       	pop	r0
     f76:	0f 90       	pop	r0
     f78:	df 91       	pop	r29
     f7a:	cf 91       	pop	r28
     f7c:	08 95       	ret

00000f7e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	00 d0       	rcall	.+0      	; 0xf84 <vListInitialiseItem+0x6>
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	9a 83       	std	Y+2, r25	; 0x02
     f8a:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	11 86       	std	Z+9, r1	; 0x09
     f94:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	df 91       	pop	r29
     f9c:	cf 91       	pop	r28
     f9e:	08 95       	ret

00000fa0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     fa0:	cf 93       	push	r28
     fa2:	df 93       	push	r29
     fa4:	00 d0       	rcall	.+0      	; 0xfa6 <vListInsertEnd+0x6>
     fa6:	00 d0       	rcall	.+0      	; 0xfa8 <vListInsertEnd+0x8>
     fa8:	00 d0       	rcall	.+0      	; 0xfaa <vListInsertEnd+0xa>
     faa:	cd b7       	in	r28, 0x3d	; 61
     fac:	de b7       	in	r29, 0x3e	; 62
     fae:	9c 83       	std	Y+4, r25	; 0x04
     fb0:	8b 83       	std	Y+3, r24	; 0x03
     fb2:	7e 83       	std	Y+6, r23	; 0x06
     fb4:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     fb6:	8b 81       	ldd	r24, Y+3	; 0x03
     fb8:	9c 81       	ldd	r25, Y+4	; 0x04
     fba:	fc 01       	movw	r30, r24
     fbc:	81 81       	ldd	r24, Z+1	; 0x01
     fbe:	92 81       	ldd	r25, Z+2	; 0x02
     fc0:	9a 83       	std	Y+2, r25	; 0x02
     fc2:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	29 81       	ldd	r18, Y+1	; 0x01
     fca:	3a 81       	ldd	r19, Y+2	; 0x02
     fcc:	fc 01       	movw	r30, r24
     fce:	33 83       	std	Z+3, r19	; 0x03
     fd0:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	9a 81       	ldd	r25, Y+2	; 0x02
     fd6:	fc 01       	movw	r30, r24
     fd8:	24 81       	ldd	r18, Z+4	; 0x04
     fda:	35 81       	ldd	r19, Z+5	; 0x05
     fdc:	8d 81       	ldd	r24, Y+5	; 0x05
     fde:	9e 81       	ldd	r25, Y+6	; 0x06
     fe0:	fc 01       	movw	r30, r24
     fe2:	35 83       	std	Z+5, r19	; 0x05
     fe4:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	9a 81       	ldd	r25, Y+2	; 0x02
     fea:	fc 01       	movw	r30, r24
     fec:	84 81       	ldd	r24, Z+4	; 0x04
     fee:	95 81       	ldd	r25, Z+5	; 0x05
     ff0:	2d 81       	ldd	r18, Y+5	; 0x05
     ff2:	3e 81       	ldd	r19, Y+6	; 0x06
     ff4:	fc 01       	movw	r30, r24
     ff6:	33 83       	std	Z+3, r19	; 0x03
     ff8:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     ffa:	89 81       	ldd	r24, Y+1	; 0x01
     ffc:	9a 81       	ldd	r25, Y+2	; 0x02
     ffe:	2d 81       	ldd	r18, Y+5	; 0x05
    1000:	3e 81       	ldd	r19, Y+6	; 0x06
    1002:	fc 01       	movw	r30, r24
    1004:	35 83       	std	Z+5, r19	; 0x05
    1006:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    1008:	8d 81       	ldd	r24, Y+5	; 0x05
    100a:	9e 81       	ldd	r25, Y+6	; 0x06
    100c:	2b 81       	ldd	r18, Y+3	; 0x03
    100e:	3c 81       	ldd	r19, Y+4	; 0x04
    1010:	fc 01       	movw	r30, r24
    1012:	31 87       	std	Z+9, r19	; 0x09
    1014:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1016:	8b 81       	ldd	r24, Y+3	; 0x03
    1018:	9c 81       	ldd	r25, Y+4	; 0x04
    101a:	fc 01       	movw	r30, r24
    101c:	80 81       	ld	r24, Z
    101e:	21 e0       	ldi	r18, 0x01	; 1
    1020:	28 0f       	add	r18, r24
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	fc 01       	movw	r30, r24
    1028:	20 83       	st	Z, r18
}
    102a:	26 96       	adiw	r28, 0x06	; 6
    102c:	0f b6       	in	r0, 0x3f	; 63
    102e:	f8 94       	cli
    1030:	de bf       	out	0x3e, r29	; 62
    1032:	0f be       	out	0x3f, r0	; 63
    1034:	cd bf       	out	0x3d, r28	; 61
    1036:	df 91       	pop	r29
    1038:	cf 91       	pop	r28
    103a:	08 95       	ret

0000103c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	28 97       	sbiw	r28, 0x08	; 8
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	78 87       	std	Y+8, r23	; 0x08
    1056:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
    1058:	8f 81       	ldd	r24, Y+7	; 0x07
    105a:	98 85       	ldd	r25, Y+8	; 0x08
    105c:	fc 01       	movw	r30, r24
    105e:	80 81       	ld	r24, Z
    1060:	91 81       	ldd	r25, Z+1	; 0x01
    1062:	9c 83       	std	Y+4, r25	; 0x04
    1064:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
    1066:	8b 81       	ldd	r24, Y+3	; 0x03
    1068:	9c 81       	ldd	r25, Y+4	; 0x04
    106a:	01 96       	adiw	r24, 0x01	; 1
    106c:	41 f4       	brne	.+16     	; 0x107e <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	9e 81       	ldd	r25, Y+6	; 0x06
    1072:	fc 01       	movw	r30, r24
    1074:	87 81       	ldd	r24, Z+7	; 0x07
    1076:	90 85       	ldd	r25, Z+8	; 0x08
    1078:	9a 83       	std	Y+2, r25	; 0x02
    107a:	89 83       	std	Y+1, r24	; 0x01
    107c:	1a c0       	rjmp	.+52     	; 0x10b2 <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
    107e:	8d 81       	ldd	r24, Y+5	; 0x05
    1080:	9e 81       	ldd	r25, Y+6	; 0x06
    1082:	03 96       	adiw	r24, 0x03	; 3
    1084:	9a 83       	std	Y+2, r25	; 0x02
    1086:	89 83       	std	Y+1, r24	; 0x01
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vListInsert+0x5c>
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	9a 81       	ldd	r25, Y+2	; 0x02
    108e:	fc 01       	movw	r30, r24
    1090:	82 81       	ldd	r24, Z+2	; 0x02
    1092:	93 81       	ldd	r25, Z+3	; 0x03
    1094:	9a 83       	std	Y+2, r25	; 0x02
    1096:	89 83       	std	Y+1, r24	; 0x01
    1098:	89 81       	ldd	r24, Y+1	; 0x01
    109a:	9a 81       	ldd	r25, Y+2	; 0x02
    109c:	fc 01       	movw	r30, r24
    109e:	82 81       	ldd	r24, Z+2	; 0x02
    10a0:	93 81       	ldd	r25, Z+3	; 0x03
    10a2:	fc 01       	movw	r30, r24
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	8b 81       	ldd	r24, Y+3	; 0x03
    10aa:	9c 81       	ldd	r25, Y+4	; 0x04
    10ac:	82 17       	cp	r24, r18
    10ae:	93 07       	cpc	r25, r19
    10b0:	60 f7       	brcc	.-40     	; 0x108a <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
    10b2:	89 81       	ldd	r24, Y+1	; 0x01
    10b4:	9a 81       	ldd	r25, Y+2	; 0x02
    10b6:	fc 01       	movw	r30, r24
    10b8:	22 81       	ldd	r18, Z+2	; 0x02
    10ba:	33 81       	ldd	r19, Z+3	; 0x03
    10bc:	8f 81       	ldd	r24, Y+7	; 0x07
    10be:	98 85       	ldd	r25, Y+8	; 0x08
    10c0:	fc 01       	movw	r30, r24
    10c2:	33 83       	std	Z+3, r19	; 0x03
    10c4:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
    10c6:	8f 81       	ldd	r24, Y+7	; 0x07
    10c8:	98 85       	ldd	r25, Y+8	; 0x08
    10ca:	fc 01       	movw	r30, r24
    10cc:	82 81       	ldd	r24, Z+2	; 0x02
    10ce:	93 81       	ldd	r25, Z+3	; 0x03
    10d0:	2f 81       	ldd	r18, Y+7	; 0x07
    10d2:	38 85       	ldd	r19, Y+8	; 0x08
    10d4:	fc 01       	movw	r30, r24
    10d6:	35 83       	std	Z+5, r19	; 0x05
    10d8:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
    10da:	8f 81       	ldd	r24, Y+7	; 0x07
    10dc:	98 85       	ldd	r25, Y+8	; 0x08
    10de:	29 81       	ldd	r18, Y+1	; 0x01
    10e0:	3a 81       	ldd	r19, Y+2	; 0x02
    10e2:	fc 01       	movw	r30, r24
    10e4:	35 83       	std	Z+5, r19	; 0x05
    10e6:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
    10e8:	89 81       	ldd	r24, Y+1	; 0x01
    10ea:	9a 81       	ldd	r25, Y+2	; 0x02
    10ec:	2f 81       	ldd	r18, Y+7	; 0x07
    10ee:	38 85       	ldd	r19, Y+8	; 0x08
    10f0:	fc 01       	movw	r30, r24
    10f2:	33 83       	std	Z+3, r19	; 0x03
    10f4:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
    10f6:	8f 81       	ldd	r24, Y+7	; 0x07
    10f8:	98 85       	ldd	r25, Y+8	; 0x08
    10fa:	2d 81       	ldd	r18, Y+5	; 0x05
    10fc:	3e 81       	ldd	r19, Y+6	; 0x06
    10fe:	fc 01       	movw	r30, r24
    1100:	31 87       	std	Z+9, r19	; 0x09
    1102:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
    1104:	8d 81       	ldd	r24, Y+5	; 0x05
    1106:	9e 81       	ldd	r25, Y+6	; 0x06
    1108:	fc 01       	movw	r30, r24
    110a:	80 81       	ld	r24, Z
    110c:	21 e0       	ldi	r18, 0x01	; 1
    110e:	28 0f       	add	r18, r24
    1110:	8d 81       	ldd	r24, Y+5	; 0x05
    1112:	9e 81       	ldd	r25, Y+6	; 0x06
    1114:	fc 01       	movw	r30, r24
    1116:	20 83       	st	Z, r18
}
    1118:	28 96       	adiw	r28, 0x08	; 8
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	de bf       	out	0x3e, r29	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	cd bf       	out	0x3d, r28	; 61
    1124:	df 91       	pop	r29
    1126:	cf 91       	pop	r28
    1128:	08 95       	ret

0000112a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    112a:	cf 93       	push	r28
    112c:	df 93       	push	r29
    112e:	00 d0       	rcall	.+0      	; 0x1130 <uxListRemove+0x6>
    1130:	00 d0       	rcall	.+0      	; 0x1132 <uxListRemove+0x8>
    1132:	cd b7       	in	r28, 0x3d	; 61
    1134:	de b7       	in	r29, 0x3e	; 62
    1136:	9c 83       	std	Y+4, r25	; 0x04
    1138:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    113a:	8b 81       	ldd	r24, Y+3	; 0x03
    113c:	9c 81       	ldd	r25, Y+4	; 0x04
    113e:	fc 01       	movw	r30, r24
    1140:	80 85       	ldd	r24, Z+8	; 0x08
    1142:	91 85       	ldd	r25, Z+9	; 0x09
    1144:	9a 83       	std	Y+2, r25	; 0x02
    1146:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1148:	8b 81       	ldd	r24, Y+3	; 0x03
    114a:	9c 81       	ldd	r25, Y+4	; 0x04
    114c:	fc 01       	movw	r30, r24
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	3c 81       	ldd	r19, Y+4	; 0x04
    1156:	f9 01       	movw	r30, r18
    1158:	24 81       	ldd	r18, Z+4	; 0x04
    115a:	35 81       	ldd	r19, Z+5	; 0x05
    115c:	fc 01       	movw	r30, r24
    115e:	35 83       	std	Z+5, r19	; 0x05
    1160:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	fc 01       	movw	r30, r24
    1168:	84 81       	ldd	r24, Z+4	; 0x04
    116a:	95 81       	ldd	r25, Z+5	; 0x05
    116c:	2b 81       	ldd	r18, Y+3	; 0x03
    116e:	3c 81       	ldd	r19, Y+4	; 0x04
    1170:	f9 01       	movw	r30, r18
    1172:	22 81       	ldd	r18, Z+2	; 0x02
    1174:	33 81       	ldd	r19, Z+3	; 0x03
    1176:	fc 01       	movw	r30, r24
    1178:	33 83       	std	Z+3, r19	; 0x03
    117a:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	9a 81       	ldd	r25, Y+2	; 0x02
    1180:	fc 01       	movw	r30, r24
    1182:	21 81       	ldd	r18, Z+1	; 0x01
    1184:	32 81       	ldd	r19, Z+2	; 0x02
    1186:	8b 81       	ldd	r24, Y+3	; 0x03
    1188:	9c 81       	ldd	r25, Y+4	; 0x04
    118a:	28 17       	cp	r18, r24
    118c:	39 07       	cpc	r19, r25
    118e:	51 f4       	brne	.+20     	; 0x11a4 <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    1190:	8b 81       	ldd	r24, Y+3	; 0x03
    1192:	9c 81       	ldd	r25, Y+4	; 0x04
    1194:	fc 01       	movw	r30, r24
    1196:	24 81       	ldd	r18, Z+4	; 0x04
    1198:	35 81       	ldd	r19, Z+5	; 0x05
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	fc 01       	movw	r30, r24
    11a0:	32 83       	std	Z+2, r19	; 0x02
    11a2:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	fc 01       	movw	r30, r24
    11aa:	11 86       	std	Z+9, r1	; 0x09
    11ac:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	fc 01       	movw	r30, r24
    11b4:	80 81       	ld	r24, Z
    11b6:	2f ef       	ldi	r18, 0xFF	; 255
    11b8:	28 0f       	add	r18, r24
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	fc 01       	movw	r30, r24
    11c0:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    11c2:	89 81       	ldd	r24, Y+1	; 0x01
    11c4:	9a 81       	ldd	r25, Y+2	; 0x02
    11c6:	fc 01       	movw	r30, r24
    11c8:	80 81       	ld	r24, Z
}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	df 91       	pop	r29
    11d4:	cf 91       	pop	r28
    11d6:	08 95       	ret

000011d8 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    11d8:	cf 93       	push	r28
    11da:	df 93       	push	r29
    11dc:	cd b7       	in	r28, 0x3d	; 61
    11de:	de b7       	in	r29, 0x3e	; 62
    11e0:	28 97       	sbiw	r28, 0x08	; 8
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	de bf       	out	0x3e, r29	; 62
    11e8:	0f be       	out	0x3f, r0	; 63
    11ea:	cd bf       	out	0x3d, r28	; 61
    11ec:	9c 83       	std	Y+4, r25	; 0x04
    11ee:	8b 83       	std	Y+3, r24	; 0x03
    11f0:	7e 83       	std	Y+6, r23	; 0x06
    11f2:	6d 83       	std	Y+5, r22	; 0x05
    11f4:	58 87       	std	Y+8, r21	; 0x08
    11f6:	4f 83       	std	Y+7, r20	; 0x07
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	21 e1       	ldi	r18, 0x11	; 17
    11fe:	fc 01       	movw	r30, r24
    1200:	20 83       	st	Z, r18
    1202:	8b 81       	ldd	r24, Y+3	; 0x03
    1204:	9c 81       	ldd	r25, Y+4	; 0x04
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	9c 83       	std	Y+4, r25	; 0x04
    120a:	8b 83       	std	Y+3, r24	; 0x03
    120c:	8b 81       	ldd	r24, Y+3	; 0x03
    120e:	9c 81       	ldd	r25, Y+4	; 0x04
    1210:	22 e2       	ldi	r18, 0x22	; 34
    1212:	fc 01       	movw	r30, r24
    1214:	20 83       	st	Z, r18
    1216:	8b 81       	ldd	r24, Y+3	; 0x03
    1218:	9c 81       	ldd	r25, Y+4	; 0x04
    121a:	01 97       	sbiw	r24, 0x01	; 1
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	23 e3       	ldi	r18, 0x33	; 51
    1226:	fc 01       	movw	r30, r24
    1228:	20 83       	st	Z, r18
    122a:	8b 81       	ldd	r24, Y+3	; 0x03
    122c:	9c 81       	ldd	r25, Y+4	; 0x04
    122e:	01 97       	sbiw	r24, 0x01	; 1
    1230:	9c 83       	std	Y+4, r25	; 0x04
    1232:	8b 83       	std	Y+3, r24	; 0x03
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	9a 83       	std	Y+2, r25	; 0x02
    123a:	89 83       	std	Y+1, r24	; 0x01
    123c:	29 81       	ldd	r18, Y+1	; 0x01
    123e:	8b 81       	ldd	r24, Y+3	; 0x03
    1240:	9c 81       	ldd	r25, Y+4	; 0x04
    1242:	fc 01       	movw	r30, r24
    1244:	20 83       	st	Z, r18
    1246:	8b 81       	ldd	r24, Y+3	; 0x03
    1248:	9c 81       	ldd	r25, Y+4	; 0x04
    124a:	01 97       	sbiw	r24, 0x01	; 1
    124c:	9c 83       	std	Y+4, r25	; 0x04
    124e:	8b 83       	std	Y+3, r24	; 0x03
    1250:	89 81       	ldd	r24, Y+1	; 0x01
    1252:	9a 81       	ldd	r25, Y+2	; 0x02
    1254:	89 2f       	mov	r24, r25
    1256:	99 27       	eor	r25, r25
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	29 81       	ldd	r18, Y+1	; 0x01
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	fc 01       	movw	r30, r24
    1264:	20 83       	st	Z, r18
    1266:	8b 81       	ldd	r24, Y+3	; 0x03
    1268:	9c 81       	ldd	r25, Y+4	; 0x04
    126a:	01 97       	sbiw	r24, 0x01	; 1
    126c:	9c 83       	std	Y+4, r25	; 0x04
    126e:	8b 83       	std	Y+3, r24	; 0x03
    1270:	8b 81       	ldd	r24, Y+3	; 0x03
    1272:	9c 81       	ldd	r25, Y+4	; 0x04
    1274:	fc 01       	movw	r30, r24
    1276:	10 82       	st	Z, r1
    1278:	8b 81       	ldd	r24, Y+3	; 0x03
    127a:	9c 81       	ldd	r25, Y+4	; 0x04
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	9c 83       	std	Y+4, r25	; 0x04
    1280:	8b 83       	std	Y+3, r24	; 0x03
    1282:	8b 81       	ldd	r24, Y+3	; 0x03
    1284:	9c 81       	ldd	r25, Y+4	; 0x04
    1286:	20 e8       	ldi	r18, 0x80	; 128
    1288:	fc 01       	movw	r30, r24
    128a:	20 83       	st	Z, r18
    128c:	8b 81       	ldd	r24, Y+3	; 0x03
    128e:	9c 81       	ldd	r25, Y+4	; 0x04
    1290:	01 97       	sbiw	r24, 0x01	; 1
    1292:	9c 83       	std	Y+4, r25	; 0x04
    1294:	8b 83       	std	Y+3, r24	; 0x03
    1296:	8b 81       	ldd	r24, Y+3	; 0x03
    1298:	9c 81       	ldd	r25, Y+4	; 0x04
    129a:	fc 01       	movw	r30, r24
    129c:	10 82       	st	Z, r1
    129e:	8b 81       	ldd	r24, Y+3	; 0x03
    12a0:	9c 81       	ldd	r25, Y+4	; 0x04
    12a2:	01 97       	sbiw	r24, 0x01	; 1
    12a4:	9c 83       	std	Y+4, r25	; 0x04
    12a6:	8b 83       	std	Y+3, r24	; 0x03
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	9c 81       	ldd	r25, Y+4	; 0x04
    12ac:	22 e0       	ldi	r18, 0x02	; 2
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
    12b2:	8b 81       	ldd	r24, Y+3	; 0x03
    12b4:	9c 81       	ldd	r25, Y+4	; 0x04
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	9c 83       	std	Y+4, r25	; 0x04
    12ba:	8b 83       	std	Y+3, r24	; 0x03
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	9c 81       	ldd	r25, Y+4	; 0x04
    12c0:	23 e0       	ldi	r18, 0x03	; 3
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 83       	st	Z, r18
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	01 97       	sbiw	r24, 0x01	; 1
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
    12d0:	8b 81       	ldd	r24, Y+3	; 0x03
    12d2:	9c 81       	ldd	r25, Y+4	; 0x04
    12d4:	24 e0       	ldi	r18, 0x04	; 4
    12d6:	fc 01       	movw	r30, r24
    12d8:	20 83       	st	Z, r18
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	9c 83       	std	Y+4, r25	; 0x04
    12e2:	8b 83       	std	Y+3, r24	; 0x03
    12e4:	8b 81       	ldd	r24, Y+3	; 0x03
    12e6:	9c 81       	ldd	r25, Y+4	; 0x04
    12e8:	25 e0       	ldi	r18, 0x05	; 5
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
    12ee:	8b 81       	ldd	r24, Y+3	; 0x03
    12f0:	9c 81       	ldd	r25, Y+4	; 0x04
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	9c 83       	std	Y+4, r25	; 0x04
    12f6:	8b 83       	std	Y+3, r24	; 0x03
    12f8:	8b 81       	ldd	r24, Y+3	; 0x03
    12fa:	9c 81       	ldd	r25, Y+4	; 0x04
    12fc:	26 e0       	ldi	r18, 0x06	; 6
    12fe:	fc 01       	movw	r30, r24
    1300:	20 83       	st	Z, r18
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	9c 83       	std	Y+4, r25	; 0x04
    130a:	8b 83       	std	Y+3, r24	; 0x03
    130c:	8b 81       	ldd	r24, Y+3	; 0x03
    130e:	9c 81       	ldd	r25, Y+4	; 0x04
    1310:	27 e0       	ldi	r18, 0x07	; 7
    1312:	fc 01       	movw	r30, r24
    1314:	20 83       	st	Z, r18
    1316:	8b 81       	ldd	r24, Y+3	; 0x03
    1318:	9c 81       	ldd	r25, Y+4	; 0x04
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	9c 83       	std	Y+4, r25	; 0x04
    131e:	8b 83       	std	Y+3, r24	; 0x03
    1320:	8b 81       	ldd	r24, Y+3	; 0x03
    1322:	9c 81       	ldd	r25, Y+4	; 0x04
    1324:	28 e0       	ldi	r18, 0x08	; 8
    1326:	fc 01       	movw	r30, r24
    1328:	20 83       	st	Z, r18
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	9c 81       	ldd	r25, Y+4	; 0x04
    132e:	01 97       	sbiw	r24, 0x01	; 1
    1330:	9c 83       	std	Y+4, r25	; 0x04
    1332:	8b 83       	std	Y+3, r24	; 0x03
    1334:	8b 81       	ldd	r24, Y+3	; 0x03
    1336:	9c 81       	ldd	r25, Y+4	; 0x04
    1338:	29 e0       	ldi	r18, 0x09	; 9
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	8b 81       	ldd	r24, Y+3	; 0x03
    1340:	9c 81       	ldd	r25, Y+4	; 0x04
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	9c 83       	std	Y+4, r25	; 0x04
    1346:	8b 83       	std	Y+3, r24	; 0x03
    1348:	8b 81       	ldd	r24, Y+3	; 0x03
    134a:	9c 81       	ldd	r25, Y+4	; 0x04
    134c:	20 e1       	ldi	r18, 0x10	; 16
    134e:	fc 01       	movw	r30, r24
    1350:	20 83       	st	Z, r18
    1352:	8b 81       	ldd	r24, Y+3	; 0x03
    1354:	9c 81       	ldd	r25, Y+4	; 0x04
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	9c 83       	std	Y+4, r25	; 0x04
    135a:	8b 83       	std	Y+3, r24	; 0x03
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	9c 81       	ldd	r25, Y+4	; 0x04
    1360:	21 e1       	ldi	r18, 0x11	; 17
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	8b 81       	ldd	r24, Y+3	; 0x03
    1368:	9c 81       	ldd	r25, Y+4	; 0x04
    136a:	01 97       	sbiw	r24, 0x01	; 1
    136c:	9c 83       	std	Y+4, r25	; 0x04
    136e:	8b 83       	std	Y+3, r24	; 0x03
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	9c 81       	ldd	r25, Y+4	; 0x04
    1374:	22 e1       	ldi	r18, 0x12	; 18
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	8b 81       	ldd	r24, Y+3	; 0x03
    137c:	9c 81       	ldd	r25, Y+4	; 0x04
    137e:	01 97       	sbiw	r24, 0x01	; 1
    1380:	9c 83       	std	Y+4, r25	; 0x04
    1382:	8b 83       	std	Y+3, r24	; 0x03
    1384:	8b 81       	ldd	r24, Y+3	; 0x03
    1386:	9c 81       	ldd	r25, Y+4	; 0x04
    1388:	23 e1       	ldi	r18, 0x13	; 19
    138a:	fc 01       	movw	r30, r24
    138c:	20 83       	st	Z, r18
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	9c 81       	ldd	r25, Y+4	; 0x04
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	9c 83       	std	Y+4, r25	; 0x04
    1396:	8b 83       	std	Y+3, r24	; 0x03
    1398:	8b 81       	ldd	r24, Y+3	; 0x03
    139a:	9c 81       	ldd	r25, Y+4	; 0x04
    139c:	24 e1       	ldi	r18, 0x14	; 20
    139e:	fc 01       	movw	r30, r24
    13a0:	20 83       	st	Z, r18
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	9c 83       	std	Y+4, r25	; 0x04
    13aa:	8b 83       	std	Y+3, r24	; 0x03
    13ac:	8b 81       	ldd	r24, Y+3	; 0x03
    13ae:	9c 81       	ldd	r25, Y+4	; 0x04
    13b0:	25 e1       	ldi	r18, 0x15	; 21
    13b2:	fc 01       	movw	r30, r24
    13b4:	20 83       	st	Z, r18
    13b6:	8b 81       	ldd	r24, Y+3	; 0x03
    13b8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ba:	01 97       	sbiw	r24, 0x01	; 1
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	8b 83       	std	Y+3, r24	; 0x03
    13c0:	8b 81       	ldd	r24, Y+3	; 0x03
    13c2:	9c 81       	ldd	r25, Y+4	; 0x04
    13c4:	26 e1       	ldi	r18, 0x16	; 22
    13c6:	fc 01       	movw	r30, r24
    13c8:	20 83       	st	Z, r18
    13ca:	8b 81       	ldd	r24, Y+3	; 0x03
    13cc:	9c 81       	ldd	r25, Y+4	; 0x04
    13ce:	01 97       	sbiw	r24, 0x01	; 1
    13d0:	9c 83       	std	Y+4, r25	; 0x04
    13d2:	8b 83       	std	Y+3, r24	; 0x03
    13d4:	8b 81       	ldd	r24, Y+3	; 0x03
    13d6:	9c 81       	ldd	r25, Y+4	; 0x04
    13d8:	27 e1       	ldi	r18, 0x17	; 23
    13da:	fc 01       	movw	r30, r24
    13dc:	20 83       	st	Z, r18
    13de:	8b 81       	ldd	r24, Y+3	; 0x03
    13e0:	9c 81       	ldd	r25, Y+4	; 0x04
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	9c 83       	std	Y+4, r25	; 0x04
    13e6:	8b 83       	std	Y+3, r24	; 0x03
    13e8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ea:	9c 81       	ldd	r25, Y+4	; 0x04
    13ec:	28 e1       	ldi	r18, 0x18	; 24
    13ee:	fc 01       	movw	r30, r24
    13f0:	20 83       	st	Z, r18
    13f2:	8b 81       	ldd	r24, Y+3	; 0x03
    13f4:	9c 81       	ldd	r25, Y+4	; 0x04
    13f6:	01 97       	sbiw	r24, 0x01	; 1
    13f8:	9c 83       	std	Y+4, r25	; 0x04
    13fa:	8b 83       	std	Y+3, r24	; 0x03
    13fc:	8b 81       	ldd	r24, Y+3	; 0x03
    13fe:	9c 81       	ldd	r25, Y+4	; 0x04
    1400:	29 e1       	ldi	r18, 0x19	; 25
    1402:	fc 01       	movw	r30, r24
    1404:	20 83       	st	Z, r18
    1406:	8b 81       	ldd	r24, Y+3	; 0x03
    1408:	9c 81       	ldd	r25, Y+4	; 0x04
    140a:	01 97       	sbiw	r24, 0x01	; 1
    140c:	9c 83       	std	Y+4, r25	; 0x04
    140e:	8b 83       	std	Y+3, r24	; 0x03
    1410:	8b 81       	ldd	r24, Y+3	; 0x03
    1412:	9c 81       	ldd	r25, Y+4	; 0x04
    1414:	20 e2       	ldi	r18, 0x20	; 32
    1416:	fc 01       	movw	r30, r24
    1418:	20 83       	st	Z, r18
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	9c 81       	ldd	r25, Y+4	; 0x04
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	9c 83       	std	Y+4, r25	; 0x04
    1422:	8b 83       	std	Y+3, r24	; 0x03
    1424:	8b 81       	ldd	r24, Y+3	; 0x03
    1426:	9c 81       	ldd	r25, Y+4	; 0x04
    1428:	21 e2       	ldi	r18, 0x21	; 33
    142a:	fc 01       	movw	r30, r24
    142c:	20 83       	st	Z, r18
    142e:	8b 81       	ldd	r24, Y+3	; 0x03
    1430:	9c 81       	ldd	r25, Y+4	; 0x04
    1432:	01 97       	sbiw	r24, 0x01	; 1
    1434:	9c 83       	std	Y+4, r25	; 0x04
    1436:	8b 83       	std	Y+3, r24	; 0x03
    1438:	8b 81       	ldd	r24, Y+3	; 0x03
    143a:	9c 81       	ldd	r25, Y+4	; 0x04
    143c:	22 e2       	ldi	r18, 0x22	; 34
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	9c 83       	std	Y+4, r25	; 0x04
    144a:	8b 83       	std	Y+3, r24	; 0x03
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	9c 81       	ldd	r25, Y+4	; 0x04
    1450:	23 e2       	ldi	r18, 0x23	; 35
    1452:	fc 01       	movw	r30, r24
    1454:	20 83       	st	Z, r18
    1456:	8b 81       	ldd	r24, Y+3	; 0x03
    1458:	9c 81       	ldd	r25, Y+4	; 0x04
    145a:	01 97       	sbiw	r24, 0x01	; 1
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
    1460:	8f 81       	ldd	r24, Y+7	; 0x07
    1462:	98 85       	ldd	r25, Y+8	; 0x08
    1464:	9a 83       	std	Y+2, r25	; 0x02
    1466:	89 83       	std	Y+1, r24	; 0x01
    1468:	29 81       	ldd	r18, Y+1	; 0x01
    146a:	8b 81       	ldd	r24, Y+3	; 0x03
    146c:	9c 81       	ldd	r25, Y+4	; 0x04
    146e:	fc 01       	movw	r30, r24
    1470:	20 83       	st	Z, r18
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	9c 81       	ldd	r25, Y+4	; 0x04
    1476:	01 97       	sbiw	r24, 0x01	; 1
    1478:	9c 83       	std	Y+4, r25	; 0x04
    147a:	8b 83       	std	Y+3, r24	; 0x03
    147c:	89 81       	ldd	r24, Y+1	; 0x01
    147e:	9a 81       	ldd	r25, Y+2	; 0x02
    1480:	89 2f       	mov	r24, r25
    1482:	99 27       	eor	r25, r25
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	29 81       	ldd	r18, Y+1	; 0x01
    148a:	8b 81       	ldd	r24, Y+3	; 0x03
    148c:	9c 81       	ldd	r25, Y+4	; 0x04
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
    1492:	8b 81       	ldd	r24, Y+3	; 0x03
    1494:	9c 81       	ldd	r25, Y+4	; 0x04
    1496:	01 97       	sbiw	r24, 0x01	; 1
    1498:	9c 83       	std	Y+4, r25	; 0x04
    149a:	8b 83       	std	Y+3, r24	; 0x03
    149c:	8b 81       	ldd	r24, Y+3	; 0x03
    149e:	9c 81       	ldd	r25, Y+4	; 0x04
    14a0:	26 e2       	ldi	r18, 0x26	; 38
    14a2:	fc 01       	movw	r30, r24
    14a4:	20 83       	st	Z, r18
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	9c 81       	ldd	r25, Y+4	; 0x04
    14aa:	01 97       	sbiw	r24, 0x01	; 1
    14ac:	9c 83       	std	Y+4, r25	; 0x04
    14ae:	8b 83       	std	Y+3, r24	; 0x03
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	9c 81       	ldd	r25, Y+4	; 0x04
    14b4:	27 e2       	ldi	r18, 0x27	; 39
    14b6:	fc 01       	movw	r30, r24
    14b8:	20 83       	st	Z, r18
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	9c 81       	ldd	r25, Y+4	; 0x04
    14be:	01 97       	sbiw	r24, 0x01	; 1
    14c0:	9c 83       	std	Y+4, r25	; 0x04
    14c2:	8b 83       	std	Y+3, r24	; 0x03
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	9c 81       	ldd	r25, Y+4	; 0x04
    14c8:	28 e2       	ldi	r18, 0x28	; 40
    14ca:	fc 01       	movw	r30, r24
    14cc:	20 83       	st	Z, r18
    14ce:	8b 81       	ldd	r24, Y+3	; 0x03
    14d0:	9c 81       	ldd	r25, Y+4	; 0x04
    14d2:	01 97       	sbiw	r24, 0x01	; 1
    14d4:	9c 83       	std	Y+4, r25	; 0x04
    14d6:	8b 83       	std	Y+3, r24	; 0x03
    14d8:	8b 81       	ldd	r24, Y+3	; 0x03
    14da:	9c 81       	ldd	r25, Y+4	; 0x04
    14dc:	29 e2       	ldi	r18, 0x29	; 41
    14de:	fc 01       	movw	r30, r24
    14e0:	20 83       	st	Z, r18
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	9c 81       	ldd	r25, Y+4	; 0x04
    14e6:	01 97       	sbiw	r24, 0x01	; 1
    14e8:	9c 83       	std	Y+4, r25	; 0x04
    14ea:	8b 83       	std	Y+3, r24	; 0x03
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	9c 81       	ldd	r25, Y+4	; 0x04
    14f0:	20 e3       	ldi	r18, 0x30	; 48
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 83       	st	Z, r18
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	01 97       	sbiw	r24, 0x01	; 1
    14fc:	9c 83       	std	Y+4, r25	; 0x04
    14fe:	8b 83       	std	Y+3, r24	; 0x03
    1500:	8b 81       	ldd	r24, Y+3	; 0x03
    1502:	9c 81       	ldd	r25, Y+4	; 0x04
    1504:	21 e3       	ldi	r18, 0x31	; 49
    1506:	fc 01       	movw	r30, r24
    1508:	20 83       	st	Z, r18
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	9c 81       	ldd	r25, Y+4	; 0x04
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9c 83       	std	Y+4, r25	; 0x04
    1512:	8b 83       	std	Y+3, r24	; 0x03
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	9c 81       	ldd	r25, Y+4	; 0x04
    1518:	28 96       	adiw	r28, 0x08	; 8
    151a:	0f b6       	in	r0, 0x3f	; 63
    151c:	f8 94       	cli
    151e:	de bf       	out	0x3e, r29	; 62
    1520:	0f be       	out	0x3f, r0	; 63
    1522:	cd bf       	out	0x3d, r28	; 61
    1524:	df 91       	pop	r29
    1526:	cf 91       	pop	r28
    1528:	08 95       	ret

0000152a <xPortStartScheduler>:
    152a:	cf 93       	push	r28
    152c:	df 93       	push	r29
    152e:	cd b7       	in	r28, 0x3d	; 61
    1530:	de b7       	in	r29, 0x3e	; 62
    1532:	0e 94 80 0b 	call	0x1700	; 0x1700 <prvSetupTimerInterrupt>
    1536:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    153a:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    153e:	cd 91       	ld	r28, X+
    1540:	cd bf       	out	0x3d, r28	; 61
    1542:	dd 91       	ld	r29, X+
    1544:	de bf       	out	0x3e, r29	; 62
    1546:	ff 91       	pop	r31
    1548:	ef 91       	pop	r30
    154a:	df 91       	pop	r29
    154c:	cf 91       	pop	r28
    154e:	bf 91       	pop	r27
    1550:	af 91       	pop	r26
    1552:	9f 91       	pop	r25
    1554:	8f 91       	pop	r24
    1556:	7f 91       	pop	r23
    1558:	6f 91       	pop	r22
    155a:	5f 91       	pop	r21
    155c:	4f 91       	pop	r20
    155e:	3f 91       	pop	r19
    1560:	2f 91       	pop	r18
    1562:	1f 91       	pop	r17
    1564:	0f 91       	pop	r16
    1566:	ff 90       	pop	r15
    1568:	ef 90       	pop	r14
    156a:	df 90       	pop	r13
    156c:	cf 90       	pop	r12
    156e:	bf 90       	pop	r11
    1570:	af 90       	pop	r10
    1572:	9f 90       	pop	r9
    1574:	8f 90       	pop	r8
    1576:	7f 90       	pop	r7
    1578:	6f 90       	pop	r6
    157a:	5f 90       	pop	r5
    157c:	4f 90       	pop	r4
    157e:	3f 90       	pop	r3
    1580:	2f 90       	pop	r2
    1582:	1f 90       	pop	r1
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	0f 90       	pop	r0
    158a:	08 95       	ret
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	df 91       	pop	r29
    1590:	cf 91       	pop	r28
    1592:	08 95       	ret

00001594 <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    1594:	0f 92       	push	r0
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	0f 92       	push	r0
    159c:	1f 92       	push	r1
    159e:	11 24       	eor	r1, r1
    15a0:	2f 92       	push	r2
    15a2:	3f 92       	push	r3
    15a4:	4f 92       	push	r4
    15a6:	5f 92       	push	r5
    15a8:	6f 92       	push	r6
    15aa:	7f 92       	push	r7
    15ac:	8f 92       	push	r8
    15ae:	9f 92       	push	r9
    15b0:	af 92       	push	r10
    15b2:	bf 92       	push	r11
    15b4:	cf 92       	push	r12
    15b6:	df 92       	push	r13
    15b8:	ef 92       	push	r14
    15ba:	ff 92       	push	r15
    15bc:	0f 93       	push	r16
    15be:	1f 93       	push	r17
    15c0:	2f 93       	push	r18
    15c2:	3f 93       	push	r19
    15c4:	4f 93       	push	r20
    15c6:	5f 93       	push	r21
    15c8:	6f 93       	push	r22
    15ca:	7f 93       	push	r23
    15cc:	8f 93       	push	r24
    15ce:	9f 93       	push	r25
    15d0:	af 93       	push	r26
    15d2:	bf 93       	push	r27
    15d4:	cf 93       	push	r28
    15d6:	df 93       	push	r29
    15d8:	ef 93       	push	r30
    15da:	ff 93       	push	r31
    15dc:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    15e0:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    15e4:	0d b6       	in	r0, 0x3d	; 61
    15e6:	0d 92       	st	X+, r0
    15e8:	0e b6       	in	r0, 0x3e	; 62
    15ea:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    15ec:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    15f0:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    15f4:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    15f8:	cd 91       	ld	r28, X+
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	dd 91       	ld	r29, X+
    15fe:	de bf       	out	0x3e, r29	; 62
    1600:	ff 91       	pop	r31
    1602:	ef 91       	pop	r30
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	bf 91       	pop	r27
    160a:	af 91       	pop	r26
    160c:	9f 91       	pop	r25
    160e:	8f 91       	pop	r24
    1610:	7f 91       	pop	r23
    1612:	6f 91       	pop	r22
    1614:	5f 91       	pop	r21
    1616:	4f 91       	pop	r20
    1618:	3f 91       	pop	r19
    161a:	2f 91       	pop	r18
    161c:	1f 91       	pop	r17
    161e:	0f 91       	pop	r16
    1620:	ff 90       	pop	r15
    1622:	ef 90       	pop	r14
    1624:	df 90       	pop	r13
    1626:	cf 90       	pop	r12
    1628:	bf 90       	pop	r11
    162a:	af 90       	pop	r10
    162c:	9f 90       	pop	r9
    162e:	8f 90       	pop	r8
    1630:	7f 90       	pop	r7
    1632:	6f 90       	pop	r6
    1634:	5f 90       	pop	r5
    1636:	4f 90       	pop	r4
    1638:	3f 90       	pop	r3
    163a:	2f 90       	pop	r2
    163c:	1f 90       	pop	r1
    163e:	0f 90       	pop	r0
    1640:	0f be       	out	0x3f, r0	; 63
    1642:	0f 90       	pop	r0

	asm volatile ( "ret" );
    1644:	08 95       	ret

00001646 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1646:	0f 92       	push	r0
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	0f 92       	push	r0
    164e:	1f 92       	push	r1
    1650:	11 24       	eor	r1, r1
    1652:	2f 92       	push	r2
    1654:	3f 92       	push	r3
    1656:	4f 92       	push	r4
    1658:	5f 92       	push	r5
    165a:	6f 92       	push	r6
    165c:	7f 92       	push	r7
    165e:	8f 92       	push	r8
    1660:	9f 92       	push	r9
    1662:	af 92       	push	r10
    1664:	bf 92       	push	r11
    1666:	cf 92       	push	r12
    1668:	df 92       	push	r13
    166a:	ef 92       	push	r14
    166c:	ff 92       	push	r15
    166e:	0f 93       	push	r16
    1670:	1f 93       	push	r17
    1672:	2f 93       	push	r18
    1674:	3f 93       	push	r19
    1676:	4f 93       	push	r20
    1678:	5f 93       	push	r21
    167a:	6f 93       	push	r22
    167c:	7f 93       	push	r23
    167e:	8f 93       	push	r24
    1680:	9f 93       	push	r25
    1682:	af 93       	push	r26
    1684:	bf 93       	push	r27
    1686:	cf 93       	push	r28
    1688:	df 93       	push	r29
    168a:	ef 93       	push	r30
    168c:	ff 93       	push	r31
    168e:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    1692:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    1696:	0d b6       	in	r0, 0x3d	; 61
    1698:	0d 92       	st	X+, r0
    169a:	0e b6       	in	r0, 0x3e	; 62
    169c:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    169e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskIncrementTick>
    16a2:	88 23       	and	r24, r24
    16a4:	11 f0       	breq	.+4      	; 0x16aa <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    16a6:	0e 94 e8 17 	call	0x2fd0	; 0x2fd0 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    16aa:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    16ae:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    16b2:	cd 91       	ld	r28, X+
    16b4:	cd bf       	out	0x3d, r28	; 61
    16b6:	dd 91       	ld	r29, X+
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	ff 91       	pop	r31
    16bc:	ef 91       	pop	r30
    16be:	df 91       	pop	r29
    16c0:	cf 91       	pop	r28
    16c2:	bf 91       	pop	r27
    16c4:	af 91       	pop	r26
    16c6:	9f 91       	pop	r25
    16c8:	8f 91       	pop	r24
    16ca:	7f 91       	pop	r23
    16cc:	6f 91       	pop	r22
    16ce:	5f 91       	pop	r21
    16d0:	4f 91       	pop	r20
    16d2:	3f 91       	pop	r19
    16d4:	2f 91       	pop	r18
    16d6:	1f 91       	pop	r17
    16d8:	0f 91       	pop	r16
    16da:	ff 90       	pop	r15
    16dc:	ef 90       	pop	r14
    16de:	df 90       	pop	r13
    16e0:	cf 90       	pop	r12
    16e2:	bf 90       	pop	r11
    16e4:	af 90       	pop	r10
    16e6:	9f 90       	pop	r9
    16e8:	8f 90       	pop	r8
    16ea:	7f 90       	pop	r7
    16ec:	6f 90       	pop	r6
    16ee:	5f 90       	pop	r5
    16f0:	4f 90       	pop	r4
    16f2:	3f 90       	pop	r3
    16f4:	2f 90       	pop	r2
    16f6:	1f 90       	pop	r1
    16f8:	0f 90       	pop	r0
    16fa:	0f be       	out	0x3f, r0	; 63
    16fc:	0f 90       	pop	r0

	asm volatile ( "ret" );
    16fe:	08 95       	ret

00001700 <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    1700:	cf 93       	push	r28
    1702:	df 93       	push	r29
    1704:	00 d0       	rcall	.+0      	; 0x1706 <prvSetupTimerInterrupt+0x6>
    1706:	00 d0       	rcall	.+0      	; 0x1708 <prvSetupTimerInterrupt+0x8>
    1708:	00 d0       	rcall	.+0      	; 0x170a <prvSetupTimerInterrupt+0xa>
    170a:	cd b7       	in	r28, 0x3d	; 61
    170c:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    170e:	89 e9       	ldi	r24, 0x99	; 153
    1710:	99 e3       	ldi	r25, 0x39	; 57
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	89 83       	std	Y+1, r24	; 0x01
    1718:	9a 83       	std	Y+2, r25	; 0x02
    171a:	ab 83       	std	Y+3, r26	; 0x03
    171c:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    171e:	89 81       	ldd	r24, Y+1	; 0x01
    1720:	9a 81       	ldd	r25, Y+2	; 0x02
    1722:	ab 81       	ldd	r26, Y+3	; 0x03
    1724:	bc 81       	ldd	r27, Y+4	; 0x04
    1726:	68 94       	set
    1728:	15 f8       	bld	r1, 5
    172a:	b6 95       	lsr	r27
    172c:	a7 95       	ror	r26
    172e:	97 95       	ror	r25
    1730:	87 95       	ror	r24
    1732:	16 94       	lsr	r1
    1734:	d1 f7       	brne	.-12     	; 0x172a <prvSetupTimerInterrupt+0x2a>
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	ab 83       	std	Y+3, r26	; 0x03
    173c:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    173e:	89 81       	ldd	r24, Y+1	; 0x01
    1740:	9a 81       	ldd	r25, Y+2	; 0x02
    1742:	ab 81       	ldd	r26, Y+3	; 0x03
    1744:	bc 81       	ldd	r27, Y+4	; 0x04
    1746:	01 97       	sbiw	r24, 0x01	; 1
    1748:	a1 09       	sbc	r26, r1
    174a:	b1 09       	sbc	r27, r1
    174c:	89 83       	std	Y+1, r24	; 0x01
    174e:	9a 83       	std	Y+2, r25	; 0x02
    1750:	ab 83       	std	Y+3, r26	; 0x03
    1752:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1754:	89 81       	ldd	r24, Y+1	; 0x01
    1756:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1758:	89 81       	ldd	r24, Y+1	; 0x01
    175a:	9a 81       	ldd	r25, Y+2	; 0x02
    175c:	ab 81       	ldd	r26, Y+3	; 0x03
    175e:	bc 81       	ldd	r27, Y+4	; 0x04
    1760:	89 2f       	mov	r24, r25
    1762:	9a 2f       	mov	r25, r26
    1764:	ab 2f       	mov	r26, r27
    1766:	bb 27       	eor	r27, r27
    1768:	89 83       	std	Y+1, r24	; 0x01
    176a:	9a 83       	std	Y+2, r25	; 0x02
    176c:	ab 83       	std	Y+3, r26	; 0x03
    176e:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    1770:	89 81       	ldd	r24, Y+1	; 0x01
    1772:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    1774:	89 e8       	ldi	r24, 0x89	; 137
    1776:	90 e0       	ldi	r25, 0x00	; 0
    1778:	2e 81       	ldd	r18, Y+6	; 0x06
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    177e:	88 e8       	ldi	r24, 0x88	; 136
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	2d 81       	ldd	r18, Y+5	; 0x05
    1784:	fc 01       	movw	r30, r24
    1786:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1788:	8b e0       	ldi	r24, 0x0B	; 11
    178a:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    178c:	81 e8       	ldi	r24, 0x81	; 129
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	2d 81       	ldd	r18, Y+5	; 0x05
    1792:	fc 01       	movw	r30, r24
    1794:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1796:	8f e6       	ldi	r24, 0x6F	; 111
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	fc 01       	movw	r30, r24
    179c:	80 81       	ld	r24, Z
    179e:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    17a0:	8d 81       	ldd	r24, Y+5	; 0x05
    17a2:	82 60       	ori	r24, 0x02	; 2
    17a4:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    17a6:	8f e6       	ldi	r24, 0x6F	; 111
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	2d 81       	ldd	r18, Y+5	; 0x05
    17ac:	fc 01       	movw	r30, r24
    17ae:	20 83       	st	Z, r18
}
    17b0:	26 96       	adiw	r28, 0x06	; 6
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	08 95       	ret

000017c2 <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    17c2:	0e 94 23 0b 	call	0x1646	; 0x1646 <vPortYieldFromTick>
		asm volatile ( "reti" );
    17c6:	18 95       	reti

000017c8 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    17c8:	cf 93       	push	r28
    17ca:	df 93       	push	r29
    17cc:	00 d0       	rcall	.+0      	; 0x17ce <pvPortMalloc+0x6>
    17ce:	00 d0       	rcall	.+0      	; 0x17d0 <pvPortMalloc+0x8>
    17d0:	cd b7       	in	r28, 0x3d	; 61
    17d2:	de b7       	in	r29, 0x3e	; 62
    17d4:	9c 83       	std	Y+4, r25	; 0x04
    17d6:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    17d8:	1a 82       	std	Y+2, r1	; 0x02
    17da:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    17dc:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    17e0:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <pucAlignedHeap.1965>
    17e4:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <pucAlignedHeap.1965+0x1>
    17e8:	89 2b       	or	r24, r25
    17ea:	31 f4       	brne	.+12     	; 0x17f8 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    17ec:	8b e8       	ldi	r24, 0x8B	; 139
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <pucAlignedHeap.1965+0x1>
    17f4:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    17f8:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    17fc:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    1800:	8b 81       	ldd	r24, Y+3	; 0x03
    1802:	9c 81       	ldd	r25, Y+4	; 0x04
    1804:	82 0f       	add	r24, r18
    1806:	93 1f       	adc	r25, r19
    1808:	87 3e       	cpi	r24, 0xE7	; 231
    180a:	93 40       	sbci	r25, 0x03	; 3
    180c:	38 f5       	brcc	.+78     	; 0x185c <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    180e:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    1812:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    1816:	8b 81       	ldd	r24, Y+3	; 0x03
    1818:	9c 81       	ldd	r25, Y+4	; 0x04
    181a:	28 0f       	add	r18, r24
    181c:	39 1f       	adc	r19, r25
    181e:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNextFreeByte>
    1822:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1826:	82 17       	cp	r24, r18
    1828:	93 07       	cpc	r25, r19
    182a:	c0 f4       	brcc	.+48     	; 0x185c <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    182c:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <pucAlignedHeap.1965>
    1830:	30 91 75 05 	lds	r19, 0x0575	; 0x800575 <pucAlignedHeap.1965+0x1>
    1834:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNextFreeByte>
    1838:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    183c:	82 0f       	add	r24, r18
    183e:	93 1f       	adc	r25, r19
    1840:	9a 83       	std	Y+2, r25	; 0x02
    1842:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    1844:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    1848:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    184c:	8b 81       	ldd	r24, Y+3	; 0x03
    184e:	9c 81       	ldd	r25, Y+4	; 0x04
    1850:	82 0f       	add	r24, r18
    1852:	93 1f       	adc	r25, r19
    1854:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <xNextFreeByte+0x1>
    1858:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    185c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    1860:	89 81       	ldd	r24, Y+1	; 0x01
    1862:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <vPortFree+0x6>
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	9a 83       	std	Y+2, r25	; 0x02
    187e:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    1880:	0f 90       	pop	r0
    1882:	0f 90       	pop	r0
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	08 95       	ret

0000188a <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    188a:	8f 92       	push	r8
    188c:	9f 92       	push	r9
    188e:	af 92       	push	r10
    1890:	bf 92       	push	r11
    1892:	cf 92       	push	r12
    1894:	df 92       	push	r13
    1896:	ef 92       	push	r14
    1898:	0f 93       	push	r16
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	65 97       	sbiw	r28, 0x15	; 21
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	8c 83       	std	Y+4, r24	; 0x04
    18b2:	4d 83       	std	Y+5, r20	; 0x05
    18b4:	5e 83       	std	Y+6, r21	; 0x06
    18b6:	6f 83       	std	Y+7, r22	; 0x07
    18b8:	78 87       	std	Y+8, r23	; 0x08
    18ba:	29 87       	std	Y+9, r18	; 0x09
    18bc:	0a 87       	std	Y+10, r16	; 0x0a
    18be:	eb 86       	std	Y+11, r14	; 0x0b
    18c0:	dd 86       	std	Y+13, r13	; 0x0d
    18c2:	cc 86       	std	Y+12, r12	; 0x0c
    18c4:	bf 86       	std	Y+15, r11	; 0x0f
    18c6:	ae 86       	std	Y+14, r10	; 0x0e
    18c8:	99 8a       	std	Y+17, r9	; 0x11
    18ca:	88 8a       	std	Y+16, r8	; 0x10
    18cc:	88 e0       	ldi	r24, 0x08	; 8
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	0e 94 42 1c 	call	0x3884	; 0x3884 <malloc>
    18d4:	9a 83       	std	Y+2, r25	; 0x02
    18d6:	89 83       	std	Y+1, r24	; 0x01
    18d8:	8c 81       	ldd	r24, Y+4	; 0x04
    18da:	88 2f       	mov	r24, r24
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	88 0f       	add	r24, r24
    18e0:	99 1f       	adc	r25, r25
    18e2:	8a 58       	subi	r24, 0x8A	; 138
    18e4:	9a 4f       	sbci	r25, 0xFA	; 250
    18e6:	29 81       	ldd	r18, Y+1	; 0x01
    18e8:	3a 81       	ldd	r19, Y+2	; 0x02
    18ea:	fc 01       	movw	r30, r24
    18ec:	31 83       	std	Z+1, r19	; 0x01
    18ee:	20 83       	st	Z, r18
    18f0:	8c 81       	ldd	r24, Y+4	; 0x04
    18f2:	88 2f       	mov	r24, r24
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	88 0f       	add	r24, r24
    18f8:	99 1f       	adc	r25, r25
    18fa:	88 5d       	subi	r24, 0xD8	; 216
    18fc:	9e 4f       	sbci	r25, 0xFE	; 254
    18fe:	fc 01       	movw	r30, r24
    1900:	20 81       	ld	r18, Z
    1902:	31 81       	ldd	r19, Z+1	; 0x01
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	9a 81       	ldd	r25, Y+2	; 0x02
    1908:	fc 01       	movw	r30, r24
    190a:	31 83       	std	Z+1, r19	; 0x01
    190c:	20 83       	st	Z, r18
    190e:	89 81       	ldd	r24, Y+1	; 0x01
    1910:	9a 81       	ldd	r25, Y+2	; 0x02
    1912:	2e 85       	ldd	r18, Y+14	; 0x0e
    1914:	3f 85       	ldd	r19, Y+15	; 0x0f
    1916:	fc 01       	movw	r30, r24
    1918:	33 83       	std	Z+3, r19	; 0x03
    191a:	22 83       	std	Z+2, r18	; 0x02
    191c:	89 81       	ldd	r24, Y+1	; 0x01
    191e:	9a 81       	ldd	r25, Y+2	; 0x02
    1920:	2c 85       	ldd	r18, Y+12	; 0x0c
    1922:	3d 85       	ldd	r19, Y+13	; 0x0d
    1924:	fc 01       	movw	r30, r24
    1926:	35 83       	std	Z+5, r19	; 0x05
    1928:	24 83       	std	Z+4, r18	; 0x04
    192a:	89 81       	ldd	r24, Y+1	; 0x01
    192c:	9a 81       	ldd	r25, Y+2	; 0x02
    192e:	28 89       	ldd	r18, Y+16	; 0x10
    1930:	39 89       	ldd	r19, Y+17	; 0x11
    1932:	fc 01       	movw	r30, r24
    1934:	37 83       	std	Z+7, r19	; 0x07
    1936:	26 83       	std	Z+6, r18	; 0x06
    1938:	8f e5       	ldi	r24, 0x5F	; 95
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	fc 01       	movw	r30, r24
    193e:	80 81       	ld	r24, Z
    1940:	8b 83       	std	Y+3, r24	; 0x03
    1942:	f8 94       	cli
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	9a 81       	ldd	r25, Y+2	; 0x02
    1948:	fc 01       	movw	r30, r24
    194a:	80 81       	ld	r24, Z
    194c:	91 81       	ldd	r25, Z+1	; 0x01
    194e:	06 97       	sbiw	r24, 0x06	; 6
    1950:	29 81       	ldd	r18, Y+1	; 0x01
    1952:	3a 81       	ldd	r19, Y+2	; 0x02
    1954:	f9 01       	movw	r30, r18
    1956:	20 81       	ld	r18, Z
    1958:	31 81       	ldd	r19, Z+1	; 0x01
    195a:	26 50       	subi	r18, 0x06	; 6
    195c:	31 09       	sbc	r19, r1
    195e:	f9 01       	movw	r30, r18
    1960:	20 81       	ld	r18, Z
    1962:	22 60       	ori	r18, 0x02	; 2
    1964:	fc 01       	movw	r30, r24
    1966:	20 83       	st	Z, r18
    1968:	89 81       	ldd	r24, Y+1	; 0x01
    196a:	9a 81       	ldd	r25, Y+2	; 0x02
    196c:	fc 01       	movw	r30, r24
    196e:	80 81       	ld	r24, Z
    1970:	91 81       	ldd	r25, Z+1	; 0x01
    1972:	8c 01       	movw	r16, r24
    1974:	02 50       	subi	r16, 0x02	; 2
    1976:	11 09       	sbc	r17, r1
    1978:	8d 81       	ldd	r24, Y+5	; 0x05
    197a:	9e 81       	ldd	r25, Y+6	; 0x06
    197c:	af 81       	ldd	r26, Y+7	; 0x07
    197e:	b8 85       	ldd	r27, Y+8	; 0x08
    1980:	88 0f       	add	r24, r24
    1982:	99 1f       	adc	r25, r25
    1984:	aa 1f       	adc	r26, r26
    1986:	bb 1f       	adc	r27, r27
    1988:	88 0f       	add	r24, r24
    198a:	99 1f       	adc	r25, r25
    198c:	aa 1f       	adc	r26, r26
    198e:	bb 1f       	adc	r27, r27
    1990:	88 0f       	add	r24, r24
    1992:	99 1f       	adc	r25, r25
    1994:	aa 1f       	adc	r26, r26
    1996:	bb 1f       	adc	r27, r27
    1998:	9c 01       	movw	r18, r24
    199a:	ad 01       	movw	r20, r26
    199c:	80 e0       	ldi	r24, 0x00	; 0
    199e:	90 e0       	ldi	r25, 0x00	; 0
    19a0:	a1 ee       	ldi	r26, 0xE1	; 225
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	bc 01       	movw	r22, r24
    19a6:	cd 01       	movw	r24, r26
    19a8:	0e 94 06 1c 	call	0x380c	; 0x380c <__udivmodsi4>
    19ac:	da 01       	movw	r26, r20
    19ae:	c9 01       	movw	r24, r18
    19b0:	81 50       	subi	r24, 0x01	; 1
    19b2:	f8 01       	movw	r30, r16
    19b4:	80 83       	st	Z, r24
    19b6:	89 81       	ldd	r24, Y+1	; 0x01
    19b8:	9a 81       	ldd	r25, Y+2	; 0x02
    19ba:	fc 01       	movw	r30, r24
    19bc:	80 81       	ld	r24, Z
    19be:	91 81       	ldd	r25, Z+1	; 0x01
    19c0:	05 97       	sbiw	r24, 0x05	; 5
    19c2:	28 e9       	ldi	r18, 0x98	; 152
    19c4:	fc 01       	movw	r30, r24
    19c6:	20 83       	st	Z, r18
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	9a 81       	ldd	r25, Y+2	; 0x02
    19cc:	fc 01       	movw	r30, r24
    19ce:	80 81       	ld	r24, Z
    19d0:	91 81       	ldd	r25, Z+1	; 0x01
    19d2:	04 97       	sbiw	r24, 0x04	; 4
    19d4:	26 e0       	ldi	r18, 0x06	; 6
    19d6:	fc 01       	movw	r30, r24
    19d8:	20 83       	st	Z, r18
    19da:	8f e5       	ldi	r24, 0x5F	; 95
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	2b 81       	ldd	r18, Y+3	; 0x03
    19e0:	fc 01       	movw	r30, r24
    19e2:	20 83       	st	Z, r18
    19e4:	89 81       	ldd	r24, Y+1	; 0x01
    19e6:	9a 81       	ldd	r25, Y+2	; 0x02
    19e8:	65 96       	adiw	r28, 0x15	; 21
    19ea:	0f b6       	in	r0, 0x3f	; 63
    19ec:	f8 94       	cli
    19ee:	de bf       	out	0x3e, r29	; 62
    19f0:	0f be       	out	0x3f, r0	; 63
    19f2:	cd bf       	out	0x3d, r28	; 61
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	1f 91       	pop	r17
    19fa:	0f 91       	pop	r16
    19fc:	ef 90       	pop	r14
    19fe:	df 90       	pop	r13
    1a00:	cf 90       	pop	r12
    1a02:	bf 90       	pop	r11
    1a04:	af 90       	pop	r10
    1a06:	9f 90       	pop	r9
    1a08:	8f 90       	pop	r8
    1a0a:	08 95       	ret

00001a0c <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    1a0c:	1f 92       	push	r1
    1a0e:	0f 92       	push	r0
    1a10:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a14:	0f 92       	push	r0
    1a16:	11 24       	eor	r1, r1
    1a18:	2f 93       	push	r18
    1a1a:	3f 93       	push	r19
    1a1c:	4f 93       	push	r20
    1a1e:	5f 93       	push	r21
    1a20:	6f 93       	push	r22
    1a22:	7f 93       	push	r23
    1a24:	8f 93       	push	r24
    1a26:	9f 93       	push	r25
    1a28:	af 93       	push	r26
    1a2a:	bf 93       	push	r27
    1a2c:	ef 93       	push	r30
    1a2e:	ff 93       	push	r31
    1a30:	cf 93       	push	r28
    1a32:	df 93       	push	r29
    1a34:	1f 92       	push	r1
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1a3a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1a3e:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1a42:	89 2b       	or	r24, r25
    1a44:	31 f1       	breq	.+76     	; 0x1a92 <__vector_20+0x86>
		item = UDR0;
    1a46:	86 ec       	ldi	r24, 0xC6	; 198
    1a48:	90 e0       	ldi	r25, 0x00	; 0
    1a4a:	fc 01       	movw	r30, r24
    1a4c:	80 81       	ld	r24, Z
    1a4e:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    1a50:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1a54:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1a58:	fc 01       	movw	r30, r24
    1a5a:	84 81       	ldd	r24, Z+4	; 0x04
    1a5c:	95 81       	ldd	r25, Z+5	; 0x05
    1a5e:	69 81       	ldd	r22, Y+1	; 0x01
    1a60:	0e 94 47 07 	call	0xe8e	; 0xe8e <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    1a64:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1a68:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	86 81       	ldd	r24, Z+6	; 0x06
    1a70:	97 81       	ldd	r25, Z+7	; 0x07
    1a72:	89 2b       	or	r24, r25
    1a74:	71 f0       	breq	.+28     	; 0x1a92 <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1a76:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1a7a:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1a7e:	fc 01       	movw	r30, r24
    1a80:	26 81       	ldd	r18, Z+6	; 0x06
    1a82:	37 81       	ldd	r19, Z+7	; 0x07
    1a84:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1a88:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1a8c:	69 81       	ldd	r22, Y+1	; 0x01
    1a8e:	f9 01       	movw	r30, r18
    1a90:	09 95       	icall
		}
	}
}
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	ff 91       	pop	r31
    1a9a:	ef 91       	pop	r30
    1a9c:	bf 91       	pop	r27
    1a9e:	af 91       	pop	r26
    1aa0:	9f 91       	pop	r25
    1aa2:	8f 91       	pop	r24
    1aa4:	7f 91       	pop	r23
    1aa6:	6f 91       	pop	r22
    1aa8:	5f 91       	pop	r21
    1aaa:	4f 91       	pop	r20
    1aac:	3f 91       	pop	r19
    1aae:	2f 91       	pop	r18
    1ab0:	0f 90       	pop	r0
    1ab2:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ab6:	0f 90       	pop	r0
    1ab8:	1f 90       	pop	r1
    1aba:	18 95       	reti

00001abc <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1abc:	1f 92       	push	r1
    1abe:	0f 92       	push	r0
    1ac0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ac4:	0f 92       	push	r0
    1ac6:	11 24       	eor	r1, r1
    1ac8:	2f 93       	push	r18
    1aca:	3f 93       	push	r19
    1acc:	4f 93       	push	r20
    1ace:	5f 93       	push	r21
    1ad0:	6f 93       	push	r22
    1ad2:	7f 93       	push	r23
    1ad4:	8f 93       	push	r24
    1ad6:	9f 93       	push	r25
    1ad8:	af 93       	push	r26
    1ada:	bf 93       	push	r27
    1adc:	ef 93       	push	r30
    1ade:	ff 93       	push	r31
    1ae0:	cf 93       	push	r28
    1ae2:	df 93       	push	r29
    1ae4:	1f 92       	push	r1
    1ae6:	cd b7       	in	r28, 0x3d	; 61
    1ae8:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1aea:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1aee:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1af2:	89 2b       	or	r24, r25
    1af4:	f9 f0       	breq	.+62     	; 0x1b34 <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    1af6:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1afa:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1afe:	fc 01       	movw	r30, r24
    1b00:	82 81       	ldd	r24, Z+2	; 0x02
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	9e 01       	movw	r18, r28
    1b06:	2f 5f       	subi	r18, 0xFF	; 255
    1b08:	3f 4f       	sbci	r19, 0xFF	; 255
    1b0a:	b9 01       	movw	r22, r18
    1b0c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <buffer_get_item>
    1b10:	88 23       	and	r24, r24
    1b12:	31 f4       	brne	.+12     	; 0x1b20 <__vector_21+0x64>
			UDR0 = item;
    1b14:	86 ec       	ldi	r24, 0xC6	; 198
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	29 81       	ldd	r18, Y+1	; 0x01
    1b1a:	fc 01       	movw	r30, r24
    1b1c:	20 83       	st	Z, r18
    1b1e:	13 c0       	rjmp	.+38     	; 0x1b46 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    1b20:	81 ec       	ldi	r24, 0xC1	; 193
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	21 ec       	ldi	r18, 0xC1	; 193
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	f9 01       	movw	r30, r18
    1b2a:	20 81       	ld	r18, Z
    1b2c:	2f 7d       	andi	r18, 0xDF	; 223
    1b2e:	fc 01       	movw	r30, r24
    1b30:	20 83       	st	Z, r18
    1b32:	09 c0       	rjmp	.+18     	; 0x1b46 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1b34:	81 ec       	ldi	r24, 0xC1	; 193
    1b36:	90 e0       	ldi	r25, 0x00	; 0
    1b38:	21 ec       	ldi	r18, 0xC1	; 193
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	f9 01       	movw	r30, r18
    1b3e:	20 81       	ld	r18, Z
    1b40:	2f 7d       	andi	r18, 0xDF	; 223
    1b42:	fc 01       	movw	r30, r24
    1b44:	20 83       	st	Z, r18
	}
}
    1b46:	0f 90       	pop	r0
    1b48:	df 91       	pop	r29
    1b4a:	cf 91       	pop	r28
    1b4c:	ff 91       	pop	r31
    1b4e:	ef 91       	pop	r30
    1b50:	bf 91       	pop	r27
    1b52:	af 91       	pop	r26
    1b54:	9f 91       	pop	r25
    1b56:	8f 91       	pop	r24
    1b58:	7f 91       	pop	r23
    1b5a:	6f 91       	pop	r22
    1b5c:	5f 91       	pop	r21
    1b5e:	4f 91       	pop	r20
    1b60:	3f 91       	pop	r19
    1b62:	2f 91       	pop	r18
    1b64:	0f 90       	pop	r0
    1b66:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b6a:	0f 90       	pop	r0
    1b6c:	1f 90       	pop	r1
    1b6e:	18 95       	reti

00001b70 <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1b70:	1f 92       	push	r1
    1b72:	0f 92       	push	r0
    1b74:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b78:	0f 92       	push	r0
    1b7a:	11 24       	eor	r1, r1
    1b7c:	2f 93       	push	r18
    1b7e:	3f 93       	push	r19
    1b80:	4f 93       	push	r20
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
    1b94:	cf 93       	push	r28
    1b96:	df 93       	push	r29
    1b98:	1f 92       	push	r1
    1b9a:	cd b7       	in	r28, 0x3d	; 61
    1b9c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1b9e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1ba2:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1ba6:	89 2b       	or	r24, r25
    1ba8:	31 f1       	breq	.+76     	; 0x1bf6 <__vector_28+0x86>
		item = UDR1;
    1baa:	8e ec       	ldi	r24, 0xCE	; 206
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	fc 01       	movw	r30, r24
    1bb0:	80 81       	ld	r24, Z
    1bb2:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1bb4:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1bb8:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1bbc:	fc 01       	movw	r30, r24
    1bbe:	84 81       	ldd	r24, Z+4	; 0x04
    1bc0:	95 81       	ldd	r25, Z+5	; 0x05
    1bc2:	69 81       	ldd	r22, Y+1	; 0x01
    1bc4:	0e 94 47 07 	call	0xe8e	; 0xe8e <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1bc8:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1bcc:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1bd0:	fc 01       	movw	r30, r24
    1bd2:	86 81       	ldd	r24, Z+6	; 0x06
    1bd4:	97 81       	ldd	r25, Z+7	; 0x07
    1bd6:	89 2b       	or	r24, r25
    1bd8:	71 f0       	breq	.+28     	; 0x1bf6 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1bda:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1bde:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1be2:	fc 01       	movw	r30, r24
    1be4:	26 81       	ldd	r18, Z+6	; 0x06
    1be6:	37 81       	ldd	r19, Z+7	; 0x07
    1be8:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1bec:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1bf0:	69 81       	ldd	r22, Y+1	; 0x01
    1bf2:	f9 01       	movw	r30, r18
    1bf4:	09 95       	icall
		}
	}
}
    1bf6:	0f 90       	pop	r0
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	ff 91       	pop	r31
    1bfe:	ef 91       	pop	r30
    1c00:	bf 91       	pop	r27
    1c02:	af 91       	pop	r26
    1c04:	9f 91       	pop	r25
    1c06:	8f 91       	pop	r24
    1c08:	7f 91       	pop	r23
    1c0a:	6f 91       	pop	r22
    1c0c:	5f 91       	pop	r21
    1c0e:	4f 91       	pop	r20
    1c10:	3f 91       	pop	r19
    1c12:	2f 91       	pop	r18
    1c14:	0f 90       	pop	r0
    1c16:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c1a:	0f 90       	pop	r0
    1c1c:	1f 90       	pop	r1
    1c1e:	18 95       	reti

00001c20 <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1c20:	1f 92       	push	r1
    1c22:	0f 92       	push	r0
    1c24:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1c28:	0f 92       	push	r0
    1c2a:	11 24       	eor	r1, r1
    1c2c:	2f 93       	push	r18
    1c2e:	3f 93       	push	r19
    1c30:	4f 93       	push	r20
    1c32:	5f 93       	push	r21
    1c34:	6f 93       	push	r22
    1c36:	7f 93       	push	r23
    1c38:	8f 93       	push	r24
    1c3a:	9f 93       	push	r25
    1c3c:	af 93       	push	r26
    1c3e:	bf 93       	push	r27
    1c40:	ef 93       	push	r30
    1c42:	ff 93       	push	r31
    1c44:	cf 93       	push	r28
    1c46:	df 93       	push	r29
    1c48:	1f 92       	push	r1
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1c4e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1c52:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1c56:	89 2b       	or	r24, r25
    1c58:	f9 f0       	breq	.+62     	; 0x1c98 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1c5a:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1c5e:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1c62:	fc 01       	movw	r30, r24
    1c64:	82 81       	ldd	r24, Z+2	; 0x02
    1c66:	93 81       	ldd	r25, Z+3	; 0x03
    1c68:	9e 01       	movw	r18, r28
    1c6a:	2f 5f       	subi	r18, 0xFF	; 255
    1c6c:	3f 4f       	sbci	r19, 0xFF	; 255
    1c6e:	b9 01       	movw	r22, r18
    1c70:	0e 94 ff 06 	call	0xdfe	; 0xdfe <buffer_get_item>
    1c74:	88 23       	and	r24, r24
    1c76:	31 f4       	brne	.+12     	; 0x1c84 <__vector_29+0x64>
			UDR1 = item;
    1c78:	8e ec       	ldi	r24, 0xCE	; 206
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	29 81       	ldd	r18, Y+1	; 0x01
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
    1c82:	13 c0       	rjmp	.+38     	; 0x1caa <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1c84:	89 ec       	ldi	r24, 0xC9	; 201
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	29 ec       	ldi	r18, 0xC9	; 201
    1c8a:	30 e0       	ldi	r19, 0x00	; 0
    1c8c:	f9 01       	movw	r30, r18
    1c8e:	20 81       	ld	r18, Z
    1c90:	2f 7d       	andi	r18, 0xDF	; 223
    1c92:	fc 01       	movw	r30, r24
    1c94:	20 83       	st	Z, r18
    1c96:	09 c0       	rjmp	.+18     	; 0x1caa <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1c98:	89 ec       	ldi	r24, 0xC9	; 201
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	29 ec       	ldi	r18, 0xC9	; 201
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	f9 01       	movw	r30, r18
    1ca2:	20 81       	ld	r18, Z
    1ca4:	2f 7d       	andi	r18, 0xDF	; 223
    1ca6:	fc 01       	movw	r30, r24
    1ca8:	20 83       	st	Z, r18
	}
}
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	ff 91       	pop	r31
    1cb2:	ef 91       	pop	r30
    1cb4:	bf 91       	pop	r27
    1cb6:	af 91       	pop	r26
    1cb8:	9f 91       	pop	r25
    1cba:	8f 91       	pop	r24
    1cbc:	7f 91       	pop	r23
    1cbe:	6f 91       	pop	r22
    1cc0:	5f 91       	pop	r21
    1cc2:	4f 91       	pop	r20
    1cc4:	3f 91       	pop	r19
    1cc6:	2f 91       	pop	r18
    1cc8:	0f 90       	pop	r0
    1cca:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1cce:	0f 90       	pop	r0
    1cd0:	1f 90       	pop	r1
    1cd2:	18 95       	reti

00001cd4 <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	00 d0       	rcall	.+0      	; 0x1cda <xQueueGenericReset+0x6>
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <xQueueGenericReset+0x8>
    1cdc:	1f 92       	push	r1
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	9c 83       	std	Y+4, r25	; 0x04
    1ce4:	8b 83       	std	Y+3, r24	; 0x03
    1ce6:	6d 83       	std	Y+5, r22	; 0x05
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	9c 81       	ldd	r25, Y+4	; 0x04
    1cec:	9a 83       	std	Y+2, r25	; 0x02
    1cee:	89 83       	std	Y+1, r24	; 0x01
    1cf0:	0f b6       	in	r0, 0x3f	; 63
    1cf2:	f8 94       	cli
    1cf4:	0f 92       	push	r0
    1cf6:	89 81       	ldd	r24, Y+1	; 0x01
    1cf8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	80 81       	ld	r24, Z
    1cfe:	91 81       	ldd	r25, Z+1	; 0x01
    1d00:	29 81       	ldd	r18, Y+1	; 0x01
    1d02:	3a 81       	ldd	r19, Y+2	; 0x02
    1d04:	f9 01       	movw	r30, r18
    1d06:	23 8d       	ldd	r18, Z+27	; 0x1b
    1d08:	42 2f       	mov	r20, r18
    1d0a:	50 e0       	ldi	r21, 0x00	; 0
    1d0c:	29 81       	ldd	r18, Y+1	; 0x01
    1d0e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d10:	f9 01       	movw	r30, r18
    1d12:	24 8d       	ldd	r18, Z+28	; 0x1c
    1d14:	22 2f       	mov	r18, r18
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	42 9f       	mul	r20, r18
    1d1a:	b0 01       	movw	r22, r0
    1d1c:	43 9f       	mul	r20, r19
    1d1e:	70 0d       	add	r23, r0
    1d20:	52 9f       	mul	r21, r18
    1d22:	70 0d       	add	r23, r0
    1d24:	11 24       	eor	r1, r1
    1d26:	9b 01       	movw	r18, r22
    1d28:	28 0f       	add	r18, r24
    1d2a:	39 1f       	adc	r19, r25
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d30:	fc 01       	movw	r30, r24
    1d32:	33 83       	std	Z+3, r19	; 0x03
    1d34:	22 83       	std	Z+2, r18	; 0x02
    1d36:	89 81       	ldd	r24, Y+1	; 0x01
    1d38:	9a 81       	ldd	r25, Y+2	; 0x02
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	12 8e       	std	Z+26, r1	; 0x1a
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	9a 81       	ldd	r25, Y+2	; 0x02
    1d42:	fc 01       	movw	r30, r24
    1d44:	20 81       	ld	r18, Z
    1d46:	31 81       	ldd	r19, Z+1	; 0x01
    1d48:	89 81       	ldd	r24, Y+1	; 0x01
    1d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d4c:	fc 01       	movw	r30, r24
    1d4e:	35 83       	std	Z+5, r19	; 0x05
    1d50:	24 83       	std	Z+4, r18	; 0x04
    1d52:	89 81       	ldd	r24, Y+1	; 0x01
    1d54:	9a 81       	ldd	r25, Y+2	; 0x02
    1d56:	fc 01       	movw	r30, r24
    1d58:	80 81       	ld	r24, Z
    1d5a:	91 81       	ldd	r25, Z+1	; 0x01
    1d5c:	29 81       	ldd	r18, Y+1	; 0x01
    1d5e:	3a 81       	ldd	r19, Y+2	; 0x02
    1d60:	f9 01       	movw	r30, r18
    1d62:	23 8d       	ldd	r18, Z+27	; 0x1b
    1d64:	22 2f       	mov	r18, r18
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	a9 01       	movw	r20, r18
    1d6a:	41 50       	subi	r20, 0x01	; 1
    1d6c:	51 09       	sbc	r21, r1
    1d6e:	29 81       	ldd	r18, Y+1	; 0x01
    1d70:	3a 81       	ldd	r19, Y+2	; 0x02
    1d72:	f9 01       	movw	r30, r18
    1d74:	24 8d       	ldd	r18, Z+28	; 0x1c
    1d76:	22 2f       	mov	r18, r18
    1d78:	30 e0       	ldi	r19, 0x00	; 0
    1d7a:	42 9f       	mul	r20, r18
    1d7c:	b0 01       	movw	r22, r0
    1d7e:	43 9f       	mul	r20, r19
    1d80:	70 0d       	add	r23, r0
    1d82:	52 9f       	mul	r21, r18
    1d84:	70 0d       	add	r23, r0
    1d86:	11 24       	eor	r1, r1
    1d88:	9b 01       	movw	r18, r22
    1d8a:	28 0f       	add	r18, r24
    1d8c:	39 1f       	adc	r19, r25
    1d8e:	89 81       	ldd	r24, Y+1	; 0x01
    1d90:	9a 81       	ldd	r25, Y+2	; 0x02
    1d92:	fc 01       	movw	r30, r24
    1d94:	37 83       	std	Z+7, r19	; 0x07
    1d96:	26 83       	std	Z+6, r18	; 0x06
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1d9c:	2f ef       	ldi	r18, 0xFF	; 255
    1d9e:	fc 01       	movw	r30, r24
    1da0:	25 8f       	std	Z+29, r18	; 0x1d
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	9a 81       	ldd	r25, Y+2	; 0x02
    1da6:	2f ef       	ldi	r18, 0xFF	; 255
    1da8:	fc 01       	movw	r30, r24
    1daa:	26 8f       	std	Z+30, r18	; 0x1e
    1dac:	8d 81       	ldd	r24, Y+5	; 0x05
    1dae:	88 23       	and	r24, r24
    1db0:	81 f4       	brne	.+32     	; 0x1dd2 <xQueueGenericReset+0xfe>
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	9a 81       	ldd	r25, Y+2	; 0x02
    1db6:	fc 01       	movw	r30, r24
    1db8:	80 85       	ldd	r24, Z+8	; 0x08
    1dba:	88 23       	and	r24, r24
    1dbc:	a1 f0       	breq	.+40     	; 0x1de6 <xQueueGenericReset+0x112>
    1dbe:	89 81       	ldd	r24, Y+1	; 0x01
    1dc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1dc2:	08 96       	adiw	r24, 0x08	; 8
    1dc4:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    1dc8:	88 23       	and	r24, r24
    1dca:	69 f0       	breq	.+26     	; 0x1de6 <xQueueGenericReset+0x112>
    1dcc:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    1dd0:	0a c0       	rjmp	.+20     	; 0x1de6 <xQueueGenericReset+0x112>
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	9a 81       	ldd	r25, Y+2	; 0x02
    1dd6:	08 96       	adiw	r24, 0x08	; 8
    1dd8:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    1ddc:	89 81       	ldd	r24, Y+1	; 0x01
    1dde:	9a 81       	ldd	r25, Y+2	; 0x02
    1de0:	41 96       	adiw	r24, 0x11	; 17
    1de2:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    1de6:	0f 90       	pop	r0
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	81 e0       	ldi	r24, 0x01	; 1
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	df 91       	pop	r29
    1df8:	cf 91       	pop	r28
    1dfa:	08 95       	ret

00001dfc <xQueueGenericCreate>:
    1dfc:	0f 93       	push	r16
    1dfe:	1f 93       	push	r17
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	cd b7       	in	r28, 0x3d	; 61
    1e06:	de b7       	in	r29, 0x3e	; 62
    1e08:	29 97       	sbiw	r28, 0x09	; 9
    1e0a:	0f b6       	in	r0, 0x3f	; 63
    1e0c:	f8 94       	cli
    1e0e:	de bf       	out	0x3e, r29	; 62
    1e10:	0f be       	out	0x3f, r0	; 63
    1e12:	cd bf       	out	0x3d, r28	; 61
    1e14:	8f 83       	std	Y+7, r24	; 0x07
    1e16:	68 87       	std	Y+8, r22	; 0x08
    1e18:	49 87       	std	Y+9, r20	; 0x09
    1e1a:	88 85       	ldd	r24, Y+8	; 0x08
    1e1c:	88 23       	and	r24, r24
    1e1e:	19 f4       	brne	.+6      	; 0x1e26 <xQueueGenericCreate+0x2a>
    1e20:	1a 82       	std	Y+2, r1	; 0x02
    1e22:	19 82       	std	Y+1, r1	; 0x01
    1e24:	0f c0       	rjmp	.+30     	; 0x1e44 <xQueueGenericCreate+0x48>
    1e26:	8f 81       	ldd	r24, Y+7	; 0x07
    1e28:	48 2f       	mov	r20, r24
    1e2a:	50 e0       	ldi	r21, 0x00	; 0
    1e2c:	88 85       	ldd	r24, Y+8	; 0x08
    1e2e:	28 2f       	mov	r18, r24
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	42 9f       	mul	r20, r18
    1e34:	c0 01       	movw	r24, r0
    1e36:	43 9f       	mul	r20, r19
    1e38:	90 0d       	add	r25, r0
    1e3a:	52 9f       	mul	r21, r18
    1e3c:	90 0d       	add	r25, r0
    1e3e:	11 24       	eor	r1, r1
    1e40:	9a 83       	std	Y+2, r25	; 0x02
    1e42:	89 83       	std	Y+1, r24	; 0x01
    1e44:	89 81       	ldd	r24, Y+1	; 0x01
    1e46:	9a 81       	ldd	r25, Y+2	; 0x02
    1e48:	81 96       	adiw	r24, 0x21	; 33
    1e4a:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <pvPortMalloc>
    1e4e:	9c 83       	std	Y+4, r25	; 0x04
    1e50:	8b 83       	std	Y+3, r24	; 0x03
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	89 2b       	or	r24, r25
    1e58:	81 f0       	breq	.+32     	; 0x1e7a <xQueueGenericCreate+0x7e>
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	81 96       	adiw	r24, 0x21	; 33
    1e60:	9e 83       	std	Y+6, r25	; 0x06
    1e62:	8d 83       	std	Y+5, r24	; 0x05
    1e64:	2b 81       	ldd	r18, Y+3	; 0x03
    1e66:	3c 81       	ldd	r19, Y+4	; 0x04
    1e68:	8d 81       	ldd	r24, Y+5	; 0x05
    1e6a:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6c:	89 01       	movw	r16, r18
    1e6e:	29 85       	ldd	r18, Y+9	; 0x09
    1e70:	ac 01       	movw	r20, r24
    1e72:	68 85       	ldd	r22, Y+8	; 0x08
    1e74:	8f 81       	ldd	r24, Y+7	; 0x07
    1e76:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <prvInitialiseNewQueue>
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	29 96       	adiw	r28, 0x09	; 9
    1e80:	0f b6       	in	r0, 0x3f	; 63
    1e82:	f8 94       	cli
    1e84:	de bf       	out	0x3e, r29	; 62
    1e86:	0f be       	out	0x3f, r0	; 63
    1e88:	cd bf       	out	0x3d, r28	; 61
    1e8a:	df 91       	pop	r29
    1e8c:	cf 91       	pop	r28
    1e8e:	1f 91       	pop	r17
    1e90:	0f 91       	pop	r16
    1e92:	08 95       	ret

00001e94 <prvInitialiseNewQueue>:
    1e94:	0f 93       	push	r16
    1e96:	1f 93       	push	r17
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	27 97       	sbiw	r28, 0x07	; 7
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	89 83       	std	Y+1, r24	; 0x01
    1eae:	6a 83       	std	Y+2, r22	; 0x02
    1eb0:	5c 83       	std	Y+4, r21	; 0x04
    1eb2:	4b 83       	std	Y+3, r20	; 0x03
    1eb4:	2d 83       	std	Y+5, r18	; 0x05
    1eb6:	1f 83       	std	Y+7, r17	; 0x07
    1eb8:	0e 83       	std	Y+6, r16	; 0x06
    1eba:	8a 81       	ldd	r24, Y+2	; 0x02
    1ebc:	88 23       	and	r24, r24
    1ebe:	41 f4       	brne	.+16     	; 0x1ed0 <prvInitialiseNewQueue+0x3c>
    1ec0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ec2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ec4:	2e 81       	ldd	r18, Y+6	; 0x06
    1ec6:	3f 81       	ldd	r19, Y+7	; 0x07
    1ec8:	fc 01       	movw	r30, r24
    1eca:	31 83       	std	Z+1, r19	; 0x01
    1ecc:	20 83       	st	Z, r18
    1ece:	07 c0       	rjmp	.+14     	; 0x1ede <prvInitialiseNewQueue+0x4a>
    1ed0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ed2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ed4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ed6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ed8:	fc 01       	movw	r30, r24
    1eda:	31 83       	std	Z+1, r19	; 0x01
    1edc:	20 83       	st	Z, r18
    1ede:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee0:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee2:	29 81       	ldd	r18, Y+1	; 0x01
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	23 8f       	std	Z+27, r18	; 0x1b
    1ee8:	8e 81       	ldd	r24, Y+6	; 0x06
    1eea:	9f 81       	ldd	r25, Y+7	; 0x07
    1eec:	2a 81       	ldd	r18, Y+2	; 0x02
    1eee:	fc 01       	movw	r30, r24
    1ef0:	24 8f       	std	Z+28, r18	; 0x1c
    1ef2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ef4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ef6:	61 e0       	ldi	r22, 0x01	; 1
    1ef8:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <xQueueGenericReset>
    1efc:	8e 81       	ldd	r24, Y+6	; 0x06
    1efe:	9f 81       	ldd	r25, Y+7	; 0x07
    1f00:	2d 81       	ldd	r18, Y+5	; 0x05
    1f02:	fc 01       	movw	r30, r24
    1f04:	20 a3       	std	Z+32, r18	; 0x20
    1f06:	27 96       	adiw	r28, 0x07	; 7
    1f08:	0f b6       	in	r0, 0x3f	; 63
    1f0a:	f8 94       	cli
    1f0c:	de bf       	out	0x3e, r29	; 62
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	cd bf       	out	0x3d, r28	; 61
    1f12:	df 91       	pop	r29
    1f14:	cf 91       	pop	r28
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	08 95       	ret

00001f1c <prvInitialiseMutex>:
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	00 d0       	rcall	.+0      	; 0x1f22 <prvInitialiseMutex+0x6>
    1f22:	cd b7       	in	r28, 0x3d	; 61
    1f24:	de b7       	in	r29, 0x3e	; 62
    1f26:	9a 83       	std	Y+2, r25	; 0x02
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f2e:	89 2b       	or	r24, r25
    1f30:	b9 f0       	breq	.+46     	; 0x1f60 <prvInitialiseMutex+0x44>
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	fc 01       	movw	r30, r24
    1f38:	13 82       	std	Z+3, r1	; 0x03
    1f3a:	12 82       	std	Z+2, r1	; 0x02
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	fc 01       	movw	r30, r24
    1f42:	11 82       	std	Z+1, r1	; 0x01
    1f44:	10 82       	st	Z, r1
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	9a 81       	ldd	r25, Y+2	; 0x02
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	16 82       	std	Z+6, r1	; 0x06
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	40 e0       	ldi	r20, 0x00	; 0
    1f56:	50 e0       	ldi	r21, 0x00	; 0
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	70 e0       	ldi	r23, 0x00	; 0
    1f5c:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <xQueueGenericSend>
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	df 91       	pop	r29
    1f66:	cf 91       	pop	r28
    1f68:	08 95       	ret

00001f6a <xQueueCreateMutex>:
    1f6a:	cf 93       	push	r28
    1f6c:	df 93       	push	r29
    1f6e:	00 d0       	rcall	.+0      	; 0x1f70 <xQueueCreateMutex+0x6>
    1f70:	00 d0       	rcall	.+0      	; 0x1f72 <xQueueCreateMutex+0x8>
    1f72:	1f 92       	push	r1
    1f74:	cd b7       	in	r28, 0x3d	; 61
    1f76:	de b7       	in	r29, 0x3e	; 62
    1f78:	8d 83       	std	Y+5, r24	; 0x05
    1f7a:	81 e0       	ldi	r24, 0x01	; 1
    1f7c:	89 83       	std	Y+1, r24	; 0x01
    1f7e:	1a 82       	std	Y+2, r1	; 0x02
    1f80:	4d 81       	ldd	r20, Y+5	; 0x05
    1f82:	6a 81       	ldd	r22, Y+2	; 0x02
    1f84:	89 81       	ldd	r24, Y+1	; 0x01
    1f86:	0e 94 fe 0e 	call	0x1dfc	; 0x1dfc <xQueueGenericCreate>
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <prvInitialiseMutex>
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	0f 90       	pop	r0
    1fa0:	0f 90       	pop	r0
    1fa2:	0f 90       	pop	r0
    1fa4:	df 91       	pop	r29
    1fa6:	cf 91       	pop	r28
    1fa8:	08 95       	ret

00001faa <xQueueGenericSend>:
    1faa:	cf 93       	push	r28
    1fac:	df 93       	push	r29
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	2e 97       	sbiw	r28, 0x0e	; 14
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	99 87       	std	Y+9, r25	; 0x09
    1fc0:	88 87       	std	Y+8, r24	; 0x08
    1fc2:	7b 87       	std	Y+11, r23	; 0x0b
    1fc4:	6a 87       	std	Y+10, r22	; 0x0a
    1fc6:	5d 87       	std	Y+13, r21	; 0x0d
    1fc8:	4c 87       	std	Y+12, r20	; 0x0c
    1fca:	2e 87       	std	Y+14, r18	; 0x0e
    1fcc:	19 82       	std	Y+1, r1	; 0x01
    1fce:	88 85       	ldd	r24, Y+8	; 0x08
    1fd0:	99 85       	ldd	r25, Y+9	; 0x09
    1fd2:	9b 83       	std	Y+3, r25	; 0x03
    1fd4:	8a 83       	std	Y+2, r24	; 0x02
    1fd6:	0f b6       	in	r0, 0x3f	; 63
    1fd8:	f8 94       	cli
    1fda:	0f 92       	push	r0
    1fdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fde:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe0:	fc 01       	movw	r30, r24
    1fe2:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fe4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fe8:	fc 01       	movw	r30, r24
    1fea:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fec:	28 17       	cp	r18, r24
    1fee:	18 f0       	brcs	.+6      	; 0x1ff6 <xQueueGenericSend+0x4c>
    1ff0:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	11 f5       	brne	.+68     	; 0x203a <xQueueGenericSend+0x90>
    1ff6:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ff8:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ffa:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ffe:	4e 85       	ldd	r20, Y+14	; 0x0e
    2000:	b9 01       	movw	r22, r18
    2002:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvCopyDataToQueue>
    2006:	8c 83       	std	Y+4, r24	; 0x04
    2008:	8a 81       	ldd	r24, Y+2	; 0x02
    200a:	9b 81       	ldd	r25, Y+3	; 0x03
    200c:	fc 01       	movw	r30, r24
    200e:	81 89       	ldd	r24, Z+17	; 0x11
    2010:	88 23       	and	r24, r24
    2012:	51 f0       	breq	.+20     	; 0x2028 <xQueueGenericSend+0x7e>
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	41 96       	adiw	r24, 0x11	; 17
    201a:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    201e:	88 23       	and	r24, r24
    2020:	41 f0       	breq	.+16     	; 0x2032 <xQueueGenericSend+0x88>
    2022:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2026:	05 c0       	rjmp	.+10     	; 0x2032 <xQueueGenericSend+0x88>
    2028:	8c 81       	ldd	r24, Y+4	; 0x04
    202a:	88 23       	and	r24, r24
    202c:	11 f0       	breq	.+4      	; 0x2032 <xQueueGenericSend+0x88>
    202e:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2032:	0f 90       	pop	r0
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	61 c0       	rjmp	.+194    	; 0x20fc <xQueueGenericSend+0x152>
    203a:	8c 85       	ldd	r24, Y+12	; 0x0c
    203c:	9d 85       	ldd	r25, Y+13	; 0x0d
    203e:	89 2b       	or	r24, r25
    2040:	21 f4       	brne	.+8      	; 0x204a <xQueueGenericSend+0xa0>
    2042:	0f 90       	pop	r0
    2044:	0f be       	out	0x3f, r0	; 63
    2046:	80 e0       	ldi	r24, 0x00	; 0
    2048:	59 c0       	rjmp	.+178    	; 0x20fc <xQueueGenericSend+0x152>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	88 23       	and	r24, r24
    204e:	31 f4       	brne	.+12     	; 0x205c <xQueueGenericSend+0xb2>
    2050:	ce 01       	movw	r24, r28
    2052:	05 96       	adiw	r24, 0x05	; 5
    2054:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <vTaskSetTimeOutState>
    2058:	81 e0       	ldi	r24, 0x01	; 1
    205a:	89 83       	std	Y+1, r24	; 0x01
    205c:	0f 90       	pop	r0
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	0f 92       	push	r0
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	fc 01       	movw	r30, r24
    2070:	85 8d       	ldd	r24, Z+29	; 0x1d
    2072:	8f 3f       	cpi	r24, 0xFF	; 255
    2074:	21 f4       	brne	.+8      	; 0x207e <xQueueGenericSend+0xd4>
    2076:	8a 81       	ldd	r24, Y+2	; 0x02
    2078:	9b 81       	ldd	r25, Y+3	; 0x03
    207a:	fc 01       	movw	r30, r24
    207c:	15 8e       	std	Z+29, r1	; 0x1d
    207e:	8a 81       	ldd	r24, Y+2	; 0x02
    2080:	9b 81       	ldd	r25, Y+3	; 0x03
    2082:	fc 01       	movw	r30, r24
    2084:	86 8d       	ldd	r24, Z+30	; 0x1e
    2086:	8f 3f       	cpi	r24, 0xFF	; 255
    2088:	21 f4       	brne	.+8      	; 0x2092 <xQueueGenericSend+0xe8>
    208a:	8a 81       	ldd	r24, Y+2	; 0x02
    208c:	9b 81       	ldd	r25, Y+3	; 0x03
    208e:	fc 01       	movw	r30, r24
    2090:	16 8e       	std	Z+30, r1	; 0x1e
    2092:	0f 90       	pop	r0
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	9e 01       	movw	r18, r28
    2098:	24 5f       	subi	r18, 0xF4	; 244
    209a:	3f 4f       	sbci	r19, 0xFF	; 255
    209c:	ce 01       	movw	r24, r28
    209e:	05 96       	adiw	r24, 0x05	; 5
    20a0:	b9 01       	movw	r22, r18
    20a2:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskCheckForTimeOut>
    20a6:	88 23       	and	r24, r24
    20a8:	01 f5       	brne	.+64     	; 0x20ea <xQueueGenericSend+0x140>
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	9b 81       	ldd	r25, Y+3	; 0x03
    20ae:	0e 94 77 13 	call	0x26ee	; 0x26ee <prvIsQueueFull>
    20b2:	88 23       	and	r24, r24
    20b4:	99 f0       	breq	.+38     	; 0x20dc <xQueueGenericSend+0x132>
    20b6:	2c 85       	ldd	r18, Y+12	; 0x0c
    20b8:	3d 85       	ldd	r19, Y+13	; 0x0d
    20ba:	8a 81       	ldd	r24, Y+2	; 0x02
    20bc:	9b 81       	ldd	r25, Y+3	; 0x03
    20be:	08 96       	adiw	r24, 0x08	; 8
    20c0:	b9 01       	movw	r22, r18
    20c2:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskPlaceOnEventList>
    20c6:	8a 81       	ldd	r24, Y+2	; 0x02
    20c8:	9b 81       	ldd	r25, Y+3	; 0x03
    20ca:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    20ce:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    20d2:	88 23       	and	r24, r24
    20d4:	91 f4       	brne	.+36     	; 0x20fa <xQueueGenericSend+0x150>
    20d6:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    20da:	0f c0       	rjmp	.+30     	; 0x20fa <xQueueGenericSend+0x150>
    20dc:	8a 81       	ldd	r24, Y+2	; 0x02
    20de:	9b 81       	ldd	r25, Y+3	; 0x03
    20e0:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    20e4:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    20e8:	76 cf       	rjmp	.-276    	; 0x1fd6 <xQueueGenericSend+0x2c>
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    20f2:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    20f6:	80 e0       	ldi	r24, 0x00	; 0
    20f8:	01 c0       	rjmp	.+2      	; 0x20fc <xQueueGenericSend+0x152>
    20fa:	6d cf       	rjmp	.-294    	; 0x1fd6 <xQueueGenericSend+0x2c>
    20fc:	2e 96       	adiw	r28, 0x0e	; 14
    20fe:	0f b6       	in	r0, 0x3f	; 63
    2100:	f8 94       	cli
    2102:	de bf       	out	0x3e, r29	; 62
    2104:	0f be       	out	0x3f, r0	; 63
    2106:	cd bf       	out	0x3d, r28	; 61
    2108:	df 91       	pop	r29
    210a:	cf 91       	pop	r28
    210c:	08 95       	ret

0000210e <xQueueGenericSendFromISR>:
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	2c 97       	sbiw	r28, 0x0c	; 12
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	9f 83       	std	Y+7, r25	; 0x07
    2124:	8e 83       	std	Y+6, r24	; 0x06
    2126:	79 87       	std	Y+9, r23	; 0x09
    2128:	68 87       	std	Y+8, r22	; 0x08
    212a:	5b 87       	std	Y+11, r21	; 0x0b
    212c:	4a 87       	std	Y+10, r20	; 0x0a
    212e:	2c 87       	std	Y+12, r18	; 0x0c
    2130:	8e 81       	ldd	r24, Y+6	; 0x06
    2132:	9f 81       	ldd	r25, Y+7	; 0x07
    2134:	9b 83       	std	Y+3, r25	; 0x03
    2136:	8a 83       	std	Y+2, r24	; 0x02
    2138:	1c 82       	std	Y+4, r1	; 0x04
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	9b 81       	ldd	r25, Y+3	; 0x03
    213e:	fc 01       	movw	r30, r24
    2140:	22 8d       	ldd	r18, Z+26	; 0x1a
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	9b 81       	ldd	r25, Y+3	; 0x03
    2146:	fc 01       	movw	r30, r24
    2148:	83 8d       	ldd	r24, Z+27	; 0x1b
    214a:	28 17       	cp	r18, r24
    214c:	18 f0       	brcs	.+6      	; 0x2154 <xQueueGenericSendFromISR+0x46>
    214e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2150:	82 30       	cpi	r24, 0x02	; 2
    2152:	89 f5       	brne	.+98     	; 0x21b6 <xQueueGenericSendFromISR+0xa8>
    2154:	8a 81       	ldd	r24, Y+2	; 0x02
    2156:	9b 81       	ldd	r25, Y+3	; 0x03
    2158:	fc 01       	movw	r30, r24
    215a:	86 8d       	ldd	r24, Z+30	; 0x1e
    215c:	8d 83       	std	Y+5, r24	; 0x05
    215e:	28 85       	ldd	r18, Y+8	; 0x08
    2160:	39 85       	ldd	r19, Y+9	; 0x09
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	9b 81       	ldd	r25, Y+3	; 0x03
    2166:	4c 85       	ldd	r20, Y+12	; 0x0c
    2168:	b9 01       	movw	r22, r18
    216a:	0e 94 dc 11 	call	0x23b8	; 0x23b8 <prvCopyDataToQueue>
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	8f 3f       	cpi	r24, 0xFF	; 255
    2172:	b9 f4       	brne	.+46     	; 0x21a2 <xQueueGenericSendFromISR+0x94>
    2174:	8a 81       	ldd	r24, Y+2	; 0x02
    2176:	9b 81       	ldd	r25, Y+3	; 0x03
    2178:	fc 01       	movw	r30, r24
    217a:	81 89       	ldd	r24, Z+17	; 0x11
    217c:	88 23       	and	r24, r24
    217e:	c1 f0       	breq	.+48     	; 0x21b0 <xQueueGenericSendFromISR+0xa2>
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	9b 81       	ldd	r25, Y+3	; 0x03
    2184:	41 96       	adiw	r24, 0x11	; 17
    2186:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    218a:	88 23       	and	r24, r24
    218c:	89 f0       	breq	.+34     	; 0x21b0 <xQueueGenericSendFromISR+0xa2>
    218e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2190:	9b 85       	ldd	r25, Y+11	; 0x0b
    2192:	89 2b       	or	r24, r25
    2194:	69 f0       	breq	.+26     	; 0x21b0 <xQueueGenericSendFromISR+0xa2>
    2196:	8a 85       	ldd	r24, Y+10	; 0x0a
    2198:	9b 85       	ldd	r25, Y+11	; 0x0b
    219a:	21 e0       	ldi	r18, 0x01	; 1
    219c:	fc 01       	movw	r30, r24
    219e:	20 83       	st	Z, r18
    21a0:	07 c0       	rjmp	.+14     	; 0x21b0 <xQueueGenericSendFromISR+0xa2>
    21a2:	8d 81       	ldd	r24, Y+5	; 0x05
    21a4:	8f 5f       	subi	r24, 0xFF	; 255
    21a6:	28 2f       	mov	r18, r24
    21a8:	8a 81       	ldd	r24, Y+2	; 0x02
    21aa:	9b 81       	ldd	r25, Y+3	; 0x03
    21ac:	fc 01       	movw	r30, r24
    21ae:	26 8f       	std	Z+30, r18	; 0x1e
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	89 83       	std	Y+1, r24	; 0x01
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <xQueueGenericSendFromISR+0xaa>
    21b6:	19 82       	std	Y+1, r1	; 0x01
    21b8:	89 81       	ldd	r24, Y+1	; 0x01
    21ba:	2c 96       	adiw	r28, 0x0c	; 12
    21bc:	0f b6       	in	r0, 0x3f	; 63
    21be:	f8 94       	cli
    21c0:	de bf       	out	0x3e, r29	; 62
    21c2:	0f be       	out	0x3f, r0	; 63
    21c4:	cd bf       	out	0x3d, r28	; 61
    21c6:	df 91       	pop	r29
    21c8:	cf 91       	pop	r28
    21ca:	08 95       	ret

000021cc <xQueueGenericReceive>:
    21cc:	cf 93       	push	r28
    21ce:	df 93       	push	r29
    21d0:	cd b7       	in	r28, 0x3d	; 61
    21d2:	de b7       	in	r29, 0x3e	; 62
    21d4:	60 97       	sbiw	r28, 0x10	; 16
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	de bf       	out	0x3e, r29	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	cd bf       	out	0x3d, r28	; 61
    21e0:	9b 87       	std	Y+11, r25	; 0x0b
    21e2:	8a 87       	std	Y+10, r24	; 0x0a
    21e4:	7d 87       	std	Y+13, r23	; 0x0d
    21e6:	6c 87       	std	Y+12, r22	; 0x0c
    21e8:	5f 87       	std	Y+15, r21	; 0x0f
    21ea:	4e 87       	std	Y+14, r20	; 0x0e
    21ec:	28 8b       	std	Y+16, r18	; 0x10
    21ee:	19 82       	std	Y+1, r1	; 0x01
    21f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    21f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    21f4:	9b 83       	std	Y+3, r25	; 0x03
    21f6:	8a 83       	std	Y+2, r24	; 0x02
    21f8:	0f b6       	in	r0, 0x3f	; 63
    21fa:	f8 94       	cli
    21fc:	0f 92       	push	r0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	9b 81       	ldd	r25, Y+3	; 0x03
    2202:	fc 01       	movw	r30, r24
    2204:	82 8d       	ldd	r24, Z+26	; 0x1a
    2206:	8c 83       	std	Y+4, r24	; 0x04
    2208:	8c 81       	ldd	r24, Y+4	; 0x04
    220a:	88 23       	and	r24, r24
    220c:	09 f4       	brne	.+2      	; 0x2210 <xQueueGenericReceive+0x44>
    220e:	51 c0       	rjmp	.+162    	; 0x22b2 <xQueueGenericReceive+0xe6>
    2210:	8a 81       	ldd	r24, Y+2	; 0x02
    2212:	9b 81       	ldd	r25, Y+3	; 0x03
    2214:	fc 01       	movw	r30, r24
    2216:	86 81       	ldd	r24, Z+6	; 0x06
    2218:	97 81       	ldd	r25, Z+7	; 0x07
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	2c 85       	ldd	r18, Y+12	; 0x0c
    2220:	3d 85       	ldd	r19, Y+13	; 0x0d
    2222:	8a 81       	ldd	r24, Y+2	; 0x02
    2224:	9b 81       	ldd	r25, Y+3	; 0x03
    2226:	b9 01       	movw	r22, r18
    2228:	0e 94 ac 12 	call	0x2558	; 0x2558 <prvCopyDataFromQueue>
    222c:	88 89       	ldd	r24, Y+16	; 0x10
    222e:	88 23       	and	r24, r24
    2230:	31 f5       	brne	.+76     	; 0x227e <xQueueGenericReceive+0xb2>
    2232:	8c 81       	ldd	r24, Y+4	; 0x04
    2234:	2f ef       	ldi	r18, 0xFF	; 255
    2236:	28 0f       	add	r18, r24
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	9b 81       	ldd	r25, Y+3	; 0x03
    223c:	fc 01       	movw	r30, r24
    223e:	22 8f       	std	Z+26, r18	; 0x1a
    2240:	8a 81       	ldd	r24, Y+2	; 0x02
    2242:	9b 81       	ldd	r25, Y+3	; 0x03
    2244:	fc 01       	movw	r30, r24
    2246:	80 81       	ld	r24, Z
    2248:	91 81       	ldd	r25, Z+1	; 0x01
    224a:	89 2b       	or	r24, r25
    224c:	41 f4       	brne	.+16     	; 0x225e <xQueueGenericReceive+0x92>
    224e:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <pvTaskIncrementMutexHeldCount>
    2252:	9c 01       	movw	r18, r24
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	fc 01       	movw	r30, r24
    225a:	33 83       	std	Z+3, r19	; 0x03
    225c:	22 83       	std	Z+2, r18	; 0x02
    225e:	8a 81       	ldd	r24, Y+2	; 0x02
    2260:	9b 81       	ldd	r25, Y+3	; 0x03
    2262:	fc 01       	movw	r30, r24
    2264:	80 85       	ldd	r24, Z+8	; 0x08
    2266:	88 23       	and	r24, r24
    2268:	01 f1       	breq	.+64     	; 0x22aa <xQueueGenericReceive+0xde>
    226a:	8a 81       	ldd	r24, Y+2	; 0x02
    226c:	9b 81       	ldd	r25, Y+3	; 0x03
    226e:	08 96       	adiw	r24, 0x08	; 8
    2270:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    2274:	88 23       	and	r24, r24
    2276:	c9 f0       	breq	.+50     	; 0x22aa <xQueueGenericReceive+0xde>
    2278:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    227c:	16 c0       	rjmp	.+44     	; 0x22aa <xQueueGenericReceive+0xde>
    227e:	8a 81       	ldd	r24, Y+2	; 0x02
    2280:	9b 81       	ldd	r25, Y+3	; 0x03
    2282:	2d 81       	ldd	r18, Y+5	; 0x05
    2284:	3e 81       	ldd	r19, Y+6	; 0x06
    2286:	fc 01       	movw	r30, r24
    2288:	37 83       	std	Z+7, r19	; 0x07
    228a:	26 83       	std	Z+6, r18	; 0x06
    228c:	8a 81       	ldd	r24, Y+2	; 0x02
    228e:	9b 81       	ldd	r25, Y+3	; 0x03
    2290:	fc 01       	movw	r30, r24
    2292:	81 89       	ldd	r24, Z+17	; 0x11
    2294:	88 23       	and	r24, r24
    2296:	49 f0       	breq	.+18     	; 0x22aa <xQueueGenericReceive+0xde>
    2298:	8a 81       	ldd	r24, Y+2	; 0x02
    229a:	9b 81       	ldd	r25, Y+3	; 0x03
    229c:	41 96       	adiw	r24, 0x11	; 17
    229e:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    22a2:	88 23       	and	r24, r24
    22a4:	11 f0       	breq	.+4      	; 0x22aa <xQueueGenericReceive+0xde>
    22a6:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    22aa:	0f 90       	pop	r0
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	7a c0       	rjmp	.+244    	; 0x23a6 <xQueueGenericReceive+0x1da>
    22b2:	8e 85       	ldd	r24, Y+14	; 0x0e
    22b4:	9f 85       	ldd	r25, Y+15	; 0x0f
    22b6:	89 2b       	or	r24, r25
    22b8:	21 f4       	brne	.+8      	; 0x22c2 <xQueueGenericReceive+0xf6>
    22ba:	0f 90       	pop	r0
    22bc:	0f be       	out	0x3f, r0	; 63
    22be:	80 e0       	ldi	r24, 0x00	; 0
    22c0:	72 c0       	rjmp	.+228    	; 0x23a6 <xQueueGenericReceive+0x1da>
    22c2:	89 81       	ldd	r24, Y+1	; 0x01
    22c4:	88 23       	and	r24, r24
    22c6:	31 f4       	brne	.+12     	; 0x22d4 <xQueueGenericReceive+0x108>
    22c8:	ce 01       	movw	r24, r28
    22ca:	07 96       	adiw	r24, 0x07	; 7
    22cc:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <vTaskSetTimeOutState>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	0f 90       	pop	r0
    22d6:	0f be       	out	0x3f, r0	; 63
    22d8:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	0f 92       	push	r0
    22e2:	8a 81       	ldd	r24, Y+2	; 0x02
    22e4:	9b 81       	ldd	r25, Y+3	; 0x03
    22e6:	fc 01       	movw	r30, r24
    22e8:	85 8d       	ldd	r24, Z+29	; 0x1d
    22ea:	8f 3f       	cpi	r24, 0xFF	; 255
    22ec:	21 f4       	brne	.+8      	; 0x22f6 <xQueueGenericReceive+0x12a>
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	fc 01       	movw	r30, r24
    22f4:	15 8e       	std	Z+29, r1	; 0x1d
    22f6:	8a 81       	ldd	r24, Y+2	; 0x02
    22f8:	9b 81       	ldd	r25, Y+3	; 0x03
    22fa:	fc 01       	movw	r30, r24
    22fc:	86 8d       	ldd	r24, Z+30	; 0x1e
    22fe:	8f 3f       	cpi	r24, 0xFF	; 255
    2300:	21 f4       	brne	.+8      	; 0x230a <xQueueGenericReceive+0x13e>
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	9b 81       	ldd	r25, Y+3	; 0x03
    2306:	fc 01       	movw	r30, r24
    2308:	16 8e       	std	Z+30, r1	; 0x1e
    230a:	0f 90       	pop	r0
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	9e 01       	movw	r18, r28
    2310:	22 5f       	subi	r18, 0xF2	; 242
    2312:	3f 4f       	sbci	r19, 0xFF	; 255
    2314:	ce 01       	movw	r24, r28
    2316:	07 96       	adiw	r24, 0x07	; 7
    2318:	b9 01       	movw	r22, r18
    231a:	0e 94 17 19 	call	0x322e	; 0x322e <xTaskCheckForTimeOut>
    231e:	88 23       	and	r24, r24
    2320:	99 f5       	brne	.+102    	; 0x2388 <xQueueGenericReceive+0x1bc>
    2322:	8a 81       	ldd	r24, Y+2	; 0x02
    2324:	9b 81       	ldd	r25, Y+3	; 0x03
    2326:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvIsQueueEmpty>
    232a:	88 23       	and	r24, r24
    232c:	31 f1       	breq	.+76     	; 0x237a <xQueueGenericReceive+0x1ae>
    232e:	8a 81       	ldd	r24, Y+2	; 0x02
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	fc 01       	movw	r30, r24
    2334:	80 81       	ld	r24, Z
    2336:	91 81       	ldd	r25, Z+1	; 0x01
    2338:	89 2b       	or	r24, r25
    233a:	61 f4       	brne	.+24     	; 0x2354 <xQueueGenericReceive+0x188>
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	0f 92       	push	r0
    2342:	8a 81       	ldd	r24, Y+2	; 0x02
    2344:	9b 81       	ldd	r25, Y+3	; 0x03
    2346:	fc 01       	movw	r30, r24
    2348:	82 81       	ldd	r24, Z+2	; 0x02
    234a:	93 81       	ldd	r25, Z+3	; 0x03
    234c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <vTaskPriorityInherit>
    2350:	0f 90       	pop	r0
    2352:	0f be       	out	0x3f, r0	; 63
    2354:	2e 85       	ldd	r18, Y+14	; 0x0e
    2356:	3f 85       	ldd	r19, Y+15	; 0x0f
    2358:	8a 81       	ldd	r24, Y+2	; 0x02
    235a:	9b 81       	ldd	r25, Y+3	; 0x03
    235c:	41 96       	adiw	r24, 0x11	; 17
    235e:	b9 01       	movw	r22, r18
    2360:	0e 94 6d 18 	call	0x30da	; 0x30da <vTaskPlaceOnEventList>
    2364:	8a 81       	ldd	r24, Y+2	; 0x02
    2366:	9b 81       	ldd	r25, Y+3	; 0x03
    2368:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    236c:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    2370:	88 23       	and	r24, r24
    2372:	c1 f4       	brne	.+48     	; 0x23a4 <xQueueGenericReceive+0x1d8>
    2374:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2378:	15 c0       	rjmp	.+42     	; 0x23a4 <xQueueGenericReceive+0x1d8>
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	9b 81       	ldd	r25, Y+3	; 0x03
    237e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    2382:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    2386:	38 cf       	rjmp	.-400    	; 0x21f8 <xQueueGenericReceive+0x2c>
    2388:	8a 81       	ldd	r24, Y+2	; 0x02
    238a:	9b 81       	ldd	r25, Y+3	; 0x03
    238c:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <prvUnlockQueue>
    2390:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    2394:	8a 81       	ldd	r24, Y+2	; 0x02
    2396:	9b 81       	ldd	r25, Y+3	; 0x03
    2398:	0e 94 59 13 	call	0x26b2	; 0x26b2 <prvIsQueueEmpty>
    239c:	88 23       	and	r24, r24
    239e:	11 f0       	breq	.+4      	; 0x23a4 <xQueueGenericReceive+0x1d8>
    23a0:	80 e0       	ldi	r24, 0x00	; 0
    23a2:	01 c0       	rjmp	.+2      	; 0x23a6 <xQueueGenericReceive+0x1da>
    23a4:	29 cf       	rjmp	.-430    	; 0x21f8 <xQueueGenericReceive+0x2c>
    23a6:	60 96       	adiw	r28, 0x10	; 16
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	df 91       	pop	r29
    23b4:	cf 91       	pop	r28
    23b6:	08 95       	ret

000023b8 <prvCopyDataToQueue>:
    23b8:	cf 93       	push	r28
    23ba:	df 93       	push	r29
    23bc:	cd b7       	in	r28, 0x3d	; 61
    23be:	de b7       	in	r29, 0x3e	; 62
    23c0:	27 97       	sbiw	r28, 0x07	; 7
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	9c 83       	std	Y+4, r25	; 0x04
    23ce:	8b 83       	std	Y+3, r24	; 0x03
    23d0:	7e 83       	std	Y+6, r23	; 0x06
    23d2:	6d 83       	std	Y+5, r22	; 0x05
    23d4:	4f 83       	std	Y+7, r20	; 0x07
    23d6:	19 82       	std	Y+1, r1	; 0x01
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	fc 01       	movw	r30, r24
    23de:	82 8d       	ldd	r24, Z+26	; 0x1a
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	8b 81       	ldd	r24, Y+3	; 0x03
    23e4:	9c 81       	ldd	r25, Y+4	; 0x04
    23e6:	fc 01       	movw	r30, r24
    23e8:	84 8d       	ldd	r24, Z+28	; 0x1c
    23ea:	88 23       	and	r24, r24
    23ec:	b1 f4       	brne	.+44     	; 0x241a <prvCopyDataToQueue+0x62>
    23ee:	8b 81       	ldd	r24, Y+3	; 0x03
    23f0:	9c 81       	ldd	r25, Y+4	; 0x04
    23f2:	fc 01       	movw	r30, r24
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	89 2b       	or	r24, r25
    23fa:	09 f0       	breq	.+2      	; 0x23fe <prvCopyDataToQueue+0x46>
    23fc:	9c c0       	rjmp	.+312    	; 0x2536 <prvCopyDataToQueue+0x17e>
    23fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2400:	9c 81       	ldd	r25, Y+4	; 0x04
    2402:	fc 01       	movw	r30, r24
    2404:	82 81       	ldd	r24, Z+2	; 0x02
    2406:	93 81       	ldd	r25, Z+3	; 0x03
    2408:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <xTaskPriorityDisinherit>
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	fc 01       	movw	r30, r24
    2414:	13 82       	std	Z+3, r1	; 0x03
    2416:	12 82       	std	Z+2, r1	; 0x02
    2418:	8e c0       	rjmp	.+284    	; 0x2536 <prvCopyDataToQueue+0x17e>
    241a:	8f 81       	ldd	r24, Y+7	; 0x07
    241c:	88 23       	and	r24, r24
    241e:	d9 f5       	brne	.+118    	; 0x2496 <prvCopyDataToQueue+0xde>
    2420:	8b 81       	ldd	r24, Y+3	; 0x03
    2422:	9c 81       	ldd	r25, Y+4	; 0x04
    2424:	fc 01       	movw	r30, r24
    2426:	84 8d       	ldd	r24, Z+28	; 0x1c
    2428:	48 2f       	mov	r20, r24
    242a:	50 e0       	ldi	r21, 0x00	; 0
    242c:	8b 81       	ldd	r24, Y+3	; 0x03
    242e:	9c 81       	ldd	r25, Y+4	; 0x04
    2430:	fc 01       	movw	r30, r24
    2432:	84 81       	ldd	r24, Z+4	; 0x04
    2434:	95 81       	ldd	r25, Z+5	; 0x05
    2436:	2d 81       	ldd	r18, Y+5	; 0x05
    2438:	3e 81       	ldd	r19, Y+6	; 0x06
    243a:	b9 01       	movw	r22, r18
    243c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <memcpy>
    2440:	8b 81       	ldd	r24, Y+3	; 0x03
    2442:	9c 81       	ldd	r25, Y+4	; 0x04
    2444:	fc 01       	movw	r30, r24
    2446:	24 81       	ldd	r18, Z+4	; 0x04
    2448:	35 81       	ldd	r19, Z+5	; 0x05
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	fc 01       	movw	r30, r24
    2450:	84 8d       	ldd	r24, Z+28	; 0x1c
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	28 0f       	add	r18, r24
    2458:	39 1f       	adc	r19, r25
    245a:	8b 81       	ldd	r24, Y+3	; 0x03
    245c:	9c 81       	ldd	r25, Y+4	; 0x04
    245e:	fc 01       	movw	r30, r24
    2460:	35 83       	std	Z+5, r19	; 0x05
    2462:	24 83       	std	Z+4, r18	; 0x04
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	fc 01       	movw	r30, r24
    246a:	24 81       	ldd	r18, Z+4	; 0x04
    246c:	35 81       	ldd	r19, Z+5	; 0x05
    246e:	8b 81       	ldd	r24, Y+3	; 0x03
    2470:	9c 81       	ldd	r25, Y+4	; 0x04
    2472:	fc 01       	movw	r30, r24
    2474:	82 81       	ldd	r24, Z+2	; 0x02
    2476:	93 81       	ldd	r25, Z+3	; 0x03
    2478:	28 17       	cp	r18, r24
    247a:	39 07       	cpc	r19, r25
    247c:	08 f4       	brcc	.+2      	; 0x2480 <prvCopyDataToQueue+0xc8>
    247e:	5b c0       	rjmp	.+182    	; 0x2536 <prvCopyDataToQueue+0x17e>
    2480:	8b 81       	ldd	r24, Y+3	; 0x03
    2482:	9c 81       	ldd	r25, Y+4	; 0x04
    2484:	fc 01       	movw	r30, r24
    2486:	20 81       	ld	r18, Z
    2488:	31 81       	ldd	r19, Z+1	; 0x01
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	9c 81       	ldd	r25, Y+4	; 0x04
    248e:	fc 01       	movw	r30, r24
    2490:	35 83       	std	Z+5, r19	; 0x05
    2492:	24 83       	std	Z+4, r18	; 0x04
    2494:	50 c0       	rjmp	.+160    	; 0x2536 <prvCopyDataToQueue+0x17e>
    2496:	8b 81       	ldd	r24, Y+3	; 0x03
    2498:	9c 81       	ldd	r25, Y+4	; 0x04
    249a:	fc 01       	movw	r30, r24
    249c:	84 8d       	ldd	r24, Z+28	; 0x1c
    249e:	48 2f       	mov	r20, r24
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	8b 81       	ldd	r24, Y+3	; 0x03
    24a4:	9c 81       	ldd	r25, Y+4	; 0x04
    24a6:	fc 01       	movw	r30, r24
    24a8:	86 81       	ldd	r24, Z+6	; 0x06
    24aa:	97 81       	ldd	r25, Z+7	; 0x07
    24ac:	2d 81       	ldd	r18, Y+5	; 0x05
    24ae:	3e 81       	ldd	r19, Y+6	; 0x06
    24b0:	b9 01       	movw	r22, r18
    24b2:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <memcpy>
    24b6:	8b 81       	ldd	r24, Y+3	; 0x03
    24b8:	9c 81       	ldd	r25, Y+4	; 0x04
    24ba:	fc 01       	movw	r30, r24
    24bc:	26 81       	ldd	r18, Z+6	; 0x06
    24be:	37 81       	ldd	r19, Z+7	; 0x07
    24c0:	8b 81       	ldd	r24, Y+3	; 0x03
    24c2:	9c 81       	ldd	r25, Y+4	; 0x04
    24c4:	fc 01       	movw	r30, r24
    24c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    24c8:	88 2f       	mov	r24, r24
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	91 95       	neg	r25
    24ce:	81 95       	neg	r24
    24d0:	91 09       	sbc	r25, r1
    24d2:	28 0f       	add	r18, r24
    24d4:	39 1f       	adc	r19, r25
    24d6:	8b 81       	ldd	r24, Y+3	; 0x03
    24d8:	9c 81       	ldd	r25, Y+4	; 0x04
    24da:	fc 01       	movw	r30, r24
    24dc:	37 83       	std	Z+7, r19	; 0x07
    24de:	26 83       	std	Z+6, r18	; 0x06
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	fc 01       	movw	r30, r24
    24e6:	26 81       	ldd	r18, Z+6	; 0x06
    24e8:	37 81       	ldd	r19, Z+7	; 0x07
    24ea:	8b 81       	ldd	r24, Y+3	; 0x03
    24ec:	9c 81       	ldd	r25, Y+4	; 0x04
    24ee:	fc 01       	movw	r30, r24
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	28 17       	cp	r18, r24
    24f6:	39 07       	cpc	r19, r25
    24f8:	a8 f4       	brcc	.+42     	; 0x2524 <prvCopyDataToQueue+0x16c>
    24fa:	8b 81       	ldd	r24, Y+3	; 0x03
    24fc:	9c 81       	ldd	r25, Y+4	; 0x04
    24fe:	fc 01       	movw	r30, r24
    2500:	22 81       	ldd	r18, Z+2	; 0x02
    2502:	33 81       	ldd	r19, Z+3	; 0x03
    2504:	8b 81       	ldd	r24, Y+3	; 0x03
    2506:	9c 81       	ldd	r25, Y+4	; 0x04
    2508:	fc 01       	movw	r30, r24
    250a:	84 8d       	ldd	r24, Z+28	; 0x1c
    250c:	88 2f       	mov	r24, r24
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	91 95       	neg	r25
    2512:	81 95       	neg	r24
    2514:	91 09       	sbc	r25, r1
    2516:	28 0f       	add	r18, r24
    2518:	39 1f       	adc	r19, r25
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	fc 01       	movw	r30, r24
    2520:	37 83       	std	Z+7, r19	; 0x07
    2522:	26 83       	std	Z+6, r18	; 0x06
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	82 30       	cpi	r24, 0x02	; 2
    2528:	31 f4       	brne	.+12     	; 0x2536 <prvCopyDataToQueue+0x17e>
    252a:	8a 81       	ldd	r24, Y+2	; 0x02
    252c:	88 23       	and	r24, r24
    252e:	19 f0       	breq	.+6      	; 0x2536 <prvCopyDataToQueue+0x17e>
    2530:	8a 81       	ldd	r24, Y+2	; 0x02
    2532:	81 50       	subi	r24, 0x01	; 1
    2534:	8a 83       	std	Y+2, r24	; 0x02
    2536:	8a 81       	ldd	r24, Y+2	; 0x02
    2538:	21 e0       	ldi	r18, 0x01	; 1
    253a:	28 0f       	add	r18, r24
    253c:	8b 81       	ldd	r24, Y+3	; 0x03
    253e:	9c 81       	ldd	r25, Y+4	; 0x04
    2540:	fc 01       	movw	r30, r24
    2542:	22 8f       	std	Z+26, r18	; 0x1a
    2544:	89 81       	ldd	r24, Y+1	; 0x01
    2546:	27 96       	adiw	r28, 0x07	; 7
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	08 95       	ret

00002558 <prvCopyDataFromQueue>:
    2558:	cf 93       	push	r28
    255a:	df 93       	push	r29
    255c:	00 d0       	rcall	.+0      	; 0x255e <prvCopyDataFromQueue+0x6>
    255e:	00 d0       	rcall	.+0      	; 0x2560 <prvCopyDataFromQueue+0x8>
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	9a 83       	std	Y+2, r25	; 0x02
    2566:	89 83       	std	Y+1, r24	; 0x01
    2568:	7c 83       	std	Y+4, r23	; 0x04
    256a:	6b 83       	std	Y+3, r22	; 0x03
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	9a 81       	ldd	r25, Y+2	; 0x02
    2570:	fc 01       	movw	r30, r24
    2572:	84 8d       	ldd	r24, Z+28	; 0x1c
    2574:	88 23       	and	r24, r24
    2576:	c9 f1       	breq	.+114    	; 0x25ea <prvCopyDataFromQueue+0x92>
    2578:	89 81       	ldd	r24, Y+1	; 0x01
    257a:	9a 81       	ldd	r25, Y+2	; 0x02
    257c:	fc 01       	movw	r30, r24
    257e:	26 81       	ldd	r18, Z+6	; 0x06
    2580:	37 81       	ldd	r19, Z+7	; 0x07
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	9a 81       	ldd	r25, Y+2	; 0x02
    2586:	fc 01       	movw	r30, r24
    2588:	84 8d       	ldd	r24, Z+28	; 0x1c
    258a:	88 2f       	mov	r24, r24
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	28 0f       	add	r18, r24
    2590:	39 1f       	adc	r19, r25
    2592:	89 81       	ldd	r24, Y+1	; 0x01
    2594:	9a 81       	ldd	r25, Y+2	; 0x02
    2596:	fc 01       	movw	r30, r24
    2598:	37 83       	std	Z+7, r19	; 0x07
    259a:	26 83       	std	Z+6, r18	; 0x06
    259c:	89 81       	ldd	r24, Y+1	; 0x01
    259e:	9a 81       	ldd	r25, Y+2	; 0x02
    25a0:	fc 01       	movw	r30, r24
    25a2:	26 81       	ldd	r18, Z+6	; 0x06
    25a4:	37 81       	ldd	r19, Z+7	; 0x07
    25a6:	89 81       	ldd	r24, Y+1	; 0x01
    25a8:	9a 81       	ldd	r25, Y+2	; 0x02
    25aa:	fc 01       	movw	r30, r24
    25ac:	82 81       	ldd	r24, Z+2	; 0x02
    25ae:	93 81       	ldd	r25, Z+3	; 0x03
    25b0:	28 17       	cp	r18, r24
    25b2:	39 07       	cpc	r19, r25
    25b4:	50 f0       	brcs	.+20     	; 0x25ca <prvCopyDataFromQueue+0x72>
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	9a 81       	ldd	r25, Y+2	; 0x02
    25ba:	fc 01       	movw	r30, r24
    25bc:	20 81       	ld	r18, Z
    25be:	31 81       	ldd	r19, Z+1	; 0x01
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	fc 01       	movw	r30, r24
    25c6:	37 83       	std	Z+7, r19	; 0x07
    25c8:	26 83       	std	Z+6, r18	; 0x06
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	9a 81       	ldd	r25, Y+2	; 0x02
    25ce:	fc 01       	movw	r30, r24
    25d0:	84 8d       	ldd	r24, Z+28	; 0x1c
    25d2:	48 2f       	mov	r20, r24
    25d4:	50 e0       	ldi	r21, 0x00	; 0
    25d6:	89 81       	ldd	r24, Y+1	; 0x01
    25d8:	9a 81       	ldd	r25, Y+2	; 0x02
    25da:	fc 01       	movw	r30, r24
    25dc:	26 81       	ldd	r18, Z+6	; 0x06
    25de:	37 81       	ldd	r19, Z+7	; 0x07
    25e0:	8b 81       	ldd	r24, Y+3	; 0x03
    25e2:	9c 81       	ldd	r25, Y+4	; 0x04
    25e4:	b9 01       	movw	r22, r18
    25e6:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <memcpy>
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	08 95       	ret

000025f8 <prvUnlockQueue>:
    25f8:	cf 93       	push	r28
    25fa:	df 93       	push	r29
    25fc:	00 d0       	rcall	.+0      	; 0x25fe <prvUnlockQueue+0x6>
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <prvUnlockQueue+0x8>
    2600:	cd b7       	in	r28, 0x3d	; 61
    2602:	de b7       	in	r29, 0x3e	; 62
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    2608:	0f b6       	in	r0, 0x3f	; 63
    260a:	f8 94       	cli
    260c:	0f 92       	push	r0
    260e:	8b 81       	ldd	r24, Y+3	; 0x03
    2610:	9c 81       	ldd	r25, Y+4	; 0x04
    2612:	fc 01       	movw	r30, r24
    2614:	86 8d       	ldd	r24, Z+30	; 0x1e
    2616:	89 83       	std	Y+1, r24	; 0x01
    2618:	14 c0       	rjmp	.+40     	; 0x2642 <prvUnlockQueue+0x4a>
    261a:	8b 81       	ldd	r24, Y+3	; 0x03
    261c:	9c 81       	ldd	r25, Y+4	; 0x04
    261e:	fc 01       	movw	r30, r24
    2620:	81 89       	ldd	r24, Z+17	; 0x11
    2622:	88 23       	and	r24, r24
    2624:	51 f0       	breq	.+20     	; 0x263a <prvUnlockQueue+0x42>
    2626:	8b 81       	ldd	r24, Y+3	; 0x03
    2628:	9c 81       	ldd	r25, Y+4	; 0x04
    262a:	41 96       	adiw	r24, 0x11	; 17
    262c:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    2630:	88 23       	and	r24, r24
    2632:	21 f0       	breq	.+8      	; 0x263c <prvUnlockQueue+0x44>
    2634:	0e 94 7f 19 	call	0x32fe	; 0x32fe <vTaskMissedYield>
    2638:	01 c0       	rjmp	.+2      	; 0x263c <prvUnlockQueue+0x44>
    263a:	06 c0       	rjmp	.+12     	; 0x2648 <prvUnlockQueue+0x50>
    263c:	89 81       	ldd	r24, Y+1	; 0x01
    263e:	81 50       	subi	r24, 0x01	; 1
    2640:	89 83       	std	Y+1, r24	; 0x01
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	18 16       	cp	r1, r24
    2646:	4c f3       	brlt	.-46     	; 0x261a <prvUnlockQueue+0x22>
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	2f ef       	ldi	r18, 0xFF	; 255
    264e:	fc 01       	movw	r30, r24
    2650:	26 8f       	std	Z+30, r18	; 0x1e
    2652:	0f 90       	pop	r0
    2654:	0f be       	out	0x3f, r0	; 63
    2656:	0f b6       	in	r0, 0x3f	; 63
    2658:	f8 94       	cli
    265a:	0f 92       	push	r0
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	fc 01       	movw	r30, r24
    2662:	85 8d       	ldd	r24, Z+29	; 0x1d
    2664:	8a 83       	std	Y+2, r24	; 0x02
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <prvUnlockQueue+0x98>
    2668:	8b 81       	ldd	r24, Y+3	; 0x03
    266a:	9c 81       	ldd	r25, Y+4	; 0x04
    266c:	fc 01       	movw	r30, r24
    266e:	80 85       	ldd	r24, Z+8	; 0x08
    2670:	88 23       	and	r24, r24
    2672:	69 f0       	breq	.+26     	; 0x268e <prvUnlockQueue+0x96>
    2674:	8b 81       	ldd	r24, Y+3	; 0x03
    2676:	9c 81       	ldd	r25, Y+4	; 0x04
    2678:	08 96       	adiw	r24, 0x08	; 8
    267a:	0e 94 8f 18 	call	0x311e	; 0x311e <xTaskRemoveFromEventList>
    267e:	88 23       	and	r24, r24
    2680:	11 f0       	breq	.+4      	; 0x2686 <prvUnlockQueue+0x8e>
    2682:	0e 94 7f 19 	call	0x32fe	; 0x32fe <vTaskMissedYield>
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	81 50       	subi	r24, 0x01	; 1
    268a:	8a 83       	std	Y+2, r24	; 0x02
    268c:	01 c0       	rjmp	.+2      	; 0x2690 <prvUnlockQueue+0x98>
    268e:	03 c0       	rjmp	.+6      	; 0x2696 <prvUnlockQueue+0x9e>
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	18 16       	cp	r1, r24
    2694:	4c f3       	brlt	.-46     	; 0x2668 <prvUnlockQueue+0x70>
    2696:	8b 81       	ldd	r24, Y+3	; 0x03
    2698:	9c 81       	ldd	r25, Y+4	; 0x04
    269a:	2f ef       	ldi	r18, 0xFF	; 255
    269c:	fc 01       	movw	r30, r24
    269e:	25 8f       	std	Z+29, r18	; 0x1d
    26a0:	0f 90       	pop	r0
    26a2:	0f be       	out	0x3f, r0	; 63
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	0f 90       	pop	r0
    26aa:	0f 90       	pop	r0
    26ac:	df 91       	pop	r29
    26ae:	cf 91       	pop	r28
    26b0:	08 95       	ret

000026b2 <prvIsQueueEmpty>:
    26b2:	cf 93       	push	r28
    26b4:	df 93       	push	r29
    26b6:	00 d0       	rcall	.+0      	; 0x26b8 <prvIsQueueEmpty+0x6>
    26b8:	1f 92       	push	r1
    26ba:	cd b7       	in	r28, 0x3d	; 61
    26bc:	de b7       	in	r29, 0x3e	; 62
    26be:	9b 83       	std	Y+3, r25	; 0x03
    26c0:	8a 83       	std	Y+2, r24	; 0x02
    26c2:	0f b6       	in	r0, 0x3f	; 63
    26c4:	f8 94       	cli
    26c6:	0f 92       	push	r0
    26c8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ca:	9b 81       	ldd	r25, Y+3	; 0x03
    26cc:	fc 01       	movw	r30, r24
    26ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    26d0:	88 23       	and	r24, r24
    26d2:	19 f4       	brne	.+6      	; 0x26da <prvIsQueueEmpty+0x28>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	89 83       	std	Y+1, r24	; 0x01
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <prvIsQueueEmpty+0x2a>
    26da:	19 82       	std	Y+1, r1	; 0x01
    26dc:	0f 90       	pop	r0
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	89 81       	ldd	r24, Y+1	; 0x01
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
    26e6:	0f 90       	pop	r0
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret

000026ee <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    26ee:	cf 93       	push	r28
    26f0:	df 93       	push	r29
    26f2:	00 d0       	rcall	.+0      	; 0x26f4 <prvIsQueueFull+0x6>
    26f4:	1f 92       	push	r1
    26f6:	cd b7       	in	r28, 0x3d	; 61
    26f8:	de b7       	in	r29, 0x3e	; 62
    26fa:	9b 83       	std	Y+3, r25	; 0x03
    26fc:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    26fe:	0f b6       	in	r0, 0x3f	; 63
    2700:	f8 94       	cli
    2702:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    2704:	8a 81       	ldd	r24, Y+2	; 0x02
    2706:	9b 81       	ldd	r25, Y+3	; 0x03
    2708:	fc 01       	movw	r30, r24
    270a:	22 8d       	ldd	r18, Z+26	; 0x1a
    270c:	8a 81       	ldd	r24, Y+2	; 0x02
    270e:	9b 81       	ldd	r25, Y+3	; 0x03
    2710:	fc 01       	movw	r30, r24
    2712:	83 8d       	ldd	r24, Z+27	; 0x1b
    2714:	28 17       	cp	r18, r24
    2716:	19 f4       	brne	.+6      	; 0x271e <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    2718:	81 e0       	ldi	r24, 0x01	; 1
    271a:	89 83       	std	Y+1, r24	; 0x01
    271c:	01 c0       	rjmp	.+2      	; 0x2720 <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    271e:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    2720:	0f 90       	pop	r0
    2722:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    2724:	89 81       	ldd	r24, Y+1	; 0x01
}
    2726:	0f 90       	pop	r0
    2728:	0f 90       	pop	r0
    272a:	0f 90       	pop	r0
    272c:	df 91       	pop	r29
    272e:	cf 91       	pop	r28
    2730:	08 95       	ret

00002732 <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    2732:	8f 92       	push	r8
    2734:	9f 92       	push	r9
    2736:	af 92       	push	r10
    2738:	bf 92       	push	r11
    273a:	cf 92       	push	r12
    273c:	df 92       	push	r13
    273e:	ef 92       	push	r14
    2740:	ff 92       	push	r15
    2742:	0f 93       	push	r16
    2744:	1f 93       	push	r17
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	60 97       	sbiw	r28, 0x10	; 16
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	f8 94       	cli
    2754:	de bf       	out	0x3e, r29	; 62
    2756:	0f be       	out	0x3f, r0	; 63
    2758:	cd bf       	out	0x3d, r28	; 61
    275a:	9f 83       	std	Y+7, r25	; 0x07
    275c:	8e 83       	std	Y+6, r24	; 0x06
    275e:	79 87       	std	Y+9, r23	; 0x09
    2760:	68 87       	std	Y+8, r22	; 0x08
    2762:	5b 87       	std	Y+11, r21	; 0x0b
    2764:	4a 87       	std	Y+10, r20	; 0x0a
    2766:	3d 87       	std	Y+13, r19	; 0x0d
    2768:	2c 87       	std	Y+12, r18	; 0x0c
    276a:	0e 87       	std	Y+14, r16	; 0x0e
    276c:	f8 8a       	std	Y+16, r15	; 0x10
    276e:	ef 86       	std	Y+15, r14	; 0x0f
    2770:	8a 85       	ldd	r24, Y+10	; 0x0a
    2772:	9b 85       	ldd	r25, Y+11	; 0x0b
    2774:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <pvPortMalloc>
    2778:	9d 83       	std	Y+5, r25	; 0x05
    277a:	8c 83       	std	Y+4, r24	; 0x04
    277c:	8c 81       	ldd	r24, Y+4	; 0x04
    277e:	9d 81       	ldd	r25, Y+5	; 0x05
    2780:	89 2b       	or	r24, r25
    2782:	b9 f0       	breq	.+46     	; 0x27b2 <xTaskCreate+0x80>
    2784:	8c e2       	ldi	r24, 0x2C	; 44
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	0e 94 e4 0b 	call	0x17c8	; 0x17c8 <pvPortMalloc>
    278c:	9a 83       	std	Y+2, r25	; 0x02
    278e:	89 83       	std	Y+1, r24	; 0x01
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	9a 81       	ldd	r25, Y+2	; 0x02
    2794:	89 2b       	or	r24, r25
    2796:	41 f0       	breq	.+16     	; 0x27a8 <xTaskCreate+0x76>
    2798:	89 81       	ldd	r24, Y+1	; 0x01
    279a:	9a 81       	ldd	r25, Y+2	; 0x02
    279c:	2c 81       	ldd	r18, Y+4	; 0x04
    279e:	3d 81       	ldd	r19, Y+5	; 0x05
    27a0:	fc 01       	movw	r30, r24
    27a2:	30 8f       	std	Z+24, r19	; 0x18
    27a4:	27 8b       	std	Z+23, r18	; 0x17
    27a6:	07 c0       	rjmp	.+14     	; 0x27b6 <xTaskCreate+0x84>
    27a8:	8c 81       	ldd	r24, Y+4	; 0x04
    27aa:	9d 81       	ldd	r25, Y+5	; 0x05
    27ac:	0e 94 39 0c 	call	0x1872	; 0x1872 <vPortFree>
    27b0:	02 c0       	rjmp	.+4      	; 0x27b6 <xTaskCreate+0x84>
    27b2:	1a 82       	std	Y+2, r1	; 0x02
    27b4:	19 82       	std	Y+1, r1	; 0x01
    27b6:	89 81       	ldd	r24, Y+1	; 0x01
    27b8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ba:	89 2b       	or	r24, r25
    27bc:	09 f1       	breq	.+66     	; 0x2800 <xTaskCreate+0xce>
    27be:	8a 85       	ldd	r24, Y+10	; 0x0a
    27c0:	9b 85       	ldd	r25, Y+11	; 0x0b
    27c2:	cc 01       	movw	r24, r24
    27c4:	a0 e0       	ldi	r26, 0x00	; 0
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	09 81       	ldd	r16, Y+1	; 0x01
    27ca:	1a 81       	ldd	r17, Y+2	; 0x02
    27cc:	4f 85       	ldd	r20, Y+15	; 0x0f
    27ce:	58 89       	ldd	r21, Y+16	; 0x10
    27d0:	2c 85       	ldd	r18, Y+12	; 0x0c
    27d2:	3d 85       	ldd	r19, Y+13	; 0x0d
    27d4:	68 85       	ldd	r22, Y+8	; 0x08
    27d6:	79 85       	ldd	r23, Y+9	; 0x09
    27d8:	ee 81       	ldd	r30, Y+6	; 0x06
    27da:	ff 81       	ldd	r31, Y+7	; 0x07
    27dc:	81 2c       	mov	r8, r1
    27de:	91 2c       	mov	r9, r1
    27e0:	58 01       	movw	r10, r16
    27e2:	6a 01       	movw	r12, r20
    27e4:	ee 84       	ldd	r14, Y+14	; 0x0e
    27e6:	89 01       	movw	r16, r18
    27e8:	9c 01       	movw	r18, r24
    27ea:	ad 01       	movw	r20, r26
    27ec:	cf 01       	movw	r24, r30
    27ee:	0e 94 16 14 	call	0x282c	; 0x282c <prvInitialiseNewTask>
    27f2:	89 81       	ldd	r24, Y+1	; 0x01
    27f4:	9a 81       	ldd	r25, Y+2	; 0x02
    27f6:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <prvAddNewTaskToReadyList>
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    27fe:	02 c0       	rjmp	.+4      	; 0x2804 <xTaskCreate+0xd2>
    2800:	8f ef       	ldi	r24, 0xFF	; 255
    2802:	8b 83       	std	Y+3, r24	; 0x03
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	60 96       	adiw	r28, 0x10	; 16
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
    2812:	df 91       	pop	r29
    2814:	cf 91       	pop	r28
    2816:	1f 91       	pop	r17
    2818:	0f 91       	pop	r16
    281a:	ff 90       	pop	r15
    281c:	ef 90       	pop	r14
    281e:	df 90       	pop	r13
    2820:	cf 90       	pop	r12
    2822:	bf 90       	pop	r11
    2824:	af 90       	pop	r10
    2826:	9f 90       	pop	r9
    2828:	8f 90       	pop	r8
    282a:	08 95       	ret

0000282c <prvInitialiseNewTask>:
    282c:	8f 92       	push	r8
    282e:	9f 92       	push	r9
    2830:	af 92       	push	r10
    2832:	bf 92       	push	r11
    2834:	cf 92       	push	r12
    2836:	df 92       	push	r13
    2838:	ef 92       	push	r14
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	cf 93       	push	r28
    2840:	df 93       	push	r29
    2842:	cd b7       	in	r28, 0x3d	; 61
    2844:	de b7       	in	r29, 0x3e	; 62
    2846:	64 97       	sbiw	r28, 0x14	; 20
    2848:	0f b6       	in	r0, 0x3f	; 63
    284a:	f8 94       	cli
    284c:	de bf       	out	0x3e, r29	; 62
    284e:	0f be       	out	0x3f, r0	; 63
    2850:	cd bf       	out	0x3d, r28	; 61
    2852:	9d 83       	std	Y+5, r25	; 0x05
    2854:	8c 83       	std	Y+4, r24	; 0x04
    2856:	7f 83       	std	Y+7, r23	; 0x07
    2858:	6e 83       	std	Y+6, r22	; 0x06
    285a:	28 87       	std	Y+8, r18	; 0x08
    285c:	39 87       	std	Y+9, r19	; 0x09
    285e:	4a 87       	std	Y+10, r20	; 0x0a
    2860:	5b 87       	std	Y+11, r21	; 0x0b
    2862:	1d 87       	std	Y+13, r17	; 0x0d
    2864:	0c 87       	std	Y+12, r16	; 0x0c
    2866:	ee 86       	std	Y+14, r14	; 0x0e
    2868:	d8 8a       	std	Y+16, r13	; 0x10
    286a:	cf 86       	std	Y+15, r12	; 0x0f
    286c:	ba 8a       	std	Y+18, r11	; 0x12
    286e:	a9 8a       	std	Y+17, r10	; 0x11
    2870:	9c 8a       	std	Y+20, r9	; 0x14
    2872:	8b 8a       	std	Y+19, r8	; 0x13
    2874:	28 85       	ldd	r18, Y+8	; 0x08
    2876:	39 85       	ldd	r19, Y+9	; 0x09
    2878:	89 89       	ldd	r24, Y+17	; 0x11
    287a:	9a 89       	ldd	r25, Y+18	; 0x12
    287c:	fc 01       	movw	r30, r24
    287e:	87 89       	ldd	r24, Z+23	; 0x17
    2880:	90 8d       	ldd	r25, Z+24	; 0x18
    2882:	a9 01       	movw	r20, r18
    2884:	65 ea       	ldi	r22, 0xA5	; 165
    2886:	70 e0       	ldi	r23, 0x00	; 0
    2888:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <memset>
    288c:	89 89       	ldd	r24, Y+17	; 0x11
    288e:	9a 89       	ldd	r25, Y+18	; 0x12
    2890:	fc 01       	movw	r30, r24
    2892:	27 89       	ldd	r18, Z+23	; 0x17
    2894:	30 8d       	ldd	r19, Z+24	; 0x18
    2896:	88 85       	ldd	r24, Y+8	; 0x08
    2898:	99 85       	ldd	r25, Y+9	; 0x09
    289a:	01 97       	sbiw	r24, 0x01	; 1
    289c:	82 0f       	add	r24, r18
    289e:	93 1f       	adc	r25, r19
    28a0:	9b 83       	std	Y+3, r25	; 0x03
    28a2:	8a 83       	std	Y+2, r24	; 0x02
    28a4:	19 82       	std	Y+1, r1	; 0x01
    28a6:	22 c0       	rjmp	.+68     	; 0x28ec <prvInitialiseNewTask+0xc0>
    28a8:	89 81       	ldd	r24, Y+1	; 0x01
    28aa:	88 2f       	mov	r24, r24
    28ac:	90 e0       	ldi	r25, 0x00	; 0
    28ae:	29 81       	ldd	r18, Y+1	; 0x01
    28b0:	22 2f       	mov	r18, r18
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	4e 81       	ldd	r20, Y+6	; 0x06
    28b6:	5f 81       	ldd	r21, Y+7	; 0x07
    28b8:	24 0f       	add	r18, r20
    28ba:	35 1f       	adc	r19, r21
    28bc:	f9 01       	movw	r30, r18
    28be:	40 81       	ld	r20, Z
    28c0:	29 89       	ldd	r18, Y+17	; 0x11
    28c2:	3a 89       	ldd	r19, Y+18	; 0x12
    28c4:	82 0f       	add	r24, r18
    28c6:	93 1f       	adc	r25, r19
    28c8:	49 96       	adiw	r24, 0x19	; 25
    28ca:	fc 01       	movw	r30, r24
    28cc:	40 83       	st	Z, r20
    28ce:	89 81       	ldd	r24, Y+1	; 0x01
    28d0:	88 2f       	mov	r24, r24
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	2e 81       	ldd	r18, Y+6	; 0x06
    28d6:	3f 81       	ldd	r19, Y+7	; 0x07
    28d8:	82 0f       	add	r24, r18
    28da:	93 1f       	adc	r25, r19
    28dc:	fc 01       	movw	r30, r24
    28de:	80 81       	ld	r24, Z
    28e0:	88 23       	and	r24, r24
    28e2:	09 f4       	brne	.+2      	; 0x28e6 <prvInitialiseNewTask+0xba>
    28e4:	06 c0       	rjmp	.+12     	; 0x28f2 <prvInitialiseNewTask+0xc6>
    28e6:	89 81       	ldd	r24, Y+1	; 0x01
    28e8:	8f 5f       	subi	r24, 0xFF	; 255
    28ea:	89 83       	std	Y+1, r24	; 0x01
    28ec:	89 81       	ldd	r24, Y+1	; 0x01
    28ee:	88 30       	cpi	r24, 0x08	; 8
    28f0:	d8 f2       	brcs	.-74     	; 0x28a8 <prvInitialiseNewTask+0x7c>
    28f2:	89 89       	ldd	r24, Y+17	; 0x11
    28f4:	9a 89       	ldd	r25, Y+18	; 0x12
    28f6:	fc 01       	movw	r30, r24
    28f8:	10 a2       	std	Z+32, r1	; 0x20
    28fa:	8e 85       	ldd	r24, Y+14	; 0x0e
    28fc:	84 30       	cpi	r24, 0x04	; 4
    28fe:	10 f0       	brcs	.+4      	; 0x2904 <prvInitialiseNewTask+0xd8>
    2900:	83 e0       	ldi	r24, 0x03	; 3
    2902:	8e 87       	std	Y+14, r24	; 0x0e
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	9a 89       	ldd	r25, Y+18	; 0x12
    2908:	2e 85       	ldd	r18, Y+14	; 0x0e
    290a:	fc 01       	movw	r30, r24
    290c:	26 8b       	std	Z+22, r18	; 0x16
    290e:	89 89       	ldd	r24, Y+17	; 0x11
    2910:	9a 89       	ldd	r25, Y+18	; 0x12
    2912:	2e 85       	ldd	r18, Y+14	; 0x0e
    2914:	fc 01       	movw	r30, r24
    2916:	23 a3       	std	Z+35, r18	; 0x23
    2918:	89 89       	ldd	r24, Y+17	; 0x11
    291a:	9a 89       	ldd	r25, Y+18	; 0x12
    291c:	fc 01       	movw	r30, r24
    291e:	14 a2       	std	Z+36, r1	; 0x24
    2920:	89 89       	ldd	r24, Y+17	; 0x11
    2922:	9a 89       	ldd	r25, Y+18	; 0x12
    2924:	02 96       	adiw	r24, 0x02	; 2
    2926:	0e 94 bf 07 	call	0xf7e	; 0xf7e <vListInitialiseItem>
    292a:	89 89       	ldd	r24, Y+17	; 0x11
    292c:	9a 89       	ldd	r25, Y+18	; 0x12
    292e:	0c 96       	adiw	r24, 0x0c	; 12
    2930:	0e 94 bf 07 	call	0xf7e	; 0xf7e <vListInitialiseItem>
    2934:	89 89       	ldd	r24, Y+17	; 0x11
    2936:	9a 89       	ldd	r25, Y+18	; 0x12
    2938:	29 89       	ldd	r18, Y+17	; 0x11
    293a:	3a 89       	ldd	r19, Y+18	; 0x12
    293c:	fc 01       	movw	r30, r24
    293e:	31 87       	std	Z+9, r19	; 0x09
    2940:	20 87       	std	Z+8, r18	; 0x08
    2942:	8e 85       	ldd	r24, Y+14	; 0x0e
    2944:	88 2f       	mov	r24, r24
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	24 e0       	ldi	r18, 0x04	; 4
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	28 1b       	sub	r18, r24
    294e:	39 0b       	sbc	r19, r25
    2950:	89 89       	ldd	r24, Y+17	; 0x11
    2952:	9a 89       	ldd	r25, Y+18	; 0x12
    2954:	fc 01       	movw	r30, r24
    2956:	35 87       	std	Z+13, r19	; 0x0d
    2958:	24 87       	std	Z+12, r18	; 0x0c
    295a:	89 89       	ldd	r24, Y+17	; 0x11
    295c:	9a 89       	ldd	r25, Y+18	; 0x12
    295e:	29 89       	ldd	r18, Y+17	; 0x11
    2960:	3a 89       	ldd	r19, Y+18	; 0x12
    2962:	fc 01       	movw	r30, r24
    2964:	33 8b       	std	Z+19, r19	; 0x13
    2966:	22 8b       	std	Z+18, r18	; 0x12
    2968:	89 89       	ldd	r24, Y+17	; 0x11
    296a:	9a 89       	ldd	r25, Y+18	; 0x12
    296c:	fc 01       	movw	r30, r24
    296e:	16 a2       	std	Z+38, r1	; 0x26
    2970:	15 a2       	std	Z+37, r1	; 0x25
    2972:	89 89       	ldd	r24, Y+17	; 0x11
    2974:	9a 89       	ldd	r25, Y+18	; 0x12
    2976:	fc 01       	movw	r30, r24
    2978:	17 a2       	std	Z+39, r1	; 0x27
    297a:	10 a6       	std	Z+40, r1	; 0x28
    297c:	11 a6       	std	Z+41, r1	; 0x29
    297e:	12 a6       	std	Z+42, r1	; 0x2a
    2980:	89 89       	ldd	r24, Y+17	; 0x11
    2982:	9a 89       	ldd	r25, Y+18	; 0x12
    2984:	fc 01       	movw	r30, r24
    2986:	13 a6       	std	Z+43, r1	; 0x2b
    2988:	4c 85       	ldd	r20, Y+12	; 0x0c
    298a:	5d 85       	ldd	r21, Y+13	; 0x0d
    298c:	2c 81       	ldd	r18, Y+4	; 0x04
    298e:	3d 81       	ldd	r19, Y+5	; 0x05
    2990:	8a 81       	ldd	r24, Y+2	; 0x02
    2992:	9b 81       	ldd	r25, Y+3	; 0x03
    2994:	b9 01       	movw	r22, r18
    2996:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <pxPortInitialiseStack>
    299a:	9c 01       	movw	r18, r24
    299c:	89 89       	ldd	r24, Y+17	; 0x11
    299e:	9a 89       	ldd	r25, Y+18	; 0x12
    29a0:	fc 01       	movw	r30, r24
    29a2:	31 83       	std	Z+1, r19	; 0x01
    29a4:	20 83       	st	Z, r18
    29a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29a8:	98 89       	ldd	r25, Y+16	; 0x10
    29aa:	89 2b       	or	r24, r25
    29ac:	39 f0       	breq	.+14     	; 0x29bc <prvInitialiseNewTask+0x190>
    29ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    29b0:	98 89       	ldd	r25, Y+16	; 0x10
    29b2:	29 89       	ldd	r18, Y+17	; 0x11
    29b4:	3a 89       	ldd	r19, Y+18	; 0x12
    29b6:	fc 01       	movw	r30, r24
    29b8:	31 83       	std	Z+1, r19	; 0x01
    29ba:	20 83       	st	Z, r18
    29bc:	64 96       	adiw	r28, 0x14	; 20
    29be:	0f b6       	in	r0, 0x3f	; 63
    29c0:	f8 94       	cli
    29c2:	de bf       	out	0x3e, r29	; 62
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	cd bf       	out	0x3d, r28	; 61
    29c8:	df 91       	pop	r29
    29ca:	cf 91       	pop	r28
    29cc:	1f 91       	pop	r17
    29ce:	0f 91       	pop	r16
    29d0:	ef 90       	pop	r14
    29d2:	df 90       	pop	r13
    29d4:	cf 90       	pop	r12
    29d6:	bf 90       	pop	r11
    29d8:	af 90       	pop	r10
    29da:	9f 90       	pop	r9
    29dc:	8f 90       	pop	r8
    29de:	08 95       	ret

000029e0 <prvAddNewTaskToReadyList>:
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <prvAddNewTaskToReadyList+0x6>
    29e6:	cd b7       	in	r28, 0x3d	; 61
    29e8:	de b7       	in	r29, 0x3e	; 62
    29ea:	9a 83       	std	Y+2, r25	; 0x02
    29ec:	89 83       	std	Y+1, r24	; 0x01
    29ee:	0f b6       	in	r0, 0x3f	; 63
    29f0:	f8 94       	cli
    29f2:	0f 92       	push	r0
    29f4:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    29f8:	8f 5f       	subi	r24, 0xFF	; 255
    29fa:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <uxCurrentNumberOfTasks>
    29fe:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2a02:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2a06:	89 2b       	or	r24, r25
    2a08:	69 f4       	brne	.+26     	; 0x2a24 <prvAddNewTaskToReadyList+0x44>
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    2a12:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    2a16:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    2a1a:	81 30       	cpi	r24, 0x01	; 1
    2a1c:	c9 f4       	brne	.+50     	; 0x2a50 <prvAddNewTaskToReadyList+0x70>
    2a1e:	0e 94 9b 19 	call	0x3336	; 0x3336 <prvInitialiseTaskLists>
    2a22:	16 c0       	rjmp	.+44     	; 0x2a50 <prvAddNewTaskToReadyList+0x70>
    2a24:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xSchedulerRunning>
    2a28:	88 23       	and	r24, r24
    2a2a:	91 f4       	brne	.+36     	; 0x2a50 <prvAddNewTaskToReadyList+0x70>
    2a2c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2a30:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2a34:	fc 01       	movw	r30, r24
    2a36:	26 89       	ldd	r18, Z+22	; 0x16
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	86 89       	ldd	r24, Z+22	; 0x16
    2a40:	82 17       	cp	r24, r18
    2a42:	30 f0       	brcs	.+12     	; 0x2a50 <prvAddNewTaskToReadyList+0x70>
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	9a 81       	ldd	r25, Y+2	; 0x02
    2a48:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    2a4c:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    2a50:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <uxTaskNumber>
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTaskNumber>
    2a5a:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <uxTaskNumber>
    2a5e:	89 81       	ldd	r24, Y+1	; 0x01
    2a60:	9a 81       	ldd	r25, Y+2	; 0x02
    2a62:	fc 01       	movw	r30, r24
    2a64:	21 a3       	std	Z+33, r18	; 0x21
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	96 89       	ldd	r25, Z+22	; 0x16
    2a6e:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2a72:	89 17       	cp	r24, r25
    2a74:	30 f4       	brcc	.+12     	; 0x2a82 <prvAddNewTaskToReadyList+0xa2>
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	9a 81       	ldd	r25, Y+2	; 0x02
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	86 89       	ldd	r24, Z+22	; 0x16
    2a7e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2a82:	89 81       	ldd	r24, Y+1	; 0x01
    2a84:	9a 81       	ldd	r25, Y+2	; 0x02
    2a86:	ac 01       	movw	r20, r24
    2a88:	4e 5f       	subi	r20, 0xFE	; 254
    2a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a8c:	89 81       	ldd	r24, Y+1	; 0x01
    2a8e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a90:	fc 01       	movw	r30, r24
    2a92:	86 89       	ldd	r24, Z+22	; 0x16
    2a94:	28 2f       	mov	r18, r24
    2a96:	30 e0       	ldi	r19, 0x00	; 0
    2a98:	c9 01       	movw	r24, r18
    2a9a:	88 0f       	add	r24, r24
    2a9c:	99 1f       	adc	r25, r25
    2a9e:	88 0f       	add	r24, r24
    2aa0:	99 1f       	adc	r25, r25
    2aa2:	88 0f       	add	r24, r24
    2aa4:	99 1f       	adc	r25, r25
    2aa6:	82 0f       	add	r24, r18
    2aa8:	93 1f       	adc	r25, r19
    2aaa:	84 58       	subi	r24, 0x84	; 132
    2aac:	9a 4f       	sbci	r25, 0xFA	; 250
    2aae:	ba 01       	movw	r22, r20
    2ab0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    2ab4:	0f 90       	pop	r0
    2ab6:	0f be       	out	0x3f, r0	; 63
    2ab8:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xSchedulerRunning>
    2abc:	88 23       	and	r24, r24
    2abe:	71 f0       	breq	.+28     	; 0x2adc <prvAddNewTaskToReadyList+0xfc>
    2ac0:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2ac4:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2ac8:	fc 01       	movw	r30, r24
    2aca:	26 89       	ldd	r18, Z+22	; 0x16
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad0:	fc 01       	movw	r30, r24
    2ad2:	86 89       	ldd	r24, Z+22	; 0x16
    2ad4:	28 17       	cp	r18, r24
    2ad6:	10 f4       	brcc	.+4      	; 0x2adc <prvAddNewTaskToReadyList+0xfc>
    2ad8:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2adc:	0f 90       	pop	r0
    2ade:	0f 90       	pop	r0
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	08 95       	ret

00002ae6 <vTaskDelayUntil>:
    2ae6:	cf 93       	push	r28
    2ae8:	df 93       	push	r29
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	2a 97       	sbiw	r28, 0x0a	; 10
    2af0:	0f b6       	in	r0, 0x3f	; 63
    2af2:	f8 94       	cli
    2af4:	de bf       	out	0x3e, r29	; 62
    2af6:	0f be       	out	0x3f, r0	; 63
    2af8:	cd bf       	out	0x3d, r28	; 61
    2afa:	98 87       	std	Y+8, r25	; 0x08
    2afc:	8f 83       	std	Y+7, r24	; 0x07
    2afe:	7a 87       	std	Y+10, r23	; 0x0a
    2b00:	69 87       	std	Y+9, r22	; 0x09
    2b02:	19 82       	std	Y+1, r1	; 0x01
    2b04:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
    2b08:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    2b0c:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    2b10:	9b 83       	std	Y+3, r25	; 0x03
    2b12:	8a 83       	std	Y+2, r24	; 0x02
    2b14:	8f 81       	ldd	r24, Y+7	; 0x07
    2b16:	98 85       	ldd	r25, Y+8	; 0x08
    2b18:	fc 01       	movw	r30, r24
    2b1a:	20 81       	ld	r18, Z
    2b1c:	31 81       	ldd	r19, Z+1	; 0x01
    2b1e:	89 85       	ldd	r24, Y+9	; 0x09
    2b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b22:	82 0f       	add	r24, r18
    2b24:	93 1f       	adc	r25, r19
    2b26:	9d 83       	std	Y+5, r25	; 0x05
    2b28:	8c 83       	std	Y+4, r24	; 0x04
    2b2a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b2c:	98 85       	ldd	r25, Y+8	; 0x08
    2b2e:	fc 01       	movw	r30, r24
    2b30:	20 81       	ld	r18, Z
    2b32:	31 81       	ldd	r19, Z+1	; 0x01
    2b34:	8a 81       	ldd	r24, Y+2	; 0x02
    2b36:	9b 81       	ldd	r25, Y+3	; 0x03
    2b38:	82 17       	cp	r24, r18
    2b3a:	93 07       	cpc	r25, r19
    2b3c:	a0 f4       	brcc	.+40     	; 0x2b66 <vTaskDelayUntil+0x80>
    2b3e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b40:	98 85       	ldd	r25, Y+8	; 0x08
    2b42:	fc 01       	movw	r30, r24
    2b44:	20 81       	ld	r18, Z
    2b46:	31 81       	ldd	r19, Z+1	; 0x01
    2b48:	8c 81       	ldd	r24, Y+4	; 0x04
    2b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b4c:	82 17       	cp	r24, r18
    2b4e:	93 07       	cpc	r25, r19
    2b50:	e8 f4       	brcc	.+58     	; 0x2b8c <vTaskDelayUntil+0xa6>
    2b52:	2c 81       	ldd	r18, Y+4	; 0x04
    2b54:	3d 81       	ldd	r19, Y+5	; 0x05
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	9b 81       	ldd	r25, Y+3	; 0x03
    2b5a:	82 17       	cp	r24, r18
    2b5c:	93 07       	cpc	r25, r19
    2b5e:	b0 f4       	brcc	.+44     	; 0x2b8c <vTaskDelayUntil+0xa6>
    2b60:	81 e0       	ldi	r24, 0x01	; 1
    2b62:	89 83       	std	Y+1, r24	; 0x01
    2b64:	13 c0       	rjmp	.+38     	; 0x2b8c <vTaskDelayUntil+0xa6>
    2b66:	8f 81       	ldd	r24, Y+7	; 0x07
    2b68:	98 85       	ldd	r25, Y+8	; 0x08
    2b6a:	fc 01       	movw	r30, r24
    2b6c:	20 81       	ld	r18, Z
    2b6e:	31 81       	ldd	r19, Z+1	; 0x01
    2b70:	8c 81       	ldd	r24, Y+4	; 0x04
    2b72:	9d 81       	ldd	r25, Y+5	; 0x05
    2b74:	82 17       	cp	r24, r18
    2b76:	93 07       	cpc	r25, r19
    2b78:	38 f0       	brcs	.+14     	; 0x2b88 <vTaskDelayUntil+0xa2>
    2b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	9b 81       	ldd	r25, Y+3	; 0x03
    2b82:	82 17       	cp	r24, r18
    2b84:	93 07       	cpc	r25, r19
    2b86:	10 f4       	brcc	.+4      	; 0x2b8c <vTaskDelayUntil+0xa6>
    2b88:	81 e0       	ldi	r24, 0x01	; 1
    2b8a:	89 83       	std	Y+1, r24	; 0x01
    2b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8e:	98 85       	ldd	r25, Y+8	; 0x08
    2b90:	2c 81       	ldd	r18, Y+4	; 0x04
    2b92:	3d 81       	ldd	r19, Y+5	; 0x05
    2b94:	fc 01       	movw	r30, r24
    2b96:	31 83       	std	Z+1, r19	; 0x01
    2b98:	20 83       	st	Z, r18
    2b9a:	89 81       	ldd	r24, Y+1	; 0x01
    2b9c:	88 23       	and	r24, r24
    2b9e:	59 f0       	breq	.+22     	; 0x2bb6 <vTaskDelayUntil+0xd0>
    2ba0:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba2:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	a9 01       	movw	r20, r18
    2baa:	48 1b       	sub	r20, r24
    2bac:	59 0b       	sbc	r21, r25
    2bae:	ca 01       	movw	r24, r20
    2bb0:	60 e0       	ldi	r22, 0x00	; 0
    2bb2:	0e 94 8b 1b 	call	0x3716	; 0x3716 <prvAddCurrentTaskToDelayedList>
    2bb6:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    2bba:	8e 83       	std	Y+6, r24	; 0x06
    2bbc:	8e 81       	ldd	r24, Y+6	; 0x06
    2bbe:	88 23       	and	r24, r24
    2bc0:	11 f4       	brne	.+4      	; 0x2bc6 <vTaskDelayUntil+0xe0>
    2bc2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2bc6:	2a 96       	adiw	r28, 0x0a	; 10
    2bc8:	0f b6       	in	r0, 0x3f	; 63
    2bca:	f8 94       	cli
    2bcc:	de bf       	out	0x3e, r29	; 62
    2bce:	0f be       	out	0x3f, r0	; 63
    2bd0:	cd bf       	out	0x3d, r28	; 61
    2bd2:	df 91       	pop	r29
    2bd4:	cf 91       	pop	r28
    2bd6:	08 95       	ret

00002bd8 <vTaskDelay>:
    2bd8:	cf 93       	push	r28
    2bda:	df 93       	push	r29
    2bdc:	00 d0       	rcall	.+0      	; 0x2bde <vTaskDelay+0x6>
    2bde:	1f 92       	push	r1
    2be0:	cd b7       	in	r28, 0x3d	; 61
    2be2:	de b7       	in	r29, 0x3e	; 62
    2be4:	9b 83       	std	Y+3, r25	; 0x03
    2be6:	8a 83       	std	Y+2, r24	; 0x02
    2be8:	19 82       	std	Y+1, r1	; 0x01
    2bea:	8a 81       	ldd	r24, Y+2	; 0x02
    2bec:	9b 81       	ldd	r25, Y+3	; 0x03
    2bee:	89 2b       	or	r24, r25
    2bf0:	51 f0       	breq	.+20     	; 0x2c06 <vTaskDelay+0x2e>
    2bf2:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
    2bf6:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf8:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfa:	60 e0       	ldi	r22, 0x00	; 0
    2bfc:	0e 94 8b 1b 	call	0x3716	; 0x3716 <prvAddCurrentTaskToDelayedList>
    2c00:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    2c04:	89 83       	std	Y+1, r24	; 0x01
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	88 23       	and	r24, r24
    2c0a:	11 f4       	brne	.+4      	; 0x2c10 <vTaskDelay+0x38>
    2c0c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	08 95       	ret

00002c1c <vTaskStartScheduler>:
    2c1c:	ef 92       	push	r14
    2c1e:	ff 92       	push	r15
    2c20:	0f 93       	push	r16
    2c22:	cf 93       	push	r28
    2c24:	df 93       	push	r29
    2c26:	1f 92       	push	r1
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	0f 2e       	mov	r0, r31
    2c2e:	f4 ed       	ldi	r31, 0xD4	; 212
    2c30:	ef 2e       	mov	r14, r31
    2c32:	f5 e0       	ldi	r31, 0x05	; 5
    2c34:	ff 2e       	mov	r15, r31
    2c36:	f0 2d       	mov	r31, r0
    2c38:	00 e0       	ldi	r16, 0x00	; 0
    2c3a:	20 e0       	ldi	r18, 0x00	; 0
    2c3c:	30 e0       	ldi	r19, 0x00	; 0
    2c3e:	45 e5       	ldi	r20, 0x55	; 85
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	60 e5       	ldi	r22, 0x50	; 80
    2c44:	71 e0       	ldi	r23, 0x01	; 1
    2c46:	89 e8       	ldi	r24, 0x89	; 137
    2c48:	99 e1       	ldi	r25, 0x19	; 25
    2c4a:	0e 94 99 13 	call	0x2732	; 0x2732 <xTaskCreate>
    2c4e:	89 83       	std	Y+1, r24	; 0x01
    2c50:	89 81       	ldd	r24, Y+1	; 0x01
    2c52:	81 30       	cpi	r24, 0x01	; 1
    2c54:	81 f4       	brne	.+32     	; 0x2c76 <vTaskStartScheduler+0x5a>
    2c56:	f8 94       	cli
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	9f ef       	ldi	r25, 0xFF	; 255
    2c5c:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2c60:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2c64:	81 e0       	ldi	r24, 0x01	; 1
    2c66:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <xSchedulerRunning>
    2c6a:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <xTickCount+0x1>
    2c6e:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <xTickCount>
    2c72:	0e 94 95 0a 	call	0x152a	; 0x152a <xPortStartScheduler>
    2c76:	0f 90       	pop	r0
    2c78:	df 91       	pop	r29
    2c7a:	cf 91       	pop	r28
    2c7c:	0f 91       	pop	r16
    2c7e:	ff 90       	pop	r15
    2c80:	ef 90       	pop	r14
    2c82:	08 95       	ret

00002c84 <vTaskSuspendAll>:
    2c84:	cf 93       	push	r28
    2c86:	df 93       	push	r29
    2c88:	cd b7       	in	r28, 0x3d	; 61
    2c8a:	de b7       	in	r29, 0x3e	; 62
    2c8c:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2c90:	8f 5f       	subi	r24, 0xFF	; 255
    2c92:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <uxSchedulerSuspended>
    2c96:	df 91       	pop	r29
    2c98:	cf 91       	pop	r28
    2c9a:	08 95       	ret

00002c9c <xTaskResumeAll>:
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <xTaskResumeAll+0x6>
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <xTaskResumeAll+0x8>
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	1a 82       	std	Y+2, r1	; 0x02
    2caa:	19 82       	std	Y+1, r1	; 0x01
    2cac:	1b 82       	std	Y+3, r1	; 0x03
    2cae:	0f b6       	in	r0, 0x3f	; 63
    2cb0:	f8 94       	cli
    2cb2:	0f 92       	push	r0
    2cb4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2cb8:	81 50       	subi	r24, 0x01	; 1
    2cba:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <uxSchedulerSuspended>
    2cbe:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2cc2:	88 23       	and	r24, r24
    2cc4:	09 f0       	breq	.+2      	; 0x2cc8 <xTaskResumeAll+0x2c>
    2cc6:	77 c0       	rjmp	.+238    	; 0x2db6 <xTaskResumeAll+0x11a>
    2cc8:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    2ccc:	88 23       	and	r24, r24
    2cce:	09 f4       	brne	.+2      	; 0x2cd2 <xTaskResumeAll+0x36>
    2cd0:	72 c0       	rjmp	.+228    	; 0x2db6 <xTaskResumeAll+0x11a>
    2cd2:	49 c0       	rjmp	.+146    	; 0x2d66 <xTaskResumeAll+0xca>
    2cd4:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <xPendingReadyList+0x5>
    2cd8:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <xPendingReadyList+0x6>
    2cdc:	fc 01       	movw	r30, r24
    2cde:	86 81       	ldd	r24, Z+6	; 0x06
    2ce0:	97 81       	ldd	r25, Z+7	; 0x07
    2ce2:	9a 83       	std	Y+2, r25	; 0x02
    2ce4:	89 83       	std	Y+1, r24	; 0x01
    2ce6:	89 81       	ldd	r24, Y+1	; 0x01
    2ce8:	9a 81       	ldd	r25, Y+2	; 0x02
    2cea:	0c 96       	adiw	r24, 0x0c	; 12
    2cec:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    2cf0:	89 81       	ldd	r24, Y+1	; 0x01
    2cf2:	9a 81       	ldd	r25, Y+2	; 0x02
    2cf4:	02 96       	adiw	r24, 0x02	; 2
    2cf6:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    2cfa:	89 81       	ldd	r24, Y+1	; 0x01
    2cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    2cfe:	fc 01       	movw	r30, r24
    2d00:	96 89       	ldd	r25, Z+22	; 0x16
    2d02:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2d06:	89 17       	cp	r24, r25
    2d08:	30 f4       	brcc	.+12     	; 0x2d16 <xTaskResumeAll+0x7a>
    2d0a:	89 81       	ldd	r24, Y+1	; 0x01
    2d0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d0e:	fc 01       	movw	r30, r24
    2d10:	86 89       	ldd	r24, Z+22	; 0x16
    2d12:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2d16:	89 81       	ldd	r24, Y+1	; 0x01
    2d18:	9a 81       	ldd	r25, Y+2	; 0x02
    2d1a:	ac 01       	movw	r20, r24
    2d1c:	4e 5f       	subi	r20, 0xFE	; 254
    2d1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d20:	89 81       	ldd	r24, Y+1	; 0x01
    2d22:	9a 81       	ldd	r25, Y+2	; 0x02
    2d24:	fc 01       	movw	r30, r24
    2d26:	86 89       	ldd	r24, Z+22	; 0x16
    2d28:	28 2f       	mov	r18, r24
    2d2a:	30 e0       	ldi	r19, 0x00	; 0
    2d2c:	c9 01       	movw	r24, r18
    2d2e:	88 0f       	add	r24, r24
    2d30:	99 1f       	adc	r25, r25
    2d32:	88 0f       	add	r24, r24
    2d34:	99 1f       	adc	r25, r25
    2d36:	88 0f       	add	r24, r24
    2d38:	99 1f       	adc	r25, r25
    2d3a:	82 0f       	add	r24, r18
    2d3c:	93 1f       	adc	r25, r19
    2d3e:	84 58       	subi	r24, 0x84	; 132
    2d40:	9a 4f       	sbci	r25, 0xFA	; 250
    2d42:	ba 01       	movw	r22, r20
    2d44:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	fc 01       	movw	r30, r24
    2d4e:	26 89       	ldd	r18, Z+22	; 0x16
    2d50:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2d54:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2d58:	fc 01       	movw	r30, r24
    2d5a:	86 89       	ldd	r24, Z+22	; 0x16
    2d5c:	28 17       	cp	r18, r24
    2d5e:	18 f0       	brcs	.+6      	; 0x2d66 <xTaskResumeAll+0xca>
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2d66:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <xPendingReadyList>
    2d6a:	88 23       	and	r24, r24
    2d6c:	09 f0       	breq	.+2      	; 0x2d70 <xTaskResumeAll+0xd4>
    2d6e:	b2 cf       	rjmp	.-156    	; 0x2cd4 <xTaskResumeAll+0x38>
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	9a 81       	ldd	r25, Y+2	; 0x02
    2d74:	89 2b       	or	r24, r25
    2d76:	11 f0       	breq	.+4      	; 0x2d7c <xTaskResumeAll+0xe0>
    2d78:	0e 94 2f 1a 	call	0x345e	; 0x345e <prvResetNextTaskUnblockTime>
    2d7c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxPendedTicks>
    2d80:	8c 83       	std	Y+4, r24	; 0x04
    2d82:	8c 81       	ldd	r24, Y+4	; 0x04
    2d84:	88 23       	and	r24, r24
    2d86:	79 f0       	breq	.+30     	; 0x2da6 <xTaskResumeAll+0x10a>
    2d88:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <xTaskIncrementTick>
    2d8c:	88 23       	and	r24, r24
    2d8e:	19 f0       	breq	.+6      	; 0x2d96 <xTaskResumeAll+0xfa>
    2d90:	81 e0       	ldi	r24, 0x01	; 1
    2d92:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2d96:	8c 81       	ldd	r24, Y+4	; 0x04
    2d98:	81 50       	subi	r24, 0x01	; 1
    2d9a:	8c 83       	std	Y+4, r24	; 0x04
    2d9c:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9e:	88 23       	and	r24, r24
    2da0:	99 f7       	brne	.-26     	; 0x2d88 <xTaskResumeAll+0xec>
    2da2:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <uxPendedTicks>
    2da6:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <xYieldPending>
    2daa:	88 23       	and	r24, r24
    2dac:	21 f0       	breq	.+8      	; 0x2db6 <xTaskResumeAll+0x11a>
    2dae:	81 e0       	ldi	r24, 0x01	; 1
    2db0:	8b 83       	std	Y+3, r24	; 0x03
    2db2:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    2db6:	0f 90       	pop	r0
    2db8:	0f be       	out	0x3f, r0	; 63
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	0f 90       	pop	r0
    2dbe:	0f 90       	pop	r0
    2dc0:	0f 90       	pop	r0
    2dc2:	0f 90       	pop	r0
    2dc4:	df 91       	pop	r29
    2dc6:	cf 91       	pop	r28
    2dc8:	08 95       	ret

00002dca <xTaskGetTickCount>:
    2dca:	cf 93       	push	r28
    2dcc:	df 93       	push	r29
    2dce:	00 d0       	rcall	.+0      	; 0x2dd0 <xTaskGetTickCount+0x6>
    2dd0:	cd b7       	in	r28, 0x3d	; 61
    2dd2:	de b7       	in	r29, 0x3e	; 62
    2dd4:	0f b6       	in	r0, 0x3f	; 63
    2dd6:	f8 94       	cli
    2dd8:	0f 92       	push	r0
    2dda:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    2dde:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    2de2:	9a 83       	std	Y+2, r25	; 0x02
    2de4:	89 83       	std	Y+1, r24	; 0x01
    2de6:	0f 90       	pop	r0
    2de8:	0f be       	out	0x3f, r0	; 63
    2dea:	89 81       	ldd	r24, Y+1	; 0x01
    2dec:	9a 81       	ldd	r25, Y+2	; 0x02
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
    2df2:	df 91       	pop	r29
    2df4:	cf 91       	pop	r28
    2df6:	08 95       	ret

00002df8 <xTaskIncrementTick>:
    2df8:	cf 93       	push	r28
    2dfa:	df 93       	push	r29
    2dfc:	cd b7       	in	r28, 0x3d	; 61
    2dfe:	de b7       	in	r29, 0x3e	; 62
    2e00:	29 97       	sbiw	r28, 0x09	; 9
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	de bf       	out	0x3e, r29	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	cd bf       	out	0x3d, r28	; 61
    2e0c:	19 82       	std	Y+1, r1	; 0x01
    2e0e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2e12:	88 23       	and	r24, r24
    2e14:	09 f0       	breq	.+2      	; 0x2e18 <xTaskIncrementTick+0x20>
    2e16:	c7 c0       	rjmp	.+398    	; 0x2fa6 <xTaskIncrementTick+0x1ae>
    2e18:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    2e1c:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    2e20:	01 96       	adiw	r24, 0x01	; 1
    2e22:	9b 83       	std	Y+3, r25	; 0x03
    2e24:	8a 83       	std	Y+2, r24	; 0x02
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
    2e28:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2a:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xTickCount+0x1>
    2e2e:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xTickCount>
    2e32:	8a 81       	ldd	r24, Y+2	; 0x02
    2e34:	9b 81       	ldd	r25, Y+3	; 0x03
    2e36:	89 2b       	or	r24, r25
    2e38:	d9 f4       	brne	.+54     	; 0x2e70 <xTaskIncrementTick+0x78>
    2e3a:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2e3e:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2e42:	9d 83       	std	Y+5, r25	; 0x05
    2e44:	8c 83       	std	Y+4, r24	; 0x04
    2e46:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <pxOverflowDelayedTaskList>
    2e4a:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    2e4e:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <pxDelayedTaskList+0x1>
    2e52:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <pxDelayedTaskList>
    2e56:	8c 81       	ldd	r24, Y+4	; 0x04
    2e58:	9d 81       	ldd	r25, Y+5	; 0x05
    2e5a:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    2e5e:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <pxOverflowDelayedTaskList>
    2e62:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    2e66:	8f 5f       	subi	r24, 0xFF	; 255
    2e68:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <xNumOfOverflows>
    2e6c:	0e 94 2f 1a 	call	0x345e	; 0x345e <prvResetNextTaskUnblockTime>
    2e70:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <xNextTaskUnblockTime>
    2e74:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2e78:	2a 81       	ldd	r18, Y+2	; 0x02
    2e7a:	3b 81       	ldd	r19, Y+3	; 0x03
    2e7c:	28 17       	cp	r18, r24
    2e7e:	39 07       	cpc	r19, r25
    2e80:	08 f4       	brcc	.+2      	; 0x2e84 <xTaskIncrementTick+0x8c>
    2e82:	77 c0       	rjmp	.+238    	; 0x2f72 <xTaskIncrementTick+0x17a>
    2e84:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2e88:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2e8c:	fc 01       	movw	r30, r24
    2e8e:	80 81       	ld	r24, Z
    2e90:	88 23       	and	r24, r24
    2e92:	39 f4       	brne	.+14     	; 0x2ea2 <xTaskIncrementTick+0xaa>
    2e94:	8f ef       	ldi	r24, 0xFF	; 255
    2e96:	9f ef       	ldi	r25, 0xFF	; 255
    2e98:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2e9c:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2ea0:	68 c0       	rjmp	.+208    	; 0x2f72 <xTaskIncrementTick+0x17a>
    2ea2:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2ea6:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2eaa:	fc 01       	movw	r30, r24
    2eac:	85 81       	ldd	r24, Z+5	; 0x05
    2eae:	96 81       	ldd	r25, Z+6	; 0x06
    2eb0:	fc 01       	movw	r30, r24
    2eb2:	86 81       	ldd	r24, Z+6	; 0x06
    2eb4:	97 81       	ldd	r25, Z+7	; 0x07
    2eb6:	9f 83       	std	Y+7, r25	; 0x07
    2eb8:	8e 83       	std	Y+6, r24	; 0x06
    2eba:	8e 81       	ldd	r24, Y+6	; 0x06
    2ebc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ebe:	fc 01       	movw	r30, r24
    2ec0:	82 81       	ldd	r24, Z+2	; 0x02
    2ec2:	93 81       	ldd	r25, Z+3	; 0x03
    2ec4:	99 87       	std	Y+9, r25	; 0x09
    2ec6:	88 87       	std	Y+8, r24	; 0x08
    2ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    2eca:	3b 81       	ldd	r19, Y+3	; 0x03
    2ecc:	88 85       	ldd	r24, Y+8	; 0x08
    2ece:	99 85       	ldd	r25, Y+9	; 0x09
    2ed0:	28 17       	cp	r18, r24
    2ed2:	39 07       	cpc	r19, r25
    2ed4:	38 f4       	brcc	.+14     	; 0x2ee4 <xTaskIncrementTick+0xec>
    2ed6:	88 85       	ldd	r24, Y+8	; 0x08
    2ed8:	99 85       	ldd	r25, Y+9	; 0x09
    2eda:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2ede:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2ee2:	47 c0       	rjmp	.+142    	; 0x2f72 <xTaskIncrementTick+0x17a>
    2ee4:	8e 81       	ldd	r24, Y+6	; 0x06
    2ee6:	9f 81       	ldd	r25, Y+7	; 0x07
    2ee8:	02 96       	adiw	r24, 0x02	; 2
    2eea:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    2eee:	8e 81       	ldd	r24, Y+6	; 0x06
    2ef0:	9f 81       	ldd	r25, Y+7	; 0x07
    2ef2:	fc 01       	movw	r30, r24
    2ef4:	84 89       	ldd	r24, Z+20	; 0x14
    2ef6:	95 89       	ldd	r25, Z+21	; 0x15
    2ef8:	89 2b       	or	r24, r25
    2efa:	29 f0       	breq	.+10     	; 0x2f06 <xTaskIncrementTick+0x10e>
    2efc:	8e 81       	ldd	r24, Y+6	; 0x06
    2efe:	9f 81       	ldd	r25, Y+7	; 0x07
    2f00:	0c 96       	adiw	r24, 0x0c	; 12
    2f02:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    2f06:	8e 81       	ldd	r24, Y+6	; 0x06
    2f08:	9f 81       	ldd	r25, Y+7	; 0x07
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	96 89       	ldd	r25, Z+22	; 0x16
    2f0e:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2f12:	89 17       	cp	r24, r25
    2f14:	30 f4       	brcc	.+12     	; 0x2f22 <xTaskIncrementTick+0x12a>
    2f16:	8e 81       	ldd	r24, Y+6	; 0x06
    2f18:	9f 81       	ldd	r25, Y+7	; 0x07
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	86 89       	ldd	r24, Z+22	; 0x16
    2f1e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2f22:	8e 81       	ldd	r24, Y+6	; 0x06
    2f24:	9f 81       	ldd	r25, Y+7	; 0x07
    2f26:	ac 01       	movw	r20, r24
    2f28:	4e 5f       	subi	r20, 0xFE	; 254
    2f2a:	5f 4f       	sbci	r21, 0xFF	; 255
    2f2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2f2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2f30:	fc 01       	movw	r30, r24
    2f32:	86 89       	ldd	r24, Z+22	; 0x16
    2f34:	28 2f       	mov	r18, r24
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	c9 01       	movw	r24, r18
    2f3a:	88 0f       	add	r24, r24
    2f3c:	99 1f       	adc	r25, r25
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 0f       	add	r24, r24
    2f44:	99 1f       	adc	r25, r25
    2f46:	82 0f       	add	r24, r18
    2f48:	93 1f       	adc	r25, r19
    2f4a:	84 58       	subi	r24, 0x84	; 132
    2f4c:	9a 4f       	sbci	r25, 0xFA	; 250
    2f4e:	ba 01       	movw	r22, r20
    2f50:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    2f54:	8e 81       	ldd	r24, Y+6	; 0x06
    2f56:	9f 81       	ldd	r25, Y+7	; 0x07
    2f58:	fc 01       	movw	r30, r24
    2f5a:	26 89       	ldd	r18, Z+22	; 0x16
    2f5c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2f60:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2f64:	fc 01       	movw	r30, r24
    2f66:	86 89       	ldd	r24, Z+22	; 0x16
    2f68:	28 17       	cp	r18, r24
    2f6a:	10 f0       	brcs	.+4      	; 0x2f70 <xTaskIncrementTick+0x178>
    2f6c:	81 e0       	ldi	r24, 0x01	; 1
    2f6e:	89 83       	std	Y+1, r24	; 0x01
    2f70:	89 cf       	rjmp	.-238    	; 0x2e84 <xTaskIncrementTick+0x8c>
    2f72:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2f76:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2f7a:	fc 01       	movw	r30, r24
    2f7c:	86 89       	ldd	r24, Z+22	; 0x16
    2f7e:	28 2f       	mov	r18, r24
    2f80:	30 e0       	ldi	r19, 0x00	; 0
    2f82:	c9 01       	movw	r24, r18
    2f84:	88 0f       	add	r24, r24
    2f86:	99 1f       	adc	r25, r25
    2f88:	88 0f       	add	r24, r24
    2f8a:	99 1f       	adc	r25, r25
    2f8c:	88 0f       	add	r24, r24
    2f8e:	99 1f       	adc	r25, r25
    2f90:	82 0f       	add	r24, r18
    2f92:	93 1f       	adc	r25, r19
    2f94:	84 58       	subi	r24, 0x84	; 132
    2f96:	9a 4f       	sbci	r25, 0xFA	; 250
    2f98:	fc 01       	movw	r30, r24
    2f9a:	80 81       	ld	r24, Z
    2f9c:	82 30       	cpi	r24, 0x02	; 2
    2f9e:	10 f0       	brcs	.+4      	; 0x2fa4 <xTaskIncrementTick+0x1ac>
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	89 83       	std	Y+1, r24	; 0x01
    2fa4:	05 c0       	rjmp	.+10     	; 0x2fb0 <xTaskIncrementTick+0x1b8>
    2fa6:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxPendedTicks>
    2faa:	8f 5f       	subi	r24, 0xFF	; 255
    2fac:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <uxPendedTicks>
    2fb0:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <xYieldPending>
    2fb4:	88 23       	and	r24, r24
    2fb6:	11 f0       	breq	.+4      	; 0x2fbc <xTaskIncrementTick+0x1c4>
    2fb8:	81 e0       	ldi	r24, 0x01	; 1
    2fba:	89 83       	std	Y+1, r24	; 0x01
    2fbc:	89 81       	ldd	r24, Y+1	; 0x01
    2fbe:	29 96       	adiw	r28, 0x09	; 9
    2fc0:	0f b6       	in	r0, 0x3f	; 63
    2fc2:	f8 94       	cli
    2fc4:	de bf       	out	0x3e, r29	; 62
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	cd bf       	out	0x3d, r28	; 61
    2fca:	df 91       	pop	r29
    2fcc:	cf 91       	pop	r28
    2fce:	08 95       	ret

00002fd0 <vTaskSwitchContext>:
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	00 d0       	rcall	.+0      	; 0x2fd6 <vTaskSwitchContext+0x6>
    2fd6:	1f 92       	push	r1
    2fd8:	cd b7       	in	r28, 0x3d	; 61
    2fda:	de b7       	in	r29, 0x3e	; 62
    2fdc:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2fe0:	88 23       	and	r24, r24
    2fe2:	21 f0       	breq	.+8      	; 0x2fec <vTaskSwitchContext+0x1c>
    2fe4:	81 e0       	ldi	r24, 0x01	; 1
    2fe6:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2fea:	71 c0       	rjmp	.+226    	; 0x30ce <vTaskSwitchContext+0xfe>
    2fec:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <xYieldPending>
    2ff0:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2ff4:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	85 a1       	ldd	r24, Z+37	; 0x25
    2ffc:	96 a1       	ldd	r25, Z+38	; 0x26
    2ffe:	0e 94 dd 06 	call	0xdba	; 0xdba <switch_out>
    3002:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    3006:	89 83       	std	Y+1, r24	; 0x01
    3008:	03 c0       	rjmp	.+6      	; 0x3010 <vTaskSwitchContext+0x40>
    300a:	89 81       	ldd	r24, Y+1	; 0x01
    300c:	81 50       	subi	r24, 0x01	; 1
    300e:	89 83       	std	Y+1, r24	; 0x01
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	28 2f       	mov	r18, r24
    3014:	30 e0       	ldi	r19, 0x00	; 0
    3016:	c9 01       	movw	r24, r18
    3018:	88 0f       	add	r24, r24
    301a:	99 1f       	adc	r25, r25
    301c:	88 0f       	add	r24, r24
    301e:	99 1f       	adc	r25, r25
    3020:	88 0f       	add	r24, r24
    3022:	99 1f       	adc	r25, r25
    3024:	82 0f       	add	r24, r18
    3026:	93 1f       	adc	r25, r19
    3028:	84 58       	subi	r24, 0x84	; 132
    302a:	9a 4f       	sbci	r25, 0xFA	; 250
    302c:	fc 01       	movw	r30, r24
    302e:	80 81       	ld	r24, Z
    3030:	88 23       	and	r24, r24
    3032:	59 f3       	breq	.-42     	; 0x300a <vTaskSwitchContext+0x3a>
    3034:	89 81       	ldd	r24, Y+1	; 0x01
    3036:	28 2f       	mov	r18, r24
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	c9 01       	movw	r24, r18
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	88 0f       	add	r24, r24
    3042:	99 1f       	adc	r25, r25
    3044:	88 0f       	add	r24, r24
    3046:	99 1f       	adc	r25, r25
    3048:	82 0f       	add	r24, r18
    304a:	93 1f       	adc	r25, r19
    304c:	84 58       	subi	r24, 0x84	; 132
    304e:	9a 4f       	sbci	r25, 0xFA	; 250
    3050:	9b 83       	std	Y+3, r25	; 0x03
    3052:	8a 83       	std	Y+2, r24	; 0x02
    3054:	8a 81       	ldd	r24, Y+2	; 0x02
    3056:	9b 81       	ldd	r25, Y+3	; 0x03
    3058:	fc 01       	movw	r30, r24
    305a:	81 81       	ldd	r24, Z+1	; 0x01
    305c:	92 81       	ldd	r25, Z+2	; 0x02
    305e:	fc 01       	movw	r30, r24
    3060:	22 81       	ldd	r18, Z+2	; 0x02
    3062:	33 81       	ldd	r19, Z+3	; 0x03
    3064:	8a 81       	ldd	r24, Y+2	; 0x02
    3066:	9b 81       	ldd	r25, Y+3	; 0x03
    3068:	fc 01       	movw	r30, r24
    306a:	32 83       	std	Z+2, r19	; 0x02
    306c:	21 83       	std	Z+1, r18	; 0x01
    306e:	8a 81       	ldd	r24, Y+2	; 0x02
    3070:	9b 81       	ldd	r25, Y+3	; 0x03
    3072:	fc 01       	movw	r30, r24
    3074:	21 81       	ldd	r18, Z+1	; 0x01
    3076:	32 81       	ldd	r19, Z+2	; 0x02
    3078:	8a 81       	ldd	r24, Y+2	; 0x02
    307a:	9b 81       	ldd	r25, Y+3	; 0x03
    307c:	03 96       	adiw	r24, 0x03	; 3
    307e:	28 17       	cp	r18, r24
    3080:	39 07       	cpc	r19, r25
    3082:	69 f4       	brne	.+26     	; 0x309e <vTaskSwitchContext+0xce>
    3084:	8a 81       	ldd	r24, Y+2	; 0x02
    3086:	9b 81       	ldd	r25, Y+3	; 0x03
    3088:	fc 01       	movw	r30, r24
    308a:	81 81       	ldd	r24, Z+1	; 0x01
    308c:	92 81       	ldd	r25, Z+2	; 0x02
    308e:	fc 01       	movw	r30, r24
    3090:	22 81       	ldd	r18, Z+2	; 0x02
    3092:	33 81       	ldd	r19, Z+3	; 0x03
    3094:	8a 81       	ldd	r24, Y+2	; 0x02
    3096:	9b 81       	ldd	r25, Y+3	; 0x03
    3098:	fc 01       	movw	r30, r24
    309a:	32 83       	std	Z+2, r19	; 0x02
    309c:	21 83       	std	Z+1, r18	; 0x01
    309e:	8a 81       	ldd	r24, Y+2	; 0x02
    30a0:	9b 81       	ldd	r25, Y+3	; 0x03
    30a2:	fc 01       	movw	r30, r24
    30a4:	81 81       	ldd	r24, Z+1	; 0x01
    30a6:	92 81       	ldd	r25, Z+2	; 0x02
    30a8:	fc 01       	movw	r30, r24
    30aa:	86 81       	ldd	r24, Z+6	; 0x06
    30ac:	97 81       	ldd	r25, Z+7	; 0x07
    30ae:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    30b2:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    30b6:	89 81       	ldd	r24, Y+1	; 0x01
    30b8:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    30bc:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    30c0:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    30c4:	fc 01       	movw	r30, r24
    30c6:	85 a1       	ldd	r24, Z+37	; 0x25
    30c8:	96 a1       	ldd	r25, Z+38	; 0x26
    30ca:	0e 94 d3 06 	call	0xda6	; 0xda6 <switch_in>
    30ce:	0f 90       	pop	r0
    30d0:	0f 90       	pop	r0
    30d2:	0f 90       	pop	r0
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	08 95       	ret

000030da <vTaskPlaceOnEventList>:
    30da:	cf 93       	push	r28
    30dc:	df 93       	push	r29
    30de:	00 d0       	rcall	.+0      	; 0x30e0 <vTaskPlaceOnEventList+0x6>
    30e0:	00 d0       	rcall	.+0      	; 0x30e2 <vTaskPlaceOnEventList+0x8>
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	9a 83       	std	Y+2, r25	; 0x02
    30e8:	89 83       	std	Y+1, r24	; 0x01
    30ea:	7c 83       	std	Y+4, r23	; 0x04
    30ec:	6b 83       	std	Y+3, r22	; 0x03
    30ee:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    30f2:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    30f6:	9c 01       	movw	r18, r24
    30f8:	24 5f       	subi	r18, 0xF4	; 244
    30fa:	3f 4f       	sbci	r19, 0xFF	; 255
    30fc:	89 81       	ldd	r24, Y+1	; 0x01
    30fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3100:	b9 01       	movw	r22, r18
    3102:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>
    3106:	8b 81       	ldd	r24, Y+3	; 0x03
    3108:	9c 81       	ldd	r25, Y+4	; 0x04
    310a:	61 e0       	ldi	r22, 0x01	; 1
    310c:	0e 94 8b 1b 	call	0x3716	; 0x3716 <prvAddCurrentTaskToDelayedList>
    3110:	0f 90       	pop	r0
    3112:	0f 90       	pop	r0
    3114:	0f 90       	pop	r0
    3116:	0f 90       	pop	r0
    3118:	df 91       	pop	r29
    311a:	cf 91       	pop	r28
    311c:	08 95       	ret

0000311e <xTaskRemoveFromEventList>:
    311e:	cf 93       	push	r28
    3120:	df 93       	push	r29
    3122:	00 d0       	rcall	.+0      	; 0x3124 <xTaskRemoveFromEventList+0x6>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <xTaskRemoveFromEventList+0x8>
    3126:	1f 92       	push	r1
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	9d 83       	std	Y+5, r25	; 0x05
    312e:	8c 83       	std	Y+4, r24	; 0x04
    3130:	8c 81       	ldd	r24, Y+4	; 0x04
    3132:	9d 81       	ldd	r25, Y+5	; 0x05
    3134:	fc 01       	movw	r30, r24
    3136:	85 81       	ldd	r24, Z+5	; 0x05
    3138:	96 81       	ldd	r25, Z+6	; 0x06
    313a:	fc 01       	movw	r30, r24
    313c:	86 81       	ldd	r24, Z+6	; 0x06
    313e:	97 81       	ldd	r25, Z+7	; 0x07
    3140:	9b 83       	std	Y+3, r25	; 0x03
    3142:	8a 83       	std	Y+2, r24	; 0x02
    3144:	8a 81       	ldd	r24, Y+2	; 0x02
    3146:	9b 81       	ldd	r25, Y+3	; 0x03
    3148:	0c 96       	adiw	r24, 0x0c	; 12
    314a:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    314e:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    3152:	88 23       	and	r24, r24
    3154:	69 f5       	brne	.+90     	; 0x31b0 <xTaskRemoveFromEventList+0x92>
    3156:	8a 81       	ldd	r24, Y+2	; 0x02
    3158:	9b 81       	ldd	r25, Y+3	; 0x03
    315a:	02 96       	adiw	r24, 0x02	; 2
    315c:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    3160:	8a 81       	ldd	r24, Y+2	; 0x02
    3162:	9b 81       	ldd	r25, Y+3	; 0x03
    3164:	fc 01       	movw	r30, r24
    3166:	96 89       	ldd	r25, Z+22	; 0x16
    3168:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    316c:	89 17       	cp	r24, r25
    316e:	30 f4       	brcc	.+12     	; 0x317c <xTaskRemoveFromEventList+0x5e>
    3170:	8a 81       	ldd	r24, Y+2	; 0x02
    3172:	9b 81       	ldd	r25, Y+3	; 0x03
    3174:	fc 01       	movw	r30, r24
    3176:	86 89       	ldd	r24, Z+22	; 0x16
    3178:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    317c:	8a 81       	ldd	r24, Y+2	; 0x02
    317e:	9b 81       	ldd	r25, Y+3	; 0x03
    3180:	ac 01       	movw	r20, r24
    3182:	4e 5f       	subi	r20, 0xFE	; 254
    3184:	5f 4f       	sbci	r21, 0xFF	; 255
    3186:	8a 81       	ldd	r24, Y+2	; 0x02
    3188:	9b 81       	ldd	r25, Y+3	; 0x03
    318a:	fc 01       	movw	r30, r24
    318c:	86 89       	ldd	r24, Z+22	; 0x16
    318e:	28 2f       	mov	r18, r24
    3190:	30 e0       	ldi	r19, 0x00	; 0
    3192:	c9 01       	movw	r24, r18
    3194:	88 0f       	add	r24, r24
    3196:	99 1f       	adc	r25, r25
    3198:	88 0f       	add	r24, r24
    319a:	99 1f       	adc	r25, r25
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	82 0f       	add	r24, r18
    31a2:	93 1f       	adc	r25, r19
    31a4:	84 58       	subi	r24, 0x84	; 132
    31a6:	9a 4f       	sbci	r25, 0xFA	; 250
    31a8:	ba 01       	movw	r22, r20
    31aa:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    31ae:	08 c0       	rjmp	.+16     	; 0x31c0 <xTaskRemoveFromEventList+0xa2>
    31b0:	8a 81       	ldd	r24, Y+2	; 0x02
    31b2:	9b 81       	ldd	r25, Y+3	; 0x03
    31b4:	0c 96       	adiw	r24, 0x0c	; 12
    31b6:	bc 01       	movw	r22, r24
    31b8:	86 eb       	ldi	r24, 0xB6	; 182
    31ba:	95 e0       	ldi	r25, 0x05	; 5
    31bc:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    31c0:	8a 81       	ldd	r24, Y+2	; 0x02
    31c2:	9b 81       	ldd	r25, Y+3	; 0x03
    31c4:	fc 01       	movw	r30, r24
    31c6:	26 89       	ldd	r18, Z+22	; 0x16
    31c8:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    31cc:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    31d0:	fc 01       	movw	r30, r24
    31d2:	86 89       	ldd	r24, Z+22	; 0x16
    31d4:	82 17       	cp	r24, r18
    31d6:	30 f4       	brcc	.+12     	; 0x31e4 <xTaskRemoveFromEventList+0xc6>
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	89 83       	std	Y+1, r24	; 0x01
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    31e2:	01 c0       	rjmp	.+2      	; 0x31e6 <xTaskRemoveFromEventList+0xc8>
    31e4:	19 82       	std	Y+1, r1	; 0x01
    31e6:	89 81       	ldd	r24, Y+1	; 0x01
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	0f 90       	pop	r0
    31f2:	df 91       	pop	r29
    31f4:	cf 91       	pop	r28
    31f6:	08 95       	ret

000031f8 <vTaskSetTimeOutState>:
    31f8:	cf 93       	push	r28
    31fa:	df 93       	push	r29
    31fc:	00 d0       	rcall	.+0      	; 0x31fe <vTaskSetTimeOutState+0x6>
    31fe:	cd b7       	in	r28, 0x3d	; 61
    3200:	de b7       	in	r29, 0x3e	; 62
    3202:	9a 83       	std	Y+2, r25	; 0x02
    3204:	89 83       	std	Y+1, r24	; 0x01
    3206:	20 91 d0 05 	lds	r18, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    320a:	89 81       	ldd	r24, Y+1	; 0x01
    320c:	9a 81       	ldd	r25, Y+2	; 0x02
    320e:	fc 01       	movw	r30, r24
    3210:	20 83       	st	Z, r18
    3212:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <xTickCount>
    3216:	30 91 cb 05 	lds	r19, 0x05CB	; 0x8005cb <xTickCount+0x1>
    321a:	89 81       	ldd	r24, Y+1	; 0x01
    321c:	9a 81       	ldd	r25, Y+2	; 0x02
    321e:	fc 01       	movw	r30, r24
    3220:	32 83       	std	Z+2, r19	; 0x02
    3222:	21 83       	std	Z+1, r18	; 0x01
    3224:	0f 90       	pop	r0
    3226:	0f 90       	pop	r0
    3228:	df 91       	pop	r29
    322a:	cf 91       	pop	r28
    322c:	08 95       	ret

0000322e <xTaskCheckForTimeOut>:
    322e:	cf 93       	push	r28
    3230:	df 93       	push	r29
    3232:	cd b7       	in	r28, 0x3d	; 61
    3234:	de b7       	in	r29, 0x3e	; 62
    3236:	27 97       	sbiw	r28, 0x07	; 7
    3238:	0f b6       	in	r0, 0x3f	; 63
    323a:	f8 94       	cli
    323c:	de bf       	out	0x3e, r29	; 62
    323e:	0f be       	out	0x3f, r0	; 63
    3240:	cd bf       	out	0x3d, r28	; 61
    3242:	9d 83       	std	Y+5, r25	; 0x05
    3244:	8c 83       	std	Y+4, r24	; 0x04
    3246:	7f 83       	std	Y+7, r23	; 0x07
    3248:	6e 83       	std	Y+6, r22	; 0x06
    324a:	0f b6       	in	r0, 0x3f	; 63
    324c:	f8 94       	cli
    324e:	0f 92       	push	r0
    3250:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    3254:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    3258:	9b 83       	std	Y+3, r25	; 0x03
    325a:	8a 83       	std	Y+2, r24	; 0x02
    325c:	8c 81       	ldd	r24, Y+4	; 0x04
    325e:	9d 81       	ldd	r25, Y+5	; 0x05
    3260:	fc 01       	movw	r30, r24
    3262:	90 81       	ld	r25, Z
    3264:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    3268:	98 17       	cp	r25, r24
    326a:	69 f0       	breq	.+26     	; 0x3286 <xTaskCheckForTimeOut+0x58>
    326c:	8c 81       	ldd	r24, Y+4	; 0x04
    326e:	9d 81       	ldd	r25, Y+5	; 0x05
    3270:	fc 01       	movw	r30, r24
    3272:	21 81       	ldd	r18, Z+1	; 0x01
    3274:	32 81       	ldd	r19, Z+2	; 0x02
    3276:	8a 81       	ldd	r24, Y+2	; 0x02
    3278:	9b 81       	ldd	r25, Y+3	; 0x03
    327a:	82 17       	cp	r24, r18
    327c:	93 07       	cpc	r25, r19
    327e:	18 f0       	brcs	.+6      	; 0x3286 <xTaskCheckForTimeOut+0x58>
    3280:	81 e0       	ldi	r24, 0x01	; 1
    3282:	89 83       	std	Y+1, r24	; 0x01
    3284:	30 c0       	rjmp	.+96     	; 0x32e6 <xTaskCheckForTimeOut+0xb8>
    3286:	8c 81       	ldd	r24, Y+4	; 0x04
    3288:	9d 81       	ldd	r25, Y+5	; 0x05
    328a:	fc 01       	movw	r30, r24
    328c:	81 81       	ldd	r24, Z+1	; 0x01
    328e:	92 81       	ldd	r25, Z+2	; 0x02
    3290:	2a 81       	ldd	r18, Y+2	; 0x02
    3292:	3b 81       	ldd	r19, Y+3	; 0x03
    3294:	28 1b       	sub	r18, r24
    3296:	39 0b       	sbc	r19, r25
    3298:	8e 81       	ldd	r24, Y+6	; 0x06
    329a:	9f 81       	ldd	r25, Y+7	; 0x07
    329c:	fc 01       	movw	r30, r24
    329e:	80 81       	ld	r24, Z
    32a0:	91 81       	ldd	r25, Z+1	; 0x01
    32a2:	28 17       	cp	r18, r24
    32a4:	39 07       	cpc	r19, r25
    32a6:	e8 f4       	brcc	.+58     	; 0x32e2 <xTaskCheckForTimeOut+0xb4>
    32a8:	8e 81       	ldd	r24, Y+6	; 0x06
    32aa:	9f 81       	ldd	r25, Y+7	; 0x07
    32ac:	fc 01       	movw	r30, r24
    32ae:	20 81       	ld	r18, Z
    32b0:	31 81       	ldd	r19, Z+1	; 0x01
    32b2:	8c 81       	ldd	r24, Y+4	; 0x04
    32b4:	9d 81       	ldd	r25, Y+5	; 0x05
    32b6:	fc 01       	movw	r30, r24
    32b8:	41 81       	ldd	r20, Z+1	; 0x01
    32ba:	52 81       	ldd	r21, Z+2	; 0x02
    32bc:	8a 81       	ldd	r24, Y+2	; 0x02
    32be:	9b 81       	ldd	r25, Y+3	; 0x03
    32c0:	ba 01       	movw	r22, r20
    32c2:	68 1b       	sub	r22, r24
    32c4:	79 0b       	sbc	r23, r25
    32c6:	cb 01       	movw	r24, r22
    32c8:	28 0f       	add	r18, r24
    32ca:	39 1f       	adc	r19, r25
    32cc:	8e 81       	ldd	r24, Y+6	; 0x06
    32ce:	9f 81       	ldd	r25, Y+7	; 0x07
    32d0:	fc 01       	movw	r30, r24
    32d2:	31 83       	std	Z+1, r19	; 0x01
    32d4:	20 83       	st	Z, r18
    32d6:	8c 81       	ldd	r24, Y+4	; 0x04
    32d8:	9d 81       	ldd	r25, Y+5	; 0x05
    32da:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <vTaskSetTimeOutState>
    32de:	19 82       	std	Y+1, r1	; 0x01
    32e0:	02 c0       	rjmp	.+4      	; 0x32e6 <xTaskCheckForTimeOut+0xb8>
    32e2:	81 e0       	ldi	r24, 0x01	; 1
    32e4:	89 83       	std	Y+1, r24	; 0x01
    32e6:	0f 90       	pop	r0
    32e8:	0f be       	out	0x3f, r0	; 63
    32ea:	89 81       	ldd	r24, Y+1	; 0x01
    32ec:	27 96       	adiw	r28, 0x07	; 7
    32ee:	0f b6       	in	r0, 0x3f	; 63
    32f0:	f8 94       	cli
    32f2:	de bf       	out	0x3e, r29	; 62
    32f4:	0f be       	out	0x3f, r0	; 63
    32f6:	cd bf       	out	0x3d, r28	; 61
    32f8:	df 91       	pop	r29
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <vTaskMissedYield>:
    32fe:	cf 93       	push	r28
    3300:	df 93       	push	r29
    3302:	cd b7       	in	r28, 0x3d	; 61
    3304:	de b7       	in	r29, 0x3e	; 62
    3306:	81 e0       	ldi	r24, 0x01	; 1
    3308:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    330c:	df 91       	pop	r29
    330e:	cf 91       	pop	r28
    3310:	08 95       	ret

00003312 <prvIdleTask>:
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	00 d0       	rcall	.+0      	; 0x3318 <prvIdleTask+0x6>
    3318:	cd b7       	in	r28, 0x3d	; 61
    331a:	de b7       	in	r29, 0x3e	; 62
    331c:	9a 83       	std	Y+2, r25	; 0x02
    331e:	89 83       	std	Y+1, r24	; 0x01
    3320:	0e 94 d8 19 	call	0x33b0	; 0x33b0 <prvCheckTasksWaitingTermination>
    3324:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <pxReadyTasksLists>
    3328:	82 30       	cpi	r24, 0x02	; 2
    332a:	10 f0       	brcs	.+4      	; 0x3330 <prvIdleTask+0x1e>
    332c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <vPortYield>
    3330:	0e 94 4e 05 	call	0xa9c	; 0xa9c <vApplicationIdleHook>
    3334:	f5 cf       	rjmp	.-22     	; 0x3320 <prvIdleTask+0xe>

00003336 <prvInitialiseTaskLists>:
    3336:	cf 93       	push	r28
    3338:	df 93       	push	r29
    333a:	1f 92       	push	r1
    333c:	cd b7       	in	r28, 0x3d	; 61
    333e:	de b7       	in	r29, 0x3e	; 62
    3340:	19 82       	std	Y+1, r1	; 0x01
    3342:	13 c0       	rjmp	.+38     	; 0x336a <prvInitialiseTaskLists+0x34>
    3344:	89 81       	ldd	r24, Y+1	; 0x01
    3346:	28 2f       	mov	r18, r24
    3348:	30 e0       	ldi	r19, 0x00	; 0
    334a:	c9 01       	movw	r24, r18
    334c:	88 0f       	add	r24, r24
    334e:	99 1f       	adc	r25, r25
    3350:	88 0f       	add	r24, r24
    3352:	99 1f       	adc	r25, r25
    3354:	88 0f       	add	r24, r24
    3356:	99 1f       	adc	r25, r25
    3358:	82 0f       	add	r24, r18
    335a:	93 1f       	adc	r25, r19
    335c:	84 58       	subi	r24, 0x84	; 132
    335e:	9a 4f       	sbci	r25, 0xFA	; 250
    3360:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    3364:	89 81       	ldd	r24, Y+1	; 0x01
    3366:	8f 5f       	subi	r24, 0xFF	; 255
    3368:	89 83       	std	Y+1, r24	; 0x01
    336a:	89 81       	ldd	r24, Y+1	; 0x01
    336c:	84 30       	cpi	r24, 0x04	; 4
    336e:	50 f3       	brcs	.-44     	; 0x3344 <prvInitialiseTaskLists+0xe>
    3370:	80 ea       	ldi	r24, 0xA0	; 160
    3372:	95 e0       	ldi	r25, 0x05	; 5
    3374:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    3378:	89 ea       	ldi	r24, 0xA9	; 169
    337a:	95 e0       	ldi	r25, 0x05	; 5
    337c:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    3380:	86 eb       	ldi	r24, 0xB6	; 182
    3382:	95 e0       	ldi	r25, 0x05	; 5
    3384:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    3388:	8f eb       	ldi	r24, 0xBF	; 191
    338a:	95 e0       	ldi	r25, 0x05	; 5
    338c:	0e 94 8a 07 	call	0xf14	; 0xf14 <vListInitialise>
    3390:	80 ea       	ldi	r24, 0xA0	; 160
    3392:	95 e0       	ldi	r25, 0x05	; 5
    3394:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <pxDelayedTaskList+0x1>
    3398:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <pxDelayedTaskList>
    339c:	89 ea       	ldi	r24, 0xA9	; 169
    339e:	95 e0       	ldi	r25, 0x05	; 5
    33a0:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    33a4:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <pxOverflowDelayedTaskList>
    33a8:	0f 90       	pop	r0
    33aa:	df 91       	pop	r29
    33ac:	cf 91       	pop	r28
    33ae:	08 95       	ret

000033b0 <prvCheckTasksWaitingTermination>:
    33b0:	cf 93       	push	r28
    33b2:	df 93       	push	r29
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <prvCheckTasksWaitingTermination+0x6>
    33b6:	1f 92       	push	r1
    33b8:	cd b7       	in	r28, 0x3d	; 61
    33ba:	de b7       	in	r29, 0x3e	; 62
    33bc:	2f c0       	rjmp	.+94     	; 0x341c <prvCheckTasksWaitingTermination+0x6c>
    33be:	0e 94 42 16 	call	0x2c84	; 0x2c84 <vTaskSuspendAll>
    33c2:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <xTasksWaitingTermination>
    33c6:	81 e0       	ldi	r24, 0x01	; 1
    33c8:	99 23       	and	r25, r25
    33ca:	09 f0       	breq	.+2      	; 0x33ce <prvCheckTasksWaitingTermination+0x1e>
    33cc:	80 e0       	ldi	r24, 0x00	; 0
    33ce:	89 83       	std	Y+1, r24	; 0x01
    33d0:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <xTaskResumeAll>
    33d4:	89 81       	ldd	r24, Y+1	; 0x01
    33d6:	88 23       	and	r24, r24
    33d8:	09 f5       	brne	.+66     	; 0x341c <prvCheckTasksWaitingTermination+0x6c>
    33da:	0f b6       	in	r0, 0x3f	; 63
    33dc:	f8 94       	cli
    33de:	0f 92       	push	r0
    33e0:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <xTasksWaitingTermination+0x5>
    33e4:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <xTasksWaitingTermination+0x6>
    33e8:	fc 01       	movw	r30, r24
    33ea:	86 81       	ldd	r24, Z+6	; 0x06
    33ec:	97 81       	ldd	r25, Z+7	; 0x07
    33ee:	9b 83       	std	Y+3, r25	; 0x03
    33f0:	8a 83       	std	Y+2, r24	; 0x02
    33f2:	8a 81       	ldd	r24, Y+2	; 0x02
    33f4:	9b 81       	ldd	r25, Y+3	; 0x03
    33f6:	02 96       	adiw	r24, 0x02	; 2
    33f8:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    33fc:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    3400:	81 50       	subi	r24, 0x01	; 1
    3402:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <uxCurrentNumberOfTasks>
    3406:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    340a:	81 50       	subi	r24, 0x01	; 1
    340c:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    3410:	0f 90       	pop	r0
    3412:	0f be       	out	0x3f, r0	; 63
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	9b 81       	ldd	r25, Y+3	; 0x03
    3418:	0e 94 18 1a 	call	0x3430	; 0x3430 <prvDeleteTCB>
    341c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    3420:	88 23       	and	r24, r24
    3422:	69 f6       	brne	.-102    	; 0x33be <prvCheckTasksWaitingTermination+0xe>
    3424:	0f 90       	pop	r0
    3426:	0f 90       	pop	r0
    3428:	0f 90       	pop	r0
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	08 95       	ret

00003430 <prvDeleteTCB>:
    3430:	cf 93       	push	r28
    3432:	df 93       	push	r29
    3434:	00 d0       	rcall	.+0      	; 0x3436 <prvDeleteTCB+0x6>
    3436:	cd b7       	in	r28, 0x3d	; 61
    3438:	de b7       	in	r29, 0x3e	; 62
    343a:	9a 83       	std	Y+2, r25	; 0x02
    343c:	89 83       	std	Y+1, r24	; 0x01
    343e:	89 81       	ldd	r24, Y+1	; 0x01
    3440:	9a 81       	ldd	r25, Y+2	; 0x02
    3442:	fc 01       	movw	r30, r24
    3444:	87 89       	ldd	r24, Z+23	; 0x17
    3446:	90 8d       	ldd	r25, Z+24	; 0x18
    3448:	0e 94 39 0c 	call	0x1872	; 0x1872 <vPortFree>
    344c:	89 81       	ldd	r24, Y+1	; 0x01
    344e:	9a 81       	ldd	r25, Y+2	; 0x02
    3450:	0e 94 39 0c 	call	0x1872	; 0x1872 <vPortFree>
    3454:	0f 90       	pop	r0
    3456:	0f 90       	pop	r0
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret

0000345e <prvResetNextTaskUnblockTime>:
    345e:	cf 93       	push	r28
    3460:	df 93       	push	r29
    3462:	00 d0       	rcall	.+0      	; 0x3464 <prvResetNextTaskUnblockTime+0x6>
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    346c:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    3470:	fc 01       	movw	r30, r24
    3472:	80 81       	ld	r24, Z
    3474:	88 23       	and	r24, r24
    3476:	39 f4       	brne	.+14     	; 0x3486 <prvResetNextTaskUnblockTime+0x28>
    3478:	8f ef       	ldi	r24, 0xFF	; 255
    347a:	9f ef       	ldi	r25, 0xFF	; 255
    347c:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    3480:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    3484:	15 c0       	rjmp	.+42     	; 0x34b0 <prvResetNextTaskUnblockTime+0x52>
    3486:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    348a:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    348e:	fc 01       	movw	r30, r24
    3490:	85 81       	ldd	r24, Z+5	; 0x05
    3492:	96 81       	ldd	r25, Z+6	; 0x06
    3494:	fc 01       	movw	r30, r24
    3496:	86 81       	ldd	r24, Z+6	; 0x06
    3498:	97 81       	ldd	r25, Z+7	; 0x07
    349a:	9a 83       	std	Y+2, r25	; 0x02
    349c:	89 83       	std	Y+1, r24	; 0x01
    349e:	89 81       	ldd	r24, Y+1	; 0x01
    34a0:	9a 81       	ldd	r25, Y+2	; 0x02
    34a2:	fc 01       	movw	r30, r24
    34a4:	82 81       	ldd	r24, Z+2	; 0x02
    34a6:	93 81       	ldd	r25, Z+3	; 0x03
    34a8:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    34ac:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    34b0:	0f 90       	pop	r0
    34b2:	0f 90       	pop	r0
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	08 95       	ret

000034ba <vTaskPriorityInherit>:
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	00 d0       	rcall	.+0      	; 0x34c0 <vTaskPriorityInherit+0x6>
    34c0:	00 d0       	rcall	.+0      	; 0x34c2 <vTaskPriorityInherit+0x8>
    34c2:	cd b7       	in	r28, 0x3d	; 61
    34c4:	de b7       	in	r29, 0x3e	; 62
    34c6:	9c 83       	std	Y+4, r25	; 0x04
    34c8:	8b 83       	std	Y+3, r24	; 0x03
    34ca:	8b 81       	ldd	r24, Y+3	; 0x03
    34cc:	9c 81       	ldd	r25, Y+4	; 0x04
    34ce:	9a 83       	std	Y+2, r25	; 0x02
    34d0:	89 83       	std	Y+1, r24	; 0x01
    34d2:	8b 81       	ldd	r24, Y+3	; 0x03
    34d4:	9c 81       	ldd	r25, Y+4	; 0x04
    34d6:	89 2b       	or	r24, r25
    34d8:	09 f4       	brne	.+2      	; 0x34dc <vTaskPriorityInherit+0x22>
    34da:	7f c0       	rjmp	.+254    	; 0x35da <vTaskPriorityInherit+0x120>
    34dc:	89 81       	ldd	r24, Y+1	; 0x01
    34de:	9a 81       	ldd	r25, Y+2	; 0x02
    34e0:	fc 01       	movw	r30, r24
    34e2:	26 89       	ldd	r18, Z+22	; 0x16
    34e4:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    34e8:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    34ec:	fc 01       	movw	r30, r24
    34ee:	86 89       	ldd	r24, Z+22	; 0x16
    34f0:	28 17       	cp	r18, r24
    34f2:	08 f0       	brcs	.+2      	; 0x34f6 <vTaskPriorityInherit+0x3c>
    34f4:	72 c0       	rjmp	.+228    	; 0x35da <vTaskPriorityInherit+0x120>
    34f6:	89 81       	ldd	r24, Y+1	; 0x01
    34f8:	9a 81       	ldd	r25, Y+2	; 0x02
    34fa:	fc 01       	movw	r30, r24
    34fc:	84 85       	ldd	r24, Z+12	; 0x0c
    34fe:	95 85       	ldd	r25, Z+13	; 0x0d
    3500:	99 23       	and	r25, r25
    3502:	8c f0       	brlt	.+34     	; 0x3526 <vTaskPriorityInherit+0x6c>
    3504:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3508:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    350c:	fc 01       	movw	r30, r24
    350e:	86 89       	ldd	r24, Z+22	; 0x16
    3510:	88 2f       	mov	r24, r24
    3512:	90 e0       	ldi	r25, 0x00	; 0
    3514:	24 e0       	ldi	r18, 0x04	; 4
    3516:	30 e0       	ldi	r19, 0x00	; 0
    3518:	28 1b       	sub	r18, r24
    351a:	39 0b       	sbc	r19, r25
    351c:	89 81       	ldd	r24, Y+1	; 0x01
    351e:	9a 81       	ldd	r25, Y+2	; 0x02
    3520:	fc 01       	movw	r30, r24
    3522:	35 87       	std	Z+13, r19	; 0x0d
    3524:	24 87       	std	Z+12, r18	; 0x0c
    3526:	89 81       	ldd	r24, Y+1	; 0x01
    3528:	9a 81       	ldd	r25, Y+2	; 0x02
    352a:	fc 01       	movw	r30, r24
    352c:	42 85       	ldd	r20, Z+10	; 0x0a
    352e:	53 85       	ldd	r21, Z+11	; 0x0b
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	9a 81       	ldd	r25, Y+2	; 0x02
    3534:	fc 01       	movw	r30, r24
    3536:	86 89       	ldd	r24, Z+22	; 0x16
    3538:	28 2f       	mov	r18, r24
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	c9 01       	movw	r24, r18
    353e:	88 0f       	add	r24, r24
    3540:	99 1f       	adc	r25, r25
    3542:	88 0f       	add	r24, r24
    3544:	99 1f       	adc	r25, r25
    3546:	88 0f       	add	r24, r24
    3548:	99 1f       	adc	r25, r25
    354a:	82 0f       	add	r24, r18
    354c:	93 1f       	adc	r25, r19
    354e:	84 58       	subi	r24, 0x84	; 132
    3550:	9a 4f       	sbci	r25, 0xFA	; 250
    3552:	48 17       	cp	r20, r24
    3554:	59 07       	cpc	r21, r25
    3556:	b9 f5       	brne	.+110    	; 0x35c6 <vTaskPriorityInherit+0x10c>
    3558:	89 81       	ldd	r24, Y+1	; 0x01
    355a:	9a 81       	ldd	r25, Y+2	; 0x02
    355c:	02 96       	adiw	r24, 0x02	; 2
    355e:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    3562:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3566:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    356a:	fc 01       	movw	r30, r24
    356c:	26 89       	ldd	r18, Z+22	; 0x16
    356e:	89 81       	ldd	r24, Y+1	; 0x01
    3570:	9a 81       	ldd	r25, Y+2	; 0x02
    3572:	fc 01       	movw	r30, r24
    3574:	26 8b       	std	Z+22, r18	; 0x16
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
    357a:	fc 01       	movw	r30, r24
    357c:	96 89       	ldd	r25, Z+22	; 0x16
    357e:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    3582:	89 17       	cp	r24, r25
    3584:	30 f4       	brcc	.+12     	; 0x3592 <vTaskPriorityInherit+0xd8>
    3586:	89 81       	ldd	r24, Y+1	; 0x01
    3588:	9a 81       	ldd	r25, Y+2	; 0x02
    358a:	fc 01       	movw	r30, r24
    358c:	86 89       	ldd	r24, Z+22	; 0x16
    358e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    3592:	89 81       	ldd	r24, Y+1	; 0x01
    3594:	9a 81       	ldd	r25, Y+2	; 0x02
    3596:	ac 01       	movw	r20, r24
    3598:	4e 5f       	subi	r20, 0xFE	; 254
    359a:	5f 4f       	sbci	r21, 0xFF	; 255
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	fc 01       	movw	r30, r24
    35a2:	86 89       	ldd	r24, Z+22	; 0x16
    35a4:	28 2f       	mov	r18, r24
    35a6:	30 e0       	ldi	r19, 0x00	; 0
    35a8:	c9 01       	movw	r24, r18
    35aa:	88 0f       	add	r24, r24
    35ac:	99 1f       	adc	r25, r25
    35ae:	88 0f       	add	r24, r24
    35b0:	99 1f       	adc	r25, r25
    35b2:	88 0f       	add	r24, r24
    35b4:	99 1f       	adc	r25, r25
    35b6:	82 0f       	add	r24, r18
    35b8:	93 1f       	adc	r25, r19
    35ba:	84 58       	subi	r24, 0x84	; 132
    35bc:	9a 4f       	sbci	r25, 0xFA	; 250
    35be:	ba 01       	movw	r22, r20
    35c0:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    35c4:	0a c0       	rjmp	.+20     	; 0x35da <vTaskPriorityInherit+0x120>
    35c6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    35ca:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    35ce:	fc 01       	movw	r30, r24
    35d0:	26 89       	ldd	r18, Z+22	; 0x16
    35d2:	89 81       	ldd	r24, Y+1	; 0x01
    35d4:	9a 81       	ldd	r25, Y+2	; 0x02
    35d6:	fc 01       	movw	r30, r24
    35d8:	26 8b       	std	Z+22, r18	; 0x16
    35da:	0f 90       	pop	r0
    35dc:	0f 90       	pop	r0
    35de:	0f 90       	pop	r0
    35e0:	0f 90       	pop	r0
    35e2:	df 91       	pop	r29
    35e4:	cf 91       	pop	r28
    35e6:	08 95       	ret

000035e8 <xTaskPriorityDisinherit>:
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	00 d0       	rcall	.+0      	; 0x35ee <xTaskPriorityDisinherit+0x6>
    35ee:	00 d0       	rcall	.+0      	; 0x35f0 <xTaskPriorityDisinherit+0x8>
    35f0:	1f 92       	push	r1
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	9d 83       	std	Y+5, r25	; 0x05
    35f8:	8c 83       	std	Y+4, r24	; 0x04
    35fa:	8c 81       	ldd	r24, Y+4	; 0x04
    35fc:	9d 81       	ldd	r25, Y+5	; 0x05
    35fe:	9b 83       	std	Y+3, r25	; 0x03
    3600:	8a 83       	std	Y+2, r24	; 0x02
    3602:	19 82       	std	Y+1, r1	; 0x01
    3604:	8c 81       	ldd	r24, Y+4	; 0x04
    3606:	9d 81       	ldd	r25, Y+5	; 0x05
    3608:	89 2b       	or	r24, r25
    360a:	09 f4       	brne	.+2      	; 0x360e <xTaskPriorityDisinherit+0x26>
    360c:	61 c0       	rjmp	.+194    	; 0x36d0 <xTaskPriorityDisinherit+0xe8>
    360e:	8a 81       	ldd	r24, Y+2	; 0x02
    3610:	9b 81       	ldd	r25, Y+3	; 0x03
    3612:	fc 01       	movw	r30, r24
    3614:	84 a1       	ldd	r24, Z+36	; 0x24
    3616:	2f ef       	ldi	r18, 0xFF	; 255
    3618:	28 0f       	add	r18, r24
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	9b 81       	ldd	r25, Y+3	; 0x03
    361e:	fc 01       	movw	r30, r24
    3620:	24 a3       	std	Z+36, r18	; 0x24
    3622:	8a 81       	ldd	r24, Y+2	; 0x02
    3624:	9b 81       	ldd	r25, Y+3	; 0x03
    3626:	fc 01       	movw	r30, r24
    3628:	26 89       	ldd	r18, Z+22	; 0x16
    362a:	8a 81       	ldd	r24, Y+2	; 0x02
    362c:	9b 81       	ldd	r25, Y+3	; 0x03
    362e:	fc 01       	movw	r30, r24
    3630:	83 a1       	ldd	r24, Z+35	; 0x23
    3632:	28 17       	cp	r18, r24
    3634:	09 f4       	brne	.+2      	; 0x3638 <xTaskPriorityDisinherit+0x50>
    3636:	4c c0       	rjmp	.+152    	; 0x36d0 <xTaskPriorityDisinherit+0xe8>
    3638:	8a 81       	ldd	r24, Y+2	; 0x02
    363a:	9b 81       	ldd	r25, Y+3	; 0x03
    363c:	fc 01       	movw	r30, r24
    363e:	84 a1       	ldd	r24, Z+36	; 0x24
    3640:	88 23       	and	r24, r24
    3642:	09 f0       	breq	.+2      	; 0x3646 <xTaskPriorityDisinherit+0x5e>
    3644:	45 c0       	rjmp	.+138    	; 0x36d0 <xTaskPriorityDisinherit+0xe8>
    3646:	8a 81       	ldd	r24, Y+2	; 0x02
    3648:	9b 81       	ldd	r25, Y+3	; 0x03
    364a:	02 96       	adiw	r24, 0x02	; 2
    364c:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
    3650:	8a 81       	ldd	r24, Y+2	; 0x02
    3652:	9b 81       	ldd	r25, Y+3	; 0x03
    3654:	fc 01       	movw	r30, r24
    3656:	23 a1       	ldd	r18, Z+35	; 0x23
    3658:	8a 81       	ldd	r24, Y+2	; 0x02
    365a:	9b 81       	ldd	r25, Y+3	; 0x03
    365c:	fc 01       	movw	r30, r24
    365e:	26 8b       	std	Z+22, r18	; 0x16
    3660:	8a 81       	ldd	r24, Y+2	; 0x02
    3662:	9b 81       	ldd	r25, Y+3	; 0x03
    3664:	fc 01       	movw	r30, r24
    3666:	86 89       	ldd	r24, Z+22	; 0x16
    3668:	88 2f       	mov	r24, r24
    366a:	90 e0       	ldi	r25, 0x00	; 0
    366c:	24 e0       	ldi	r18, 0x04	; 4
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	28 1b       	sub	r18, r24
    3672:	39 0b       	sbc	r19, r25
    3674:	8a 81       	ldd	r24, Y+2	; 0x02
    3676:	9b 81       	ldd	r25, Y+3	; 0x03
    3678:	fc 01       	movw	r30, r24
    367a:	35 87       	std	Z+13, r19	; 0x0d
    367c:	24 87       	std	Z+12, r18	; 0x0c
    367e:	8a 81       	ldd	r24, Y+2	; 0x02
    3680:	9b 81       	ldd	r25, Y+3	; 0x03
    3682:	fc 01       	movw	r30, r24
    3684:	96 89       	ldd	r25, Z+22	; 0x16
    3686:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    368a:	89 17       	cp	r24, r25
    368c:	30 f4       	brcc	.+12     	; 0x369a <xTaskPriorityDisinherit+0xb2>
    368e:	8a 81       	ldd	r24, Y+2	; 0x02
    3690:	9b 81       	ldd	r25, Y+3	; 0x03
    3692:	fc 01       	movw	r30, r24
    3694:	86 89       	ldd	r24, Z+22	; 0x16
    3696:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    369a:	8a 81       	ldd	r24, Y+2	; 0x02
    369c:	9b 81       	ldd	r25, Y+3	; 0x03
    369e:	ac 01       	movw	r20, r24
    36a0:	4e 5f       	subi	r20, 0xFE	; 254
    36a2:	5f 4f       	sbci	r21, 0xFF	; 255
    36a4:	8a 81       	ldd	r24, Y+2	; 0x02
    36a6:	9b 81       	ldd	r25, Y+3	; 0x03
    36a8:	fc 01       	movw	r30, r24
    36aa:	86 89       	ldd	r24, Z+22	; 0x16
    36ac:	28 2f       	mov	r18, r24
    36ae:	30 e0       	ldi	r19, 0x00	; 0
    36b0:	c9 01       	movw	r24, r18
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	88 0f       	add	r24, r24
    36b8:	99 1f       	adc	r25, r25
    36ba:	88 0f       	add	r24, r24
    36bc:	99 1f       	adc	r25, r25
    36be:	82 0f       	add	r24, r18
    36c0:	93 1f       	adc	r25, r19
    36c2:	84 58       	subi	r24, 0x84	; 132
    36c4:	9a 4f       	sbci	r25, 0xFA	; 250
    36c6:	ba 01       	movw	r22, r20
    36c8:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <vListInsertEnd>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	89 81       	ldd	r24, Y+1	; 0x01
    36d2:	0f 90       	pop	r0
    36d4:	0f 90       	pop	r0
    36d6:	0f 90       	pop	r0
    36d8:	0f 90       	pop	r0
    36da:	0f 90       	pop	r0
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	08 95       	ret

000036e2 <pvTaskIncrementMutexHeldCount>:
    36e2:	cf 93       	push	r28
    36e4:	df 93       	push	r29
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    36ee:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    36f2:	89 2b       	or	r24, r25
    36f4:	49 f0       	breq	.+18     	; 0x3708 <pvTaskIncrementMutexHeldCount+0x26>
    36f6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    36fa:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    36fe:	fc 01       	movw	r30, r24
    3700:	24 a1       	ldd	r18, Z+36	; 0x24
    3702:	2f 5f       	subi	r18, 0xFF	; 255
    3704:	fc 01       	movw	r30, r24
    3706:	24 a3       	std	Z+36, r18	; 0x24
    3708:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    370c:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	08 95       	ret

00003716 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
    371e:	27 97       	sbiw	r28, 0x07	; 7
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	f8 94       	cli
    3724:	de bf       	out	0x3e, r29	; 62
    3726:	0f be       	out	0x3f, r0	; 63
    3728:	cd bf       	out	0x3d, r28	; 61
    372a:	9e 83       	std	Y+6, r25	; 0x06
    372c:	8d 83       	std	Y+5, r24	; 0x05
    372e:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    3730:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    3734:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    3738:	9a 83       	std	Y+2, r25	; 0x02
    373a:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    373c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3740:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3744:	02 96       	adiw	r24, 0x02	; 2
    3746:	0e 94 95 08 	call	0x112a	; 0x112a <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    374a:	29 81       	ldd	r18, Y+1	; 0x01
    374c:	3a 81       	ldd	r19, Y+2	; 0x02
    374e:	8d 81       	ldd	r24, Y+5	; 0x05
    3750:	9e 81       	ldd	r25, Y+6	; 0x06
    3752:	82 0f       	add	r24, r18
    3754:	93 1f       	adc	r25, r19
    3756:	9c 83       	std	Y+4, r25	; 0x04
    3758:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    375a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    375e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3762:	2b 81       	ldd	r18, Y+3	; 0x03
    3764:	3c 81       	ldd	r19, Y+4	; 0x04
    3766:	fc 01       	movw	r30, r24
    3768:	33 83       	std	Z+3, r19	; 0x03
    376a:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    376c:	2b 81       	ldd	r18, Y+3	; 0x03
    376e:	3c 81       	ldd	r19, Y+4	; 0x04
    3770:	89 81       	ldd	r24, Y+1	; 0x01
    3772:	9a 81       	ldd	r25, Y+2	; 0x02
    3774:	28 17       	cp	r18, r24
    3776:	39 07       	cpc	r19, r25
    3778:	78 f4       	brcc	.+30     	; 0x3798 <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    377a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    377e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3782:	9c 01       	movw	r18, r24
    3784:	2e 5f       	subi	r18, 0xFE	; 254
    3786:	3f 4f       	sbci	r19, 0xFF	; 255
    3788:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <pxOverflowDelayedTaskList>
    378c:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    3790:	b9 01       	movw	r22, r18
    3792:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>
    3796:	1d c0       	rjmp	.+58     	; 0x37d2 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3798:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    379c:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    37a0:	9c 01       	movw	r18, r24
    37a2:	2e 5f       	subi	r18, 0xFE	; 254
    37a4:	3f 4f       	sbci	r19, 0xFF	; 255
    37a6:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    37aa:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    37ae:	b9 01       	movw	r22, r18
    37b0:	0e 94 1e 08 	call	0x103c	; 0x103c <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    37b4:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <xNextTaskUnblockTime>
    37b8:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    37bc:	2b 81       	ldd	r18, Y+3	; 0x03
    37be:	3c 81       	ldd	r19, Y+4	; 0x04
    37c0:	28 17       	cp	r18, r24
    37c2:	39 07       	cpc	r19, r25
    37c4:	30 f4       	brcc	.+12     	; 0x37d2 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    37c6:	8b 81       	ldd	r24, Y+3	; 0x03
    37c8:	9c 81       	ldd	r25, Y+4	; 0x04
    37ca:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    37ce:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    37d2:	27 96       	adiw	r28, 0x07	; 7
    37d4:	0f b6       	in	r0, 0x3f	; 63
    37d6:	f8 94       	cli
    37d8:	de bf       	out	0x3e, r29	; 62
    37da:	0f be       	out	0x3f, r0	; 63
    37dc:	cd bf       	out	0x3d, r28	; 61
    37de:	df 91       	pop	r29
    37e0:	cf 91       	pop	r28
    37e2:	08 95       	ret

000037e4 <__divmodhi4>:
    37e4:	97 fb       	bst	r25, 7
    37e6:	07 2e       	mov	r0, r23
    37e8:	16 f4       	brtc	.+4      	; 0x37ee <__divmodhi4+0xa>
    37ea:	00 94       	com	r0
    37ec:	07 d0       	rcall	.+14     	; 0x37fc <__divmodhi4_neg1>
    37ee:	77 fd       	sbrc	r23, 7
    37f0:	09 d0       	rcall	.+18     	; 0x3804 <__divmodhi4_neg2>
    37f2:	0e 94 2e 1c 	call	0x385c	; 0x385c <__udivmodhi4>
    37f6:	07 fc       	sbrc	r0, 7
    37f8:	05 d0       	rcall	.+10     	; 0x3804 <__divmodhi4_neg2>
    37fa:	3e f4       	brtc	.+14     	; 0x380a <__divmodhi4_exit>

000037fc <__divmodhi4_neg1>:
    37fc:	90 95       	com	r25
    37fe:	81 95       	neg	r24
    3800:	9f 4f       	sbci	r25, 0xFF	; 255
    3802:	08 95       	ret

00003804 <__divmodhi4_neg2>:
    3804:	70 95       	com	r23
    3806:	61 95       	neg	r22
    3808:	7f 4f       	sbci	r23, 0xFF	; 255

0000380a <__divmodhi4_exit>:
    380a:	08 95       	ret

0000380c <__udivmodsi4>:
    380c:	a1 e2       	ldi	r26, 0x21	; 33
    380e:	1a 2e       	mov	r1, r26
    3810:	aa 1b       	sub	r26, r26
    3812:	bb 1b       	sub	r27, r27
    3814:	fd 01       	movw	r30, r26
    3816:	0d c0       	rjmp	.+26     	; 0x3832 <__udivmodsi4_ep>

00003818 <__udivmodsi4_loop>:
    3818:	aa 1f       	adc	r26, r26
    381a:	bb 1f       	adc	r27, r27
    381c:	ee 1f       	adc	r30, r30
    381e:	ff 1f       	adc	r31, r31
    3820:	a2 17       	cp	r26, r18
    3822:	b3 07       	cpc	r27, r19
    3824:	e4 07       	cpc	r30, r20
    3826:	f5 07       	cpc	r31, r21
    3828:	20 f0       	brcs	.+8      	; 0x3832 <__udivmodsi4_ep>
    382a:	a2 1b       	sub	r26, r18
    382c:	b3 0b       	sbc	r27, r19
    382e:	e4 0b       	sbc	r30, r20
    3830:	f5 0b       	sbc	r31, r21

00003832 <__udivmodsi4_ep>:
    3832:	66 1f       	adc	r22, r22
    3834:	77 1f       	adc	r23, r23
    3836:	88 1f       	adc	r24, r24
    3838:	99 1f       	adc	r25, r25
    383a:	1a 94       	dec	r1
    383c:	69 f7       	brne	.-38     	; 0x3818 <__udivmodsi4_loop>
    383e:	60 95       	com	r22
    3840:	70 95       	com	r23
    3842:	80 95       	com	r24
    3844:	90 95       	com	r25
    3846:	9b 01       	movw	r18, r22
    3848:	ac 01       	movw	r20, r24
    384a:	bd 01       	movw	r22, r26
    384c:	cf 01       	movw	r24, r30
    384e:	08 95       	ret

00003850 <__tablejump2__>:
    3850:	ee 0f       	add	r30, r30
    3852:	ff 1f       	adc	r31, r31
    3854:	05 90       	lpm	r0, Z+
    3856:	f4 91       	lpm	r31, Z
    3858:	e0 2d       	mov	r30, r0
    385a:	09 94       	ijmp

0000385c <__udivmodhi4>:
    385c:	aa 1b       	sub	r26, r26
    385e:	bb 1b       	sub	r27, r27
    3860:	51 e1       	ldi	r21, 0x11	; 17
    3862:	07 c0       	rjmp	.+14     	; 0x3872 <__udivmodhi4_ep>

00003864 <__udivmodhi4_loop>:
    3864:	aa 1f       	adc	r26, r26
    3866:	bb 1f       	adc	r27, r27
    3868:	a6 17       	cp	r26, r22
    386a:	b7 07       	cpc	r27, r23
    386c:	10 f0       	brcs	.+4      	; 0x3872 <__udivmodhi4_ep>
    386e:	a6 1b       	sub	r26, r22
    3870:	b7 0b       	sbc	r27, r23

00003872 <__udivmodhi4_ep>:
    3872:	88 1f       	adc	r24, r24
    3874:	99 1f       	adc	r25, r25
    3876:	5a 95       	dec	r21
    3878:	a9 f7       	brne	.-22     	; 0x3864 <__udivmodhi4_loop>
    387a:	80 95       	com	r24
    387c:	90 95       	com	r25
    387e:	bc 01       	movw	r22, r24
    3880:	cd 01       	movw	r24, r26
    3882:	08 95       	ret

00003884 <malloc>:
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	82 30       	cpi	r24, 0x02	; 2
    388a:	91 05       	cpc	r25, r1
    388c:	10 f4       	brcc	.+4      	; 0x3892 <malloc+0xe>
    388e:	82 e0       	ldi	r24, 0x02	; 2
    3890:	90 e0       	ldi	r25, 0x00	; 0
    3892:	e0 91 d9 05 	lds	r30, 0x05D9	; 0x8005d9 <__flp>
    3896:	f0 91 da 05 	lds	r31, 0x05DA	; 0x8005da <__flp+0x1>
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	c0 e0       	ldi	r28, 0x00	; 0
    38a0:	d0 e0       	ldi	r29, 0x00	; 0
    38a2:	30 97       	sbiw	r30, 0x00	; 0
    38a4:	11 f1       	breq	.+68     	; 0x38ea <malloc+0x66>
    38a6:	40 81       	ld	r20, Z
    38a8:	51 81       	ldd	r21, Z+1	; 0x01
    38aa:	48 17       	cp	r20, r24
    38ac:	59 07       	cpc	r21, r25
    38ae:	c0 f0       	brcs	.+48     	; 0x38e0 <malloc+0x5c>
    38b0:	48 17       	cp	r20, r24
    38b2:	59 07       	cpc	r21, r25
    38b4:	61 f4       	brne	.+24     	; 0x38ce <malloc+0x4a>
    38b6:	82 81       	ldd	r24, Z+2	; 0x02
    38b8:	93 81       	ldd	r25, Z+3	; 0x03
    38ba:	20 97       	sbiw	r28, 0x00	; 0
    38bc:	19 f0       	breq	.+6      	; 0x38c4 <malloc+0x40>
    38be:	9b 83       	std	Y+3, r25	; 0x03
    38c0:	8a 83       	std	Y+2, r24	; 0x02
    38c2:	2b c0       	rjmp	.+86     	; 0x391a <malloc+0x96>
    38c4:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <__flp+0x1>
    38c8:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <__flp>
    38cc:	26 c0       	rjmp	.+76     	; 0x391a <malloc+0x96>
    38ce:	21 15       	cp	r18, r1
    38d0:	31 05       	cpc	r19, r1
    38d2:	19 f0       	breq	.+6      	; 0x38da <malloc+0x56>
    38d4:	42 17       	cp	r20, r18
    38d6:	53 07       	cpc	r21, r19
    38d8:	18 f4       	brcc	.+6      	; 0x38e0 <malloc+0x5c>
    38da:	9a 01       	movw	r18, r20
    38dc:	be 01       	movw	r22, r28
    38de:	df 01       	movw	r26, r30
    38e0:	ef 01       	movw	r28, r30
    38e2:	02 80       	ldd	r0, Z+2	; 0x02
    38e4:	f3 81       	ldd	r31, Z+3	; 0x03
    38e6:	e0 2d       	mov	r30, r0
    38e8:	dc cf       	rjmp	.-72     	; 0x38a2 <malloc+0x1e>
    38ea:	21 15       	cp	r18, r1
    38ec:	31 05       	cpc	r19, r1
    38ee:	09 f1       	breq	.+66     	; 0x3932 <malloc+0xae>
    38f0:	28 1b       	sub	r18, r24
    38f2:	39 0b       	sbc	r19, r25
    38f4:	24 30       	cpi	r18, 0x04	; 4
    38f6:	31 05       	cpc	r19, r1
    38f8:	90 f4       	brcc	.+36     	; 0x391e <malloc+0x9a>
    38fa:	12 96       	adiw	r26, 0x02	; 2
    38fc:	8d 91       	ld	r24, X+
    38fe:	9c 91       	ld	r25, X
    3900:	13 97       	sbiw	r26, 0x03	; 3
    3902:	61 15       	cp	r22, r1
    3904:	71 05       	cpc	r23, r1
    3906:	21 f0       	breq	.+8      	; 0x3910 <malloc+0x8c>
    3908:	fb 01       	movw	r30, r22
    390a:	93 83       	std	Z+3, r25	; 0x03
    390c:	82 83       	std	Z+2, r24	; 0x02
    390e:	04 c0       	rjmp	.+8      	; 0x3918 <malloc+0x94>
    3910:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <__flp+0x1>
    3914:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <__flp>
    3918:	fd 01       	movw	r30, r26
    391a:	32 96       	adiw	r30, 0x02	; 2
    391c:	44 c0       	rjmp	.+136    	; 0x39a6 <malloc+0x122>
    391e:	fd 01       	movw	r30, r26
    3920:	e2 0f       	add	r30, r18
    3922:	f3 1f       	adc	r31, r19
    3924:	81 93       	st	Z+, r24
    3926:	91 93       	st	Z+, r25
    3928:	22 50       	subi	r18, 0x02	; 2
    392a:	31 09       	sbc	r19, r1
    392c:	2d 93       	st	X+, r18
    392e:	3c 93       	st	X, r19
    3930:	3a c0       	rjmp	.+116    	; 0x39a6 <malloc+0x122>
    3932:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    3936:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    393a:	23 2b       	or	r18, r19
    393c:	41 f4       	brne	.+16     	; 0x394e <malloc+0xca>
    393e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    3942:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    3946:	30 93 d8 05 	sts	0x05D8, r19	; 0x8005d8 <__brkval+0x1>
    394a:	20 93 d7 05 	sts	0x05D7, r18	; 0x8005d7 <__brkval>
    394e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    3952:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    3956:	21 15       	cp	r18, r1
    3958:	31 05       	cpc	r19, r1
    395a:	41 f4       	brne	.+16     	; 0x396c <malloc+0xe8>
    395c:	2d b7       	in	r18, 0x3d	; 61
    395e:	3e b7       	in	r19, 0x3e	; 62
    3960:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    3964:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    3968:	24 1b       	sub	r18, r20
    396a:	35 0b       	sbc	r19, r21
    396c:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <__brkval>
    3970:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <__brkval+0x1>
    3974:	e2 17       	cp	r30, r18
    3976:	f3 07       	cpc	r31, r19
    3978:	a0 f4       	brcc	.+40     	; 0x39a2 <malloc+0x11e>
    397a:	2e 1b       	sub	r18, r30
    397c:	3f 0b       	sbc	r19, r31
    397e:	28 17       	cp	r18, r24
    3980:	39 07       	cpc	r19, r25
    3982:	78 f0       	brcs	.+30     	; 0x39a2 <malloc+0x11e>
    3984:	ac 01       	movw	r20, r24
    3986:	4e 5f       	subi	r20, 0xFE	; 254
    3988:	5f 4f       	sbci	r21, 0xFF	; 255
    398a:	24 17       	cp	r18, r20
    398c:	35 07       	cpc	r19, r21
    398e:	48 f0       	brcs	.+18     	; 0x39a2 <malloc+0x11e>
    3990:	4e 0f       	add	r20, r30
    3992:	5f 1f       	adc	r21, r31
    3994:	50 93 d8 05 	sts	0x05D8, r21	; 0x8005d8 <__brkval+0x1>
    3998:	40 93 d7 05 	sts	0x05D7, r20	; 0x8005d7 <__brkval>
    399c:	81 93       	st	Z+, r24
    399e:	91 93       	st	Z+, r25
    39a0:	02 c0       	rjmp	.+4      	; 0x39a6 <malloc+0x122>
    39a2:	e0 e0       	ldi	r30, 0x00	; 0
    39a4:	f0 e0       	ldi	r31, 0x00	; 0
    39a6:	cf 01       	movw	r24, r30
    39a8:	df 91       	pop	r29
    39aa:	cf 91       	pop	r28
    39ac:	08 95       	ret

000039ae <free>:
    39ae:	0f 93       	push	r16
    39b0:	1f 93       	push	r17
    39b2:	cf 93       	push	r28
    39b4:	df 93       	push	r29
    39b6:	00 97       	sbiw	r24, 0x00	; 0
    39b8:	09 f4       	brne	.+2      	; 0x39bc <free+0xe>
    39ba:	8c c0       	rjmp	.+280    	; 0x3ad4 <free+0x126>
    39bc:	fc 01       	movw	r30, r24
    39be:	32 97       	sbiw	r30, 0x02	; 2
    39c0:	13 82       	std	Z+3, r1	; 0x03
    39c2:	12 82       	std	Z+2, r1	; 0x02
    39c4:	00 91 d9 05 	lds	r16, 0x05D9	; 0x8005d9 <__flp>
    39c8:	10 91 da 05 	lds	r17, 0x05DA	; 0x8005da <__flp+0x1>
    39cc:	01 15       	cp	r16, r1
    39ce:	11 05       	cpc	r17, r1
    39d0:	81 f4       	brne	.+32     	; 0x39f2 <free+0x44>
    39d2:	20 81       	ld	r18, Z
    39d4:	31 81       	ldd	r19, Z+1	; 0x01
    39d6:	82 0f       	add	r24, r18
    39d8:	93 1f       	adc	r25, r19
    39da:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    39de:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    39e2:	28 17       	cp	r18, r24
    39e4:	39 07       	cpc	r19, r25
    39e6:	79 f5       	brne	.+94     	; 0x3a46 <free+0x98>
    39e8:	f0 93 d8 05 	sts	0x05D8, r31	; 0x8005d8 <__brkval+0x1>
    39ec:	e0 93 d7 05 	sts	0x05D7, r30	; 0x8005d7 <__brkval>
    39f0:	71 c0       	rjmp	.+226    	; 0x3ad4 <free+0x126>
    39f2:	d8 01       	movw	r26, r16
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	ae 17       	cp	r26, r30
    39fa:	bf 07       	cpc	r27, r31
    39fc:	50 f4       	brcc	.+20     	; 0x3a12 <free+0x64>
    39fe:	12 96       	adiw	r26, 0x02	; 2
    3a00:	2d 91       	ld	r18, X+
    3a02:	3c 91       	ld	r19, X
    3a04:	13 97       	sbiw	r26, 0x03	; 3
    3a06:	ad 01       	movw	r20, r26
    3a08:	21 15       	cp	r18, r1
    3a0a:	31 05       	cpc	r19, r1
    3a0c:	09 f1       	breq	.+66     	; 0x3a50 <free+0xa2>
    3a0e:	d9 01       	movw	r26, r18
    3a10:	f3 cf       	rjmp	.-26     	; 0x39f8 <free+0x4a>
    3a12:	9d 01       	movw	r18, r26
    3a14:	da 01       	movw	r26, r20
    3a16:	33 83       	std	Z+3, r19	; 0x03
    3a18:	22 83       	std	Z+2, r18	; 0x02
    3a1a:	60 81       	ld	r22, Z
    3a1c:	71 81       	ldd	r23, Z+1	; 0x01
    3a1e:	86 0f       	add	r24, r22
    3a20:	97 1f       	adc	r25, r23
    3a22:	82 17       	cp	r24, r18
    3a24:	93 07       	cpc	r25, r19
    3a26:	69 f4       	brne	.+26     	; 0x3a42 <free+0x94>
    3a28:	ec 01       	movw	r28, r24
    3a2a:	28 81       	ld	r18, Y
    3a2c:	39 81       	ldd	r19, Y+1	; 0x01
    3a2e:	26 0f       	add	r18, r22
    3a30:	37 1f       	adc	r19, r23
    3a32:	2e 5f       	subi	r18, 0xFE	; 254
    3a34:	3f 4f       	sbci	r19, 0xFF	; 255
    3a36:	31 83       	std	Z+1, r19	; 0x01
    3a38:	20 83       	st	Z, r18
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3e:	93 83       	std	Z+3, r25	; 0x03
    3a40:	82 83       	std	Z+2, r24	; 0x02
    3a42:	45 2b       	or	r20, r21
    3a44:	29 f4       	brne	.+10     	; 0x3a50 <free+0xa2>
    3a46:	f0 93 da 05 	sts	0x05DA, r31	; 0x8005da <__flp+0x1>
    3a4a:	e0 93 d9 05 	sts	0x05D9, r30	; 0x8005d9 <__flp>
    3a4e:	42 c0       	rjmp	.+132    	; 0x3ad4 <free+0x126>
    3a50:	13 96       	adiw	r26, 0x03	; 3
    3a52:	fc 93       	st	X, r31
    3a54:	ee 93       	st	-X, r30
    3a56:	12 97       	sbiw	r26, 0x02	; 2
    3a58:	ed 01       	movw	r28, r26
    3a5a:	49 91       	ld	r20, Y+
    3a5c:	59 91       	ld	r21, Y+
    3a5e:	9e 01       	movw	r18, r28
    3a60:	24 0f       	add	r18, r20
    3a62:	35 1f       	adc	r19, r21
    3a64:	e2 17       	cp	r30, r18
    3a66:	f3 07       	cpc	r31, r19
    3a68:	71 f4       	brne	.+28     	; 0x3a86 <free+0xd8>
    3a6a:	80 81       	ld	r24, Z
    3a6c:	91 81       	ldd	r25, Z+1	; 0x01
    3a6e:	84 0f       	add	r24, r20
    3a70:	95 1f       	adc	r25, r21
    3a72:	02 96       	adiw	r24, 0x02	; 2
    3a74:	11 96       	adiw	r26, 0x01	; 1
    3a76:	9c 93       	st	X, r25
    3a78:	8e 93       	st	-X, r24
    3a7a:	82 81       	ldd	r24, Z+2	; 0x02
    3a7c:	93 81       	ldd	r25, Z+3	; 0x03
    3a7e:	13 96       	adiw	r26, 0x03	; 3
    3a80:	9c 93       	st	X, r25
    3a82:	8e 93       	st	-X, r24
    3a84:	12 97       	sbiw	r26, 0x02	; 2
    3a86:	e0 e0       	ldi	r30, 0x00	; 0
    3a88:	f0 e0       	ldi	r31, 0x00	; 0
    3a8a:	d8 01       	movw	r26, r16
    3a8c:	12 96       	adiw	r26, 0x02	; 2
    3a8e:	8d 91       	ld	r24, X+
    3a90:	9c 91       	ld	r25, X
    3a92:	13 97       	sbiw	r26, 0x03	; 3
    3a94:	00 97       	sbiw	r24, 0x00	; 0
    3a96:	19 f0       	breq	.+6      	; 0x3a9e <free+0xf0>
    3a98:	f8 01       	movw	r30, r16
    3a9a:	8c 01       	movw	r16, r24
    3a9c:	f6 cf       	rjmp	.-20     	; 0x3a8a <free+0xdc>
    3a9e:	8d 91       	ld	r24, X+
    3aa0:	9c 91       	ld	r25, X
    3aa2:	98 01       	movw	r18, r16
    3aa4:	2e 5f       	subi	r18, 0xFE	; 254
    3aa6:	3f 4f       	sbci	r19, 0xFF	; 255
    3aa8:	82 0f       	add	r24, r18
    3aaa:	93 1f       	adc	r25, r19
    3aac:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    3ab0:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    3ab4:	28 17       	cp	r18, r24
    3ab6:	39 07       	cpc	r19, r25
    3ab8:	69 f4       	brne	.+26     	; 0x3ad4 <free+0x126>
    3aba:	30 97       	sbiw	r30, 0x00	; 0
    3abc:	29 f4       	brne	.+10     	; 0x3ac8 <free+0x11a>
    3abe:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <__flp+0x1>
    3ac2:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <__flp>
    3ac6:	02 c0       	rjmp	.+4      	; 0x3acc <free+0x11e>
    3ac8:	13 82       	std	Z+3, r1	; 0x03
    3aca:	12 82       	std	Z+2, r1	; 0x02
    3acc:	10 93 d8 05 	sts	0x05D8, r17	; 0x8005d8 <__brkval+0x1>
    3ad0:	00 93 d7 05 	sts	0x05D7, r16	; 0x8005d7 <__brkval>
    3ad4:	df 91       	pop	r29
    3ad6:	cf 91       	pop	r28
    3ad8:	1f 91       	pop	r17
    3ada:	0f 91       	pop	r16
    3adc:	08 95       	ret

00003ade <do_rand>:
    3ade:	8f 92       	push	r8
    3ae0:	9f 92       	push	r9
    3ae2:	af 92       	push	r10
    3ae4:	bf 92       	push	r11
    3ae6:	cf 92       	push	r12
    3ae8:	df 92       	push	r13
    3aea:	ef 92       	push	r14
    3aec:	ff 92       	push	r15
    3aee:	cf 93       	push	r28
    3af0:	df 93       	push	r29
    3af2:	ec 01       	movw	r28, r24
    3af4:	68 81       	ld	r22, Y
    3af6:	79 81       	ldd	r23, Y+1	; 0x01
    3af8:	8a 81       	ldd	r24, Y+2	; 0x02
    3afa:	9b 81       	ldd	r25, Y+3	; 0x03
    3afc:	61 15       	cp	r22, r1
    3afe:	71 05       	cpc	r23, r1
    3b00:	81 05       	cpc	r24, r1
    3b02:	91 05       	cpc	r25, r1
    3b04:	21 f4       	brne	.+8      	; 0x3b0e <do_rand+0x30>
    3b06:	64 e2       	ldi	r22, 0x24	; 36
    3b08:	79 ed       	ldi	r23, 0xD9	; 217
    3b0a:	8b e5       	ldi	r24, 0x5B	; 91
    3b0c:	97 e0       	ldi	r25, 0x07	; 7
    3b0e:	2d e1       	ldi	r18, 0x1D	; 29
    3b10:	33 ef       	ldi	r19, 0xF3	; 243
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	50 e0       	ldi	r21, 0x00	; 0
    3b16:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__divmodsi4>
    3b1a:	49 01       	movw	r8, r18
    3b1c:	5a 01       	movw	r10, r20
    3b1e:	9b 01       	movw	r18, r22
    3b20:	ac 01       	movw	r20, r24
    3b22:	a7 ea       	ldi	r26, 0xA7	; 167
    3b24:	b1 e4       	ldi	r27, 0x41	; 65
    3b26:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__muluhisi3>
    3b2a:	6b 01       	movw	r12, r22
    3b2c:	7c 01       	movw	r14, r24
    3b2e:	ac ee       	ldi	r26, 0xEC	; 236
    3b30:	b4 ef       	ldi	r27, 0xF4	; 244
    3b32:	a5 01       	movw	r20, r10
    3b34:	94 01       	movw	r18, r8
    3b36:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <__mulohisi3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8c 0d       	add	r24, r12
    3b40:	9d 1d       	adc	r25, r13
    3b42:	ae 1d       	adc	r26, r14
    3b44:	bf 1d       	adc	r27, r15
    3b46:	b7 ff       	sbrs	r27, 7
    3b48:	03 c0       	rjmp	.+6      	; 0x3b50 <do_rand+0x72>
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	a1 09       	sbc	r26, r1
    3b4e:	b0 48       	sbci	r27, 0x80	; 128
    3b50:	88 83       	st	Y, r24
    3b52:	99 83       	std	Y+1, r25	; 0x01
    3b54:	aa 83       	std	Y+2, r26	; 0x02
    3b56:	bb 83       	std	Y+3, r27	; 0x03
    3b58:	9f 77       	andi	r25, 0x7F	; 127
    3b5a:	df 91       	pop	r29
    3b5c:	cf 91       	pop	r28
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	bf 90       	pop	r11
    3b68:	af 90       	pop	r10
    3b6a:	9f 90       	pop	r9
    3b6c:	8f 90       	pop	r8
    3b6e:	08 95       	ret

00003b70 <rand_r>:
    3b70:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <do_rand>
    3b74:	08 95       	ret

00003b76 <rand>:
    3b76:	86 e0       	ldi	r24, 0x06	; 6
    3b78:	91 e0       	ldi	r25, 0x01	; 1
    3b7a:	0e 94 6f 1d 	call	0x3ade	; 0x3ade <do_rand>
    3b7e:	08 95       	ret

00003b80 <srand>:
    3b80:	a0 e0       	ldi	r26, 0x00	; 0
    3b82:	b0 e0       	ldi	r27, 0x00	; 0
    3b84:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3b88:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3b8c:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3b90:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3b94:	08 95       	ret

00003b96 <memcpy>:
    3b96:	fb 01       	movw	r30, r22
    3b98:	dc 01       	movw	r26, r24
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <memcpy+0xa>
    3b9c:	01 90       	ld	r0, Z+
    3b9e:	0d 92       	st	X+, r0
    3ba0:	41 50       	subi	r20, 0x01	; 1
    3ba2:	50 40       	sbci	r21, 0x00	; 0
    3ba4:	d8 f7       	brcc	.-10     	; 0x3b9c <memcpy+0x6>
    3ba6:	08 95       	ret

00003ba8 <memset>:
    3ba8:	dc 01       	movw	r26, r24
    3baa:	01 c0       	rjmp	.+2      	; 0x3bae <memset+0x6>
    3bac:	6d 93       	st	X+, r22
    3bae:	41 50       	subi	r20, 0x01	; 1
    3bb0:	50 40       	sbci	r21, 0x00	; 0
    3bb2:	e0 f7       	brcc	.-8      	; 0x3bac <memset+0x4>
    3bb4:	08 95       	ret

00003bb6 <__divmodsi4>:
    3bb6:	05 2e       	mov	r0, r21
    3bb8:	97 fb       	bst	r25, 7
    3bba:	1e f4       	brtc	.+6      	; 0x3bc2 <__divmodsi4+0xc>
    3bbc:	00 94       	com	r0
    3bbe:	0e 94 f2 1d 	call	0x3be4	; 0x3be4 <__negsi2>
    3bc2:	57 fd       	sbrc	r21, 7
    3bc4:	07 d0       	rcall	.+14     	; 0x3bd4 <__divmodsi4_neg2>
    3bc6:	0e 94 06 1c 	call	0x380c	; 0x380c <__udivmodsi4>
    3bca:	07 fc       	sbrc	r0, 7
    3bcc:	03 d0       	rcall	.+6      	; 0x3bd4 <__divmodsi4_neg2>
    3bce:	4e f4       	brtc	.+18     	; 0x3be2 <__divmodsi4_exit>
    3bd0:	0c 94 f2 1d 	jmp	0x3be4	; 0x3be4 <__negsi2>

00003bd4 <__divmodsi4_neg2>:
    3bd4:	50 95       	com	r21
    3bd6:	40 95       	com	r20
    3bd8:	30 95       	com	r19
    3bda:	21 95       	neg	r18
    3bdc:	3f 4f       	sbci	r19, 0xFF	; 255
    3bde:	4f 4f       	sbci	r20, 0xFF	; 255
    3be0:	5f 4f       	sbci	r21, 0xFF	; 255

00003be2 <__divmodsi4_exit>:
    3be2:	08 95       	ret

00003be4 <__negsi2>:
    3be4:	90 95       	com	r25
    3be6:	80 95       	com	r24
    3be8:	70 95       	com	r23
    3bea:	61 95       	neg	r22
    3bec:	7f 4f       	sbci	r23, 0xFF	; 255
    3bee:	8f 4f       	sbci	r24, 0xFF	; 255
    3bf0:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf2:	08 95       	ret

00003bf4 <__muluhisi3>:
    3bf4:	0e 94 0d 1e 	call	0x3c1a	; 0x3c1a <__umulhisi3>
    3bf8:	a5 9f       	mul	r26, r21
    3bfa:	90 0d       	add	r25, r0
    3bfc:	b4 9f       	mul	r27, r20
    3bfe:	90 0d       	add	r25, r0
    3c00:	a4 9f       	mul	r26, r20
    3c02:	80 0d       	add	r24, r0
    3c04:	91 1d       	adc	r25, r1
    3c06:	11 24       	eor	r1, r1
    3c08:	08 95       	ret

00003c0a <__mulshisi3>:
    3c0a:	b7 ff       	sbrs	r27, 7
    3c0c:	0c 94 fa 1d 	jmp	0x3bf4	; 0x3bf4 <__muluhisi3>

00003c10 <__mulohisi3>:
    3c10:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <__muluhisi3>
    3c14:	82 1b       	sub	r24, r18
    3c16:	93 0b       	sbc	r25, r19
    3c18:	08 95       	ret

00003c1a <__umulhisi3>:
    3c1a:	a2 9f       	mul	r26, r18
    3c1c:	b0 01       	movw	r22, r0
    3c1e:	b3 9f       	mul	r27, r19
    3c20:	c0 01       	movw	r24, r0
    3c22:	a3 9f       	mul	r26, r19
    3c24:	70 0d       	add	r23, r0
    3c26:	81 1d       	adc	r24, r1
    3c28:	11 24       	eor	r1, r1
    3c2a:	91 1d       	adc	r25, r1
    3c2c:	b2 9f       	mul	r27, r18
    3c2e:	70 0d       	add	r23, r0
    3c30:	81 1d       	adc	r24, r1
    3c32:	11 24       	eor	r1, r1
    3c34:	91 1d       	adc	r25, r1
    3c36:	08 95       	ret

00003c38 <_exit>:
    3c38:	f8 94       	cli

00003c3a <__stop_program>:
    3c3a:	ff cf       	rjmp	.-2      	; 0x3c3a <__stop_program>
