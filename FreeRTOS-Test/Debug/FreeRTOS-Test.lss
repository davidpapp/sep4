
FreeRTOS-Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  00003ad2  00003b66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ad2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000485  00800156  00800156  00003bbc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00003bbc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003bec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000004e0  00000000  00000000  00003c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000380e  00000000  00000000  0000410c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b61  00000000  00000000  0000791a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000341e  00000000  00000000  0000847b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000132c  00000000  00000000  0000b89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001908  00000000  00000000  0000cbc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000028fd  00000000  00000000  0000e4d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000450  00000000  00000000  00010dcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       8:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
       c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      10:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      14:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      18:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      1c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      20:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      24:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      28:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      2c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      30:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      34:	0c 94 4e 0b 	jmp	0x169c	; 0x169c <__vector_13>
      38:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      3c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      40:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__vector_16>
      44:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      4c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      50:	0c 94 73 0c 	jmp	0x18e6	; 0x18e6 <__vector_20>
      54:	0c 94 cb 0c 	jmp	0x1996	; 0x1996 <__vector_21>
      58:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      5c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      60:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      64:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      68:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      6c:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      70:	0c 94 25 0d 	jmp	0x1a4a	; 0x1a4a <__vector_28>
      74:	0c 94 7d 0d 	jmp	0x1afa	; 0x1afa <__vector_29>
      78:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__bad_interrupt>
      7c:	4b 03       	fmul	r20, r19
      7e:	54 03       	mulsu	r21, r20
      80:	67 03       	mulsu	r22, r23
      82:	72 03       	mulsu	r23, r18
      84:	85 03       	fmuls	r16, r21
      86:	8e 03       	fmulsu	r16, r22
      88:	a1 03       	fmuls	r18, r17
      8a:	ac 03       	fmulsu	r18, r20

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d8 e0       	ldi	r29, 0x08	; 8
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e2 ed       	ldi	r30, 0xD2	; 210
      a0:	fa e3       	ldi	r31, 0x3A	; 58
      a2:	02 c0       	rjmp	.+4      	; 0xa8 <__do_copy_data+0x10>
      a4:	05 90       	lpm	r0, Z+
      a6:	0d 92       	st	X+, r0
      a8:	a6 35       	cpi	r26, 0x56	; 86
      aa:	b1 07       	cpc	r27, r17
      ac:	d9 f7       	brne	.-10     	; 0xa4 <__do_copy_data+0xc>

000000ae <__do_clear_bss>:
      ae:	25 e0       	ldi	r18, 0x05	; 5
      b0:	a6 e5       	ldi	r26, 0x56	; 86
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	01 c0       	rjmp	.+2      	; 0xb8 <.do_clear_bss_start>

000000b6 <.do_clear_bss_loop>:
      b6:	1d 92       	st	X+, r1

000000b8 <.do_clear_bss_start>:
      b8:	ab 3d       	cpi	r26, 0xDB	; 219
      ba:	b2 07       	cpc	r27, r18
      bc:	e1 f7       	brne	.-8      	; 0xb6 <.do_clear_bss_loop>
      be:	0e 94 c2 04 	call	0x984	; 0x984 <main>
      c2:	0c 94 67 1d 	jmp	0x3ace	; 0x3ace <_exit>

000000c6 <__bad_interrupt>:
      c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ca <serial_task>:
				if (data == 0x62){
					col_value[0] >>= 1;
				}
			}
		}	
	}
      ca:	cf 93       	push	r28
      cc:	df 93       	push	r29
      ce:	cd b7       	in	r28, 0x3d	; 61
      d0:	de b7       	in	r29, 0x3e	; 62
      d2:	28 97       	sbiw	r28, 0x08	; 8
      d4:	0f b6       	in	r0, 0x3f	; 63
      d6:	f8 94       	cli
      d8:	de bf       	out	0x3e, r29	; 62
      da:	0f be       	out	0x3f, r0	; 63
      dc:	cd bf       	out	0x3d, r28	; 61
      de:	98 87       	std	Y+8, r25	; 0x08
      e0:	8f 83       	std	Y+7, r24	; 0x07
      e2:	19 82       	std	Y+1, r1	; 0x01
      e4:	1e 82       	std	Y+6, r1	; 0x06
      e6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <xTaskGetTickCount>
      ea:	9d 83       	std	Y+5, r25	; 0x05
      ec:	8c 83       	std	Y+4, r24	; 0x04
      ee:	2e c0       	rjmp	.+92     	; 0x14c <serial_task+0x82>
      f0:	89 81       	ldd	r24, Y+1	; 0x01
      f2:	88 2f       	mov	r24, r24
      f4:	90 e0       	ldi	r25, 0x00	; 0
      f6:	81 30       	cpi	r24, 0x01	; 1
      f8:	91 05       	cpc	r25, r1
      fa:	61 f0       	breq	.+24     	; 0x114 <serial_task+0x4a>
      fc:	82 30       	cpi	r24, 0x02	; 2
      fe:	91 05       	cpc	r25, r1
     100:	b1 f0       	breq	.+44     	; 0x12e <serial_task+0x64>
     102:	89 2b       	or	r24, r25
     104:	09 f5       	brne	.+66     	; 0x148 <serial_task+0x7e>
     106:	9e 81       	ldd	r25, Y+6	; 0x06
     108:	8a 81       	ldd	r24, Y+2	; 0x02
     10a:	98 17       	cp	r25, r24
     10c:	11 f4       	brne	.+4      	; 0x112 <serial_task+0x48>
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	89 83       	std	Y+1, r24	; 0x01
     112:	1c c0       	rjmp	.+56     	; 0x14c <serial_task+0x82>
     114:	9e 81       	ldd	r25, Y+6	; 0x06
     116:	8a 81       	ldd	r24, Y+2	; 0x02
     118:	98 17       	cp	r25, r24
     11a:	11 f4       	brne	.+4      	; 0x120 <serial_task+0x56>
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	06 c0       	rjmp	.+12     	; 0x12c <serial_task+0x62>
     120:	9e 81       	ldd	r25, Y+6	; 0x06
     122:	8b 81       	ldd	r24, Y+3	; 0x03
     124:	98 17       	cp	r25, r24
     126:	11 f4       	brne	.+4      	; 0x12c <serial_task+0x62>
     128:	82 e0       	ldi	r24, 0x02	; 2
     12a:	89 83       	std	Y+1, r24	; 0x01
     12c:	0f c0       	rjmp	.+30     	; 0x14c <serial_task+0x82>
     12e:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     132:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     136:	be 01       	movw	r22, r28
     138:	6a 5f       	subi	r22, 0xFA	; 250
     13a:	7f 4f       	sbci	r23, 0xFF	; 255
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	40 e0       	ldi	r20, 0x00	; 0
     140:	50 e0       	ldi	r21, 0x00	; 0
     142:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
     146:	02 c0       	rjmp	.+4      	; 0x14c <serial_task+0x82>
     148:	19 82       	std	Y+1, r1	; 0x01
     14a:	00 00       	nop
     14c:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     150:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     154:	be 01       	movw	r22, r28
     156:	6a 5f       	subi	r22, 0xFA	; 250
     158:	7f 4f       	sbci	r23, 0xFF	; 255
     15a:	20 e0       	ldi	r18, 0x00	; 0
     15c:	40 e0       	ldi	r20, 0x00	; 0
     15e:	50 e0       	ldi	r21, 0x00	; 0
     160:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
     164:	88 23       	and	r24, r24
     166:	21 f6       	brne	.-120    	; 0xf0 <serial_task+0x26>
     168:	ce 01       	movw	r24, r28
     16a:	04 96       	adiw	r24, 0x04	; 4
     16c:	64 e1       	ldi	r22, 0x14	; 20
     16e:	70 e0       	ldi	r23, 0x00	; 0
     170:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <vTaskDelayUntil>
     174:	bc cf       	rjmp	.-136    	; 0xee <serial_task+0x24>

00000176 <move_player>:
	
}

void move_player(uint8_t *position, uint8_t direction){
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	00 d0       	rcall	.+0      	; 0x17c <move_player+0x6>
     17c:	00 d0       	rcall	.+0      	; 0x17e <move_player+0x8>
     17e:	1f 92       	push	r1
     180:	cd b7       	in	r28, 0x3d	; 61
     182:	de b7       	in	r29, 0x3e	; 62
     184:	9c 83       	std	Y+4, r25	; 0x04
     186:	8b 83       	std	Y+3, r24	; 0x03
     188:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 5;
     18a:	85 e0       	ldi	r24, 0x05	; 5
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	9a 83       	std	Y+2, r25	; 0x02
     190:	89 83       	std	Y+1, r24	; 0x01
	if (direction == 0){
     192:	8d 81       	ldd	r24, Y+5	; 0x05
     194:	88 23       	and	r24, r24
     196:	81 f4       	brne	.+32     	; 0x1b8 <move_player+0x42>
		mask <<= *position;
     198:	8b 81       	ldd	r24, Y+3	; 0x03
     19a:	9c 81       	ldd	r25, Y+4	; 0x04
     19c:	fc 01       	movw	r30, r24
     19e:	80 81       	ld	r24, Z
     1a0:	28 2f       	mov	r18, r24
     1a2:	30 e0       	ldi	r19, 0x00	; 0
     1a4:	89 81       	ldd	r24, Y+1	; 0x01
     1a6:	9a 81       	ldd	r25, Y+2	; 0x02
     1a8:	02 c0       	rjmp	.+4      	; 0x1ae <move_player+0x38>
     1aa:	88 0f       	add	r24, r24
     1ac:	99 1f       	adc	r25, r25
     1ae:	2a 95       	dec	r18
     1b0:	e2 f7       	brpl	.-8      	; 0x1aa <move_player+0x34>
     1b2:	9a 83       	std	Y+2, r25	; 0x02
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	12 c0       	rjmp	.+36     	; 0x1dc <move_player+0x66>
	}
	else{
		mask <<= *position-1;
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	9c 81       	ldd	r25, Y+4	; 0x04
     1bc:	fc 01       	movw	r30, r24
     1be:	80 81       	ld	r24, Z
     1c0:	88 2f       	mov	r24, r24
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	9c 01       	movw	r18, r24
     1c6:	21 50       	subi	r18, 0x01	; 1
     1c8:	31 09       	sbc	r19, r1
     1ca:	89 81       	ldd	r24, Y+1	; 0x01
     1cc:	9a 81       	ldd	r25, Y+2	; 0x02
     1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <move_player+0x5e>
     1d0:	88 0f       	add	r24, r24
     1d2:	99 1f       	adc	r25, r25
     1d4:	2a 95       	dec	r18
     1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <move_player+0x5a>
     1d8:	9a 83       	std	Y+2, r25	; 0x02
     1da:	89 83       	std	Y+1, r24	; 0x01
	}
	
	xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     1dc:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     1e0:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	4a e0       	ldi	r20, 0x0A	; 10
     1e8:	50 e0       	ldi	r21, 0x00	; 0
     1ea:	60 e0       	ldi	r22, 0x00	; 0
     1ec:	70 e0       	ldi	r23, 0x00	; 0
     1ee:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
	col_value[0] ^= mask;
     1f2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <col_value>
     1f6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <col_value+0x1>
     1fa:	89 81       	ldd	r24, Y+1	; 0x01
     1fc:	9a 81       	ldd	r25, Y+2	; 0x02
     1fe:	82 27       	eor	r24, r18
     200:	93 27       	eor	r25, r19
     202:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <col_value+0x1>
     206:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <col_value>
	xSemaphoreGive(_col_0_mutex);
     20a:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     20e:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     212:	20 e0       	ldi	r18, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	60 e0       	ldi	r22, 0x00	; 0
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
}
     220:	0f 90       	pop	r0
     222:	0f 90       	pop	r0
     224:	0f 90       	pop	r0
     226:	0f 90       	pop	r0
     228:	0f 90       	pop	r0
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	08 95       	ret

00000230 <local_player_task>:

void local_player_task(void *pvParameters)
{
     230:	cf 93       	push	r28
     232:	df 93       	push	r29
     234:	00 d0       	rcall	.+0      	; 0x236 <local_player_task+0x6>
     236:	00 d0       	rcall	.+0      	; 0x238 <local_player_task+0x8>
     238:	cd b7       	in	r28, 0x3d	; 61
     23a:	de b7       	in	r29, 0x3e	; 62
     23c:	9c 83       	std	Y+4, r25	; 0x04
     23e:	8b 83       	std	Y+3, r24	; 0x03
	(void) pvParameters;
	TickType_t lastWakeTime;
	lastWakeTime = xTaskGetTickCount();
     240:	0e 94 30 16 	call	0x2c60	; 0x2c60 <xTaskGetTickCount>
     244:	9a 83       	std	Y+2, r25	; 0x02
     246:	89 83       	std	Y+1, r24	; 0x01
	while (1)
	{
		//xSemaphoreTake(_player_position_mutex, (TickType_t) 2);
		if (!(PINC & (1<<6)) && player_position > 0){
     248:	86 e2       	ldi	r24, 0x26	; 38
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	fc 01       	movw	r30, r24
     24e:	80 81       	ld	r24, Z
     250:	88 2f       	mov	r24, r24
     252:	90 e0       	ldi	r25, 0x00	; 0
     254:	80 74       	andi	r24, 0x40	; 64
     256:	99 27       	eor	r25, r25
     258:	89 2b       	or	r24, r25
     25a:	61 f5       	brne	.+88     	; 0x2b4 <local_player_task+0x84>
     25c:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     260:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     264:	18 16       	cp	r1, r24
     266:	19 06       	cpc	r1, r25
     268:	2c f5       	brge	.+74     	; 0x2b4 <local_player_task+0x84>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     26a:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     26e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	4a e0       	ldi	r20, 0x0A	; 10
     276:	50 e0       	ldi	r21, 0x00	; 0
     278:	60 e0       	ldi	r22, 0x00	; 0
     27a:	70 e0       	ldi	r23, 0x00	; 0
     27c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
			--player_position;
     280:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     284:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     288:	01 97       	sbiw	r24, 0x01	; 1
     28a:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     28e:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     292:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     296:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     29a:	20 e0       	ldi	r18, 0x00	; 0
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	60 e0       	ldi	r22, 0x00	; 0
     2a2:	70 e0       	ldi	r23, 0x00	; 0
     2a4:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
			move_player(&player_position, 0);
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	8a e0       	ldi	r24, 0x0A	; 10
     2ac:	91 e0       	ldi	r25, 0x01	; 1
     2ae:	0e 94 bb 00 	call	0x176	; 0x176 <move_player>
     2b2:	34 c0       	rjmp	.+104    	; 0x31c <local_player_task+0xec>
		}
		else if (!(PINC & (1<<0)) && player_position < 8){
     2b4:	86 e2       	ldi	r24, 0x26	; 38
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	88 2f       	mov	r24, r24
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	81 70       	andi	r24, 0x01	; 1
     2c2:	99 27       	eor	r25, r25
     2c4:	89 2b       	or	r24, r25
     2c6:	51 f5       	brne	.+84     	; 0x31c <local_player_task+0xec>
     2c8:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     2cc:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     2d0:	08 97       	sbiw	r24, 0x08	; 8
     2d2:	24 f5       	brge	.+72     	; 0x31c <local_player_task+0xec>
			xSemaphoreTake(_player_position_mutex, (TickType_t) 10);
     2d4:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     2d8:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     2dc:	20 e0       	ldi	r18, 0x00	; 0
     2de:	4a e0       	ldi	r20, 0x0A	; 10
     2e0:	50 e0       	ldi	r21, 0x00	; 0
     2e2:	60 e0       	ldi	r22, 0x00	; 0
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
			++player_position;
     2ea:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     2ee:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     2f2:	01 96       	adiw	r24, 0x01	; 1
     2f4:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <player_position+0x1>
     2f8:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <player_position>
			xSemaphoreGive(_player_position_mutex);
     2fc:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <_player_position_mutex>
     300:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <_player_position_mutex+0x1>
     304:	20 e0       	ldi	r18, 0x00	; 0
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	50 e0       	ldi	r21, 0x00	; 0
     30a:	60 e0       	ldi	r22, 0x00	; 0
     30c:	70 e0       	ldi	r23, 0x00	; 0
     30e:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
			move_player(&player_position, 1);
     312:	61 e0       	ldi	r22, 0x01	; 1
     314:	8a e0       	ldi	r24, 0x0A	; 10
     316:	91 e0       	ldi	r25, 0x01	; 1
     318:	0e 94 bb 00 	call	0x176	; 0x176 <move_player>
		}
		//xSemaphoreGive(_player_position_mutex);
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 40);
     31c:	68 e2       	ldi	r22, 0x28	; 40
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	ce 01       	movw	r24, r28
     322:	01 96       	adiw	r24, 0x01	; 1
     324:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <vTaskDelayUntil>
	}	
     328:	8f cf       	rjmp	.-226    	; 0x248 <local_player_task+0x18>

0000032a <bounce>:
	r %= 8;
	*direction = r;
}
*/

void bounce(uint8_t *direction, uint8_t side){
     32a:	cf 93       	push	r28
     32c:	df 93       	push	r29
     32e:	00 d0       	rcall	.+0      	; 0x330 <bounce+0x6>
     330:	00 d0       	rcall	.+0      	; 0x332 <bounce+0x8>
     332:	00 d0       	rcall	.+0      	; 0x334 <bounce+0xa>
     334:	cd b7       	in	r28, 0x3d	; 61
     336:	de b7       	in	r29, 0x3e	; 62
     338:	9b 83       	std	Y+3, r25	; 0x03
     33a:	8a 83       	std	Y+2, r24	; 0x02
     33c:	6c 83       	std	Y+4, r22	; 0x04

	if ( (*(direction)%2)==0){
     33e:	8a 81       	ldd	r24, Y+2	; 0x02
     340:	9b 81       	ldd	r25, Y+3	; 0x03
     342:	fc 01       	movw	r30, r24
     344:	80 81       	ld	r24, Z
     346:	81 70       	andi	r24, 0x01	; 1
     348:	88 23       	and	r24, r24
     34a:	d9 f4       	brne	.+54     	; 0x382 <bounce+0x58>
		uint8_t r = rand()%3;
     34c:	0e 94 06 1d 	call	0x3a0c	; 0x3a0c <rand>
     350:	23 e0       	ldi	r18, 0x03	; 3
     352:	30 e0       	ldi	r19, 0x00	; 0
     354:	b9 01       	movw	r22, r18
     356:	0e 94 3d 1b 	call	0x367a	; 0x367a <__divmodhi4>
     35a:	89 83       	std	Y+1, r24	; 0x01
		r += 3;
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	8d 5f       	subi	r24, 0xFD	; 253
     360:	89 83       	std	Y+1, r24	; 0x01
		r += *direction;
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	9b 81       	ldd	r25, Y+3	; 0x03
     366:	fc 01       	movw	r30, r24
     368:	80 81       	ld	r24, Z
     36a:	99 81       	ldd	r25, Y+1	; 0x01
     36c:	89 0f       	add	r24, r25
     36e:	89 83       	std	Y+1, r24	; 0x01
		r %= 8;
     370:	89 81       	ldd	r24, Y+1	; 0x01
     372:	87 70       	andi	r24, 0x07	; 7
     374:	89 83       	std	Y+1, r24	; 0x01
		*direction = r;
     376:	8a 81       	ldd	r24, Y+2	; 0x02
     378:	9b 81       	ldd	r25, Y+3	; 0x03
     37a:	29 81       	ldd	r18, Y+1	; 0x01
     37c:	fc 01       	movw	r30, r24
     37e:	20 83       	st	Z, r18
     380:	5e c0       	rjmp	.+188    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
	}
	else{
		if (side == 0){
     382:	8c 81       	ldd	r24, Y+4	; 0x04
     384:	88 23       	and	r24, r24
     386:	71 f5       	brne	.+92     	; 0x3e4 <bounce+0xba>
			switch (*direction){
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	9b 81       	ldd	r25, Y+3	; 0x03
     38c:	fc 01       	movw	r30, r24
     38e:	80 81       	ld	r24, Z
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	83 30       	cpi	r24, 0x03	; 3
     396:	91 05       	cpc	r25, r1
     398:	91 f0       	breq	.+36     	; 0x3be <bounce+0x94>
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	91 05       	cpc	r25, r1
     39e:	1c f4       	brge	.+6      	; 0x3a6 <bounce+0x7c>
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	39 f0       	breq	.+14     	; 0x3b2 <bounce+0x88>
     3a4:	4c c0       	rjmp	.+152    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     3a6:	85 30       	cpi	r24, 0x05	; 5
     3a8:	91 05       	cpc	r25, r1
     3aa:	79 f0       	breq	.+30     	; 0x3ca <bounce+0xa0>
     3ac:	07 97       	sbiw	r24, 0x07	; 7
     3ae:	99 f0       	breq	.+38     	; 0x3d6 <bounce+0xac>
     3b0:	46 c0       	rjmp	.+140    	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
				case 1:
				*direction = 3;
     3b2:	8a 81       	ldd	r24, Y+2	; 0x02
     3b4:	9b 81       	ldd	r25, Y+3	; 0x03
     3b6:	23 e0       	ldi	r18, 0x03	; 3
     3b8:	fc 01       	movw	r30, r24
     3ba:	20 83       	st	Z, r18
				break;
     3bc:	12 c0       	rjmp	.+36     	; 0x3e2 <bounce+0xb8>
				case 3:
				*direction = 1;
     3be:	8a 81       	ldd	r24, Y+2	; 0x02
     3c0:	9b 81       	ldd	r25, Y+3	; 0x03
     3c2:	21 e0       	ldi	r18, 0x01	; 1
     3c4:	fc 01       	movw	r30, r24
     3c6:	20 83       	st	Z, r18
				break;
     3c8:	0c c0       	rjmp	.+24     	; 0x3e2 <bounce+0xb8>
				case 5:
				*direction = 7;
     3ca:	8a 81       	ldd	r24, Y+2	; 0x02
     3cc:	9b 81       	ldd	r25, Y+3	; 0x03
     3ce:	27 e0       	ldi	r18, 0x07	; 7
     3d0:	fc 01       	movw	r30, r24
     3d2:	20 83       	st	Z, r18
				break;
     3d4:	06 c0       	rjmp	.+12     	; 0x3e2 <bounce+0xb8>
				case 7:
				*direction = 5;
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	9b 81       	ldd	r25, Y+3	; 0x03
     3da:	25 e0       	ldi	r18, 0x05	; 5
     3dc:	fc 01       	movw	r30, r24
     3de:	20 83       	st	Z, r18
				break;
     3e0:	00 00       	nop
     3e2:	2d c0       	rjmp	.+90     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
			}
		}
		else{
			switch (*direction){
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	9b 81       	ldd	r25, Y+3	; 0x03
     3e8:	fc 01       	movw	r30, r24
     3ea:	80 81       	ld	r24, Z
     3ec:	88 2f       	mov	r24, r24
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	83 30       	cpi	r24, 0x03	; 3
     3f2:	91 05       	cpc	r25, r1
     3f4:	91 f0       	breq	.+36     	; 0x41a <__FUSE_REGION_LENGTH__+0x1a>
     3f6:	84 30       	cpi	r24, 0x04	; 4
     3f8:	91 05       	cpc	r25, r1
     3fa:	1c f4       	brge	.+6      	; 0x402 <__FUSE_REGION_LENGTH__+0x2>
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	39 f0       	breq	.+14     	; 0x40e <__FUSE_REGION_LENGTH__+0xe>
     400:	1e c0       	rjmp	.+60     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
     402:	85 30       	cpi	r24, 0x05	; 5
     404:	91 05       	cpc	r25, r1
     406:	79 f0       	breq	.+30     	; 0x426 <__FUSE_REGION_LENGTH__+0x26>
     408:	07 97       	sbiw	r24, 0x07	; 7
     40a:	99 f0       	breq	.+38     	; 0x432 <__FUSE_REGION_LENGTH__+0x32>
     40c:	18 c0       	rjmp	.+48     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
				case 1:
				*direction = 7;
     40e:	8a 81       	ldd	r24, Y+2	; 0x02
     410:	9b 81       	ldd	r25, Y+3	; 0x03
     412:	27 e0       	ldi	r18, 0x07	; 7
     414:	fc 01       	movw	r30, r24
     416:	20 83       	st	Z, r18
				break;
     418:	12 c0       	rjmp	.+36     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
				case 3:
				*direction = 5;
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	9b 81       	ldd	r25, Y+3	; 0x03
     41e:	25 e0       	ldi	r18, 0x05	; 5
     420:	fc 01       	movw	r30, r24
     422:	20 83       	st	Z, r18
				break;
     424:	0c c0       	rjmp	.+24     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
				case 5:
				*direction = 3;
     426:	8a 81       	ldd	r24, Y+2	; 0x02
     428:	9b 81       	ldd	r25, Y+3	; 0x03
     42a:	23 e0       	ldi	r18, 0x03	; 3
     42c:	fc 01       	movw	r30, r24
     42e:	20 83       	st	Z, r18
				break;
     430:	06 c0       	rjmp	.+12     	; 0x43e <__FUSE_REGION_LENGTH__+0x3e>
				case 7:
				*direction = 1;
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	9b 81       	ldd	r25, Y+3	; 0x03
     436:	21 e0       	ldi	r18, 0x01	; 1
     438:	fc 01       	movw	r30, r24
     43a:	20 83       	st	Z, r18
				break;
     43c:	00 00       	nop
			}
		}
	}
	
	
}
     43e:	26 96       	adiw	r28, 0x06	; 6
     440:	0f b6       	in	r0, 0x3f	; 63
     442:	f8 94       	cli
     444:	de bf       	out	0x3e, r29	; 62
     446:	0f be       	out	0x3f, r0	; 63
     448:	cd bf       	out	0x3d, r28	; 61
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	08 95       	ret

00000450 <move_ball>:

void move_ball(uint8_t *current, uint8_t *next){
     450:	cf 93       	push	r28
     452:	df 93       	push	r29
     454:	00 d0       	rcall	.+0      	; 0x456 <move_ball+0x6>
     456:	00 d0       	rcall	.+0      	; 0x458 <move_ball+0x8>
     458:	00 d0       	rcall	.+0      	; 0x45a <move_ball+0xa>
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	9c 83       	std	Y+4, r25	; 0x04
     460:	8b 83       	std	Y+3, r24	; 0x03
     462:	7e 83       	std	Y+6, r23	; 0x06
     464:	6d 83       	std	Y+5, r22	; 0x05
	uint16_t mask = 1<< current[1];
     466:	8b 81       	ldd	r24, Y+3	; 0x03
     468:	9c 81       	ldd	r25, Y+4	; 0x04
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	fc 01       	movw	r30, r24
     46e:	80 81       	ld	r24, Z
     470:	28 2f       	mov	r18, r24
     472:	30 e0       	ldi	r19, 0x00	; 0
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	02 c0       	rjmp	.+4      	; 0x47e <move_ball+0x2e>
     47a:	88 0f       	add	r24, r24
     47c:	99 1f       	adc	r25, r25
     47e:	2a 95       	dec	r18
     480:	e2 f7       	brpl	.-8      	; 0x47a <move_ball+0x2a>
     482:	9a 83       	std	Y+2, r25	; 0x02
     484:	89 83       	std	Y+1, r24	; 0x01
	mask = ~mask;
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	80 95       	com	r24
     48c:	90 95       	com	r25
     48e:	9a 83       	std	Y+2, r25	; 0x02
     490:	89 83       	std	Y+1, r24	; 0x01

	if (current[0] == 0){
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	fc 01       	movw	r30, r24
     498:	80 81       	ld	r24, Z
     49a:	88 23       	and	r24, r24
     49c:	a9 f5       	brne	.+106    	; 0x508 <move_ball+0xb8>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     49e:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     4a2:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     4a6:	20 e0       	ldi	r18, 0x00	; 0
     4a8:	4a e0       	ldi	r20, 0x0A	; 10
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	70 e0       	ldi	r23, 0x00	; 0
     4b0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
		col_value[current[0]] &= mask;
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	fc 01       	movw	r30, r24
     4ba:	80 81       	ld	r24, Z
     4bc:	88 2f       	mov	r24, r24
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	2b 81       	ldd	r18, Y+3	; 0x03
     4c2:	3c 81       	ldd	r19, Y+4	; 0x04
     4c4:	f9 01       	movw	r30, r18
     4c6:	20 81       	ld	r18, Z
     4c8:	22 2f       	mov	r18, r18
     4ca:	30 e0       	ldi	r19, 0x00	; 0
     4cc:	22 0f       	add	r18, r18
     4ce:	33 1f       	adc	r19, r19
     4d0:	24 5f       	subi	r18, 0xF4	; 244
     4d2:	3e 4f       	sbci	r19, 0xFE	; 254
     4d4:	f9 01       	movw	r30, r18
     4d6:	40 81       	ld	r20, Z
     4d8:	51 81       	ldd	r21, Z+1	; 0x01
     4da:	29 81       	ldd	r18, Y+1	; 0x01
     4dc:	3a 81       	ldd	r19, Y+2	; 0x02
     4de:	24 23       	and	r18, r20
     4e0:	35 23       	and	r19, r21
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	84 5f       	subi	r24, 0xF4	; 244
     4e8:	9e 4f       	sbci	r25, 0xFE	; 254
     4ea:	fc 01       	movw	r30, r24
     4ec:	31 83       	std	Z+1, r19	; 0x01
     4ee:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     4f0:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     4f4:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     4f8:	20 e0       	ldi	r18, 0x00	; 0
     4fa:	40 e0       	ldi	r20, 0x00	; 0
     4fc:	50 e0       	ldi	r21, 0x00	; 0
     4fe:	60 e0       	ldi	r22, 0x00	; 0
     500:	70 e0       	ldi	r23, 0x00	; 0
     502:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
     506:	1e c0       	rjmp	.+60     	; 0x544 <move_ball+0xf4>
	}
	else{
		col_value[current[0]] &= mask;
     508:	8b 81       	ldd	r24, Y+3	; 0x03
     50a:	9c 81       	ldd	r25, Y+4	; 0x04
     50c:	fc 01       	movw	r30, r24
     50e:	80 81       	ld	r24, Z
     510:	88 2f       	mov	r24, r24
     512:	90 e0       	ldi	r25, 0x00	; 0
     514:	2b 81       	ldd	r18, Y+3	; 0x03
     516:	3c 81       	ldd	r19, Y+4	; 0x04
     518:	f9 01       	movw	r30, r18
     51a:	20 81       	ld	r18, Z
     51c:	22 2f       	mov	r18, r18
     51e:	30 e0       	ldi	r19, 0x00	; 0
     520:	22 0f       	add	r18, r18
     522:	33 1f       	adc	r19, r19
     524:	24 5f       	subi	r18, 0xF4	; 244
     526:	3e 4f       	sbci	r19, 0xFE	; 254
     528:	f9 01       	movw	r30, r18
     52a:	40 81       	ld	r20, Z
     52c:	51 81       	ldd	r21, Z+1	; 0x01
     52e:	29 81       	ldd	r18, Y+1	; 0x01
     530:	3a 81       	ldd	r19, Y+2	; 0x02
     532:	24 23       	and	r18, r20
     534:	35 23       	and	r19, r21
     536:	88 0f       	add	r24, r24
     538:	99 1f       	adc	r25, r25
     53a:	84 5f       	subi	r24, 0xF4	; 244
     53c:	9e 4f       	sbci	r25, 0xFE	; 254
     53e:	fc 01       	movw	r30, r24
     540:	31 83       	std	Z+1, r19	; 0x01
     542:	20 83       	st	Z, r18
	}
	//col_value[current[0]] &= mask;
	
	current[0] = next[0];
     544:	8d 81       	ldd	r24, Y+5	; 0x05
     546:	9e 81       	ldd	r25, Y+6	; 0x06
     548:	fc 01       	movw	r30, r24
     54a:	20 81       	ld	r18, Z
     54c:	8b 81       	ldd	r24, Y+3	; 0x03
     54e:	9c 81       	ldd	r25, Y+4	; 0x04
     550:	fc 01       	movw	r30, r24
     552:	20 83       	st	Z, r18
	current[1] = next[1];
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	01 96       	adiw	r24, 0x01	; 1
     55a:	2d 81       	ldd	r18, Y+5	; 0x05
     55c:	3e 81       	ldd	r19, Y+6	; 0x06
     55e:	f9 01       	movw	r30, r18
     560:	21 81       	ldd	r18, Z+1	; 0x01
     562:	fc 01       	movw	r30, r24
     564:	20 83       	st	Z, r18
	
	mask = 1 << current[1];
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	01 96       	adiw	r24, 0x01	; 1
     56c:	fc 01       	movw	r30, r24
     56e:	80 81       	ld	r24, Z
     570:	28 2f       	mov	r18, r24
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	02 c0       	rjmp	.+4      	; 0x57e <move_ball+0x12e>
     57a:	88 0f       	add	r24, r24
     57c:	99 1f       	adc	r25, r25
     57e:	2a 95       	dec	r18
     580:	e2 f7       	brpl	.-8      	; 0x57a <move_ball+0x12a>
     582:	9a 83       	std	Y+2, r25	; 0x02
     584:	89 83       	std	Y+1, r24	; 0x01
	if (current[0] == 0){
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
     58a:	fc 01       	movw	r30, r24
     58c:	80 81       	ld	r24, Z
     58e:	88 23       	and	r24, r24
     590:	a9 f5       	brne	.+106    	; 0x5fc <move_ball+0x1ac>
		xSemaphoreTake(_col_0_mutex, (TickType_t) 10);
     592:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     596:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	4a e0       	ldi	r20, 0x0A	; 10
     59e:	50 e0       	ldi	r21, 0x00	; 0
     5a0:	60 e0       	ldi	r22, 0x00	; 0
     5a2:	70 e0       	ldi	r23, 0x00	; 0
     5a4:	0e 94 53 10 	call	0x20a6	; 0x20a6 <xQueueGenericReceive>
		col_value[current[0]] |= mask;
     5a8:	8b 81       	ldd	r24, Y+3	; 0x03
     5aa:	9c 81       	ldd	r25, Y+4	; 0x04
     5ac:	fc 01       	movw	r30, r24
     5ae:	80 81       	ld	r24, Z
     5b0:	88 2f       	mov	r24, r24
     5b2:	90 e0       	ldi	r25, 0x00	; 0
     5b4:	2b 81       	ldd	r18, Y+3	; 0x03
     5b6:	3c 81       	ldd	r19, Y+4	; 0x04
     5b8:	f9 01       	movw	r30, r18
     5ba:	20 81       	ld	r18, Z
     5bc:	22 2f       	mov	r18, r18
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	22 0f       	add	r18, r18
     5c2:	33 1f       	adc	r19, r19
     5c4:	24 5f       	subi	r18, 0xF4	; 244
     5c6:	3e 4f       	sbci	r19, 0xFE	; 254
     5c8:	f9 01       	movw	r30, r18
     5ca:	40 81       	ld	r20, Z
     5cc:	51 81       	ldd	r21, Z+1	; 0x01
     5ce:	29 81       	ldd	r18, Y+1	; 0x01
     5d0:	3a 81       	ldd	r19, Y+2	; 0x02
     5d2:	24 2b       	or	r18, r20
     5d4:	35 2b       	or	r19, r21
     5d6:	88 0f       	add	r24, r24
     5d8:	99 1f       	adc	r25, r25
     5da:	84 5f       	subi	r24, 0xF4	; 244
     5dc:	9e 4f       	sbci	r25, 0xFE	; 254
     5de:	fc 01       	movw	r30, r24
     5e0:	31 83       	std	Z+1, r19	; 0x01
     5e2:	20 83       	st	Z, r18
		xSemaphoreGive(_col_0_mutex);
     5e4:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <_col_0_mutex>
     5e8:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <_col_0_mutex+0x1>
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	40 e0       	ldi	r20, 0x00	; 0
     5f0:	50 e0       	ldi	r21, 0x00	; 0
     5f2:	60 e0       	ldi	r22, 0x00	; 0
     5f4:	70 e0       	ldi	r23, 0x00	; 0
     5f6:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
     5fa:	1e c0       	rjmp	.+60     	; 0x638 <move_ball+0x1e8>
	}
	else{
		col_value[current[0]] |= mask;
     5fc:	8b 81       	ldd	r24, Y+3	; 0x03
     5fe:	9c 81       	ldd	r25, Y+4	; 0x04
     600:	fc 01       	movw	r30, r24
     602:	80 81       	ld	r24, Z
     604:	88 2f       	mov	r24, r24
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	2b 81       	ldd	r18, Y+3	; 0x03
     60a:	3c 81       	ldd	r19, Y+4	; 0x04
     60c:	f9 01       	movw	r30, r18
     60e:	20 81       	ld	r18, Z
     610:	22 2f       	mov	r18, r18
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
     618:	24 5f       	subi	r18, 0xF4	; 244
     61a:	3e 4f       	sbci	r19, 0xFE	; 254
     61c:	f9 01       	movw	r30, r18
     61e:	40 81       	ld	r20, Z
     620:	51 81       	ldd	r21, Z+1	; 0x01
     622:	29 81       	ldd	r18, Y+1	; 0x01
     624:	3a 81       	ldd	r19, Y+2	; 0x02
     626:	24 2b       	or	r18, r20
     628:	35 2b       	or	r19, r21
     62a:	88 0f       	add	r24, r24
     62c:	99 1f       	adc	r25, r25
     62e:	84 5f       	subi	r24, 0xF4	; 244
     630:	9e 4f       	sbci	r25, 0xFE	; 254
     632:	fc 01       	movw	r30, r24
     634:	31 83       	std	Z+1, r19	; 0x01
     636:	20 83       	st	Z, r18
	}

	
}
     638:	26 96       	adiw	r28, 0x06	; 6
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	f8 94       	cli
     63e:	de bf       	out	0x3e, r29	; 62
     640:	0f be       	out	0x3f, r0	; 63
     642:	cd bf       	out	0x3d, r28	; 61
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <calc_next>:

void calc_next(uint8_t *current, uint8_t *next, uint8_t *direction){
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	00 d0       	rcall	.+0      	; 0x650 <calc_next+0x6>
     650:	00 d0       	rcall	.+0      	; 0x652 <calc_next+0x8>
     652:	00 d0       	rcall	.+0      	; 0x654 <calc_next+0xa>
     654:	cd b7       	in	r28, 0x3d	; 61
     656:	de b7       	in	r29, 0x3e	; 62
     658:	9a 83       	std	Y+2, r25	; 0x02
     65a:	89 83       	std	Y+1, r24	; 0x01
     65c:	7c 83       	std	Y+4, r23	; 0x04
     65e:	6b 83       	std	Y+3, r22	; 0x03
     660:	5e 83       	std	Y+6, r21	; 0x06
     662:	4d 83       	std	Y+5, r20	; 0x05
	
	switch (*direction)
     664:	8d 81       	ldd	r24, Y+5	; 0x05
     666:	9e 81       	ldd	r25, Y+6	; 0x06
     668:	fc 01       	movw	r30, r24
     66a:	80 81       	ld	r24, Z
     66c:	88 2f       	mov	r24, r24
     66e:	90 e0       	ldi	r25, 0x00	; 0
     670:	09 2e       	mov	r0, r25
     672:	00 0c       	add	r0, r0
     674:	aa 0b       	sbc	r26, r26
     676:	bb 0b       	sbc	r27, r27
     678:	40 e0       	ldi	r20, 0x00	; 0
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	27 e0       	ldi	r18, 0x07	; 7
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	84 1b       	sub	r24, r20
     682:	95 0b       	sbc	r25, r21
     684:	28 17       	cp	r18, r24
     686:	39 07       	cpc	r19, r25
     688:	08 f4       	brcc	.+2      	; 0x68c <calc_next+0x42>
     68a:	79 c0       	rjmp	.+242    	; 0x77e <calc_next+0x134>
     68c:	82 5c       	subi	r24, 0xC2	; 194
     68e:	9f 4f       	sbci	r25, 0xFF	; 255
     690:	fc 01       	movw	r30, r24
     692:	0c 94 73 1b 	jmp	0x36e6	; 0x36e6 <__tablejump2__>
	{
		case 0:
			--next[1];
     696:	8b 81       	ldd	r24, Y+3	; 0x03
     698:	9c 81       	ldd	r25, Y+4	; 0x04
     69a:	01 96       	adiw	r24, 0x01	; 1
     69c:	fc 01       	movw	r30, r24
     69e:	20 81       	ld	r18, Z
     6a0:	21 50       	subi	r18, 0x01	; 1
     6a2:	fc 01       	movw	r30, r24
     6a4:	20 83       	st	Z, r18
			break;
     6a6:	6b c0       	rjmp	.+214    	; 0x77e <calc_next+0x134>
		case 1:
		++next[0];
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	fc 01       	movw	r30, r24
     6ae:	80 81       	ld	r24, Z
     6b0:	21 e0       	ldi	r18, 0x01	; 1
     6b2:	28 0f       	add	r18, r24
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	fc 01       	movw	r30, r24
     6ba:	20 83       	st	Z, r18
		--next[1];
     6bc:	8b 81       	ldd	r24, Y+3	; 0x03
     6be:	9c 81       	ldd	r25, Y+4	; 0x04
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	fc 01       	movw	r30, r24
     6c4:	20 81       	ld	r18, Z
     6c6:	21 50       	subi	r18, 0x01	; 1
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
		break;
     6cc:	58 c0       	rjmp	.+176    	; 0x77e <calc_next+0x134>
		case 2:
		++next[0];
     6ce:	8b 81       	ldd	r24, Y+3	; 0x03
     6d0:	9c 81       	ldd	r25, Y+4	; 0x04
     6d2:	fc 01       	movw	r30, r24
     6d4:	80 81       	ld	r24, Z
     6d6:	21 e0       	ldi	r18, 0x01	; 1
     6d8:	28 0f       	add	r18, r24
     6da:	8b 81       	ldd	r24, Y+3	; 0x03
     6dc:	9c 81       	ldd	r25, Y+4	; 0x04
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
		break;
     6e2:	4d c0       	rjmp	.+154    	; 0x77e <calc_next+0x134>
		case 3:
		++next[0];
     6e4:	8b 81       	ldd	r24, Y+3	; 0x03
     6e6:	9c 81       	ldd	r25, Y+4	; 0x04
     6e8:	fc 01       	movw	r30, r24
     6ea:	80 81       	ld	r24, Z
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	28 0f       	add	r18, r24
     6f0:	8b 81       	ldd	r24, Y+3	; 0x03
     6f2:	9c 81       	ldd	r25, Y+4	; 0x04
     6f4:	fc 01       	movw	r30, r24
     6f6:	20 83       	st	Z, r18
		++next[1];
     6f8:	8b 81       	ldd	r24, Y+3	; 0x03
     6fa:	9c 81       	ldd	r25, Y+4	; 0x04
     6fc:	01 96       	adiw	r24, 0x01	; 1
     6fe:	fc 01       	movw	r30, r24
     700:	20 81       	ld	r18, Z
     702:	2f 5f       	subi	r18, 0xFF	; 255
     704:	fc 01       	movw	r30, r24
     706:	20 83       	st	Z, r18
		break;
     708:	3a c0       	rjmp	.+116    	; 0x77e <calc_next+0x134>
		case 4:
		++next[1];
     70a:	8b 81       	ldd	r24, Y+3	; 0x03
     70c:	9c 81       	ldd	r25, Y+4	; 0x04
     70e:	01 96       	adiw	r24, 0x01	; 1
     710:	fc 01       	movw	r30, r24
     712:	20 81       	ld	r18, Z
     714:	2f 5f       	subi	r18, 0xFF	; 255
     716:	fc 01       	movw	r30, r24
     718:	20 83       	st	Z, r18
		break;
     71a:	31 c0       	rjmp	.+98     	; 0x77e <calc_next+0x134>
		case 5:
		--next[0];
     71c:	8b 81       	ldd	r24, Y+3	; 0x03
     71e:	9c 81       	ldd	r25, Y+4	; 0x04
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	2f ef       	ldi	r18, 0xFF	; 255
     726:	28 0f       	add	r18, r24
     728:	8b 81       	ldd	r24, Y+3	; 0x03
     72a:	9c 81       	ldd	r25, Y+4	; 0x04
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
		++next[1];
     730:	8b 81       	ldd	r24, Y+3	; 0x03
     732:	9c 81       	ldd	r25, Y+4	; 0x04
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	fc 01       	movw	r30, r24
     738:	20 81       	ld	r18, Z
     73a:	2f 5f       	subi	r18, 0xFF	; 255
     73c:	fc 01       	movw	r30, r24
     73e:	20 83       	st	Z, r18
		break;
     740:	1e c0       	rjmp	.+60     	; 0x77e <calc_next+0x134>
		case 6:
		--next[0];
     742:	8b 81       	ldd	r24, Y+3	; 0x03
     744:	9c 81       	ldd	r25, Y+4	; 0x04
     746:	fc 01       	movw	r30, r24
     748:	80 81       	ld	r24, Z
     74a:	2f ef       	ldi	r18, 0xFF	; 255
     74c:	28 0f       	add	r18, r24
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	9c 81       	ldd	r25, Y+4	; 0x04
     752:	fc 01       	movw	r30, r24
     754:	20 83       	st	Z, r18
		break;
     756:	13 c0       	rjmp	.+38     	; 0x77e <calc_next+0x134>
		case 7:
		--next[0];
     758:	8b 81       	ldd	r24, Y+3	; 0x03
     75a:	9c 81       	ldd	r25, Y+4	; 0x04
     75c:	fc 01       	movw	r30, r24
     75e:	80 81       	ld	r24, Z
     760:	2f ef       	ldi	r18, 0xFF	; 255
     762:	28 0f       	add	r18, r24
     764:	8b 81       	ldd	r24, Y+3	; 0x03
     766:	9c 81       	ldd	r25, Y+4	; 0x04
     768:	fc 01       	movw	r30, r24
     76a:	20 83       	st	Z, r18
		--next[1];
     76c:	8b 81       	ldd	r24, Y+3	; 0x03
     76e:	9c 81       	ldd	r25, Y+4	; 0x04
     770:	01 96       	adiw	r24, 0x01	; 1
     772:	fc 01       	movw	r30, r24
     774:	20 81       	ld	r18, Z
     776:	21 50       	subi	r18, 0x01	; 1
     778:	fc 01       	movw	r30, r24
     77a:	20 83       	st	Z, r18
		break;
     77c:	00 00       	nop
	}
	
}
     77e:	26 96       	adiw	r28, 0x06	; 6
     780:	0f b6       	in	r0, 0x3f	; 63
     782:	f8 94       	cli
     784:	de bf       	out	0x3e, r29	; 62
     786:	0f be       	out	0x3f, r0	; 63
     788:	cd bf       	out	0x3d, r28	; 61
     78a:	df 91       	pop	r29
     78c:	cf 91       	pop	r28
     78e:	08 95       	ret

00000790 <ball_task>:

void ball_task(void *pvParameters)
{
     790:	cf 93       	push	r28
     792:	df 93       	push	r29
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
     798:	2a 97       	sbiw	r28, 0x0a	; 10
     79a:	0f b6       	in	r0, 0x3f	; 63
     79c:	f8 94       	cli
     79e:	de bf       	out	0x3e, r29	; 62
     7a0:	0f be       	out	0x3f, r0	; 63
     7a2:	cd bf       	out	0x3d, r28	; 61
     7a4:	9a 87       	std	Y+10, r25	; 0x0a
     7a6:	89 87       	std	Y+9, r24	; 0x09
	(void) pvParameters;
	TickType_t lastWakeTime;
	uint8_t pos[2] = {7, 5};
     7a8:	87 e0       	ldi	r24, 0x07	; 7
     7aa:	8c 83       	std	Y+4, r24	; 0x04
     7ac:	85 e0       	ldi	r24, 0x05	; 5
     7ae:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t direction = 0;
     7b0:	1e 82       	std	Y+6, r1	; 0x06
	lastWakeTime = xTaskGetTickCount();
     7b2:	0e 94 30 16 	call	0x2c60	; 0x2c60 <xTaskGetTickCount>
     7b6:	9b 83       	std	Y+3, r25	; 0x03
     7b8:	8a 83       	std	Y+2, r24	; 0x02
	while(1)
	{

		uint8_t next[2] = {pos[0],pos[1]};
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	8f 83       	std	Y+7, r24	; 0x07
     7be:	8d 81       	ldd	r24, Y+5	; 0x05
     7c0:	88 87       	std	Y+8, r24	; 0x08
		uint8_t is_bounced = 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	89 83       	std	Y+1, r24	; 0x01

		while (is_bounced != 0)
     7c6:	45 c0       	rjmp	.+138    	; 0x852 <ball_task+0xc2>
		{	
			is_bounced = 0;
     7c8:	19 82       	std	Y+1, r1	; 0x01
			calc_next( &pos, &next, &direction);
     7ca:	ae 01       	movw	r20, r28
     7cc:	4a 5f       	subi	r20, 0xFA	; 250
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	9e 01       	movw	r18, r28
     7d2:	29 5f       	subi	r18, 0xF9	; 249
     7d4:	3f 4f       	sbci	r19, 0xFF	; 255
     7d6:	ce 01       	movw	r24, r28
     7d8:	04 96       	adiw	r24, 0x04	; 4
     7da:	b9 01       	movw	r22, r18
     7dc:	0e 94 25 03 	call	0x64a	; 0x64a <calc_next>
			
			if (next[0] > 12){
     7e0:	8f 81       	ldd	r24, Y+7	; 0x07
     7e2:	8d 30       	cpi	r24, 0x0D	; 13
     7e4:	30 f0       	brcs	.+12     	; 0x7f2 <ball_task+0x62>
				bounce(&direction, 1);
     7e6:	ce 01       	movw	r24, r28
     7e8:	06 96       	adiw	r24, 0x06	; 6
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	0e 94 95 01 	call	0x32a	; 0x32a <bounce>
     7f0:	30 c0       	rjmp	.+96     	; 0x852 <ball_task+0xc2>
			}
			else if ( next[1] > 9){
     7f2:	88 85       	ldd	r24, Y+8	; 0x08
     7f4:	8a 30       	cpi	r24, 0x0A	; 10
     7f6:	30 f0       	brcs	.+12     	; 0x804 <ball_task+0x74>
				bounce(&direction, 0);
     7f8:	ce 01       	movw	r24, r28
     7fa:	06 96       	adiw	r24, 0x06	; 6
     7fc:	60 e0       	ldi	r22, 0x00	; 0
     7fe:	0e 94 95 01 	call	0x32a	; 0x32a <bounce>
     802:	27 c0       	rjmp	.+78     	; 0x852 <ball_task+0xc2>
			}
			else if (next[0] == 0 && (next[1] == player_position || next[1] == (player_position+1))){
     804:	8f 81       	ldd	r24, Y+7	; 0x07
     806:	88 23       	and	r24, r24
     808:	d9 f4       	brne	.+54     	; 0x840 <ball_task+0xb0>
     80a:	88 85       	ldd	r24, Y+8	; 0x08
     80c:	28 2f       	mov	r18, r24
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     814:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     818:	28 17       	cp	r18, r24
     81a:	39 07       	cpc	r19, r25
     81c:	59 f0       	breq	.+22     	; 0x834 <ball_task+0xa4>
     81e:	88 85       	ldd	r24, Y+8	; 0x08
     820:	28 2f       	mov	r18, r24
     822:	30 e0       	ldi	r19, 0x00	; 0
     824:	80 91 0a 01 	lds	r24, 0x010A	; 0x80010a <player_position>
     828:	90 91 0b 01 	lds	r25, 0x010B	; 0x80010b <player_position+0x1>
     82c:	01 96       	adiw	r24, 0x01	; 1
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	31 f4       	brne	.+12     	; 0x840 <ball_task+0xb0>
				bounce(&direction, 1);
     834:	ce 01       	movw	r24, r28
     836:	06 96       	adiw	r24, 0x06	; 6
     838:	61 e0       	ldi	r22, 0x01	; 1
     83a:	0e 94 95 01 	call	0x32a	; 0x32a <bounce>
     83e:	09 c0       	rjmp	.+18     	; 0x852 <ball_task+0xc2>
			}
			else{
				move_ball(pos, next);
     840:	9e 01       	movw	r18, r28
     842:	29 5f       	subi	r18, 0xF9	; 249
     844:	3f 4f       	sbci	r19, 0xFF	; 255
     846:	ce 01       	movw	r24, r28
     848:	04 96       	adiw	r24, 0x04	; 4
     84a:	b9 01       	movw	r22, r18
     84c:	0e 94 28 02 	call	0x450	; 0x450 <move_ball>
				is_bounced = 0;
     850:	19 82       	std	Y+1, r1	; 0x01
	{

		uint8_t next[2] = {pos[0],pos[1]};
		uint8_t is_bounced = 1;

		while (is_bounced != 0)
     852:	89 81       	ldd	r24, Y+1	; 0x01
     854:	88 23       	and	r24, r24
     856:	09 f0       	breq	.+2      	; 0x85a <ball_task+0xca>
     858:	b7 cf       	rjmp	.-146    	; 0x7c8 <ball_task+0x38>
				move_ball(pos, next);
				is_bounced = 0;
			}
		}
		
		vTaskDelayUntil(&lastWakeTime, (TickType_t) 80);
     85a:	ce 01       	movw	r24, r28
     85c:	02 96       	adiw	r24, 0x02	; 2
     85e:	60 e5       	ldi	r22, 0x50	; 80
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <vTaskDelayUntil>
	}
     866:	a9 cf       	rjmp	.-174    	; 0x7ba <ball_task+0x2a>

00000868 <handle_display>:
}


//-----------------------------------------
void handle_display(void)
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	cd b7       	in	r28, 0x3d	; 61
     86e:	de b7       	in	r29, 0x3e	; 62
	if (col_index == 0){
     870:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     874:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     878:	89 2b       	or	r24, r25
     87a:	49 f4       	brne	.+18     	; 0x88e <handle_display+0x26>
		PORTD |= _BV(PORTD2);
     87c:	8b e2       	ldi	r24, 0x2B	; 43
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	2b e2       	ldi	r18, 0x2B	; 43
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	f9 01       	movw	r30, r18
     886:	20 81       	ld	r18, Z
     888:	24 60       	ori	r18, 0x04	; 4
     88a:	fc 01       	movw	r30, r24
     88c:	20 83       	st	Z, r18
	}

	// one SCK pulse
	PORTD |= _BV(PORTD5);
     88e:	8b e2       	ldi	r24, 0x2B	; 43
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	2b e2       	ldi	r18, 0x2B	; 43
     894:	30 e0       	ldi	r19, 0x00	; 0
     896:	f9 01       	movw	r30, r18
     898:	20 81       	ld	r18, Z
     89a:	20 62       	ori	r18, 0x20	; 32
     89c:	fc 01       	movw	r30, r24
     89e:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD5);
     8a0:	8b e2       	ldi	r24, 0x2B	; 43
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	2b e2       	ldi	r18, 0x2B	; 43
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	f9 01       	movw	r30, r18
     8aa:	20 81       	ld	r18, Z
     8ac:	2f 7d       	andi	r18, 0xDF	; 223
     8ae:	fc 01       	movw	r30, r24
     8b0:	20 83       	st	Z, r18

	// one RCK pulse
	PORTD |= _BV(PORTD4);
     8b2:	8b e2       	ldi	r24, 0x2B	; 43
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	2b e2       	ldi	r18, 0x2B	; 43
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	f9 01       	movw	r30, r18
     8bc:	20 81       	ld	r18, Z
     8be:	20 61       	ori	r18, 0x10	; 16
     8c0:	fc 01       	movw	r30, r24
     8c2:	20 83       	st	Z, r18
	PORTD &= ~_BV(PORTD4);
     8c4:	8b e2       	ldi	r24, 0x2B	; 43
     8c6:	90 e0       	ldi	r25, 0x00	; 0
     8c8:	2b e2       	ldi	r18, 0x2B	; 43
     8ca:	30 e0       	ldi	r19, 0x00	; 0
     8cc:	f9 01       	movw	r30, r18
     8ce:	20 81       	ld	r18, Z
     8d0:	2f 7e       	andi	r18, 0xEF	; 239
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18

	PORTA = ~(col_value[col_index] & 0xFF);
     8d6:	82 e2       	ldi	r24, 0x22	; 34
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <col_index>
     8de:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <col_index+0x1>
     8e2:	22 0f       	add	r18, r18
     8e4:	33 1f       	adc	r19, r19
     8e6:	24 5f       	subi	r18, 0xF4	; 244
     8e8:	3e 4f       	sbci	r19, 0xFE	; 254
     8ea:	f9 01       	movw	r30, r18
     8ec:	20 81       	ld	r18, Z
     8ee:	31 81       	ldd	r19, Z+1	; 0x01
     8f0:	20 95       	com	r18
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
	
	// Manipulate only with PB0 and PB1
	PORTB |= 0x03;
     8f6:	85 e2       	ldi	r24, 0x25	; 37
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	25 e2       	ldi	r18, 0x25	; 37
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	23 60       	ori	r18, 0x03	; 3
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
	PORTB &= ~((col_value[col_index] >> 8) & 0x03);
     908:	85 e2       	ldi	r24, 0x25	; 37
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	25 e2       	ldi	r18, 0x25	; 37
     90e:	30 e0       	ldi	r19, 0x00	; 0
     910:	f9 01       	movw	r30, r18
     912:	40 81       	ld	r20, Z
     914:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <col_index>
     918:	30 91 5d 01 	lds	r19, 0x015D	; 0x80015d <col_index+0x1>
     91c:	22 0f       	add	r18, r18
     91e:	33 1f       	adc	r19, r19
     920:	24 5f       	subi	r18, 0xF4	; 244
     922:	3e 4f       	sbci	r19, 0xFE	; 254
     924:	f9 01       	movw	r30, r18
     926:	20 81       	ld	r18, Z
     928:	31 81       	ldd	r19, Z+1	; 0x01
     92a:	23 2f       	mov	r18, r19
     92c:	33 27       	eor	r19, r19
     92e:	23 70       	andi	r18, 0x03	; 3
     930:	20 95       	com	r18
     932:	24 23       	and	r18, r20
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18

	// Set SER to 0
	PORTD &= ~_BV(PORTD2);
     938:	8b e2       	ldi	r24, 0x2B	; 43
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	2b e2       	ldi	r18, 0x2B	; 43
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	2b 7f       	andi	r18, 0xFB	; 251
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18

	++col_index;
     94a:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     94e:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     952:	01 96       	adiw	r24, 0x01	; 1
     954:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <col_index+0x1>
     958:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <col_index>
	if (col_index > 13){
     95c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <col_index>
     960:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <col_index+0x1>
     964:	0e 97       	sbiw	r24, 0x0e	; 14
     966:	24 f0       	brlt	.+8      	; 0x970 <__stack+0x71>
		col_index = 0;
     968:	10 92 5d 01 	sts	0x015D, r1	; 0x80015d <col_index+0x1>
     96c:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <col_index>
	}

}
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <vApplicationIdleHook>:

//-----------------------------------------
void vApplicationIdleHook( void )
{
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
	//
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	08 95       	ret

00000984 <main>:

//-----------------------------------------
int main(void)
{
     984:	ef 92       	push	r14
     986:	ff 92       	push	r15
     988:	0f 93       	push	r16
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	
	init_board();
     992:	0e 94 c2 05 	call	0xb84	; 0xb84 <init_board>
	
	// Shift register Enable output (G=0)
	PORTD &= ~_BV(PORTD6);
     996:	8b e2       	ldi	r24, 0x2B	; 43
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	2b e2       	ldi	r18, 0x2B	; 43
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	f9 01       	movw	r30, r18
     9a0:	20 81       	ld	r18, Z
     9a2:	2f 7b       	andi	r18, 0xBF	; 191
     9a4:	fc 01       	movw	r30, r24
     9a6:	20 83       	st	Z, r18

	_x_com_received_chars_queue = xQueueCreate( _COM_RX_QUEUE_LENGTH, ( unsigned portBASE_TYPE ) sizeof( uint8_t ) );
     9a8:	8e e1       	ldi	r24, 0x1E	; 30
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	61 e0       	ldi	r22, 0x01	; 1
     9ae:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <xQueueGenericCreate>
     9b2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <__data_end+0x1>
     9b6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <__data_end>
	_col_0_mutex = xSemaphoreCreateMutex();
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <xQueueCreateMutex>
     9c0:	90 93 59 01 	sts	0x0159, r25	; 0x800159 <_col_0_mutex+0x1>
     9c4:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <_col_0_mutex>
	_player_position_mutex = xSemaphoreCreateMutex();
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <xQueueCreateMutex>
     9ce:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <_player_position_mutex+0x1>
     9d2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <_player_position_mutex>
	init_com(_x_com_received_chars_queue);
     9d6:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <__data_end>
     9da:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <__data_end+0x1>
     9de:	0e 94 48 05 	call	0xa90	; 0xa90 <init_com>

	
	
	//Create task to blink gpio
	//xTaskCreate(startup_task, (const char *)"Startup", configMINIMAL_STACK_SIZE, (void *)NULL, tskIDLE_PRIORITY, NULL);
	xTaskCreate(serial_task,(const char *)"serial", configMINIMAL_STACK_SIZE, (void *)NULL, task1_prio, NULL);
     9e2:	e1 2c       	mov	r14, r1
     9e4:	f1 2c       	mov	r15, r1
     9e6:	04 e0       	ldi	r16, 0x04	; 4
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	45 e5       	ldi	r20, 0x55	; 85
     9ee:	50 e0       	ldi	r21, 0x00	; 0
     9f0:	6c e3       	ldi	r22, 0x3C	; 60
     9f2:	71 e0       	ldi	r23, 0x01	; 1
     9f4:	85 e6       	ldi	r24, 0x65	; 101
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 06 13 	call	0x260c	; 0x260c <xTaskCreate>
	xTaskCreate(local_player_task,(const char *)"lplayer", configMINIMAL_STACK_SIZE, (void *)NULL, task3_prio, NULL);
     9fc:	e1 2c       	mov	r14, r1
     9fe:	f1 2c       	mov	r15, r1
     a00:	02 e0       	ldi	r16, 0x02	; 2
     a02:	20 e0       	ldi	r18, 0x00	; 0
     a04:	30 e0       	ldi	r19, 0x00	; 0
     a06:	45 e5       	ldi	r20, 0x55	; 85
     a08:	50 e0       	ldi	r21, 0x00	; 0
     a0a:	63 e4       	ldi	r22, 0x43	; 67
     a0c:	71 e0       	ldi	r23, 0x01	; 1
     a0e:	88 e1       	ldi	r24, 0x18	; 24
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	0e 94 06 13 	call	0x260c	; 0x260c <xTaskCreate>
	xTaskCreate(ball_task,(const char *)"ball", configMINIMAL_STACK_SIZE, (void *)NULL, task2_prio, NULL);
     a16:	e1 2c       	mov	r14, r1
     a18:	f1 2c       	mov	r15, r1
     a1a:	03 e0       	ldi	r16, 0x03	; 3
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	45 e5       	ldi	r20, 0x55	; 85
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	6b e4       	ldi	r22, 0x4B	; 75
     a26:	71 e0       	ldi	r23, 0x01	; 1
     a28:	88 ec       	ldi	r24, 0xC8	; 200
     a2a:	93 e0       	ldi	r25, 0x03	; 3
     a2c:	0e 94 06 13 	call	0x260c	; 0x260c <xTaskCreate>
	
	// Start the display handler timer
	init_display_timer(handle_display);
     a30:	84 e3       	ldi	r24, 0x34	; 52
     a32:	94 e0       	ldi	r25, 0x04	; 4
     a34:	0e 94 5a 05 	call	0xab4	; 0xab4 <init_display_timer>
	
	//Start the scheduler
	vTaskStartScheduler();
     a38:	0e 94 59 15 	call	0x2ab2	; 0x2ab2 <vTaskStartScheduler>
	
	//Should never reach here
	while (1)
	{
	}
     a3c:	ff cf       	rjmp	.-2      	; 0xa3c <main+0xb8>

00000a3e <_com_call_back>:
}

// ----------------------------------------------------------------------------------------------------------------------
void com_send_bytes(uint8_t *bytes, uint8_t len) {
	serial_send_bytes(_com_serial_instance, bytes, len);
}
     a3e:	cf 93       	push	r28
     a40:	df 93       	push	r29
     a42:	00 d0       	rcall	.+0      	; 0xa44 <_com_call_back+0x6>
     a44:	00 d0       	rcall	.+0      	; 0xa46 <_com_call_back+0x8>
     a46:	cd b7       	in	r28, 0x3d	; 61
     a48:	de b7       	in	r29, 0x3e	; 62
     a4a:	9b 83       	std	Y+3, r25	; 0x03
     a4c:	8a 83       	std	Y+2, r24	; 0x02
     a4e:	6c 83       	std	Y+4, r22	; 0x04
     a50:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_x_rx_com_queue>
     a54:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_x_rx_com_queue+0x1>
     a58:	89 2b       	or	r24, r25
     a5a:	99 f0       	breq	.+38     	; 0xa82 <_com_call_back+0x44>
     a5c:	19 82       	std	Y+1, r1	; 0x01
     a5e:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <_x_rx_com_queue>
     a62:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <_x_rx_com_queue+0x1>
     a66:	be 01       	movw	r22, r28
     a68:	6c 5f       	subi	r22, 0xFC	; 252
     a6a:	7f 4f       	sbci	r23, 0xFF	; 255
     a6c:	20 e0       	ldi	r18, 0x00	; 0
     a6e:	ae 01       	movw	r20, r28
     a70:	4f 5f       	subi	r20, 0xFF	; 255
     a72:	5f 4f       	sbci	r21, 0xFF	; 255
     a74:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <xQueueGenericSendFromISR>
     a78:	89 81       	ldd	r24, Y+1	; 0x01
     a7a:	88 23       	and	r24, r24
     a7c:	11 f0       	breq	.+4      	; 0xa82 <_com_call_back+0x44>
     a7e:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	0f 90       	pop	r0
     a8a:	df 91       	pop	r29
     a8c:	cf 91       	pop	r28
     a8e:	08 95       	ret

00000a90 <init_com>:
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
     a94:	00 d0       	rcall	.+0      	; 0xa96 <init_com+0x6>
     a96:	cd b7       	in	r28, 0x3d	; 61
     a98:	de b7       	in	r29, 0x3e	; 62
     a9a:	9a 83       	std	Y+2, r25	; 0x02
     a9c:	89 83       	std	Y+1, r24	; 0x01
     a9e:	89 81       	ldd	r24, Y+1	; 0x01
     aa0:	9a 81       	ldd	r25, Y+2	; 0x02
     aa2:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <_x_rx_com_queue+0x1>
     aa6:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <_x_rx_com_queue>
     aaa:	0f 90       	pop	r0
     aac:	0f 90       	pop	r0
     aae:	df 91       	pop	r29
     ab0:	cf 91       	pop	r28
     ab2:	08 95       	ret

00000ab4 <init_display_timer>:
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	00 d0       	rcall	.+0      	; 0xaba <init_display_timer+0x6>
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
     abe:	9a 83       	std	Y+2, r25	; 0x02
     ac0:	89 83       	std	Y+1, r24	; 0x01
     ac2:	89 81       	ldd	r24, Y+1	; 0x01
     ac4:	9a 81       	ldd	r25, Y+2	; 0x02
     ac6:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <cb_ptr+0x1>
     aca:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <cb_ptr>
     ace:	87 e4       	ldi	r24, 0x47	; 71
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	2a e0       	ldi	r18, 0x0A	; 10
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	84 e4       	ldi	r24, 0x44	; 68
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	24 e4       	ldi	r18, 0x44	; 68
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	22 60       	ori	r18, 0x02	; 2
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
     aea:	8e e6       	ldi	r24, 0x6E	; 110
     aec:	90 e0       	ldi	r25, 0x00	; 0
     aee:	2e e6       	ldi	r18, 0x6E	; 110
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	f9 01       	movw	r30, r18
     af4:	20 81       	ld	r18, Z
     af6:	22 60       	ori	r18, 0x02	; 2
     af8:	fc 01       	movw	r30, r24
     afa:	20 83       	st	Z, r18
     afc:	85 e4       	ldi	r24, 0x45	; 69
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	25 e4       	ldi	r18, 0x45	; 69
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	f9 01       	movw	r30, r18
     b06:	20 81       	ld	r18, Z
     b08:	25 60       	ori	r18, 0x05	; 5
     b0a:	fc 01       	movw	r30, r24
     b0c:	20 83       	st	Z, r18
     b0e:	0f 90       	pop	r0
     b10:	0f 90       	pop	r0
     b12:	df 91       	pop	r29
     b14:	cf 91       	pop	r28
     b16:	08 95       	ret

00000b18 <__vector_16>:
     b18:	1f 92       	push	r1
     b1a:	0f 92       	push	r0
     b1c:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b20:	0f 92       	push	r0
     b22:	11 24       	eor	r1, r1
     b24:	2f 93       	push	r18
     b26:	3f 93       	push	r19
     b28:	4f 93       	push	r20
     b2a:	5f 93       	push	r21
     b2c:	6f 93       	push	r22
     b2e:	7f 93       	push	r23
     b30:	8f 93       	push	r24
     b32:	9f 93       	push	r25
     b34:	af 93       	push	r26
     b36:	bf 93       	push	r27
     b38:	ef 93       	push	r30
     b3a:	ff 93       	push	r31
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	cd b7       	in	r28, 0x3d	; 61
     b42:	de b7       	in	r29, 0x3e	; 62
     b44:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cb_ptr>
     b48:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cb_ptr+0x1>
     b4c:	89 2b       	or	r24, r25
     b4e:	31 f0       	breq	.+12     	; 0xb5c <__vector_16+0x44>
     b50:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <cb_ptr>
     b54:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <cb_ptr+0x1>
     b58:	fc 01       	movw	r30, r24
     b5a:	09 95       	icall
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	ff 91       	pop	r31
     b62:	ef 91       	pop	r30
     b64:	bf 91       	pop	r27
     b66:	af 91       	pop	r26
     b68:	9f 91       	pop	r25
     b6a:	8f 91       	pop	r24
     b6c:	7f 91       	pop	r23
     b6e:	6f 91       	pop	r22
     b70:	5f 91       	pop	r21
     b72:	4f 91       	pop	r20
     b74:	3f 91       	pop	r19
     b76:	2f 91       	pop	r18
     b78:	0f 90       	pop	r0
     b7a:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     b7e:	0f 90       	pop	r0
     b80:	1f 90       	pop	r1
     b82:	18 95       	reti

00000b84 <init_board>:

// ----------------------------------------------------------------------------------------------------------------------
void init_board(void) {
     b84:	8f 92       	push	r8
     b86:	9f 92       	push	r9
     b88:	af 92       	push	r10
     b8a:	bf 92       	push	r11
     b8c:	cf 92       	push	r12
     b8e:	df 92       	push	r13
     b90:	ef 92       	push	r14
     b92:	0f 93       	push	r16
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	cd b7       	in	r28, 0x3d	; 61
     b9a:	de b7       	in	r29, 0x3e	; 62
	static buffer_struct_t _com_rx_buffer;
	static buffer_struct_t _com_tx_buffer;
	buffer_init(&_com_rx_buffer);
     b9c:	84 e6       	ldi	r24, 0x64	; 100
     b9e:	91 e0       	ldi	r25, 0x01	; 1
     ba0:	0e 94 54 06 	call	0xca8	; 0xca8 <buffer_init>
	buffer_init(&_com_tx_buffer);
     ba4:	87 e7       	ldi	r24, 0x77	; 119
     ba6:	91 e0       	ldi	r25, 0x01	; 1
     ba8:	0e 94 54 06 	call	0xca8	; 0xca8 <buffer_init>
	_com_serial_instance = serial_new_instance(ser_USART0, 115200UL, ser_BITS_8, ser_STOP_1, ser_NO_PARITY, &_com_rx_buffer, &_com_tx_buffer, _com_call_back);
     bac:	0f 2e       	mov	r0, r31
     bae:	ff e1       	ldi	r31, 0x1F	; 31
     bb0:	8f 2e       	mov	r8, r31
     bb2:	f5 e0       	ldi	r31, 0x05	; 5
     bb4:	9f 2e       	mov	r9, r31
     bb6:	f0 2d       	mov	r31, r0
     bb8:	0f 2e       	mov	r0, r31
     bba:	f7 e7       	ldi	r31, 0x77	; 119
     bbc:	af 2e       	mov	r10, r31
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	bf 2e       	mov	r11, r31
     bc2:	f0 2d       	mov	r31, r0
     bc4:	0f 2e       	mov	r0, r31
     bc6:	f4 e6       	ldi	r31, 0x64	; 100
     bc8:	cf 2e       	mov	r12, r31
     bca:	f1 e0       	ldi	r31, 0x01	; 1
     bcc:	df 2e       	mov	r13, r31
     bce:	f0 2d       	mov	r31, r0
     bd0:	e1 2c       	mov	r14, r1
     bd2:	00 e0       	ldi	r16, 0x00	; 0
     bd4:	23 e0       	ldi	r18, 0x03	; 3
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	52 ec       	ldi	r21, 0xC2	; 194
     bda:	61 e0       	ldi	r22, 0x01	; 1
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	0e 94 b2 0b 	call	0x1764	; 0x1764 <serial_new_instance>
     be4:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <_com_serial_instance+0x1>
     be8:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <_com_serial_instance>
	
	// Pull up on Joystick inputs
	PORTC |= _BV(PORTC0) | _BV(PORTC1) | _BV(PORTC6) | _BV(PORTC7);
     bec:	88 e2       	ldi	r24, 0x28	; 40
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	28 e2       	ldi	r18, 0x28	; 40
     bf2:	30 e0       	ldi	r19, 0x00	; 0
     bf4:	f9 01       	movw	r30, r18
     bf6:	20 81       	ld	r18, Z
     bf8:	23 6c       	ori	r18, 0xC3	; 195
     bfa:	fc 01       	movw	r30, r24
     bfc:	20 83       	st	Z, r18
	PORTD |= _BV(PORTD3);
     bfe:	8b e2       	ldi	r24, 0x2B	; 43
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	2b e2       	ldi	r18, 0x2B	; 43
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	f9 01       	movw	r30, r18
     c08:	20 81       	ld	r18, Z
     c0a:	28 60       	ori	r18, 0x08	; 8
     c0c:	fc 01       	movw	r30, r24
     c0e:	20 83       	st	Z, r18
	
	// Shift register control pins to output
	// SER, RCK, SCK, G (enable output)
	DDRD |= _BV(DDD2) | _BV(DDD4) | _BV(DDD5) | _BV(DDD6);
     c10:	8a e2       	ldi	r24, 0x2A	; 42
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	2a e2       	ldi	r18, 0x2A	; 42
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	f9 01       	movw	r30, r18
     c1a:	20 81       	ld	r18, Z
     c1c:	24 67       	ori	r18, 0x74	; 116
     c1e:	fc 01       	movw	r30, r24
     c20:	20 83       	st	Z, r18
	// G (enable output) high
	PORTD |= _BV(PORTD6);
     c22:	8b e2       	ldi	r24, 0x2B	; 43
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	2b e2       	ldi	r18, 0x2B	; 43
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	f9 01       	movw	r30, r18
     c2c:	20 81       	ld	r18, Z
     c2e:	20 64       	ori	r18, 0x40	; 64
     c30:	fc 01       	movw	r30, r24
     c32:	20 83       	st	Z, r18
	
	// Column pins to output
	DDRA |= 0xFF;
     c34:	81 e2       	ldi	r24, 0x21	; 33
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	fc 01       	movw	r30, r24
     c3a:	80 81       	ld	r24, Z
     c3c:	81 e2       	ldi	r24, 0x21	; 33
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	2f ef       	ldi	r18, 0xFF	; 255
     c42:	fc 01       	movw	r30, r24
     c44:	20 83       	st	Z, r18
	DDRB |= _BV(DDB0) | _BV(DDB1);
     c46:	84 e2       	ldi	r24, 0x24	; 36
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	24 e2       	ldi	r18, 0x24	; 36
     c4c:	30 e0       	ldi	r19, 0x00	; 0
     c4e:	f9 01       	movw	r30, r18
     c50:	20 81       	ld	r18, Z
     c52:	23 60       	ori	r18, 0x03	; 3
     c54:	fc 01       	movw	r30, r24
     c56:	20 83       	st	Z, r18
	
	// Trace pins Task Monitor (R2R)
	DDRB |= _BV(DDB2) | _BV(DDB3) | _BV(DDB4) | _BV(DDB5);
     c58:	84 e2       	ldi	r24, 0x24	; 36
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	24 e2       	ldi	r18, 0x24	; 36
     c5e:	30 e0       	ldi	r19, 0x00	; 0
     c60:	f9 01       	movw	r30, r18
     c62:	20 81       	ld	r18, Z
     c64:	2c 63       	ori	r18, 0x3C	; 60
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
}
     c6a:	df 91       	pop	r29
     c6c:	cf 91       	pop	r28
     c6e:	0f 91       	pop	r16
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	bf 90       	pop	r11
     c78:	af 90       	pop	r10
     c7a:	9f 90       	pop	r9
     c7c:	8f 90       	pop	r8
     c7e:	08 95       	ret

00000c80 <switch_in>:
	 @brief Set PORTB bit 2-5, to the task switched into running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_IN() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_in(uint8_t task_no) {
     c80:	cf 93       	push	r28
     c82:	df 93       	push	r29
     c84:	1f 92       	push	r1
     c86:	cd b7       	in	r28, 0x3d	; 61
     c88:	de b7       	in	r29, 0x3e	; 62
     c8a:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
		// PORTB |= task_no << 2;
	}
     c8c:	0f 90       	pop	r0
     c8e:	df 91       	pop	r29
     c90:	cf 91       	pop	r28
     c92:	08 95       	ret

00000c94 <switch_out>:
	 @brief Set PORTB bit 2-5, to zero when a task is switched out of running by the operating system.
	
	 Called by the the traceTASK_SWITCHED_OUT() macro in FreeRTOS.
	 Are enabled in FreeRTOSConfig.h
	 **********************************************************************/
	void switch_out(uint8_t task_no) {
     c94:	cf 93       	push	r28
     c96:	df 93       	push	r29
     c98:	1f 92       	push	r1
     c9a:	cd b7       	in	r28, 0x3d	; 61
     c9c:	de b7       	in	r29, 0x3e	; 62
     c9e:	89 83       	std	Y+1, r24	; 0x01
		// PORTB &= 0b11000011;
	}
     ca0:	0f 90       	pop	r0
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <buffer_init>:
  @endcode

 @note The buffer structure must be initialized before any of the buffer functions must be called.
 @param *buffer Pointer to the buffer structure to be used.
 ***********************************************/
void buffer_init(buffer_struct_t *buffer) {
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	00 d0       	rcall	.+0      	; 0xcae <buffer_init+0x6>
     cae:	cd b7       	in	r28, 0x3d	; 61
     cb0:	de b7       	in	r29, 0x3e	; 62
     cb2:	9a 83       	std	Y+2, r25	; 0x02
     cb4:	89 83       	std	Y+1, r24	; 0x01
	buffer->in_i = 0;
     cb6:	89 81       	ldd	r24, Y+1	; 0x01
     cb8:	9a 81       	ldd	r25, Y+2	; 0x02
     cba:	fc 01       	movw	r30, r24
     cbc:	10 8a       	std	Z+16, r1	; 0x10
	buffer->out_i = 0;
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	9a 81       	ldd	r25, Y+2	; 0x02
     cc2:	fc 01       	movw	r30, r24
     cc4:	11 8a       	std	Z+17, r1	; 0x11
	buffer->no_in_buffer = 0;
     cc6:	89 81       	ldd	r24, Y+1	; 0x01
     cc8:	9a 81       	ldd	r25, Y+2	; 0x02
     cca:	fc 01       	movw	r30, r24
     ccc:	12 8a       	std	Z+18, r1	; 0x12
}
     cce:	0f 90       	pop	r0
     cd0:	0f 90       	pop	r0
     cd2:	df 91       	pop	r29
     cd4:	cf 91       	pop	r28
     cd6:	08 95       	ret

00000cd8 <buffer_get_item>:
 @return BUFFER_OK: item removed from buffer and returned in item.\n
    BUFFER_EMPTY: The buffer is empty, item is not updated.
 @param *buffer pointer to the buffer structure.
 @param *item pointer to the variable where the value of the item is returned.
 ***********************************************/
uint8_t buffer_get_item(buffer_struct_t *buffer, uint8_t *item) {
     cd8:	cf 93       	push	r28
     cda:	df 93       	push	r29
     cdc:	00 d0       	rcall	.+0      	; 0xcde <buffer_get_item+0x6>
     cde:	00 d0       	rcall	.+0      	; 0xce0 <buffer_get_item+0x8>
     ce0:	cd b7       	in	r28, 0x3d	; 61
     ce2:	de b7       	in	r29, 0x3e	; 62
     ce4:	9a 83       	std	Y+2, r25	; 0x02
     ce6:	89 83       	std	Y+1, r24	; 0x01
     ce8:	7c 83       	std	Y+4, r23	; 0x04
     cea:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer > 0) {
     cec:	89 81       	ldd	r24, Y+1	; 0x01
     cee:	9a 81       	ldd	r25, Y+2	; 0x02
     cf0:	fc 01       	movw	r30, r24
     cf2:	82 89       	ldd	r24, Z+18	; 0x12
     cf4:	88 23       	and	r24, r24
     cf6:	81 f1       	breq	.+96     	; 0xd58 <buffer_get_item+0x80>
		*item = buffer->storage[buffer->out_i];
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	9a 81       	ldd	r25, Y+2	; 0x02
     cfc:	fc 01       	movw	r30, r24
     cfe:	81 89       	ldd	r24, Z+17	; 0x11
     d00:	88 2f       	mov	r24, r24
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	29 81       	ldd	r18, Y+1	; 0x01
     d06:	3a 81       	ldd	r19, Y+2	; 0x02
     d08:	82 0f       	add	r24, r18
     d0a:	93 1f       	adc	r25, r19
     d0c:	fc 01       	movw	r30, r24
     d0e:	20 81       	ld	r18, Z
     d10:	8b 81       	ldd	r24, Y+3	; 0x03
     d12:	9c 81       	ldd	r25, Y+4	; 0x04
     d14:	fc 01       	movw	r30, r24
     d16:	20 83       	st	Z, r18
		buffer->out_i = INCREMENT(buffer->out_i);
     d18:	89 81       	ldd	r24, Y+1	; 0x01
     d1a:	9a 81       	ldd	r25, Y+2	; 0x02
     d1c:	fc 01       	movw	r30, r24
     d1e:	81 89       	ldd	r24, Z+17	; 0x11
     d20:	88 2f       	mov	r24, r24
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	01 96       	adiw	r24, 0x01	; 1
     d26:	8f 70       	andi	r24, 0x0F	; 15
     d28:	90 78       	andi	r25, 0x80	; 128
     d2a:	99 23       	and	r25, r25
     d2c:	24 f4       	brge	.+8      	; 0xd36 <buffer_get_item+0x5e>
     d2e:	01 97       	sbiw	r24, 0x01	; 1
     d30:	80 6f       	ori	r24, 0xF0	; 240
     d32:	9f 6f       	ori	r25, 0xFF	; 255
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	28 2f       	mov	r18, r24
     d38:	89 81       	ldd	r24, Y+1	; 0x01
     d3a:	9a 81       	ldd	r25, Y+2	; 0x02
     d3c:	fc 01       	movw	r30, r24
     d3e:	21 8b       	std	Z+17, r18	; 0x11
		buffer->no_in_buffer--;
     d40:	89 81       	ldd	r24, Y+1	; 0x01
     d42:	9a 81       	ldd	r25, Y+2	; 0x02
     d44:	fc 01       	movw	r30, r24
     d46:	82 89       	ldd	r24, Z+18	; 0x12
     d48:	2f ef       	ldi	r18, 0xFF	; 255
     d4a:	28 0f       	add	r18, r24
     d4c:	89 81       	ldd	r24, Y+1	; 0x01
     d4e:	9a 81       	ldd	r25, Y+2	; 0x02
     d50:	fc 01       	movw	r30, r24
     d52:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	01 c0       	rjmp	.+2      	; 0xd5a <buffer_get_item+0x82>
	}
	return BUFFER_EMPTY;
     d58:	81 e0       	ldi	r24, 0x01	; 1
}
     d5a:	0f 90       	pop	r0
     d5c:	0f 90       	pop	r0
     d5e:	0f 90       	pop	r0
     d60:	0f 90       	pop	r0
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	08 95       	ret

00000d68 <buffer_put_item>:
 @return BUFFER_OK: item stored in the buffer.\n
    BUFFER_FULL: The buffer is full, item is not stored.
 @param *buffer pointer to the buffer structure.
 @param item to be stored in the buffer.
 ***********************************************/
uint8_t buffer_put_item(buffer_struct_t *buffer, uint8_t item) {
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	00 d0       	rcall	.+0      	; 0xd6e <buffer_put_item+0x6>
     d6e:	1f 92       	push	r1
     d70:	cd b7       	in	r28, 0x3d	; 61
     d72:	de b7       	in	r29, 0x3e	; 62
     d74:	9a 83       	std	Y+2, r25	; 0x02
     d76:	89 83       	std	Y+1, r24	; 0x01
     d78:	6b 83       	std	Y+3, r22	; 0x03
	if (buffer->no_in_buffer<BUFFER_SIZE) {
     d7a:	89 81       	ldd	r24, Y+1	; 0x01
     d7c:	9a 81       	ldd	r25, Y+2	; 0x02
     d7e:	fc 01       	movw	r30, r24
     d80:	82 89       	ldd	r24, Z+18	; 0x12
     d82:	80 31       	cpi	r24, 0x10	; 16
     d84:	68 f5       	brcc	.+90     	; 0xde0 <buffer_put_item+0x78>
		buffer->storage[buffer->in_i] = item;
     d86:	89 81       	ldd	r24, Y+1	; 0x01
     d88:	9a 81       	ldd	r25, Y+2	; 0x02
     d8a:	fc 01       	movw	r30, r24
     d8c:	80 89       	ldd	r24, Z+16	; 0x10
     d8e:	88 2f       	mov	r24, r24
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	29 81       	ldd	r18, Y+1	; 0x01
     d94:	3a 81       	ldd	r19, Y+2	; 0x02
     d96:	82 0f       	add	r24, r18
     d98:	93 1f       	adc	r25, r19
     d9a:	2b 81       	ldd	r18, Y+3	; 0x03
     d9c:	fc 01       	movw	r30, r24
     d9e:	20 83       	st	Z, r18
		buffer->in_i = INCREMENT(buffer->in_i);
     da0:	89 81       	ldd	r24, Y+1	; 0x01
     da2:	9a 81       	ldd	r25, Y+2	; 0x02
     da4:	fc 01       	movw	r30, r24
     da6:	80 89       	ldd	r24, Z+16	; 0x10
     da8:	88 2f       	mov	r24, r24
     daa:	90 e0       	ldi	r25, 0x00	; 0
     dac:	01 96       	adiw	r24, 0x01	; 1
     dae:	8f 70       	andi	r24, 0x0F	; 15
     db0:	90 78       	andi	r25, 0x80	; 128
     db2:	99 23       	and	r25, r25
     db4:	24 f4       	brge	.+8      	; 0xdbe <buffer_put_item+0x56>
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	80 6f       	ori	r24, 0xF0	; 240
     dba:	9f 6f       	ori	r25, 0xFF	; 255
     dbc:	01 96       	adiw	r24, 0x01	; 1
     dbe:	28 2f       	mov	r18, r24
     dc0:	89 81       	ldd	r24, Y+1	; 0x01
     dc2:	9a 81       	ldd	r25, Y+2	; 0x02
     dc4:	fc 01       	movw	r30, r24
     dc6:	20 8b       	std	Z+16, r18	; 0x10
		buffer->no_in_buffer++;
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	9a 81       	ldd	r25, Y+2	; 0x02
     dcc:	fc 01       	movw	r30, r24
     dce:	82 89       	ldd	r24, Z+18	; 0x12
     dd0:	21 e0       	ldi	r18, 0x01	; 1
     dd2:	28 0f       	add	r18, r24
     dd4:	89 81       	ldd	r24, Y+1	; 0x01
     dd6:	9a 81       	ldd	r25, Y+2	; 0x02
     dd8:	fc 01       	movw	r30, r24
     dda:	22 8b       	std	Z+18, r18	; 0x12
		return BUFFER_OK;
     ddc:	80 e0       	ldi	r24, 0x00	; 0
     dde:	01 c0       	rjmp	.+2      	; 0xde2 <buffer_put_item+0x7a>
	}
	return BUFFER_FULL;
     de0:	82 e0       	ldi	r24, 0x02	; 2
}
     de2:	0f 90       	pop	r0
     de4:	0f 90       	pop	r0
     de6:	0f 90       	pop	r0
     de8:	df 91       	pop	r29
     dea:	cf 91       	pop	r28
     dec:	08 95       	ret

00000dee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	00 d0       	rcall	.+0      	; 0xdf4 <vListInitialise+0x6>
     df4:	cd b7       	in	r28, 0x3d	; 61
     df6:	de b7       	in	r29, 0x3e	; 62
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     dfc:	89 81       	ldd	r24, Y+1	; 0x01
     dfe:	9a 81       	ldd	r25, Y+2	; 0x02
     e00:	9c 01       	movw	r18, r24
     e02:	2d 5f       	subi	r18, 0xFD	; 253
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	89 81       	ldd	r24, Y+1	; 0x01
     e08:	9a 81       	ldd	r25, Y+2	; 0x02
     e0a:	fc 01       	movw	r30, r24
     e0c:	32 83       	std	Z+2, r19	; 0x02
     e0e:	21 83       	std	Z+1, r18	; 0x01

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
     e10:	89 81       	ldd	r24, Y+1	; 0x01
     e12:	9a 81       	ldd	r25, Y+2	; 0x02
     e14:	2f ef       	ldi	r18, 0xFF	; 255
     e16:	3f ef       	ldi	r19, 0xFF	; 255
     e18:	fc 01       	movw	r30, r24
     e1a:	34 83       	std	Z+4, r19	; 0x04
     e1c:	23 83       	std	Z+3, r18	; 0x03

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e1e:	89 81       	ldd	r24, Y+1	; 0x01
     e20:	9a 81       	ldd	r25, Y+2	; 0x02
     e22:	9c 01       	movw	r18, r24
     e24:	2d 5f       	subi	r18, 0xFD	; 253
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	89 81       	ldd	r24, Y+1	; 0x01
     e2a:	9a 81       	ldd	r25, Y+2	; 0x02
     e2c:	fc 01       	movw	r30, r24
     e2e:	36 83       	std	Z+6, r19	; 0x06
     e30:	25 83       	std	Z+5, r18	; 0x05
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     e32:	89 81       	ldd	r24, Y+1	; 0x01
     e34:	9a 81       	ldd	r25, Y+2	; 0x02
     e36:	9c 01       	movw	r18, r24
     e38:	2d 5f       	subi	r18, 0xFD	; 253
     e3a:	3f 4f       	sbci	r19, 0xFF	; 255
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	fc 01       	movw	r30, r24
     e42:	30 87       	std	Z+8, r19	; 0x08
     e44:	27 83       	std	Z+7, r18	; 0x07

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
     e46:	89 81       	ldd	r24, Y+1	; 0x01
     e48:	9a 81       	ldd	r25, Y+2	; 0x02
     e4a:	fc 01       	movw	r30, r24
     e4c:	10 82       	st	Z, r1

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
     e4e:	0f 90       	pop	r0
     e50:	0f 90       	pop	r0
     e52:	df 91       	pop	r29
     e54:	cf 91       	pop	r28
     e56:	08 95       	ret

00000e58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
     e58:	cf 93       	push	r28
     e5a:	df 93       	push	r29
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <vListInitialiseItem+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	fc 01       	movw	r30, r24
     e6c:	11 86       	std	Z+9, r1	; 0x09
     e6e:	10 86       	std	Z+8, r1	; 0x08

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
     e70:	0f 90       	pop	r0
     e72:	0f 90       	pop	r0
     e74:	df 91       	pop	r29
     e76:	cf 91       	pop	r28
     e78:	08 95       	ret

00000e7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     e7a:	cf 93       	push	r28
     e7c:	df 93       	push	r29
     e7e:	00 d0       	rcall	.+0      	; 0xe80 <vListInsertEnd+0x6>
     e80:	00 d0       	rcall	.+0      	; 0xe82 <vListInsertEnd+0x8>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <vListInsertEnd+0xa>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	9c 83       	std	Y+4, r25	; 0x04
     e8a:	8b 83       	std	Y+3, r24	; 0x03
     e8c:	7e 83       	std	Y+6, r23	; 0x06
     e8e:	6d 83       	std	Y+5, r22	; 0x05
ListItem_t * const pxIndex = pxList->pxIndex;
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	fc 01       	movw	r30, r24
     e96:	81 81       	ldd	r24, Z+1	; 0x01
     e98:	92 81       	ldd	r25, Z+2	; 0x02
     e9a:	9a 83       	std	Y+2, r25	; 0x02
     e9c:	89 83       	std	Y+1, r24	; 0x01
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
     e9e:	8d 81       	ldd	r24, Y+5	; 0x05
     ea0:	9e 81       	ldd	r25, Y+6	; 0x06
     ea2:	29 81       	ldd	r18, Y+1	; 0x01
     ea4:	3a 81       	ldd	r19, Y+2	; 0x02
     ea6:	fc 01       	movw	r30, r24
     ea8:	33 83       	std	Z+3, r19	; 0x03
     eaa:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
     eac:	89 81       	ldd	r24, Y+1	; 0x01
     eae:	9a 81       	ldd	r25, Y+2	; 0x02
     eb0:	fc 01       	movw	r30, r24
     eb2:	24 81       	ldd	r18, Z+4	; 0x04
     eb4:	35 81       	ldd	r19, Z+5	; 0x05
     eb6:	8d 81       	ldd	r24, Y+5	; 0x05
     eb8:	9e 81       	ldd	r25, Y+6	; 0x06
     eba:	fc 01       	movw	r30, r24
     ebc:	35 83       	std	Z+5, r19	; 0x05
     ebe:	24 83       	std	Z+4, r18	; 0x04

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	9a 81       	ldd	r25, Y+2	; 0x02
     ec4:	fc 01       	movw	r30, r24
     ec6:	84 81       	ldd	r24, Z+4	; 0x04
     ec8:	95 81       	ldd	r25, Z+5	; 0x05
     eca:	2d 81       	ldd	r18, Y+5	; 0x05
     ecc:	3e 81       	ldd	r19, Y+6	; 0x06
     ece:	fc 01       	movw	r30, r24
     ed0:	33 83       	std	Z+3, r19	; 0x03
     ed2:	22 83       	std	Z+2, r18	; 0x02
	pxIndex->pxPrevious = pxNewListItem;
     ed4:	89 81       	ldd	r24, Y+1	; 0x01
     ed6:	9a 81       	ldd	r25, Y+2	; 0x02
     ed8:	2d 81       	ldd	r18, Y+5	; 0x05
     eda:	3e 81       	ldd	r19, Y+6	; 0x06
     edc:	fc 01       	movw	r30, r24
     ede:	35 83       	std	Z+5, r19	; 0x05
     ee0:	24 83       	std	Z+4, r18	; 0x04

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     ee2:	8d 81       	ldd	r24, Y+5	; 0x05
     ee4:	9e 81       	ldd	r25, Y+6	; 0x06
     ee6:	2b 81       	ldd	r18, Y+3	; 0x03
     ee8:	3c 81       	ldd	r19, Y+4	; 0x04
     eea:	fc 01       	movw	r30, r24
     eec:	31 87       	std	Z+9, r19	; 0x09
     eee:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     ef0:	8b 81       	ldd	r24, Y+3	; 0x03
     ef2:	9c 81       	ldd	r25, Y+4	; 0x04
     ef4:	fc 01       	movw	r30, r24
     ef6:	80 81       	ld	r24, Z
     ef8:	21 e0       	ldi	r18, 0x01	; 1
     efa:	28 0f       	add	r18, r24
     efc:	8b 81       	ldd	r24, Y+3	; 0x03
     efe:	9c 81       	ldd	r25, Y+4	; 0x04
     f00:	fc 01       	movw	r30, r24
     f02:	20 83       	st	Z, r18
}
     f04:	26 96       	adiw	r28, 0x06	; 6
     f06:	0f b6       	in	r0, 0x3f	; 63
     f08:	f8 94       	cli
     f0a:	de bf       	out	0x3e, r29	; 62
     f0c:	0f be       	out	0x3f, r0	; 63
     f0e:	cd bf       	out	0x3d, r28	; 61
     f10:	df 91       	pop	r29
     f12:	cf 91       	pop	r28
     f14:	08 95       	ret

00000f16 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
     f16:	cf 93       	push	r28
     f18:	df 93       	push	r29
     f1a:	cd b7       	in	r28, 0x3d	; 61
     f1c:	de b7       	in	r29, 0x3e	; 62
     f1e:	28 97       	sbiw	r28, 0x08	; 8
     f20:	0f b6       	in	r0, 0x3f	; 63
     f22:	f8 94       	cli
     f24:	de bf       	out	0x3e, r29	; 62
     f26:	0f be       	out	0x3f, r0	; 63
     f28:	cd bf       	out	0x3d, r28	; 61
     f2a:	9e 83       	std	Y+6, r25	; 0x06
     f2c:	8d 83       	std	Y+5, r24	; 0x05
     f2e:	78 87       	std	Y+8, r23	; 0x08
     f30:	6f 83       	std	Y+7, r22	; 0x07
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     f32:	8f 81       	ldd	r24, Y+7	; 0x07
     f34:	98 85       	ldd	r25, Y+8	; 0x08
     f36:	fc 01       	movw	r30, r24
     f38:	80 81       	ld	r24, Z
     f3a:	91 81       	ldd	r25, Z+1	; 0x01
     f3c:	9c 83       	std	Y+4, r25	; 0x04
     f3e:	8b 83       	std	Y+3, r24	; 0x03
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
     f40:	8b 81       	ldd	r24, Y+3	; 0x03
     f42:	9c 81       	ldd	r25, Y+4	; 0x04
     f44:	01 96       	adiw	r24, 0x01	; 1
     f46:	41 f4       	brne	.+16     	; 0xf58 <vListInsert+0x42>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
     f48:	8d 81       	ldd	r24, Y+5	; 0x05
     f4a:	9e 81       	ldd	r25, Y+6	; 0x06
     f4c:	fc 01       	movw	r30, r24
     f4e:	87 81       	ldd	r24, Z+7	; 0x07
     f50:	90 85       	ldd	r25, Z+8	; 0x08
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	1a c0       	rjmp	.+52     	; 0xf8c <vListInsert+0x76>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
     f58:	8d 81       	ldd	r24, Y+5	; 0x05
     f5a:	9e 81       	ldd	r25, Y+6	; 0x06
     f5c:	03 96       	adiw	r24, 0x03	; 3
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
     f62:	07 c0       	rjmp	.+14     	; 0xf72 <vListInsert+0x5c>
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	fc 01       	movw	r30, r24
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	9a 83       	std	Y+2, r25	; 0x02
     f70:	89 83       	std	Y+1, r24	; 0x01
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	9a 81       	ldd	r25, Y+2	; 0x02
     f76:	fc 01       	movw	r30, r24
     f78:	82 81       	ldd	r24, Z+2	; 0x02
     f7a:	93 81       	ldd	r25, Z+3	; 0x03
     f7c:	fc 01       	movw	r30, r24
     f7e:	20 81       	ld	r18, Z
     f80:	31 81       	ldd	r19, Z+1	; 0x01
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	9c 81       	ldd	r25, Y+4	; 0x04
     f86:	82 17       	cp	r24, r18
     f88:	93 07       	cpc	r25, r19
     f8a:	60 f7       	brcc	.-40     	; 0xf64 <vListInsert+0x4e>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
     f8c:	89 81       	ldd	r24, Y+1	; 0x01
     f8e:	9a 81       	ldd	r25, Y+2	; 0x02
     f90:	fc 01       	movw	r30, r24
     f92:	22 81       	ldd	r18, Z+2	; 0x02
     f94:	33 81       	ldd	r19, Z+3	; 0x03
     f96:	8f 81       	ldd	r24, Y+7	; 0x07
     f98:	98 85       	ldd	r25, Y+8	; 0x08
     f9a:	fc 01       	movw	r30, r24
     f9c:	33 83       	std	Z+3, r19	; 0x03
     f9e:	22 83       	std	Z+2, r18	; 0x02
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     fa0:	8f 81       	ldd	r24, Y+7	; 0x07
     fa2:	98 85       	ldd	r25, Y+8	; 0x08
     fa4:	fc 01       	movw	r30, r24
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	2f 81       	ldd	r18, Y+7	; 0x07
     fac:	38 85       	ldd	r19, Y+8	; 0x08
     fae:	fc 01       	movw	r30, r24
     fb0:	35 83       	std	Z+5, r19	; 0x05
     fb2:	24 83       	std	Z+4, r18	; 0x04
	pxNewListItem->pxPrevious = pxIterator;
     fb4:	8f 81       	ldd	r24, Y+7	; 0x07
     fb6:	98 85       	ldd	r25, Y+8	; 0x08
     fb8:	29 81       	ldd	r18, Y+1	; 0x01
     fba:	3a 81       	ldd	r19, Y+2	; 0x02
     fbc:	fc 01       	movw	r30, r24
     fbe:	35 83       	std	Z+5, r19	; 0x05
     fc0:	24 83       	std	Z+4, r18	; 0x04
	pxIterator->pxNext = pxNewListItem;
     fc2:	89 81       	ldd	r24, Y+1	; 0x01
     fc4:	9a 81       	ldd	r25, Y+2	; 0x02
     fc6:	2f 81       	ldd	r18, Y+7	; 0x07
     fc8:	38 85       	ldd	r19, Y+8	; 0x08
     fca:	fc 01       	movw	r30, r24
     fcc:	33 83       	std	Z+3, r19	; 0x03
     fce:	22 83       	std	Z+2, r18	; 0x02

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
     fd0:	8f 81       	ldd	r24, Y+7	; 0x07
     fd2:	98 85       	ldd	r25, Y+8	; 0x08
     fd4:	2d 81       	ldd	r18, Y+5	; 0x05
     fd6:	3e 81       	ldd	r19, Y+6	; 0x06
     fd8:	fc 01       	movw	r30, r24
     fda:	31 87       	std	Z+9, r19	; 0x09
     fdc:	20 87       	std	Z+8, r18	; 0x08

	( pxList->uxNumberOfItems )++;
     fde:	8d 81       	ldd	r24, Y+5	; 0x05
     fe0:	9e 81       	ldd	r25, Y+6	; 0x06
     fe2:	fc 01       	movw	r30, r24
     fe4:	80 81       	ld	r24, Z
     fe6:	21 e0       	ldi	r18, 0x01	; 1
     fe8:	28 0f       	add	r18, r24
     fea:	8d 81       	ldd	r24, Y+5	; 0x05
     fec:	9e 81       	ldd	r25, Y+6	; 0x06
     fee:	fc 01       	movw	r30, r24
     ff0:	20 83       	st	Z, r18
}
     ff2:	28 96       	adiw	r28, 0x08	; 8
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	f8 94       	cli
     ff8:	de bf       	out	0x3e, r29	; 62
     ffa:	0f be       	out	0x3f, r0	; 63
     ffc:	cd bf       	out	0x3d, r28	; 61
     ffe:	df 91       	pop	r29
    1000:	cf 91       	pop	r28
    1002:	08 95       	ret

00001004 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
    1004:	cf 93       	push	r28
    1006:	df 93       	push	r29
    1008:	00 d0       	rcall	.+0      	; 0x100a <uxListRemove+0x6>
    100a:	00 d0       	rcall	.+0      	; 0x100c <uxListRemove+0x8>
    100c:	cd b7       	in	r28, 0x3d	; 61
    100e:	de b7       	in	r29, 0x3e	; 62
    1010:	9c 83       	std	Y+4, r25	; 0x04
    1012:	8b 83       	std	Y+3, r24	; 0x03
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
    1014:	8b 81       	ldd	r24, Y+3	; 0x03
    1016:	9c 81       	ldd	r25, Y+4	; 0x04
    1018:	fc 01       	movw	r30, r24
    101a:	80 85       	ldd	r24, Z+8	; 0x08
    101c:	91 85       	ldd	r25, Z+9	; 0x09
    101e:	9a 83       	std	Y+2, r25	; 0x02
    1020:	89 83       	std	Y+1, r24	; 0x01

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
    1022:	8b 81       	ldd	r24, Y+3	; 0x03
    1024:	9c 81       	ldd	r25, Y+4	; 0x04
    1026:	fc 01       	movw	r30, r24
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	2b 81       	ldd	r18, Y+3	; 0x03
    102e:	3c 81       	ldd	r19, Y+4	; 0x04
    1030:	f9 01       	movw	r30, r18
    1032:	24 81       	ldd	r18, Z+4	; 0x04
    1034:	35 81       	ldd	r19, Z+5	; 0x05
    1036:	fc 01       	movw	r30, r24
    1038:	35 83       	std	Z+5, r19	; 0x05
    103a:	24 83       	std	Z+4, r18	; 0x04
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
    103c:	8b 81       	ldd	r24, Y+3	; 0x03
    103e:	9c 81       	ldd	r25, Y+4	; 0x04
    1040:	fc 01       	movw	r30, r24
    1042:	84 81       	ldd	r24, Z+4	; 0x04
    1044:	95 81       	ldd	r25, Z+5	; 0x05
    1046:	2b 81       	ldd	r18, Y+3	; 0x03
    1048:	3c 81       	ldd	r19, Y+4	; 0x04
    104a:	f9 01       	movw	r30, r18
    104c:	22 81       	ldd	r18, Z+2	; 0x02
    104e:	33 81       	ldd	r19, Z+3	; 0x03
    1050:	fc 01       	movw	r30, r24
    1052:	33 83       	std	Z+3, r19	; 0x03
    1054:	22 83       	std	Z+2, r18	; 0x02

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
    1056:	89 81       	ldd	r24, Y+1	; 0x01
    1058:	9a 81       	ldd	r25, Y+2	; 0x02
    105a:	fc 01       	movw	r30, r24
    105c:	21 81       	ldd	r18, Z+1	; 0x01
    105e:	32 81       	ldd	r19, Z+2	; 0x02
    1060:	8b 81       	ldd	r24, Y+3	; 0x03
    1062:	9c 81       	ldd	r25, Y+4	; 0x04
    1064:	28 17       	cp	r18, r24
    1066:	39 07       	cpc	r19, r25
    1068:	51 f4       	brne	.+20     	; 0x107e <uxListRemove+0x7a>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
    106a:	8b 81       	ldd	r24, Y+3	; 0x03
    106c:	9c 81       	ldd	r25, Y+4	; 0x04
    106e:	fc 01       	movw	r30, r24
    1070:	24 81       	ldd	r18, Z+4	; 0x04
    1072:	35 81       	ldd	r19, Z+5	; 0x05
    1074:	89 81       	ldd	r24, Y+1	; 0x01
    1076:	9a 81       	ldd	r25, Y+2	; 0x02
    1078:	fc 01       	movw	r30, r24
    107a:	32 83       	std	Z+2, r19	; 0x02
    107c:	21 83       	std	Z+1, r18	; 0x01
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
    1082:	fc 01       	movw	r30, r24
    1084:	11 86       	std	Z+9, r1	; 0x09
    1086:	10 86       	std	Z+8, r1	; 0x08
	( pxList->uxNumberOfItems )--;
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	9a 81       	ldd	r25, Y+2	; 0x02
    108c:	fc 01       	movw	r30, r24
    108e:	80 81       	ld	r24, Z
    1090:	2f ef       	ldi	r18, 0xFF	; 255
    1092:	28 0f       	add	r18, r24
    1094:	89 81       	ldd	r24, Y+1	; 0x01
    1096:	9a 81       	ldd	r25, Y+2	; 0x02
    1098:	fc 01       	movw	r30, r24
    109a:	20 83       	st	Z, r18

	return pxList->uxNumberOfItems;
    109c:	89 81       	ldd	r24, Y+1	; 0x01
    109e:	9a 81       	ldd	r25, Y+2	; 0x02
    10a0:	fc 01       	movw	r30, r24
    10a2:	80 81       	ld	r24, Z
}
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	df 91       	pop	r29
    10ae:	cf 91       	pop	r28
    10b0:	08 95       	ret

000010b2 <pxPortInitialiseStack>:

void vPortEndScheduler( void )
{
	/* It is unlikely that the AVR port will get stopped.  If required simply
	disable the tick interrupt here. */
}
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
    10ba:	28 97       	sbiw	r28, 0x08	; 8
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	de bf       	out	0x3e, r29	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	cd bf       	out	0x3d, r28	; 61
    10c6:	9c 83       	std	Y+4, r25	; 0x04
    10c8:	8b 83       	std	Y+3, r24	; 0x03
    10ca:	7e 83       	std	Y+6, r23	; 0x06
    10cc:	6d 83       	std	Y+5, r22	; 0x05
    10ce:	58 87       	std	Y+8, r21	; 0x08
    10d0:	4f 83       	std	Y+7, r20	; 0x07
    10d2:	8b 81       	ldd	r24, Y+3	; 0x03
    10d4:	9c 81       	ldd	r25, Y+4	; 0x04
    10d6:	21 e1       	ldi	r18, 0x11	; 17
    10d8:	fc 01       	movw	r30, r24
    10da:	20 83       	st	Z, r18
    10dc:	8b 81       	ldd	r24, Y+3	; 0x03
    10de:	9c 81       	ldd	r25, Y+4	; 0x04
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	22 e2       	ldi	r18, 0x22	; 34
    10ec:	fc 01       	movw	r30, r24
    10ee:	20 83       	st	Z, r18
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	9c 81       	ldd	r25, Y+4	; 0x04
    10f4:	01 97       	sbiw	r24, 0x01	; 1
    10f6:	9c 83       	std	Y+4, r25	; 0x04
    10f8:	8b 83       	std	Y+3, r24	; 0x03
    10fa:	8b 81       	ldd	r24, Y+3	; 0x03
    10fc:	9c 81       	ldd	r25, Y+4	; 0x04
    10fe:	23 e3       	ldi	r18, 0x33	; 51
    1100:	fc 01       	movw	r30, r24
    1102:	20 83       	st	Z, r18
    1104:	8b 81       	ldd	r24, Y+3	; 0x03
    1106:	9c 81       	ldd	r25, Y+4	; 0x04
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	9c 83       	std	Y+4, r25	; 0x04
    110c:	8b 83       	std	Y+3, r24	; 0x03
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	9a 83       	std	Y+2, r25	; 0x02
    1114:	89 83       	std	Y+1, r24	; 0x01
    1116:	29 81       	ldd	r18, Y+1	; 0x01
    1118:	8b 81       	ldd	r24, Y+3	; 0x03
    111a:	9c 81       	ldd	r25, Y+4	; 0x04
    111c:	fc 01       	movw	r30, r24
    111e:	20 83       	st	Z, r18
    1120:	8b 81       	ldd	r24, Y+3	; 0x03
    1122:	9c 81       	ldd	r25, Y+4	; 0x04
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	9c 83       	std	Y+4, r25	; 0x04
    1128:	8b 83       	std	Y+3, r24	; 0x03
    112a:	89 81       	ldd	r24, Y+1	; 0x01
    112c:	9a 81       	ldd	r25, Y+2	; 0x02
    112e:	89 2f       	mov	r24, r25
    1130:	99 27       	eor	r25, r25
    1132:	9a 83       	std	Y+2, r25	; 0x02
    1134:	89 83       	std	Y+1, r24	; 0x01
    1136:	29 81       	ldd	r18, Y+1	; 0x01
    1138:	8b 81       	ldd	r24, Y+3	; 0x03
    113a:	9c 81       	ldd	r25, Y+4	; 0x04
    113c:	fc 01       	movw	r30, r24
    113e:	20 83       	st	Z, r18
    1140:	8b 81       	ldd	r24, Y+3	; 0x03
    1142:	9c 81       	ldd	r25, Y+4	; 0x04
    1144:	01 97       	sbiw	r24, 0x01	; 1
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	fc 01       	movw	r30, r24
    1150:	10 82       	st	Z, r1
    1152:	8b 81       	ldd	r24, Y+3	; 0x03
    1154:	9c 81       	ldd	r25, Y+4	; 0x04
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	20 e8       	ldi	r18, 0x80	; 128
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
    1166:	8b 81       	ldd	r24, Y+3	; 0x03
    1168:	9c 81       	ldd	r25, Y+4	; 0x04
    116a:	01 97       	sbiw	r24, 0x01	; 1
    116c:	9c 83       	std	Y+4, r25	; 0x04
    116e:	8b 83       	std	Y+3, r24	; 0x03
    1170:	8b 81       	ldd	r24, Y+3	; 0x03
    1172:	9c 81       	ldd	r25, Y+4	; 0x04
    1174:	fc 01       	movw	r30, r24
    1176:	10 82       	st	Z, r1
    1178:	8b 81       	ldd	r24, Y+3	; 0x03
    117a:	9c 81       	ldd	r25, Y+4	; 0x04
    117c:	01 97       	sbiw	r24, 0x01	; 1
    117e:	9c 83       	std	Y+4, r25	; 0x04
    1180:	8b 83       	std	Y+3, r24	; 0x03
    1182:	8b 81       	ldd	r24, Y+3	; 0x03
    1184:	9c 81       	ldd	r25, Y+4	; 0x04
    1186:	22 e0       	ldi	r18, 0x02	; 2
    1188:	fc 01       	movw	r30, r24
    118a:	20 83       	st	Z, r18
    118c:	8b 81       	ldd	r24, Y+3	; 0x03
    118e:	9c 81       	ldd	r25, Y+4	; 0x04
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	9c 83       	std	Y+4, r25	; 0x04
    1194:	8b 83       	std	Y+3, r24	; 0x03
    1196:	8b 81       	ldd	r24, Y+3	; 0x03
    1198:	9c 81       	ldd	r25, Y+4	; 0x04
    119a:	23 e0       	ldi	r18, 0x03	; 3
    119c:	fc 01       	movw	r30, r24
    119e:	20 83       	st	Z, r18
    11a0:	8b 81       	ldd	r24, Y+3	; 0x03
    11a2:	9c 81       	ldd	r25, Y+4	; 0x04
    11a4:	01 97       	sbiw	r24, 0x01	; 1
    11a6:	9c 83       	std	Y+4, r25	; 0x04
    11a8:	8b 83       	std	Y+3, r24	; 0x03
    11aa:	8b 81       	ldd	r24, Y+3	; 0x03
    11ac:	9c 81       	ldd	r25, Y+4	; 0x04
    11ae:	24 e0       	ldi	r18, 0x04	; 4
    11b0:	fc 01       	movw	r30, r24
    11b2:	20 83       	st	Z, r18
    11b4:	8b 81       	ldd	r24, Y+3	; 0x03
    11b6:	9c 81       	ldd	r25, Y+4	; 0x04
    11b8:	01 97       	sbiw	r24, 0x01	; 1
    11ba:	9c 83       	std	Y+4, r25	; 0x04
    11bc:	8b 83       	std	Y+3, r24	; 0x03
    11be:	8b 81       	ldd	r24, Y+3	; 0x03
    11c0:	9c 81       	ldd	r25, Y+4	; 0x04
    11c2:	25 e0       	ldi	r18, 0x05	; 5
    11c4:	fc 01       	movw	r30, r24
    11c6:	20 83       	st	Z, r18
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	01 97       	sbiw	r24, 0x01	; 1
    11ce:	9c 83       	std	Y+4, r25	; 0x04
    11d0:	8b 83       	std	Y+3, r24	; 0x03
    11d2:	8b 81       	ldd	r24, Y+3	; 0x03
    11d4:	9c 81       	ldd	r25, Y+4	; 0x04
    11d6:	26 e0       	ldi	r18, 0x06	; 6
    11d8:	fc 01       	movw	r30, r24
    11da:	20 83       	st	Z, r18
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	01 97       	sbiw	r24, 0x01	; 1
    11e2:	9c 83       	std	Y+4, r25	; 0x04
    11e4:	8b 83       	std	Y+3, r24	; 0x03
    11e6:	8b 81       	ldd	r24, Y+3	; 0x03
    11e8:	9c 81       	ldd	r25, Y+4	; 0x04
    11ea:	27 e0       	ldi	r18, 0x07	; 7
    11ec:	fc 01       	movw	r30, r24
    11ee:	20 83       	st	Z, r18
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 83       	std	Y+4, r25	; 0x04
    11f8:	8b 83       	std	Y+3, r24	; 0x03
    11fa:	8b 81       	ldd	r24, Y+3	; 0x03
    11fc:	9c 81       	ldd	r25, Y+4	; 0x04
    11fe:	28 e0       	ldi	r18, 0x08	; 8
    1200:	fc 01       	movw	r30, r24
    1202:	20 83       	st	Z, r18
    1204:	8b 81       	ldd	r24, Y+3	; 0x03
    1206:	9c 81       	ldd	r25, Y+4	; 0x04
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9c 83       	std	Y+4, r25	; 0x04
    120c:	8b 83       	std	Y+3, r24	; 0x03
    120e:	8b 81       	ldd	r24, Y+3	; 0x03
    1210:	9c 81       	ldd	r25, Y+4	; 0x04
    1212:	29 e0       	ldi	r18, 0x09	; 9
    1214:	fc 01       	movw	r30, r24
    1216:	20 83       	st	Z, r18
    1218:	8b 81       	ldd	r24, Y+3	; 0x03
    121a:	9c 81       	ldd	r25, Y+4	; 0x04
    121c:	01 97       	sbiw	r24, 0x01	; 1
    121e:	9c 83       	std	Y+4, r25	; 0x04
    1220:	8b 83       	std	Y+3, r24	; 0x03
    1222:	8b 81       	ldd	r24, Y+3	; 0x03
    1224:	9c 81       	ldd	r25, Y+4	; 0x04
    1226:	20 e1       	ldi	r18, 0x10	; 16
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
    122c:	8b 81       	ldd	r24, Y+3	; 0x03
    122e:	9c 81       	ldd	r25, Y+4	; 0x04
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9c 83       	std	Y+4, r25	; 0x04
    1234:	8b 83       	std	Y+3, r24	; 0x03
    1236:	8b 81       	ldd	r24, Y+3	; 0x03
    1238:	9c 81       	ldd	r25, Y+4	; 0x04
    123a:	21 e1       	ldi	r18, 0x11	; 17
    123c:	fc 01       	movw	r30, r24
    123e:	20 83       	st	Z, r18
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9c 83       	std	Y+4, r25	; 0x04
    1248:	8b 83       	std	Y+3, r24	; 0x03
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	9c 81       	ldd	r25, Y+4	; 0x04
    124e:	22 e1       	ldi	r18, 0x12	; 18
    1250:	fc 01       	movw	r30, r24
    1252:	20 83       	st	Z, r18
    1254:	8b 81       	ldd	r24, Y+3	; 0x03
    1256:	9c 81       	ldd	r25, Y+4	; 0x04
    1258:	01 97       	sbiw	r24, 0x01	; 1
    125a:	9c 83       	std	Y+4, r25	; 0x04
    125c:	8b 83       	std	Y+3, r24	; 0x03
    125e:	8b 81       	ldd	r24, Y+3	; 0x03
    1260:	9c 81       	ldd	r25, Y+4	; 0x04
    1262:	23 e1       	ldi	r18, 0x13	; 19
    1264:	fc 01       	movw	r30, r24
    1266:	20 83       	st	Z, r18
    1268:	8b 81       	ldd	r24, Y+3	; 0x03
    126a:	9c 81       	ldd	r25, Y+4	; 0x04
    126c:	01 97       	sbiw	r24, 0x01	; 1
    126e:	9c 83       	std	Y+4, r25	; 0x04
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	8b 81       	ldd	r24, Y+3	; 0x03
    1274:	9c 81       	ldd	r25, Y+4	; 0x04
    1276:	24 e1       	ldi	r18, 0x14	; 20
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	9c 81       	ldd	r25, Y+4	; 0x04
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	9c 83       	std	Y+4, r25	; 0x04
    1284:	8b 83       	std	Y+3, r24	; 0x03
    1286:	8b 81       	ldd	r24, Y+3	; 0x03
    1288:	9c 81       	ldd	r25, Y+4	; 0x04
    128a:	25 e1       	ldi	r18, 0x15	; 21
    128c:	fc 01       	movw	r30, r24
    128e:	20 83       	st	Z, r18
    1290:	8b 81       	ldd	r24, Y+3	; 0x03
    1292:	9c 81       	ldd	r25, Y+4	; 0x04
    1294:	01 97       	sbiw	r24, 0x01	; 1
    1296:	9c 83       	std	Y+4, r25	; 0x04
    1298:	8b 83       	std	Y+3, r24	; 0x03
    129a:	8b 81       	ldd	r24, Y+3	; 0x03
    129c:	9c 81       	ldd	r25, Y+4	; 0x04
    129e:	26 e1       	ldi	r18, 0x16	; 22
    12a0:	fc 01       	movw	r30, r24
    12a2:	20 83       	st	Z, r18
    12a4:	8b 81       	ldd	r24, Y+3	; 0x03
    12a6:	9c 81       	ldd	r25, Y+4	; 0x04
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	9c 83       	std	Y+4, r25	; 0x04
    12ac:	8b 83       	std	Y+3, r24	; 0x03
    12ae:	8b 81       	ldd	r24, Y+3	; 0x03
    12b0:	9c 81       	ldd	r25, Y+4	; 0x04
    12b2:	27 e1       	ldi	r18, 0x17	; 23
    12b4:	fc 01       	movw	r30, r24
    12b6:	20 83       	st	Z, r18
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	9c 83       	std	Y+4, r25	; 0x04
    12c0:	8b 83       	std	Y+3, r24	; 0x03
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	9c 81       	ldd	r25, Y+4	; 0x04
    12c6:	28 e1       	ldi	r18, 0x18	; 24
    12c8:	fc 01       	movw	r30, r24
    12ca:	20 83       	st	Z, r18
    12cc:	8b 81       	ldd	r24, Y+3	; 0x03
    12ce:	9c 81       	ldd	r25, Y+4	; 0x04
    12d0:	01 97       	sbiw	r24, 0x01	; 1
    12d2:	9c 83       	std	Y+4, r25	; 0x04
    12d4:	8b 83       	std	Y+3, r24	; 0x03
    12d6:	8b 81       	ldd	r24, Y+3	; 0x03
    12d8:	9c 81       	ldd	r25, Y+4	; 0x04
    12da:	29 e1       	ldi	r18, 0x19	; 25
    12dc:	fc 01       	movw	r30, r24
    12de:	20 83       	st	Z, r18
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	9c 83       	std	Y+4, r25	; 0x04
    12e8:	8b 83       	std	Y+3, r24	; 0x03
    12ea:	8b 81       	ldd	r24, Y+3	; 0x03
    12ec:	9c 81       	ldd	r25, Y+4	; 0x04
    12ee:	20 e2       	ldi	r18, 0x20	; 32
    12f0:	fc 01       	movw	r30, r24
    12f2:	20 83       	st	Z, r18
    12f4:	8b 81       	ldd	r24, Y+3	; 0x03
    12f6:	9c 81       	ldd	r25, Y+4	; 0x04
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	9c 83       	std	Y+4, r25	; 0x04
    12fc:	8b 83       	std	Y+3, r24	; 0x03
    12fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1300:	9c 81       	ldd	r25, Y+4	; 0x04
    1302:	21 e2       	ldi	r18, 0x21	; 33
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	9c 81       	ldd	r25, Y+4	; 0x04
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	9c 83       	std	Y+4, r25	; 0x04
    1310:	8b 83       	std	Y+3, r24	; 0x03
    1312:	8b 81       	ldd	r24, Y+3	; 0x03
    1314:	9c 81       	ldd	r25, Y+4	; 0x04
    1316:	22 e2       	ldi	r18, 0x22	; 34
    1318:	fc 01       	movw	r30, r24
    131a:	20 83       	st	Z, r18
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	9c 83       	std	Y+4, r25	; 0x04
    1324:	8b 83       	std	Y+3, r24	; 0x03
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	23 e2       	ldi	r18, 0x23	; 35
    132c:	fc 01       	movw	r30, r24
    132e:	20 83       	st	Z, r18
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	9c 81       	ldd	r25, Y+4	; 0x04
    1334:	01 97       	sbiw	r24, 0x01	; 1
    1336:	9c 83       	std	Y+4, r25	; 0x04
    1338:	8b 83       	std	Y+3, r24	; 0x03
    133a:	8f 81       	ldd	r24, Y+7	; 0x07
    133c:	98 85       	ldd	r25, Y+8	; 0x08
    133e:	9a 83       	std	Y+2, r25	; 0x02
    1340:	89 83       	std	Y+1, r24	; 0x01
    1342:	29 81       	ldd	r18, Y+1	; 0x01
    1344:	8b 81       	ldd	r24, Y+3	; 0x03
    1346:	9c 81       	ldd	r25, Y+4	; 0x04
    1348:	fc 01       	movw	r30, r24
    134a:	20 83       	st	Z, r18
    134c:	8b 81       	ldd	r24, Y+3	; 0x03
    134e:	9c 81       	ldd	r25, Y+4	; 0x04
    1350:	01 97       	sbiw	r24, 0x01	; 1
    1352:	9c 83       	std	Y+4, r25	; 0x04
    1354:	8b 83       	std	Y+3, r24	; 0x03
    1356:	89 81       	ldd	r24, Y+1	; 0x01
    1358:	9a 81       	ldd	r25, Y+2	; 0x02
    135a:	89 2f       	mov	r24, r25
    135c:	99 27       	eor	r25, r25
    135e:	9a 83       	std	Y+2, r25	; 0x02
    1360:	89 83       	std	Y+1, r24	; 0x01
    1362:	29 81       	ldd	r18, Y+1	; 0x01
    1364:	8b 81       	ldd	r24, Y+3	; 0x03
    1366:	9c 81       	ldd	r25, Y+4	; 0x04
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	9c 81       	ldd	r25, Y+4	; 0x04
    1370:	01 97       	sbiw	r24, 0x01	; 1
    1372:	9c 83       	std	Y+4, r25	; 0x04
    1374:	8b 83       	std	Y+3, r24	; 0x03
    1376:	8b 81       	ldd	r24, Y+3	; 0x03
    1378:	9c 81       	ldd	r25, Y+4	; 0x04
    137a:	26 e2       	ldi	r18, 0x26	; 38
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	9c 81       	ldd	r25, Y+4	; 0x04
    1384:	01 97       	sbiw	r24, 0x01	; 1
    1386:	9c 83       	std	Y+4, r25	; 0x04
    1388:	8b 83       	std	Y+3, r24	; 0x03
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	9c 81       	ldd	r25, Y+4	; 0x04
    138e:	27 e2       	ldi	r18, 0x27	; 39
    1390:	fc 01       	movw	r30, r24
    1392:	20 83       	st	Z, r18
    1394:	8b 81       	ldd	r24, Y+3	; 0x03
    1396:	9c 81       	ldd	r25, Y+4	; 0x04
    1398:	01 97       	sbiw	r24, 0x01	; 1
    139a:	9c 83       	std	Y+4, r25	; 0x04
    139c:	8b 83       	std	Y+3, r24	; 0x03
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	28 e2       	ldi	r18, 0x28	; 40
    13a4:	fc 01       	movw	r30, r24
    13a6:	20 83       	st	Z, r18
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	01 97       	sbiw	r24, 0x01	; 1
    13ae:	9c 83       	std	Y+4, r25	; 0x04
    13b0:	8b 83       	std	Y+3, r24	; 0x03
    13b2:	8b 81       	ldd	r24, Y+3	; 0x03
    13b4:	9c 81       	ldd	r25, Y+4	; 0x04
    13b6:	29 e2       	ldi	r18, 0x29	; 41
    13b8:	fc 01       	movw	r30, r24
    13ba:	20 83       	st	Z, r18
    13bc:	8b 81       	ldd	r24, Y+3	; 0x03
    13be:	9c 81       	ldd	r25, Y+4	; 0x04
    13c0:	01 97       	sbiw	r24, 0x01	; 1
    13c2:	9c 83       	std	Y+4, r25	; 0x04
    13c4:	8b 83       	std	Y+3, r24	; 0x03
    13c6:	8b 81       	ldd	r24, Y+3	; 0x03
    13c8:	9c 81       	ldd	r25, Y+4	; 0x04
    13ca:	20 e3       	ldi	r18, 0x30	; 48
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	8b 81       	ldd	r24, Y+3	; 0x03
    13d2:	9c 81       	ldd	r25, Y+4	; 0x04
    13d4:	01 97       	sbiw	r24, 0x01	; 1
    13d6:	9c 83       	std	Y+4, r25	; 0x04
    13d8:	8b 83       	std	Y+3, r24	; 0x03
    13da:	8b 81       	ldd	r24, Y+3	; 0x03
    13dc:	9c 81       	ldd	r25, Y+4	; 0x04
    13de:	21 e3       	ldi	r18, 0x31	; 49
    13e0:	fc 01       	movw	r30, r24
    13e2:	20 83       	st	Z, r18
    13e4:	8b 81       	ldd	r24, Y+3	; 0x03
    13e6:	9c 81       	ldd	r25, Y+4	; 0x04
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	9c 83       	std	Y+4, r25	; 0x04
    13ec:	8b 83       	std	Y+3, r24	; 0x03
    13ee:	8b 81       	ldd	r24, Y+3	; 0x03
    13f0:	9c 81       	ldd	r25, Y+4	; 0x04
    13f2:	28 96       	adiw	r28, 0x08	; 8
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	df 91       	pop	r29
    1400:	cf 91       	pop	r28
    1402:	08 95       	ret

00001404 <xPortStartScheduler>:
    1404:	cf 93       	push	r28
    1406:	df 93       	push	r29
    1408:	cd b7       	in	r28, 0x3d	; 61
    140a:	de b7       	in	r29, 0x3e	; 62
    140c:	0e 94 ed 0a 	call	0x15da	; 0x15da <prvSetupTimerInterrupt>
    1410:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    1414:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    1418:	cd 91       	ld	r28, X+
    141a:	cd bf       	out	0x3d, r28	; 61
    141c:	dd 91       	ld	r29, X+
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	bf 91       	pop	r27
    142a:	af 91       	pop	r26
    142c:	9f 91       	pop	r25
    142e:	8f 91       	pop	r24
    1430:	7f 91       	pop	r23
    1432:	6f 91       	pop	r22
    1434:	5f 91       	pop	r21
    1436:	4f 91       	pop	r20
    1438:	3f 91       	pop	r19
    143a:	2f 91       	pop	r18
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	1f 90       	pop	r1
    145e:	0f 90       	pop	r0
    1460:	0f be       	out	0x3f, r0	; 63
    1462:	0f 90       	pop	r0
    1464:	08 95       	ret
    1466:	81 e0       	ldi	r24, 0x01	; 1
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	08 95       	ret

0000146e <vPortYield>:
 * can use a naked attribute.
 */
void vPortYield( void ) __attribute__ ( ( naked ) );
void vPortYield( void )
{
	portSAVE_CONTEXT();
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	f8 94       	cli
    1474:	0f 92       	push	r0
    1476:	1f 92       	push	r1
    1478:	11 24       	eor	r1, r1
    147a:	2f 92       	push	r2
    147c:	3f 92       	push	r3
    147e:	4f 92       	push	r4
    1480:	5f 92       	push	r5
    1482:	6f 92       	push	r6
    1484:	7f 92       	push	r7
    1486:	8f 92       	push	r8
    1488:	9f 92       	push	r9
    148a:	af 92       	push	r10
    148c:	bf 92       	push	r11
    148e:	cf 92       	push	r12
    1490:	df 92       	push	r13
    1492:	ef 92       	push	r14
    1494:	ff 92       	push	r15
    1496:	0f 93       	push	r16
    1498:	1f 93       	push	r17
    149a:	2f 93       	push	r18
    149c:	3f 93       	push	r19
    149e:	4f 93       	push	r20
    14a0:	5f 93       	push	r21
    14a2:	6f 93       	push	r22
    14a4:	7f 93       	push	r23
    14a6:	8f 93       	push	r24
    14a8:	9f 93       	push	r25
    14aa:	af 93       	push	r26
    14ac:	bf 93       	push	r27
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	ef 93       	push	r30
    14b4:	ff 93       	push	r31
    14b6:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    14ba:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    14be:	0d b6       	in	r0, 0x3d	; 61
    14c0:	0d 92       	st	X+, r0
    14c2:	0e b6       	in	r0, 0x3e	; 62
    14c4:	0d 92       	st	X+, r0
	vTaskSwitchContext();
    14c6:	0e 94 33 17 	call	0x2e66	; 0x2e66 <vTaskSwitchContext>
	portRESTORE_CONTEXT();
    14ca:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    14ce:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    14d2:	cd 91       	ld	r28, X+
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	dd 91       	ld	r29, X+
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	ff 91       	pop	r31
    14dc:	ef 91       	pop	r30
    14de:	df 91       	pop	r29
    14e0:	cf 91       	pop	r28
    14e2:	bf 91       	pop	r27
    14e4:	af 91       	pop	r26
    14e6:	9f 91       	pop	r25
    14e8:	8f 91       	pop	r24
    14ea:	7f 91       	pop	r23
    14ec:	6f 91       	pop	r22
    14ee:	5f 91       	pop	r21
    14f0:	4f 91       	pop	r20
    14f2:	3f 91       	pop	r19
    14f4:	2f 91       	pop	r18
    14f6:	1f 91       	pop	r17
    14f8:	0f 91       	pop	r16
    14fa:	ff 90       	pop	r15
    14fc:	ef 90       	pop	r14
    14fe:	df 90       	pop	r13
    1500:	cf 90       	pop	r12
    1502:	bf 90       	pop	r11
    1504:	af 90       	pop	r10
    1506:	9f 90       	pop	r9
    1508:	8f 90       	pop	r8
    150a:	7f 90       	pop	r7
    150c:	6f 90       	pop	r6
    150e:	5f 90       	pop	r5
    1510:	4f 90       	pop	r4
    1512:	3f 90       	pop	r3
    1514:	2f 90       	pop	r2
    1516:	1f 90       	pop	r1
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0

	asm volatile ( "ret" );
    151e:	08 95       	ret

00001520 <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( naked ) );
void vPortYieldFromTick( void )
{
	portSAVE_CONTEXT();
    1520:	0f 92       	push	r0
    1522:	0f b6       	in	r0, 0x3f	; 63
    1524:	f8 94       	cli
    1526:	0f 92       	push	r0
    1528:	1f 92       	push	r1
    152a:	11 24       	eor	r1, r1
    152c:	2f 92       	push	r2
    152e:	3f 92       	push	r3
    1530:	4f 92       	push	r4
    1532:	5f 92       	push	r5
    1534:	6f 92       	push	r6
    1536:	7f 92       	push	r7
    1538:	8f 92       	push	r8
    153a:	9f 92       	push	r9
    153c:	af 92       	push	r10
    153e:	bf 92       	push	r11
    1540:	cf 92       	push	r12
    1542:	df 92       	push	r13
    1544:	ef 92       	push	r14
    1546:	ff 92       	push	r15
    1548:	0f 93       	push	r16
    154a:	1f 93       	push	r17
    154c:	2f 93       	push	r18
    154e:	3f 93       	push	r19
    1550:	4f 93       	push	r20
    1552:	5f 93       	push	r21
    1554:	6f 93       	push	r22
    1556:	7f 93       	push	r23
    1558:	8f 93       	push	r24
    155a:	9f 93       	push	r25
    155c:	af 93       	push	r26
    155e:	bf 93       	push	r27
    1560:	cf 93       	push	r28
    1562:	df 93       	push	r29
    1564:	ef 93       	push	r30
    1566:	ff 93       	push	r31
    1568:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    156c:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    1570:	0d b6       	in	r0, 0x3d	; 61
    1572:	0d 92       	st	X+, r0
    1574:	0e b6       	in	r0, 0x3e	; 62
    1576:	0d 92       	st	X+, r0
	if( xTaskIncrementTick() != pdFALSE )
    1578:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskIncrementTick>
    157c:	88 23       	and	r24, r24
    157e:	11 f0       	breq	.+4      	; 0x1584 <vPortYieldFromTick+0x64>
	{
		vTaskSwitchContext();
    1580:	0e 94 33 17 	call	0x2e66	; 0x2e66 <vTaskSwitchContext>
	}
	portRESTORE_CONTEXT();
    1584:	a0 91 7a 05 	lds	r26, 0x057A	; 0x80057a <pxCurrentTCB>
    1588:	b0 91 7b 05 	lds	r27, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    158c:	cd 91       	ld	r28, X+
    158e:	cd bf       	out	0x3d, r28	; 61
    1590:	dd 91       	ld	r29, X+
    1592:	de bf       	out	0x3e, r29	; 62
    1594:	ff 91       	pop	r31
    1596:	ef 91       	pop	r30
    1598:	df 91       	pop	r29
    159a:	cf 91       	pop	r28
    159c:	bf 91       	pop	r27
    159e:	af 91       	pop	r26
    15a0:	9f 91       	pop	r25
    15a2:	8f 91       	pop	r24
    15a4:	7f 91       	pop	r23
    15a6:	6f 91       	pop	r22
    15a8:	5f 91       	pop	r21
    15aa:	4f 91       	pop	r20
    15ac:	3f 91       	pop	r19
    15ae:	2f 91       	pop	r18
    15b0:	1f 91       	pop	r17
    15b2:	0f 91       	pop	r16
    15b4:	ff 90       	pop	r15
    15b6:	ef 90       	pop	r14
    15b8:	df 90       	pop	r13
    15ba:	cf 90       	pop	r12
    15bc:	bf 90       	pop	r11
    15be:	af 90       	pop	r10
    15c0:	9f 90       	pop	r9
    15c2:	8f 90       	pop	r8
    15c4:	7f 90       	pop	r7
    15c6:	6f 90       	pop	r6
    15c8:	5f 90       	pop	r5
    15ca:	4f 90       	pop	r4
    15cc:	3f 90       	pop	r3
    15ce:	2f 90       	pop	r2
    15d0:	1f 90       	pop	r1
    15d2:	0f 90       	pop	r0
    15d4:	0f be       	out	0x3f, r0	; 63
    15d6:	0f 90       	pop	r0

	asm volatile ( "ret" );
    15d8:	08 95       	ret

000015da <prvSetupTimerInterrupt>:

/*
 * Setup timer 1 compare match A to generate a tick interrupt.
 */
static void prvSetupTimerInterrupt( void )
{
    15da:	cf 93       	push	r28
    15dc:	df 93       	push	r29
    15de:	00 d0       	rcall	.+0      	; 0x15e0 <prvSetupTimerInterrupt+0x6>
    15e0:	00 d0       	rcall	.+0      	; 0x15e2 <prvSetupTimerInterrupt+0x8>
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <prvSetupTimerInterrupt+0xa>
    15e4:	cd b7       	in	r28, 0x3d	; 61
    15e6:	de b7       	in	r29, 0x3e	; 62
uint8_t ucHighByte, ucLowByte;

	/* Using 16bit timer 1 to generate the tick.  Correct fuses must be
	selected for the configCPU_CLOCK_HZ clock. */

	ulCompareMatch = configCPU_CLOCK_HZ / configTICK_RATE_HZ;
    15e8:	89 e9       	ldi	r24, 0x99	; 153
    15ea:	99 e3       	ldi	r25, 0x39	; 57
    15ec:	a0 e0       	ldi	r26, 0x00	; 0
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	89 83       	std	Y+1, r24	; 0x01
    15f2:	9a 83       	std	Y+2, r25	; 0x02
    15f4:	ab 83       	std	Y+3, r26	; 0x03
    15f6:	bc 83       	std	Y+4, r27	; 0x04

	/* We only have 16 bits so have to scale to get our required tick rate. */
	ulCompareMatch /= portCLOCK_PRESCALER;
    15f8:	89 81       	ldd	r24, Y+1	; 0x01
    15fa:	9a 81       	ldd	r25, Y+2	; 0x02
    15fc:	ab 81       	ldd	r26, Y+3	; 0x03
    15fe:	bc 81       	ldd	r27, Y+4	; 0x04
    1600:	68 94       	set
    1602:	15 f8       	bld	r1, 5
    1604:	b6 95       	lsr	r27
    1606:	a7 95       	ror	r26
    1608:	97 95       	ror	r25
    160a:	87 95       	ror	r24
    160c:	16 94       	lsr	r1
    160e:	d1 f7       	brne	.-12     	; 0x1604 <prvSetupTimerInterrupt+0x2a>
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	9a 83       	std	Y+2, r25	; 0x02
    1614:	ab 83       	std	Y+3, r26	; 0x03
    1616:	bc 83       	std	Y+4, r27	; 0x04

	/* Adjust for correct value. */
	ulCompareMatch -= ( uint32_t ) 1;
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	9a 81       	ldd	r25, Y+2	; 0x02
    161c:	ab 81       	ldd	r26, Y+3	; 0x03
    161e:	bc 81       	ldd	r27, Y+4	; 0x04
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	a1 09       	sbc	r26, r1
    1624:	b1 09       	sbc	r27, r1
    1626:	89 83       	std	Y+1, r24	; 0x01
    1628:	9a 83       	std	Y+2, r25	; 0x02
    162a:	ab 83       	std	Y+3, r26	; 0x03
    162c:	bc 83       	std	Y+4, r27	; 0x04

	/* Setup compare match value for compare match A.  Interrupts are disabled 
	before this is called so we need not worry here. */
	ucLowByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	8d 83       	std	Y+5, r24	; 0x05
	ulCompareMatch >>= 8;
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	9a 81       	ldd	r25, Y+2	; 0x02
    1636:	ab 81       	ldd	r26, Y+3	; 0x03
    1638:	bc 81       	ldd	r27, Y+4	; 0x04
    163a:	89 2f       	mov	r24, r25
    163c:	9a 2f       	mov	r25, r26
    163e:	ab 2f       	mov	r26, r27
    1640:	bb 27       	eor	r27, r27
    1642:	89 83       	std	Y+1, r24	; 0x01
    1644:	9a 83       	std	Y+2, r25	; 0x02
    1646:	ab 83       	std	Y+3, r26	; 0x03
    1648:	bc 83       	std	Y+4, r27	; 0x04
	ucHighByte = ( uint8_t ) ( ulCompareMatch & ( uint32_t ) 0xff );
    164a:	89 81       	ldd	r24, Y+1	; 0x01
    164c:	8e 83       	std	Y+6, r24	; 0x06
	OCR1AH = ucHighByte;
    164e:	89 e8       	ldi	r24, 0x89	; 137
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	2e 81       	ldd	r18, Y+6	; 0x06
    1654:	fc 01       	movw	r30, r24
    1656:	20 83       	st	Z, r18
	OCR1AL = ucLowByte;
    1658:	88 e8       	ldi	r24, 0x88	; 136
    165a:	90 e0       	ldi	r25, 0x00	; 0
    165c:	2d 81       	ldd	r18, Y+5	; 0x05
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18

	/* Setup clock source and compare match behaviour. */
	ucLowByte = portCLEAR_COUNTER_ON_MATCH | portPRESCALE_64;
    1662:	8b e0       	ldi	r24, 0x0B	; 11
    1664:	8d 83       	std	Y+5, r24	; 0x05
	TCCR1B = ucLowByte;
    1666:	81 e8       	ldi	r24, 0x81	; 129
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	2d 81       	ldd	r18, Y+5	; 0x05
    166c:	fc 01       	movw	r30, r24
    166e:	20 83       	st	Z, r18

	/* Enable the interrupt - this is okay as interrupt are currently globally
	disabled. */
	ucLowByte = TIMSK1;
    1670:	8f e6       	ldi	r24, 0x6F	; 111
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	8d 83       	std	Y+5, r24	; 0x05
	ucLowByte |= portCOMPARE_MATCH_A_INTERRUPT_ENABLE;
    167a:	8d 81       	ldd	r24, Y+5	; 0x05
    167c:	82 60       	ori	r24, 0x02	; 2
    167e:	8d 83       	std	Y+5, r24	; 0x05
	TIMSK1 = ucLowByte;
    1680:	8f e6       	ldi	r24, 0x6F	; 111
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	2d 81       	ldd	r18, Y+5	; 0x05
    1686:	fc 01       	movw	r30, r24
    1688:	20 83       	st	Z, r18
}
    168a:	26 96       	adiw	r28, 0x06	; 6
    168c:	0f b6       	in	r0, 0x3f	; 63
    168e:	f8 94       	cli
    1690:	de bf       	out	0x3e, r29	; 62
    1692:	0f be       	out	0x3f, r0	; 63
    1694:	cd bf       	out	0x3d, r28	; 61
    1696:	df 91       	pop	r29
    1698:	cf 91       	pop	r28
    169a:	08 95       	ret

0000169c <__vector_13>:
	 */
// 	void SIG_OUTPUT_COMPARE1A( void ) __attribute__ ( ( signal, naked ) );
// 	void SIG_OUTPUT_COMPARE1A( void )
ISR(TIMER1_COMPA_vect, ISR_NAKED)  // IHA
	{
		vPortYieldFromTick();
    169c:	0e 94 90 0a 	call	0x1520	; 0x1520 <vPortYieldFromTick>
		asm volatile ( "reti" );
    16a0:	18 95       	reti

000016a2 <pvPortMalloc>:
static size_t xNextFreeByte = ( size_t ) 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
    16a2:	cf 93       	push	r28
    16a4:	df 93       	push	r29
    16a6:	00 d0       	rcall	.+0      	; 0x16a8 <pvPortMalloc+0x6>
    16a8:	00 d0       	rcall	.+0      	; 0x16aa <pvPortMalloc+0x8>
    16aa:	cd b7       	in	r28, 0x3d	; 61
    16ac:	de b7       	in	r29, 0x3e	; 62
    16ae:	9c 83       	std	Y+4, r25	; 0x04
    16b0:	8b 83       	std	Y+3, r24	; 0x03
void *pvReturn = NULL;
    16b2:	1a 82       	std	Y+2, r1	; 0x02
    16b4:	19 82       	std	Y+1, r1	; 0x01
			xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
		}
	}
	#endif

	vTaskSuspendAll();
    16b6:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vTaskSuspendAll>
	{
		if( pucAlignedHeap == NULL )
    16ba:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <pucAlignedHeap.1965>
    16be:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <pucAlignedHeap.1965+0x1>
    16c2:	89 2b       	or	r24, r25
    16c4:	31 f4       	brne	.+12     	; 0x16d2 <pvPortMalloc+0x30>
		{
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
    16c6:	8b e8       	ldi	r24, 0x8B	; 139
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <pucAlignedHeap.1965+0x1>
    16ce:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <pucAlignedHeap.1965>
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    16d2:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    16d6:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    16da:	8b 81       	ldd	r24, Y+3	; 0x03
    16dc:	9c 81       	ldd	r25, Y+4	; 0x04
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	87 3e       	cpi	r24, 0xE7	; 231
    16e4:	93 40       	sbci	r25, 0x03	; 3
    16e6:	38 f5       	brcc	.+78     	; 0x1736 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
    16e8:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    16ec:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    16f0:	8b 81       	ldd	r24, Y+3	; 0x03
    16f2:	9c 81       	ldd	r25, Y+4	; 0x04
    16f4:	28 0f       	add	r18, r24
    16f6:	39 1f       	adc	r19, r25
    16f8:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNextFreeByte>
    16fc:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <xNextFreeByte+0x1>
			/* Ensure the heap starts on a correctly aligned boundary. */
			pucAlignedHeap = ( uint8_t * ) ( ( ( portPOINTER_SIZE_TYPE ) &ucHeap[ portBYTE_ALIGNMENT ] ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
		}

		/* Check there is enough room left for the allocation. */
		if( ( ( xNextFreeByte + xWantedSize ) < configADJUSTED_HEAP_SIZE ) &&
    1700:	82 17       	cp	r24, r18
    1702:	93 07       	cpc	r25, r19
    1704:	c0 f4       	brcc	.+48     	; 0x1736 <pvPortMalloc+0x94>
			( ( xNextFreeByte + xWantedSize ) > xNextFreeByte )	)/* Check for overflow. */
		{
			/* Return the next free byte then increment the index past this
			block. */
			pvReturn = pucAlignedHeap + xNextFreeByte;
    1706:	20 91 74 05 	lds	r18, 0x0574	; 0x800574 <pucAlignedHeap.1965>
    170a:	30 91 75 05 	lds	r19, 0x0575	; 0x800575 <pucAlignedHeap.1965+0x1>
    170e:	80 91 72 05 	lds	r24, 0x0572	; 0x800572 <xNextFreeByte>
    1712:	90 91 73 05 	lds	r25, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    1716:	82 0f       	add	r24, r18
    1718:	93 1f       	adc	r25, r19
    171a:	9a 83       	std	Y+2, r25	; 0x02
    171c:	89 83       	std	Y+1, r24	; 0x01
			xNextFreeByte += xWantedSize;
    171e:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <xNextFreeByte>
    1722:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <xNextFreeByte+0x1>
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	9c 81       	ldd	r25, Y+4	; 0x04
    172a:	82 0f       	add	r24, r18
    172c:	93 1f       	adc	r25, r19
    172e:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <xNextFreeByte+0x1>
    1732:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <xNextFreeByte>
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
    1736:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
    173a:	89 81       	ldd	r24, Y+1	; 0x01
    173c:	9a 81       	ldd	r25, Y+2	; 0x02
}
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	df 91       	pop	r29
    1748:	cf 91       	pop	r28
    174a:	08 95       	ret

0000174c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
    174c:	cf 93       	push	r28
    174e:	df 93       	push	r29
    1750:	00 d0       	rcall	.+0      	; 0x1752 <vPortFree+0x6>
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	9a 83       	std	Y+2, r25	; 0x02
    1758:	89 83       	std	Y+1, r24	; 0x01
	http://www.FreeRTOS.org for more information. */
	( void ) pv;

	/* Force an assert as it is invalid to call this function. */
	configASSERT( pv == NULL );
}
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	df 91       	pop	r29
    1760:	cf 91       	pop	r28
    1762:	08 95       	ret

00001764 <serial_new_instance>:
	for (uint8_t i = 0; i < len; i++) {
		buffer_put_item(handle->_tx_buf, buf[i]);
	}
	_serial_tx_int_on(handle->ser_UDR);
	return BUFFER_OK;
}
    1764:	8f 92       	push	r8
    1766:	9f 92       	push	r9
    1768:	af 92       	push	r10
    176a:	bf 92       	push	r11
    176c:	cf 92       	push	r12
    176e:	df 92       	push	r13
    1770:	ef 92       	push	r14
    1772:	0f 93       	push	r16
    1774:	1f 93       	push	r17
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	cd b7       	in	r28, 0x3d	; 61
    177c:	de b7       	in	r29, 0x3e	; 62
    177e:	65 97       	sbiw	r28, 0x15	; 21
    1780:	0f b6       	in	r0, 0x3f	; 63
    1782:	f8 94       	cli
    1784:	de bf       	out	0x3e, r29	; 62
    1786:	0f be       	out	0x3f, r0	; 63
    1788:	cd bf       	out	0x3d, r28	; 61
    178a:	8c 83       	std	Y+4, r24	; 0x04
    178c:	4d 83       	std	Y+5, r20	; 0x05
    178e:	5e 83       	std	Y+6, r21	; 0x06
    1790:	6f 83       	std	Y+7, r22	; 0x07
    1792:	78 87       	std	Y+8, r23	; 0x08
    1794:	29 87       	std	Y+9, r18	; 0x09
    1796:	0a 87       	std	Y+10, r16	; 0x0a
    1798:	eb 86       	std	Y+11, r14	; 0x0b
    179a:	dd 86       	std	Y+13, r13	; 0x0d
    179c:	cc 86       	std	Y+12, r12	; 0x0c
    179e:	bf 86       	std	Y+15, r11	; 0x0f
    17a0:	ae 86       	std	Y+14, r10	; 0x0e
    17a2:	99 8a       	std	Y+17, r9	; 0x11
    17a4:	88 8a       	std	Y+16, r8	; 0x10
    17a6:	88 e0       	ldi	r24, 0x08	; 8
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	0e 94 8d 1b 	call	0x371a	; 0x371a <malloc>
    17ae:	9a 83       	std	Y+2, r25	; 0x02
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	8c 81       	ldd	r24, Y+4	; 0x04
    17b4:	88 2f       	mov	r24, r24
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	8a 58       	subi	r24, 0x8A	; 138
    17be:	9a 4f       	sbci	r25, 0xFA	; 250
    17c0:	29 81       	ldd	r18, Y+1	; 0x01
    17c2:	3a 81       	ldd	r19, Y+2	; 0x02
    17c4:	fc 01       	movw	r30, r24
    17c6:	31 83       	std	Z+1, r19	; 0x01
    17c8:	20 83       	st	Z, r18
    17ca:	8c 81       	ldd	r24, Y+4	; 0x04
    17cc:	88 2f       	mov	r24, r24
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	88 5d       	subi	r24, 0xD8	; 216
    17d6:	9e 4f       	sbci	r25, 0xFE	; 254
    17d8:	fc 01       	movw	r30, r24
    17da:	20 81       	ld	r18, Z
    17dc:	31 81       	ldd	r19, Z+1	; 0x01
    17de:	89 81       	ldd	r24, Y+1	; 0x01
    17e0:	9a 81       	ldd	r25, Y+2	; 0x02
    17e2:	fc 01       	movw	r30, r24
    17e4:	31 83       	std	Z+1, r19	; 0x01
    17e6:	20 83       	st	Z, r18
    17e8:	89 81       	ldd	r24, Y+1	; 0x01
    17ea:	9a 81       	ldd	r25, Y+2	; 0x02
    17ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    17ee:	3f 85       	ldd	r19, Y+15	; 0x0f
    17f0:	fc 01       	movw	r30, r24
    17f2:	33 83       	std	Z+3, r19	; 0x03
    17f4:	22 83       	std	Z+2, r18	; 0x02
    17f6:	89 81       	ldd	r24, Y+1	; 0x01
    17f8:	9a 81       	ldd	r25, Y+2	; 0x02
    17fa:	2c 85       	ldd	r18, Y+12	; 0x0c
    17fc:	3d 85       	ldd	r19, Y+13	; 0x0d
    17fe:	fc 01       	movw	r30, r24
    1800:	35 83       	std	Z+5, r19	; 0x05
    1802:	24 83       	std	Z+4, r18	; 0x04
    1804:	89 81       	ldd	r24, Y+1	; 0x01
    1806:	9a 81       	ldd	r25, Y+2	; 0x02
    1808:	28 89       	ldd	r18, Y+16	; 0x10
    180a:	39 89       	ldd	r19, Y+17	; 0x11
    180c:	fc 01       	movw	r30, r24
    180e:	37 83       	std	Z+7, r19	; 0x07
    1810:	26 83       	std	Z+6, r18	; 0x06
    1812:	8f e5       	ldi	r24, 0x5F	; 95
    1814:	90 e0       	ldi	r25, 0x00	; 0
    1816:	fc 01       	movw	r30, r24
    1818:	80 81       	ld	r24, Z
    181a:	8b 83       	std	Y+3, r24	; 0x03
    181c:	f8 94       	cli
    181e:	89 81       	ldd	r24, Y+1	; 0x01
    1820:	9a 81       	ldd	r25, Y+2	; 0x02
    1822:	fc 01       	movw	r30, r24
    1824:	80 81       	ld	r24, Z
    1826:	91 81       	ldd	r25, Z+1	; 0x01
    1828:	06 97       	sbiw	r24, 0x06	; 6
    182a:	29 81       	ldd	r18, Y+1	; 0x01
    182c:	3a 81       	ldd	r19, Y+2	; 0x02
    182e:	f9 01       	movw	r30, r18
    1830:	20 81       	ld	r18, Z
    1832:	31 81       	ldd	r19, Z+1	; 0x01
    1834:	26 50       	subi	r18, 0x06	; 6
    1836:	31 09       	sbc	r19, r1
    1838:	f9 01       	movw	r30, r18
    183a:	20 81       	ld	r18, Z
    183c:	22 60       	ori	r18, 0x02	; 2
    183e:	fc 01       	movw	r30, r24
    1840:	20 83       	st	Z, r18
    1842:	89 81       	ldd	r24, Y+1	; 0x01
    1844:	9a 81       	ldd	r25, Y+2	; 0x02
    1846:	fc 01       	movw	r30, r24
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	8c 01       	movw	r16, r24
    184e:	02 50       	subi	r16, 0x02	; 2
    1850:	11 09       	sbc	r17, r1
    1852:	8d 81       	ldd	r24, Y+5	; 0x05
    1854:	9e 81       	ldd	r25, Y+6	; 0x06
    1856:	af 81       	ldd	r26, Y+7	; 0x07
    1858:	b8 85       	ldd	r27, Y+8	; 0x08
    185a:	88 0f       	add	r24, r24
    185c:	99 1f       	adc	r25, r25
    185e:	aa 1f       	adc	r26, r26
    1860:	bb 1f       	adc	r27, r27
    1862:	88 0f       	add	r24, r24
    1864:	99 1f       	adc	r25, r25
    1866:	aa 1f       	adc	r26, r26
    1868:	bb 1f       	adc	r27, r27
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	aa 1f       	adc	r26, r26
    1870:	bb 1f       	adc	r27, r27
    1872:	9c 01       	movw	r18, r24
    1874:	ad 01       	movw	r20, r26
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	a1 ee       	ldi	r26, 0xE1	; 225
    187c:	b0 e0       	ldi	r27, 0x00	; 0
    187e:	bc 01       	movw	r22, r24
    1880:	cd 01       	movw	r24, r26
    1882:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__udivmodsi4>
    1886:	da 01       	movw	r26, r20
    1888:	c9 01       	movw	r24, r18
    188a:	81 50       	subi	r24, 0x01	; 1
    188c:	f8 01       	movw	r30, r16
    188e:	80 83       	st	Z, r24
    1890:	89 81       	ldd	r24, Y+1	; 0x01
    1892:	9a 81       	ldd	r25, Y+2	; 0x02
    1894:	fc 01       	movw	r30, r24
    1896:	80 81       	ld	r24, Z
    1898:	91 81       	ldd	r25, Z+1	; 0x01
    189a:	05 97       	sbiw	r24, 0x05	; 5
    189c:	28 e9       	ldi	r18, 0x98	; 152
    189e:	fc 01       	movw	r30, r24
    18a0:	20 83       	st	Z, r18
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	9a 81       	ldd	r25, Y+2	; 0x02
    18a6:	fc 01       	movw	r30, r24
    18a8:	80 81       	ld	r24, Z
    18aa:	91 81       	ldd	r25, Z+1	; 0x01
    18ac:	04 97       	sbiw	r24, 0x04	; 4
    18ae:	26 e0       	ldi	r18, 0x06	; 6
    18b0:	fc 01       	movw	r30, r24
    18b2:	20 83       	st	Z, r18
    18b4:	8f e5       	ldi	r24, 0x5F	; 95
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	2b 81       	ldd	r18, Y+3	; 0x03
    18ba:	fc 01       	movw	r30, r24
    18bc:	20 83       	st	Z, r18
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	9a 81       	ldd	r25, Y+2	; 0x02
    18c2:	65 96       	adiw	r28, 0x15	; 21
    18c4:	0f b6       	in	r0, 0x3f	; 63
    18c6:	f8 94       	cli
    18c8:	de bf       	out	0x3e, r29	; 62
    18ca:	0f be       	out	0x3f, r0	; 63
    18cc:	cd bf       	out	0x3d, r28	; 61
    18ce:	df 91       	pop	r29
    18d0:	cf 91       	pop	r28
    18d2:	1f 91       	pop	r17
    18d4:	0f 91       	pop	r16
    18d6:	ef 90       	pop	r14
    18d8:	df 90       	pop	r13
    18da:	cf 90       	pop	r12
    18dc:	bf 90       	pop	r11
    18de:	af 90       	pop	r10
    18e0:	9f 90       	pop	r9
    18e2:	8f 90       	pop	r8
    18e4:	08 95       	ret

000018e6 <__vector_20>:

/*-----------------------------------------------------------*/
ISR(USART0_RX_vect)
{
    18e6:	1f 92       	push	r1
    18e8:	0f 92       	push	r0
    18ea:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    18ee:	0f 92       	push	r0
    18f0:	11 24       	eor	r1, r1
    18f2:	2f 93       	push	r18
    18f4:	3f 93       	push	r19
    18f6:	4f 93       	push	r20
    18f8:	5f 93       	push	r21
    18fa:	6f 93       	push	r22
    18fc:	7f 93       	push	r23
    18fe:	8f 93       	push	r24
    1900:	9f 93       	push	r25
    1902:	af 93       	push	r26
    1904:	bf 93       	push	r27
    1906:	ef 93       	push	r30
    1908:	ff 93       	push	r31
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	1f 92       	push	r1
    1910:	cd b7       	in	r28, 0x3d	; 61
    1912:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    1914:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1918:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    191c:	89 2b       	or	r24, r25
    191e:	31 f1       	breq	.+76     	; 0x196c <__vector_20+0x86>
		item = UDR0;
    1920:	86 ec       	ldi	r24, 0xC6	; 198
    1922:	90 e0       	ldi	r25, 0x00	; 0
    1924:	fc 01       	movw	r30, r24
    1926:	80 81       	ld	r24, Z
    1928:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART0]->_rx_buf, item);
    192a:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    192e:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1932:	fc 01       	movw	r30, r24
    1934:	84 81       	ldd	r24, Z+4	; 0x04
    1936:	95 81       	ldd	r25, Z+5	; 0x05
    1938:	69 81       	ldd	r22, Y+1	; 0x01
    193a:	0e 94 b4 06 	call	0xd68	; 0xd68 <buffer_put_item>
		
		if (_ser_handle[ser_USART0]->_call_back) {
    193e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1942:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1946:	fc 01       	movw	r30, r24
    1948:	86 81       	ldd	r24, Z+6	; 0x06
    194a:	97 81       	ldd	r25, Z+7	; 0x07
    194c:	89 2b       	or	r24, r25
    194e:	71 f0       	breq	.+28     	; 0x196c <__vector_20+0x86>
			_ser_handle[ser_USART0]->_call_back(_ser_handle[ser_USART0], item);
    1950:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1954:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1958:	fc 01       	movw	r30, r24
    195a:	26 81       	ldd	r18, Z+6	; 0x06
    195c:	37 81       	ldd	r19, Z+7	; 0x07
    195e:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    1962:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    1966:	69 81       	ldd	r22, Y+1	; 0x01
    1968:	f9 01       	movw	r30, r18
    196a:	09 95       	icall
		}
	}
}
    196c:	0f 90       	pop	r0
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	ff 91       	pop	r31
    1974:	ef 91       	pop	r30
    1976:	bf 91       	pop	r27
    1978:	af 91       	pop	r26
    197a:	9f 91       	pop	r25
    197c:	8f 91       	pop	r24
    197e:	7f 91       	pop	r23
    1980:	6f 91       	pop	r22
    1982:	5f 91       	pop	r21
    1984:	4f 91       	pop	r20
    1986:	3f 91       	pop	r19
    1988:	2f 91       	pop	r18
    198a:	0f 90       	pop	r0
    198c:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1990:	0f 90       	pop	r0
    1992:	1f 90       	pop	r1
    1994:	18 95       	reti

00001996 <__vector_21>:

/*-----------------------------------------------------------*/
ISR(USART0_UDRE_vect)
{
    1996:	1f 92       	push	r1
    1998:	0f 92       	push	r0
    199a:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    199e:	0f 92       	push	r0
    19a0:	11 24       	eor	r1, r1
    19a2:	2f 93       	push	r18
    19a4:	3f 93       	push	r19
    19a6:	4f 93       	push	r20
    19a8:	5f 93       	push	r21
    19aa:	6f 93       	push	r22
    19ac:	7f 93       	push	r23
    19ae:	8f 93       	push	r24
    19b0:	9f 93       	push	r25
    19b2:	af 93       	push	r26
    19b4:	bf 93       	push	r27
    19b6:	ef 93       	push	r30
    19b8:	ff 93       	push	r31
    19ba:	cf 93       	push	r28
    19bc:	df 93       	push	r29
    19be:	1f 92       	push	r1
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART0]) {
    19c4:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    19c8:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    19cc:	89 2b       	or	r24, r25
    19ce:	f9 f0       	breq	.+62     	; 0x1a0e <__vector_21+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART0]->_tx_buf, &item) == BUFFER_OK)) {
    19d0:	80 91 76 05 	lds	r24, 0x0576	; 0x800576 <_ser_handle>
    19d4:	90 91 77 05 	lds	r25, 0x0577	; 0x800577 <_ser_handle+0x1>
    19d8:	fc 01       	movw	r30, r24
    19da:	82 81       	ldd	r24, Z+2	; 0x02
    19dc:	93 81       	ldd	r25, Z+3	; 0x03
    19de:	9e 01       	movw	r18, r28
    19e0:	2f 5f       	subi	r18, 0xFF	; 255
    19e2:	3f 4f       	sbci	r19, 0xFF	; 255
    19e4:	b9 01       	movw	r22, r18
    19e6:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <buffer_get_item>
    19ea:	88 23       	and	r24, r24
    19ec:	31 f4       	brne	.+12     	; 0x19fa <__vector_21+0x64>
			UDR0 = item;
    19ee:	86 ec       	ldi	r24, 0xC6	; 198
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	29 81       	ldd	r18, Y+1	; 0x01
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
    19f8:	13 c0       	rjmp	.+38     	; 0x1a20 <__vector_21+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR0B);
    19fa:	81 ec       	ldi	r24, 0xC1	; 193
    19fc:	90 e0       	ldi	r25, 0x00	; 0
    19fe:	21 ec       	ldi	r18, 0xC1	; 193
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	f9 01       	movw	r30, r18
    1a04:	20 81       	ld	r18, Z
    1a06:	2f 7d       	andi	r18, 0xDF	; 223
    1a08:	fc 01       	movw	r30, r24
    1a0a:	20 83       	st	Z, r18
    1a0c:	09 c0       	rjmp	.+18     	; 0x1a20 <__vector_21+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR0B);
    1a0e:	81 ec       	ldi	r24, 0xC1	; 193
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	21 ec       	ldi	r18, 0xC1	; 193
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	f9 01       	movw	r30, r18
    1a18:	20 81       	ld	r18, Z
    1a1a:	2f 7d       	andi	r18, 0xDF	; 223
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	20 83       	st	Z, r18
	}
}
    1a20:	0f 90       	pop	r0
    1a22:	df 91       	pop	r29
    1a24:	cf 91       	pop	r28
    1a26:	ff 91       	pop	r31
    1a28:	ef 91       	pop	r30
    1a2a:	bf 91       	pop	r27
    1a2c:	af 91       	pop	r26
    1a2e:	9f 91       	pop	r25
    1a30:	8f 91       	pop	r24
    1a32:	7f 91       	pop	r23
    1a34:	6f 91       	pop	r22
    1a36:	5f 91       	pop	r21
    1a38:	4f 91       	pop	r20
    1a3a:	3f 91       	pop	r19
    1a3c:	2f 91       	pop	r18
    1a3e:	0f 90       	pop	r0
    1a40:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <__vector_28>:

/*-----------------------------------------------------------*/
ISR(USART1_RX_vect)
{
    1a4a:	1f 92       	push	r1
    1a4c:	0f 92       	push	r0
    1a4e:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1a52:	0f 92       	push	r0
    1a54:	11 24       	eor	r1, r1
    1a56:	2f 93       	push	r18
    1a58:	3f 93       	push	r19
    1a5a:	4f 93       	push	r20
    1a5c:	5f 93       	push	r21
    1a5e:	6f 93       	push	r22
    1a60:	7f 93       	push	r23
    1a62:	8f 93       	push	r24
    1a64:	9f 93       	push	r25
    1a66:	af 93       	push	r26
    1a68:	bf 93       	push	r27
    1a6a:	ef 93       	push	r30
    1a6c:	ff 93       	push	r31
    1a6e:	cf 93       	push	r28
    1a70:	df 93       	push	r29
    1a72:	1f 92       	push	r1
    1a74:	cd b7       	in	r28, 0x3d	; 61
    1a76:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1a78:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1a7c:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1a80:	89 2b       	or	r24, r25
    1a82:	31 f1       	breq	.+76     	; 0x1ad0 <__vector_28+0x86>
		item = UDR1;
    1a84:	8e ec       	ldi	r24, 0xCE	; 206
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	fc 01       	movw	r30, r24
    1a8a:	80 81       	ld	r24, Z
    1a8c:	89 83       	std	Y+1, r24	; 0x01
		buffer_put_item(_ser_handle[ser_USART1]->_rx_buf, item);
    1a8e:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1a92:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1a96:	fc 01       	movw	r30, r24
    1a98:	84 81       	ldd	r24, Z+4	; 0x04
    1a9a:	95 81       	ldd	r25, Z+5	; 0x05
    1a9c:	69 81       	ldd	r22, Y+1	; 0x01
    1a9e:	0e 94 b4 06 	call	0xd68	; 0xd68 <buffer_put_item>
		if (_ser_handle[ser_USART1]->_call_back) {
    1aa2:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1aa6:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1aaa:	fc 01       	movw	r30, r24
    1aac:	86 81       	ldd	r24, Z+6	; 0x06
    1aae:	97 81       	ldd	r25, Z+7	; 0x07
    1ab0:	89 2b       	or	r24, r25
    1ab2:	71 f0       	breq	.+28     	; 0x1ad0 <__vector_28+0x86>
			_ser_handle[ser_USART1]->_call_back(_ser_handle[ser_USART1], item);
    1ab4:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1ab8:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1abc:	fc 01       	movw	r30, r24
    1abe:	26 81       	ldd	r18, Z+6	; 0x06
    1ac0:	37 81       	ldd	r19, Z+7	; 0x07
    1ac2:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1ac6:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1aca:	69 81       	ldd	r22, Y+1	; 0x01
    1acc:	f9 01       	movw	r30, r18
    1ace:	09 95       	icall
		}
	}
}
    1ad0:	0f 90       	pop	r0
    1ad2:	df 91       	pop	r29
    1ad4:	cf 91       	pop	r28
    1ad6:	ff 91       	pop	r31
    1ad8:	ef 91       	pop	r30
    1ada:	bf 91       	pop	r27
    1adc:	af 91       	pop	r26
    1ade:	9f 91       	pop	r25
    1ae0:	8f 91       	pop	r24
    1ae2:	7f 91       	pop	r23
    1ae4:	6f 91       	pop	r22
    1ae6:	5f 91       	pop	r21
    1ae8:	4f 91       	pop	r20
    1aea:	3f 91       	pop	r19
    1aec:	2f 91       	pop	r18
    1aee:	0f 90       	pop	r0
    1af0:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1af4:	0f 90       	pop	r0
    1af6:	1f 90       	pop	r1
    1af8:	18 95       	reti

00001afa <__vector_29>:

/*-----------------------------------------------------------*/
ISR(USART1_UDRE_vect)
{
    1afa:	1f 92       	push	r1
    1afc:	0f 92       	push	r0
    1afe:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1b02:	0f 92       	push	r0
    1b04:	11 24       	eor	r1, r1
    1b06:	2f 93       	push	r18
    1b08:	3f 93       	push	r19
    1b0a:	4f 93       	push	r20
    1b0c:	5f 93       	push	r21
    1b0e:	6f 93       	push	r22
    1b10:	7f 93       	push	r23
    1b12:	8f 93       	push	r24
    1b14:	9f 93       	push	r25
    1b16:	af 93       	push	r26
    1b18:	bf 93       	push	r27
    1b1a:	ef 93       	push	r30
    1b1c:	ff 93       	push	r31
    1b1e:	cf 93       	push	r28
    1b20:	df 93       	push	r29
    1b22:	1f 92       	push	r1
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
	uint8_t item;
	if (_ser_handle[ser_USART1]) {
    1b28:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1b2c:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1b30:	89 2b       	or	r24, r25
    1b32:	f9 f0       	breq	.+62     	; 0x1b72 <__vector_29+0x78>
		if ((buffer_get_item(_ser_handle[ser_USART1]->_tx_buf, &item) == BUFFER_OK)) {
    1b34:	80 91 78 05 	lds	r24, 0x0578	; 0x800578 <_ser_handle+0x2>
    1b38:	90 91 79 05 	lds	r25, 0x0579	; 0x800579 <_ser_handle+0x3>
    1b3c:	fc 01       	movw	r30, r24
    1b3e:	82 81       	ldd	r24, Z+2	; 0x02
    1b40:	93 81       	ldd	r25, Z+3	; 0x03
    1b42:	9e 01       	movw	r18, r28
    1b44:	2f 5f       	subi	r18, 0xFF	; 255
    1b46:	3f 4f       	sbci	r19, 0xFF	; 255
    1b48:	b9 01       	movw	r22, r18
    1b4a:	0e 94 6c 06 	call	0xcd8	; 0xcd8 <buffer_get_item>
    1b4e:	88 23       	and	r24, r24
    1b50:	31 f4       	brne	.+12     	; 0x1b5e <__vector_29+0x64>
			UDR1 = item;
    1b52:	8e ec       	ldi	r24, 0xCE	; 206
    1b54:	90 e0       	ldi	r25, 0x00	; 0
    1b56:	29 81       	ldd	r18, Y+1	; 0x01
    1b58:	fc 01       	movw	r30, r24
    1b5a:	20 83       	st	Z, r18
    1b5c:	13 c0       	rjmp	.+38     	; 0x1b84 <__vector_29+0x8a>
		}
		else
		{
			SERIAL_TX_INT_OFF(UCSR1B);
    1b5e:	89 ec       	ldi	r24, 0xC9	; 201
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	29 ec       	ldi	r18, 0xC9	; 201
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	f9 01       	movw	r30, r18
    1b68:	20 81       	ld	r18, Z
    1b6a:	2f 7d       	andi	r18, 0xDF	; 223
    1b6c:	fc 01       	movw	r30, r24
    1b6e:	20 83       	st	Z, r18
    1b70:	09 c0       	rjmp	.+18     	; 0x1b84 <__vector_29+0x8a>
		}
	}
	
	else
	{
		SERIAL_TX_INT_OFF(UCSR1B);
    1b72:	89 ec       	ldi	r24, 0xC9	; 201
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	29 ec       	ldi	r18, 0xC9	; 201
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	f9 01       	movw	r30, r18
    1b7c:	20 81       	ld	r18, Z
    1b7e:	2f 7d       	andi	r18, 0xDF	; 223
    1b80:	fc 01       	movw	r30, r24
    1b82:	20 83       	st	Z, r18
	}
}
    1b84:	0f 90       	pop	r0
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	ff 91       	pop	r31
    1b8c:	ef 91       	pop	r30
    1b8e:	bf 91       	pop	r27
    1b90:	af 91       	pop	r26
    1b92:	9f 91       	pop	r25
    1b94:	8f 91       	pop	r24
    1b96:	7f 91       	pop	r23
    1b98:	6f 91       	pop	r22
    1b9a:	5f 91       	pop	r21
    1b9c:	4f 91       	pop	r20
    1b9e:	3f 91       	pop	r19
    1ba0:	2f 91       	pop	r18
    1ba2:	0f 90       	pop	r0
    1ba4:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
    1ba8:	0f 90       	pop	r0
    1baa:	1f 90       	pop	r1
    1bac:	18 95       	reti

00001bae <xQueueGenericReset>:
	{
		xReturn = pdFALSE;
	}

	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <xQueueGenericReset+0x6>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <xQueueGenericReset+0x8>
    1bb6:	1f 92       	push	r1
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
    1bbc:	9c 83       	std	Y+4, r25	; 0x04
    1bbe:	8b 83       	std	Y+3, r24	; 0x03
    1bc0:	6d 83       	std	Y+5, r22	; 0x05
    1bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc6:	9a 83       	std	Y+2, r25	; 0x02
    1bc8:	89 83       	std	Y+1, r24	; 0x01
    1bca:	0f b6       	in	r0, 0x3f	; 63
    1bcc:	f8 94       	cli
    1bce:	0f 92       	push	r0
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	fc 01       	movw	r30, r24
    1bd6:	80 81       	ld	r24, Z
    1bd8:	91 81       	ldd	r25, Z+1	; 0x01
    1bda:	29 81       	ldd	r18, Y+1	; 0x01
    1bdc:	3a 81       	ldd	r19, Y+2	; 0x02
    1bde:	f9 01       	movw	r30, r18
    1be0:	23 8d       	ldd	r18, Z+27	; 0x1b
    1be2:	42 2f       	mov	r20, r18
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	29 81       	ldd	r18, Y+1	; 0x01
    1be8:	3a 81       	ldd	r19, Y+2	; 0x02
    1bea:	f9 01       	movw	r30, r18
    1bec:	24 8d       	ldd	r18, Z+28	; 0x1c
    1bee:	22 2f       	mov	r18, r18
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	42 9f       	mul	r20, r18
    1bf4:	b0 01       	movw	r22, r0
    1bf6:	43 9f       	mul	r20, r19
    1bf8:	70 0d       	add	r23, r0
    1bfa:	52 9f       	mul	r21, r18
    1bfc:	70 0d       	add	r23, r0
    1bfe:	11 24       	eor	r1, r1
    1c00:	9b 01       	movw	r18, r22
    1c02:	28 0f       	add	r18, r24
    1c04:	39 1f       	adc	r19, r25
    1c06:	89 81       	ldd	r24, Y+1	; 0x01
    1c08:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0a:	fc 01       	movw	r30, r24
    1c0c:	33 83       	std	Z+3, r19	; 0x03
    1c0e:	22 83       	std	Z+2, r18	; 0x02
    1c10:	89 81       	ldd	r24, Y+1	; 0x01
    1c12:	9a 81       	ldd	r25, Y+2	; 0x02
    1c14:	fc 01       	movw	r30, r24
    1c16:	12 8e       	std	Z+26, r1	; 0x1a
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	fc 01       	movw	r30, r24
    1c1e:	20 81       	ld	r18, Z
    1c20:	31 81       	ldd	r19, Z+1	; 0x01
    1c22:	89 81       	ldd	r24, Y+1	; 0x01
    1c24:	9a 81       	ldd	r25, Y+2	; 0x02
    1c26:	fc 01       	movw	r30, r24
    1c28:	35 83       	std	Z+5, r19	; 0x05
    1c2a:	24 83       	std	Z+4, r18	; 0x04
    1c2c:	89 81       	ldd	r24, Y+1	; 0x01
    1c2e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c30:	fc 01       	movw	r30, r24
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	29 81       	ldd	r18, Y+1	; 0x01
    1c38:	3a 81       	ldd	r19, Y+2	; 0x02
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1c3e:	22 2f       	mov	r18, r18
    1c40:	30 e0       	ldi	r19, 0x00	; 0
    1c42:	a9 01       	movw	r20, r18
    1c44:	41 50       	subi	r20, 0x01	; 1
    1c46:	51 09       	sbc	r21, r1
    1c48:	29 81       	ldd	r18, Y+1	; 0x01
    1c4a:	3a 81       	ldd	r19, Y+2	; 0x02
    1c4c:	f9 01       	movw	r30, r18
    1c4e:	24 8d       	ldd	r18, Z+28	; 0x1c
    1c50:	22 2f       	mov	r18, r18
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	42 9f       	mul	r20, r18
    1c56:	b0 01       	movw	r22, r0
    1c58:	43 9f       	mul	r20, r19
    1c5a:	70 0d       	add	r23, r0
    1c5c:	52 9f       	mul	r21, r18
    1c5e:	70 0d       	add	r23, r0
    1c60:	11 24       	eor	r1, r1
    1c62:	9b 01       	movw	r18, r22
    1c64:	28 0f       	add	r18, r24
    1c66:	39 1f       	adc	r19, r25
    1c68:	89 81       	ldd	r24, Y+1	; 0x01
    1c6a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c6c:	fc 01       	movw	r30, r24
    1c6e:	37 83       	std	Z+7, r19	; 0x07
    1c70:	26 83       	std	Z+6, r18	; 0x06
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
    1c74:	9a 81       	ldd	r25, Y+2	; 0x02
    1c76:	2f ef       	ldi	r18, 0xFF	; 255
    1c78:	fc 01       	movw	r30, r24
    1c7a:	25 8f       	std	Z+29, r18	; 0x1d
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c80:	2f ef       	ldi	r18, 0xFF	; 255
    1c82:	fc 01       	movw	r30, r24
    1c84:	26 8f       	std	Z+30, r18	; 0x1e
    1c86:	8d 81       	ldd	r24, Y+5	; 0x05
    1c88:	88 23       	and	r24, r24
    1c8a:	81 f4       	brne	.+32     	; 0x1cac <xQueueGenericReset+0xfe>
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	fc 01       	movw	r30, r24
    1c92:	80 85       	ldd	r24, Z+8	; 0x08
    1c94:	88 23       	and	r24, r24
    1c96:	a1 f0       	breq	.+40     	; 0x1cc0 <xQueueGenericReset+0x112>
    1c98:	89 81       	ldd	r24, Y+1	; 0x01
    1c9a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c9c:	08 96       	adiw	r24, 0x08	; 8
    1c9e:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    1ca2:	88 23       	and	r24, r24
    1ca4:	69 f0       	breq	.+26     	; 0x1cc0 <xQueueGenericReset+0x112>
    1ca6:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    1caa:	0a c0       	rjmp	.+20     	; 0x1cc0 <xQueueGenericReset+0x112>
    1cac:	89 81       	ldd	r24, Y+1	; 0x01
    1cae:	9a 81       	ldd	r25, Y+2	; 0x02
    1cb0:	08 96       	adiw	r24, 0x08	; 8
    1cb2:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    1cb6:	89 81       	ldd	r24, Y+1	; 0x01
    1cb8:	9a 81       	ldd	r25, Y+2	; 0x02
    1cba:	41 96       	adiw	r24, 0x11	; 17
    1cbc:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    1cc0:	0f 90       	pop	r0
    1cc2:	0f be       	out	0x3f, r0	; 63
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	08 95       	ret

00001cd6 <xQueueGenericCreate>:
    1cd6:	0f 93       	push	r16
    1cd8:	1f 93       	push	r17
    1cda:	cf 93       	push	r28
    1cdc:	df 93       	push	r29
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	29 97       	sbiw	r28, 0x09	; 9
    1ce4:	0f b6       	in	r0, 0x3f	; 63
    1ce6:	f8 94       	cli
    1ce8:	de bf       	out	0x3e, r29	; 62
    1cea:	0f be       	out	0x3f, r0	; 63
    1cec:	cd bf       	out	0x3d, r28	; 61
    1cee:	8f 83       	std	Y+7, r24	; 0x07
    1cf0:	68 87       	std	Y+8, r22	; 0x08
    1cf2:	49 87       	std	Y+9, r20	; 0x09
    1cf4:	88 85       	ldd	r24, Y+8	; 0x08
    1cf6:	88 23       	and	r24, r24
    1cf8:	19 f4       	brne	.+6      	; 0x1d00 <xQueueGenericCreate+0x2a>
    1cfa:	1a 82       	std	Y+2, r1	; 0x02
    1cfc:	19 82       	std	Y+1, r1	; 0x01
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <xQueueGenericCreate+0x48>
    1d00:	8f 81       	ldd	r24, Y+7	; 0x07
    1d02:	48 2f       	mov	r20, r24
    1d04:	50 e0       	ldi	r21, 0x00	; 0
    1d06:	88 85       	ldd	r24, Y+8	; 0x08
    1d08:	28 2f       	mov	r18, r24
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	42 9f       	mul	r20, r18
    1d0e:	c0 01       	movw	r24, r0
    1d10:	43 9f       	mul	r20, r19
    1d12:	90 0d       	add	r25, r0
    1d14:	52 9f       	mul	r21, r18
    1d16:	90 0d       	add	r25, r0
    1d18:	11 24       	eor	r1, r1
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
    1d1e:	89 81       	ldd	r24, Y+1	; 0x01
    1d20:	9a 81       	ldd	r25, Y+2	; 0x02
    1d22:	81 96       	adiw	r24, 0x21	; 33
    1d24:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <pvPortMalloc>
    1d28:	9c 83       	std	Y+4, r25	; 0x04
    1d2a:	8b 83       	std	Y+3, r24	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	89 2b       	or	r24, r25
    1d32:	81 f0       	breq	.+32     	; 0x1d54 <xQueueGenericCreate+0x7e>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	81 96       	adiw	r24, 0x21	; 33
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	8d 81       	ldd	r24, Y+5	; 0x05
    1d44:	9e 81       	ldd	r25, Y+6	; 0x06
    1d46:	89 01       	movw	r16, r18
    1d48:	29 85       	ldd	r18, Y+9	; 0x09
    1d4a:	ac 01       	movw	r20, r24
    1d4c:	68 85       	ldd	r22, Y+8	; 0x08
    1d4e:	8f 81       	ldd	r24, Y+7	; 0x07
    1d50:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <prvInitialiseNewQueue>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	29 96       	adiw	r28, 0x09	; 9
    1d5a:	0f b6       	in	r0, 0x3f	; 63
    1d5c:	f8 94       	cli
    1d5e:	de bf       	out	0x3e, r29	; 62
    1d60:	0f be       	out	0x3f, r0	; 63
    1d62:	cd bf       	out	0x3d, r28	; 61
    1d64:	df 91       	pop	r29
    1d66:	cf 91       	pop	r28
    1d68:	1f 91       	pop	r17
    1d6a:	0f 91       	pop	r16
    1d6c:	08 95       	ret

00001d6e <prvInitialiseNewQueue>:
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	cd b7       	in	r28, 0x3d	; 61
    1d78:	de b7       	in	r29, 0x3e	; 62
    1d7a:	27 97       	sbiw	r28, 0x07	; 7
    1d7c:	0f b6       	in	r0, 0x3f	; 63
    1d7e:	f8 94       	cli
    1d80:	de bf       	out	0x3e, r29	; 62
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	cd bf       	out	0x3d, r28	; 61
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	6a 83       	std	Y+2, r22	; 0x02
    1d8a:	5c 83       	std	Y+4, r21	; 0x04
    1d8c:	4b 83       	std	Y+3, r20	; 0x03
    1d8e:	2d 83       	std	Y+5, r18	; 0x05
    1d90:	1f 83       	std	Y+7, r17	; 0x07
    1d92:	0e 83       	std	Y+6, r16	; 0x06
    1d94:	8a 81       	ldd	r24, Y+2	; 0x02
    1d96:	88 23       	and	r24, r24
    1d98:	41 f4       	brne	.+16     	; 0x1daa <prvInitialiseNewQueue+0x3c>
    1d9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1d9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1d9e:	2e 81       	ldd	r18, Y+6	; 0x06
    1da0:	3f 81       	ldd	r19, Y+7	; 0x07
    1da2:	fc 01       	movw	r30, r24
    1da4:	31 83       	std	Z+1, r19	; 0x01
    1da6:	20 83       	st	Z, r18
    1da8:	07 c0       	rjmp	.+14     	; 0x1db8 <prvInitialiseNewQueue+0x4a>
    1daa:	8e 81       	ldd	r24, Y+6	; 0x06
    1dac:	9f 81       	ldd	r25, Y+7	; 0x07
    1dae:	2b 81       	ldd	r18, Y+3	; 0x03
    1db0:	3c 81       	ldd	r19, Y+4	; 0x04
    1db2:	fc 01       	movw	r30, r24
    1db4:	31 83       	std	Z+1, r19	; 0x01
    1db6:	20 83       	st	Z, r18
    1db8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dba:	9f 81       	ldd	r25, Y+7	; 0x07
    1dbc:	29 81       	ldd	r18, Y+1	; 0x01
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	23 8f       	std	Z+27, r18	; 0x1b
    1dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    1dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    1dc6:	2a 81       	ldd	r18, Y+2	; 0x02
    1dc8:	fc 01       	movw	r30, r24
    1dca:	24 8f       	std	Z+28, r18	; 0x1c
    1dcc:	8e 81       	ldd	r24, Y+6	; 0x06
    1dce:	9f 81       	ldd	r25, Y+7	; 0x07
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	0e 94 d7 0d 	call	0x1bae	; 0x1bae <xQueueGenericReset>
    1dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1dda:	2d 81       	ldd	r18, Y+5	; 0x05
    1ddc:	fc 01       	movw	r30, r24
    1dde:	20 a3       	std	Z+32, r18	; 0x20
    1de0:	27 96       	adiw	r28, 0x07	; 7
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	df 91       	pop	r29
    1dee:	cf 91       	pop	r28
    1df0:	1f 91       	pop	r17
    1df2:	0f 91       	pop	r16
    1df4:	08 95       	ret

00001df6 <prvInitialiseMutex>:
    1df6:	cf 93       	push	r28
    1df8:	df 93       	push	r29
    1dfa:	00 d0       	rcall	.+0      	; 0x1dfc <prvInitialiseMutex+0x6>
    1dfc:	cd b7       	in	r28, 0x3d	; 61
    1dfe:	de b7       	in	r29, 0x3e	; 62
    1e00:	9a 83       	std	Y+2, r25	; 0x02
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	89 81       	ldd	r24, Y+1	; 0x01
    1e06:	9a 81       	ldd	r25, Y+2	; 0x02
    1e08:	89 2b       	or	r24, r25
    1e0a:	b9 f0       	breq	.+46     	; 0x1e3a <prvInitialiseMutex+0x44>
    1e0c:	89 81       	ldd	r24, Y+1	; 0x01
    1e0e:	9a 81       	ldd	r25, Y+2	; 0x02
    1e10:	fc 01       	movw	r30, r24
    1e12:	13 82       	std	Z+3, r1	; 0x03
    1e14:	12 82       	std	Z+2, r1	; 0x02
    1e16:	89 81       	ldd	r24, Y+1	; 0x01
    1e18:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1a:	fc 01       	movw	r30, r24
    1e1c:	11 82       	std	Z+1, r1	; 0x01
    1e1e:	10 82       	st	Z, r1
    1e20:	89 81       	ldd	r24, Y+1	; 0x01
    1e22:	9a 81       	ldd	r25, Y+2	; 0x02
    1e24:	fc 01       	movw	r30, r24
    1e26:	16 82       	std	Z+6, r1	; 0x06
    1e28:	89 81       	ldd	r24, Y+1	; 0x01
    1e2a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	70 e0       	ldi	r23, 0x00	; 0
    1e36:	0e 94 42 0f 	call	0x1e84	; 0x1e84 <xQueueGenericSend>
    1e3a:	0f 90       	pop	r0
    1e3c:	0f 90       	pop	r0
    1e3e:	df 91       	pop	r29
    1e40:	cf 91       	pop	r28
    1e42:	08 95       	ret

00001e44 <xQueueCreateMutex>:
    1e44:	cf 93       	push	r28
    1e46:	df 93       	push	r29
    1e48:	00 d0       	rcall	.+0      	; 0x1e4a <xQueueCreateMutex+0x6>
    1e4a:	00 d0       	rcall	.+0      	; 0x1e4c <xQueueCreateMutex+0x8>
    1e4c:	1f 92       	push	r1
    1e4e:	cd b7       	in	r28, 0x3d	; 61
    1e50:	de b7       	in	r29, 0x3e	; 62
    1e52:	8d 83       	std	Y+5, r24	; 0x05
    1e54:	81 e0       	ldi	r24, 0x01	; 1
    1e56:	89 83       	std	Y+1, r24	; 0x01
    1e58:	1a 82       	std	Y+2, r1	; 0x02
    1e5a:	4d 81       	ldd	r20, Y+5	; 0x05
    1e5c:	6a 81       	ldd	r22, Y+2	; 0x02
    1e5e:	89 81       	ldd	r24, Y+1	; 0x01
    1e60:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <xQueueGenericCreate>
    1e64:	9c 83       	std	Y+4, r25	; 0x04
    1e66:	8b 83       	std	Y+3, r24	; 0x03
    1e68:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6c:	0e 94 fb 0e 	call	0x1df6	; 0x1df6 <prvInitialiseMutex>
    1e70:	8b 81       	ldd	r24, Y+3	; 0x03
    1e72:	9c 81       	ldd	r25, Y+4	; 0x04
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
    1e78:	0f 90       	pop	r0
    1e7a:	0f 90       	pop	r0
    1e7c:	0f 90       	pop	r0
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
    1e82:	08 95       	ret

00001e84 <xQueueGenericSend>:
    1e84:	cf 93       	push	r28
    1e86:	df 93       	push	r29
    1e88:	cd b7       	in	r28, 0x3d	; 61
    1e8a:	de b7       	in	r29, 0x3e	; 62
    1e8c:	2e 97       	sbiw	r28, 0x0e	; 14
    1e8e:	0f b6       	in	r0, 0x3f	; 63
    1e90:	f8 94       	cli
    1e92:	de bf       	out	0x3e, r29	; 62
    1e94:	0f be       	out	0x3f, r0	; 63
    1e96:	cd bf       	out	0x3d, r28	; 61
    1e98:	99 87       	std	Y+9, r25	; 0x09
    1e9a:	88 87       	std	Y+8, r24	; 0x08
    1e9c:	7b 87       	std	Y+11, r23	; 0x0b
    1e9e:	6a 87       	std	Y+10, r22	; 0x0a
    1ea0:	5d 87       	std	Y+13, r21	; 0x0d
    1ea2:	4c 87       	std	Y+12, r20	; 0x0c
    1ea4:	2e 87       	std	Y+14, r18	; 0x0e
    1ea6:	19 82       	std	Y+1, r1	; 0x01
    1ea8:	88 85       	ldd	r24, Y+8	; 0x08
    1eaa:	99 85       	ldd	r25, Y+9	; 0x09
    1eac:	9b 83       	std	Y+3, r25	; 0x03
    1eae:	8a 83       	std	Y+2, r24	; 0x02
    1eb0:	0f b6       	in	r0, 0x3f	; 63
    1eb2:	f8 94       	cli
    1eb4:	0f 92       	push	r0
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	fc 01       	movw	r30, r24
    1ebc:	22 8d       	ldd	r18, Z+26	; 0x1a
    1ebe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	83 8d       	ldd	r24, Z+27	; 0x1b
    1ec6:	28 17       	cp	r18, r24
    1ec8:	18 f0       	brcs	.+6      	; 0x1ed0 <xQueueGenericSend+0x4c>
    1eca:	8e 85       	ldd	r24, Y+14	; 0x0e
    1ecc:	82 30       	cpi	r24, 0x02	; 2
    1ece:	11 f5       	brne	.+68     	; 0x1f14 <xQueueGenericSend+0x90>
    1ed0:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ed2:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ed8:	4e 85       	ldd	r20, Y+14	; 0x0e
    1eda:	b9 01       	movw	r22, r18
    1edc:	0e 94 49 11 	call	0x2292	; 0x2292 <prvCopyDataToQueue>
    1ee0:	8c 83       	std	Y+4, r24	; 0x04
    1ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ee6:	fc 01       	movw	r30, r24
    1ee8:	81 89       	ldd	r24, Z+17	; 0x11
    1eea:	88 23       	and	r24, r24
    1eec:	51 f0       	breq	.+20     	; 0x1f02 <xQueueGenericSend+0x7e>
    1eee:	8a 81       	ldd	r24, Y+2	; 0x02
    1ef0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ef2:	41 96       	adiw	r24, 0x11	; 17
    1ef4:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    1ef8:	88 23       	and	r24, r24
    1efa:	41 f0       	breq	.+16     	; 0x1f0c <xQueueGenericSend+0x88>
    1efc:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    1f00:	05 c0       	rjmp	.+10     	; 0x1f0c <xQueueGenericSend+0x88>
    1f02:	8c 81       	ldd	r24, Y+4	; 0x04
    1f04:	88 23       	and	r24, r24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <xQueueGenericSend+0x88>
    1f08:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    1f0c:	0f 90       	pop	r0
    1f0e:	0f be       	out	0x3f, r0	; 63
    1f10:	81 e0       	ldi	r24, 0x01	; 1
    1f12:	61 c0       	rjmp	.+194    	; 0x1fd6 <xQueueGenericSend+0x152>
    1f14:	8c 85       	ldd	r24, Y+12	; 0x0c
    1f16:	9d 85       	ldd	r25, Y+13	; 0x0d
    1f18:	89 2b       	or	r24, r25
    1f1a:	21 f4       	brne	.+8      	; 0x1f24 <xQueueGenericSend+0xa0>
    1f1c:	0f 90       	pop	r0
    1f1e:	0f be       	out	0x3f, r0	; 63
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	59 c0       	rjmp	.+178    	; 0x1fd6 <xQueueGenericSend+0x152>
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	88 23       	and	r24, r24
    1f28:	31 f4       	brne	.+12     	; 0x1f36 <xQueueGenericSend+0xb2>
    1f2a:	ce 01       	movw	r24, r28
    1f2c:	05 96       	adiw	r24, 0x05	; 5
    1f2e:	0e 94 47 18 	call	0x308e	; 0x308e <vTaskSetTimeOutState>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	89 83       	std	Y+1, r24	; 0x01
    1f36:	0f 90       	pop	r0
    1f38:	0f be       	out	0x3f, r0	; 63
    1f3a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vTaskSuspendAll>
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	0f 92       	push	r0
    1f44:	8a 81       	ldd	r24, Y+2	; 0x02
    1f46:	9b 81       	ldd	r25, Y+3	; 0x03
    1f48:	fc 01       	movw	r30, r24
    1f4a:	85 8d       	ldd	r24, Z+29	; 0x1d
    1f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f4e:	21 f4       	brne	.+8      	; 0x1f58 <xQueueGenericSend+0xd4>
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	9b 81       	ldd	r25, Y+3	; 0x03
    1f54:	fc 01       	movw	r30, r24
    1f56:	15 8e       	std	Z+29, r1	; 0x1d
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5c:	fc 01       	movw	r30, r24
    1f5e:	86 8d       	ldd	r24, Z+30	; 0x1e
    1f60:	8f 3f       	cpi	r24, 0xFF	; 255
    1f62:	21 f4       	brne	.+8      	; 0x1f6c <xQueueGenericSend+0xe8>
    1f64:	8a 81       	ldd	r24, Y+2	; 0x02
    1f66:	9b 81       	ldd	r25, Y+3	; 0x03
    1f68:	fc 01       	movw	r30, r24
    1f6a:	16 8e       	std	Z+30, r1	; 0x1e
    1f6c:	0f 90       	pop	r0
    1f6e:	0f be       	out	0x3f, r0	; 63
    1f70:	9e 01       	movw	r18, r28
    1f72:	24 5f       	subi	r18, 0xF4	; 244
    1f74:	3f 4f       	sbci	r19, 0xFF	; 255
    1f76:	ce 01       	movw	r24, r28
    1f78:	05 96       	adiw	r24, 0x05	; 5
    1f7a:	b9 01       	movw	r22, r18
    1f7c:	0e 94 62 18 	call	0x30c4	; 0x30c4 <xTaskCheckForTimeOut>
    1f80:	88 23       	and	r24, r24
    1f82:	01 f5       	brne	.+64     	; 0x1fc4 <xQueueGenericSend+0x140>
    1f84:	8a 81       	ldd	r24, Y+2	; 0x02
    1f86:	9b 81       	ldd	r25, Y+3	; 0x03
    1f88:	0e 94 e4 12 	call	0x25c8	; 0x25c8 <prvIsQueueFull>
    1f8c:	88 23       	and	r24, r24
    1f8e:	99 f0       	breq	.+38     	; 0x1fb6 <xQueueGenericSend+0x132>
    1f90:	2c 85       	ldd	r18, Y+12	; 0x0c
    1f92:	3d 85       	ldd	r19, Y+13	; 0x0d
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	08 96       	adiw	r24, 0x08	; 8
    1f9a:	b9 01       	movw	r22, r18
    1f9c:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <vTaskPlaceOnEventList>
    1fa0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa4:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    1fa8:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    1fac:	88 23       	and	r24, r24
    1fae:	91 f4       	brne	.+36     	; 0x1fd4 <xQueueGenericSend+0x150>
    1fb0:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    1fb4:	0f c0       	rjmp	.+30     	; 0x1fd4 <xQueueGenericSend+0x150>
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    1fbe:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    1fc2:	76 cf       	rjmp	.-276    	; 0x1eb0 <xQueueGenericSend+0x2c>
    1fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    1fc8:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    1fcc:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	01 c0       	rjmp	.+2      	; 0x1fd6 <xQueueGenericSend+0x152>
    1fd4:	6d cf       	rjmp	.-294    	; 0x1eb0 <xQueueGenericSend+0x2c>
    1fd6:	2e 96       	adiw	r28, 0x0e	; 14
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	f8 94       	cli
    1fdc:	de bf       	out	0x3e, r29	; 62
    1fde:	0f be       	out	0x3f, r0	; 63
    1fe0:	cd bf       	out	0x3d, r28	; 61
    1fe2:	df 91       	pop	r29
    1fe4:	cf 91       	pop	r28
    1fe6:	08 95       	ret

00001fe8 <xQueueGenericSendFromISR>:
    1fe8:	cf 93       	push	r28
    1fea:	df 93       	push	r29
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	2c 97       	sbiw	r28, 0x0c	; 12
    1ff2:	0f b6       	in	r0, 0x3f	; 63
    1ff4:	f8 94       	cli
    1ff6:	de bf       	out	0x3e, r29	; 62
    1ff8:	0f be       	out	0x3f, r0	; 63
    1ffa:	cd bf       	out	0x3d, r28	; 61
    1ffc:	9f 83       	std	Y+7, r25	; 0x07
    1ffe:	8e 83       	std	Y+6, r24	; 0x06
    2000:	79 87       	std	Y+9, r23	; 0x09
    2002:	68 87       	std	Y+8, r22	; 0x08
    2004:	5b 87       	std	Y+11, r21	; 0x0b
    2006:	4a 87       	std	Y+10, r20	; 0x0a
    2008:	2c 87       	std	Y+12, r18	; 0x0c
    200a:	8e 81       	ldd	r24, Y+6	; 0x06
    200c:	9f 81       	ldd	r25, Y+7	; 0x07
    200e:	9b 83       	std	Y+3, r25	; 0x03
    2010:	8a 83       	std	Y+2, r24	; 0x02
    2012:	1c 82       	std	Y+4, r1	; 0x04
    2014:	8a 81       	ldd	r24, Y+2	; 0x02
    2016:	9b 81       	ldd	r25, Y+3	; 0x03
    2018:	fc 01       	movw	r30, r24
    201a:	22 8d       	ldd	r18, Z+26	; 0x1a
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	9b 81       	ldd	r25, Y+3	; 0x03
    2020:	fc 01       	movw	r30, r24
    2022:	83 8d       	ldd	r24, Z+27	; 0x1b
    2024:	28 17       	cp	r18, r24
    2026:	18 f0       	brcs	.+6      	; 0x202e <xQueueGenericSendFromISR+0x46>
    2028:	8c 85       	ldd	r24, Y+12	; 0x0c
    202a:	82 30       	cpi	r24, 0x02	; 2
    202c:	89 f5       	brne	.+98     	; 0x2090 <xQueueGenericSendFromISR+0xa8>
    202e:	8a 81       	ldd	r24, Y+2	; 0x02
    2030:	9b 81       	ldd	r25, Y+3	; 0x03
    2032:	fc 01       	movw	r30, r24
    2034:	86 8d       	ldd	r24, Z+30	; 0x1e
    2036:	8d 83       	std	Y+5, r24	; 0x05
    2038:	28 85       	ldd	r18, Y+8	; 0x08
    203a:	39 85       	ldd	r19, Y+9	; 0x09
    203c:	8a 81       	ldd	r24, Y+2	; 0x02
    203e:	9b 81       	ldd	r25, Y+3	; 0x03
    2040:	4c 85       	ldd	r20, Y+12	; 0x0c
    2042:	b9 01       	movw	r22, r18
    2044:	0e 94 49 11 	call	0x2292	; 0x2292 <prvCopyDataToQueue>
    2048:	8d 81       	ldd	r24, Y+5	; 0x05
    204a:	8f 3f       	cpi	r24, 0xFF	; 255
    204c:	b9 f4       	brne	.+46     	; 0x207c <xQueueGenericSendFromISR+0x94>
    204e:	8a 81       	ldd	r24, Y+2	; 0x02
    2050:	9b 81       	ldd	r25, Y+3	; 0x03
    2052:	fc 01       	movw	r30, r24
    2054:	81 89       	ldd	r24, Z+17	; 0x11
    2056:	88 23       	and	r24, r24
    2058:	c1 f0       	breq	.+48     	; 0x208a <xQueueGenericSendFromISR+0xa2>
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	9b 81       	ldd	r25, Y+3	; 0x03
    205e:	41 96       	adiw	r24, 0x11	; 17
    2060:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    2064:	88 23       	and	r24, r24
    2066:	89 f0       	breq	.+34     	; 0x208a <xQueueGenericSendFromISR+0xa2>
    2068:	8a 85       	ldd	r24, Y+10	; 0x0a
    206a:	9b 85       	ldd	r25, Y+11	; 0x0b
    206c:	89 2b       	or	r24, r25
    206e:	69 f0       	breq	.+26     	; 0x208a <xQueueGenericSendFromISR+0xa2>
    2070:	8a 85       	ldd	r24, Y+10	; 0x0a
    2072:	9b 85       	ldd	r25, Y+11	; 0x0b
    2074:	21 e0       	ldi	r18, 0x01	; 1
    2076:	fc 01       	movw	r30, r24
    2078:	20 83       	st	Z, r18
    207a:	07 c0       	rjmp	.+14     	; 0x208a <xQueueGenericSendFromISR+0xa2>
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	8f 5f       	subi	r24, 0xFF	; 255
    2080:	28 2f       	mov	r18, r24
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	9b 81       	ldd	r25, Y+3	; 0x03
    2086:	fc 01       	movw	r30, r24
    2088:	26 8f       	std	Z+30, r18	; 0x1e
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	89 83       	std	Y+1, r24	; 0x01
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <xQueueGenericSendFromISR+0xaa>
    2090:	19 82       	std	Y+1, r1	; 0x01
    2092:	89 81       	ldd	r24, Y+1	; 0x01
    2094:	2c 96       	adiw	r28, 0x0c	; 12
    2096:	0f b6       	in	r0, 0x3f	; 63
    2098:	f8 94       	cli
    209a:	de bf       	out	0x3e, r29	; 62
    209c:	0f be       	out	0x3f, r0	; 63
    209e:	cd bf       	out	0x3d, r28	; 61
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	08 95       	ret

000020a6 <xQueueGenericReceive>:
    20a6:	cf 93       	push	r28
    20a8:	df 93       	push	r29
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
    20ae:	60 97       	sbiw	r28, 0x10	; 16
    20b0:	0f b6       	in	r0, 0x3f	; 63
    20b2:	f8 94       	cli
    20b4:	de bf       	out	0x3e, r29	; 62
    20b6:	0f be       	out	0x3f, r0	; 63
    20b8:	cd bf       	out	0x3d, r28	; 61
    20ba:	9b 87       	std	Y+11, r25	; 0x0b
    20bc:	8a 87       	std	Y+10, r24	; 0x0a
    20be:	7d 87       	std	Y+13, r23	; 0x0d
    20c0:	6c 87       	std	Y+12, r22	; 0x0c
    20c2:	5f 87       	std	Y+15, r21	; 0x0f
    20c4:	4e 87       	std	Y+14, r20	; 0x0e
    20c6:	28 8b       	std	Y+16, r18	; 0x10
    20c8:	19 82       	std	Y+1, r1	; 0x01
    20ca:	8a 85       	ldd	r24, Y+10	; 0x0a
    20cc:	9b 85       	ldd	r25, Y+11	; 0x0b
    20ce:	9b 83       	std	Y+3, r25	; 0x03
    20d0:	8a 83       	std	Y+2, r24	; 0x02
    20d2:	0f b6       	in	r0, 0x3f	; 63
    20d4:	f8 94       	cli
    20d6:	0f 92       	push	r0
    20d8:	8a 81       	ldd	r24, Y+2	; 0x02
    20da:	9b 81       	ldd	r25, Y+3	; 0x03
    20dc:	fc 01       	movw	r30, r24
    20de:	82 8d       	ldd	r24, Z+26	; 0x1a
    20e0:	8c 83       	std	Y+4, r24	; 0x04
    20e2:	8c 81       	ldd	r24, Y+4	; 0x04
    20e4:	88 23       	and	r24, r24
    20e6:	09 f4       	brne	.+2      	; 0x20ea <xQueueGenericReceive+0x44>
    20e8:	51 c0       	rjmp	.+162    	; 0x218c <xQueueGenericReceive+0xe6>
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	9b 81       	ldd	r25, Y+3	; 0x03
    20ee:	fc 01       	movw	r30, r24
    20f0:	86 81       	ldd	r24, Z+6	; 0x06
    20f2:	97 81       	ldd	r25, Z+7	; 0x07
    20f4:	9e 83       	std	Y+6, r25	; 0x06
    20f6:	8d 83       	std	Y+5, r24	; 0x05
    20f8:	2c 85       	ldd	r18, Y+12	; 0x0c
    20fa:	3d 85       	ldd	r19, Y+13	; 0x0d
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2100:	b9 01       	movw	r22, r18
    2102:	0e 94 19 12 	call	0x2432	; 0x2432 <prvCopyDataFromQueue>
    2106:	88 89       	ldd	r24, Y+16	; 0x10
    2108:	88 23       	and	r24, r24
    210a:	31 f5       	brne	.+76     	; 0x2158 <xQueueGenericReceive+0xb2>
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	2f ef       	ldi	r18, 0xFF	; 255
    2110:	28 0f       	add	r18, r24
    2112:	8a 81       	ldd	r24, Y+2	; 0x02
    2114:	9b 81       	ldd	r25, Y+3	; 0x03
    2116:	fc 01       	movw	r30, r24
    2118:	22 8f       	std	Z+26, r18	; 0x1a
    211a:	8a 81       	ldd	r24, Y+2	; 0x02
    211c:	9b 81       	ldd	r25, Y+3	; 0x03
    211e:	fc 01       	movw	r30, r24
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	89 2b       	or	r24, r25
    2126:	41 f4       	brne	.+16     	; 0x2138 <xQueueGenericReceive+0x92>
    2128:	0e 94 bc 1a 	call	0x3578	; 0x3578 <pvTaskIncrementMutexHeldCount>
    212c:	9c 01       	movw	r18, r24
    212e:	8a 81       	ldd	r24, Y+2	; 0x02
    2130:	9b 81       	ldd	r25, Y+3	; 0x03
    2132:	fc 01       	movw	r30, r24
    2134:	33 83       	std	Z+3, r19	; 0x03
    2136:	22 83       	std	Z+2, r18	; 0x02
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	9b 81       	ldd	r25, Y+3	; 0x03
    213c:	fc 01       	movw	r30, r24
    213e:	80 85       	ldd	r24, Z+8	; 0x08
    2140:	88 23       	and	r24, r24
    2142:	01 f1       	breq	.+64     	; 0x2184 <xQueueGenericReceive+0xde>
    2144:	8a 81       	ldd	r24, Y+2	; 0x02
    2146:	9b 81       	ldd	r25, Y+3	; 0x03
    2148:	08 96       	adiw	r24, 0x08	; 8
    214a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    214e:	88 23       	and	r24, r24
    2150:	c9 f0       	breq	.+50     	; 0x2184 <xQueueGenericReceive+0xde>
    2152:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    2156:	16 c0       	rjmp	.+44     	; 0x2184 <xQueueGenericReceive+0xde>
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	9b 81       	ldd	r25, Y+3	; 0x03
    215c:	2d 81       	ldd	r18, Y+5	; 0x05
    215e:	3e 81       	ldd	r19, Y+6	; 0x06
    2160:	fc 01       	movw	r30, r24
    2162:	37 83       	std	Z+7, r19	; 0x07
    2164:	26 83       	std	Z+6, r18	; 0x06
    2166:	8a 81       	ldd	r24, Y+2	; 0x02
    2168:	9b 81       	ldd	r25, Y+3	; 0x03
    216a:	fc 01       	movw	r30, r24
    216c:	81 89       	ldd	r24, Z+17	; 0x11
    216e:	88 23       	and	r24, r24
    2170:	49 f0       	breq	.+18     	; 0x2184 <xQueueGenericReceive+0xde>
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	9b 81       	ldd	r25, Y+3	; 0x03
    2176:	41 96       	adiw	r24, 0x11	; 17
    2178:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    217c:	88 23       	and	r24, r24
    217e:	11 f0       	breq	.+4      	; 0x2184 <xQueueGenericReceive+0xde>
    2180:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    2184:	0f 90       	pop	r0
    2186:	0f be       	out	0x3f, r0	; 63
    2188:	81 e0       	ldi	r24, 0x01	; 1
    218a:	7a c0       	rjmp	.+244    	; 0x2280 <xQueueGenericReceive+0x1da>
    218c:	8e 85       	ldd	r24, Y+14	; 0x0e
    218e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2190:	89 2b       	or	r24, r25
    2192:	21 f4       	brne	.+8      	; 0x219c <xQueueGenericReceive+0xf6>
    2194:	0f 90       	pop	r0
    2196:	0f be       	out	0x3f, r0	; 63
    2198:	80 e0       	ldi	r24, 0x00	; 0
    219a:	72 c0       	rjmp	.+228    	; 0x2280 <xQueueGenericReceive+0x1da>
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	88 23       	and	r24, r24
    21a0:	31 f4       	brne	.+12     	; 0x21ae <xQueueGenericReceive+0x108>
    21a2:	ce 01       	movw	r24, r28
    21a4:	07 96       	adiw	r24, 0x07	; 7
    21a6:	0e 94 47 18 	call	0x308e	; 0x308e <vTaskSetTimeOutState>
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	89 83       	std	Y+1, r24	; 0x01
    21ae:	0f 90       	pop	r0
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vTaskSuspendAll>
    21b6:	0f b6       	in	r0, 0x3f	; 63
    21b8:	f8 94       	cli
    21ba:	0f 92       	push	r0
    21bc:	8a 81       	ldd	r24, Y+2	; 0x02
    21be:	9b 81       	ldd	r25, Y+3	; 0x03
    21c0:	fc 01       	movw	r30, r24
    21c2:	85 8d       	ldd	r24, Z+29	; 0x1d
    21c4:	8f 3f       	cpi	r24, 0xFF	; 255
    21c6:	21 f4       	brne	.+8      	; 0x21d0 <xQueueGenericReceive+0x12a>
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	fc 01       	movw	r30, r24
    21ce:	15 8e       	std	Z+29, r1	; 0x1d
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	9b 81       	ldd	r25, Y+3	; 0x03
    21d4:	fc 01       	movw	r30, r24
    21d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    21d8:	8f 3f       	cpi	r24, 0xFF	; 255
    21da:	21 f4       	brne	.+8      	; 0x21e4 <xQueueGenericReceive+0x13e>
    21dc:	8a 81       	ldd	r24, Y+2	; 0x02
    21de:	9b 81       	ldd	r25, Y+3	; 0x03
    21e0:	fc 01       	movw	r30, r24
    21e2:	16 8e       	std	Z+30, r1	; 0x1e
    21e4:	0f 90       	pop	r0
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	9e 01       	movw	r18, r28
    21ea:	22 5f       	subi	r18, 0xF2	; 242
    21ec:	3f 4f       	sbci	r19, 0xFF	; 255
    21ee:	ce 01       	movw	r24, r28
    21f0:	07 96       	adiw	r24, 0x07	; 7
    21f2:	b9 01       	movw	r22, r18
    21f4:	0e 94 62 18 	call	0x30c4	; 0x30c4 <xTaskCheckForTimeOut>
    21f8:	88 23       	and	r24, r24
    21fa:	99 f5       	brne	.+102    	; 0x2262 <xQueueGenericReceive+0x1bc>
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	0e 94 c6 12 	call	0x258c	; 0x258c <prvIsQueueEmpty>
    2204:	88 23       	and	r24, r24
    2206:	31 f1       	breq	.+76     	; 0x2254 <xQueueGenericReceive+0x1ae>
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	fc 01       	movw	r30, r24
    220e:	80 81       	ld	r24, Z
    2210:	91 81       	ldd	r25, Z+1	; 0x01
    2212:	89 2b       	or	r24, r25
    2214:	61 f4       	brne	.+24     	; 0x222e <xQueueGenericReceive+0x188>
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	0f 92       	push	r0
    221c:	8a 81       	ldd	r24, Y+2	; 0x02
    221e:	9b 81       	ldd	r25, Y+3	; 0x03
    2220:	fc 01       	movw	r30, r24
    2222:	82 81       	ldd	r24, Z+2	; 0x02
    2224:	93 81       	ldd	r25, Z+3	; 0x03
    2226:	0e 94 a8 19 	call	0x3350	; 0x3350 <vTaskPriorityInherit>
    222a:	0f 90       	pop	r0
    222c:	0f be       	out	0x3f, r0	; 63
    222e:	2e 85       	ldd	r18, Y+14	; 0x0e
    2230:	3f 85       	ldd	r19, Y+15	; 0x0f
    2232:	8a 81       	ldd	r24, Y+2	; 0x02
    2234:	9b 81       	ldd	r25, Y+3	; 0x03
    2236:	41 96       	adiw	r24, 0x11	; 17
    2238:	b9 01       	movw	r22, r18
    223a:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <vTaskPlaceOnEventList>
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	9b 81       	ldd	r25, Y+3	; 0x03
    2242:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    2246:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    224a:	88 23       	and	r24, r24
    224c:	c1 f4       	brne	.+48     	; 0x227e <xQueueGenericReceive+0x1d8>
    224e:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    2252:	15 c0       	rjmp	.+42     	; 0x227e <xQueueGenericReceive+0x1d8>
    2254:	8a 81       	ldd	r24, Y+2	; 0x02
    2256:	9b 81       	ldd	r25, Y+3	; 0x03
    2258:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    225c:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    2260:	38 cf       	rjmp	.-400    	; 0x20d2 <xQueueGenericReceive+0x2c>
    2262:	8a 81       	ldd	r24, Y+2	; 0x02
    2264:	9b 81       	ldd	r25, Y+3	; 0x03
    2266:	0e 94 69 12 	call	0x24d2	; 0x24d2 <prvUnlockQueue>
    226a:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    226e:	8a 81       	ldd	r24, Y+2	; 0x02
    2270:	9b 81       	ldd	r25, Y+3	; 0x03
    2272:	0e 94 c6 12 	call	0x258c	; 0x258c <prvIsQueueEmpty>
    2276:	88 23       	and	r24, r24
    2278:	11 f0       	breq	.+4      	; 0x227e <xQueueGenericReceive+0x1d8>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	01 c0       	rjmp	.+2      	; 0x2280 <xQueueGenericReceive+0x1da>
    227e:	29 cf       	rjmp	.-430    	; 0x20d2 <xQueueGenericReceive+0x2c>
    2280:	60 96       	adiw	r28, 0x10	; 16
    2282:	0f b6       	in	r0, 0x3f	; 63
    2284:	f8 94       	cli
    2286:	de bf       	out	0x3e, r29	; 62
    2288:	0f be       	out	0x3f, r0	; 63
    228a:	cd bf       	out	0x3d, r28	; 61
    228c:	df 91       	pop	r29
    228e:	cf 91       	pop	r28
    2290:	08 95       	ret

00002292 <prvCopyDataToQueue>:
    2292:	cf 93       	push	r28
    2294:	df 93       	push	r29
    2296:	cd b7       	in	r28, 0x3d	; 61
    2298:	de b7       	in	r29, 0x3e	; 62
    229a:	27 97       	sbiw	r28, 0x07	; 7
    229c:	0f b6       	in	r0, 0x3f	; 63
    229e:	f8 94       	cli
    22a0:	de bf       	out	0x3e, r29	; 62
    22a2:	0f be       	out	0x3f, r0	; 63
    22a4:	cd bf       	out	0x3d, r28	; 61
    22a6:	9c 83       	std	Y+4, r25	; 0x04
    22a8:	8b 83       	std	Y+3, r24	; 0x03
    22aa:	7e 83       	std	Y+6, r23	; 0x06
    22ac:	6d 83       	std	Y+5, r22	; 0x05
    22ae:	4f 83       	std	Y+7, r20	; 0x07
    22b0:	19 82       	std	Y+1, r1	; 0x01
    22b2:	8b 81       	ldd	r24, Y+3	; 0x03
    22b4:	9c 81       	ldd	r25, Y+4	; 0x04
    22b6:	fc 01       	movw	r30, r24
    22b8:	82 8d       	ldd	r24, Z+26	; 0x1a
    22ba:	8a 83       	std	Y+2, r24	; 0x02
    22bc:	8b 81       	ldd	r24, Y+3	; 0x03
    22be:	9c 81       	ldd	r25, Y+4	; 0x04
    22c0:	fc 01       	movw	r30, r24
    22c2:	84 8d       	ldd	r24, Z+28	; 0x1c
    22c4:	88 23       	and	r24, r24
    22c6:	b1 f4       	brne	.+44     	; 0x22f4 <prvCopyDataToQueue+0x62>
    22c8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ca:	9c 81       	ldd	r25, Y+4	; 0x04
    22cc:	fc 01       	movw	r30, r24
    22ce:	80 81       	ld	r24, Z
    22d0:	91 81       	ldd	r25, Z+1	; 0x01
    22d2:	89 2b       	or	r24, r25
    22d4:	09 f0       	breq	.+2      	; 0x22d8 <prvCopyDataToQueue+0x46>
    22d6:	9c c0       	rjmp	.+312    	; 0x2410 <prvCopyDataToQueue+0x17e>
    22d8:	8b 81       	ldd	r24, Y+3	; 0x03
    22da:	9c 81       	ldd	r25, Y+4	; 0x04
    22dc:	fc 01       	movw	r30, r24
    22de:	82 81       	ldd	r24, Z+2	; 0x02
    22e0:	93 81       	ldd	r25, Z+3	; 0x03
    22e2:	0e 94 3f 1a 	call	0x347e	; 0x347e <xTaskPriorityDisinherit>
    22e6:	89 83       	std	Y+1, r24	; 0x01
    22e8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ea:	9c 81       	ldd	r25, Y+4	; 0x04
    22ec:	fc 01       	movw	r30, r24
    22ee:	13 82       	std	Z+3, r1	; 0x03
    22f0:	12 82       	std	Z+2, r1	; 0x02
    22f2:	8e c0       	rjmp	.+284    	; 0x2410 <prvCopyDataToQueue+0x17e>
    22f4:	8f 81       	ldd	r24, Y+7	; 0x07
    22f6:	88 23       	and	r24, r24
    22f8:	d9 f5       	brne	.+118    	; 0x2370 <prvCopyDataToQueue+0xde>
    22fa:	8b 81       	ldd	r24, Y+3	; 0x03
    22fc:	9c 81       	ldd	r25, Y+4	; 0x04
    22fe:	fc 01       	movw	r30, r24
    2300:	84 8d       	ldd	r24, Z+28	; 0x1c
    2302:	48 2f       	mov	r20, r24
    2304:	50 e0       	ldi	r21, 0x00	; 0
    2306:	8b 81       	ldd	r24, Y+3	; 0x03
    2308:	9c 81       	ldd	r25, Y+4	; 0x04
    230a:	fc 01       	movw	r30, r24
    230c:	84 81       	ldd	r24, Z+4	; 0x04
    230e:	95 81       	ldd	r25, Z+5	; 0x05
    2310:	2d 81       	ldd	r18, Y+5	; 0x05
    2312:	3e 81       	ldd	r19, Y+6	; 0x06
    2314:	b9 01       	movw	r22, r18
    2316:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <memcpy>
    231a:	8b 81       	ldd	r24, Y+3	; 0x03
    231c:	9c 81       	ldd	r25, Y+4	; 0x04
    231e:	fc 01       	movw	r30, r24
    2320:	24 81       	ldd	r18, Z+4	; 0x04
    2322:	35 81       	ldd	r19, Z+5	; 0x05
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	fc 01       	movw	r30, r24
    232a:	84 8d       	ldd	r24, Z+28	; 0x1c
    232c:	88 2f       	mov	r24, r24
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	28 0f       	add	r18, r24
    2332:	39 1f       	adc	r19, r25
    2334:	8b 81       	ldd	r24, Y+3	; 0x03
    2336:	9c 81       	ldd	r25, Y+4	; 0x04
    2338:	fc 01       	movw	r30, r24
    233a:	35 83       	std	Z+5, r19	; 0x05
    233c:	24 83       	std	Z+4, r18	; 0x04
    233e:	8b 81       	ldd	r24, Y+3	; 0x03
    2340:	9c 81       	ldd	r25, Y+4	; 0x04
    2342:	fc 01       	movw	r30, r24
    2344:	24 81       	ldd	r18, Z+4	; 0x04
    2346:	35 81       	ldd	r19, Z+5	; 0x05
    2348:	8b 81       	ldd	r24, Y+3	; 0x03
    234a:	9c 81       	ldd	r25, Y+4	; 0x04
    234c:	fc 01       	movw	r30, r24
    234e:	82 81       	ldd	r24, Z+2	; 0x02
    2350:	93 81       	ldd	r25, Z+3	; 0x03
    2352:	28 17       	cp	r18, r24
    2354:	39 07       	cpc	r19, r25
    2356:	08 f4       	brcc	.+2      	; 0x235a <prvCopyDataToQueue+0xc8>
    2358:	5b c0       	rjmp	.+182    	; 0x2410 <prvCopyDataToQueue+0x17e>
    235a:	8b 81       	ldd	r24, Y+3	; 0x03
    235c:	9c 81       	ldd	r25, Y+4	; 0x04
    235e:	fc 01       	movw	r30, r24
    2360:	20 81       	ld	r18, Z
    2362:	31 81       	ldd	r19, Z+1	; 0x01
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	fc 01       	movw	r30, r24
    236a:	35 83       	std	Z+5, r19	; 0x05
    236c:	24 83       	std	Z+4, r18	; 0x04
    236e:	50 c0       	rjmp	.+160    	; 0x2410 <prvCopyDataToQueue+0x17e>
    2370:	8b 81       	ldd	r24, Y+3	; 0x03
    2372:	9c 81       	ldd	r25, Y+4	; 0x04
    2374:	fc 01       	movw	r30, r24
    2376:	84 8d       	ldd	r24, Z+28	; 0x1c
    2378:	48 2f       	mov	r20, r24
    237a:	50 e0       	ldi	r21, 0x00	; 0
    237c:	8b 81       	ldd	r24, Y+3	; 0x03
    237e:	9c 81       	ldd	r25, Y+4	; 0x04
    2380:	fc 01       	movw	r30, r24
    2382:	86 81       	ldd	r24, Z+6	; 0x06
    2384:	97 81       	ldd	r25, Z+7	; 0x07
    2386:	2d 81       	ldd	r18, Y+5	; 0x05
    2388:	3e 81       	ldd	r19, Y+6	; 0x06
    238a:	b9 01       	movw	r22, r18
    238c:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <memcpy>
    2390:	8b 81       	ldd	r24, Y+3	; 0x03
    2392:	9c 81       	ldd	r25, Y+4	; 0x04
    2394:	fc 01       	movw	r30, r24
    2396:	26 81       	ldd	r18, Z+6	; 0x06
    2398:	37 81       	ldd	r19, Z+7	; 0x07
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	fc 01       	movw	r30, r24
    23a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    23a2:	88 2f       	mov	r24, r24
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	91 95       	neg	r25
    23a8:	81 95       	neg	r24
    23aa:	91 09       	sbc	r25, r1
    23ac:	28 0f       	add	r18, r24
    23ae:	39 1f       	adc	r19, r25
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	fc 01       	movw	r30, r24
    23b6:	37 83       	std	Z+7, r19	; 0x07
    23b8:	26 83       	std	Z+6, r18	; 0x06
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	fc 01       	movw	r30, r24
    23c0:	26 81       	ldd	r18, Z+6	; 0x06
    23c2:	37 81       	ldd	r19, Z+7	; 0x07
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	fc 01       	movw	r30, r24
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	28 17       	cp	r18, r24
    23d0:	39 07       	cpc	r19, r25
    23d2:	a8 f4       	brcc	.+42     	; 0x23fe <prvCopyDataToQueue+0x16c>
    23d4:	8b 81       	ldd	r24, Y+3	; 0x03
    23d6:	9c 81       	ldd	r25, Y+4	; 0x04
    23d8:	fc 01       	movw	r30, r24
    23da:	22 81       	ldd	r18, Z+2	; 0x02
    23dc:	33 81       	ldd	r19, Z+3	; 0x03
    23de:	8b 81       	ldd	r24, Y+3	; 0x03
    23e0:	9c 81       	ldd	r25, Y+4	; 0x04
    23e2:	fc 01       	movw	r30, r24
    23e4:	84 8d       	ldd	r24, Z+28	; 0x1c
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	91 95       	neg	r25
    23ec:	81 95       	neg	r24
    23ee:	91 09       	sbc	r25, r1
    23f0:	28 0f       	add	r18, r24
    23f2:	39 1f       	adc	r19, r25
    23f4:	8b 81       	ldd	r24, Y+3	; 0x03
    23f6:	9c 81       	ldd	r25, Y+4	; 0x04
    23f8:	fc 01       	movw	r30, r24
    23fa:	37 83       	std	Z+7, r19	; 0x07
    23fc:	26 83       	std	Z+6, r18	; 0x06
    23fe:	8f 81       	ldd	r24, Y+7	; 0x07
    2400:	82 30       	cpi	r24, 0x02	; 2
    2402:	31 f4       	brne	.+12     	; 0x2410 <prvCopyDataToQueue+0x17e>
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	88 23       	and	r24, r24
    2408:	19 f0       	breq	.+6      	; 0x2410 <prvCopyDataToQueue+0x17e>
    240a:	8a 81       	ldd	r24, Y+2	; 0x02
    240c:	81 50       	subi	r24, 0x01	; 1
    240e:	8a 83       	std	Y+2, r24	; 0x02
    2410:	8a 81       	ldd	r24, Y+2	; 0x02
    2412:	21 e0       	ldi	r18, 0x01	; 1
    2414:	28 0f       	add	r18, r24
    2416:	8b 81       	ldd	r24, Y+3	; 0x03
    2418:	9c 81       	ldd	r25, Y+4	; 0x04
    241a:	fc 01       	movw	r30, r24
    241c:	22 8f       	std	Z+26, r18	; 0x1a
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	27 96       	adiw	r28, 0x07	; 7
    2422:	0f b6       	in	r0, 0x3f	; 63
    2424:	f8 94       	cli
    2426:	de bf       	out	0x3e, r29	; 62
    2428:	0f be       	out	0x3f, r0	; 63
    242a:	cd bf       	out	0x3d, r28	; 61
    242c:	df 91       	pop	r29
    242e:	cf 91       	pop	r28
    2430:	08 95       	ret

00002432 <prvCopyDataFromQueue>:
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	00 d0       	rcall	.+0      	; 0x2438 <prvCopyDataFromQueue+0x6>
    2438:	00 d0       	rcall	.+0      	; 0x243a <prvCopyDataFromQueue+0x8>
    243a:	cd b7       	in	r28, 0x3d	; 61
    243c:	de b7       	in	r29, 0x3e	; 62
    243e:	9a 83       	std	Y+2, r25	; 0x02
    2440:	89 83       	std	Y+1, r24	; 0x01
    2442:	7c 83       	std	Y+4, r23	; 0x04
    2444:	6b 83       	std	Y+3, r22	; 0x03
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	fc 01       	movw	r30, r24
    244c:	84 8d       	ldd	r24, Z+28	; 0x1c
    244e:	88 23       	and	r24, r24
    2450:	c9 f1       	breq	.+114    	; 0x24c4 <prvCopyDataFromQueue+0x92>
    2452:	89 81       	ldd	r24, Y+1	; 0x01
    2454:	9a 81       	ldd	r25, Y+2	; 0x02
    2456:	fc 01       	movw	r30, r24
    2458:	26 81       	ldd	r18, Z+6	; 0x06
    245a:	37 81       	ldd	r19, Z+7	; 0x07
    245c:	89 81       	ldd	r24, Y+1	; 0x01
    245e:	9a 81       	ldd	r25, Y+2	; 0x02
    2460:	fc 01       	movw	r30, r24
    2462:	84 8d       	ldd	r24, Z+28	; 0x1c
    2464:	88 2f       	mov	r24, r24
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	28 0f       	add	r18, r24
    246a:	39 1f       	adc	r19, r25
    246c:	89 81       	ldd	r24, Y+1	; 0x01
    246e:	9a 81       	ldd	r25, Y+2	; 0x02
    2470:	fc 01       	movw	r30, r24
    2472:	37 83       	std	Z+7, r19	; 0x07
    2474:	26 83       	std	Z+6, r18	; 0x06
    2476:	89 81       	ldd	r24, Y+1	; 0x01
    2478:	9a 81       	ldd	r25, Y+2	; 0x02
    247a:	fc 01       	movw	r30, r24
    247c:	26 81       	ldd	r18, Z+6	; 0x06
    247e:	37 81       	ldd	r19, Z+7	; 0x07
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	9a 81       	ldd	r25, Y+2	; 0x02
    2484:	fc 01       	movw	r30, r24
    2486:	82 81       	ldd	r24, Z+2	; 0x02
    2488:	93 81       	ldd	r25, Z+3	; 0x03
    248a:	28 17       	cp	r18, r24
    248c:	39 07       	cpc	r19, r25
    248e:	50 f0       	brcs	.+20     	; 0x24a4 <prvCopyDataFromQueue+0x72>
    2490:	89 81       	ldd	r24, Y+1	; 0x01
    2492:	9a 81       	ldd	r25, Y+2	; 0x02
    2494:	fc 01       	movw	r30, r24
    2496:	20 81       	ld	r18, Z
    2498:	31 81       	ldd	r19, Z+1	; 0x01
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	fc 01       	movw	r30, r24
    24a0:	37 83       	std	Z+7, r19	; 0x07
    24a2:	26 83       	std	Z+6, r18	; 0x06
    24a4:	89 81       	ldd	r24, Y+1	; 0x01
    24a6:	9a 81       	ldd	r25, Y+2	; 0x02
    24a8:	fc 01       	movw	r30, r24
    24aa:	84 8d       	ldd	r24, Z+28	; 0x1c
    24ac:	48 2f       	mov	r20, r24
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	89 81       	ldd	r24, Y+1	; 0x01
    24b2:	9a 81       	ldd	r25, Y+2	; 0x02
    24b4:	fc 01       	movw	r30, r24
    24b6:	26 81       	ldd	r18, Z+6	; 0x06
    24b8:	37 81       	ldd	r19, Z+7	; 0x07
    24ba:	8b 81       	ldd	r24, Y+3	; 0x03
    24bc:	9c 81       	ldd	r25, Y+4	; 0x04
    24be:	b9 01       	movw	r22, r18
    24c0:	0e 94 16 1d 	call	0x3a2c	; 0x3a2c <memcpy>
    24c4:	0f 90       	pop	r0
    24c6:	0f 90       	pop	r0
    24c8:	0f 90       	pop	r0
    24ca:	0f 90       	pop	r0
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	08 95       	ret

000024d2 <prvUnlockQueue>:
    24d2:	cf 93       	push	r28
    24d4:	df 93       	push	r29
    24d6:	00 d0       	rcall	.+0      	; 0x24d8 <prvUnlockQueue+0x6>
    24d8:	00 d0       	rcall	.+0      	; 0x24da <prvUnlockQueue+0x8>
    24da:	cd b7       	in	r28, 0x3d	; 61
    24dc:	de b7       	in	r29, 0x3e	; 62
    24de:	9c 83       	std	Y+4, r25	; 0x04
    24e0:	8b 83       	std	Y+3, r24	; 0x03
    24e2:	0f b6       	in	r0, 0x3f	; 63
    24e4:	f8 94       	cli
    24e6:	0f 92       	push	r0
    24e8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ea:	9c 81       	ldd	r25, Y+4	; 0x04
    24ec:	fc 01       	movw	r30, r24
    24ee:	86 8d       	ldd	r24, Z+30	; 0x1e
    24f0:	89 83       	std	Y+1, r24	; 0x01
    24f2:	14 c0       	rjmp	.+40     	; 0x251c <prvUnlockQueue+0x4a>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	fc 01       	movw	r30, r24
    24fa:	81 89       	ldd	r24, Z+17	; 0x11
    24fc:	88 23       	and	r24, r24
    24fe:	51 f0       	breq	.+20     	; 0x2514 <prvUnlockQueue+0x42>
    2500:	8b 81       	ldd	r24, Y+3	; 0x03
    2502:	9c 81       	ldd	r25, Y+4	; 0x04
    2504:	41 96       	adiw	r24, 0x11	; 17
    2506:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    250a:	88 23       	and	r24, r24
    250c:	21 f0       	breq	.+8      	; 0x2516 <prvUnlockQueue+0x44>
    250e:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskMissedYield>
    2512:	01 c0       	rjmp	.+2      	; 0x2516 <prvUnlockQueue+0x44>
    2514:	06 c0       	rjmp	.+12     	; 0x2522 <prvUnlockQueue+0x50>
    2516:	89 81       	ldd	r24, Y+1	; 0x01
    2518:	81 50       	subi	r24, 0x01	; 1
    251a:	89 83       	std	Y+1, r24	; 0x01
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	18 16       	cp	r1, r24
    2520:	4c f3       	brlt	.-46     	; 0x24f4 <prvUnlockQueue+0x22>
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	9c 81       	ldd	r25, Y+4	; 0x04
    2526:	2f ef       	ldi	r18, 0xFF	; 255
    2528:	fc 01       	movw	r30, r24
    252a:	26 8f       	std	Z+30, r18	; 0x1e
    252c:	0f 90       	pop	r0
    252e:	0f be       	out	0x3f, r0	; 63
    2530:	0f b6       	in	r0, 0x3f	; 63
    2532:	f8 94       	cli
    2534:	0f 92       	push	r0
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	9c 81       	ldd	r25, Y+4	; 0x04
    253a:	fc 01       	movw	r30, r24
    253c:	85 8d       	ldd	r24, Z+29	; 0x1d
    253e:	8a 83       	std	Y+2, r24	; 0x02
    2540:	14 c0       	rjmp	.+40     	; 0x256a <prvUnlockQueue+0x98>
    2542:	8b 81       	ldd	r24, Y+3	; 0x03
    2544:	9c 81       	ldd	r25, Y+4	; 0x04
    2546:	fc 01       	movw	r30, r24
    2548:	80 85       	ldd	r24, Z+8	; 0x08
    254a:	88 23       	and	r24, r24
    254c:	69 f0       	breq	.+26     	; 0x2568 <prvUnlockQueue+0x96>
    254e:	8b 81       	ldd	r24, Y+3	; 0x03
    2550:	9c 81       	ldd	r25, Y+4	; 0x04
    2552:	08 96       	adiw	r24, 0x08	; 8
    2554:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <xTaskRemoveFromEventList>
    2558:	88 23       	and	r24, r24
    255a:	11 f0       	breq	.+4      	; 0x2560 <prvUnlockQueue+0x8e>
    255c:	0e 94 ca 18 	call	0x3194	; 0x3194 <vTaskMissedYield>
    2560:	8a 81       	ldd	r24, Y+2	; 0x02
    2562:	81 50       	subi	r24, 0x01	; 1
    2564:	8a 83       	std	Y+2, r24	; 0x02
    2566:	01 c0       	rjmp	.+2      	; 0x256a <prvUnlockQueue+0x98>
    2568:	03 c0       	rjmp	.+6      	; 0x2570 <prvUnlockQueue+0x9e>
    256a:	8a 81       	ldd	r24, Y+2	; 0x02
    256c:	18 16       	cp	r1, r24
    256e:	4c f3       	brlt	.-46     	; 0x2542 <prvUnlockQueue+0x70>
    2570:	8b 81       	ldd	r24, Y+3	; 0x03
    2572:	9c 81       	ldd	r25, Y+4	; 0x04
    2574:	2f ef       	ldi	r18, 0xFF	; 255
    2576:	fc 01       	movw	r30, r24
    2578:	25 8f       	std	Z+29, r18	; 0x1d
    257a:	0f 90       	pop	r0
    257c:	0f be       	out	0x3f, r0	; 63
    257e:	0f 90       	pop	r0
    2580:	0f 90       	pop	r0
    2582:	0f 90       	pop	r0
    2584:	0f 90       	pop	r0
    2586:	df 91       	pop	r29
    2588:	cf 91       	pop	r28
    258a:	08 95       	ret

0000258c <prvIsQueueEmpty>:
    258c:	cf 93       	push	r28
    258e:	df 93       	push	r29
    2590:	00 d0       	rcall	.+0      	; 0x2592 <prvIsQueueEmpty+0x6>
    2592:	1f 92       	push	r1
    2594:	cd b7       	in	r28, 0x3d	; 61
    2596:	de b7       	in	r29, 0x3e	; 62
    2598:	9b 83       	std	Y+3, r25	; 0x03
    259a:	8a 83       	std	Y+2, r24	; 0x02
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	f8 94       	cli
    25a0:	0f 92       	push	r0
    25a2:	8a 81       	ldd	r24, Y+2	; 0x02
    25a4:	9b 81       	ldd	r25, Y+3	; 0x03
    25a6:	fc 01       	movw	r30, r24
    25a8:	82 8d       	ldd	r24, Z+26	; 0x1a
    25aa:	88 23       	and	r24, r24
    25ac:	19 f4       	brne	.+6      	; 0x25b4 <prvIsQueueEmpty+0x28>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	89 83       	std	Y+1, r24	; 0x01
    25b2:	01 c0       	rjmp	.+2      	; 0x25b6 <prvIsQueueEmpty+0x2a>
    25b4:	19 82       	std	Y+1, r1	; 0x01
    25b6:	0f 90       	pop	r0
    25b8:	0f be       	out	0x3f, r0	; 63
    25ba:	89 81       	ldd	r24, Y+1	; 0x01
    25bc:	0f 90       	pop	r0
    25be:	0f 90       	pop	r0
    25c0:	0f 90       	pop	r0
    25c2:	df 91       	pop	r29
    25c4:	cf 91       	pop	r28
    25c6:	08 95       	ret

000025c8 <prvIsQueueFull>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	00 d0       	rcall	.+0      	; 0x25ce <prvIsQueueFull+0x6>
    25ce:	1f 92       	push	r1
    25d0:	cd b7       	in	r28, 0x3d	; 61
    25d2:	de b7       	in	r29, 0x3e	; 62
    25d4:	9b 83       	std	Y+3, r25	; 0x03
    25d6:	8a 83       	std	Y+2, r24	; 0x02
BaseType_t xReturn;

	taskENTER_CRITICAL();
    25d8:	0f b6       	in	r0, 0x3f	; 63
    25da:	f8 94       	cli
    25dc:	0f 92       	push	r0
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
    25de:	8a 81       	ldd	r24, Y+2	; 0x02
    25e0:	9b 81       	ldd	r25, Y+3	; 0x03
    25e2:	fc 01       	movw	r30, r24
    25e4:	22 8d       	ldd	r18, Z+26	; 0x1a
    25e6:	8a 81       	ldd	r24, Y+2	; 0x02
    25e8:	9b 81       	ldd	r25, Y+3	; 0x03
    25ea:	fc 01       	movw	r30, r24
    25ec:	83 8d       	ldd	r24, Z+27	; 0x1b
    25ee:	28 17       	cp	r18, r24
    25f0:	19 f4       	brne	.+6      	; 0x25f8 <prvIsQueueFull+0x30>
		{
			xReturn = pdTRUE;
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	89 83       	std	Y+1, r24	; 0x01
    25f6:	01 c0       	rjmp	.+2      	; 0x25fa <prvIsQueueFull+0x32>
		}
		else
		{
			xReturn = pdFALSE;
    25f8:	19 82       	std	Y+1, r1	; 0x01
		}
	}
	taskEXIT_CRITICAL();
    25fa:	0f 90       	pop	r0
    25fc:	0f be       	out	0x3f, r0	; 63

	return xReturn;
    25fe:	89 81       	ldd	r24, Y+1	; 0x01
}
    2600:	0f 90       	pop	r0
    2602:	0f 90       	pop	r0
    2604:	0f 90       	pop	r0
    2606:	df 91       	pop	r29
    2608:	cf 91       	pop	r28
    260a:	08 95       	ret

0000260c <xTaskCreate>:
			}
		}
		taskEXIT_CRITICAL();

		return xReturn;
	}
    260c:	8f 92       	push	r8
    260e:	9f 92       	push	r9
    2610:	af 92       	push	r10
    2612:	bf 92       	push	r11
    2614:	cf 92       	push	r12
    2616:	df 92       	push	r13
    2618:	ef 92       	push	r14
    261a:	ff 92       	push	r15
    261c:	0f 93       	push	r16
    261e:	1f 93       	push	r17
    2620:	cf 93       	push	r28
    2622:	df 93       	push	r29
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
    2628:	60 97       	sbiw	r28, 0x10	; 16
    262a:	0f b6       	in	r0, 0x3f	; 63
    262c:	f8 94       	cli
    262e:	de bf       	out	0x3e, r29	; 62
    2630:	0f be       	out	0x3f, r0	; 63
    2632:	cd bf       	out	0x3d, r28	; 61
    2634:	9f 83       	std	Y+7, r25	; 0x07
    2636:	8e 83       	std	Y+6, r24	; 0x06
    2638:	79 87       	std	Y+9, r23	; 0x09
    263a:	68 87       	std	Y+8, r22	; 0x08
    263c:	5b 87       	std	Y+11, r21	; 0x0b
    263e:	4a 87       	std	Y+10, r20	; 0x0a
    2640:	3d 87       	std	Y+13, r19	; 0x0d
    2642:	2c 87       	std	Y+12, r18	; 0x0c
    2644:	0e 87       	std	Y+14, r16	; 0x0e
    2646:	f8 8a       	std	Y+16, r15	; 0x10
    2648:	ef 86       	std	Y+15, r14	; 0x0f
    264a:	8a 85       	ldd	r24, Y+10	; 0x0a
    264c:	9b 85       	ldd	r25, Y+11	; 0x0b
    264e:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <pvPortMalloc>
    2652:	9d 83       	std	Y+5, r25	; 0x05
    2654:	8c 83       	std	Y+4, r24	; 0x04
    2656:	8c 81       	ldd	r24, Y+4	; 0x04
    2658:	9d 81       	ldd	r25, Y+5	; 0x05
    265a:	89 2b       	or	r24, r25
    265c:	b9 f0       	breq	.+46     	; 0x268c <xTaskCreate+0x80>
    265e:	8c e2       	ldi	r24, 0x2C	; 44
    2660:	90 e0       	ldi	r25, 0x00	; 0
    2662:	0e 94 51 0b 	call	0x16a2	; 0x16a2 <pvPortMalloc>
    2666:	9a 83       	std	Y+2, r25	; 0x02
    2668:	89 83       	std	Y+1, r24	; 0x01
    266a:	89 81       	ldd	r24, Y+1	; 0x01
    266c:	9a 81       	ldd	r25, Y+2	; 0x02
    266e:	89 2b       	or	r24, r25
    2670:	41 f0       	breq	.+16     	; 0x2682 <xTaskCreate+0x76>
    2672:	89 81       	ldd	r24, Y+1	; 0x01
    2674:	9a 81       	ldd	r25, Y+2	; 0x02
    2676:	2c 81       	ldd	r18, Y+4	; 0x04
    2678:	3d 81       	ldd	r19, Y+5	; 0x05
    267a:	fc 01       	movw	r30, r24
    267c:	30 8f       	std	Z+24, r19	; 0x18
    267e:	27 8b       	std	Z+23, r18	; 0x17
    2680:	07 c0       	rjmp	.+14     	; 0x2690 <xTaskCreate+0x84>
    2682:	8c 81       	ldd	r24, Y+4	; 0x04
    2684:	9d 81       	ldd	r25, Y+5	; 0x05
    2686:	0e 94 a6 0b 	call	0x174c	; 0x174c <vPortFree>
    268a:	02 c0       	rjmp	.+4      	; 0x2690 <xTaskCreate+0x84>
    268c:	1a 82       	std	Y+2, r1	; 0x02
    268e:	19 82       	std	Y+1, r1	; 0x01
    2690:	89 81       	ldd	r24, Y+1	; 0x01
    2692:	9a 81       	ldd	r25, Y+2	; 0x02
    2694:	89 2b       	or	r24, r25
    2696:	09 f1       	breq	.+66     	; 0x26da <xTaskCreate+0xce>
    2698:	8a 85       	ldd	r24, Y+10	; 0x0a
    269a:	9b 85       	ldd	r25, Y+11	; 0x0b
    269c:	cc 01       	movw	r24, r24
    269e:	a0 e0       	ldi	r26, 0x00	; 0
    26a0:	b0 e0       	ldi	r27, 0x00	; 0
    26a2:	09 81       	ldd	r16, Y+1	; 0x01
    26a4:	1a 81       	ldd	r17, Y+2	; 0x02
    26a6:	4f 85       	ldd	r20, Y+15	; 0x0f
    26a8:	58 89       	ldd	r21, Y+16	; 0x10
    26aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    26ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    26ae:	68 85       	ldd	r22, Y+8	; 0x08
    26b0:	79 85       	ldd	r23, Y+9	; 0x09
    26b2:	ee 81       	ldd	r30, Y+6	; 0x06
    26b4:	ff 81       	ldd	r31, Y+7	; 0x07
    26b6:	81 2c       	mov	r8, r1
    26b8:	91 2c       	mov	r9, r1
    26ba:	58 01       	movw	r10, r16
    26bc:	6a 01       	movw	r12, r20
    26be:	ee 84       	ldd	r14, Y+14	; 0x0e
    26c0:	89 01       	movw	r16, r18
    26c2:	9c 01       	movw	r18, r24
    26c4:	ad 01       	movw	r20, r26
    26c6:	cf 01       	movw	r24, r30
    26c8:	0e 94 83 13 	call	0x2706	; 0x2706 <prvInitialiseNewTask>
    26cc:	89 81       	ldd	r24, Y+1	; 0x01
    26ce:	9a 81       	ldd	r25, Y+2	; 0x02
    26d0:	0e 94 5d 14 	call	0x28ba	; 0x28ba <prvAddNewTaskToReadyList>
    26d4:	81 e0       	ldi	r24, 0x01	; 1
    26d6:	8b 83       	std	Y+3, r24	; 0x03
    26d8:	02 c0       	rjmp	.+4      	; 0x26de <xTaskCreate+0xd2>
    26da:	8f ef       	ldi	r24, 0xFF	; 255
    26dc:	8b 83       	std	Y+3, r24	; 0x03
    26de:	8b 81       	ldd	r24, Y+3	; 0x03
    26e0:	60 96       	adiw	r28, 0x10	; 16
    26e2:	0f b6       	in	r0, 0x3f	; 63
    26e4:	f8 94       	cli
    26e6:	de bf       	out	0x3e, r29	; 62
    26e8:	0f be       	out	0x3f, r0	; 63
    26ea:	cd bf       	out	0x3d, r28	; 61
    26ec:	df 91       	pop	r29
    26ee:	cf 91       	pop	r28
    26f0:	1f 91       	pop	r17
    26f2:	0f 91       	pop	r16
    26f4:	ff 90       	pop	r15
    26f6:	ef 90       	pop	r14
    26f8:	df 90       	pop	r13
    26fa:	cf 90       	pop	r12
    26fc:	bf 90       	pop	r11
    26fe:	af 90       	pop	r10
    2700:	9f 90       	pop	r9
    2702:	8f 90       	pop	r8
    2704:	08 95       	ret

00002706 <prvInitialiseNewTask>:
    2706:	8f 92       	push	r8
    2708:	9f 92       	push	r9
    270a:	af 92       	push	r10
    270c:	bf 92       	push	r11
    270e:	cf 92       	push	r12
    2710:	df 92       	push	r13
    2712:	ef 92       	push	r14
    2714:	0f 93       	push	r16
    2716:	1f 93       	push	r17
    2718:	cf 93       	push	r28
    271a:	df 93       	push	r29
    271c:	cd b7       	in	r28, 0x3d	; 61
    271e:	de b7       	in	r29, 0x3e	; 62
    2720:	64 97       	sbiw	r28, 0x14	; 20
    2722:	0f b6       	in	r0, 0x3f	; 63
    2724:	f8 94       	cli
    2726:	de bf       	out	0x3e, r29	; 62
    2728:	0f be       	out	0x3f, r0	; 63
    272a:	cd bf       	out	0x3d, r28	; 61
    272c:	9d 83       	std	Y+5, r25	; 0x05
    272e:	8c 83       	std	Y+4, r24	; 0x04
    2730:	7f 83       	std	Y+7, r23	; 0x07
    2732:	6e 83       	std	Y+6, r22	; 0x06
    2734:	28 87       	std	Y+8, r18	; 0x08
    2736:	39 87       	std	Y+9, r19	; 0x09
    2738:	4a 87       	std	Y+10, r20	; 0x0a
    273a:	5b 87       	std	Y+11, r21	; 0x0b
    273c:	1d 87       	std	Y+13, r17	; 0x0d
    273e:	0c 87       	std	Y+12, r16	; 0x0c
    2740:	ee 86       	std	Y+14, r14	; 0x0e
    2742:	d8 8a       	std	Y+16, r13	; 0x10
    2744:	cf 86       	std	Y+15, r12	; 0x0f
    2746:	ba 8a       	std	Y+18, r11	; 0x12
    2748:	a9 8a       	std	Y+17, r10	; 0x11
    274a:	9c 8a       	std	Y+20, r9	; 0x14
    274c:	8b 8a       	std	Y+19, r8	; 0x13
    274e:	28 85       	ldd	r18, Y+8	; 0x08
    2750:	39 85       	ldd	r19, Y+9	; 0x09
    2752:	89 89       	ldd	r24, Y+17	; 0x11
    2754:	9a 89       	ldd	r25, Y+18	; 0x12
    2756:	fc 01       	movw	r30, r24
    2758:	87 89       	ldd	r24, Z+23	; 0x17
    275a:	90 8d       	ldd	r25, Z+24	; 0x18
    275c:	a9 01       	movw	r20, r18
    275e:	65 ea       	ldi	r22, 0xA5	; 165
    2760:	70 e0       	ldi	r23, 0x00	; 0
    2762:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <memset>
    2766:	89 89       	ldd	r24, Y+17	; 0x11
    2768:	9a 89       	ldd	r25, Y+18	; 0x12
    276a:	fc 01       	movw	r30, r24
    276c:	27 89       	ldd	r18, Z+23	; 0x17
    276e:	30 8d       	ldd	r19, Z+24	; 0x18
    2770:	88 85       	ldd	r24, Y+8	; 0x08
    2772:	99 85       	ldd	r25, Y+9	; 0x09
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	82 0f       	add	r24, r18
    2778:	93 1f       	adc	r25, r19
    277a:	9b 83       	std	Y+3, r25	; 0x03
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	19 82       	std	Y+1, r1	; 0x01
    2780:	22 c0       	rjmp	.+68     	; 0x27c6 <prvInitialiseNewTask+0xc0>
    2782:	89 81       	ldd	r24, Y+1	; 0x01
    2784:	88 2f       	mov	r24, r24
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	29 81       	ldd	r18, Y+1	; 0x01
    278a:	22 2f       	mov	r18, r18
    278c:	30 e0       	ldi	r19, 0x00	; 0
    278e:	4e 81       	ldd	r20, Y+6	; 0x06
    2790:	5f 81       	ldd	r21, Y+7	; 0x07
    2792:	24 0f       	add	r18, r20
    2794:	35 1f       	adc	r19, r21
    2796:	f9 01       	movw	r30, r18
    2798:	40 81       	ld	r20, Z
    279a:	29 89       	ldd	r18, Y+17	; 0x11
    279c:	3a 89       	ldd	r19, Y+18	; 0x12
    279e:	82 0f       	add	r24, r18
    27a0:	93 1f       	adc	r25, r19
    27a2:	49 96       	adiw	r24, 0x19	; 25
    27a4:	fc 01       	movw	r30, r24
    27a6:	40 83       	st	Z, r20
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	88 2f       	mov	r24, r24
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	2e 81       	ldd	r18, Y+6	; 0x06
    27b0:	3f 81       	ldd	r19, Y+7	; 0x07
    27b2:	82 0f       	add	r24, r18
    27b4:	93 1f       	adc	r25, r19
    27b6:	fc 01       	movw	r30, r24
    27b8:	80 81       	ld	r24, Z
    27ba:	88 23       	and	r24, r24
    27bc:	09 f4       	brne	.+2      	; 0x27c0 <prvInitialiseNewTask+0xba>
    27be:	06 c0       	rjmp	.+12     	; 0x27cc <prvInitialiseNewTask+0xc6>
    27c0:	89 81       	ldd	r24, Y+1	; 0x01
    27c2:	8f 5f       	subi	r24, 0xFF	; 255
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	88 30       	cpi	r24, 0x08	; 8
    27ca:	d8 f2       	brcs	.-74     	; 0x2782 <prvInitialiseNewTask+0x7c>
    27cc:	89 89       	ldd	r24, Y+17	; 0x11
    27ce:	9a 89       	ldd	r25, Y+18	; 0x12
    27d0:	fc 01       	movw	r30, r24
    27d2:	10 a2       	std	Z+32, r1	; 0x20
    27d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    27d6:	84 30       	cpi	r24, 0x04	; 4
    27d8:	10 f0       	brcs	.+4      	; 0x27de <prvInitialiseNewTask+0xd8>
    27da:	83 e0       	ldi	r24, 0x03	; 3
    27dc:	8e 87       	std	Y+14, r24	; 0x0e
    27de:	89 89       	ldd	r24, Y+17	; 0x11
    27e0:	9a 89       	ldd	r25, Y+18	; 0x12
    27e2:	2e 85       	ldd	r18, Y+14	; 0x0e
    27e4:	fc 01       	movw	r30, r24
    27e6:	26 8b       	std	Z+22, r18	; 0x16
    27e8:	89 89       	ldd	r24, Y+17	; 0x11
    27ea:	9a 89       	ldd	r25, Y+18	; 0x12
    27ec:	2e 85       	ldd	r18, Y+14	; 0x0e
    27ee:	fc 01       	movw	r30, r24
    27f0:	23 a3       	std	Z+35, r18	; 0x23
    27f2:	89 89       	ldd	r24, Y+17	; 0x11
    27f4:	9a 89       	ldd	r25, Y+18	; 0x12
    27f6:	fc 01       	movw	r30, r24
    27f8:	14 a2       	std	Z+36, r1	; 0x24
    27fa:	89 89       	ldd	r24, Y+17	; 0x11
    27fc:	9a 89       	ldd	r25, Y+18	; 0x12
    27fe:	02 96       	adiw	r24, 0x02	; 2
    2800:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialiseItem>
    2804:	89 89       	ldd	r24, Y+17	; 0x11
    2806:	9a 89       	ldd	r25, Y+18	; 0x12
    2808:	0c 96       	adiw	r24, 0x0c	; 12
    280a:	0e 94 2c 07 	call	0xe58	; 0xe58 <vListInitialiseItem>
    280e:	89 89       	ldd	r24, Y+17	; 0x11
    2810:	9a 89       	ldd	r25, Y+18	; 0x12
    2812:	29 89       	ldd	r18, Y+17	; 0x11
    2814:	3a 89       	ldd	r19, Y+18	; 0x12
    2816:	fc 01       	movw	r30, r24
    2818:	31 87       	std	Z+9, r19	; 0x09
    281a:	20 87       	std	Z+8, r18	; 0x08
    281c:	8e 85       	ldd	r24, Y+14	; 0x0e
    281e:	88 2f       	mov	r24, r24
    2820:	90 e0       	ldi	r25, 0x00	; 0
    2822:	24 e0       	ldi	r18, 0x04	; 4
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	28 1b       	sub	r18, r24
    2828:	39 0b       	sbc	r19, r25
    282a:	89 89       	ldd	r24, Y+17	; 0x11
    282c:	9a 89       	ldd	r25, Y+18	; 0x12
    282e:	fc 01       	movw	r30, r24
    2830:	35 87       	std	Z+13, r19	; 0x0d
    2832:	24 87       	std	Z+12, r18	; 0x0c
    2834:	89 89       	ldd	r24, Y+17	; 0x11
    2836:	9a 89       	ldd	r25, Y+18	; 0x12
    2838:	29 89       	ldd	r18, Y+17	; 0x11
    283a:	3a 89       	ldd	r19, Y+18	; 0x12
    283c:	fc 01       	movw	r30, r24
    283e:	33 8b       	std	Z+19, r19	; 0x13
    2840:	22 8b       	std	Z+18, r18	; 0x12
    2842:	89 89       	ldd	r24, Y+17	; 0x11
    2844:	9a 89       	ldd	r25, Y+18	; 0x12
    2846:	fc 01       	movw	r30, r24
    2848:	16 a2       	std	Z+38, r1	; 0x26
    284a:	15 a2       	std	Z+37, r1	; 0x25
    284c:	89 89       	ldd	r24, Y+17	; 0x11
    284e:	9a 89       	ldd	r25, Y+18	; 0x12
    2850:	fc 01       	movw	r30, r24
    2852:	17 a2       	std	Z+39, r1	; 0x27
    2854:	10 a6       	std	Z+40, r1	; 0x28
    2856:	11 a6       	std	Z+41, r1	; 0x29
    2858:	12 a6       	std	Z+42, r1	; 0x2a
    285a:	89 89       	ldd	r24, Y+17	; 0x11
    285c:	9a 89       	ldd	r25, Y+18	; 0x12
    285e:	fc 01       	movw	r30, r24
    2860:	13 a6       	std	Z+43, r1	; 0x2b
    2862:	4c 85       	ldd	r20, Y+12	; 0x0c
    2864:	5d 85       	ldd	r21, Y+13	; 0x0d
    2866:	2c 81       	ldd	r18, Y+4	; 0x04
    2868:	3d 81       	ldd	r19, Y+5	; 0x05
    286a:	8a 81       	ldd	r24, Y+2	; 0x02
    286c:	9b 81       	ldd	r25, Y+3	; 0x03
    286e:	b9 01       	movw	r22, r18
    2870:	0e 94 59 08 	call	0x10b2	; 0x10b2 <pxPortInitialiseStack>
    2874:	9c 01       	movw	r18, r24
    2876:	89 89       	ldd	r24, Y+17	; 0x11
    2878:	9a 89       	ldd	r25, Y+18	; 0x12
    287a:	fc 01       	movw	r30, r24
    287c:	31 83       	std	Z+1, r19	; 0x01
    287e:	20 83       	st	Z, r18
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	89 2b       	or	r24, r25
    2886:	39 f0       	breq	.+14     	; 0x2896 <prvInitialiseNewTask+0x190>
    2888:	8f 85       	ldd	r24, Y+15	; 0x0f
    288a:	98 89       	ldd	r25, Y+16	; 0x10
    288c:	29 89       	ldd	r18, Y+17	; 0x11
    288e:	3a 89       	ldd	r19, Y+18	; 0x12
    2890:	fc 01       	movw	r30, r24
    2892:	31 83       	std	Z+1, r19	; 0x01
    2894:	20 83       	st	Z, r18
    2896:	64 96       	adiw	r28, 0x14	; 20
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ef 90       	pop	r14
    28ac:	df 90       	pop	r13
    28ae:	cf 90       	pop	r12
    28b0:	bf 90       	pop	r11
    28b2:	af 90       	pop	r10
    28b4:	9f 90       	pop	r9
    28b6:	8f 90       	pop	r8
    28b8:	08 95       	ret

000028ba <prvAddNewTaskToReadyList>:
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <prvAddNewTaskToReadyList+0x6>
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
    28c4:	9a 83       	std	Y+2, r25	; 0x02
    28c6:	89 83       	std	Y+1, r24	; 0x01
    28c8:	0f b6       	in	r0, 0x3f	; 63
    28ca:	f8 94       	cli
    28cc:	0f 92       	push	r0
    28ce:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    28d2:	8f 5f       	subi	r24, 0xFF	; 255
    28d4:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <uxCurrentNumberOfTasks>
    28d8:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    28dc:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    28e0:	89 2b       	or	r24, r25
    28e2:	69 f4       	brne	.+26     	; 0x28fe <prvAddNewTaskToReadyList+0x44>
    28e4:	89 81       	ldd	r24, Y+1	; 0x01
    28e6:	9a 81       	ldd	r25, Y+2	; 0x02
    28e8:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    28ec:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    28f0:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    28f4:	81 30       	cpi	r24, 0x01	; 1
    28f6:	c9 f4       	brne	.+50     	; 0x292a <prvAddNewTaskToReadyList+0x70>
    28f8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <prvInitialiseTaskLists>
    28fc:	16 c0       	rjmp	.+44     	; 0x292a <prvAddNewTaskToReadyList+0x70>
    28fe:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xSchedulerRunning>
    2902:	88 23       	and	r24, r24
    2904:	91 f4       	brne	.+36     	; 0x292a <prvAddNewTaskToReadyList+0x70>
    2906:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    290a:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    290e:	fc 01       	movw	r30, r24
    2910:	26 89       	ldd	r18, Z+22	; 0x16
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	fc 01       	movw	r30, r24
    2918:	86 89       	ldd	r24, Z+22	; 0x16
    291a:	82 17       	cp	r24, r18
    291c:	30 f0       	brcs	.+12     	; 0x292a <prvAddNewTaskToReadyList+0x70>
    291e:	89 81       	ldd	r24, Y+1	; 0x01
    2920:	9a 81       	ldd	r25, Y+2	; 0x02
    2922:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    2926:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    292a:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <uxTaskNumber>
    292e:	8f 5f       	subi	r24, 0xFF	; 255
    2930:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <uxTaskNumber>
    2934:	20 91 d1 05 	lds	r18, 0x05D1	; 0x8005d1 <uxTaskNumber>
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	fc 01       	movw	r30, r24
    293e:	21 a3       	std	Z+33, r18	; 0x21
    2940:	89 81       	ldd	r24, Y+1	; 0x01
    2942:	9a 81       	ldd	r25, Y+2	; 0x02
    2944:	fc 01       	movw	r30, r24
    2946:	96 89       	ldd	r25, Z+22	; 0x16
    2948:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    294c:	89 17       	cp	r24, r25
    294e:	30 f4       	brcc	.+12     	; 0x295c <prvAddNewTaskToReadyList+0xa2>
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	fc 01       	movw	r30, r24
    2956:	86 89       	ldd	r24, Z+22	; 0x16
    2958:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    295c:	89 81       	ldd	r24, Y+1	; 0x01
    295e:	9a 81       	ldd	r25, Y+2	; 0x02
    2960:	ac 01       	movw	r20, r24
    2962:	4e 5f       	subi	r20, 0xFE	; 254
    2964:	5f 4f       	sbci	r21, 0xFF	; 255
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	fc 01       	movw	r30, r24
    296c:	86 89       	ldd	r24, Z+22	; 0x16
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	c9 01       	movw	r24, r18
    2974:	88 0f       	add	r24, r24
    2976:	99 1f       	adc	r25, r25
    2978:	88 0f       	add	r24, r24
    297a:	99 1f       	adc	r25, r25
    297c:	88 0f       	add	r24, r24
    297e:	99 1f       	adc	r25, r25
    2980:	82 0f       	add	r24, r18
    2982:	93 1f       	adc	r25, r19
    2984:	84 58       	subi	r24, 0x84	; 132
    2986:	9a 4f       	sbci	r25, 0xFA	; 250
    2988:	ba 01       	movw	r22, r20
    298a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    298e:	0f 90       	pop	r0
    2990:	0f be       	out	0x3f, r0	; 63
    2992:	80 91 cd 05 	lds	r24, 0x05CD	; 0x8005cd <xSchedulerRunning>
    2996:	88 23       	and	r24, r24
    2998:	71 f0       	breq	.+28     	; 0x29b6 <prvAddNewTaskToReadyList+0xfc>
    299a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    299e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    29a2:	fc 01       	movw	r30, r24
    29a4:	26 89       	ldd	r18, Z+22	; 0x16
    29a6:	89 81       	ldd	r24, Y+1	; 0x01
    29a8:	9a 81       	ldd	r25, Y+2	; 0x02
    29aa:	fc 01       	movw	r30, r24
    29ac:	86 89       	ldd	r24, Z+22	; 0x16
    29ae:	28 17       	cp	r18, r24
    29b0:	10 f4       	brcc	.+4      	; 0x29b6 <prvAddNewTaskToReadyList+0xfc>
    29b2:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	df 91       	pop	r29
    29bc:	cf 91       	pop	r28
    29be:	08 95       	ret

000029c0 <vTaskDelayUntil>:
    29c0:	cf 93       	push	r28
    29c2:	df 93       	push	r29
    29c4:	cd b7       	in	r28, 0x3d	; 61
    29c6:	de b7       	in	r29, 0x3e	; 62
    29c8:	2a 97       	sbiw	r28, 0x0a	; 10
    29ca:	0f b6       	in	r0, 0x3f	; 63
    29cc:	f8 94       	cli
    29ce:	de bf       	out	0x3e, r29	; 62
    29d0:	0f be       	out	0x3f, r0	; 63
    29d2:	cd bf       	out	0x3d, r28	; 61
    29d4:	98 87       	std	Y+8, r25	; 0x08
    29d6:	8f 83       	std	Y+7, r24	; 0x07
    29d8:	7a 87       	std	Y+10, r23	; 0x0a
    29da:	69 87       	std	Y+9, r22	; 0x09
    29dc:	19 82       	std	Y+1, r1	; 0x01
    29de:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vTaskSuspendAll>
    29e2:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    29e6:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    29ea:	9b 83       	std	Y+3, r25	; 0x03
    29ec:	8a 83       	std	Y+2, r24	; 0x02
    29ee:	8f 81       	ldd	r24, Y+7	; 0x07
    29f0:	98 85       	ldd	r25, Y+8	; 0x08
    29f2:	fc 01       	movw	r30, r24
    29f4:	20 81       	ld	r18, Z
    29f6:	31 81       	ldd	r19, Z+1	; 0x01
    29f8:	89 85       	ldd	r24, Y+9	; 0x09
    29fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    29fc:	82 0f       	add	r24, r18
    29fe:	93 1f       	adc	r25, r19
    2a00:	9d 83       	std	Y+5, r25	; 0x05
    2a02:	8c 83       	std	Y+4, r24	; 0x04
    2a04:	8f 81       	ldd	r24, Y+7	; 0x07
    2a06:	98 85       	ldd	r25, Y+8	; 0x08
    2a08:	fc 01       	movw	r30, r24
    2a0a:	20 81       	ld	r18, Z
    2a0c:	31 81       	ldd	r19, Z+1	; 0x01
    2a0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a10:	9b 81       	ldd	r25, Y+3	; 0x03
    2a12:	82 17       	cp	r24, r18
    2a14:	93 07       	cpc	r25, r19
    2a16:	a0 f4       	brcc	.+40     	; 0x2a40 <vTaskDelayUntil+0x80>
    2a18:	8f 81       	ldd	r24, Y+7	; 0x07
    2a1a:	98 85       	ldd	r25, Y+8	; 0x08
    2a1c:	fc 01       	movw	r30, r24
    2a1e:	20 81       	ld	r18, Z
    2a20:	31 81       	ldd	r19, Z+1	; 0x01
    2a22:	8c 81       	ldd	r24, Y+4	; 0x04
    2a24:	9d 81       	ldd	r25, Y+5	; 0x05
    2a26:	82 17       	cp	r24, r18
    2a28:	93 07       	cpc	r25, r19
    2a2a:	e8 f4       	brcc	.+58     	; 0x2a66 <vTaskDelayUntil+0xa6>
    2a2c:	2c 81       	ldd	r18, Y+4	; 0x04
    2a2e:	3d 81       	ldd	r19, Y+5	; 0x05
    2a30:	8a 81       	ldd	r24, Y+2	; 0x02
    2a32:	9b 81       	ldd	r25, Y+3	; 0x03
    2a34:	82 17       	cp	r24, r18
    2a36:	93 07       	cpc	r25, r19
    2a38:	b0 f4       	brcc	.+44     	; 0x2a66 <vTaskDelayUntil+0xa6>
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	89 83       	std	Y+1, r24	; 0x01
    2a3e:	13 c0       	rjmp	.+38     	; 0x2a66 <vTaskDelayUntil+0xa6>
    2a40:	8f 81       	ldd	r24, Y+7	; 0x07
    2a42:	98 85       	ldd	r25, Y+8	; 0x08
    2a44:	fc 01       	movw	r30, r24
    2a46:	20 81       	ld	r18, Z
    2a48:	31 81       	ldd	r19, Z+1	; 0x01
    2a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2a4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2a4e:	82 17       	cp	r24, r18
    2a50:	93 07       	cpc	r25, r19
    2a52:	38 f0       	brcs	.+14     	; 0x2a62 <vTaskDelayUntil+0xa2>
    2a54:	2c 81       	ldd	r18, Y+4	; 0x04
    2a56:	3d 81       	ldd	r19, Y+5	; 0x05
    2a58:	8a 81       	ldd	r24, Y+2	; 0x02
    2a5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a5c:	82 17       	cp	r24, r18
    2a5e:	93 07       	cpc	r25, r19
    2a60:	10 f4       	brcc	.+4      	; 0x2a66 <vTaskDelayUntil+0xa6>
    2a62:	81 e0       	ldi	r24, 0x01	; 1
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	8f 81       	ldd	r24, Y+7	; 0x07
    2a68:	98 85       	ldd	r25, Y+8	; 0x08
    2a6a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a6c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a6e:	fc 01       	movw	r30, r24
    2a70:	31 83       	std	Z+1, r19	; 0x01
    2a72:	20 83       	st	Z, r18
    2a74:	89 81       	ldd	r24, Y+1	; 0x01
    2a76:	88 23       	and	r24, r24
    2a78:	59 f0       	breq	.+22     	; 0x2a90 <vTaskDelayUntil+0xd0>
    2a7a:	2c 81       	ldd	r18, Y+4	; 0x04
    2a7c:	3d 81       	ldd	r19, Y+5	; 0x05
    2a7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a80:	9b 81       	ldd	r25, Y+3	; 0x03
    2a82:	a9 01       	movw	r20, r18
    2a84:	48 1b       	sub	r20, r24
    2a86:	59 0b       	sbc	r21, r25
    2a88:	ca 01       	movw	r24, r20
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <prvAddCurrentTaskToDelayedList>
    2a90:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    2a94:	8e 83       	std	Y+6, r24	; 0x06
    2a96:	8e 81       	ldd	r24, Y+6	; 0x06
    2a98:	88 23       	and	r24, r24
    2a9a:	11 f4       	brne	.+4      	; 0x2aa0 <vTaskDelayUntil+0xe0>
    2a9c:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    2aa0:	2a 96       	adiw	r28, 0x0a	; 10
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	de bf       	out	0x3e, r29	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	cd bf       	out	0x3d, r28	; 61
    2aac:	df 91       	pop	r29
    2aae:	cf 91       	pop	r28
    2ab0:	08 95       	ret

00002ab2 <vTaskStartScheduler>:
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	cf 93       	push	r28
    2aba:	df 93       	push	r29
    2abc:	1f 92       	push	r1
    2abe:	cd b7       	in	r28, 0x3d	; 61
    2ac0:	de b7       	in	r29, 0x3e	; 62
    2ac2:	0f 2e       	mov	r0, r31
    2ac4:	f4 ed       	ldi	r31, 0xD4	; 212
    2ac6:	ef 2e       	mov	r14, r31
    2ac8:	f5 e0       	ldi	r31, 0x05	; 5
    2aca:	ff 2e       	mov	r15, r31
    2acc:	f0 2d       	mov	r31, r0
    2ace:	00 e0       	ldi	r16, 0x00	; 0
    2ad0:	20 e0       	ldi	r18, 0x00	; 0
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	45 e5       	ldi	r20, 0x55	; 85
    2ad6:	50 e0       	ldi	r21, 0x00	; 0
    2ad8:	60 e5       	ldi	r22, 0x50	; 80
    2ada:	71 e0       	ldi	r23, 0x01	; 1
    2adc:	84 ed       	ldi	r24, 0xD4	; 212
    2ade:	98 e1       	ldi	r25, 0x18	; 24
    2ae0:	0e 94 06 13 	call	0x260c	; 0x260c <xTaskCreate>
    2ae4:	89 83       	std	Y+1, r24	; 0x01
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	81 30       	cpi	r24, 0x01	; 1
    2aea:	81 f4       	brne	.+32     	; 0x2b0c <vTaskStartScheduler+0x5a>
    2aec:	f8 94       	cli
    2aee:	8f ef       	ldi	r24, 0xFF	; 255
    2af0:	9f ef       	ldi	r25, 0xFF	; 255
    2af2:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2af6:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <xSchedulerRunning>
    2b00:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <xTickCount+0x1>
    2b04:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <xTickCount>
    2b08:	0e 94 02 0a 	call	0x1404	; 0x1404 <xPortStartScheduler>
    2b0c:	0f 90       	pop	r0
    2b0e:	df 91       	pop	r29
    2b10:	cf 91       	pop	r28
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	08 95       	ret

00002b1a <vTaskSuspendAll>:
    2b1a:	cf 93       	push	r28
    2b1c:	df 93       	push	r29
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
    2b22:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2b26:	8f 5f       	subi	r24, 0xFF	; 255
    2b28:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <uxSchedulerSuspended>
    2b2c:	df 91       	pop	r29
    2b2e:	cf 91       	pop	r28
    2b30:	08 95       	ret

00002b32 <xTaskResumeAll>:
    2b32:	cf 93       	push	r28
    2b34:	df 93       	push	r29
    2b36:	00 d0       	rcall	.+0      	; 0x2b38 <xTaskResumeAll+0x6>
    2b38:	00 d0       	rcall	.+0      	; 0x2b3a <xTaskResumeAll+0x8>
    2b3a:	cd b7       	in	r28, 0x3d	; 61
    2b3c:	de b7       	in	r29, 0x3e	; 62
    2b3e:	1a 82       	std	Y+2, r1	; 0x02
    2b40:	19 82       	std	Y+1, r1	; 0x01
    2b42:	1b 82       	std	Y+3, r1	; 0x03
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	0f 92       	push	r0
    2b4a:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2b4e:	81 50       	subi	r24, 0x01	; 1
    2b50:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <uxSchedulerSuspended>
    2b54:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2b58:	88 23       	and	r24, r24
    2b5a:	09 f0       	breq	.+2      	; 0x2b5e <xTaskResumeAll+0x2c>
    2b5c:	77 c0       	rjmp	.+238    	; 0x2c4c <xTaskResumeAll+0x11a>
    2b5e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    2b62:	88 23       	and	r24, r24
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <xTaskResumeAll+0x36>
    2b66:	72 c0       	rjmp	.+228    	; 0x2c4c <xTaskResumeAll+0x11a>
    2b68:	49 c0       	rjmp	.+146    	; 0x2bfc <xTaskResumeAll+0xca>
    2b6a:	80 91 bb 05 	lds	r24, 0x05BB	; 0x8005bb <xPendingReadyList+0x5>
    2b6e:	90 91 bc 05 	lds	r25, 0x05BC	; 0x8005bc <xPendingReadyList+0x6>
    2b72:	fc 01       	movw	r30, r24
    2b74:	86 81       	ldd	r24, Z+6	; 0x06
    2b76:	97 81       	ldd	r25, Z+7	; 0x07
    2b78:	9a 83       	std	Y+2, r25	; 0x02
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    2b7c:	89 81       	ldd	r24, Y+1	; 0x01
    2b7e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b80:	0c 96       	adiw	r24, 0x0c	; 12
    2b82:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2b86:	89 81       	ldd	r24, Y+1	; 0x01
    2b88:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8a:	02 96       	adiw	r24, 0x02	; 2
    2b8c:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2b90:	89 81       	ldd	r24, Y+1	; 0x01
    2b92:	9a 81       	ldd	r25, Y+2	; 0x02
    2b94:	fc 01       	movw	r30, r24
    2b96:	96 89       	ldd	r25, Z+22	; 0x16
    2b98:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2b9c:	89 17       	cp	r24, r25
    2b9e:	30 f4       	brcc	.+12     	; 0x2bac <xTaskResumeAll+0x7a>
    2ba0:	89 81       	ldd	r24, Y+1	; 0x01
    2ba2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ba4:	fc 01       	movw	r30, r24
    2ba6:	86 89       	ldd	r24, Z+22	; 0x16
    2ba8:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	9a 81       	ldd	r25, Y+2	; 0x02
    2bb0:	ac 01       	movw	r20, r24
    2bb2:	4e 5f       	subi	r20, 0xFE	; 254
    2bb4:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb6:	89 81       	ldd	r24, Y+1	; 0x01
    2bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    2bba:	fc 01       	movw	r30, r24
    2bbc:	86 89       	ldd	r24, Z+22	; 0x16
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	c9 01       	movw	r24, r18
    2bc4:	88 0f       	add	r24, r24
    2bc6:	99 1f       	adc	r25, r25
    2bc8:	88 0f       	add	r24, r24
    2bca:	99 1f       	adc	r25, r25
    2bcc:	88 0f       	add	r24, r24
    2bce:	99 1f       	adc	r25, r25
    2bd0:	82 0f       	add	r24, r18
    2bd2:	93 1f       	adc	r25, r19
    2bd4:	84 58       	subi	r24, 0x84	; 132
    2bd6:	9a 4f       	sbci	r25, 0xFA	; 250
    2bd8:	ba 01       	movw	r22, r20
    2bda:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    2bde:	89 81       	ldd	r24, Y+1	; 0x01
    2be0:	9a 81       	ldd	r25, Y+2	; 0x02
    2be2:	fc 01       	movw	r30, r24
    2be4:	26 89       	ldd	r18, Z+22	; 0x16
    2be6:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2bea:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2bee:	fc 01       	movw	r30, r24
    2bf0:	86 89       	ldd	r24, Z+22	; 0x16
    2bf2:	28 17       	cp	r18, r24
    2bf4:	18 f0       	brcs	.+6      	; 0x2bfc <xTaskResumeAll+0xca>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2bfc:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <xPendingReadyList>
    2c00:	88 23       	and	r24, r24
    2c02:	09 f0       	breq	.+2      	; 0x2c06 <xTaskResumeAll+0xd4>
    2c04:	b2 cf       	rjmp	.-156    	; 0x2b6a <xTaskResumeAll+0x38>
    2c06:	89 81       	ldd	r24, Y+1	; 0x01
    2c08:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0a:	89 2b       	or	r24, r25
    2c0c:	11 f0       	breq	.+4      	; 0x2c12 <xTaskResumeAll+0xe0>
    2c0e:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <prvResetNextTaskUnblockTime>
    2c12:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxPendedTicks>
    2c16:	8c 83       	std	Y+4, r24	; 0x04
    2c18:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1a:	88 23       	and	r24, r24
    2c1c:	79 f0       	breq	.+30     	; 0x2c3c <xTaskResumeAll+0x10a>
    2c1e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <xTaskIncrementTick>
    2c22:	88 23       	and	r24, r24
    2c24:	19 f0       	breq	.+6      	; 0x2c2c <xTaskResumeAll+0xfa>
    2c26:	81 e0       	ldi	r24, 0x01	; 1
    2c28:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2c2c:	8c 81       	ldd	r24, Y+4	; 0x04
    2c2e:	81 50       	subi	r24, 0x01	; 1
    2c30:	8c 83       	std	Y+4, r24	; 0x04
    2c32:	8c 81       	ldd	r24, Y+4	; 0x04
    2c34:	88 23       	and	r24, r24
    2c36:	99 f7       	brne	.-26     	; 0x2c1e <xTaskResumeAll+0xec>
    2c38:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <uxPendedTicks>
    2c3c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <xYieldPending>
    2c40:	88 23       	and	r24, r24
    2c42:	21 f0       	breq	.+8      	; 0x2c4c <xTaskResumeAll+0x11a>
    2c44:	81 e0       	ldi	r24, 0x01	; 1
    2c46:	8b 83       	std	Y+3, r24	; 0x03
    2c48:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	0f 90       	pop	r0
    2c54:	0f 90       	pop	r0
    2c56:	0f 90       	pop	r0
    2c58:	0f 90       	pop	r0
    2c5a:	df 91       	pop	r29
    2c5c:	cf 91       	pop	r28
    2c5e:	08 95       	ret

00002c60 <xTaskGetTickCount>:
    2c60:	cf 93       	push	r28
    2c62:	df 93       	push	r29
    2c64:	00 d0       	rcall	.+0      	; 0x2c66 <xTaskGetTickCount+0x6>
    2c66:	cd b7       	in	r28, 0x3d	; 61
    2c68:	de b7       	in	r29, 0x3e	; 62
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	f8 94       	cli
    2c6e:	0f 92       	push	r0
    2c70:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    2c74:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    2c78:	9a 83       	std	Y+2, r25	; 0x02
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	0f 90       	pop	r0
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	89 81       	ldd	r24, Y+1	; 0x01
    2c82:	9a 81       	ldd	r25, Y+2	; 0x02
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	df 91       	pop	r29
    2c8a:	cf 91       	pop	r28
    2c8c:	08 95       	ret

00002c8e <xTaskIncrementTick>:
    2c8e:	cf 93       	push	r28
    2c90:	df 93       	push	r29
    2c92:	cd b7       	in	r28, 0x3d	; 61
    2c94:	de b7       	in	r29, 0x3e	; 62
    2c96:	29 97       	sbiw	r28, 0x09	; 9
    2c98:	0f b6       	in	r0, 0x3f	; 63
    2c9a:	f8 94       	cli
    2c9c:	de bf       	out	0x3e, r29	; 62
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	cd bf       	out	0x3d, r28	; 61
    2ca2:	19 82       	std	Y+1, r1	; 0x01
    2ca4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2ca8:	88 23       	and	r24, r24
    2caa:	09 f0       	breq	.+2      	; 0x2cae <xTaskIncrementTick+0x20>
    2cac:	c7 c0       	rjmp	.+398    	; 0x2e3c <xTaskIncrementTick+0x1ae>
    2cae:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    2cb2:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    2cb6:	01 96       	adiw	r24, 0x01	; 1
    2cb8:	9b 83       	std	Y+3, r25	; 0x03
    2cba:	8a 83       	std	Y+2, r24	; 0x02
    2cbc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbe:	9b 81       	ldd	r25, Y+3	; 0x03
    2cc0:	90 93 cb 05 	sts	0x05CB, r25	; 0x8005cb <xTickCount+0x1>
    2cc4:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <xTickCount>
    2cc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2cca:	9b 81       	ldd	r25, Y+3	; 0x03
    2ccc:	89 2b       	or	r24, r25
    2cce:	d9 f4       	brne	.+54     	; 0x2d06 <xTaskIncrementTick+0x78>
    2cd0:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2cd4:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2cd8:	9d 83       	std	Y+5, r25	; 0x05
    2cda:	8c 83       	std	Y+4, r24	; 0x04
    2cdc:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <pxOverflowDelayedTaskList>
    2ce0:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    2ce4:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <pxDelayedTaskList+0x1>
    2ce8:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <pxDelayedTaskList>
    2cec:	8c 81       	ldd	r24, Y+4	; 0x04
    2cee:	9d 81       	ldd	r25, Y+5	; 0x05
    2cf0:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    2cf4:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <pxOverflowDelayedTaskList>
    2cf8:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    2cfc:	8f 5f       	subi	r24, 0xFF	; 255
    2cfe:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <xNumOfOverflows>
    2d02:	0e 94 7a 19 	call	0x32f4	; 0x32f4 <prvResetNextTaskUnblockTime>
    2d06:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <xNextTaskUnblockTime>
    2d0a:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2d0e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d10:	3b 81       	ldd	r19, Y+3	; 0x03
    2d12:	28 17       	cp	r18, r24
    2d14:	39 07       	cpc	r19, r25
    2d16:	08 f4       	brcc	.+2      	; 0x2d1a <xTaskIncrementTick+0x8c>
    2d18:	77 c0       	rjmp	.+238    	; 0x2e08 <xTaskIncrementTick+0x17a>
    2d1a:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2d1e:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2d22:	fc 01       	movw	r30, r24
    2d24:	80 81       	ld	r24, Z
    2d26:	88 23       	and	r24, r24
    2d28:	39 f4       	brne	.+14     	; 0x2d38 <xTaskIncrementTick+0xaa>
    2d2a:	8f ef       	ldi	r24, 0xFF	; 255
    2d2c:	9f ef       	ldi	r25, 0xFF	; 255
    2d2e:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2d32:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2d36:	68 c0       	rjmp	.+208    	; 0x2e08 <xTaskIncrementTick+0x17a>
    2d38:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    2d3c:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    2d40:	fc 01       	movw	r30, r24
    2d42:	85 81       	ldd	r24, Z+5	; 0x05
    2d44:	96 81       	ldd	r25, Z+6	; 0x06
    2d46:	fc 01       	movw	r30, r24
    2d48:	86 81       	ldd	r24, Z+6	; 0x06
    2d4a:	97 81       	ldd	r25, Z+7	; 0x07
    2d4c:	9f 83       	std	Y+7, r25	; 0x07
    2d4e:	8e 83       	std	Y+6, r24	; 0x06
    2d50:	8e 81       	ldd	r24, Y+6	; 0x06
    2d52:	9f 81       	ldd	r25, Y+7	; 0x07
    2d54:	fc 01       	movw	r30, r24
    2d56:	82 81       	ldd	r24, Z+2	; 0x02
    2d58:	93 81       	ldd	r25, Z+3	; 0x03
    2d5a:	99 87       	std	Y+9, r25	; 0x09
    2d5c:	88 87       	std	Y+8, r24	; 0x08
    2d5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2d60:	3b 81       	ldd	r19, Y+3	; 0x03
    2d62:	88 85       	ldd	r24, Y+8	; 0x08
    2d64:	99 85       	ldd	r25, Y+9	; 0x09
    2d66:	28 17       	cp	r18, r24
    2d68:	39 07       	cpc	r19, r25
    2d6a:	38 f4       	brcc	.+14     	; 0x2d7a <xTaskIncrementTick+0xec>
    2d6c:	88 85       	ldd	r24, Y+8	; 0x08
    2d6e:	99 85       	ldd	r25, Y+9	; 0x09
    2d70:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    2d74:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    2d78:	47 c0       	rjmp	.+142    	; 0x2e08 <xTaskIncrementTick+0x17a>
    2d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    2d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    2d7e:	02 96       	adiw	r24, 0x02	; 2
    2d80:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2d84:	8e 81       	ldd	r24, Y+6	; 0x06
    2d86:	9f 81       	ldd	r25, Y+7	; 0x07
    2d88:	fc 01       	movw	r30, r24
    2d8a:	84 89       	ldd	r24, Z+20	; 0x14
    2d8c:	95 89       	ldd	r25, Z+21	; 0x15
    2d8e:	89 2b       	or	r24, r25
    2d90:	29 f0       	breq	.+10     	; 0x2d9c <xTaskIncrementTick+0x10e>
    2d92:	8e 81       	ldd	r24, Y+6	; 0x06
    2d94:	9f 81       	ldd	r25, Y+7	; 0x07
    2d96:	0c 96       	adiw	r24, 0x0c	; 12
    2d98:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2d9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2d9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2da0:	fc 01       	movw	r30, r24
    2da2:	96 89       	ldd	r25, Z+22	; 0x16
    2da4:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2da8:	89 17       	cp	r24, r25
    2daa:	30 f4       	brcc	.+12     	; 0x2db8 <xTaskIncrementTick+0x12a>
    2dac:	8e 81       	ldd	r24, Y+6	; 0x06
    2dae:	9f 81       	ldd	r25, Y+7	; 0x07
    2db0:	fc 01       	movw	r30, r24
    2db2:	86 89       	ldd	r24, Z+22	; 0x16
    2db4:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2db8:	8e 81       	ldd	r24, Y+6	; 0x06
    2dba:	9f 81       	ldd	r25, Y+7	; 0x07
    2dbc:	ac 01       	movw	r20, r24
    2dbe:	4e 5f       	subi	r20, 0xFE	; 254
    2dc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2dc2:	8e 81       	ldd	r24, Y+6	; 0x06
    2dc4:	9f 81       	ldd	r25, Y+7	; 0x07
    2dc6:	fc 01       	movw	r30, r24
    2dc8:	86 89       	ldd	r24, Z+22	; 0x16
    2dca:	28 2f       	mov	r18, r24
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	c9 01       	movw	r24, r18
    2dd0:	88 0f       	add	r24, r24
    2dd2:	99 1f       	adc	r25, r25
    2dd4:	88 0f       	add	r24, r24
    2dd6:	99 1f       	adc	r25, r25
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	82 0f       	add	r24, r18
    2dde:	93 1f       	adc	r25, r19
    2de0:	84 58       	subi	r24, 0x84	; 132
    2de2:	9a 4f       	sbci	r25, 0xFA	; 250
    2de4:	ba 01       	movw	r22, r20
    2de6:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    2dea:	8e 81       	ldd	r24, Y+6	; 0x06
    2dec:	9f 81       	ldd	r25, Y+7	; 0x07
    2dee:	fc 01       	movw	r30, r24
    2df0:	26 89       	ldd	r18, Z+22	; 0x16
    2df2:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2df6:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2dfa:	fc 01       	movw	r30, r24
    2dfc:	86 89       	ldd	r24, Z+22	; 0x16
    2dfe:	28 17       	cp	r18, r24
    2e00:	10 f0       	brcs	.+4      	; 0x2e06 <xTaskIncrementTick+0x178>
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	89 83       	std	Y+1, r24	; 0x01
    2e06:	89 cf       	rjmp	.-238    	; 0x2d1a <xTaskIncrementTick+0x8c>
    2e08:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2e0c:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2e10:	fc 01       	movw	r30, r24
    2e12:	86 89       	ldd	r24, Z+22	; 0x16
    2e14:	28 2f       	mov	r18, r24
    2e16:	30 e0       	ldi	r19, 0x00	; 0
    2e18:	c9 01       	movw	r24, r18
    2e1a:	88 0f       	add	r24, r24
    2e1c:	99 1f       	adc	r25, r25
    2e1e:	88 0f       	add	r24, r24
    2e20:	99 1f       	adc	r25, r25
    2e22:	88 0f       	add	r24, r24
    2e24:	99 1f       	adc	r25, r25
    2e26:	82 0f       	add	r24, r18
    2e28:	93 1f       	adc	r25, r19
    2e2a:	84 58       	subi	r24, 0x84	; 132
    2e2c:	9a 4f       	sbci	r25, 0xFA	; 250
    2e2e:	fc 01       	movw	r30, r24
    2e30:	80 81       	ld	r24, Z
    2e32:	82 30       	cpi	r24, 0x02	; 2
    2e34:	10 f0       	brcs	.+4      	; 0x2e3a <xTaskIncrementTick+0x1ac>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	89 83       	std	Y+1, r24	; 0x01
    2e3a:	05 c0       	rjmp	.+10     	; 0x2e46 <xTaskIncrementTick+0x1b8>
    2e3c:	80 91 ce 05 	lds	r24, 0x05CE	; 0x8005ce <uxPendedTicks>
    2e40:	8f 5f       	subi	r24, 0xFF	; 255
    2e42:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <uxPendedTicks>
    2e46:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <xYieldPending>
    2e4a:	88 23       	and	r24, r24
    2e4c:	11 f0       	breq	.+4      	; 0x2e52 <xTaskIncrementTick+0x1c4>
    2e4e:	81 e0       	ldi	r24, 0x01	; 1
    2e50:	89 83       	std	Y+1, r24	; 0x01
    2e52:	89 81       	ldd	r24, Y+1	; 0x01
    2e54:	29 96       	adiw	r28, 0x09	; 9
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	de bf       	out	0x3e, r29	; 62
    2e5c:	0f be       	out	0x3f, r0	; 63
    2e5e:	cd bf       	out	0x3d, r28	; 61
    2e60:	df 91       	pop	r29
    2e62:	cf 91       	pop	r28
    2e64:	08 95       	ret

00002e66 <vTaskSwitchContext>:
    2e66:	cf 93       	push	r28
    2e68:	df 93       	push	r29
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <vTaskSwitchContext+0x6>
    2e6c:	1f 92       	push	r1
    2e6e:	cd b7       	in	r28, 0x3d	; 61
    2e70:	de b7       	in	r29, 0x3e	; 62
    2e72:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2e76:	88 23       	and	r24, r24
    2e78:	21 f0       	breq	.+8      	; 0x2e82 <vTaskSwitchContext+0x1c>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    2e80:	71 c0       	rjmp	.+226    	; 0x2f64 <vTaskSwitchContext+0xfe>
    2e82:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <xYieldPending>
    2e86:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2e8a:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2e8e:	fc 01       	movw	r30, r24
    2e90:	85 a1       	ldd	r24, Z+37	; 0x25
    2e92:	96 a1       	ldd	r25, Z+38	; 0x26
    2e94:	0e 94 4a 06 	call	0xc94	; 0xc94 <switch_out>
    2e98:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	03 c0       	rjmp	.+6      	; 0x2ea6 <vTaskSwitchContext+0x40>
    2ea0:	89 81       	ldd	r24, Y+1	; 0x01
    2ea2:	81 50       	subi	r24, 0x01	; 1
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	89 81       	ldd	r24, Y+1	; 0x01
    2ea8:	28 2f       	mov	r18, r24
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	c9 01       	movw	r24, r18
    2eae:	88 0f       	add	r24, r24
    2eb0:	99 1f       	adc	r25, r25
    2eb2:	88 0f       	add	r24, r24
    2eb4:	99 1f       	adc	r25, r25
    2eb6:	88 0f       	add	r24, r24
    2eb8:	99 1f       	adc	r25, r25
    2eba:	82 0f       	add	r24, r18
    2ebc:	93 1f       	adc	r25, r19
    2ebe:	84 58       	subi	r24, 0x84	; 132
    2ec0:	9a 4f       	sbci	r25, 0xFA	; 250
    2ec2:	fc 01       	movw	r30, r24
    2ec4:	80 81       	ld	r24, Z
    2ec6:	88 23       	and	r24, r24
    2ec8:	59 f3       	breq	.-42     	; 0x2ea0 <vTaskSwitchContext+0x3a>
    2eca:	89 81       	ldd	r24, Y+1	; 0x01
    2ecc:	28 2f       	mov	r18, r24
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	c9 01       	movw	r24, r18
    2ed2:	88 0f       	add	r24, r24
    2ed4:	99 1f       	adc	r25, r25
    2ed6:	88 0f       	add	r24, r24
    2ed8:	99 1f       	adc	r25, r25
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	82 0f       	add	r24, r18
    2ee0:	93 1f       	adc	r25, r19
    2ee2:	84 58       	subi	r24, 0x84	; 132
    2ee4:	9a 4f       	sbci	r25, 0xFA	; 250
    2ee6:	9b 83       	std	Y+3, r25	; 0x03
    2ee8:	8a 83       	std	Y+2, r24	; 0x02
    2eea:	8a 81       	ldd	r24, Y+2	; 0x02
    2eec:	9b 81       	ldd	r25, Y+3	; 0x03
    2eee:	fc 01       	movw	r30, r24
    2ef0:	81 81       	ldd	r24, Z+1	; 0x01
    2ef2:	92 81       	ldd	r25, Z+2	; 0x02
    2ef4:	fc 01       	movw	r30, r24
    2ef6:	22 81       	ldd	r18, Z+2	; 0x02
    2ef8:	33 81       	ldd	r19, Z+3	; 0x03
    2efa:	8a 81       	ldd	r24, Y+2	; 0x02
    2efc:	9b 81       	ldd	r25, Y+3	; 0x03
    2efe:	fc 01       	movw	r30, r24
    2f00:	32 83       	std	Z+2, r19	; 0x02
    2f02:	21 83       	std	Z+1, r18	; 0x01
    2f04:	8a 81       	ldd	r24, Y+2	; 0x02
    2f06:	9b 81       	ldd	r25, Y+3	; 0x03
    2f08:	fc 01       	movw	r30, r24
    2f0a:	21 81       	ldd	r18, Z+1	; 0x01
    2f0c:	32 81       	ldd	r19, Z+2	; 0x02
    2f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f10:	9b 81       	ldd	r25, Y+3	; 0x03
    2f12:	03 96       	adiw	r24, 0x03	; 3
    2f14:	28 17       	cp	r18, r24
    2f16:	39 07       	cpc	r19, r25
    2f18:	69 f4       	brne	.+26     	; 0x2f34 <vTaskSwitchContext+0xce>
    2f1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f1c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f1e:	fc 01       	movw	r30, r24
    2f20:	81 81       	ldd	r24, Z+1	; 0x01
    2f22:	92 81       	ldd	r25, Z+2	; 0x02
    2f24:	fc 01       	movw	r30, r24
    2f26:	22 81       	ldd	r18, Z+2	; 0x02
    2f28:	33 81       	ldd	r19, Z+3	; 0x03
    2f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f2e:	fc 01       	movw	r30, r24
    2f30:	32 83       	std	Z+2, r19	; 0x02
    2f32:	21 83       	std	Z+1, r18	; 0x01
    2f34:	8a 81       	ldd	r24, Y+2	; 0x02
    2f36:	9b 81       	ldd	r25, Y+3	; 0x03
    2f38:	fc 01       	movw	r30, r24
    2f3a:	81 81       	ldd	r24, Z+1	; 0x01
    2f3c:	92 81       	ldd	r25, Z+2	; 0x02
    2f3e:	fc 01       	movw	r30, r24
    2f40:	86 81       	ldd	r24, Z+6	; 0x06
    2f42:	97 81       	ldd	r25, Z+7	; 0x07
    2f44:	90 93 7b 05 	sts	0x057B, r25	; 0x80057b <pxCurrentTCB+0x1>
    2f48:	80 93 7a 05 	sts	0x057A, r24	; 0x80057a <pxCurrentTCB>
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    2f52:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2f56:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2f5a:	fc 01       	movw	r30, r24
    2f5c:	85 a1       	ldd	r24, Z+37	; 0x25
    2f5e:	96 a1       	ldd	r25, Z+38	; 0x26
    2f60:	0e 94 40 06 	call	0xc80	; 0xc80 <switch_in>
    2f64:	0f 90       	pop	r0
    2f66:	0f 90       	pop	r0
    2f68:	0f 90       	pop	r0
    2f6a:	df 91       	pop	r29
    2f6c:	cf 91       	pop	r28
    2f6e:	08 95       	ret

00002f70 <vTaskPlaceOnEventList>:
    2f70:	cf 93       	push	r28
    2f72:	df 93       	push	r29
    2f74:	00 d0       	rcall	.+0      	; 0x2f76 <vTaskPlaceOnEventList+0x6>
    2f76:	00 d0       	rcall	.+0      	; 0x2f78 <vTaskPlaceOnEventList+0x8>
    2f78:	cd b7       	in	r28, 0x3d	; 61
    2f7a:	de b7       	in	r29, 0x3e	; 62
    2f7c:	9a 83       	std	Y+2, r25	; 0x02
    2f7e:	89 83       	std	Y+1, r24	; 0x01
    2f80:	7c 83       	std	Y+4, r23	; 0x04
    2f82:	6b 83       	std	Y+3, r22	; 0x03
    2f84:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    2f88:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    2f8c:	9c 01       	movw	r18, r24
    2f8e:	24 5f       	subi	r18, 0xF4	; 244
    2f90:	3f 4f       	sbci	r19, 0xFF	; 255
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	b9 01       	movw	r22, r18
    2f98:	0e 94 8b 07 	call	0xf16	; 0xf16 <vListInsert>
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	9c 81       	ldd	r25, Y+4	; 0x04
    2fa0:	61 e0       	ldi	r22, 0x01	; 1
    2fa2:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <prvAddCurrentTaskToDelayedList>
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	08 95       	ret

00002fb4 <xTaskRemoveFromEventList>:
    2fb4:	cf 93       	push	r28
    2fb6:	df 93       	push	r29
    2fb8:	00 d0       	rcall	.+0      	; 0x2fba <xTaskRemoveFromEventList+0x6>
    2fba:	00 d0       	rcall	.+0      	; 0x2fbc <xTaskRemoveFromEventList+0x8>
    2fbc:	1f 92       	push	r1
    2fbe:	cd b7       	in	r28, 0x3d	; 61
    2fc0:	de b7       	in	r29, 0x3e	; 62
    2fc2:	9d 83       	std	Y+5, r25	; 0x05
    2fc4:	8c 83       	std	Y+4, r24	; 0x04
    2fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fca:	fc 01       	movw	r30, r24
    2fcc:	85 81       	ldd	r24, Z+5	; 0x05
    2fce:	96 81       	ldd	r25, Z+6	; 0x06
    2fd0:	fc 01       	movw	r30, r24
    2fd2:	86 81       	ldd	r24, Z+6	; 0x06
    2fd4:	97 81       	ldd	r25, Z+7	; 0x07
    2fd6:	9b 83       	std	Y+3, r25	; 0x03
    2fd8:	8a 83       	std	Y+2, r24	; 0x02
    2fda:	8a 81       	ldd	r24, Y+2	; 0x02
    2fdc:	9b 81       	ldd	r25, Y+3	; 0x03
    2fde:	0c 96       	adiw	r24, 0x0c	; 12
    2fe0:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2fe4:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <uxSchedulerSuspended>
    2fe8:	88 23       	and	r24, r24
    2fea:	69 f5       	brne	.+90     	; 0x3046 <xTaskRemoveFromEventList+0x92>
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	02 96       	adiw	r24, 0x02	; 2
    2ff2:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    2ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff8:	9b 81       	ldd	r25, Y+3	; 0x03
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	96 89       	ldd	r25, Z+22	; 0x16
    2ffe:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    3002:	89 17       	cp	r24, r25
    3004:	30 f4       	brcc	.+12     	; 0x3012 <xTaskRemoveFromEventList+0x5e>
    3006:	8a 81       	ldd	r24, Y+2	; 0x02
    3008:	9b 81       	ldd	r25, Y+3	; 0x03
    300a:	fc 01       	movw	r30, r24
    300c:	86 89       	ldd	r24, Z+22	; 0x16
    300e:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    3012:	8a 81       	ldd	r24, Y+2	; 0x02
    3014:	9b 81       	ldd	r25, Y+3	; 0x03
    3016:	ac 01       	movw	r20, r24
    3018:	4e 5f       	subi	r20, 0xFE	; 254
    301a:	5f 4f       	sbci	r21, 0xFF	; 255
    301c:	8a 81       	ldd	r24, Y+2	; 0x02
    301e:	9b 81       	ldd	r25, Y+3	; 0x03
    3020:	fc 01       	movw	r30, r24
    3022:	86 89       	ldd	r24, Z+22	; 0x16
    3024:	28 2f       	mov	r18, r24
    3026:	30 e0       	ldi	r19, 0x00	; 0
    3028:	c9 01       	movw	r24, r18
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	88 0f       	add	r24, r24
    3030:	99 1f       	adc	r25, r25
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	82 0f       	add	r24, r18
    3038:	93 1f       	adc	r25, r19
    303a:	84 58       	subi	r24, 0x84	; 132
    303c:	9a 4f       	sbci	r25, 0xFA	; 250
    303e:	ba 01       	movw	r22, r20
    3040:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    3044:	08 c0       	rjmp	.+16     	; 0x3056 <xTaskRemoveFromEventList+0xa2>
    3046:	8a 81       	ldd	r24, Y+2	; 0x02
    3048:	9b 81       	ldd	r25, Y+3	; 0x03
    304a:	0c 96       	adiw	r24, 0x0c	; 12
    304c:	bc 01       	movw	r22, r24
    304e:	86 eb       	ldi	r24, 0xB6	; 182
    3050:	95 e0       	ldi	r25, 0x05	; 5
    3052:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	9b 81       	ldd	r25, Y+3	; 0x03
    305a:	fc 01       	movw	r30, r24
    305c:	26 89       	ldd	r18, Z+22	; 0x16
    305e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3062:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3066:	fc 01       	movw	r30, r24
    3068:	86 89       	ldd	r24, Z+22	; 0x16
    306a:	82 17       	cp	r24, r18
    306c:	30 f4       	brcc	.+12     	; 0x307a <xTaskRemoveFromEventList+0xc6>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	89 83       	std	Y+1, r24	; 0x01
    3072:	81 e0       	ldi	r24, 0x01	; 1
    3074:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    3078:	01 c0       	rjmp	.+2      	; 0x307c <xTaskRemoveFromEventList+0xc8>
    307a:	19 82       	std	Y+1, r1	; 0x01
    307c:	89 81       	ldd	r24, Y+1	; 0x01
    307e:	0f 90       	pop	r0
    3080:	0f 90       	pop	r0
    3082:	0f 90       	pop	r0
    3084:	0f 90       	pop	r0
    3086:	0f 90       	pop	r0
    3088:	df 91       	pop	r29
    308a:	cf 91       	pop	r28
    308c:	08 95       	ret

0000308e <vTaskSetTimeOutState>:
    308e:	cf 93       	push	r28
    3090:	df 93       	push	r29
    3092:	00 d0       	rcall	.+0      	; 0x3094 <vTaskSetTimeOutState+0x6>
    3094:	cd b7       	in	r28, 0x3d	; 61
    3096:	de b7       	in	r29, 0x3e	; 62
    3098:	9a 83       	std	Y+2, r25	; 0x02
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	20 91 d0 05 	lds	r18, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    30a0:	89 81       	ldd	r24, Y+1	; 0x01
    30a2:	9a 81       	ldd	r25, Y+2	; 0x02
    30a4:	fc 01       	movw	r30, r24
    30a6:	20 83       	st	Z, r18
    30a8:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <xTickCount>
    30ac:	30 91 cb 05 	lds	r19, 0x05CB	; 0x8005cb <xTickCount+0x1>
    30b0:	89 81       	ldd	r24, Y+1	; 0x01
    30b2:	9a 81       	ldd	r25, Y+2	; 0x02
    30b4:	fc 01       	movw	r30, r24
    30b6:	32 83       	std	Z+2, r19	; 0x02
    30b8:	21 83       	std	Z+1, r18	; 0x01
    30ba:	0f 90       	pop	r0
    30bc:	0f 90       	pop	r0
    30be:	df 91       	pop	r29
    30c0:	cf 91       	pop	r28
    30c2:	08 95       	ret

000030c4 <xTaskCheckForTimeOut>:
    30c4:	cf 93       	push	r28
    30c6:	df 93       	push	r29
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	27 97       	sbiw	r28, 0x07	; 7
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	9d 83       	std	Y+5, r25	; 0x05
    30da:	8c 83       	std	Y+4, r24	; 0x04
    30dc:	7f 83       	std	Y+7, r23	; 0x07
    30de:	6e 83       	std	Y+6, r22	; 0x06
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	0f 92       	push	r0
    30e6:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    30ea:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    30ee:	9b 83       	std	Y+3, r25	; 0x03
    30f0:	8a 83       	std	Y+2, r24	; 0x02
    30f2:	8c 81       	ldd	r24, Y+4	; 0x04
    30f4:	9d 81       	ldd	r25, Y+5	; 0x05
    30f6:	fc 01       	movw	r30, r24
    30f8:	90 81       	ld	r25, Z
    30fa:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <xNumOfOverflows>
    30fe:	98 17       	cp	r25, r24
    3100:	69 f0       	breq	.+26     	; 0x311c <xTaskCheckForTimeOut+0x58>
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	9d 81       	ldd	r25, Y+5	; 0x05
    3106:	fc 01       	movw	r30, r24
    3108:	21 81       	ldd	r18, Z+1	; 0x01
    310a:	32 81       	ldd	r19, Z+2	; 0x02
    310c:	8a 81       	ldd	r24, Y+2	; 0x02
    310e:	9b 81       	ldd	r25, Y+3	; 0x03
    3110:	82 17       	cp	r24, r18
    3112:	93 07       	cpc	r25, r19
    3114:	18 f0       	brcs	.+6      	; 0x311c <xTaskCheckForTimeOut+0x58>
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	89 83       	std	Y+1, r24	; 0x01
    311a:	30 c0       	rjmp	.+96     	; 0x317c <xTaskCheckForTimeOut+0xb8>
    311c:	8c 81       	ldd	r24, Y+4	; 0x04
    311e:	9d 81       	ldd	r25, Y+5	; 0x05
    3120:	fc 01       	movw	r30, r24
    3122:	81 81       	ldd	r24, Z+1	; 0x01
    3124:	92 81       	ldd	r25, Z+2	; 0x02
    3126:	2a 81       	ldd	r18, Y+2	; 0x02
    3128:	3b 81       	ldd	r19, Y+3	; 0x03
    312a:	28 1b       	sub	r18, r24
    312c:	39 0b       	sbc	r19, r25
    312e:	8e 81       	ldd	r24, Y+6	; 0x06
    3130:	9f 81       	ldd	r25, Y+7	; 0x07
    3132:	fc 01       	movw	r30, r24
    3134:	80 81       	ld	r24, Z
    3136:	91 81       	ldd	r25, Z+1	; 0x01
    3138:	28 17       	cp	r18, r24
    313a:	39 07       	cpc	r19, r25
    313c:	e8 f4       	brcc	.+58     	; 0x3178 <xTaskCheckForTimeOut+0xb4>
    313e:	8e 81       	ldd	r24, Y+6	; 0x06
    3140:	9f 81       	ldd	r25, Y+7	; 0x07
    3142:	fc 01       	movw	r30, r24
    3144:	20 81       	ld	r18, Z
    3146:	31 81       	ldd	r19, Z+1	; 0x01
    3148:	8c 81       	ldd	r24, Y+4	; 0x04
    314a:	9d 81       	ldd	r25, Y+5	; 0x05
    314c:	fc 01       	movw	r30, r24
    314e:	41 81       	ldd	r20, Z+1	; 0x01
    3150:	52 81       	ldd	r21, Z+2	; 0x02
    3152:	8a 81       	ldd	r24, Y+2	; 0x02
    3154:	9b 81       	ldd	r25, Y+3	; 0x03
    3156:	ba 01       	movw	r22, r20
    3158:	68 1b       	sub	r22, r24
    315a:	79 0b       	sbc	r23, r25
    315c:	cb 01       	movw	r24, r22
    315e:	28 0f       	add	r18, r24
    3160:	39 1f       	adc	r19, r25
    3162:	8e 81       	ldd	r24, Y+6	; 0x06
    3164:	9f 81       	ldd	r25, Y+7	; 0x07
    3166:	fc 01       	movw	r30, r24
    3168:	31 83       	std	Z+1, r19	; 0x01
    316a:	20 83       	st	Z, r18
    316c:	8c 81       	ldd	r24, Y+4	; 0x04
    316e:	9d 81       	ldd	r25, Y+5	; 0x05
    3170:	0e 94 47 18 	call	0x308e	; 0x308e <vTaskSetTimeOutState>
    3174:	19 82       	std	Y+1, r1	; 0x01
    3176:	02 c0       	rjmp	.+4      	; 0x317c <xTaskCheckForTimeOut+0xb8>
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	0f 90       	pop	r0
    317e:	0f be       	out	0x3f, r0	; 63
    3180:	89 81       	ldd	r24, Y+1	; 0x01
    3182:	27 96       	adiw	r28, 0x07	; 7
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	f8 94       	cli
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	cd bf       	out	0x3d, r28	; 61
    318e:	df 91       	pop	r29
    3190:	cf 91       	pop	r28
    3192:	08 95       	ret

00003194 <vTaskMissedYield>:
    3194:	cf 93       	push	r28
    3196:	df 93       	push	r29
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	81 e0       	ldi	r24, 0x01	; 1
    319e:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <xYieldPending>
    31a2:	df 91       	pop	r29
    31a4:	cf 91       	pop	r28
    31a6:	08 95       	ret

000031a8 <prvIdleTask>:
    31a8:	cf 93       	push	r28
    31aa:	df 93       	push	r29
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <prvIdleTask+0x6>
    31ae:	cd b7       	in	r28, 0x3d	; 61
    31b0:	de b7       	in	r29, 0x3e	; 62
    31b2:	9a 83       	std	Y+2, r25	; 0x02
    31b4:	89 83       	std	Y+1, r24	; 0x01
    31b6:	0e 94 23 19 	call	0x3246	; 0x3246 <prvCheckTasksWaitingTermination>
    31ba:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <pxReadyTasksLists>
    31be:	82 30       	cpi	r24, 0x02	; 2
    31c0:	10 f0       	brcs	.+4      	; 0x31c6 <prvIdleTask+0x1e>
    31c2:	0e 94 37 0a 	call	0x146e	; 0x146e <vPortYield>
    31c6:	0e 94 bb 04 	call	0x976	; 0x976 <vApplicationIdleHook>
    31ca:	f5 cf       	rjmp	.-22     	; 0x31b6 <prvIdleTask+0xe>

000031cc <prvInitialiseTaskLists>:
    31cc:	cf 93       	push	r28
    31ce:	df 93       	push	r29
    31d0:	1f 92       	push	r1
    31d2:	cd b7       	in	r28, 0x3d	; 61
    31d4:	de b7       	in	r29, 0x3e	; 62
    31d6:	19 82       	std	Y+1, r1	; 0x01
    31d8:	13 c0       	rjmp	.+38     	; 0x3200 <prvInitialiseTaskLists+0x34>
    31da:	89 81       	ldd	r24, Y+1	; 0x01
    31dc:	28 2f       	mov	r18, r24
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	c9 01       	movw	r24, r18
    31e2:	88 0f       	add	r24, r24
    31e4:	99 1f       	adc	r25, r25
    31e6:	88 0f       	add	r24, r24
    31e8:	99 1f       	adc	r25, r25
    31ea:	88 0f       	add	r24, r24
    31ec:	99 1f       	adc	r25, r25
    31ee:	82 0f       	add	r24, r18
    31f0:	93 1f       	adc	r25, r19
    31f2:	84 58       	subi	r24, 0x84	; 132
    31f4:	9a 4f       	sbci	r25, 0xFA	; 250
    31f6:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	8f 5f       	subi	r24, 0xFF	; 255
    31fe:	89 83       	std	Y+1, r24	; 0x01
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	84 30       	cpi	r24, 0x04	; 4
    3204:	50 f3       	brcs	.-44     	; 0x31da <prvInitialiseTaskLists+0xe>
    3206:	80 ea       	ldi	r24, 0xA0	; 160
    3208:	95 e0       	ldi	r25, 0x05	; 5
    320a:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    320e:	89 ea       	ldi	r24, 0xA9	; 169
    3210:	95 e0       	ldi	r25, 0x05	; 5
    3212:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    3216:	86 eb       	ldi	r24, 0xB6	; 182
    3218:	95 e0       	ldi	r25, 0x05	; 5
    321a:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    321e:	8f eb       	ldi	r24, 0xBF	; 191
    3220:	95 e0       	ldi	r25, 0x05	; 5
    3222:	0e 94 f7 06 	call	0xdee	; 0xdee <vListInitialise>
    3226:	80 ea       	ldi	r24, 0xA0	; 160
    3228:	95 e0       	ldi	r25, 0x05	; 5
    322a:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <pxDelayedTaskList+0x1>
    322e:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <pxDelayedTaskList>
    3232:	89 ea       	ldi	r24, 0xA9	; 169
    3234:	95 e0       	ldi	r25, 0x05	; 5
    3236:	90 93 b5 05 	sts	0x05B5, r25	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    323a:	80 93 b4 05 	sts	0x05B4, r24	; 0x8005b4 <pxOverflowDelayedTaskList>
    323e:	0f 90       	pop	r0
    3240:	df 91       	pop	r29
    3242:	cf 91       	pop	r28
    3244:	08 95       	ret

00003246 <prvCheckTasksWaitingTermination>:
    3246:	cf 93       	push	r28
    3248:	df 93       	push	r29
    324a:	00 d0       	rcall	.+0      	; 0x324c <prvCheckTasksWaitingTermination+0x6>
    324c:	1f 92       	push	r1
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	2f c0       	rjmp	.+94     	; 0x32b2 <prvCheckTasksWaitingTermination+0x6c>
    3254:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <vTaskSuspendAll>
    3258:	90 91 bf 05 	lds	r25, 0x05BF	; 0x8005bf <xTasksWaitingTermination>
    325c:	81 e0       	ldi	r24, 0x01	; 1
    325e:	99 23       	and	r25, r25
    3260:	09 f0       	breq	.+2      	; 0x3264 <prvCheckTasksWaitingTermination+0x1e>
    3262:	80 e0       	ldi	r24, 0x00	; 0
    3264:	89 83       	std	Y+1, r24	; 0x01
    3266:	0e 94 99 15 	call	0x2b32	; 0x2b32 <xTaskResumeAll>
    326a:	89 81       	ldd	r24, Y+1	; 0x01
    326c:	88 23       	and	r24, r24
    326e:	09 f5       	brne	.+66     	; 0x32b2 <prvCheckTasksWaitingTermination+0x6c>
    3270:	0f b6       	in	r0, 0x3f	; 63
    3272:	f8 94       	cli
    3274:	0f 92       	push	r0
    3276:	80 91 c4 05 	lds	r24, 0x05C4	; 0x8005c4 <xTasksWaitingTermination+0x5>
    327a:	90 91 c5 05 	lds	r25, 0x05C5	; 0x8005c5 <xTasksWaitingTermination+0x6>
    327e:	fc 01       	movw	r30, r24
    3280:	86 81       	ldd	r24, Z+6	; 0x06
    3282:	97 81       	ldd	r25, Z+7	; 0x07
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	9b 81       	ldd	r25, Y+3	; 0x03
    328c:	02 96       	adiw	r24, 0x02	; 2
    328e:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    3292:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <uxCurrentNumberOfTasks>
    3296:	81 50       	subi	r24, 0x01	; 1
    3298:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <uxCurrentNumberOfTasks>
    329c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    32a0:	81 50       	subi	r24, 0x01	; 1
    32a2:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    32a6:	0f 90       	pop	r0
    32a8:	0f be       	out	0x3f, r0	; 63
    32aa:	8a 81       	ldd	r24, Y+2	; 0x02
    32ac:	9b 81       	ldd	r25, Y+3	; 0x03
    32ae:	0e 94 63 19 	call	0x32c6	; 0x32c6 <prvDeleteTCB>
    32b2:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <uxDeletedTasksWaitingCleanUp>
    32b6:	88 23       	and	r24, r24
    32b8:	69 f6       	brne	.-102    	; 0x3254 <prvCheckTasksWaitingTermination+0xe>
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	df 91       	pop	r29
    32c2:	cf 91       	pop	r28
    32c4:	08 95       	ret

000032c6 <prvDeleteTCB>:
    32c6:	cf 93       	push	r28
    32c8:	df 93       	push	r29
    32ca:	00 d0       	rcall	.+0      	; 0x32cc <prvDeleteTCB+0x6>
    32cc:	cd b7       	in	r28, 0x3d	; 61
    32ce:	de b7       	in	r29, 0x3e	; 62
    32d0:	9a 83       	std	Y+2, r25	; 0x02
    32d2:	89 83       	std	Y+1, r24	; 0x01
    32d4:	89 81       	ldd	r24, Y+1	; 0x01
    32d6:	9a 81       	ldd	r25, Y+2	; 0x02
    32d8:	fc 01       	movw	r30, r24
    32da:	87 89       	ldd	r24, Z+23	; 0x17
    32dc:	90 8d       	ldd	r25, Z+24	; 0x18
    32de:	0e 94 a6 0b 	call	0x174c	; 0x174c <vPortFree>
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	9a 81       	ldd	r25, Y+2	; 0x02
    32e6:	0e 94 a6 0b 	call	0x174c	; 0x174c <vPortFree>
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	df 91       	pop	r29
    32f0:	cf 91       	pop	r28
    32f2:	08 95       	ret

000032f4 <prvResetNextTaskUnblockTime>:
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <prvResetNextTaskUnblockTime+0x6>
    32fa:	cd b7       	in	r28, 0x3d	; 61
    32fc:	de b7       	in	r29, 0x3e	; 62
    32fe:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    3302:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    3306:	fc 01       	movw	r30, r24
    3308:	80 81       	ld	r24, Z
    330a:	88 23       	and	r24, r24
    330c:	39 f4       	brne	.+14     	; 0x331c <prvResetNextTaskUnblockTime+0x28>
    330e:	8f ef       	ldi	r24, 0xFF	; 255
    3310:	9f ef       	ldi	r25, 0xFF	; 255
    3312:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    3316:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    331a:	15 c0       	rjmp	.+42     	; 0x3346 <prvResetNextTaskUnblockTime+0x52>
    331c:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    3320:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    3324:	fc 01       	movw	r30, r24
    3326:	85 81       	ldd	r24, Z+5	; 0x05
    3328:	96 81       	ldd	r25, Z+6	; 0x06
    332a:	fc 01       	movw	r30, r24
    332c:	86 81       	ldd	r24, Z+6	; 0x06
    332e:	97 81       	ldd	r25, Z+7	; 0x07
    3330:	9a 83       	std	Y+2, r25	; 0x02
    3332:	89 83       	std	Y+1, r24	; 0x01
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	9a 81       	ldd	r25, Y+2	; 0x02
    3338:	fc 01       	movw	r30, r24
    333a:	82 81       	ldd	r24, Z+2	; 0x02
    333c:	93 81       	ldd	r25, Z+3	; 0x03
    333e:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    3342:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <vTaskPriorityInherit>:
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <vTaskPriorityInherit+0x6>
    3356:	00 d0       	rcall	.+0      	; 0x3358 <vTaskPriorityInherit+0x8>
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	9c 83       	std	Y+4, r25	; 0x04
    335e:	8b 83       	std	Y+3, r24	; 0x03
    3360:	8b 81       	ldd	r24, Y+3	; 0x03
    3362:	9c 81       	ldd	r25, Y+4	; 0x04
    3364:	9a 83       	std	Y+2, r25	; 0x02
    3366:	89 83       	std	Y+1, r24	; 0x01
    3368:	8b 81       	ldd	r24, Y+3	; 0x03
    336a:	9c 81       	ldd	r25, Y+4	; 0x04
    336c:	89 2b       	or	r24, r25
    336e:	09 f4       	brne	.+2      	; 0x3372 <vTaskPriorityInherit+0x22>
    3370:	7f c0       	rjmp	.+254    	; 0x3470 <vTaskPriorityInherit+0x120>
    3372:	89 81       	ldd	r24, Y+1	; 0x01
    3374:	9a 81       	ldd	r25, Y+2	; 0x02
    3376:	fc 01       	movw	r30, r24
    3378:	26 89       	ldd	r18, Z+22	; 0x16
    337a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    337e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3382:	fc 01       	movw	r30, r24
    3384:	86 89       	ldd	r24, Z+22	; 0x16
    3386:	28 17       	cp	r18, r24
    3388:	08 f0       	brcs	.+2      	; 0x338c <vTaskPriorityInherit+0x3c>
    338a:	72 c0       	rjmp	.+228    	; 0x3470 <vTaskPriorityInherit+0x120>
    338c:	89 81       	ldd	r24, Y+1	; 0x01
    338e:	9a 81       	ldd	r25, Y+2	; 0x02
    3390:	fc 01       	movw	r30, r24
    3392:	84 85       	ldd	r24, Z+12	; 0x0c
    3394:	95 85       	ldd	r25, Z+13	; 0x0d
    3396:	99 23       	and	r25, r25
    3398:	8c f0       	brlt	.+34     	; 0x33bc <vTaskPriorityInherit+0x6c>
    339a:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    339e:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    33a2:	fc 01       	movw	r30, r24
    33a4:	86 89       	ldd	r24, Z+22	; 0x16
    33a6:	88 2f       	mov	r24, r24
    33a8:	90 e0       	ldi	r25, 0x00	; 0
    33aa:	24 e0       	ldi	r18, 0x04	; 4
    33ac:	30 e0       	ldi	r19, 0x00	; 0
    33ae:	28 1b       	sub	r18, r24
    33b0:	39 0b       	sbc	r19, r25
    33b2:	89 81       	ldd	r24, Y+1	; 0x01
    33b4:	9a 81       	ldd	r25, Y+2	; 0x02
    33b6:	fc 01       	movw	r30, r24
    33b8:	35 87       	std	Z+13, r19	; 0x0d
    33ba:	24 87       	std	Z+12, r18	; 0x0c
    33bc:	89 81       	ldd	r24, Y+1	; 0x01
    33be:	9a 81       	ldd	r25, Y+2	; 0x02
    33c0:	fc 01       	movw	r30, r24
    33c2:	42 85       	ldd	r20, Z+10	; 0x0a
    33c4:	53 85       	ldd	r21, Z+11	; 0x0b
    33c6:	89 81       	ldd	r24, Y+1	; 0x01
    33c8:	9a 81       	ldd	r25, Y+2	; 0x02
    33ca:	fc 01       	movw	r30, r24
    33cc:	86 89       	ldd	r24, Z+22	; 0x16
    33ce:	28 2f       	mov	r18, r24
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	c9 01       	movw	r24, r18
    33d4:	88 0f       	add	r24, r24
    33d6:	99 1f       	adc	r25, r25
    33d8:	88 0f       	add	r24, r24
    33da:	99 1f       	adc	r25, r25
    33dc:	88 0f       	add	r24, r24
    33de:	99 1f       	adc	r25, r25
    33e0:	82 0f       	add	r24, r18
    33e2:	93 1f       	adc	r25, r19
    33e4:	84 58       	subi	r24, 0x84	; 132
    33e6:	9a 4f       	sbci	r25, 0xFA	; 250
    33e8:	48 17       	cp	r20, r24
    33ea:	59 07       	cpc	r21, r25
    33ec:	b9 f5       	brne	.+110    	; 0x345c <vTaskPriorityInherit+0x10c>
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	02 96       	adiw	r24, 0x02	; 2
    33f4:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    33f8:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    33fc:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3400:	fc 01       	movw	r30, r24
    3402:	26 89       	ldd	r18, Z+22	; 0x16
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	9a 81       	ldd	r25, Y+2	; 0x02
    3408:	fc 01       	movw	r30, r24
    340a:	26 8b       	std	Z+22, r18	; 0x16
    340c:	89 81       	ldd	r24, Y+1	; 0x01
    340e:	9a 81       	ldd	r25, Y+2	; 0x02
    3410:	fc 01       	movw	r30, r24
    3412:	96 89       	ldd	r25, Z+22	; 0x16
    3414:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    3418:	89 17       	cp	r24, r25
    341a:	30 f4       	brcc	.+12     	; 0x3428 <vTaskPriorityInherit+0xd8>
    341c:	89 81       	ldd	r24, Y+1	; 0x01
    341e:	9a 81       	ldd	r25, Y+2	; 0x02
    3420:	fc 01       	movw	r30, r24
    3422:	86 89       	ldd	r24, Z+22	; 0x16
    3424:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    3428:	89 81       	ldd	r24, Y+1	; 0x01
    342a:	9a 81       	ldd	r25, Y+2	; 0x02
    342c:	ac 01       	movw	r20, r24
    342e:	4e 5f       	subi	r20, 0xFE	; 254
    3430:	5f 4f       	sbci	r21, 0xFF	; 255
    3432:	89 81       	ldd	r24, Y+1	; 0x01
    3434:	9a 81       	ldd	r25, Y+2	; 0x02
    3436:	fc 01       	movw	r30, r24
    3438:	86 89       	ldd	r24, Z+22	; 0x16
    343a:	28 2f       	mov	r18, r24
    343c:	30 e0       	ldi	r19, 0x00	; 0
    343e:	c9 01       	movw	r24, r18
    3440:	88 0f       	add	r24, r24
    3442:	99 1f       	adc	r25, r25
    3444:	88 0f       	add	r24, r24
    3446:	99 1f       	adc	r25, r25
    3448:	88 0f       	add	r24, r24
    344a:	99 1f       	adc	r25, r25
    344c:	82 0f       	add	r24, r18
    344e:	93 1f       	adc	r25, r19
    3450:	84 58       	subi	r24, 0x84	; 132
    3452:	9a 4f       	sbci	r25, 0xFA	; 250
    3454:	ba 01       	movw	r22, r20
    3456:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    345a:	0a c0       	rjmp	.+20     	; 0x3470 <vTaskPriorityInherit+0x120>
    345c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3460:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3464:	fc 01       	movw	r30, r24
    3466:	26 89       	ldd	r18, Z+22	; 0x16
    3468:	89 81       	ldd	r24, Y+1	; 0x01
    346a:	9a 81       	ldd	r25, Y+2	; 0x02
    346c:	fc 01       	movw	r30, r24
    346e:	26 8b       	std	Z+22, r18	; 0x16
    3470:	0f 90       	pop	r0
    3472:	0f 90       	pop	r0
    3474:	0f 90       	pop	r0
    3476:	0f 90       	pop	r0
    3478:	df 91       	pop	r29
    347a:	cf 91       	pop	r28
    347c:	08 95       	ret

0000347e <xTaskPriorityDisinherit>:
    347e:	cf 93       	push	r28
    3480:	df 93       	push	r29
    3482:	00 d0       	rcall	.+0      	; 0x3484 <xTaskPriorityDisinherit+0x6>
    3484:	00 d0       	rcall	.+0      	; 0x3486 <xTaskPriorityDisinherit+0x8>
    3486:	1f 92       	push	r1
    3488:	cd b7       	in	r28, 0x3d	; 61
    348a:	de b7       	in	r29, 0x3e	; 62
    348c:	9d 83       	std	Y+5, r25	; 0x05
    348e:	8c 83       	std	Y+4, r24	; 0x04
    3490:	8c 81       	ldd	r24, Y+4	; 0x04
    3492:	9d 81       	ldd	r25, Y+5	; 0x05
    3494:	9b 83       	std	Y+3, r25	; 0x03
    3496:	8a 83       	std	Y+2, r24	; 0x02
    3498:	19 82       	std	Y+1, r1	; 0x01
    349a:	8c 81       	ldd	r24, Y+4	; 0x04
    349c:	9d 81       	ldd	r25, Y+5	; 0x05
    349e:	89 2b       	or	r24, r25
    34a0:	09 f4       	brne	.+2      	; 0x34a4 <xTaskPriorityDisinherit+0x26>
    34a2:	61 c0       	rjmp	.+194    	; 0x3566 <xTaskPriorityDisinherit+0xe8>
    34a4:	8a 81       	ldd	r24, Y+2	; 0x02
    34a6:	9b 81       	ldd	r25, Y+3	; 0x03
    34a8:	fc 01       	movw	r30, r24
    34aa:	84 a1       	ldd	r24, Z+36	; 0x24
    34ac:	2f ef       	ldi	r18, 0xFF	; 255
    34ae:	28 0f       	add	r18, r24
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	9b 81       	ldd	r25, Y+3	; 0x03
    34b4:	fc 01       	movw	r30, r24
    34b6:	24 a3       	std	Z+36, r18	; 0x24
    34b8:	8a 81       	ldd	r24, Y+2	; 0x02
    34ba:	9b 81       	ldd	r25, Y+3	; 0x03
    34bc:	fc 01       	movw	r30, r24
    34be:	26 89       	ldd	r18, Z+22	; 0x16
    34c0:	8a 81       	ldd	r24, Y+2	; 0x02
    34c2:	9b 81       	ldd	r25, Y+3	; 0x03
    34c4:	fc 01       	movw	r30, r24
    34c6:	83 a1       	ldd	r24, Z+35	; 0x23
    34c8:	28 17       	cp	r18, r24
    34ca:	09 f4       	brne	.+2      	; 0x34ce <xTaskPriorityDisinherit+0x50>
    34cc:	4c c0       	rjmp	.+152    	; 0x3566 <xTaskPriorityDisinherit+0xe8>
    34ce:	8a 81       	ldd	r24, Y+2	; 0x02
    34d0:	9b 81       	ldd	r25, Y+3	; 0x03
    34d2:	fc 01       	movw	r30, r24
    34d4:	84 a1       	ldd	r24, Z+36	; 0x24
    34d6:	88 23       	and	r24, r24
    34d8:	09 f0       	breq	.+2      	; 0x34dc <xTaskPriorityDisinherit+0x5e>
    34da:	45 c0       	rjmp	.+138    	; 0x3566 <xTaskPriorityDisinherit+0xe8>
    34dc:	8a 81       	ldd	r24, Y+2	; 0x02
    34de:	9b 81       	ldd	r25, Y+3	; 0x03
    34e0:	02 96       	adiw	r24, 0x02	; 2
    34e2:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
    34e6:	8a 81       	ldd	r24, Y+2	; 0x02
    34e8:	9b 81       	ldd	r25, Y+3	; 0x03
    34ea:	fc 01       	movw	r30, r24
    34ec:	23 a1       	ldd	r18, Z+35	; 0x23
    34ee:	8a 81       	ldd	r24, Y+2	; 0x02
    34f0:	9b 81       	ldd	r25, Y+3	; 0x03
    34f2:	fc 01       	movw	r30, r24
    34f4:	26 8b       	std	Z+22, r18	; 0x16
    34f6:	8a 81       	ldd	r24, Y+2	; 0x02
    34f8:	9b 81       	ldd	r25, Y+3	; 0x03
    34fa:	fc 01       	movw	r30, r24
    34fc:	86 89       	ldd	r24, Z+22	; 0x16
    34fe:	88 2f       	mov	r24, r24
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	24 e0       	ldi	r18, 0x04	; 4
    3504:	30 e0       	ldi	r19, 0x00	; 0
    3506:	28 1b       	sub	r18, r24
    3508:	39 0b       	sbc	r19, r25
    350a:	8a 81       	ldd	r24, Y+2	; 0x02
    350c:	9b 81       	ldd	r25, Y+3	; 0x03
    350e:	fc 01       	movw	r30, r24
    3510:	35 87       	std	Z+13, r19	; 0x0d
    3512:	24 87       	std	Z+12, r18	; 0x0c
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	9b 81       	ldd	r25, Y+3	; 0x03
    3518:	fc 01       	movw	r30, r24
    351a:	96 89       	ldd	r25, Z+22	; 0x16
    351c:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <uxTopReadyPriority>
    3520:	89 17       	cp	r24, r25
    3522:	30 f4       	brcc	.+12     	; 0x3530 <xTaskPriorityDisinherit+0xb2>
    3524:	8a 81       	ldd	r24, Y+2	; 0x02
    3526:	9b 81       	ldd	r25, Y+3	; 0x03
    3528:	fc 01       	movw	r30, r24
    352a:	86 89       	ldd	r24, Z+22	; 0x16
    352c:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <uxTopReadyPriority>
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	9b 81       	ldd	r25, Y+3	; 0x03
    3534:	ac 01       	movw	r20, r24
    3536:	4e 5f       	subi	r20, 0xFE	; 254
    3538:	5f 4f       	sbci	r21, 0xFF	; 255
    353a:	8a 81       	ldd	r24, Y+2	; 0x02
    353c:	9b 81       	ldd	r25, Y+3	; 0x03
    353e:	fc 01       	movw	r30, r24
    3540:	86 89       	ldd	r24, Z+22	; 0x16
    3542:	28 2f       	mov	r18, r24
    3544:	30 e0       	ldi	r19, 0x00	; 0
    3546:	c9 01       	movw	r24, r18
    3548:	88 0f       	add	r24, r24
    354a:	99 1f       	adc	r25, r25
    354c:	88 0f       	add	r24, r24
    354e:	99 1f       	adc	r25, r25
    3550:	88 0f       	add	r24, r24
    3552:	99 1f       	adc	r25, r25
    3554:	82 0f       	add	r24, r18
    3556:	93 1f       	adc	r25, r19
    3558:	84 58       	subi	r24, 0x84	; 132
    355a:	9a 4f       	sbci	r25, 0xFA	; 250
    355c:	ba 01       	movw	r22, r20
    355e:	0e 94 3d 07 	call	0xe7a	; 0xe7a <vListInsertEnd>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	89 83       	std	Y+1, r24	; 0x01
    3566:	89 81       	ldd	r24, Y+1	; 0x01
    3568:	0f 90       	pop	r0
    356a:	0f 90       	pop	r0
    356c:	0f 90       	pop	r0
    356e:	0f 90       	pop	r0
    3570:	0f 90       	pop	r0
    3572:	df 91       	pop	r29
    3574:	cf 91       	pop	r28
    3576:	08 95       	ret

00003578 <pvTaskIncrementMutexHeldCount>:
    3578:	cf 93       	push	r28
    357a:	df 93       	push	r29
    357c:	cd b7       	in	r28, 0x3d	; 61
    357e:	de b7       	in	r29, 0x3e	; 62
    3580:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3584:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3588:	89 2b       	or	r24, r25
    358a:	49 f0       	breq	.+18     	; 0x359e <pvTaskIncrementMutexHeldCount+0x26>
    358c:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3590:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3594:	fc 01       	movw	r30, r24
    3596:	24 a1       	ldd	r18, Z+36	; 0x24
    3598:	2f 5f       	subi	r18, 0xFF	; 255
    359a:	fc 01       	movw	r30, r24
    359c:	24 a3       	std	Z+36, r18	; 0x24
    359e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    35a2:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    35a6:	df 91       	pop	r29
    35a8:	cf 91       	pop	r28
    35aa:	08 95       	ret

000035ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
    35ac:	cf 93       	push	r28
    35ae:	df 93       	push	r29
    35b0:	cd b7       	in	r28, 0x3d	; 61
    35b2:	de b7       	in	r29, 0x3e	; 62
    35b4:	27 97       	sbiw	r28, 0x07	; 7
    35b6:	0f b6       	in	r0, 0x3f	; 63
    35b8:	f8 94       	cli
    35ba:	de bf       	out	0x3e, r29	; 62
    35bc:	0f be       	out	0x3f, r0	; 63
    35be:	cd bf       	out	0x3d, r28	; 61
    35c0:	9e 83       	std	Y+6, r25	; 0x06
    35c2:	8d 83       	std	Y+5, r24	; 0x05
    35c4:	6f 83       	std	Y+7, r22	; 0x07
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
    35c6:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <xTickCount>
    35ca:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <xTickCount+0x1>
    35ce:	9a 83       	std	Y+2, r25	; 0x02
    35d0:	89 83       	std	Y+1, r24	; 0x01
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
    35d2:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    35d6:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    35da:	02 96       	adiw	r24, 0x02	; 2
    35dc:	0e 94 02 08 	call	0x1004	; 0x1004 <uxListRemove>
	#else /* INCLUDE_vTaskSuspend */
	{
		/* Calculate the time at which the task should be woken if the event
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;
    35e0:	29 81       	ldd	r18, Y+1	; 0x01
    35e2:	3a 81       	ldd	r19, Y+2	; 0x02
    35e4:	8d 81       	ldd	r24, Y+5	; 0x05
    35e6:	9e 81       	ldd	r25, Y+6	; 0x06
    35e8:	82 0f       	add	r24, r18
    35ea:	93 1f       	adc	r25, r19
    35ec:	9c 83       	std	Y+4, r25	; 0x04
    35ee:	8b 83       	std	Y+3, r24	; 0x03

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
    35f0:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    35f4:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    35f8:	2b 81       	ldd	r18, Y+3	; 0x03
    35fa:	3c 81       	ldd	r19, Y+4	; 0x04
    35fc:	fc 01       	movw	r30, r24
    35fe:	33 83       	std	Z+3, r19	; 0x03
    3600:	22 83       	std	Z+2, r18	; 0x02

		if( xTimeToWake < xConstTickCount )
    3602:	2b 81       	ldd	r18, Y+3	; 0x03
    3604:	3c 81       	ldd	r19, Y+4	; 0x04
    3606:	89 81       	ldd	r24, Y+1	; 0x01
    3608:	9a 81       	ldd	r25, Y+2	; 0x02
    360a:	28 17       	cp	r18, r24
    360c:	39 07       	cpc	r19, r25
    360e:	78 f4       	brcc	.+30     	; 0x362e <prvAddCurrentTaskToDelayedList+0x82>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    3610:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3614:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3618:	9c 01       	movw	r18, r24
    361a:	2e 5f       	subi	r18, 0xFE	; 254
    361c:	3f 4f       	sbci	r19, 0xFF	; 255
    361e:	80 91 b4 05 	lds	r24, 0x05B4	; 0x8005b4 <pxOverflowDelayedTaskList>
    3622:	90 91 b5 05 	lds	r25, 0x05B5	; 0x8005b5 <pxOverflowDelayedTaskList+0x1>
    3626:	b9 01       	movw	r22, r18
    3628:	0e 94 8b 07 	call	0xf16	; 0xf16 <vListInsert>
    362c:	1d c0       	rjmp	.+58     	; 0x3668 <prvAddCurrentTaskToDelayedList+0xbc>
		}
		else
		{
			/* The wake time has not overflowed, so the current block list is used. */
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
    362e:	80 91 7a 05 	lds	r24, 0x057A	; 0x80057a <pxCurrentTCB>
    3632:	90 91 7b 05 	lds	r25, 0x057B	; 0x80057b <pxCurrentTCB+0x1>
    3636:	9c 01       	movw	r18, r24
    3638:	2e 5f       	subi	r18, 0xFE	; 254
    363a:	3f 4f       	sbci	r19, 0xFF	; 255
    363c:	80 91 b2 05 	lds	r24, 0x05B2	; 0x8005b2 <pxDelayedTaskList>
    3640:	90 91 b3 05 	lds	r25, 0x05B3	; 0x8005b3 <pxDelayedTaskList+0x1>
    3644:	b9 01       	movw	r22, r18
    3646:	0e 94 8b 07 	call	0xf16	; 0xf16 <vListInsert>

			/* If the task entering the blocked state was placed at the head of the
			list of blocked tasks then xNextTaskUnblockTime needs to be updated
			too. */
			if( xTimeToWake < xNextTaskUnblockTime )
    364a:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <xNextTaskUnblockTime>
    364e:	90 91 d3 05 	lds	r25, 0x05D3	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    3652:	2b 81       	ldd	r18, Y+3	; 0x03
    3654:	3c 81       	ldd	r19, Y+4	; 0x04
    3656:	28 17       	cp	r18, r24
    3658:	39 07       	cpc	r19, r25
    365a:	30 f4       	brcc	.+12     	; 0x3668 <prvAddCurrentTaskToDelayedList+0xbc>
			{
				xNextTaskUnblockTime = xTimeToWake;
    365c:	8b 81       	ldd	r24, Y+3	; 0x03
    365e:	9c 81       	ldd	r25, Y+4	; 0x04
    3660:	90 93 d3 05 	sts	0x05D3, r25	; 0x8005d3 <xNextTaskUnblockTime+0x1>
    3664:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <xNextTaskUnblockTime>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
    3668:	27 96       	adiw	r28, 0x07	; 7
    366a:	0f b6       	in	r0, 0x3f	; 63
    366c:	f8 94       	cli
    366e:	de bf       	out	0x3e, r29	; 62
    3670:	0f be       	out	0x3f, r0	; 63
    3672:	cd bf       	out	0x3d, r28	; 61
    3674:	df 91       	pop	r29
    3676:	cf 91       	pop	r28
    3678:	08 95       	ret

0000367a <__divmodhi4>:
    367a:	97 fb       	bst	r25, 7
    367c:	07 2e       	mov	r0, r23
    367e:	16 f4       	brtc	.+4      	; 0x3684 <__divmodhi4+0xa>
    3680:	00 94       	com	r0
    3682:	07 d0       	rcall	.+14     	; 0x3692 <__divmodhi4_neg1>
    3684:	77 fd       	sbrc	r23, 7
    3686:	09 d0       	rcall	.+18     	; 0x369a <__divmodhi4_neg2>
    3688:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <__udivmodhi4>
    368c:	07 fc       	sbrc	r0, 7
    368e:	05 d0       	rcall	.+10     	; 0x369a <__divmodhi4_neg2>
    3690:	3e f4       	brtc	.+14     	; 0x36a0 <__divmodhi4_exit>

00003692 <__divmodhi4_neg1>:
    3692:	90 95       	com	r25
    3694:	81 95       	neg	r24
    3696:	9f 4f       	sbci	r25, 0xFF	; 255
    3698:	08 95       	ret

0000369a <__divmodhi4_neg2>:
    369a:	70 95       	com	r23
    369c:	61 95       	neg	r22
    369e:	7f 4f       	sbci	r23, 0xFF	; 255

000036a0 <__divmodhi4_exit>:
    36a0:	08 95       	ret

000036a2 <__udivmodsi4>:
    36a2:	a1 e2       	ldi	r26, 0x21	; 33
    36a4:	1a 2e       	mov	r1, r26
    36a6:	aa 1b       	sub	r26, r26
    36a8:	bb 1b       	sub	r27, r27
    36aa:	fd 01       	movw	r30, r26
    36ac:	0d c0       	rjmp	.+26     	; 0x36c8 <__udivmodsi4_ep>

000036ae <__udivmodsi4_loop>:
    36ae:	aa 1f       	adc	r26, r26
    36b0:	bb 1f       	adc	r27, r27
    36b2:	ee 1f       	adc	r30, r30
    36b4:	ff 1f       	adc	r31, r31
    36b6:	a2 17       	cp	r26, r18
    36b8:	b3 07       	cpc	r27, r19
    36ba:	e4 07       	cpc	r30, r20
    36bc:	f5 07       	cpc	r31, r21
    36be:	20 f0       	brcs	.+8      	; 0x36c8 <__udivmodsi4_ep>
    36c0:	a2 1b       	sub	r26, r18
    36c2:	b3 0b       	sbc	r27, r19
    36c4:	e4 0b       	sbc	r30, r20
    36c6:	f5 0b       	sbc	r31, r21

000036c8 <__udivmodsi4_ep>:
    36c8:	66 1f       	adc	r22, r22
    36ca:	77 1f       	adc	r23, r23
    36cc:	88 1f       	adc	r24, r24
    36ce:	99 1f       	adc	r25, r25
    36d0:	1a 94       	dec	r1
    36d2:	69 f7       	brne	.-38     	; 0x36ae <__udivmodsi4_loop>
    36d4:	60 95       	com	r22
    36d6:	70 95       	com	r23
    36d8:	80 95       	com	r24
    36da:	90 95       	com	r25
    36dc:	9b 01       	movw	r18, r22
    36de:	ac 01       	movw	r20, r24
    36e0:	bd 01       	movw	r22, r26
    36e2:	cf 01       	movw	r24, r30
    36e4:	08 95       	ret

000036e6 <__tablejump2__>:
    36e6:	ee 0f       	add	r30, r30
    36e8:	ff 1f       	adc	r31, r31
    36ea:	05 90       	lpm	r0, Z+
    36ec:	f4 91       	lpm	r31, Z
    36ee:	e0 2d       	mov	r30, r0
    36f0:	09 94       	ijmp

000036f2 <__udivmodhi4>:
    36f2:	aa 1b       	sub	r26, r26
    36f4:	bb 1b       	sub	r27, r27
    36f6:	51 e1       	ldi	r21, 0x11	; 17
    36f8:	07 c0       	rjmp	.+14     	; 0x3708 <__udivmodhi4_ep>

000036fa <__udivmodhi4_loop>:
    36fa:	aa 1f       	adc	r26, r26
    36fc:	bb 1f       	adc	r27, r27
    36fe:	a6 17       	cp	r26, r22
    3700:	b7 07       	cpc	r27, r23
    3702:	10 f0       	brcs	.+4      	; 0x3708 <__udivmodhi4_ep>
    3704:	a6 1b       	sub	r26, r22
    3706:	b7 0b       	sbc	r27, r23

00003708 <__udivmodhi4_ep>:
    3708:	88 1f       	adc	r24, r24
    370a:	99 1f       	adc	r25, r25
    370c:	5a 95       	dec	r21
    370e:	a9 f7       	brne	.-22     	; 0x36fa <__udivmodhi4_loop>
    3710:	80 95       	com	r24
    3712:	90 95       	com	r25
    3714:	bc 01       	movw	r22, r24
    3716:	cd 01       	movw	r24, r26
    3718:	08 95       	ret

0000371a <malloc>:
    371a:	cf 93       	push	r28
    371c:	df 93       	push	r29
    371e:	82 30       	cpi	r24, 0x02	; 2
    3720:	91 05       	cpc	r25, r1
    3722:	10 f4       	brcc	.+4      	; 0x3728 <malloc+0xe>
    3724:	82 e0       	ldi	r24, 0x02	; 2
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	e0 91 d9 05 	lds	r30, 0x05D9	; 0x8005d9 <__flp>
    372c:	f0 91 da 05 	lds	r31, 0x05DA	; 0x8005da <__flp+0x1>
    3730:	20 e0       	ldi	r18, 0x00	; 0
    3732:	30 e0       	ldi	r19, 0x00	; 0
    3734:	c0 e0       	ldi	r28, 0x00	; 0
    3736:	d0 e0       	ldi	r29, 0x00	; 0
    3738:	30 97       	sbiw	r30, 0x00	; 0
    373a:	11 f1       	breq	.+68     	; 0x3780 <malloc+0x66>
    373c:	40 81       	ld	r20, Z
    373e:	51 81       	ldd	r21, Z+1	; 0x01
    3740:	48 17       	cp	r20, r24
    3742:	59 07       	cpc	r21, r25
    3744:	c0 f0       	brcs	.+48     	; 0x3776 <malloc+0x5c>
    3746:	48 17       	cp	r20, r24
    3748:	59 07       	cpc	r21, r25
    374a:	61 f4       	brne	.+24     	; 0x3764 <malloc+0x4a>
    374c:	82 81       	ldd	r24, Z+2	; 0x02
    374e:	93 81       	ldd	r25, Z+3	; 0x03
    3750:	20 97       	sbiw	r28, 0x00	; 0
    3752:	19 f0       	breq	.+6      	; 0x375a <malloc+0x40>
    3754:	9b 83       	std	Y+3, r25	; 0x03
    3756:	8a 83       	std	Y+2, r24	; 0x02
    3758:	2b c0       	rjmp	.+86     	; 0x37b0 <malloc+0x96>
    375a:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <__flp+0x1>
    375e:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <__flp>
    3762:	26 c0       	rjmp	.+76     	; 0x37b0 <malloc+0x96>
    3764:	21 15       	cp	r18, r1
    3766:	31 05       	cpc	r19, r1
    3768:	19 f0       	breq	.+6      	; 0x3770 <malloc+0x56>
    376a:	42 17       	cp	r20, r18
    376c:	53 07       	cpc	r21, r19
    376e:	18 f4       	brcc	.+6      	; 0x3776 <malloc+0x5c>
    3770:	9a 01       	movw	r18, r20
    3772:	be 01       	movw	r22, r28
    3774:	df 01       	movw	r26, r30
    3776:	ef 01       	movw	r28, r30
    3778:	02 80       	ldd	r0, Z+2	; 0x02
    377a:	f3 81       	ldd	r31, Z+3	; 0x03
    377c:	e0 2d       	mov	r30, r0
    377e:	dc cf       	rjmp	.-72     	; 0x3738 <malloc+0x1e>
    3780:	21 15       	cp	r18, r1
    3782:	31 05       	cpc	r19, r1
    3784:	09 f1       	breq	.+66     	; 0x37c8 <malloc+0xae>
    3786:	28 1b       	sub	r18, r24
    3788:	39 0b       	sbc	r19, r25
    378a:	24 30       	cpi	r18, 0x04	; 4
    378c:	31 05       	cpc	r19, r1
    378e:	90 f4       	brcc	.+36     	; 0x37b4 <malloc+0x9a>
    3790:	12 96       	adiw	r26, 0x02	; 2
    3792:	8d 91       	ld	r24, X+
    3794:	9c 91       	ld	r25, X
    3796:	13 97       	sbiw	r26, 0x03	; 3
    3798:	61 15       	cp	r22, r1
    379a:	71 05       	cpc	r23, r1
    379c:	21 f0       	breq	.+8      	; 0x37a6 <malloc+0x8c>
    379e:	fb 01       	movw	r30, r22
    37a0:	93 83       	std	Z+3, r25	; 0x03
    37a2:	82 83       	std	Z+2, r24	; 0x02
    37a4:	04 c0       	rjmp	.+8      	; 0x37ae <malloc+0x94>
    37a6:	90 93 da 05 	sts	0x05DA, r25	; 0x8005da <__flp+0x1>
    37aa:	80 93 d9 05 	sts	0x05D9, r24	; 0x8005d9 <__flp>
    37ae:	fd 01       	movw	r30, r26
    37b0:	32 96       	adiw	r30, 0x02	; 2
    37b2:	44 c0       	rjmp	.+136    	; 0x383c <malloc+0x122>
    37b4:	fd 01       	movw	r30, r26
    37b6:	e2 0f       	add	r30, r18
    37b8:	f3 1f       	adc	r31, r19
    37ba:	81 93       	st	Z+, r24
    37bc:	91 93       	st	Z+, r25
    37be:	22 50       	subi	r18, 0x02	; 2
    37c0:	31 09       	sbc	r19, r1
    37c2:	2d 93       	st	X+, r18
    37c4:	3c 93       	st	X, r19
    37c6:	3a c0       	rjmp	.+116    	; 0x383c <malloc+0x122>
    37c8:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    37cc:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    37d0:	23 2b       	or	r18, r19
    37d2:	41 f4       	brne	.+16     	; 0x37e4 <malloc+0xca>
    37d4:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    37d8:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    37dc:	30 93 d8 05 	sts	0x05D8, r19	; 0x8005d8 <__brkval+0x1>
    37e0:	20 93 d7 05 	sts	0x05D7, r18	; 0x8005d7 <__brkval>
    37e4:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__data_start>
    37e8:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__data_start+0x1>
    37ec:	21 15       	cp	r18, r1
    37ee:	31 05       	cpc	r19, r1
    37f0:	41 f4       	brne	.+16     	; 0x3802 <malloc+0xe8>
    37f2:	2d b7       	in	r18, 0x3d	; 61
    37f4:	3e b7       	in	r19, 0x3e	; 62
    37f6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    37fa:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    37fe:	24 1b       	sub	r18, r20
    3800:	35 0b       	sbc	r19, r21
    3802:	e0 91 d7 05 	lds	r30, 0x05D7	; 0x8005d7 <__brkval>
    3806:	f0 91 d8 05 	lds	r31, 0x05D8	; 0x8005d8 <__brkval+0x1>
    380a:	e2 17       	cp	r30, r18
    380c:	f3 07       	cpc	r31, r19
    380e:	a0 f4       	brcc	.+40     	; 0x3838 <malloc+0x11e>
    3810:	2e 1b       	sub	r18, r30
    3812:	3f 0b       	sbc	r19, r31
    3814:	28 17       	cp	r18, r24
    3816:	39 07       	cpc	r19, r25
    3818:	78 f0       	brcs	.+30     	; 0x3838 <malloc+0x11e>
    381a:	ac 01       	movw	r20, r24
    381c:	4e 5f       	subi	r20, 0xFE	; 254
    381e:	5f 4f       	sbci	r21, 0xFF	; 255
    3820:	24 17       	cp	r18, r20
    3822:	35 07       	cpc	r19, r21
    3824:	48 f0       	brcs	.+18     	; 0x3838 <malloc+0x11e>
    3826:	4e 0f       	add	r20, r30
    3828:	5f 1f       	adc	r21, r31
    382a:	50 93 d8 05 	sts	0x05D8, r21	; 0x8005d8 <__brkval+0x1>
    382e:	40 93 d7 05 	sts	0x05D7, r20	; 0x8005d7 <__brkval>
    3832:	81 93       	st	Z+, r24
    3834:	91 93       	st	Z+, r25
    3836:	02 c0       	rjmp	.+4      	; 0x383c <malloc+0x122>
    3838:	e0 e0       	ldi	r30, 0x00	; 0
    383a:	f0 e0       	ldi	r31, 0x00	; 0
    383c:	cf 01       	movw	r24, r30
    383e:	df 91       	pop	r29
    3840:	cf 91       	pop	r28
    3842:	08 95       	ret

00003844 <free>:
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	cf 93       	push	r28
    384a:	df 93       	push	r29
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	09 f4       	brne	.+2      	; 0x3852 <free+0xe>
    3850:	8c c0       	rjmp	.+280    	; 0x396a <free+0x126>
    3852:	fc 01       	movw	r30, r24
    3854:	32 97       	sbiw	r30, 0x02	; 2
    3856:	13 82       	std	Z+3, r1	; 0x03
    3858:	12 82       	std	Z+2, r1	; 0x02
    385a:	00 91 d9 05 	lds	r16, 0x05D9	; 0x8005d9 <__flp>
    385e:	10 91 da 05 	lds	r17, 0x05DA	; 0x8005da <__flp+0x1>
    3862:	01 15       	cp	r16, r1
    3864:	11 05       	cpc	r17, r1
    3866:	81 f4       	brne	.+32     	; 0x3888 <free+0x44>
    3868:	20 81       	ld	r18, Z
    386a:	31 81       	ldd	r19, Z+1	; 0x01
    386c:	82 0f       	add	r24, r18
    386e:	93 1f       	adc	r25, r19
    3870:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    3874:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    3878:	28 17       	cp	r18, r24
    387a:	39 07       	cpc	r19, r25
    387c:	79 f5       	brne	.+94     	; 0x38dc <free+0x98>
    387e:	f0 93 d8 05 	sts	0x05D8, r31	; 0x8005d8 <__brkval+0x1>
    3882:	e0 93 d7 05 	sts	0x05D7, r30	; 0x8005d7 <__brkval>
    3886:	71 c0       	rjmp	.+226    	; 0x396a <free+0x126>
    3888:	d8 01       	movw	r26, r16
    388a:	40 e0       	ldi	r20, 0x00	; 0
    388c:	50 e0       	ldi	r21, 0x00	; 0
    388e:	ae 17       	cp	r26, r30
    3890:	bf 07       	cpc	r27, r31
    3892:	50 f4       	brcc	.+20     	; 0x38a8 <free+0x64>
    3894:	12 96       	adiw	r26, 0x02	; 2
    3896:	2d 91       	ld	r18, X+
    3898:	3c 91       	ld	r19, X
    389a:	13 97       	sbiw	r26, 0x03	; 3
    389c:	ad 01       	movw	r20, r26
    389e:	21 15       	cp	r18, r1
    38a0:	31 05       	cpc	r19, r1
    38a2:	09 f1       	breq	.+66     	; 0x38e6 <free+0xa2>
    38a4:	d9 01       	movw	r26, r18
    38a6:	f3 cf       	rjmp	.-26     	; 0x388e <free+0x4a>
    38a8:	9d 01       	movw	r18, r26
    38aa:	da 01       	movw	r26, r20
    38ac:	33 83       	std	Z+3, r19	; 0x03
    38ae:	22 83       	std	Z+2, r18	; 0x02
    38b0:	60 81       	ld	r22, Z
    38b2:	71 81       	ldd	r23, Z+1	; 0x01
    38b4:	86 0f       	add	r24, r22
    38b6:	97 1f       	adc	r25, r23
    38b8:	82 17       	cp	r24, r18
    38ba:	93 07       	cpc	r25, r19
    38bc:	69 f4       	brne	.+26     	; 0x38d8 <free+0x94>
    38be:	ec 01       	movw	r28, r24
    38c0:	28 81       	ld	r18, Y
    38c2:	39 81       	ldd	r19, Y+1	; 0x01
    38c4:	26 0f       	add	r18, r22
    38c6:	37 1f       	adc	r19, r23
    38c8:	2e 5f       	subi	r18, 0xFE	; 254
    38ca:	3f 4f       	sbci	r19, 0xFF	; 255
    38cc:	31 83       	std	Z+1, r19	; 0x01
    38ce:	20 83       	st	Z, r18
    38d0:	8a 81       	ldd	r24, Y+2	; 0x02
    38d2:	9b 81       	ldd	r25, Y+3	; 0x03
    38d4:	93 83       	std	Z+3, r25	; 0x03
    38d6:	82 83       	std	Z+2, r24	; 0x02
    38d8:	45 2b       	or	r20, r21
    38da:	29 f4       	brne	.+10     	; 0x38e6 <free+0xa2>
    38dc:	f0 93 da 05 	sts	0x05DA, r31	; 0x8005da <__flp+0x1>
    38e0:	e0 93 d9 05 	sts	0x05D9, r30	; 0x8005d9 <__flp>
    38e4:	42 c0       	rjmp	.+132    	; 0x396a <free+0x126>
    38e6:	13 96       	adiw	r26, 0x03	; 3
    38e8:	fc 93       	st	X, r31
    38ea:	ee 93       	st	-X, r30
    38ec:	12 97       	sbiw	r26, 0x02	; 2
    38ee:	ed 01       	movw	r28, r26
    38f0:	49 91       	ld	r20, Y+
    38f2:	59 91       	ld	r21, Y+
    38f4:	9e 01       	movw	r18, r28
    38f6:	24 0f       	add	r18, r20
    38f8:	35 1f       	adc	r19, r21
    38fa:	e2 17       	cp	r30, r18
    38fc:	f3 07       	cpc	r31, r19
    38fe:	71 f4       	brne	.+28     	; 0x391c <free+0xd8>
    3900:	80 81       	ld	r24, Z
    3902:	91 81       	ldd	r25, Z+1	; 0x01
    3904:	84 0f       	add	r24, r20
    3906:	95 1f       	adc	r25, r21
    3908:	02 96       	adiw	r24, 0x02	; 2
    390a:	11 96       	adiw	r26, 0x01	; 1
    390c:	9c 93       	st	X, r25
    390e:	8e 93       	st	-X, r24
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	93 81       	ldd	r25, Z+3	; 0x03
    3914:	13 96       	adiw	r26, 0x03	; 3
    3916:	9c 93       	st	X, r25
    3918:	8e 93       	st	-X, r24
    391a:	12 97       	sbiw	r26, 0x02	; 2
    391c:	e0 e0       	ldi	r30, 0x00	; 0
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	d8 01       	movw	r26, r16
    3922:	12 96       	adiw	r26, 0x02	; 2
    3924:	8d 91       	ld	r24, X+
    3926:	9c 91       	ld	r25, X
    3928:	13 97       	sbiw	r26, 0x03	; 3
    392a:	00 97       	sbiw	r24, 0x00	; 0
    392c:	19 f0       	breq	.+6      	; 0x3934 <free+0xf0>
    392e:	f8 01       	movw	r30, r16
    3930:	8c 01       	movw	r16, r24
    3932:	f6 cf       	rjmp	.-20     	; 0x3920 <free+0xdc>
    3934:	8d 91       	ld	r24, X+
    3936:	9c 91       	ld	r25, X
    3938:	98 01       	movw	r18, r16
    393a:	2e 5f       	subi	r18, 0xFE	; 254
    393c:	3f 4f       	sbci	r19, 0xFF	; 255
    393e:	82 0f       	add	r24, r18
    3940:	93 1f       	adc	r25, r19
    3942:	20 91 d7 05 	lds	r18, 0x05D7	; 0x8005d7 <__brkval>
    3946:	30 91 d8 05 	lds	r19, 0x05D8	; 0x8005d8 <__brkval+0x1>
    394a:	28 17       	cp	r18, r24
    394c:	39 07       	cpc	r19, r25
    394e:	69 f4       	brne	.+26     	; 0x396a <free+0x126>
    3950:	30 97       	sbiw	r30, 0x00	; 0
    3952:	29 f4       	brne	.+10     	; 0x395e <free+0x11a>
    3954:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <__flp+0x1>
    3958:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <__flp>
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <free+0x11e>
    395e:	13 82       	std	Z+3, r1	; 0x03
    3960:	12 82       	std	Z+2, r1	; 0x02
    3962:	10 93 d8 05 	sts	0x05D8, r17	; 0x8005d8 <__brkval+0x1>
    3966:	00 93 d7 05 	sts	0x05D7, r16	; 0x8005d7 <__brkval>
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	1f 91       	pop	r17
    3970:	0f 91       	pop	r16
    3972:	08 95       	ret

00003974 <do_rand>:
    3974:	8f 92       	push	r8
    3976:	9f 92       	push	r9
    3978:	af 92       	push	r10
    397a:	bf 92       	push	r11
    397c:	cf 92       	push	r12
    397e:	df 92       	push	r13
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	ec 01       	movw	r28, r24
    398a:	68 81       	ld	r22, Y
    398c:	79 81       	ldd	r23, Y+1	; 0x01
    398e:	8a 81       	ldd	r24, Y+2	; 0x02
    3990:	9b 81       	ldd	r25, Y+3	; 0x03
    3992:	61 15       	cp	r22, r1
    3994:	71 05       	cpc	r23, r1
    3996:	81 05       	cpc	r24, r1
    3998:	91 05       	cpc	r25, r1
    399a:	21 f4       	brne	.+8      	; 0x39a4 <do_rand+0x30>
    399c:	64 e2       	ldi	r22, 0x24	; 36
    399e:	79 ed       	ldi	r23, 0xD9	; 217
    39a0:	8b e5       	ldi	r24, 0x5B	; 91
    39a2:	97 e0       	ldi	r25, 0x07	; 7
    39a4:	2d e1       	ldi	r18, 0x1D	; 29
    39a6:	33 ef       	ldi	r19, 0xF3	; 243
    39a8:	41 e0       	ldi	r20, 0x01	; 1
    39aa:	50 e0       	ldi	r21, 0x00	; 0
    39ac:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <__divmodsi4>
    39b0:	49 01       	movw	r8, r18
    39b2:	5a 01       	movw	r10, r20
    39b4:	9b 01       	movw	r18, r22
    39b6:	ac 01       	movw	r20, r24
    39b8:	a7 ea       	ldi	r26, 0xA7	; 167
    39ba:	b1 e4       	ldi	r27, 0x41	; 65
    39bc:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__muluhisi3>
    39c0:	6b 01       	movw	r12, r22
    39c2:	7c 01       	movw	r14, r24
    39c4:	ac ee       	ldi	r26, 0xEC	; 236
    39c6:	b4 ef       	ldi	r27, 0xF4	; 244
    39c8:	a5 01       	movw	r20, r10
    39ca:	94 01       	movw	r18, r8
    39cc:	0e 94 53 1d 	call	0x3aa6	; 0x3aa6 <__mulohisi3>
    39d0:	dc 01       	movw	r26, r24
    39d2:	cb 01       	movw	r24, r22
    39d4:	8c 0d       	add	r24, r12
    39d6:	9d 1d       	adc	r25, r13
    39d8:	ae 1d       	adc	r26, r14
    39da:	bf 1d       	adc	r27, r15
    39dc:	b7 ff       	sbrs	r27, 7
    39de:	03 c0       	rjmp	.+6      	; 0x39e6 <do_rand+0x72>
    39e0:	01 97       	sbiw	r24, 0x01	; 1
    39e2:	a1 09       	sbc	r26, r1
    39e4:	b0 48       	sbci	r27, 0x80	; 128
    39e6:	88 83       	st	Y, r24
    39e8:	99 83       	std	Y+1, r25	; 0x01
    39ea:	aa 83       	std	Y+2, r26	; 0x02
    39ec:	bb 83       	std	Y+3, r27	; 0x03
    39ee:	9f 77       	andi	r25, 0x7F	; 127
    39f0:	df 91       	pop	r29
    39f2:	cf 91       	pop	r28
    39f4:	ff 90       	pop	r15
    39f6:	ef 90       	pop	r14
    39f8:	df 90       	pop	r13
    39fa:	cf 90       	pop	r12
    39fc:	bf 90       	pop	r11
    39fe:	af 90       	pop	r10
    3a00:	9f 90       	pop	r9
    3a02:	8f 90       	pop	r8
    3a04:	08 95       	ret

00003a06 <rand_r>:
    3a06:	0e 94 ba 1c 	call	0x3974	; 0x3974 <do_rand>
    3a0a:	08 95       	ret

00003a0c <rand>:
    3a0c:	86 e0       	ldi	r24, 0x06	; 6
    3a0e:	91 e0       	ldi	r25, 0x01	; 1
    3a10:	0e 94 ba 1c 	call	0x3974	; 0x3974 <do_rand>
    3a14:	08 95       	ret

00003a16 <srand>:
    3a16:	a0 e0       	ldi	r26, 0x00	; 0
    3a18:	b0 e0       	ldi	r27, 0x00	; 0
    3a1a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <next>
    3a1e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <next+0x1>
    3a22:	a0 93 08 01 	sts	0x0108, r26	; 0x800108 <next+0x2>
    3a26:	b0 93 09 01 	sts	0x0109, r27	; 0x800109 <next+0x3>
    3a2a:	08 95       	ret

00003a2c <memcpy>:
    3a2c:	fb 01       	movw	r30, r22
    3a2e:	dc 01       	movw	r26, r24
    3a30:	02 c0       	rjmp	.+4      	; 0x3a36 <memcpy+0xa>
    3a32:	01 90       	ld	r0, Z+
    3a34:	0d 92       	st	X+, r0
    3a36:	41 50       	subi	r20, 0x01	; 1
    3a38:	50 40       	sbci	r21, 0x00	; 0
    3a3a:	d8 f7       	brcc	.-10     	; 0x3a32 <memcpy+0x6>
    3a3c:	08 95       	ret

00003a3e <memset>:
    3a3e:	dc 01       	movw	r26, r24
    3a40:	01 c0       	rjmp	.+2      	; 0x3a44 <memset+0x6>
    3a42:	6d 93       	st	X+, r22
    3a44:	41 50       	subi	r20, 0x01	; 1
    3a46:	50 40       	sbci	r21, 0x00	; 0
    3a48:	e0 f7       	brcc	.-8      	; 0x3a42 <memset+0x4>
    3a4a:	08 95       	ret

00003a4c <__divmodsi4>:
    3a4c:	05 2e       	mov	r0, r21
    3a4e:	97 fb       	bst	r25, 7
    3a50:	1e f4       	brtc	.+6      	; 0x3a58 <__divmodsi4+0xc>
    3a52:	00 94       	com	r0
    3a54:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <__negsi2>
    3a58:	57 fd       	sbrc	r21, 7
    3a5a:	07 d0       	rcall	.+14     	; 0x3a6a <__divmodsi4_neg2>
    3a5c:	0e 94 51 1b 	call	0x36a2	; 0x36a2 <__udivmodsi4>
    3a60:	07 fc       	sbrc	r0, 7
    3a62:	03 d0       	rcall	.+6      	; 0x3a6a <__divmodsi4_neg2>
    3a64:	4e f4       	brtc	.+18     	; 0x3a78 <__divmodsi4_exit>
    3a66:	0c 94 3d 1d 	jmp	0x3a7a	; 0x3a7a <__negsi2>

00003a6a <__divmodsi4_neg2>:
    3a6a:	50 95       	com	r21
    3a6c:	40 95       	com	r20
    3a6e:	30 95       	com	r19
    3a70:	21 95       	neg	r18
    3a72:	3f 4f       	sbci	r19, 0xFF	; 255
    3a74:	4f 4f       	sbci	r20, 0xFF	; 255
    3a76:	5f 4f       	sbci	r21, 0xFF	; 255

00003a78 <__divmodsi4_exit>:
    3a78:	08 95       	ret

00003a7a <__negsi2>:
    3a7a:	90 95       	com	r25
    3a7c:	80 95       	com	r24
    3a7e:	70 95       	com	r23
    3a80:	61 95       	neg	r22
    3a82:	7f 4f       	sbci	r23, 0xFF	; 255
    3a84:	8f 4f       	sbci	r24, 0xFF	; 255
    3a86:	9f 4f       	sbci	r25, 0xFF	; 255
    3a88:	08 95       	ret

00003a8a <__muluhisi3>:
    3a8a:	0e 94 58 1d 	call	0x3ab0	; 0x3ab0 <__umulhisi3>
    3a8e:	a5 9f       	mul	r26, r21
    3a90:	90 0d       	add	r25, r0
    3a92:	b4 9f       	mul	r27, r20
    3a94:	90 0d       	add	r25, r0
    3a96:	a4 9f       	mul	r26, r20
    3a98:	80 0d       	add	r24, r0
    3a9a:	91 1d       	adc	r25, r1
    3a9c:	11 24       	eor	r1, r1
    3a9e:	08 95       	ret

00003aa0 <__mulshisi3>:
    3aa0:	b7 ff       	sbrs	r27, 7
    3aa2:	0c 94 45 1d 	jmp	0x3a8a	; 0x3a8a <__muluhisi3>

00003aa6 <__mulohisi3>:
    3aa6:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <__muluhisi3>
    3aaa:	82 1b       	sub	r24, r18
    3aac:	93 0b       	sbc	r25, r19
    3aae:	08 95       	ret

00003ab0 <__umulhisi3>:
    3ab0:	a2 9f       	mul	r26, r18
    3ab2:	b0 01       	movw	r22, r0
    3ab4:	b3 9f       	mul	r27, r19
    3ab6:	c0 01       	movw	r24, r0
    3ab8:	a3 9f       	mul	r26, r19
    3aba:	70 0d       	add	r23, r0
    3abc:	81 1d       	adc	r24, r1
    3abe:	11 24       	eor	r1, r1
    3ac0:	91 1d       	adc	r25, r1
    3ac2:	b2 9f       	mul	r27, r18
    3ac4:	70 0d       	add	r23, r0
    3ac6:	81 1d       	adc	r24, r1
    3ac8:	11 24       	eor	r1, r1
    3aca:	91 1d       	adc	r25, r1
    3acc:	08 95       	ret

00003ace <_exit>:
    3ace:	f8 94       	cli

00003ad0 <__stop_program>:
    3ad0:	ff cf       	rjmp	.-2      	; 0x3ad0 <__stop_program>
